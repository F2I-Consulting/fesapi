/* gsoap_eml2_1Stub.h
   Generated by gSOAP 2.8.81 for eml2_1ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_eml21	"http://www.energistics.org/energyml/data/commonv2"
#define SOAP_NAMESPACE_OF_gml	"http://www.opengis.net/gml/3.2"
#define SOAP_NAMESPACE_OF_xlink	"http://www.w3.org/1999/xlink"
#define SOAP_NAMESPACE_OF_gmd	"http://www.isotc211.org/2005/gmd"
#define SOAP_NAMESPACE_OF_gts	"http://www.isotc211.org/2005/gts"
#define SOAP_NAMESPACE_OF_gco	"http://www.isotc211.org/2005/gco"
#define SOAP_NAMESPACE_OF_gsr	"http://www.isotc211.org/2005/gsr"
#define SOAP_NAMESPACE_OF_witsml2	"http://www.energistics.org/energyml/data/witsmlv2"
#include <time.h>

#ifndef gsoap_eml2_1Stub_H
#define gsoap_eml2_1Stub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20881
# error "GSOAP VERSION 20881 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace gsoap_eml2_1 {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* eml2_1ForGsoap.h:2605 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind (-1053)

/* eml21:ParameterKind */
enum eml21__ParameterKind {
	eml21__ParameterKind__dataObject = 0,
	eml21__ParameterKind__double_ = 1,
	eml21__ParameterKind__integer = 2,
	eml21__ParameterKind__string = 3,
	eml21__ParameterKind__timestamp = 4,
	eml21__ParameterKind__subActivity = 5
};
#endif

/* eml2_1ForGsoap.h:2622 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d (-1054)

/* eml21:AxisOrder2d */
enum eml21__AxisOrder2d {
	eml21__AxisOrder2d__easting_x0020northing = 0,
	eml21__AxisOrder2d__northing_x0020easting = 1,
	eml21__AxisOrder2d__westing_x0020southing = 2,
	eml21__AxisOrder2d__southing_x0020westing = 3,
	eml21__AxisOrder2d__northing_x0020westing = 4,
	eml21__AxisOrder2d__westing_x0020northing = 5
};
#endif

/* eml2_1ForGsoap.h:2659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection (-1055)

/* eml21:VerticalDirection */
enum eml21__VerticalDirection {
	eml21__VerticalDirection__up = 0,
	eml21__VerticalDirection__down = 1
};
#endif

/* eml2_1ForGsoap.h:2704 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_1_gml__AggregationType (-1058)

/* gml:AggregationType */
enum gml__AggregationType {
	gml__AggregationType__set = 0,
	gml__AggregationType__bag = 1,
	gml__AggregationType__sequence = 2,
	gml__AggregationType__array = 3,
	gml__AggregationType__record = 4,
	gml__AggregationType__table = 5
};
#endif

/* eml2_1ForGsoap.h:2732 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__show
#define SOAP_TYPE_gsoap_eml2_1__xlink__show (-1059)

/* xlink:show */
enum _xlink__show {
	_xlink__show__new_ = 0,
	_xlink__show__replace = 1,
	_xlink__show__embed = 2,
	_xlink__show__other = 3,
	_xlink__show__none = 4
};
#endif

/* eml2_1ForGsoap.h:2749 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_1__xlink__actuate (-1060)

/* xlink:actuate */
enum _xlink__actuate {
	_xlink__actuate__onLoad = 0,
	_xlink__actuate__onRequest = 1,
	_xlink__actuate__other = 2,
	_xlink__actuate__none = 3
};
#endif

/* eml2_1ForGsoap.h:2932 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure (-1072)

/* eml21:UnitOfMeasure */
enum eml21__UnitOfMeasure {
	eml21__UnitOfMeasure__A = 'A',
	eml21__UnitOfMeasure__a = 'a',
	eml21__UnitOfMeasure__b = 'b',
	eml21__UnitOfMeasure__B = 'B',
	eml21__UnitOfMeasure__C = 'C',
	eml21__UnitOfMeasure__D = 'D',
	eml21__UnitOfMeasure__d = 'd',
	eml21__UnitOfMeasure__F = 'F',
	eml21__UnitOfMeasure__g = 'g',
	eml21__UnitOfMeasure__H = 'H',
	eml21__UnitOfMeasure__h = 'h',
	eml21__UnitOfMeasure__J = 'J',
	eml21__UnitOfMeasure__K = 'K',
	eml21__UnitOfMeasure__L = 'L',
	eml21__UnitOfMeasure__m = 'm',
	eml21__UnitOfMeasure__N = 'N',
	eml21__UnitOfMeasure__O = 'O',
	eml21__UnitOfMeasure__P = 'P',
	eml21__UnitOfMeasure__S = 'S',
	eml21__UnitOfMeasure__s = 's',
	eml21__UnitOfMeasure__t = 't',
	eml21__UnitOfMeasure__T = 'T',
	eml21__UnitOfMeasure__V = 'V',
	eml21__UnitOfMeasure__W = 'W',
	eml21__UnitOfMeasure___x0025 = 'u',
	eml21__UnitOfMeasure___x0025_x005barea_x005d = 'v',
	eml21__UnitOfMeasure___x0025_x005bmass_x005d = 'w',
	eml21__UnitOfMeasure___x0025_x005bmolar_x005d = 'x',
	eml21__UnitOfMeasure___x0025_x005bvol_x005d = 'y',
	eml21__UnitOfMeasure___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 'z',
	eml21__UnitOfMeasure___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 123,
	eml21__UnitOfMeasure___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 124,
	eml21__UnitOfMeasure__0_x002e001_x0020bbl_x002fft3 = 125,
	eml21__UnitOfMeasure__0_x002e001_x0020bbl_x002fm3 = 126,
	eml21__UnitOfMeasure__0_x002e001_x0020d_x002fft3 = 127,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 128,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 129,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 130,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 131,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 132,
	eml21__UnitOfMeasure__0_x002e001_x0020h_x002fft = 133,
	eml21__UnitOfMeasure__0_x002e001_x0020kPa2_x002fcP = 134,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fbbl = 135,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 136,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 137,
	eml21__UnitOfMeasure__0_x002e001_x0020psi_x002fft = 138,
	eml21__UnitOfMeasure__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 139,
	eml21__UnitOfMeasure__0_x002e001_x0020seca = 140,
	eml21__UnitOfMeasure__0_x002e01_x0020bbl_x002fbbl = 141,
	eml21__UnitOfMeasure__0_x002e01_x0020dega_x002fft = 142,
	eml21__UnitOfMeasure__0_x002e01_x0020degF_x002fft = 143,
	eml21__UnitOfMeasure__0_x002e01_x0020dm3_x002fkm = 144,
	eml21__UnitOfMeasure__0_x002e01_x0020ft_x002fft = 145,
	eml21__UnitOfMeasure__0_x002e01_x0020grain_x002fft3 = 146,
	eml21__UnitOfMeasure__0_x002e01_x0020L_x002fkg = 147,
	eml21__UnitOfMeasure__0_x002e01_x0020L_x002fkm = 148,
	eml21__UnitOfMeasure__0_x002e01_x0020lbf_x002fft = 149,
	eml21__UnitOfMeasure__0_x002e01_x0020lbf_x002fft2 = 150,
	eml21__UnitOfMeasure__0_x002e01_x0020lbm_x002fft2 = 151,
	eml21__UnitOfMeasure__0_x002e01_x0020psi_x002fft = 152,
	eml21__UnitOfMeasure__0_x002e1_x0020ft = 153,
	eml21__UnitOfMeasure__0_x002e1_x0020ft_x005bUS_x005d = 154,
	eml21__UnitOfMeasure__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 155,
	eml21__UnitOfMeasure__0_x002e1_x0020in = 156,
	eml21__UnitOfMeasure__0_x002e1_x0020L_x002fbbl = 157,
	eml21__UnitOfMeasure__0_x002e1_x0020lbm_x002fbbl = 158,
	eml21__UnitOfMeasure__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 159,
	eml21__UnitOfMeasure__0_x002e1_x0020yd = 160,
	eml21__UnitOfMeasure__1_x002f_x0028kg_x002es_x0029 = 161,
	eml21__UnitOfMeasure__1_x002f16_x0020in = 162,
	eml21__UnitOfMeasure__1_x002f2_x0020ft = 163,
	eml21__UnitOfMeasure__1_x002f2_x0020ms = 164,
	eml21__UnitOfMeasure__1_x002f30_x0020cm3_x002fmin = 165,
	eml21__UnitOfMeasure__1_x002f30_x0020dega_x002fft = 166,
	eml21__UnitOfMeasure__1_x002f30_x0020dega_x002fm = 167,
	eml21__UnitOfMeasure__1_x002f30_x0020lbf_x002fm = 168,
	eml21__UnitOfMeasure__1_x002f30_x0020m_x002fm = 169,
	eml21__UnitOfMeasure__1_x002f30_x0020N_x002fm = 170,
	eml21__UnitOfMeasure__1_x002f32_x0020in = 171,
	eml21__UnitOfMeasure__1_x002f64_x0020in = 172,
	eml21__UnitOfMeasure__1_x002fa = 173,
	eml21__UnitOfMeasure__1_x002fangstrom = 174,
	eml21__UnitOfMeasure__1_x002fbar = 175,
	eml21__UnitOfMeasure__1_x002fbbl = 176,
	eml21__UnitOfMeasure__1_x002fcm = 177,
	eml21__UnitOfMeasure__1_x002fd = 178,
	eml21__UnitOfMeasure__1_x002fdegC = 179,
	eml21__UnitOfMeasure__1_x002fdegF = 180,
	eml21__UnitOfMeasure__1_x002fdegR = 181,
	eml21__UnitOfMeasure__1_x002fft = 182,
	eml21__UnitOfMeasure__1_x002fft2 = 183,
	eml21__UnitOfMeasure__1_x002fft3 = 184,
	eml21__UnitOfMeasure__1_x002fg = 185,
	eml21__UnitOfMeasure__1_x002fgal_x005bUK_x005d = 186,
	eml21__UnitOfMeasure__1_x002fgal_x005bUS_x005d = 187,
	eml21__UnitOfMeasure__1_x002fh = 188,
	eml21__UnitOfMeasure__1_x002fH = 189,
	eml21__UnitOfMeasure__1_x002fin = 190,
	eml21__UnitOfMeasure__1_x002fK = 191,
	eml21__UnitOfMeasure__1_x002fkg = 192,
	eml21__UnitOfMeasure__1_x002fkm2 = 193,
	eml21__UnitOfMeasure__1_x002fkPa = 194,
	eml21__UnitOfMeasure__1_x002fL = 195,
	eml21__UnitOfMeasure__1_x002flbf = 196,
	eml21__UnitOfMeasure__1_x002flbm = 197,
	eml21__UnitOfMeasure__1_x002fm = 198,
	eml21__UnitOfMeasure__1_x002fm2 = 199,
	eml21__UnitOfMeasure__1_x002fm3 = 200,
	eml21__UnitOfMeasure__1_x002fmi = 201,
	eml21__UnitOfMeasure__1_x002fmi2 = 202,
	eml21__UnitOfMeasure__1_x002fmin = 203,
	eml21__UnitOfMeasure__1_x002fmm = 204,
	eml21__UnitOfMeasure__1_x002fms = 205,
	eml21__UnitOfMeasure__1_x002fN = 206,
	eml21__UnitOfMeasure__1_x002fnm = 207,
	eml21__UnitOfMeasure__1_x002fPa = 208,
	eml21__UnitOfMeasure__1_x002fpPa = 209,
	eml21__UnitOfMeasure__1_x002fpsi = 210,
	eml21__UnitOfMeasure__1_x002fs = 211,
	eml21__UnitOfMeasure__1_x002fupsi = 212,
	eml21__UnitOfMeasure__1_x002fus = 213,
	eml21__UnitOfMeasure__1_x002fuV = 214,
	eml21__UnitOfMeasure__1_x002fV = 215,
	eml21__UnitOfMeasure__1_x002fwk = 216,
	eml21__UnitOfMeasure__1_x002fyd = 217,
	eml21__UnitOfMeasure__10_x0020ft = 218,
	eml21__UnitOfMeasure__10_x0020in = 219,
	eml21__UnitOfMeasure__10_x0020km = 220,
	eml21__UnitOfMeasure__10_x0020kN = 221,
	eml21__UnitOfMeasure__10_x0020Mg_x002fm3 = 222,
	eml21__UnitOfMeasure__100_x0020ft = 223,
	eml21__UnitOfMeasure__100_x0020ka_x005bt_x005d = 224,
	eml21__UnitOfMeasure__100_x0020km = 225,
	eml21__UnitOfMeasure__1000_x0020bbl = 226,
	eml21__UnitOfMeasure__1000_x0020bbl_x002eft_x002fd = 227,
	eml21__UnitOfMeasure__1000_x0020bbl_x002fd = 228,
	eml21__UnitOfMeasure__1000_x0020ft = 229,
	eml21__UnitOfMeasure__1000_x0020ft_x002fh = 230,
	eml21__UnitOfMeasure__1000_x0020ft_x002fs = 231,
	eml21__UnitOfMeasure__1000_x0020ft3 = 232,
	eml21__UnitOfMeasure__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 233,
	eml21__UnitOfMeasure__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 234,
	eml21__UnitOfMeasure__1000_x0020ft3_x002fbbl = 235,
	eml21__UnitOfMeasure__1000_x0020ft3_x002fd = 236,
	eml21__UnitOfMeasure__1000_x0020gal_x005bUK_x005d = 237,
	eml21__UnitOfMeasure__1000_x0020gal_x005bUS_x005d = 238,
	eml21__UnitOfMeasure__1000_x0020lbf_x002eft = 239,
	eml21__UnitOfMeasure__1000_x0020m3 = 240,
	eml21__UnitOfMeasure__1000_x0020m3_x002f_x0028d_x002em_x0029 = 241,
	eml21__UnitOfMeasure__1000_x0020m3_x002f_x0028h_x002em_x0029 = 242,
	eml21__UnitOfMeasure__1000_x0020m3_x002fd = 243,
	eml21__UnitOfMeasure__1000_x0020m3_x002fh = 244,
	eml21__UnitOfMeasure__1000_x0020m3_x002fm3 = 245,
	eml21__UnitOfMeasure__1000_x0020m4_x002fd = 246,
	eml21__UnitOfMeasure__1E12_x0020ft3 = 247,
	eml21__UnitOfMeasure__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 248,
	eml21__UnitOfMeasure__1E_6_x0020acre_x002eft_x002fbbl = 249,
	eml21__UnitOfMeasure__1E6_x0020bbl = 250,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 251,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002facre = 252,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002fd = 253,
	eml21__UnitOfMeasure__1E_6_x0020bbl_x002fft3 = 254,
	eml21__UnitOfMeasure__1E_6_x0020bbl_x002fm3 = 255,
	eml21__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d = 256,
	eml21__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d_x002fh = 257,
	eml21__UnitOfMeasure__1E6_x0020ft3 = 258,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 259,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002fbbl = 260,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002fd = 261,
	eml21__UnitOfMeasure__1E_6_x0020gal_x005bUS_x005d = 262,
	eml21__UnitOfMeasure__1E6_x0020lbm_x002fa = 263,
	eml21__UnitOfMeasure__1E6_x0020m3 = 264,
	eml21__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegC_x0029 = 265,
	eml21__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegF_x0029 = 266,
	eml21__UnitOfMeasure__1E6_x0020m3_x002fd = 267,
	eml21__UnitOfMeasure__1E_9_x00201_x002fft = 268,
	eml21__UnitOfMeasure__1E9_x0020bbl = 269,
	eml21__UnitOfMeasure__1E9_x0020ft3 = 270,
	eml21__UnitOfMeasure__30_x0020ft = 271,
	eml21__UnitOfMeasure__30_x0020m = 272,
	eml21__UnitOfMeasure__A_x002eh = 273,
	eml21__UnitOfMeasure__A_x002em2 = 274,
	eml21__UnitOfMeasure__A_x002es = 275,
	eml21__UnitOfMeasure__A_x002es_x002fkg = 276,
	eml21__UnitOfMeasure__A_x002es_x002fm3 = 277,
	eml21__UnitOfMeasure__A_x002fcm2 = 278,
	eml21__UnitOfMeasure__A_x002fft2 = 279,
	eml21__UnitOfMeasure__A_x002fm = 280,
	eml21__UnitOfMeasure__A_x002fm2 = 281,
	eml21__UnitOfMeasure__A_x002fmm = 282,
	eml21__UnitOfMeasure__A_x002fmm2 = 283,
	eml21__UnitOfMeasure__a_x005bt_x005d = 284,
	eml21__UnitOfMeasure__acre = 285,
	eml21__UnitOfMeasure__acre_x002eft = 286,
	eml21__UnitOfMeasure__ag = 287,
	eml21__UnitOfMeasure__aJ = 288,
	eml21__UnitOfMeasure__angstrom = 289,
	eml21__UnitOfMeasure__at = 290,
	eml21__UnitOfMeasure__atm = 291,
	eml21__UnitOfMeasure__atm_x002fft = 292,
	eml21__UnitOfMeasure__atm_x002fh = 293,
	eml21__UnitOfMeasure__atm_x002fhm = 294,
	eml21__UnitOfMeasure__atm_x002fm = 295,
	eml21__UnitOfMeasure__B_x002eW = 296,
	eml21__UnitOfMeasure__b_x002fcm3 = 297,
	eml21__UnitOfMeasure__B_x002fm = 298,
	eml21__UnitOfMeasure__B_x002fO = 299,
	eml21__UnitOfMeasure__bar = 300,
	eml21__UnitOfMeasure__bar_x002fh = 301,
	eml21__UnitOfMeasure__bar_x002fkm = 302,
	eml21__UnitOfMeasure__bar_x002fm = 303,
	eml21__UnitOfMeasure__bar2 = 304,
	eml21__UnitOfMeasure__bar2_x002fcP = 305,
	eml21__UnitOfMeasure__bbl = 306,
	eml21__UnitOfMeasure__bbl_x002f_x0028acre_x002eft_x0029 = 307,
	eml21__UnitOfMeasure__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 308,
	eml21__UnitOfMeasure__bbl_x002f_x0028d_x002eft_x0029 = 309,
	eml21__UnitOfMeasure__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 310,
	eml21__UnitOfMeasure__bbl_x002f_x0028kPa_x002ed_x0029 = 311,
	eml21__UnitOfMeasure__bbl_x002f_x0028psi_x002ed_x0029 = 312,
	eml21__UnitOfMeasure__bbl_x002facre = 313,
	eml21__UnitOfMeasure__bbl_x002fbbl = 314,
	eml21__UnitOfMeasure__bbl_x002fd = 315,
	eml21__UnitOfMeasure__bbl_x002fd2 = 316,
	eml21__UnitOfMeasure__bbl_x002fft = 317,
	eml21__UnitOfMeasure__bbl_x002fft3 = 318,
	eml21__UnitOfMeasure__bbl_x002fh = 319,
	eml21__UnitOfMeasure__bbl_x002fh2 = 320,
	eml21__UnitOfMeasure__bbl_x002fin = 321,
	eml21__UnitOfMeasure__bbl_x002fm3 = 322,
	eml21__UnitOfMeasure__bbl_x002fmi = 323,
	eml21__UnitOfMeasure__bbl_x002fmin = 324,
	eml21__UnitOfMeasure__bbl_x002fpsi = 325,
	eml21__UnitOfMeasure__bbl_x002fton_x005bUK_x005d = 326,
	eml21__UnitOfMeasure__bbl_x002fton_x005bUS_x005d = 327,
	eml21__UnitOfMeasure__Bd = 328,
	eml21__UnitOfMeasure__bit = 329,
	eml21__UnitOfMeasure__bit_x002fs = 330,
	eml21__UnitOfMeasure__Bq = 331,
	eml21__UnitOfMeasure__Bq_x002fkg = 332,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d = 333,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edegF_x0029 = 334,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edegF_x0029 = 335,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 336,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegF_x0029 = 337,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegR_x0029 = 338,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 339,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edegF_x0029 = 340,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 341,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 342,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegF_x0029 = 343,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegR_x0029 = 344,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edegF_x0029 = 345,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 346,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edegF_x0029 = 347,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 348,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edegF_x0029 = 349,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fbbl = 350,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fft3 = 351,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 352,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 353,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fh = 354,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002flbm = 355,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002flbmol = 356,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fmin = 357,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fs = 358,
	eml21__UnitOfMeasure__Btu_x005bth_x005d = 359,
	eml21__UnitOfMeasure__Btu_x005bUK_x005d = 360,
	eml21__UnitOfMeasure__byte = 361,
	eml21__UnitOfMeasure__byte_x002fs = 362,
	eml21__UnitOfMeasure__C_x002em = 363,
	eml21__UnitOfMeasure__C_x002fcm2 = 364,
	eml21__UnitOfMeasure__C_x002fcm3 = 365,
	eml21__UnitOfMeasure__C_x002fg = 366,
	eml21__UnitOfMeasure__C_x002fkg = 367,
	eml21__UnitOfMeasure__C_x002fm2 = 368,
	eml21__UnitOfMeasure__C_x002fm3 = 369,
	eml21__UnitOfMeasure__C_x002fmm2 = 370,
	eml21__UnitOfMeasure__C_x002fmm3 = 371,
	eml21__UnitOfMeasure__ca = 372,
	eml21__UnitOfMeasure__cA = 373,
	eml21__UnitOfMeasure__cal_x005bIT_x005d = 374,
	eml21__UnitOfMeasure__cal_x005bth_x005d = 375,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028g_x002eK_x0029 = 376,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edegC_x0029 = 377,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 378,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edegC_x0029 = 379,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 380,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028mol_x002edegC_x0029 = 381,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edegC_x0029 = 382,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edegC_x0029 = 383,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 384,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fcm3 = 385,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fg = 386,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fh = 387,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fkg = 388,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002flbm = 389,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fmL = 390,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fmm3 = 391,
	eml21__UnitOfMeasure__cC = 392,
	eml21__UnitOfMeasure__ccal_x005bth_x005d = 393,
	eml21__UnitOfMeasure__ccgr = 394,
	eml21__UnitOfMeasure__cd = 395,
	eml21__UnitOfMeasure__cd_x002fm2 = 396,
	eml21__UnitOfMeasure__cEuc = 397,
	eml21__UnitOfMeasure__ceV = 398,
	eml21__UnitOfMeasure__cF = 399,
	eml21__UnitOfMeasure__cg = 400,
	eml21__UnitOfMeasure__cgauss = 401,
	eml21__UnitOfMeasure__cgr = 402,
	eml21__UnitOfMeasure__cGy = 403,
	eml21__UnitOfMeasure__cH = 404,
	eml21__UnitOfMeasure__chain = 405,
	eml21__UnitOfMeasure__chain_x005bBnA_x005d = 406,
	eml21__UnitOfMeasure__chain_x005bBnB_x005d = 407,
	eml21__UnitOfMeasure__chain_x005bCla_x005d = 408,
	eml21__UnitOfMeasure__chain_x005bInd37_x005d = 409,
	eml21__UnitOfMeasure__chain_x005bSe_x005d = 410,
	eml21__UnitOfMeasure__chain_x005bSeT_x005d = 411,
	eml21__UnitOfMeasure__chain_x005bUS_x005d = 412,
	eml21__UnitOfMeasure__cHz = 413,
	eml21__UnitOfMeasure__Ci = 414,
	eml21__UnitOfMeasure__cJ = 415,
	eml21__UnitOfMeasure__cm = 416,
	eml21__UnitOfMeasure__cm_x002fa = 417,
	eml21__UnitOfMeasure__cm_x002fs = 418,
	eml21__UnitOfMeasure__cm_x002fs2 = 419,
	eml21__UnitOfMeasure__cm2 = 420,
	eml21__UnitOfMeasure__cm2_x002fg = 421,
	eml21__UnitOfMeasure__cm2_x002fs = 422,
	eml21__UnitOfMeasure__cm3 = 423,
	eml21__UnitOfMeasure__cm3_x002fcm3 = 424,
	eml21__UnitOfMeasure__cm3_x002fg = 425,
	eml21__UnitOfMeasure__cm3_x002fh = 426,
	eml21__UnitOfMeasure__cm3_x002fL = 427,
	eml21__UnitOfMeasure__cm3_x002fm3 = 428,
	eml21__UnitOfMeasure__cm3_x002fmin = 429,
	eml21__UnitOfMeasure__cm3_x002fs = 430,
	eml21__UnitOfMeasure__cm4 = 431,
	eml21__UnitOfMeasure__cmH2O_x005b4degC_x005d = 432,
	eml21__UnitOfMeasure__cN = 433,
	eml21__UnitOfMeasure__cohm = 434,
	eml21__UnitOfMeasure__cP = 435,
	eml21__UnitOfMeasure__cPa = 436,
	eml21__UnitOfMeasure__crd = 437,
	eml21__UnitOfMeasure__cS = 438,
	eml21__UnitOfMeasure__cs = 439,
	eml21__UnitOfMeasure__cSt = 440,
	eml21__UnitOfMeasure__ct = 441,
	eml21__UnitOfMeasure__cT = 442,
	eml21__UnitOfMeasure__cu = 443,
	eml21__UnitOfMeasure__cV = 444,
	eml21__UnitOfMeasure__cW = 445,
	eml21__UnitOfMeasure__cWb = 446,
	eml21__UnitOfMeasure__cwt_x005bUK_x005d = 447,
	eml21__UnitOfMeasure__cwt_x005bUS_x005d = 448,
	eml21__UnitOfMeasure__D_x002eft = 449,
	eml21__UnitOfMeasure__D_x002em = 450,
	eml21__UnitOfMeasure__D_x002f_x0028Pa_x002es_x0029 = 451,
	eml21__UnitOfMeasure__d_x002fbbl = 452,
	eml21__UnitOfMeasure__D_x002fcP = 453,
	eml21__UnitOfMeasure__d_x002fft3 = 454,
	eml21__UnitOfMeasure__d_x002fm3 = 455,
	eml21__UnitOfMeasure__D_x005bAPI_x005d = 456,
	eml21__UnitOfMeasure__dA = 457,
	eml21__UnitOfMeasure__dam = 458,
	eml21__UnitOfMeasure__daN = 459,
	eml21__UnitOfMeasure__daN_x002em = 460,
	eml21__UnitOfMeasure__dAPI = 461,
	eml21__UnitOfMeasure__dB = 462,
	eml21__UnitOfMeasure__dB_x002emW = 463,
	eml21__UnitOfMeasure__dB_x002eMW = 464,
	eml21__UnitOfMeasure__dB_x002eW = 465,
	eml21__UnitOfMeasure__dB_x002fft = 466,
	eml21__UnitOfMeasure__dB_x002fkm = 467,
	eml21__UnitOfMeasure__dB_x002fm = 468,
	eml21__UnitOfMeasure__dB_x002fO = 469,
	eml21__UnitOfMeasure__dC = 470,
	eml21__UnitOfMeasure__dcal_x005bth_x005d = 471,
	eml21__UnitOfMeasure__dega = 472,
	eml21__UnitOfMeasure__dega_x002fft = 473,
	eml21__UnitOfMeasure__dega_x002fh = 474,
	eml21__UnitOfMeasure__dega_x002fm = 475,
	eml21__UnitOfMeasure__dega_x002fmin = 476,
	eml21__UnitOfMeasure__dega_x002fs = 477,
	eml21__UnitOfMeasure__degC = 478,
	eml21__UnitOfMeasure__degC_x002em2_x002eh_x002fkcal_x005bth_x005d = 479,
	eml21__UnitOfMeasure__degC_x002fft = 480,
	eml21__UnitOfMeasure__degC_x002fh = 481,
	eml21__UnitOfMeasure__degC_x002fhm = 482,
	eml21__UnitOfMeasure__degC_x002fkm = 483,
	eml21__UnitOfMeasure__degC_x002fkPa = 484,
	eml21__UnitOfMeasure__degC_x002fm = 485,
	eml21__UnitOfMeasure__degC_x002fmin = 486,
	eml21__UnitOfMeasure__degC_x002fs = 487,
	eml21__UnitOfMeasure__degF = 488,
	eml21__UnitOfMeasure__degF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 489,
	eml21__UnitOfMeasure__degF_x002fft = 490,
	eml21__UnitOfMeasure__degF_x002fh = 491,
	eml21__UnitOfMeasure__degF_x002fm = 492,
	eml21__UnitOfMeasure__degF_x002fmin = 493,
	eml21__UnitOfMeasure__degF_x002fpsi = 494,
	eml21__UnitOfMeasure__degF_x002fs = 495,
	eml21__UnitOfMeasure__degR = 496,
	eml21__UnitOfMeasure__dEuc = 497,
	eml21__UnitOfMeasure__deV = 498,
	eml21__UnitOfMeasure__dF = 499,
	eml21__UnitOfMeasure__dgauss = 500,
	eml21__UnitOfMeasure__dGy = 501,
	eml21__UnitOfMeasure__dH = 502,
	eml21__UnitOfMeasure__dHz = 503,
	eml21__UnitOfMeasure__dJ = 504,
	eml21__UnitOfMeasure__dm = 505,
	eml21__UnitOfMeasure__dm_x002fs = 506,
	eml21__UnitOfMeasure__dm3 = 507,
	eml21__UnitOfMeasure__dm3_x002f_x0028kW_x002eh_x0029 = 508,
	eml21__UnitOfMeasure__dm3_x002fkg = 509,
	eml21__UnitOfMeasure__dm3_x002fkmol = 510,
	eml21__UnitOfMeasure__dm3_x002fm = 511,
	eml21__UnitOfMeasure__dm3_x002fm3 = 512,
	eml21__UnitOfMeasure__dm3_x002fMJ = 513,
	eml21__UnitOfMeasure__dm3_x002fs = 514,
	eml21__UnitOfMeasure__dm3_x002fs2 = 515,
	eml21__UnitOfMeasure__dm3_x002ft = 516,
	eml21__UnitOfMeasure__dN = 517,
	eml21__UnitOfMeasure__dN_x002em = 518,
	eml21__UnitOfMeasure__dohm = 519,
	eml21__UnitOfMeasure__dP = 520,
	eml21__UnitOfMeasure__dPa = 521,
	eml21__UnitOfMeasure__drd = 522,
	eml21__UnitOfMeasure__ds = 523,
	eml21__UnitOfMeasure__dS = 524,
	eml21__UnitOfMeasure__dT = 525,
	eml21__UnitOfMeasure__dV = 526,
	eml21__UnitOfMeasure__dW = 527,
	eml21__UnitOfMeasure__dWb = 528,
	eml21__UnitOfMeasure__dyne = 529,
	eml21__UnitOfMeasure__dyne_x002ecm2 = 530,
	eml21__UnitOfMeasure__dyne_x002es_x002fcm2 = 531,
	eml21__UnitOfMeasure__dyne_x002fcm = 532,
	eml21__UnitOfMeasure__dyne_x002fcm2 = 533,
	eml21__UnitOfMeasure__EA = 534,
	eml21__UnitOfMeasure__Ea_x005bt_x005d = 535,
	eml21__UnitOfMeasure__EC = 536,
	eml21__UnitOfMeasure__Ecal_x005bth_x005d = 537,
	eml21__UnitOfMeasure__EEuc = 538,
	eml21__UnitOfMeasure__EeV = 539,
	eml21__UnitOfMeasure__EF = 540,
	eml21__UnitOfMeasure__Eg = 541,
	eml21__UnitOfMeasure__Egauss = 542,
	eml21__UnitOfMeasure__EGy = 543,
	eml21__UnitOfMeasure__EH = 544,
	eml21__UnitOfMeasure__EHz = 545,
	eml21__UnitOfMeasure__EJ = 546,
	eml21__UnitOfMeasure__EJ_x002fa = 547,
	eml21__UnitOfMeasure__Em = 548,
	eml21__UnitOfMeasure__EN = 549,
	eml21__UnitOfMeasure__Eohm = 550,
	eml21__UnitOfMeasure__EP = 551,
	eml21__UnitOfMeasure__EPa = 552,
	eml21__UnitOfMeasure__Erd = 553,
	eml21__UnitOfMeasure__erg = 554,
	eml21__UnitOfMeasure__erg_x002fa = 555,
	eml21__UnitOfMeasure__erg_x002fcm2 = 556,
	eml21__UnitOfMeasure__erg_x002fcm3 = 557,
	eml21__UnitOfMeasure__erg_x002fg = 558,
	eml21__UnitOfMeasure__erg_x002fkg = 559,
	eml21__UnitOfMeasure__erg_x002fm3 = 560,
	eml21__UnitOfMeasure__ES = 561,
	eml21__UnitOfMeasure__ET = 562,
	eml21__UnitOfMeasure__Euc = 563,
	eml21__UnitOfMeasure__eV = 564,
	eml21__UnitOfMeasure__EW = 565,
	eml21__UnitOfMeasure__EWb = 566,
	eml21__UnitOfMeasure__F_x002fm = 567,
	eml21__UnitOfMeasure__fa = 568,
	eml21__UnitOfMeasure__fA = 569,
	eml21__UnitOfMeasure__fathom = 570,
	eml21__UnitOfMeasure__fC = 571,
	eml21__UnitOfMeasure__fcal_x005bth_x005d = 572,
	eml21__UnitOfMeasure__fEuc = 573,
	eml21__UnitOfMeasure__feV = 574,
	eml21__UnitOfMeasure__fF = 575,
	eml21__UnitOfMeasure__fg = 576,
	eml21__UnitOfMeasure__fgauss = 577,
	eml21__UnitOfMeasure__fGy = 578,
	eml21__UnitOfMeasure__fH = 579,
	eml21__UnitOfMeasure__fHz = 580,
	eml21__UnitOfMeasure__fJ = 581,
	eml21__UnitOfMeasure__floz_x005bUK_x005d = 582,
	eml21__UnitOfMeasure__floz_x005bUS_x005d = 583,
	eml21__UnitOfMeasure__fm = 584,
	eml21__UnitOfMeasure__fN = 585,
	eml21__UnitOfMeasure__fohm = 586,
	eml21__UnitOfMeasure__footcandle = 587,
	eml21__UnitOfMeasure__footcandle_x002es = 588,
	eml21__UnitOfMeasure__fP = 589,
	eml21__UnitOfMeasure__fPa = 590,
	eml21__UnitOfMeasure__frd = 591,
	eml21__UnitOfMeasure__fS = 592,
	eml21__UnitOfMeasure__ft = 593,
	eml21__UnitOfMeasure__fT = 594,
	eml21__UnitOfMeasure__ft_x002fbbl = 595,
	eml21__UnitOfMeasure__ft_x002fd = 596,
	eml21__UnitOfMeasure__ft_x002fdegF = 597,
	eml21__UnitOfMeasure__ft_x002fft = 598,
	eml21__UnitOfMeasure__ft_x002fft3 = 599,
	eml21__UnitOfMeasure__ft_x002fgal_x005bUS_x005d = 600,
	eml21__UnitOfMeasure__ft_x002fh = 601,
	eml21__UnitOfMeasure__ft_x002fin = 602,
	eml21__UnitOfMeasure__ft_x002flbm = 603,
	eml21__UnitOfMeasure__ft_x002fm = 604,
	eml21__UnitOfMeasure__ft_x002fmi = 605,
	eml21__UnitOfMeasure__ft_x002fmin = 606,
	eml21__UnitOfMeasure__ft_x002fms = 607,
	eml21__UnitOfMeasure__ft_x002fpsi = 608,
	eml21__UnitOfMeasure__ft_x002fs = 609,
	eml21__UnitOfMeasure__ft_x002fs2 = 610,
	eml21__UnitOfMeasure__ft_x002fus = 611,
	eml21__UnitOfMeasure__ft_x005bBnA_x005d = 612,
	eml21__UnitOfMeasure__ft_x005bBnB_x005d = 613,
	eml21__UnitOfMeasure__ft_x005bBr36_x005d = 614,
	eml21__UnitOfMeasure__ft_x005bBr65_x005d = 615,
	eml21__UnitOfMeasure__ft_x005bCla_x005d = 616,
	eml21__UnitOfMeasure__ft_x005bGC_x005d = 617,
	eml21__UnitOfMeasure__ft_x005bInd_x005d = 618,
	eml21__UnitOfMeasure__ft_x005bInd37_x005d = 619,
	eml21__UnitOfMeasure__ft_x005bInd62_x005d = 620,
	eml21__UnitOfMeasure__ft_x005bInd75_x005d = 621,
	eml21__UnitOfMeasure__ft_x005bSe_x005d = 622,
	eml21__UnitOfMeasure__ft_x005bSeT_x005d = 623,
	eml21__UnitOfMeasure__ft_x005bUS_x005d = 624,
	eml21__UnitOfMeasure__ft2 = 625,
	eml21__UnitOfMeasure__ft2_x002fh = 626,
	eml21__UnitOfMeasure__ft2_x002fin3 = 627,
	eml21__UnitOfMeasure__ft2_x002flbm = 628,
	eml21__UnitOfMeasure__ft2_x002fs = 629,
	eml21__UnitOfMeasure__ft3 = 630,
	eml21__UnitOfMeasure__ft3_x002f_x0028d_x002eft_x0029 = 631,
	eml21__UnitOfMeasure__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 632,
	eml21__UnitOfMeasure__ft3_x002f_x0028min_x002eft2_x0029 = 633,
	eml21__UnitOfMeasure__ft3_x002f_x0028s_x002eft2_x0029 = 634,
	eml21__UnitOfMeasure__ft3_x002fbbl = 635,
	eml21__UnitOfMeasure__ft3_x002fd = 636,
	eml21__UnitOfMeasure__ft3_x002fd2 = 637,
	eml21__UnitOfMeasure__ft3_x002fft = 638,
	eml21__UnitOfMeasure__ft3_x002fft2 = 639,
	eml21__UnitOfMeasure__ft3_x002fft3 = 640,
	eml21__UnitOfMeasure__ft3_x002fh = 641,
	eml21__UnitOfMeasure__ft3_x002fh2 = 642,
	eml21__UnitOfMeasure__ft3_x002fkg = 643,
	eml21__UnitOfMeasure__ft3_x002flbm = 644,
	eml21__UnitOfMeasure__ft3_x002flbmol = 645,
	eml21__UnitOfMeasure__ft3_x002fmin = 646,
	eml21__UnitOfMeasure__ft3_x002fmin2 = 647,
	eml21__UnitOfMeasure__ft3_x002frad = 648,
	eml21__UnitOfMeasure__ft3_x002fs = 649,
	eml21__UnitOfMeasure__ft3_x002fs2 = 650,
	eml21__UnitOfMeasure__ft3_x002fsack_x005b94lbm_x005d = 651,
	eml21__UnitOfMeasure__fur_x005bUS_x005d = 652,
	eml21__UnitOfMeasure__fV = 653,
	eml21__UnitOfMeasure__fW = 654,
	eml21__UnitOfMeasure__fWb = 655,
	eml21__UnitOfMeasure__g_x002eft_x002f_x0028cm3_x002es_x0029 = 656,
	eml21__UnitOfMeasure__g_x002em_x002f_x0028cm3_x002es_x0029 = 657,
	eml21__UnitOfMeasure__g_x002fcm3 = 658,
	eml21__UnitOfMeasure__g_x002fcm4 = 659,
	eml21__UnitOfMeasure__g_x002fdm3 = 660,
	eml21__UnitOfMeasure__g_x002fgal_x005bUK_x005d = 661,
	eml21__UnitOfMeasure__g_x002fgal_x005bUS_x005d = 662,
	eml21__UnitOfMeasure__g_x002fkg = 663,
	eml21__UnitOfMeasure__g_x002fL = 664,
	eml21__UnitOfMeasure__g_x002fm3 = 665,
	eml21__UnitOfMeasure__g_x002fmol = 666,
	eml21__UnitOfMeasure__g_x002fs = 667,
	eml21__UnitOfMeasure__g_x002ft = 668,
	eml21__UnitOfMeasure__GA = 669,
	eml21__UnitOfMeasure__Ga_x005bt_x005d = 670,
	eml21__UnitOfMeasure__Gal = 671,
	eml21__UnitOfMeasure__gal_x005bUK_x005d = 672,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 673,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 674,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 675,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 676,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 677,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 678,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fd = 679,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fft3 = 680,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fh = 681,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fh2 = 682,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002flbm = 683,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmi = 684,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmin = 685,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmin2 = 686,
	eml21__UnitOfMeasure__gal_x005bUS_x005d = 687,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 688,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 689,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 690,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 691,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 692,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 693,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fbbl = 694,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fd = 695,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fft = 696,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fft3 = 697,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fh = 698,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fh2 = 699,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002flbm = 700,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmi = 701,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmin = 702,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmin2 = 703,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 704,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 705,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 706,
	eml21__UnitOfMeasure__gAPI = 707,
	eml21__UnitOfMeasure__gauss = 708,
	eml21__UnitOfMeasure__gauss_x002fcm = 709,
	eml21__UnitOfMeasure__GBq = 710,
	eml21__UnitOfMeasure__GC = 711,
	eml21__UnitOfMeasure__Gcal_x005bth_x005d = 712,
	eml21__UnitOfMeasure__GEuc = 713,
	eml21__UnitOfMeasure__GeV = 714,
	eml21__UnitOfMeasure__gf = 715,
	eml21__UnitOfMeasure__GF = 716,
	eml21__UnitOfMeasure__Gg = 717,
	eml21__UnitOfMeasure__Ggauss = 718,
	eml21__UnitOfMeasure__GGy = 719,
	eml21__UnitOfMeasure__GH = 720,
	eml21__UnitOfMeasure__GHz = 721,
	eml21__UnitOfMeasure__GJ = 722,
	eml21__UnitOfMeasure__Gm = 723,
	eml21__UnitOfMeasure__GN = 724,
	eml21__UnitOfMeasure__gn = 725,
	eml21__UnitOfMeasure__Gohm = 726,
	eml21__UnitOfMeasure__gon = 727,
	eml21__UnitOfMeasure__GP = 728,
	eml21__UnitOfMeasure__GPa = 729,
	eml21__UnitOfMeasure__GPa_x002fcm = 730,
	eml21__UnitOfMeasure__GPa2 = 731,
	eml21__UnitOfMeasure__grain = 732,
	eml21__UnitOfMeasure__grain_x002fft3 = 733,
	eml21__UnitOfMeasure__grain_x002fgal_x005bUS_x005d = 734,
	eml21__UnitOfMeasure__Grd = 735,
	eml21__UnitOfMeasure__GS = 736,
	eml21__UnitOfMeasure__GT = 737,
	eml21__UnitOfMeasure__GV = 738,
	eml21__UnitOfMeasure__GW = 739,
	eml21__UnitOfMeasure__GW_x002eh = 740,
	eml21__UnitOfMeasure__GWb = 741,
	eml21__UnitOfMeasure__Gy = 742,
	eml21__UnitOfMeasure__h_x002fft3 = 743,
	eml21__UnitOfMeasure__h_x002fkm = 744,
	eml21__UnitOfMeasure__H_x002fm = 745,
	eml21__UnitOfMeasure__h_x002fm3 = 746,
	eml21__UnitOfMeasure__ha = 747,
	eml21__UnitOfMeasure__ha_x002em = 748,
	eml21__UnitOfMeasure__hbar = 749,
	eml21__UnitOfMeasure__hg = 750,
	eml21__UnitOfMeasure__hL = 751,
	eml21__UnitOfMeasure__hm = 752,
	eml21__UnitOfMeasure__hN = 753,
	eml21__UnitOfMeasure__hp = 754,
	eml21__UnitOfMeasure__hp_x002eh = 755,
	eml21__UnitOfMeasure__hp_x002eh_x002fbbl = 756,
	eml21__UnitOfMeasure__hp_x002eh_x002flbm = 757,
	eml21__UnitOfMeasure__hp_x002fft3 = 758,
	eml21__UnitOfMeasure__hp_x002fin2 = 759,
	eml21__UnitOfMeasure__hp_x005belec_x005d = 760,
	eml21__UnitOfMeasure__hp_x005bhyd_x005d = 761,
	eml21__UnitOfMeasure__hp_x005bhyd_x005d_x002fin2 = 762,
	eml21__UnitOfMeasure__hp_x005bmetric_x005d = 763,
	eml21__UnitOfMeasure__hp_x005bmetric_x005d_x002eh = 764,
	eml21__UnitOfMeasure__hs = 765,
	eml21__UnitOfMeasure__Hz = 766,
	eml21__UnitOfMeasure__in = 767,
	eml21__UnitOfMeasure__in_x002f_x0028in_x002edegF_x0029 = 768,
	eml21__UnitOfMeasure__in_x002fa = 769,
	eml21__UnitOfMeasure__in_x002fmin = 770,
	eml21__UnitOfMeasure__in_x002fs = 771,
	eml21__UnitOfMeasure__in_x002fs2 = 772,
	eml21__UnitOfMeasure__in_x005bUS_x005d = 773,
	eml21__UnitOfMeasure__in2 = 774,
	eml21__UnitOfMeasure__in2_x002fft2 = 775,
	eml21__UnitOfMeasure__in2_x002fin2 = 776,
	eml21__UnitOfMeasure__in2_x002fs = 777,
	eml21__UnitOfMeasure__in3 = 778,
	eml21__UnitOfMeasure__in3_x002fft = 779,
	eml21__UnitOfMeasure__in4 = 780,
	eml21__UnitOfMeasure__inH2O_x005b39degF_x005d = 781,
	eml21__UnitOfMeasure__inH2O_x005b60degF_x005d = 782,
	eml21__UnitOfMeasure__inHg_x005b32degF_x005d = 783,
	eml21__UnitOfMeasure__inHg_x005b60degF_x005d = 784,
	eml21__UnitOfMeasure__J_x002em_x002f_x0028s_x002em2_x002eK_x0029 = 785,
	eml21__UnitOfMeasure__J_x002em_x002fm2 = 786,
	eml21__UnitOfMeasure__J_x002f_x0028g_x002eK_x0029 = 787,
	eml21__UnitOfMeasure__J_x002f_x0028kg_x002eK_x0029 = 788,
	eml21__UnitOfMeasure__J_x002f_x0028mol_x002eK_x0029 = 789,
	eml21__UnitOfMeasure__J_x002f_x0028s_x002em2_x002edegC_x0029 = 790,
	eml21__UnitOfMeasure__J_x002fcm2 = 791,
	eml21__UnitOfMeasure__J_x002fdm3 = 792,
	eml21__UnitOfMeasure__J_x002fg = 793,
	eml21__UnitOfMeasure__J_x002fK = 794,
	eml21__UnitOfMeasure__J_x002fkg = 795,
	eml21__UnitOfMeasure__J_x002fm = 796,
	eml21__UnitOfMeasure__J_x002fm2 = 797,
	eml21__UnitOfMeasure__J_x002fm3 = 798,
	eml21__UnitOfMeasure__J_x002fmol = 799,
	eml21__UnitOfMeasure__J_x002fs = 800,
	eml21__UnitOfMeasure__K_x002em2_x002fkW = 801,
	eml21__UnitOfMeasure__K_x002em2_x002fW = 802,
	eml21__UnitOfMeasure__K_x002fkm = 803,
	eml21__UnitOfMeasure__K_x002fm = 804,
	eml21__UnitOfMeasure__K_x002fPa = 805,
	eml21__UnitOfMeasure__K_x002fs = 806,
	eml21__UnitOfMeasure__K_x002fW = 807,
	eml21__UnitOfMeasure__kA = 808,
	eml21__UnitOfMeasure__ka_x005bt_x005d = 809,
	eml21__UnitOfMeasure__kC = 810,
	eml21__UnitOfMeasure__kcal_x005bth_x005d = 811,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002em_x002fcm2 = 812,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edegC_x0029 = 813,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 814,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028kg_x002edegC_x0029 = 815,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fcm3 = 816,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fg = 817,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fh = 818,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fkg = 819,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fm3 = 820,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fmol = 821,
	eml21__UnitOfMeasure__kcd = 822,
	eml21__UnitOfMeasure__kdyne = 823,
	eml21__UnitOfMeasure__kEuc = 824,
	eml21__UnitOfMeasure__keV = 825,
	eml21__UnitOfMeasure__kF = 826,
	eml21__UnitOfMeasure__kg = 827,
	eml21__UnitOfMeasure__kg_x002em = 828,
	eml21__UnitOfMeasure__kg_x002em_x002fcm2 = 829,
	eml21__UnitOfMeasure__kg_x002em_x002fs = 830,
	eml21__UnitOfMeasure__kg_x002em2 = 831,
	eml21__UnitOfMeasure__kg_x002f_x0028kW_x002eh_x0029 = 832,
	eml21__UnitOfMeasure__kg_x002f_x0028m_x002es_x0029 = 833,
	eml21__UnitOfMeasure__kg_x002f_x0028m2_x002es_x0029 = 834,
	eml21__UnitOfMeasure__kg_x002fd = 835,
	eml21__UnitOfMeasure__kg_x002fdm3 = 836,
	eml21__UnitOfMeasure__kg_x002fdm4 = 837,
	eml21__UnitOfMeasure__kg_x002fh = 838,
	eml21__UnitOfMeasure__kg_x002fJ = 839,
	eml21__UnitOfMeasure__kg_x002fkg = 840,
	eml21__UnitOfMeasure__kg_x002fL = 841,
	eml21__UnitOfMeasure__kg_x002fm = 842,
	eml21__UnitOfMeasure__kg_x002fm2 = 843,
	eml21__UnitOfMeasure__kg_x002fm3 = 844,
	eml21__UnitOfMeasure__kg_x002fm4 = 845,
	eml21__UnitOfMeasure__kg_x002fmin = 846,
	eml21__UnitOfMeasure__kg_x002fMJ = 847,
	eml21__UnitOfMeasure__kg_x002fmol = 848,
	eml21__UnitOfMeasure__kg_x002fs = 849,
	eml21__UnitOfMeasure__kg_x002fsack_x005b94lbm_x005d = 850,
	eml21__UnitOfMeasure__kg_x002ft = 851,
	eml21__UnitOfMeasure__kgauss = 852,
	eml21__UnitOfMeasure__kgf = 853,
	eml21__UnitOfMeasure__kgf_x002em = 854,
	eml21__UnitOfMeasure__kgf_x002em_x002fcm2 = 855,
	eml21__UnitOfMeasure__kgf_x002em_x002fm = 856,
	eml21__UnitOfMeasure__kgf_x002em2 = 857,
	eml21__UnitOfMeasure__kgf_x002es_x002fm2 = 858,
	eml21__UnitOfMeasure__kgf_x002fcm = 859,
	eml21__UnitOfMeasure__kgf_x002fcm2 = 860,
	eml21__UnitOfMeasure__kgf_x002fkgf = 861,
	eml21__UnitOfMeasure__kgf_x002fm2 = 862,
	eml21__UnitOfMeasure__kgf_x002fmm2 = 863,
	eml21__UnitOfMeasure__kGy = 864,
	eml21__UnitOfMeasure__kH = 865,
	eml21__UnitOfMeasure__kHz = 866,
	eml21__UnitOfMeasure__Kibyte = 867,
	eml21__UnitOfMeasure__kJ = 868,
	eml21__UnitOfMeasure__kJ_x002em_x002f_x0028h_x002em2_x002eK_x0029 = 869,
	eml21__UnitOfMeasure__kJ_x002f_x0028h_x002em2_x002eK_x0029 = 870,
	eml21__UnitOfMeasure__kJ_x002f_x0028kg_x002eK_x0029 = 871,
	eml21__UnitOfMeasure__kJ_x002f_x0028kmol_x002eK_x0029 = 872,
	eml21__UnitOfMeasure__kJ_x002fdm3 = 873,
	eml21__UnitOfMeasure__kJ_x002fkg = 874,
	eml21__UnitOfMeasure__kJ_x002fkmol = 875,
	eml21__UnitOfMeasure__kJ_x002fm3 = 876,
	eml21__UnitOfMeasure__klbf = 877,
	eml21__UnitOfMeasure__klbm = 878,
	eml21__UnitOfMeasure__klbm_x002fin = 879,
	eml21__UnitOfMeasure__klx = 880,
	eml21__UnitOfMeasure__km = 881,
	eml21__UnitOfMeasure__km_x002fcm = 882,
	eml21__UnitOfMeasure__km_x002fdm3 = 883,
	eml21__UnitOfMeasure__km_x002fh = 884,
	eml21__UnitOfMeasure__km_x002fL = 885,
	eml21__UnitOfMeasure__km_x002fs = 886,
	eml21__UnitOfMeasure__km2 = 887,
	eml21__UnitOfMeasure__km3 = 888,
	eml21__UnitOfMeasure__kmol = 889,
	eml21__UnitOfMeasure__kmol_x002fh = 890,
	eml21__UnitOfMeasure__kmol_x002fm3 = 891,
	eml21__UnitOfMeasure__kmol_x002fs = 892,
	eml21__UnitOfMeasure__kN = 893,
	eml21__UnitOfMeasure__kN_x002em = 894,
	eml21__UnitOfMeasure__kN_x002em2 = 895,
	eml21__UnitOfMeasure__kN_x002fm = 896,
	eml21__UnitOfMeasure__kN_x002fm2 = 897,
	eml21__UnitOfMeasure__knot = 898,
	eml21__UnitOfMeasure__kohm = 899,
	eml21__UnitOfMeasure__kohm_x002em = 900,
	eml21__UnitOfMeasure__kP = 901,
	eml21__UnitOfMeasure__kPa = 902,
	eml21__UnitOfMeasure__kPa_x002es_x002fm = 903,
	eml21__UnitOfMeasure__kPa_x002fh = 904,
	eml21__UnitOfMeasure__kPa_x002fhm = 905,
	eml21__UnitOfMeasure__kPa_x002fm = 906,
	eml21__UnitOfMeasure__kPa_x002fmin = 907,
	eml21__UnitOfMeasure__kPa2 = 908,
	eml21__UnitOfMeasure__kPa2_x002fcP = 909,
	eml21__UnitOfMeasure__kpsi = 910,
	eml21__UnitOfMeasure__kpsi2 = 911,
	eml21__UnitOfMeasure__krad = 912,
	eml21__UnitOfMeasure__krd = 913,
	eml21__UnitOfMeasure__kS = 914,
	eml21__UnitOfMeasure__kS_x002fm = 915,
	eml21__UnitOfMeasure__kT = 916,
	eml21__UnitOfMeasure__kV = 917,
	eml21__UnitOfMeasure__kW = 918,
	eml21__UnitOfMeasure__kW_x002eh = 919,
	eml21__UnitOfMeasure__kW_x002eh_x002f_x0028kg_x002edegC_x0029 = 920,
	eml21__UnitOfMeasure__kW_x002eh_x002fdm3 = 921,
	eml21__UnitOfMeasure__kW_x002eh_x002fkg = 922,
	eml21__UnitOfMeasure__kW_x002eh_x002fm3 = 923,
	eml21__UnitOfMeasure__kW_x002f_x0028m2_x002eK_x0029 = 924,
	eml21__UnitOfMeasure__kW_x002f_x0028m3_x002eK_x0029 = 925,
	eml21__UnitOfMeasure__kW_x002fcm2 = 926,
	eml21__UnitOfMeasure__kW_x002fm2 = 927,
	eml21__UnitOfMeasure__kW_x002fm3 = 928,
	eml21__UnitOfMeasure__kWb = 929,
	eml21__UnitOfMeasure__L_x002f_x0028bar_x002emin_x0029 = 930,
	eml21__UnitOfMeasure__L_x002fh = 931,
	eml21__UnitOfMeasure__L_x002fkg = 932,
	eml21__UnitOfMeasure__L_x002fkmol = 933,
	eml21__UnitOfMeasure__L_x002fm = 934,
	eml21__UnitOfMeasure__L_x002fm3 = 935,
	eml21__UnitOfMeasure__L_x002fmin = 936,
	eml21__UnitOfMeasure__L_x002fmol = 937,
	eml21__UnitOfMeasure__L_x002fs = 938,
	eml21__UnitOfMeasure__L_x002fs2 = 939,
	eml21__UnitOfMeasure__L_x002ft = 940,
	eml21__UnitOfMeasure__L_x002fton_x005bUK_x005d = 941,
	eml21__UnitOfMeasure__lbf = 942,
	eml21__UnitOfMeasure__lbf_x002eft = 943,
	eml21__UnitOfMeasure__lbf_x002eft_x002fbbl = 944,
	eml21__UnitOfMeasure__lbf_x002eft_x002fgal_x005bUS_x005d = 945,
	eml21__UnitOfMeasure__lbf_x002eft_x002fin = 946,
	eml21__UnitOfMeasure__lbf_x002eft_x002fin2 = 947,
	eml21__UnitOfMeasure__lbf_x002eft_x002flbm = 948,
	eml21__UnitOfMeasure__lbf_x002eft_x002fmin = 949,
	eml21__UnitOfMeasure__lbf_x002eft_x002fs = 950,
	eml21__UnitOfMeasure__lbf_x002ein = 951,
	eml21__UnitOfMeasure__lbf_x002ein_x002fin = 952,
	eml21__UnitOfMeasure__lbf_x002ein2 = 953,
	eml21__UnitOfMeasure__lbf_x002es_x002fft2 = 954,
	eml21__UnitOfMeasure__lbf_x002es_x002fin2 = 955,
	eml21__UnitOfMeasure__lbf_x002fft = 956,
	eml21__UnitOfMeasure__lbf_x002fft2 = 957,
	eml21__UnitOfMeasure__lbf_x002fft3 = 958,
	eml21__UnitOfMeasure__lbf_x002fgal_x005bUS_x005d = 959,
	eml21__UnitOfMeasure__lbf_x002fin = 960,
	eml21__UnitOfMeasure__lbf_x002flbf = 961,
	eml21__UnitOfMeasure__lbm = 962,
	eml21__UnitOfMeasure__lbm_x002eft = 963,
	eml21__UnitOfMeasure__lbm_x002eft_x002fs = 964,
	eml21__UnitOfMeasure__lbm_x002eft2 = 965,
	eml21__UnitOfMeasure__lbm_x002eft2_x002fs2 = 966,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft_x002eh_x0029 = 967,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft_x002es_x0029 = 968,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft2_x002eh_x0029 = 969,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft2_x002es_x0029 = 970,
	eml21__UnitOfMeasure__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 971,
	eml21__UnitOfMeasure__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 972,
	eml21__UnitOfMeasure__lbm_x002f_x0028hp_x002eh_x0029 = 973,
	eml21__UnitOfMeasure__lbm_x002fbbl = 974,
	eml21__UnitOfMeasure__lbm_x002fd = 975,
	eml21__UnitOfMeasure__lbm_x002fft = 976,
	eml21__UnitOfMeasure__lbm_x002fft2 = 977,
	eml21__UnitOfMeasure__lbm_x002fft3 = 978,
	eml21__UnitOfMeasure__lbm_x002fft4 = 979,
	eml21__UnitOfMeasure__lbm_x002fgal_x005bUK_x005d = 980,
	eml21__UnitOfMeasure__lbm_x002fgal_x005bUS_x005d = 981,
	eml21__UnitOfMeasure__lbm_x002fh = 982,
	eml21__UnitOfMeasure__lbm_x002fin3 = 983,
	eml21__UnitOfMeasure__lbm_x002flbmol = 984,
	eml21__UnitOfMeasure__lbm_x002fmin = 985,
	eml21__UnitOfMeasure__lbm_x002fs = 986,
	eml21__UnitOfMeasure__lbmol = 987,
	eml21__UnitOfMeasure__lbmol_x002f_x0028h_x002eft2_x0029 = 988,
	eml21__UnitOfMeasure__lbmol_x002f_x0028s_x002eft2_x0029 = 989,
	eml21__UnitOfMeasure__lbmol_x002fft3 = 990,
	eml21__UnitOfMeasure__lbmol_x002fgal_x005bUK_x005d = 991,
	eml21__UnitOfMeasure__lbmol_x002fgal_x005bUS_x005d = 992,
	eml21__UnitOfMeasure__lbmol_x002fh = 993,
	eml21__UnitOfMeasure__lbmol_x002fs = 994,
	eml21__UnitOfMeasure__link = 995,
	eml21__UnitOfMeasure__link_x005bBnA_x005d = 996,
	eml21__UnitOfMeasure__link_x005bBnB_x005d = 997,
	eml21__UnitOfMeasure__link_x005bCla_x005d = 998,
	eml21__UnitOfMeasure__link_x005bSe_x005d = 999,
	eml21__UnitOfMeasure__link_x005bSeT_x005d = 1000,
	eml21__UnitOfMeasure__link_x005bUS_x005d = 1001,
	eml21__UnitOfMeasure__lm = 1002,
	eml21__UnitOfMeasure__lm_x002es = 1003,
	eml21__UnitOfMeasure__lm_x002fm2 = 1004,
	eml21__UnitOfMeasure__lm_x002fW = 1005,
	eml21__UnitOfMeasure__lx = 1006,
	eml21__UnitOfMeasure__lx_x002es = 1007,
	eml21__UnitOfMeasure__m_x002f_x0028m_x002eK_x0029 = 1008,
	eml21__UnitOfMeasure__m_x002fcm = 1009,
	eml21__UnitOfMeasure__m_x002fd = 1010,
	eml21__UnitOfMeasure__m_x002fh = 1011,
	eml21__UnitOfMeasure__m_x002fK = 1012,
	eml21__UnitOfMeasure__m_x002fkg = 1013,
	eml21__UnitOfMeasure__m_x002fkm = 1014,
	eml21__UnitOfMeasure__m_x002fkPa = 1015,
	eml21__UnitOfMeasure__m_x002fm = 1016,
	eml21__UnitOfMeasure__m_x002fm3 = 1017,
	eml21__UnitOfMeasure__m_x002fmin = 1018,
	eml21__UnitOfMeasure__m_x002fms = 1019,
	eml21__UnitOfMeasure__m_x002fPa = 1020,
	eml21__UnitOfMeasure__m_x002fs = 1021,
	eml21__UnitOfMeasure__m_x002fs2 = 1022,
	eml21__UnitOfMeasure__m_x005bGer_x005d = 1023,
	eml21__UnitOfMeasure__m2 = 1024,
	eml21__UnitOfMeasure__m2_x002f_x0028kPa_x002ed_x0029 = 1025,
	eml21__UnitOfMeasure__m2_x002f_x0028Pa_x002es_x0029 = 1026,
	eml21__UnitOfMeasure__m2_x002fcm3 = 1027,
	eml21__UnitOfMeasure__m2_x002fd = 1028,
	eml21__UnitOfMeasure__m2_x002fg = 1029,
	eml21__UnitOfMeasure__m2_x002fh = 1030,
	eml21__UnitOfMeasure__m2_x002fkg = 1031,
	eml21__UnitOfMeasure__m2_x002fm2 = 1032,
	eml21__UnitOfMeasure__m2_x002fm3 = 1033,
	eml21__UnitOfMeasure__m2_x002fmol = 1034,
	eml21__UnitOfMeasure__m2_x002fs = 1035,
	eml21__UnitOfMeasure__m3 = 1036,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002ed_x0029 = 1037,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002eh_x0029 = 1038,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002emin_x0029 = 1039,
	eml21__UnitOfMeasure__m3_x002f_x0028d_x002em_x0029 = 1040,
	eml21__UnitOfMeasure__m3_x002f_x0028h_x002em_x0029 = 1041,
	eml21__UnitOfMeasure__m3_x002f_x0028ha_x002em_x0029 = 1042,
	eml21__UnitOfMeasure__m3_x002f_x0028kPa_x002ed_x0029 = 1043,
	eml21__UnitOfMeasure__m3_x002f_x0028kPa_x002eh_x0029 = 1044,
	eml21__UnitOfMeasure__m3_x002f_x0028kW_x002eh_x0029 = 1045,
	eml21__UnitOfMeasure__m3_x002f_x0028m3_x002eK_x0029 = 1046,
	eml21__UnitOfMeasure__m3_x002f_x0028Pa_x002es_x0029 = 1047,
	eml21__UnitOfMeasure__m3_x002f_x0028psi_x002ed_x0029 = 1048,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002eft_x0029 = 1049,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em_x0029 = 1050,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em2_x0029 = 1051,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em3_x0029 = 1052,
	eml21__UnitOfMeasure__m3_x002fbbl = 1053,
	eml21__UnitOfMeasure__m3_x002fd = 1054,
	eml21__UnitOfMeasure__m3_x002fd2 = 1055,
	eml21__UnitOfMeasure__m3_x002fg = 1056,
	eml21__UnitOfMeasure__m3_x002fh = 1057,
	eml21__UnitOfMeasure__m3_x002fJ = 1058,
	eml21__UnitOfMeasure__m3_x002fkg = 1059,
	eml21__UnitOfMeasure__m3_x002fkm = 1060,
	eml21__UnitOfMeasure__m3_x002fkmol = 1061,
	eml21__UnitOfMeasure__m3_x002fkPa = 1062,
	eml21__UnitOfMeasure__m3_x002fm = 1063,
	eml21__UnitOfMeasure__m3_x002fm2 = 1064,
	eml21__UnitOfMeasure__m3_x002fm3 = 1065,
	eml21__UnitOfMeasure__m3_x002fmin = 1066,
	eml21__UnitOfMeasure__m3_x002fmol = 1067,
	eml21__UnitOfMeasure__m3_x002fPa = 1068,
	eml21__UnitOfMeasure__m3_x002frad = 1069,
	eml21__UnitOfMeasure__m3_x002frev = 1070,
	eml21__UnitOfMeasure__m3_x002fs = 1071,
	eml21__UnitOfMeasure__m3_x002fs2 = 1072,
	eml21__UnitOfMeasure__m3_x002ft = 1073,
	eml21__UnitOfMeasure__m3_x002fton_x005bUK_x005d = 1074,
	eml21__UnitOfMeasure__m3_x002fton_x005bUS_x005d = 1075,
	eml21__UnitOfMeasure__m4 = 1076,
	eml21__UnitOfMeasure__m4_x002fs = 1077,
	eml21__UnitOfMeasure__mA = 1078,
	eml21__UnitOfMeasure__MA = 1079,
	eml21__UnitOfMeasure__mA_x002fcm2 = 1080,
	eml21__UnitOfMeasure__mA_x002fft2 = 1081,
	eml21__UnitOfMeasure__Ma_x005bt_x005d = 1082,
	eml21__UnitOfMeasure__mbar = 1083,
	eml21__UnitOfMeasure__MBq = 1084,
	eml21__UnitOfMeasure__mC = 1085,
	eml21__UnitOfMeasure__MC = 1086,
	eml21__UnitOfMeasure__mC_x002fm2 = 1087,
	eml21__UnitOfMeasure__mcal_x005bth_x005d = 1088,
	eml21__UnitOfMeasure__Mcal_x005bth_x005d = 1089,
	eml21__UnitOfMeasure__mCi = 1090,
	eml21__UnitOfMeasure__mD = 1091,
	eml21__UnitOfMeasure__mD_x002eft = 1092,
	eml21__UnitOfMeasure__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 1093,
	eml21__UnitOfMeasure__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 1094,
	eml21__UnitOfMeasure__mD_x002em = 1095,
	eml21__UnitOfMeasure__mD_x002f_x0028Pa_x002es_x0029 = 1096,
	eml21__UnitOfMeasure__mD_x002fcP = 1097,
	eml21__UnitOfMeasure__MEuc = 1098,
	eml21__UnitOfMeasure__mEuc = 1099,
	eml21__UnitOfMeasure__meV = 1100,
	eml21__UnitOfMeasure__MeV = 1101,
	eml21__UnitOfMeasure__MF = 1102,
	eml21__UnitOfMeasure__mF = 1103,
	eml21__UnitOfMeasure__mg = 1104,
	eml21__UnitOfMeasure__Mg = 1105,
	eml21__UnitOfMeasure__Mg_x002fa = 1106,
	eml21__UnitOfMeasure__Mg_x002fd = 1107,
	eml21__UnitOfMeasure__mg_x002fdm3 = 1108,
	eml21__UnitOfMeasure__mg_x002fg = 1109,
	eml21__UnitOfMeasure__mg_x002fgal_x005bUS_x005d = 1110,
	eml21__UnitOfMeasure__Mg_x002fh = 1111,
	eml21__UnitOfMeasure__Mg_x002fin = 1112,
	eml21__UnitOfMeasure__mg_x002fJ = 1113,
	eml21__UnitOfMeasure__mg_x002fkg = 1114,
	eml21__UnitOfMeasure__mg_x002fL = 1115,
	eml21__UnitOfMeasure__Mg_x002fm2 = 1116,
	eml21__UnitOfMeasure__mg_x002fm3 = 1117,
	eml21__UnitOfMeasure__Mg_x002fm3 = 1118,
	eml21__UnitOfMeasure__Mg_x002fmin = 1119,
	eml21__UnitOfMeasure__mGal = 1120,
	eml21__UnitOfMeasure__mgauss = 1121,
	eml21__UnitOfMeasure__Mgauss = 1122,
	eml21__UnitOfMeasure__Mgf = 1123,
	eml21__UnitOfMeasure__mgn = 1124,
	eml21__UnitOfMeasure__MGy = 1125,
	eml21__UnitOfMeasure__mGy = 1126,
	eml21__UnitOfMeasure__mH = 1127,
	eml21__UnitOfMeasure__MH = 1128,
	eml21__UnitOfMeasure__mHz = 1129,
	eml21__UnitOfMeasure__MHz = 1130,
	eml21__UnitOfMeasure__mi = 1131,
	eml21__UnitOfMeasure__mi_x002fgal_x005bUK_x005d = 1132,
	eml21__UnitOfMeasure__mi_x002fgal_x005bUS_x005d = 1133,
	eml21__UnitOfMeasure__mi_x002fh = 1134,
	eml21__UnitOfMeasure__mi_x002fin = 1135,
	eml21__UnitOfMeasure__mi_x005bnaut_x005d = 1136,
	eml21__UnitOfMeasure__mi_x005bnautUK_x005d = 1137,
	eml21__UnitOfMeasure__mi_x005bUS_x005d = 1138,
	eml21__UnitOfMeasure__mi_x005bUS_x005d2 = 1139,
	eml21__UnitOfMeasure__mi2 = 1140,
	eml21__UnitOfMeasure__mi3 = 1141,
	eml21__UnitOfMeasure__Mibyte = 1142,
	eml21__UnitOfMeasure__mil = 1143,
	eml21__UnitOfMeasure__mil_x002fa = 1144,
	eml21__UnitOfMeasure__mila = 1145,
	eml21__UnitOfMeasure__min_ = 1146,
	eml21__UnitOfMeasure__min_x002fft = 1147,
	eml21__UnitOfMeasure__min_x002fm = 1148,
	eml21__UnitOfMeasure__mina = 1149,
	eml21__UnitOfMeasure__mJ = 1150,
	eml21__UnitOfMeasure__MJ = 1151,
	eml21__UnitOfMeasure__MJ_x002fa = 1152,
	eml21__UnitOfMeasure__mJ_x002fcm2 = 1153,
	eml21__UnitOfMeasure__MJ_x002fkg = 1154,
	eml21__UnitOfMeasure__MJ_x002fkmol = 1155,
	eml21__UnitOfMeasure__MJ_x002fm = 1156,
	eml21__UnitOfMeasure__mJ_x002fm2 = 1157,
	eml21__UnitOfMeasure__MJ_x002fm3 = 1158,
	eml21__UnitOfMeasure__mL = 1159,
	eml21__UnitOfMeasure__mL_x002fgal_x005bUK_x005d = 1160,
	eml21__UnitOfMeasure__mL_x002fgal_x005bUS_x005d = 1161,
	eml21__UnitOfMeasure__mL_x002fmL = 1162,
	eml21__UnitOfMeasure__mm = 1163,
	eml21__UnitOfMeasure__Mm = 1164,
	eml21__UnitOfMeasure__mm_x002f_x0028mm_x002eK_x0029 = 1165,
	eml21__UnitOfMeasure__mm_x002fa = 1166,
	eml21__UnitOfMeasure__mm_x002fs = 1167,
	eml21__UnitOfMeasure__mm2 = 1168,
	eml21__UnitOfMeasure__mm2_x002fmm2 = 1169,
	eml21__UnitOfMeasure__mm2_x002fs = 1170,
	eml21__UnitOfMeasure__mm3 = 1171,
	eml21__UnitOfMeasure__mm3_x002fJ = 1172,
	eml21__UnitOfMeasure__mmHg_x005b0degC_x005d = 1173,
	eml21__UnitOfMeasure__mmol = 1174,
	eml21__UnitOfMeasure__MN = 1175,
	eml21__UnitOfMeasure__mN = 1176,
	eml21__UnitOfMeasure__mN_x002em2 = 1177,
	eml21__UnitOfMeasure__mN_x002fkm = 1178,
	eml21__UnitOfMeasure__mN_x002fm = 1179,
	eml21__UnitOfMeasure__Mohm = 1180,
	eml21__UnitOfMeasure__mohm = 1181,
	eml21__UnitOfMeasure__mol = 1182,
	eml21__UnitOfMeasure__mol_x002em2_x002f_x0028mol_x002es_x0029 = 1183,
	eml21__UnitOfMeasure__mol_x002f_x0028s_x002em2_x0029 = 1184,
	eml21__UnitOfMeasure__mol_x002fm2 = 1185,
	eml21__UnitOfMeasure__mol_x002fm3 = 1186,
	eml21__UnitOfMeasure__mol_x002fmol = 1187,
	eml21__UnitOfMeasure__mol_x002fs = 1188,
	eml21__UnitOfMeasure__MP = 1189,
	eml21__UnitOfMeasure__mP = 1190,
	eml21__UnitOfMeasure__mPa = 1191,
	eml21__UnitOfMeasure__MPa = 1192,
	eml21__UnitOfMeasure__mPa_x002es = 1193,
	eml21__UnitOfMeasure__MPa_x002es_x002fm = 1194,
	eml21__UnitOfMeasure__MPa_x002fh = 1195,
	eml21__UnitOfMeasure__MPa_x002fm = 1196,
	eml21__UnitOfMeasure__Mpsi = 1197,
	eml21__UnitOfMeasure__Mrad = 1198,
	eml21__UnitOfMeasure__mrad = 1199,
	eml21__UnitOfMeasure__mrd = 1200,
	eml21__UnitOfMeasure__Mrd = 1201,
	eml21__UnitOfMeasure__mrem = 1202,
	eml21__UnitOfMeasure__mrem_x002fh = 1203,
	eml21__UnitOfMeasure__ms = 1204,
	eml21__UnitOfMeasure__MS = 1205,
	eml21__UnitOfMeasure__mS = 1206,
	eml21__UnitOfMeasure__mS_x002fcm = 1207,
	eml21__UnitOfMeasure__ms_x002fcm = 1208,
	eml21__UnitOfMeasure__ms_x002fft = 1209,
	eml21__UnitOfMeasure__ms_x002fin = 1210,
	eml21__UnitOfMeasure__mS_x002fm = 1211,
	eml21__UnitOfMeasure__ms_x002fm = 1212,
	eml21__UnitOfMeasure__ms_x002fs = 1213,
	eml21__UnitOfMeasure__mSv = 1214,
	eml21__UnitOfMeasure__mSv_x002fh = 1215,
	eml21__UnitOfMeasure__mT = 1216,
	eml21__UnitOfMeasure__mT_x002fdm = 1217,
	eml21__UnitOfMeasure__MV = 1218,
	eml21__UnitOfMeasure__mV = 1219,
	eml21__UnitOfMeasure__mV_x002fft = 1220,
	eml21__UnitOfMeasure__mV_x002fm = 1221,
	eml21__UnitOfMeasure__mW = 1222,
	eml21__UnitOfMeasure__MW = 1223,
	eml21__UnitOfMeasure__MW_x002eh = 1224,
	eml21__UnitOfMeasure__MW_x002eh_x002fkg = 1225,
	eml21__UnitOfMeasure__MW_x002eh_x002fm3 = 1226,
	eml21__UnitOfMeasure__mW_x002fm2 = 1227,
	eml21__UnitOfMeasure__MWb = 1228,
	eml21__UnitOfMeasure__mWb = 1229,
	eml21__UnitOfMeasure__N_x002em = 1230,
	eml21__UnitOfMeasure__N_x002em_x002fm = 1231,
	eml21__UnitOfMeasure__N_x002em2 = 1232,
	eml21__UnitOfMeasure__N_x002es_x002fm2 = 1233,
	eml21__UnitOfMeasure__N_x002fm = 1234,
	eml21__UnitOfMeasure__N_x002fm2 = 1235,
	eml21__UnitOfMeasure__N_x002fm3 = 1236,
	eml21__UnitOfMeasure__N_x002fmm2 = 1237,
	eml21__UnitOfMeasure__N_x002fN = 1238,
	eml21__UnitOfMeasure__na = 1239,
	eml21__UnitOfMeasure__nA = 1240,
	eml21__UnitOfMeasure__nAPI = 1241,
	eml21__UnitOfMeasure__nC = 1242,
	eml21__UnitOfMeasure__ncal_x005bth_x005d = 1243,
	eml21__UnitOfMeasure__nCi = 1244,
	eml21__UnitOfMeasure__nEuc = 1245,
	eml21__UnitOfMeasure__neV = 1246,
	eml21__UnitOfMeasure__nF = 1247,
	eml21__UnitOfMeasure__ng = 1248,
	eml21__UnitOfMeasure__ng_x002fg = 1249,
	eml21__UnitOfMeasure__ng_x002fmg = 1250,
	eml21__UnitOfMeasure__ngauss = 1251,
	eml21__UnitOfMeasure__nGy = 1252,
	eml21__UnitOfMeasure__nH = 1253,
	eml21__UnitOfMeasure__nHz = 1254,
	eml21__UnitOfMeasure__nJ = 1255,
	eml21__UnitOfMeasure__nm = 1256,
	eml21__UnitOfMeasure__nm_x002fs = 1257,
	eml21__UnitOfMeasure__nN = 1258,
	eml21__UnitOfMeasure__nohm = 1259,
	eml21__UnitOfMeasure__nohm_x002emil2_x002fft = 1260,
	eml21__UnitOfMeasure__nohm_x002emm2_x002fm = 1261,
	eml21__UnitOfMeasure__nP = 1262,
	eml21__UnitOfMeasure__nPa = 1263,
	eml21__UnitOfMeasure__nrd = 1264,
	eml21__UnitOfMeasure__ns = 1265,
	eml21__UnitOfMeasure__nS = 1266,
	eml21__UnitOfMeasure__ns_x002fft = 1267,
	eml21__UnitOfMeasure__ns_x002fm = 1268,
	eml21__UnitOfMeasure__nT = 1269,
	eml21__UnitOfMeasure__nV = 1270,
	eml21__UnitOfMeasure__nW = 1271,
	eml21__UnitOfMeasure__nWb = 1272,
	eml21__UnitOfMeasure__Oe = 1273,
	eml21__UnitOfMeasure__ohm = 1274,
	eml21__UnitOfMeasure__ohm_x002ecm = 1275,
	eml21__UnitOfMeasure__ohm_x002em = 1276,
	eml21__UnitOfMeasure__ohm_x002em2_x002fm = 1277,
	eml21__UnitOfMeasure__ohm_x002fm = 1278,
	eml21__UnitOfMeasure__ozf = 1279,
	eml21__UnitOfMeasure__ozm = 1280,
	eml21__UnitOfMeasure__ozm_x005btroy_x005d = 1281,
	eml21__UnitOfMeasure__Pa = 1282,
	eml21__UnitOfMeasure__pA = 1283,
	eml21__UnitOfMeasure__Pa_x002es = 1284,
	eml21__UnitOfMeasure__Pa_x002es_x002em3_x002fkg = 1285,
	eml21__UnitOfMeasure__Pa_x002es_x002fm3 = 1286,
	eml21__UnitOfMeasure__Pa_x002es2_x002fm3 = 1287,
	eml21__UnitOfMeasure__Pa_x002fh = 1288,
	eml21__UnitOfMeasure__Pa_x002fm = 1289,
	eml21__UnitOfMeasure__Pa_x002fm3 = 1290,
	eml21__UnitOfMeasure__Pa_x002fs = 1291,
	eml21__UnitOfMeasure__Pa2 = 1292,
	eml21__UnitOfMeasure__Pa2_x002f_x0028Pa_x002es_x0029 = 1293,
	eml21__UnitOfMeasure__pC = 1294,
	eml21__UnitOfMeasure__pcal_x005bth_x005d = 1295,
	eml21__UnitOfMeasure__pCi = 1296,
	eml21__UnitOfMeasure__pCi_x002fg = 1297,
	eml21__UnitOfMeasure__pdl = 1298,
	eml21__UnitOfMeasure__pdl_x002ecm2 = 1299,
	eml21__UnitOfMeasure__pdl_x002eft = 1300,
	eml21__UnitOfMeasure__pdl_x002fcm = 1301,
	eml21__UnitOfMeasure__pEuc = 1302,
	eml21__UnitOfMeasure__peV = 1303,
	eml21__UnitOfMeasure__pF = 1304,
	eml21__UnitOfMeasure__pg = 1305,
	eml21__UnitOfMeasure__pgauss = 1306,
	eml21__UnitOfMeasure__pGy = 1307,
	eml21__UnitOfMeasure__pHz = 1308,
	eml21__UnitOfMeasure__pJ = 1309,
	eml21__UnitOfMeasure__pm = 1310,
	eml21__UnitOfMeasure__pN = 1311,
	eml21__UnitOfMeasure__pohm = 1312,
	eml21__UnitOfMeasure__pP = 1313,
	eml21__UnitOfMeasure__pPa = 1314,
	eml21__UnitOfMeasure__ppk = 1315,
	eml21__UnitOfMeasure__ppm = 1316,
	eml21__UnitOfMeasure__ppm_x005bmass_x005d = 1317,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d = 1318,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegC = 1319,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegF = 1320,
	eml21__UnitOfMeasure__prd = 1321,
	eml21__UnitOfMeasure__pS = 1322,
	eml21__UnitOfMeasure__ps = 1323,
	eml21__UnitOfMeasure__psi = 1324,
	eml21__UnitOfMeasure__psi_x002ed_x002fbbl = 1325,
	eml21__UnitOfMeasure__psi_x002es = 1326,
	eml21__UnitOfMeasure__psi_x002fft = 1327,
	eml21__UnitOfMeasure__psi_x002fh = 1328,
	eml21__UnitOfMeasure__psi_x002fm = 1329,
	eml21__UnitOfMeasure__psi_x002fmin = 1330,
	eml21__UnitOfMeasure__psi2 = 1331,
	eml21__UnitOfMeasure__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1332,
	eml21__UnitOfMeasure__psi2_x002fcP = 1333,
	eml21__UnitOfMeasure__pT = 1334,
	eml21__UnitOfMeasure__pt_x005bUK_x005d = 1335,
	eml21__UnitOfMeasure__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 1336,
	eml21__UnitOfMeasure__pt_x005bUS_x005d = 1337,
	eml21__UnitOfMeasure__pV = 1338,
	eml21__UnitOfMeasure__pW = 1339,
	eml21__UnitOfMeasure__pWb = 1340,
	eml21__UnitOfMeasure__qt_x005bUK_x005d = 1341,
	eml21__UnitOfMeasure__qt_x005bUS_x005d = 1342,
	eml21__UnitOfMeasure__quad = 1343,
	eml21__UnitOfMeasure__quad_x002fa = 1344,
	eml21__UnitOfMeasure__rad = 1345,
	eml21__UnitOfMeasure__rad_x002fft = 1346,
	eml21__UnitOfMeasure__rad_x002fft3 = 1347,
	eml21__UnitOfMeasure__rad_x002fm = 1348,
	eml21__UnitOfMeasure__rad_x002fm3 = 1349,
	eml21__UnitOfMeasure__rad_x002fs = 1350,
	eml21__UnitOfMeasure__rad_x002fs2 = 1351,
	eml21__UnitOfMeasure__rd = 1352,
	eml21__UnitOfMeasure__rem = 1353,
	eml21__UnitOfMeasure__rem_x002fh = 1354,
	eml21__UnitOfMeasure__rev = 1355,
	eml21__UnitOfMeasure__rev_x002fft = 1356,
	eml21__UnitOfMeasure__rev_x002fm = 1357,
	eml21__UnitOfMeasure__rev_x002fs = 1358,
	eml21__UnitOfMeasure__rod_x005bUS_x005d = 1359,
	eml21__UnitOfMeasure__rpm = 1360,
	eml21__UnitOfMeasure__rpm_x002fs = 1361,
	eml21__UnitOfMeasure__s_x002fcm = 1362,
	eml21__UnitOfMeasure__s_x002fft = 1363,
	eml21__UnitOfMeasure__s_x002fft3 = 1364,
	eml21__UnitOfMeasure__s_x002fin = 1365,
	eml21__UnitOfMeasure__s_x002fkg = 1366,
	eml21__UnitOfMeasure__s_x002fL = 1367,
	eml21__UnitOfMeasure__s_x002fm = 1368,
	eml21__UnitOfMeasure__S_x002fm = 1369,
	eml21__UnitOfMeasure__s_x002fm3 = 1370,
	eml21__UnitOfMeasure__s_x002fqt_x005bUK_x005d = 1371,
	eml21__UnitOfMeasure__s_x002fqt_x005bUS_x005d = 1372,
	eml21__UnitOfMeasure__s_x002fs = 1373,
	eml21__UnitOfMeasure__sack_x005b94lbm_x005d = 1374,
	eml21__UnitOfMeasure__seca = 1375,
	eml21__UnitOfMeasure__section = 1376,
	eml21__UnitOfMeasure__sr = 1377,
	eml21__UnitOfMeasure__St = 1378,
	eml21__UnitOfMeasure__Sv = 1379,
	eml21__UnitOfMeasure__Sv_x002fh = 1380,
	eml21__UnitOfMeasure__Sv_x002fs = 1381,
	eml21__UnitOfMeasure__t_x002fa = 1382,
	eml21__UnitOfMeasure__t_x002fd = 1383,
	eml21__UnitOfMeasure__t_x002fh = 1384,
	eml21__UnitOfMeasure__T_x002fm = 1385,
	eml21__UnitOfMeasure__t_x002fm3 = 1386,
	eml21__UnitOfMeasure__t_x002fmin = 1387,
	eml21__UnitOfMeasure__TA = 1388,
	eml21__UnitOfMeasure__Ta_x005bt_x005d = 1389,
	eml21__UnitOfMeasure__TBq = 1390,
	eml21__UnitOfMeasure__TC = 1391,
	eml21__UnitOfMeasure__Tcal_x005bth_x005d = 1392,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d = 1393,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d_x002em = 1394,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 1395,
	eml21__UnitOfMeasure__TEuc = 1396,
	eml21__UnitOfMeasure__TeV = 1397,
	eml21__UnitOfMeasure__TF = 1398,
	eml21__UnitOfMeasure__Tg = 1399,
	eml21__UnitOfMeasure__Tgauss = 1400,
	eml21__UnitOfMeasure__TGy = 1401,
	eml21__UnitOfMeasure__TH = 1402,
	eml21__UnitOfMeasure__therm_x005bEC_x005d = 1403,
	eml21__UnitOfMeasure__therm_x005bUK_x005d = 1404,
	eml21__UnitOfMeasure__therm_x005bUS_x005d = 1405,
	eml21__UnitOfMeasure__THz = 1406,
	eml21__UnitOfMeasure__TJ = 1407,
	eml21__UnitOfMeasure__TJ_x002fa = 1408,
	eml21__UnitOfMeasure__Tm = 1409,
	eml21__UnitOfMeasure__TN = 1410,
	eml21__UnitOfMeasure__Tohm = 1411,
	eml21__UnitOfMeasure__ton_x005bUK_x005d = 1412,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fa = 1413,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fd = 1414,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fh = 1415,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fmin = 1416,
	eml21__UnitOfMeasure__ton_x005bUS_x005d = 1417,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fa = 1418,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fd = 1419,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fft2 = 1420,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fh = 1421,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fmin = 1422,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d = 1423,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002eft2 = 1424,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002fft = 1425,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002fft2 = 1426,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d = 1427,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002eft = 1428,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002eft2 = 1429,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi = 1430,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fbbl = 1431,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fft = 1432,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fft = 1433,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fft2 = 1434,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fin2 = 1435,
	eml21__UnitOfMeasure__tonRefrig = 1436,
	eml21__UnitOfMeasure__torr = 1437,
	eml21__UnitOfMeasure__TP = 1438,
	eml21__UnitOfMeasure__TPa = 1439,
	eml21__UnitOfMeasure__Trd = 1440,
	eml21__UnitOfMeasure__TS = 1441,
	eml21__UnitOfMeasure__TT = 1442,
	eml21__UnitOfMeasure__TV = 1443,
	eml21__UnitOfMeasure__TW = 1444,
	eml21__UnitOfMeasure__TW_x002eh = 1445,
	eml21__UnitOfMeasure__TWb = 1446,
	eml21__UnitOfMeasure__uA = 1447,
	eml21__UnitOfMeasure__uA_x002fcm2 = 1448,
	eml21__UnitOfMeasure__uA_x002fin2 = 1449,
	eml21__UnitOfMeasure__ubar = 1450,
	eml21__UnitOfMeasure__uC = 1451,
	eml21__UnitOfMeasure__ucal_x005bth_x005d = 1452,
	eml21__UnitOfMeasure__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 1453,
	eml21__UnitOfMeasure__ucal_x005bth_x005d_x002fs = 1454,
	eml21__UnitOfMeasure__uCi = 1455,
	eml21__UnitOfMeasure__uEuc = 1456,
	eml21__UnitOfMeasure__ueV = 1457,
	eml21__UnitOfMeasure__uF = 1458,
	eml21__UnitOfMeasure__uF_x002fm = 1459,
	eml21__UnitOfMeasure__ug = 1460,
	eml21__UnitOfMeasure__ug_x002fcm3 = 1461,
	eml21__UnitOfMeasure__ug_x002fg = 1462,
	eml21__UnitOfMeasure__ug_x002fmg = 1463,
	eml21__UnitOfMeasure__ugauss = 1464,
	eml21__UnitOfMeasure__uGy = 1465,
	eml21__UnitOfMeasure__uH = 1466,
	eml21__UnitOfMeasure__uH_x002fm = 1467,
	eml21__UnitOfMeasure__uHz = 1468,
	eml21__UnitOfMeasure__uJ = 1469,
	eml21__UnitOfMeasure__um = 1470,
	eml21__UnitOfMeasure__um_x002fs = 1471,
	eml21__UnitOfMeasure__um2 = 1472,
	eml21__UnitOfMeasure__um2_x002em = 1473,
	eml21__UnitOfMeasure__umHg_x005b0degC_x005d = 1474,
	eml21__UnitOfMeasure__umol = 1475,
	eml21__UnitOfMeasure__uN = 1476,
	eml21__UnitOfMeasure__uohm = 1477,
	eml21__UnitOfMeasure__uohm_x002fft = 1478,
	eml21__UnitOfMeasure__uohm_x002fm = 1479,
	eml21__UnitOfMeasure__uP = 1480,
	eml21__UnitOfMeasure__uPa = 1481,
	eml21__UnitOfMeasure__upsi = 1482,
	eml21__UnitOfMeasure__urad = 1483,
	eml21__UnitOfMeasure__urd = 1484,
	eml21__UnitOfMeasure__us = 1485,
	eml21__UnitOfMeasure__uS = 1486,
	eml21__UnitOfMeasure__us_x002fft = 1487,
	eml21__UnitOfMeasure__us_x002fin = 1488,
	eml21__UnitOfMeasure__us_x002fm = 1489,
	eml21__UnitOfMeasure__uT = 1490,
	eml21__UnitOfMeasure__uV = 1491,
	eml21__UnitOfMeasure__uV_x002fft = 1492,
	eml21__UnitOfMeasure__uV_x002fm = 1493,
	eml21__UnitOfMeasure__uW = 1494,
	eml21__UnitOfMeasure__uW_x002fm3 = 1495,
	eml21__UnitOfMeasure__uWb = 1496,
	eml21__UnitOfMeasure__V_x002fB = 1497,
	eml21__UnitOfMeasure__V_x002fdB = 1498,
	eml21__UnitOfMeasure__V_x002fm = 1499,
	eml21__UnitOfMeasure__W_x002em2_x002eK_x002f_x0028J_x002eK_x0029 = 1500,
	eml21__UnitOfMeasure__W_x002f_x0028m_x002eK_x0029 = 1501,
	eml21__UnitOfMeasure__W_x002f_x0028m2_x002eK_x0029 = 1502,
	eml21__UnitOfMeasure__W_x002f_x0028m2_x002esr_x0029 = 1503,
	eml21__UnitOfMeasure__W_x002f_x0028m3_x002eK_x0029 = 1504,
	eml21__UnitOfMeasure__W_x002fcm2 = 1505,
	eml21__UnitOfMeasure__W_x002fK = 1506,
	eml21__UnitOfMeasure__W_x002fkW = 1507,
	eml21__UnitOfMeasure__W_x002fm2 = 1508,
	eml21__UnitOfMeasure__W_x002fm3 = 1509,
	eml21__UnitOfMeasure__W_x002fmm2 = 1510,
	eml21__UnitOfMeasure__W_x002fsr = 1511,
	eml21__UnitOfMeasure__W_x002fW = 1512,
	eml21__UnitOfMeasure__Wb = 1513,
	eml21__UnitOfMeasure__Wb_x002em = 1514,
	eml21__UnitOfMeasure__Wb_x002fm = 1515,
	eml21__UnitOfMeasure__Wb_x002fmm = 1516,
	eml21__UnitOfMeasure__wk = 1517,
	eml21__UnitOfMeasure__yd = 1518,
	eml21__UnitOfMeasure__yd_x005bBnA_x005d = 1519,
	eml21__UnitOfMeasure__yd_x005bBnB_x005d = 1520,
	eml21__UnitOfMeasure__yd_x005bCla_x005d = 1521,
	eml21__UnitOfMeasure__yd_x005bInd_x005d = 1522,
	eml21__UnitOfMeasure__yd_x005bInd37_x005d = 1523,
	eml21__UnitOfMeasure__yd_x005bInd62_x005d = 1524,
	eml21__UnitOfMeasure__yd_x005bInd75_x005d = 1525,
	eml21__UnitOfMeasure__yd_x005bSe_x005d = 1526,
	eml21__UnitOfMeasure__yd_x005bSeT_x005d = 1527,
	eml21__UnitOfMeasure__yd_x005bUS_x005d = 1528,
	eml21__UnitOfMeasure__yd2 = 1529,
	eml21__UnitOfMeasure__yd3 = 1530
};
#endif

/* eml2_1ForGsoap.h:4394 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom (-1075)

/* eml21:AbsorbedDoseUom */
enum eml21__AbsorbedDoseUom {
	eml21__AbsorbedDoseUom__cGy = 0,
	eml21__AbsorbedDoseUom__crd = 1,
	eml21__AbsorbedDoseUom__dGy = 2,
	eml21__AbsorbedDoseUom__drd = 3,
	eml21__AbsorbedDoseUom__EGy = 4,
	eml21__AbsorbedDoseUom__Erd = 5,
	eml21__AbsorbedDoseUom__fGy = 6,
	eml21__AbsorbedDoseUom__frd = 7,
	eml21__AbsorbedDoseUom__GGy = 8,
	eml21__AbsorbedDoseUom__Grd = 9,
	eml21__AbsorbedDoseUom__Gy = 10,
	eml21__AbsorbedDoseUom__kGy = 11,
	eml21__AbsorbedDoseUom__krd = 12,
	eml21__AbsorbedDoseUom__mGy = 13,
	eml21__AbsorbedDoseUom__MGy = 14,
	eml21__AbsorbedDoseUom__Mrd = 15,
	eml21__AbsorbedDoseUom__mrd = 16,
	eml21__AbsorbedDoseUom__nGy = 17,
	eml21__AbsorbedDoseUom__nrd = 18,
	eml21__AbsorbedDoseUom__pGy = 19,
	eml21__AbsorbedDoseUom__prd = 20,
	eml21__AbsorbedDoseUom__rd = 21,
	eml21__AbsorbedDoseUom__TGy = 22,
	eml21__AbsorbedDoseUom__Trd = 23,
	eml21__AbsorbedDoseUom__uGy = 24,
	eml21__AbsorbedDoseUom__urd = 25
};
#endif

/* eml2_1ForGsoap.h:4531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom (-1076)

/* eml21:ActivityOfRadioactivityUom */
enum eml21__ActivityOfRadioactivityUom {
	eml21__ActivityOfRadioactivityUom__Bq = 0,
	eml21__ActivityOfRadioactivityUom__Ci = 1,
	eml21__ActivityOfRadioactivityUom__GBq = 2,
	eml21__ActivityOfRadioactivityUom__MBq = 3,
	eml21__ActivityOfRadioactivityUom__mCi = 4,
	eml21__ActivityOfRadioactivityUom__nCi = 5,
	eml21__ActivityOfRadioactivityUom__pCi = 6,
	eml21__ActivityOfRadioactivityUom__TBq = 7,
	eml21__ActivityOfRadioactivityUom__uCi = 8
};
#endif

/* eml2_1ForGsoap.h:4583 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom (-1077)

/* eml21:AmountOfSubstancePerAmountOfSubstanceUom */
enum eml21__AmountOfSubstancePerAmountOfSubstanceUom {
	eml21__AmountOfSubstancePerAmountOfSubstanceUom___x0025 = 0,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom___x0025_x005bmolar_x005d = 1,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__Euc = 2,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__mol_x002fmol = 3,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__nEuc = 4,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__ppk = 5,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__ppm = 6
};
#endif

/* eml2_1ForGsoap.h:4625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom (-1078)

/* eml21:AmountOfSubstancePerAreaUom */
enum eml21__AmountOfSubstancePerAreaUom {
	eml21__AmountOfSubstancePerAreaUom__mol_x002fm2 = 0
};
#endif

/* eml2_1ForGsoap.h:4637 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom (-1079)

/* eml21:AmountOfSubstancePerTimePerAreaUom */
enum eml21__AmountOfSubstancePerTimePerAreaUom {
	eml21__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028h_x002eft2_x0029 = 0,
	eml21__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__AmountOfSubstancePerTimePerAreaUom__mol_x002f_x0028s_x002em2_x0029 = 2
};
#endif

/* eml2_1ForGsoap.h:4659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom (-1080)

/* eml21:AmountOfSubstancePerTimeUom */
enum eml21__AmountOfSubstancePerTimeUom {
	eml21__AmountOfSubstancePerTimeUom__kat = 0,
	eml21__AmountOfSubstancePerTimeUom__kmol_x002fh = 1,
	eml21__AmountOfSubstancePerTimeUom__kmol_x002fs = 2,
	eml21__AmountOfSubstancePerTimeUom__lbmol_x002fh = 3,
	eml21__AmountOfSubstancePerTimeUom__lbmol_x002fs = 4,
	eml21__AmountOfSubstancePerTimeUom__mol_x002fs = 5
};
#endif

/* eml2_1ForGsoap.h:4696 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom (-1081)

/* eml21:AmountOfSubstancePerVolumeUom */
enum eml21__AmountOfSubstancePerVolumeUom {
	eml21__AmountOfSubstancePerVolumeUom__kmol_x002fm3 = 0,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fft3 = 1,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUK_x005d = 2,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUS_x005d = 3,
	eml21__AmountOfSubstancePerVolumeUom__mol_x002fm3 = 4
};
#endif

/* eml2_1ForGsoap.h:4728 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom (-1082)

/* eml21:AmountOfSubstanceUom */
enum eml21__AmountOfSubstanceUom {
	eml21__AmountOfSubstanceUom__kmol = 0,
	eml21__AmountOfSubstanceUom__lbmol = 1,
	eml21__AmountOfSubstanceUom__mmol = 2,
	eml21__AmountOfSubstanceUom__mol = 3,
	eml21__AmountOfSubstanceUom__umol = 4
};
#endif

/* eml2_1ForGsoap.h:4760 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom (-1083)

/* eml21:AnglePerLengthUom */
enum eml21__AnglePerLengthUom {
	eml21__AnglePerLengthUom__0_x002e01_x0020dega_x002fft = 0,
	eml21__AnglePerLengthUom__1_x002f30_x0020dega_x002fft = 1,
	eml21__AnglePerLengthUom__1_x002f30_x0020dega_x002fm = 2,
	eml21__AnglePerLengthUom__dega_x002fft = 3,
	eml21__AnglePerLengthUom__dega_x002fm = 4,
	eml21__AnglePerLengthUom__rad_x002fft = 5,
	eml21__AnglePerLengthUom__rad_x002fm = 6,
	eml21__AnglePerLengthUom__rev_x002fft = 7,
	eml21__AnglePerLengthUom__rev_x002fm = 8
};
#endif

/* eml2_1ForGsoap.h:4812 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom (-1084)

/* eml21:AnglePerVolumeUom */
enum eml21__AnglePerVolumeUom {
	eml21__AnglePerVolumeUom__rad_x002fft3 = 0,
	eml21__AnglePerVolumeUom__rad_x002fm3 = 1
};
#endif

/* eml2_1ForGsoap.h:4829 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom (-1085)

/* eml21:AngularAccelerationUom */
enum eml21__AngularAccelerationUom {
	eml21__AngularAccelerationUom__rad_x002fs2 = 0,
	eml21__AngularAccelerationUom__rpm_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:4846 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom (-1086)

/* eml21:AngularVelocityUom */
enum eml21__AngularVelocityUom {
	eml21__AngularVelocityUom__dega_x002fh = 0,
	eml21__AngularVelocityUom__dega_x002fmin = 1,
	eml21__AngularVelocityUom__dega_x002fs = 2,
	eml21__AngularVelocityUom__rad_x002fs = 3,
	eml21__AngularVelocityUom__rev_x002fs = 4,
	eml21__AngularVelocityUom__rpm = 5
};
#endif

/* eml2_1ForGsoap.h:4883 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom (-1087)

/* eml21:APIGammaRayUom */
enum eml21__APIGammaRayUom {
	eml21__APIGammaRayUom__gAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4895 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom (-1088)

/* eml21:APIGravityUom */
enum eml21__APIGravityUom {
	eml21__APIGravityUom__dAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4907 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom (-1089)

/* eml21:APINeutronUom */
enum eml21__APINeutronUom {
	eml21__APINeutronUom__nAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom (-1090)

/* eml21:AreaPerAmountOfSubstanceUom */
enum eml21__AreaPerAmountOfSubstanceUom {
	eml21__AreaPerAmountOfSubstanceUom__m2_x002fmol = 0
};
#endif

/* eml2_1ForGsoap.h:4931 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom (-1091)

/* eml21:AreaPerAreaUom */
enum eml21__AreaPerAreaUom {
	eml21__AreaPerAreaUom___x0025 = 0,
	eml21__AreaPerAreaUom___x0025_x005barea_x005d = 1,
	eml21__AreaPerAreaUom__cEuc = 2,
	eml21__AreaPerAreaUom__Euc = 3,
	eml21__AreaPerAreaUom__in2_x002fft2 = 4,
	eml21__AreaPerAreaUom__in2_x002fin2 = 5,
	eml21__AreaPerAreaUom__m2_x002fm2 = 6,
	eml21__AreaPerAreaUom__mm2_x002fmm2 = 7
};
#endif

/* eml2_1ForGsoap.h:4978 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom (-1092)

/* eml21:AreaPerCountUom */
enum eml21__AreaPerCountUom {
	eml21__AreaPerCountUom__b_x002felectron = 0
};
#endif

/* eml2_1ForGsoap.h:4986 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom (-1093)

/* eml21:AreaPerMassUom */
enum eml21__AreaPerMassUom {
	eml21__AreaPerMassUom__cm2_x002fg = 0,
	eml21__AreaPerMassUom__ft2_x002flbm = 1,
	eml21__AreaPerMassUom__m2_x002fg = 2,
	eml21__AreaPerMassUom__m2_x002fkg = 3
};
#endif

/* eml2_1ForGsoap.h:5013 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom (-1094)

/* eml21:AreaPerTimeUom */
enum eml21__AreaPerTimeUom {
	eml21__AreaPerTimeUom__cm2_x002fs = 0,
	eml21__AreaPerTimeUom__ft2_x002fh = 1,
	eml21__AreaPerTimeUom__ft2_x002fs = 2,
	eml21__AreaPerTimeUom__in2_x002fs = 3,
	eml21__AreaPerTimeUom__m2_x002fd = 4,
	eml21__AreaPerTimeUom__m2_x002fh = 5,
	eml21__AreaPerTimeUom__m2_x002fs = 6,
	eml21__AreaPerTimeUom__mm2_x002fs = 7
};
#endif

/* eml2_1ForGsoap.h:5060 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom (-1095)

/* eml21:AreaPerVolumeUom */
enum eml21__AreaPerVolumeUom {
	eml21__AreaPerVolumeUom__1_x002fm = 0,
	eml21__AreaPerVolumeUom__b_x002fcm3 = 1,
	eml21__AreaPerVolumeUom__cu = 2,
	eml21__AreaPerVolumeUom__ft2_x002fin3 = 3,
	eml21__AreaPerVolumeUom__m2_x002fcm3 = 4,
	eml21__AreaPerVolumeUom__m2_x002fm3 = 5
};
#endif

/* eml2_1ForGsoap.h:5097 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom (-1096)

/* eml21:AreaUom */
enum eml21__AreaUom {
	eml21__AreaUom__b = 'b',
	eml21__AreaUom__acre = 'c',
	eml21__AreaUom__cm2 = 'd',
	eml21__AreaUom__ft2 = 'e',
	eml21__AreaUom__ha = 'f',
	eml21__AreaUom__in2 = 'g',
	eml21__AreaUom__km2 = 'h',
	eml21__AreaUom__m2 = 'i',
	eml21__AreaUom__mi_x005bUS_x005d2 = 'j',
	eml21__AreaUom__mi2 = 'k',
	eml21__AreaUom__mm2 = 'l',
	eml21__AreaUom__section = 'm',
	eml21__AreaUom__um2 = 'n',
	eml21__AreaUom__yd2 = 'o'
};
#endif

/* eml2_1ForGsoap.h:5174 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom (-1097)

/* eml21:AttenuationPerFrequencyIntervalUom */
enum eml21__AttenuationPerFrequencyIntervalUom {
	eml21__AttenuationPerFrequencyIntervalUom__B_x002fO = 0,
	eml21__AttenuationPerFrequencyIntervalUom__dB_x002fO = 1
};
#endif

/* eml2_1ForGsoap.h:5191 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom (-1098)

/* eml21:CapacitanceUom */
enum eml21__CapacitanceUom {
	eml21__CapacitanceUom__F = 'F',
	eml21__CapacitanceUom__cF = 'G',
	eml21__CapacitanceUom__dF = 'H',
	eml21__CapacitanceUom__EF = 'I',
	eml21__CapacitanceUom__fF = 'J',
	eml21__CapacitanceUom__GF = 'K',
	eml21__CapacitanceUom__kF = 'L',
	eml21__CapacitanceUom__mF = 'M',
	eml21__CapacitanceUom__MF = 'N',
	eml21__CapacitanceUom__nF = 'O',
	eml21__CapacitanceUom__pF = 'P',
	eml21__CapacitanceUom__TF = 'Q',
	eml21__CapacitanceUom__uF = 'R'
};
#endif

/* eml2_1ForGsoap.h:5263 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom (-1099)

/* eml21:CationExchangeCapacityUom */
enum eml21__CationExchangeCapacityUom {
	eml21__CationExchangeCapacityUom___x002e01_x0020meq_x002fg = 0
};
#endif

/* eml2_1ForGsoap.h:5271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom (-1100)

/* eml21:DataTransferSpeedUom */
enum eml21__DataTransferSpeedUom {
	eml21__DataTransferSpeedUom__bit_x002fs = 0,
	eml21__DataTransferSpeedUom__byte_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:5288 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom (-1101)

/* eml21:DiffusionCoefficientUom */
enum eml21__DiffusionCoefficientUom {
	eml21__DiffusionCoefficientUom__m2_x002fs = 0
};
#endif

/* eml2_1ForGsoap.h:5300 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom (-1102)

/* eml21:DiffusiveTimeOfFlightUom */
enum eml21__DiffusiveTimeOfFlightUom {
	eml21__DiffusiveTimeOfFlightUom__h_x00280_x002e5_x0029 = 0,
	eml21__DiffusiveTimeOfFlightUom__s_x00280_x002e5_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:5313 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom (-1103)

/* eml21:DigitalStorageUom */
enum eml21__DigitalStorageUom {
	eml21__DigitalStorageUom__bit = 0,
	eml21__DigitalStorageUom__byte = 1,
	eml21__DigitalStorageUom__Kibyte = 2,
	eml21__DigitalStorageUom__Mibyte = 3
};
#endif

/* eml2_1ForGsoap.h:5340 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom (-1104)

/* eml21:DimensionlessUom */
enum eml21__DimensionlessUom {
	eml21__DimensionlessUom___x0025 = 0,
	eml21__DimensionlessUom__cEuc = 1,
	eml21__DimensionlessUom__dEuc = 2,
	eml21__DimensionlessUom__EEuc = 3,
	eml21__DimensionlessUom__Euc = 4,
	eml21__DimensionlessUom__fEuc = 5,
	eml21__DimensionlessUom__GEuc = 6,
	eml21__DimensionlessUom__kEuc = 7,
	eml21__DimensionlessUom__MEuc = 8,
	eml21__DimensionlessUom__mEuc = 9,
	eml21__DimensionlessUom__nEuc = 10,
	eml21__DimensionlessUom__pEuc = 11,
	eml21__DimensionlessUom__ppk = 12,
	eml21__DimensionlessUom__ppm = 13,
	eml21__DimensionlessUom__TEuc = 14,
	eml21__DimensionlessUom__uEuc = 15
};
#endif

/* eml2_1ForGsoap.h:5427 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom (-1105)

/* eml21:DipoleMomentUom */
enum eml21__DipoleMomentUom {
	eml21__DipoleMomentUom__C_x002em = 0
};
#endif

/* eml2_1ForGsoap.h:5439 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom (-1106)

/* eml21:DoseEquivalentUom */
enum eml21__DoseEquivalentUom {
	eml21__DoseEquivalentUom__mrem = 0,
	eml21__DoseEquivalentUom__mSv = 1,
	eml21__DoseEquivalentUom__rem = 2,
	eml21__DoseEquivalentUom__Sv = 3
};
#endif

/* eml2_1ForGsoap.h:5466 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom (-1107)

/* eml21:DynamicViscosityUom */
enum eml21__DynamicViscosityUom {
	eml21__DynamicViscosityUom__P = 'P',
	eml21__DynamicViscosityUom__cP = 'Q',
	eml21__DynamicViscosityUom__dP = 'R',
	eml21__DynamicViscosityUom__dyne_x002es_x002fcm2 = 'S',
	eml21__DynamicViscosityUom__EP = 'T',
	eml21__DynamicViscosityUom__fP = 'U',
	eml21__DynamicViscosityUom__GP = 'V',
	eml21__DynamicViscosityUom__kgf_x002es_x002fm2 = 'W',
	eml21__DynamicViscosityUom__kP = 'X',
	eml21__DynamicViscosityUom__lbf_x002es_x002fft2 = 'Y',
	eml21__DynamicViscosityUom__lbf_x002es_x002fin2 = 'Z',
	eml21__DynamicViscosityUom__mP = 91,
	eml21__DynamicViscosityUom__MP = 92,
	eml21__DynamicViscosityUom__mPa_x002es = 93,
	eml21__DynamicViscosityUom__N_x002es_x002fm2 = 94,
	eml21__DynamicViscosityUom__nP = 95,
	eml21__DynamicViscosityUom__Pa_x002es = 96,
	eml21__DynamicViscosityUom__pP = 'a',
	eml21__DynamicViscosityUom__psi_x002es = 'b',
	eml21__DynamicViscosityUom__TP = 'c',
	eml21__DynamicViscosityUom__uP = 'd'
};
#endif

/* eml2_1ForGsoap.h:5578 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom (-1108)

/* eml21:ElectricalResistivityUom */
enum eml21__ElectricalResistivityUom {
	eml21__ElectricalResistivityUom__kohm_x002em = 0,
	eml21__ElectricalResistivityUom__nohm_x002emil2_x002fft = 1,
	eml21__ElectricalResistivityUom__nohm_x002emm2_x002fm = 2,
	eml21__ElectricalResistivityUom__ohm_x002ecm = 3,
	eml21__ElectricalResistivityUom__ohm_x002em = 4,
	eml21__ElectricalResistivityUom__ohm_x002em2_x002fm = 5
};
#endif

/* eml2_1ForGsoap.h:5615 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom (-1109)

/* eml21:ElectricChargePerAreaUom */
enum eml21__ElectricChargePerAreaUom {
	eml21__ElectricChargePerAreaUom__C_x002fcm2 = 0,
	eml21__ElectricChargePerAreaUom__C_x002fm2 = 1,
	eml21__ElectricChargePerAreaUom__C_x002fmm2 = 2,
	eml21__ElectricChargePerAreaUom__mC_x002fm2 = 3
};
#endif

/* eml2_1ForGsoap.h:5642 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom (-1110)

/* eml21:ElectricChargePerMassUom */
enum eml21__ElectricChargePerMassUom {
	eml21__ElectricChargePerMassUom__A_x002es_x002fkg = 0,
	eml21__ElectricChargePerMassUom__C_x002fg = 1,
	eml21__ElectricChargePerMassUom__C_x002fkg = 2
};
#endif

/* eml2_1ForGsoap.h:5664 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom (-1111)

/* eml21:ElectricChargePerVolumeUom */
enum eml21__ElectricChargePerVolumeUom {
	eml21__ElectricChargePerVolumeUom__A_x002es_x002fm3 = 0,
	eml21__ElectricChargePerVolumeUom__C_x002fcm3 = 1,
	eml21__ElectricChargePerVolumeUom__C_x002fm3 = 2,
	eml21__ElectricChargePerVolumeUom__C_x002fmm3 = 3
};
#endif

/* eml2_1ForGsoap.h:5691 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom (-1112)

/* eml21:ElectricChargeUom */
enum eml21__ElectricChargeUom {
	eml21__ElectricChargeUom__C = 'C',
	eml21__ElectricChargeUom__A_x002eh = 'D',
	eml21__ElectricChargeUom__A_x002es = 'E',
	eml21__ElectricChargeUom__cC = 'F',
	eml21__ElectricChargeUom__dC = 'G',
	eml21__ElectricChargeUom__EC = 'H',
	eml21__ElectricChargeUom__fC = 'I',
	eml21__ElectricChargeUom__GC = 'J',
	eml21__ElectricChargeUom__kC = 'K',
	eml21__ElectricChargeUom__MC = 'L',
	eml21__ElectricChargeUom__mC = 'M',
	eml21__ElectricChargeUom__nC = 'N',
	eml21__ElectricChargeUom__pC = 'O',
	eml21__ElectricChargeUom__TC = 'P',
	eml21__ElectricChargeUom__uC = 'Q'
};
#endif

/* eml2_1ForGsoap.h:5773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom (-1113)

/* eml21:ElectricConductanceUom */
enum eml21__ElectricConductanceUom {
	eml21__ElectricConductanceUom__S = 'S',
	eml21__ElectricConductanceUom__cS = 'T',
	eml21__ElectricConductanceUom__dS = 'U',
	eml21__ElectricConductanceUom__ES = 'V',
	eml21__ElectricConductanceUom__fS = 'W',
	eml21__ElectricConductanceUom__GS = 'X',
	eml21__ElectricConductanceUom__kS = 'Y',
	eml21__ElectricConductanceUom__mS = 'Z',
	eml21__ElectricConductanceUom__MS = 91,
	eml21__ElectricConductanceUom__nS = 92,
	eml21__ElectricConductanceUom__pS = 93,
	eml21__ElectricConductanceUom__TS = 94,
	eml21__ElectricConductanceUom__uS = 95
};
#endif

/* eml2_1ForGsoap.h:5845 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom (-1114)

/* eml21:ElectricConductivityUom */
enum eml21__ElectricConductivityUom {
	eml21__ElectricConductivityUom__kS_x002fm = 0,
	eml21__ElectricConductivityUom__mS_x002fcm = 1,
	eml21__ElectricConductivityUom__mS_x002fm = 2,
	eml21__ElectricConductivityUom__S_x002fm = 3
};
#endif

/* eml2_1ForGsoap.h:5872 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom (-1115)

/* eml21:ElectricCurrentDensityUom */
enum eml21__ElectricCurrentDensityUom {
	eml21__ElectricCurrentDensityUom__A_x002fcm2 = 0,
	eml21__ElectricCurrentDensityUom__A_x002fft2 = 1,
	eml21__ElectricCurrentDensityUom__A_x002fm2 = 2,
	eml21__ElectricCurrentDensityUom__A_x002fmm2 = 3,
	eml21__ElectricCurrentDensityUom__mA_x002fcm2 = 4,
	eml21__ElectricCurrentDensityUom__mA_x002fft2 = 5,
	eml21__ElectricCurrentDensityUom__uA_x002fcm2 = 6,
	eml21__ElectricCurrentDensityUom__uA_x002fin2 = 7
};
#endif

/* eml2_1ForGsoap.h:5919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom (-1116)

/* eml21:ElectricCurrentUom */
enum eml21__ElectricCurrentUom {
	eml21__ElectricCurrentUom__A = 'A',
	eml21__ElectricCurrentUom__cA = 'B',
	eml21__ElectricCurrentUom__dA = 'C',
	eml21__ElectricCurrentUom__EA = 'D',
	eml21__ElectricCurrentUom__fA = 'E',
	eml21__ElectricCurrentUom__GA = 'F',
	eml21__ElectricCurrentUom__kA = 'G',
	eml21__ElectricCurrentUom__MA = 'H',
	eml21__ElectricCurrentUom__mA = 'I',
	eml21__ElectricCurrentUom__nA = 'J',
	eml21__ElectricCurrentUom__pA = 'K',
	eml21__ElectricCurrentUom__TA = 'L',
	eml21__ElectricCurrentUom__uA = 'M'
};
#endif

/* eml2_1ForGsoap.h:5991 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom (-1117)

/* eml21:ElectricFieldStrengthUom */
enum eml21__ElectricFieldStrengthUom {
	eml21__ElectricFieldStrengthUom__mV_x002fft = 0,
	eml21__ElectricFieldStrengthUom__mV_x002fm = 1,
	eml21__ElectricFieldStrengthUom__uV_x002fft = 2,
	eml21__ElectricFieldStrengthUom__uV_x002fm = 3,
	eml21__ElectricFieldStrengthUom__V_x002fm = 4
};
#endif

/* eml2_1ForGsoap.h:6023 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom (-1118)

/* eml21:ElectricPotentialDifferenceUom */
enum eml21__ElectricPotentialDifferenceUom {
	eml21__ElectricPotentialDifferenceUom__V = 'V',
	eml21__ElectricPotentialDifferenceUom__cV = 'W',
	eml21__ElectricPotentialDifferenceUom__dV = 'X',
	eml21__ElectricPotentialDifferenceUom__fV = 'Y',
	eml21__ElectricPotentialDifferenceUom__GV = 'Z',
	eml21__ElectricPotentialDifferenceUom__kV = 91,
	eml21__ElectricPotentialDifferenceUom__mV = 92,
	eml21__ElectricPotentialDifferenceUom__MV = 93,
	eml21__ElectricPotentialDifferenceUom__nV = 94,
	eml21__ElectricPotentialDifferenceUom__pV = 95,
	eml21__ElectricPotentialDifferenceUom__TV = 96,
	eml21__ElectricPotentialDifferenceUom__uV = 'a'
};
#endif

/* eml2_1ForGsoap.h:6090 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom (-1119)

/* eml21:ElectricResistancePerLengthUom */
enum eml21__ElectricResistancePerLengthUom {
	eml21__ElectricResistancePerLengthUom__ohm_x002fm = 0,
	eml21__ElectricResistancePerLengthUom__uohm_x002fft = 1,
	eml21__ElectricResistancePerLengthUom__uohm_x002fm = 2
};
#endif

/* eml2_1ForGsoap.h:6112 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom (-1120)

/* eml21:ElectricResistanceUom */
enum eml21__ElectricResistanceUom {
	eml21__ElectricResistanceUom__cohm = 0,
	eml21__ElectricResistanceUom__dohm = 1,
	eml21__ElectricResistanceUom__Eohm = 2,
	eml21__ElectricResistanceUom__fohm = 3,
	eml21__ElectricResistanceUom__Gohm = 4,
	eml21__ElectricResistanceUom__kohm = 5,
	eml21__ElectricResistanceUom__Mohm = 6,
	eml21__ElectricResistanceUom__mohm = 7,
	eml21__ElectricResistanceUom__nohm = 8,
	eml21__ElectricResistanceUom__ohm = 9,
	eml21__ElectricResistanceUom__pohm = 10,
	eml21__ElectricResistanceUom__Tohm = 11,
	eml21__ElectricResistanceUom__uohm = 12
};
#endif

/* eml2_1ForGsoap.h:6184 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom (-1121)

/* eml21:ElectromagneticMomentUom */
enum eml21__ElectromagneticMomentUom {
	eml21__ElectromagneticMomentUom__A_x002em2 = 0
};
#endif

/* eml2_1ForGsoap.h:6196 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom (-1122)

/* eml21:EnergyLengthPerAreaUom */
enum eml21__EnergyLengthPerAreaUom {
	eml21__EnergyLengthPerAreaUom__J_x002em_x002fm2 = 0,
	eml21__EnergyLengthPerAreaUom__kcal_x005bth_x005d_x002em_x002fcm2 = 1
};
#endif

/* eml2_1ForGsoap.h:6213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom (-1123)

/* eml21:EnergyLengthPerTimeAreaTemperatureUom */
enum eml21__EnergyLengthPerTimeAreaTemperatureUom {
	eml21__EnergyLengthPerTimeAreaTemperatureUom__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__J_x002em_x002f_x0028s_x002em2_x002edeltaK_x0029 = 1,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__kJ_x002em_x002f_x0028h_x002em2_x002edeltaK_x0029 = 2,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__W_x002f_x0028m_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:6240 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom (-1124)

/* eml21:EnergyPerAreaUom */
enum eml21__EnergyPerAreaUom {
	eml21__EnergyPerAreaUom__erg_x002fcm2 = 0,
	eml21__EnergyPerAreaUom__J_x002fcm2 = 1,
	eml21__EnergyPerAreaUom__J_x002fm2 = 2,
	eml21__EnergyPerAreaUom__kgf_x002em_x002fcm2 = 3,
	eml21__EnergyPerAreaUom__lbf_x002eft_x002fin2 = 4,
	eml21__EnergyPerAreaUom__mJ_x002fcm2 = 5,
	eml21__EnergyPerAreaUom__mJ_x002fm2 = 6,
	eml21__EnergyPerAreaUom__N_x002fm = 7
};
#endif

/* eml2_1ForGsoap.h:6287 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom (-1125)

/* eml21:EnergyPerLengthUom */
enum eml21__EnergyPerLengthUom {
	eml21__EnergyPerLengthUom__J_x002fm = 0,
	eml21__EnergyPerLengthUom__MJ_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:6304 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom (-1126)

/* eml21:EnergyPerMassPerTimeUom */
enum eml21__EnergyPerMassPerTimeUom {
	eml21__EnergyPerMassPerTimeUom__mrem_x002fh = 0,
	eml21__EnergyPerMassPerTimeUom__mSv_x002fh = 1,
	eml21__EnergyPerMassPerTimeUom__rem_x002fh = 2,
	eml21__EnergyPerMassPerTimeUom__Sv_x002fh = 3,
	eml21__EnergyPerMassPerTimeUom__Sv_x002fs = 4
};
#endif

/* eml2_1ForGsoap.h:6336 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom (-1127)

/* eml21:EnergyPerMassUom */
enum eml21__EnergyPerMassUom {
	eml21__EnergyPerMassUom__Btu_x005bIT_x005d_x002flbm = 0,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002fg = 1,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002fkg = 2,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002flbm = 3,
	eml21__EnergyPerMassUom__erg_x002fg = 4,
	eml21__EnergyPerMassUom__erg_x002fkg = 5,
	eml21__EnergyPerMassUom__hp_x002eh_x002flbm = 6,
	eml21__EnergyPerMassUom__J_x002fg = 7,
	eml21__EnergyPerMassUom__J_x002fkg = 8,
	eml21__EnergyPerMassUom__kcal_x005bth_x005d_x002fg = 9,
	eml21__EnergyPerMassUom__kcal_x005bth_x005d_x002fkg = 10,
	eml21__EnergyPerMassUom__kJ_x002fkg = 11,
	eml21__EnergyPerMassUom__kW_x002eh_x002fkg = 12,
	eml21__EnergyPerMassUom__lbf_x002eft_x002flbm = 13,
	eml21__EnergyPerMassUom__MJ_x002fkg = 14,
	eml21__EnergyPerMassUom__MW_x002eh_x002fkg = 15
};
#endif

/* eml2_1ForGsoap.h:6423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom (-1128)

/* eml21:EnergyPerVolumeUom */
enum eml21__EnergyPerVolumeUom {
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fbbl = 0,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fft3 = 1,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 2,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 3,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fcm3 = 4,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmL = 5,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmm3 = 6,
	eml21__EnergyPerVolumeUom__erg_x002fcm3 = 7,
	eml21__EnergyPerVolumeUom__erg_x002fm3 = 8,
	eml21__EnergyPerVolumeUom__hp_x002eh_x002fbbl = 9,
	eml21__EnergyPerVolumeUom__J_x002fdm3 = 10,
	eml21__EnergyPerVolumeUom__J_x002fm3 = 11,
	eml21__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fcm3 = 12,
	eml21__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fm3 = 13,
	eml21__EnergyPerVolumeUom__kJ_x002fdm3 = 14,
	eml21__EnergyPerVolumeUom__kJ_x002fm3 = 15,
	eml21__EnergyPerVolumeUom__kW_x002eh_x002fdm3 = 16,
	eml21__EnergyPerVolumeUom__kW_x002eh_x002fm3 = 17,
	eml21__EnergyPerVolumeUom__lbf_x002eft_x002fbbl = 18,
	eml21__EnergyPerVolumeUom__lbf_x002eft_x002fgal_x005bUS_x005d = 19,
	eml21__EnergyPerVolumeUom__MJ_x002fm3 = 20,
	eml21__EnergyPerVolumeUom__MW_x002eh_x002fm3 = 21,
	eml21__EnergyPerVolumeUom__tonf_x005bUS_x005d_x002emi_x002fbbl = 22
};
#endif

/* eml2_1ForGsoap.h:6545 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom (-1129)

/* eml21:EnergyUom */
enum eml21__EnergyUom {
	eml21__EnergyUom__J = 'J',
	eml21__EnergyUom__1E6_x0020Btu_x005bIT_x005d = 'K',
	eml21__EnergyUom__aJ = 'L',
	eml21__EnergyUom__Btu_x005bIT_x005d = 'M',
	eml21__EnergyUom__Btu_x005bth_x005d = 'N',
	eml21__EnergyUom__Btu_x005bUK_x005d = 'O',
	eml21__EnergyUom__cal_x005bIT_x005d = 'P',
	eml21__EnergyUom__cal_x005bth_x005d = 'Q',
	eml21__EnergyUom__ccal_x005bth_x005d = 'R',
	eml21__EnergyUom__ceV = 'S',
	eml21__EnergyUom__cJ = 'T',
	eml21__EnergyUom__dcal_x005bth_x005d = 'U',
	eml21__EnergyUom__deV = 'V',
	eml21__EnergyUom__dJ = 'W',
	eml21__EnergyUom__Ecal_x005bth_x005d = 'X',
	eml21__EnergyUom__EeV = 'Y',
	eml21__EnergyUom__EJ = 'Z',
	eml21__EnergyUom__erg = 91,
	eml21__EnergyUom__eV = 92,
	eml21__EnergyUom__fcal_x005bth_x005d = 93,
	eml21__EnergyUom__feV = 94,
	eml21__EnergyUom__fJ = 95,
	eml21__EnergyUom__Gcal_x005bth_x005d = 96,
	eml21__EnergyUom__GeV = 'a',
	eml21__EnergyUom__GJ = 'b',
	eml21__EnergyUom__GW_x002eh = 'c',
	eml21__EnergyUom__hp_x002eh = 'd',
	eml21__EnergyUom__hp_x005bmetric_x005d_x002eh = 'e',
	eml21__EnergyUom__kcal_x005bth_x005d = 'f',
	eml21__EnergyUom__keV = 'g',
	eml21__EnergyUom__kJ = 'h',
	eml21__EnergyUom__kW_x002eh = 'i',
	eml21__EnergyUom__mcal_x005bth_x005d = 'j',
	eml21__EnergyUom__Mcal_x005bth_x005d = 'k',
	eml21__EnergyUom__meV = 'l',
	eml21__EnergyUom__MeV = 'm',
	eml21__EnergyUom__MJ = 'n',
	eml21__EnergyUom__mJ = 'o',
	eml21__EnergyUom__MW_x002eh = 'p',
	eml21__EnergyUom__ncal_x005bth_x005d = 'q',
	eml21__EnergyUom__neV = 'r',
	eml21__EnergyUom__nJ = 's',
	eml21__EnergyUom__pcal_x005bth_x005d = 't',
	eml21__EnergyUom__peV = 'u',
	eml21__EnergyUom__pJ = 'v',
	eml21__EnergyUom__quad = 'w',
	eml21__EnergyUom__Tcal_x005bth_x005d = 'x',
	eml21__EnergyUom__TeV = 'y',
	eml21__EnergyUom__therm_x005bEC_x005d = 'z',
	eml21__EnergyUom__therm_x005bUK_x005d = 123,
	eml21__EnergyUom__therm_x005bUS_x005d = 124,
	eml21__EnergyUom__TJ = 125,
	eml21__EnergyUom__TW_x002eh = 126,
	eml21__EnergyUom__ucal_x005bth_x005d = 127,
	eml21__EnergyUom__ueV = 128,
	eml21__EnergyUom__uJ = 129
};
#endif

/* eml2_1ForGsoap.h:6832 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom (-1130)

/* eml21:ForceAreaUom */
enum eml21__ForceAreaUom {
	eml21__ForceAreaUom__dyne_x002ecm2 = 0,
	eml21__ForceAreaUom__kgf_x002em2 = 1,
	eml21__ForceAreaUom__kN_x002em2 = 2,
	eml21__ForceAreaUom__lbf_x002ein2 = 3,
	eml21__ForceAreaUom__mN_x002em2 = 4,
	eml21__ForceAreaUom__N_x002em2 = 5,
	eml21__ForceAreaUom__pdl_x002ecm2 = 6,
	eml21__ForceAreaUom__tonf_x005bUK_x005d_x002eft2 = 7,
	eml21__ForceAreaUom__tonf_x005bUS_x005d_x002eft2 = 8
};
#endif

/* eml2_1ForGsoap.h:6884 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom (-1131)

/* eml21:ForceLengthPerLengthUom */
enum eml21__ForceLengthPerLengthUom {
	eml21__ForceLengthPerLengthUom__kgf_x002em_x002fm = 0,
	eml21__ForceLengthPerLengthUom__lbf_x002eft_x002fin = 1,
	eml21__ForceLengthPerLengthUom__lbf_x002ein_x002fin = 2,
	eml21__ForceLengthPerLengthUom__N_x002em_x002fm = 3,
	eml21__ForceLengthPerLengthUom__tonf_x005bUS_x005d_x002emi_x002fft = 4
};
#endif

/* eml2_1ForGsoap.h:6916 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom (-1132)

/* eml21:ForcePerForceUom */
enum eml21__ForcePerForceUom {
	eml21__ForcePerForceUom___x0025 = 0,
	eml21__ForcePerForceUom__Euc = 1,
	eml21__ForcePerForceUom__kgf_x002fkgf = 2,
	eml21__ForcePerForceUom__lbf_x002flbf = 3,
	eml21__ForcePerForceUom__N_x002fN = 4
};
#endif

/* eml2_1ForGsoap.h:6948 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom (-1133)

/* eml21:ForcePerLengthUom */
enum eml21__ForcePerLengthUom {
	eml21__ForcePerLengthUom__0_x002e01_x0020lbf_x002fft = 0,
	eml21__ForcePerLengthUom__1_x002f30_x0020lbf_x002fm = 1,
	eml21__ForcePerLengthUom__1_x002f30_x0020N_x002fm = 2,
	eml21__ForcePerLengthUom__dyne_x002fcm = 3,
	eml21__ForcePerLengthUom__kgf_x002fcm = 4,
	eml21__ForcePerLengthUom__kN_x002fm = 5,
	eml21__ForcePerLengthUom__lbf_x002fft = 6,
	eml21__ForcePerLengthUom__lbf_x002fin = 7,
	eml21__ForcePerLengthUom__mN_x002fkm = 8,
	eml21__ForcePerLengthUom__mN_x002fm = 9,
	eml21__ForcePerLengthUom__N_x002fm = 10,
	eml21__ForcePerLengthUom__pdl_x002fcm = 11,
	eml21__ForcePerLengthUom__tonf_x005bUK_x005d_x002fft = 12,
	eml21__ForcePerLengthUom__tonf_x005bUS_x005d_x002fft = 13
};
#endif

/* eml2_1ForGsoap.h:7025 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom (-1134)

/* eml21:ForcePerVolumeUom */
enum eml21__ForcePerVolumeUom {
	eml21__ForcePerVolumeUom__0_x002e001_x0020psi_x002fft = 0,
	eml21__ForcePerVolumeUom__0_x002e01_x0020psi_x002fft = 1,
	eml21__ForcePerVolumeUom__atm_x002fft = 2,
	eml21__ForcePerVolumeUom__atm_x002fhm = 3,
	eml21__ForcePerVolumeUom__atm_x002fm = 4,
	eml21__ForcePerVolumeUom__bar_x002fkm = 5,
	eml21__ForcePerVolumeUom__bar_x002fm = 6,
	eml21__ForcePerVolumeUom__GPa_x002fcm = 7,
	eml21__ForcePerVolumeUom__kPa_x002fhm = 8,
	eml21__ForcePerVolumeUom__kPa_x002fm = 9,
	eml21__ForcePerVolumeUom__lbf_x002fft3 = 10,
	eml21__ForcePerVolumeUom__lbf_x002fgal_x005bUS_x005d = 11,
	eml21__ForcePerVolumeUom__MPa_x002fm = 12,
	eml21__ForcePerVolumeUom__N_x002fm3 = 13,
	eml21__ForcePerVolumeUom__Pa_x002fm = 14,
	eml21__ForcePerVolumeUom__psi_x002fft = 15,
	eml21__ForcePerVolumeUom__psi_x002fm = 16
};
#endif

/* eml2_1ForGsoap.h:7117 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom (-1135)

/* eml21:ForceUom */
enum eml21__ForceUom {
	eml21__ForceUom__N = 'N',
	eml21__ForceUom__10_x0020kN = 'O',
	eml21__ForceUom__cN = 'P',
	eml21__ForceUom__daN = 'Q',
	eml21__ForceUom__dN = 'R',
	eml21__ForceUom__dyne = 'S',
	eml21__ForceUom__EN = 'T',
	eml21__ForceUom__fN = 'U',
	eml21__ForceUom__gf = 'V',
	eml21__ForceUom__GN = 'W',
	eml21__ForceUom__hN = 'X',
	eml21__ForceUom__kdyne = 'Y',
	eml21__ForceUom__kgf = 'Z',
	eml21__ForceUom__klbf = 91,
	eml21__ForceUom__kN = 92,
	eml21__ForceUom__lbf = 93,
	eml21__ForceUom__Mgf = 94,
	eml21__ForceUom__mN = 95,
	eml21__ForceUom__MN = 96,
	eml21__ForceUom__nN = 'a',
	eml21__ForceUom__ozf = 'b',
	eml21__ForceUom__pdl = 'c',
	eml21__ForceUom__pN = 'd',
	eml21__ForceUom__TN = 'e',
	eml21__ForceUom__tonf_x005bUK_x005d = 'f',
	eml21__ForceUom__tonf_x005bUS_x005d = 'g',
	eml21__ForceUom__uN = 'h'
};
#endif

/* eml2_1ForGsoap.h:7259 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom (-1136)

/* eml21:FrequencyIntervalUom */
enum eml21__FrequencyIntervalUom {
	eml21__FrequencyIntervalUom__O = 'O'
};
#endif

/* eml2_1ForGsoap.h:7271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom (-1137)

/* eml21:FrequencyUom */
enum eml21__FrequencyUom {
	eml21__FrequencyUom__cHz = 0,
	eml21__FrequencyUom__dHz = 1,
	eml21__FrequencyUom__EHz = 2,
	eml21__FrequencyUom__fHz = 3,
	eml21__FrequencyUom__GHz = 4,
	eml21__FrequencyUom__Hz = 5,
	eml21__FrequencyUom__kHz = 6,
	eml21__FrequencyUom__mHz = 7,
	eml21__FrequencyUom__MHz = 8,
	eml21__FrequencyUom__nHz = 9,
	eml21__FrequencyUom__pHz = 10,
	eml21__FrequencyUom__THz = 11,
	eml21__FrequencyUom__uHz = 12
};
#endif

/* eml2_1ForGsoap.h:7343 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom (-1138)

/* eml21:HeatCapacityUom */
enum eml21__HeatCapacityUom {
	eml21__HeatCapacityUom__J_x002fdeltaK = 0
};
#endif

/* eml2_1ForGsoap.h:7355 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom (-1139)

/* eml21:HeatFlowRateUom */
enum eml21__HeatFlowRateUom {
	eml21__HeatFlowRateUom__W = 'W',
	eml21__HeatFlowRateUom__1E6_x0020Btu_x005bIT_x005d_x002fh = 'X',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fh = 'Y',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fmin = 'Z',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fs = 91,
	eml21__HeatFlowRateUom__cal_x005bth_x005d_x002fh = 92,
	eml21__HeatFlowRateUom__EJ_x002fa = 93,
	eml21__HeatFlowRateUom__erg_x002fa = 94,
	eml21__HeatFlowRateUom__GW = 95,
	eml21__HeatFlowRateUom__J_x002fs = 96,
	eml21__HeatFlowRateUom__kcal_x005bth_x005d_x002fh = 'a',
	eml21__HeatFlowRateUom__kW = 'b',
	eml21__HeatFlowRateUom__lbf_x002eft_x002fmin = 'c',
	eml21__HeatFlowRateUom__lbf_x002eft_x002fs = 'd',
	eml21__HeatFlowRateUom__MJ_x002fa = 'e',
	eml21__HeatFlowRateUom__mW = 'f',
	eml21__HeatFlowRateUom__MW = 'g',
	eml21__HeatFlowRateUom__nW = 'h',
	eml21__HeatFlowRateUom__quad_x002fa = 'i',
	eml21__HeatFlowRateUom__TJ_x002fa = 'j',
	eml21__HeatFlowRateUom__TW = 'k',
	eml21__HeatFlowRateUom__ucal_x005bth_x005d_x002fs = 'l',
	eml21__HeatFlowRateUom__uW = 'm'
};
#endif

/* eml2_1ForGsoap.h:7477 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom (-1140)

/* eml21:HeatTransferCoefficientUom */
enum eml21__HeatTransferCoefficientUom {
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaR_x0029 = 1,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 2,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edeltaF_x0029 = 3,
	eml21__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edeltaC_x0029 = 4,
	eml21__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edeltaC_x0029 = 5,
	eml21__HeatTransferCoefficientUom__J_x002f_x0028s_x002em2_x002edeltaC_x0029 = 6,
	eml21__HeatTransferCoefficientUom__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 7,
	eml21__HeatTransferCoefficientUom__kJ_x002f_x0028h_x002em2_x002edeltaK_x0029 = 8,
	eml21__HeatTransferCoefficientUom__kW_x002f_x0028m2_x002edeltaK_x0029 = 9,
	eml21__HeatTransferCoefficientUom__W_x002f_x0028m2_x002edeltaK_x0029 = 10
};
#endif

/* eml2_1ForGsoap.h:7539 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom (-1141)

/* eml21:IlluminanceUom */
enum eml21__IlluminanceUom {
	eml21__IlluminanceUom__footcandle = 0,
	eml21__IlluminanceUom__klx = 1,
	eml21__IlluminanceUom__lm_x002fm2 = 2,
	eml21__IlluminanceUom__lx = 3
};
#endif

/* eml2_1ForGsoap.h:7566 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom (-1142)

/* eml21:InductanceUom */
enum eml21__InductanceUom {
	eml21__InductanceUom__H = 'H',
	eml21__InductanceUom__cH = 'I',
	eml21__InductanceUom__dH = 'J',
	eml21__InductanceUom__EH = 'K',
	eml21__InductanceUom__fH = 'L',
	eml21__InductanceUom__GH = 'M',
	eml21__InductanceUom__kH = 'N',
	eml21__InductanceUom__MH = 'O',
	eml21__InductanceUom__mH = 'P',
	eml21__InductanceUom__nH = 'Q',
	eml21__InductanceUom__TH = 'R',
	eml21__InductanceUom__uH = 'S'
};
#endif

/* eml2_1ForGsoap.h:7633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom (-1143)

/* eml21:IsothermalCompressibilityUom */
enum eml21__IsothermalCompressibilityUom {
	eml21__IsothermalCompressibilityUom__dm3_x002f_x0028kW_x002eh_x0029 = 0,
	eml21__IsothermalCompressibilityUom__dm3_x002fMJ = 1,
	eml21__IsothermalCompressibilityUom__m3_x002f_x0028kW_x002eh_x0029 = 2,
	eml21__IsothermalCompressibilityUom__m3_x002fJ = 3,
	eml21__IsothermalCompressibilityUom__mm3_x002fJ = 4,
	eml21__IsothermalCompressibilityUom__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 5
};
#endif

/* eml2_1ForGsoap.h:7670 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom (-1144)

/* eml21:KinematicViscosityUom */
enum eml21__KinematicViscosityUom {
	eml21__KinematicViscosityUom__cm2_x002fs = 0,
	eml21__KinematicViscosityUom__cSt = 1,
	eml21__KinematicViscosityUom__ft2_x002fh = 2,
	eml21__KinematicViscosityUom__ft2_x002fs = 3,
	eml21__KinematicViscosityUom__in2_x002fs = 4,
	eml21__KinematicViscosityUom__m2_x002fh = 5,
	eml21__KinematicViscosityUom__m2_x002fs = 6,
	eml21__KinematicViscosityUom__mm2_x002fs = 7,
	eml21__KinematicViscosityUom__Pa_x002es_x002em3_x002fkg = 8,
	eml21__KinematicViscosityUom__St = 9
};
#endif

/* eml2_1ForGsoap.h:7727 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom (-1145)

/* eml21:LengthPerLengthUom */
enum eml21__LengthPerLengthUom {
	eml21__LengthPerLengthUom___x0025 = 0,
	eml21__LengthPerLengthUom__0_x002e01_x0020ft_x002fft = 1,
	eml21__LengthPerLengthUom__1_x002f30_x0020m_x002fm = 2,
	eml21__LengthPerLengthUom__Euc = 3,
	eml21__LengthPerLengthUom__ft_x002fft = 4,
	eml21__LengthPerLengthUom__ft_x002fin = 5,
	eml21__LengthPerLengthUom__ft_x002fm = 6,
	eml21__LengthPerLengthUom__ft_x002fmi = 7,
	eml21__LengthPerLengthUom__km_x002fcm = 8,
	eml21__LengthPerLengthUom__m_x002fcm = 9,
	eml21__LengthPerLengthUom__m_x002fkm = 10,
	eml21__LengthPerLengthUom__m_x002fm = 11,
	eml21__LengthPerLengthUom__mi_x002fin = 12
};
#endif

/* eml2_1ForGsoap.h:7799 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom (-1146)

/* eml21:LengthPerMassUom */
enum eml21__LengthPerMassUom {
	eml21__LengthPerMassUom__ft_x002flbm = 0,
	eml21__LengthPerMassUom__m_x002fkg = 1
};
#endif

/* eml2_1ForGsoap.h:7816 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom (-1147)

/* eml21:LengthPerPressureUom */
enum eml21__LengthPerPressureUom {
	eml21__LengthPerPressureUom__ft_x002fpsi = 0,
	eml21__LengthPerPressureUom__m_x002fkPa = 1,
	eml21__LengthPerPressureUom__m_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:7838 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom (-1148)

/* eml21:LengthPerTemperatureUom */
enum eml21__LengthPerTemperatureUom {
	eml21__LengthPerTemperatureUom__ft_x002fdeltaF = 0,
	eml21__LengthPerTemperatureUom__m_x002fdeltaK = 1
};
#endif

/* eml2_1ForGsoap.h:7855 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom (-1149)

/* eml21:LengthPerTimeUom */
enum eml21__LengthPerTimeUom {
	eml21__LengthPerTimeUom__1000_x0020ft_x002fh = 0,
	eml21__LengthPerTimeUom__1000_x0020ft_x002fs = 1,
	eml21__LengthPerTimeUom__cm_x002fa = 2,
	eml21__LengthPerTimeUom__cm_x002fs = 3,
	eml21__LengthPerTimeUom__dm_x002fs = 4,
	eml21__LengthPerTimeUom__ft_x002fd = 5,
	eml21__LengthPerTimeUom__ft_x002fh = 6,
	eml21__LengthPerTimeUom__ft_x002fmin = 7,
	eml21__LengthPerTimeUom__ft_x002fms = 8,
	eml21__LengthPerTimeUom__ft_x002fs = 9,
	eml21__LengthPerTimeUom__ft_x002fus = 10,
	eml21__LengthPerTimeUom__in_x002fa = 11,
	eml21__LengthPerTimeUom__in_x002fmin = 12,
	eml21__LengthPerTimeUom__in_x002fs = 13,
	eml21__LengthPerTimeUom__km_x002fh = 14,
	eml21__LengthPerTimeUom__km_x002fs = 15,
	eml21__LengthPerTimeUom__knot = 16,
	eml21__LengthPerTimeUom__m_x002fd = 17,
	eml21__LengthPerTimeUom__m_x002fh = 18,
	eml21__LengthPerTimeUom__m_x002fmin = 19,
	eml21__LengthPerTimeUom__m_x002fms = 20,
	eml21__LengthPerTimeUom__m_x002fs = 21,
	eml21__LengthPerTimeUom__mi_x002fh = 22,
	eml21__LengthPerTimeUom__mil_x002fa = 23,
	eml21__LengthPerTimeUom__mm_x002fa = 24,
	eml21__LengthPerTimeUom__mm_x002fs = 25,
	eml21__LengthPerTimeUom__nm_x002fs = 26,
	eml21__LengthPerTimeUom__um_x002fs = 27
};
#endif

/* eml2_1ForGsoap.h:8002 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom (-1150)

/* eml21:LengthPerVolumeUom */
enum eml21__LengthPerVolumeUom {
	eml21__LengthPerVolumeUom__ft_x002fbbl = 0,
	eml21__LengthPerVolumeUom__ft_x002fft3 = 1,
	eml21__LengthPerVolumeUom__ft_x002fgal_x005bUS_x005d = 2,
	eml21__LengthPerVolumeUom__km_x002fdm3 = 3,
	eml21__LengthPerVolumeUom__km_x002fL = 4,
	eml21__LengthPerVolumeUom__m_x002fm3 = 5,
	eml21__LengthPerVolumeUom__mi_x002fgal_x005bUK_x005d = 6,
	eml21__LengthPerVolumeUom__mi_x002fgal_x005bUS_x005d = 7
};
#endif

/* eml2_1ForGsoap.h:8049 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom (-1151)

/* eml21:LengthUom */
enum eml21__LengthUom {
	eml21__LengthUom__m = 'm',
	eml21__LengthUom__0_x002e1_x0020ft = 'n',
	eml21__LengthUom__0_x002e1_x0020ft_x005bUS_x005d = 'o',
	eml21__LengthUom__0_x002e1_x0020in = 'p',
	eml21__LengthUom__0_x002e1_x0020yd = 'q',
	eml21__LengthUom__1_x002f16_x0020in = 'r',
	eml21__LengthUom__1_x002f2_x0020ft = 's',
	eml21__LengthUom__1_x002f32_x0020in = 't',
	eml21__LengthUom__1_x002f64_x0020in = 'u',
	eml21__LengthUom__10_x0020ft = 'v',
	eml21__LengthUom__10_x0020in = 'w',
	eml21__LengthUom__10_x0020km = 'x',
	eml21__LengthUom__100_x0020ft = 'y',
	eml21__LengthUom__100_x0020km = 'z',
	eml21__LengthUom__1000_x0020ft = 123,
	eml21__LengthUom__30_x0020ft = 124,
	eml21__LengthUom__30_x0020m = 125,
	eml21__LengthUom__angstrom = 126,
	eml21__LengthUom__chain = 127,
	eml21__LengthUom__chain_x005bBnA_x005d = 128,
	eml21__LengthUom__chain_x005bBnB_x005d = 129,
	eml21__LengthUom__chain_x005bCla_x005d = 130,
	eml21__LengthUom__chain_x005bInd37_x005d = 131,
	eml21__LengthUom__chain_x005bSe_x005d = 132,
	eml21__LengthUom__chain_x005bSeT_x005d = 133,
	eml21__LengthUom__chain_x005bUS_x005d = 134,
	eml21__LengthUom__cm = 135,
	eml21__LengthUom__dam = 136,
	eml21__LengthUom__dm = 137,
	eml21__LengthUom__Em = 138,
	eml21__LengthUom__fathom = 139,
	eml21__LengthUom__fm = 140,
	eml21__LengthUom__ft = 141,
	eml21__LengthUom__ft_x005bBnA_x005d = 142,
	eml21__LengthUom__ft_x005bBnB_x005d = 143,
	eml21__LengthUom__ft_x005bBr36_x005d = 144,
	eml21__LengthUom__ft_x005bBr65_x005d = 145,
	eml21__LengthUom__ft_x005bCla_x005d = 146,
	eml21__LengthUom__ft_x005bGC_x005d = 147,
	eml21__LengthUom__ft_x005bInd_x005d = 148,
	eml21__LengthUom__ft_x005bInd37_x005d = 149,
	eml21__LengthUom__ft_x005bInd62_x005d = 150,
	eml21__LengthUom__ft_x005bInd75_x005d = 151,
	eml21__LengthUom__ft_x005bSe_x005d = 152,
	eml21__LengthUom__ft_x005bSeT_x005d = 153,
	eml21__LengthUom__ft_x005bUS_x005d = 154,
	eml21__LengthUom__fur_x005bUS_x005d = 155,
	eml21__LengthUom__Gm = 156,
	eml21__LengthUom__hm = 157,
	eml21__LengthUom__in = 158,
	eml21__LengthUom__in_x005bUS_x005d = 159,
	eml21__LengthUom__km = 160,
	eml21__LengthUom__link = 161,
	eml21__LengthUom__link_x005bBnA_x005d = 162,
	eml21__LengthUom__link_x005bBnB_x005d = 163,
	eml21__LengthUom__link_x005bCla_x005d = 164,
	eml21__LengthUom__link_x005bSe_x005d = 165,
	eml21__LengthUom__link_x005bSeT_x005d = 166,
	eml21__LengthUom__link_x005bUS_x005d = 167,
	eml21__LengthUom__m_x005bGer_x005d = 168,
	eml21__LengthUom__mi = 169,
	eml21__LengthUom__mi_x005bnaut_x005d = 170,
	eml21__LengthUom__mi_x005bnautUK_x005d = 171,
	eml21__LengthUom__mi_x005bUS_x005d = 172,
	eml21__LengthUom__mil = 173,
	eml21__LengthUom__mm = 174,
	eml21__LengthUom__Mm = 175,
	eml21__LengthUom__nm = 176,
	eml21__LengthUom__pm = 177,
	eml21__LengthUom__rod_x005bUS_x005d = 178,
	eml21__LengthUom__Tm = 179,
	eml21__LengthUom__um = 180,
	eml21__LengthUom__yd = 181,
	eml21__LengthUom__yd_x005bBnA_x005d = 182,
	eml21__LengthUom__yd_x005bBnB_x005d = 183,
	eml21__LengthUom__yd_x005bCla_x005d = 184,
	eml21__LengthUom__yd_x005bInd_x005d = 185,
	eml21__LengthUom__yd_x005bInd37_x005d = 186,
	eml21__LengthUom__yd_x005bInd62_x005d = 187,
	eml21__LengthUom__yd_x005bInd75_x005d = 188,
	eml21__LengthUom__yd_x005bSe_x005d = 189,
	eml21__LengthUom__yd_x005bSeT_x005d = 190,
	eml21__LengthUom__yd_x005bUS_x005d = 191
};
#endif

/* eml2_1ForGsoap.h:8471 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom (-1152)

/* eml21:LightExposureUom */
enum eml21__LightExposureUom {
	eml21__LightExposureUom__footcandle_x002es = 0,
	eml21__LightExposureUom__lx_x002es = 1
};
#endif

/* eml2_1ForGsoap.h:8488 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom (-1153)

/* eml21:LinearAccelerationUom */
enum eml21__LinearAccelerationUom {
	eml21__LinearAccelerationUom__cm_x002fs2 = 0,
	eml21__LinearAccelerationUom__ft_x002fs2 = 1,
	eml21__LinearAccelerationUom__Gal = 2,
	eml21__LinearAccelerationUom__gn = 3,
	eml21__LinearAccelerationUom__in_x002fs2 = 4,
	eml21__LinearAccelerationUom__m_x002fs2 = 5,
	eml21__LinearAccelerationUom__mGal = 6,
	eml21__LinearAccelerationUom__mgn = 7
};
#endif

/* eml2_1ForGsoap.h:8535 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom (-1154)

/* eml21:LinearThermalExpansionUom */
enum eml21__LinearThermalExpansionUom {
	eml21__LinearThermalExpansionUom__1_x002fdeltaK = 0,
	eml21__LinearThermalExpansionUom__in_x002f_x0028in_x002edeltaF_x0029 = 1,
	eml21__LinearThermalExpansionUom__m_x002f_x0028m_x002edeltaK_x0029 = 2,
	eml21__LinearThermalExpansionUom__mm_x002f_x0028mm_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:8562 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom (-1155)

/* eml21:LogarithmicPowerRatioPerLengthUom */
enum eml21__LogarithmicPowerRatioPerLengthUom {
	eml21__LogarithmicPowerRatioPerLengthUom__B_x002fm = 0,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fft = 1,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fkm = 2,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fm = 3
};
#endif

/* eml2_1ForGsoap.h:8589 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom (-1156)

/* eml21:LogarithmicPowerRatioUom */
enum eml21__LogarithmicPowerRatioUom {
	eml21__LogarithmicPowerRatioUom__B = 'B',
	eml21__LogarithmicPowerRatioUom__dB = 'C'
};
#endif

/* eml2_1ForGsoap.h:8606 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom (-1157)

/* eml21:LuminanceUom */
enum eml21__LuminanceUom {
	eml21__LuminanceUom__cd_x002fm2 = 0
};
#endif

/* eml2_1ForGsoap.h:8618 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom (-1158)

/* eml21:LuminousEfficacyUom */
enum eml21__LuminousEfficacyUom {
	eml21__LuminousEfficacyUom__lm_x002fW = 0
};
#endif

/* eml2_1ForGsoap.h:8630 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom (-1159)

/* eml21:LuminousFluxUom */
enum eml21__LuminousFluxUom {
	eml21__LuminousFluxUom__lm = 0
};
#endif

/* eml2_1ForGsoap.h:8642 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom (-1160)

/* eml21:LuminousIntensityUom */
enum eml21__LuminousIntensityUom {
	eml21__LuminousIntensityUom__cd = 0,
	eml21__LuminousIntensityUom__kcd = 1
};
#endif

/* eml2_1ForGsoap.h:8659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom (-1161)

/* eml21:MagneticDipoleMomentUom */
enum eml21__MagneticDipoleMomentUom {
	eml21__MagneticDipoleMomentUom__Wb_x002em = 0
};
#endif

/* eml2_1ForGsoap.h:8671 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom (-1162)

/* eml21:MagneticFieldStrengthUom */
enum eml21__MagneticFieldStrengthUom {
	eml21__MagneticFieldStrengthUom__A_x002fm = 0,
	eml21__MagneticFieldStrengthUom__A_x002fmm = 1,
	eml21__MagneticFieldStrengthUom__Oe = 2
};
#endif

/* eml2_1ForGsoap.h:8693 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom (-1163)

/* eml21:MagneticFluxDensityPerLengthUom */
enum eml21__MagneticFluxDensityPerLengthUom {
	eml21__MagneticFluxDensityPerLengthUom__gauss_x002fcm = 0,
	eml21__MagneticFluxDensityPerLengthUom__mT_x002fdm = 1,
	eml21__MagneticFluxDensityPerLengthUom__T_x002fm = 2
};
#endif

/* eml2_1ForGsoap.h:8715 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom (-1164)

/* eml21:MagneticFluxDensityUom */
enum eml21__MagneticFluxDensityUom {
	eml21__MagneticFluxDensityUom__T = 'T',
	eml21__MagneticFluxDensityUom__cgauss = 'U',
	eml21__MagneticFluxDensityUom__cT = 'V',
	eml21__MagneticFluxDensityUom__dgauss = 'W',
	eml21__MagneticFluxDensityUom__dT = 'X',
	eml21__MagneticFluxDensityUom__Egauss = 'Y',
	eml21__MagneticFluxDensityUom__ET = 'Z',
	eml21__MagneticFluxDensityUom__fgauss = 91,
	eml21__MagneticFluxDensityUom__fT = 92,
	eml21__MagneticFluxDensityUom__gauss = 93,
	eml21__MagneticFluxDensityUom__Ggauss = 94,
	eml21__MagneticFluxDensityUom__GT = 95,
	eml21__MagneticFluxDensityUom__kgauss = 96,
	eml21__MagneticFluxDensityUom__kT = 'a',
	eml21__MagneticFluxDensityUom__mgauss = 'b',
	eml21__MagneticFluxDensityUom__Mgauss = 'c',
	eml21__MagneticFluxDensityUom__mT = 'd',
	eml21__MagneticFluxDensityUom__ngauss = 'e',
	eml21__MagneticFluxDensityUom__nT = 'f',
	eml21__MagneticFluxDensityUom__pgauss = 'g',
	eml21__MagneticFluxDensityUom__pT = 'h',
	eml21__MagneticFluxDensityUom__Tgauss = 'i',
	eml21__MagneticFluxDensityUom__TT = 'j',
	eml21__MagneticFluxDensityUom__ugauss = 'k',
	eml21__MagneticFluxDensityUom__uT = 'l'
};
#endif

/* eml2_1ForGsoap.h:8847 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom (-1165)

/* eml21:MagneticFluxUom */
enum eml21__MagneticFluxUom {
	eml21__MagneticFluxUom__cWb = 0,
	eml21__MagneticFluxUom__dWb = 1,
	eml21__MagneticFluxUom__EWb = 2,
	eml21__MagneticFluxUom__fWb = 3,
	eml21__MagneticFluxUom__GWb = 4,
	eml21__MagneticFluxUom__kWb = 5,
	eml21__MagneticFluxUom__mWb = 6,
	eml21__MagneticFluxUom__MWb = 7,
	eml21__MagneticFluxUom__nWb = 8,
	eml21__MagneticFluxUom__pWb = 9,
	eml21__MagneticFluxUom__TWb = 10,
	eml21__MagneticFluxUom__uWb = 11,
	eml21__MagneticFluxUom__Wb = 12
};
#endif

/* eml2_1ForGsoap.h:8919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom (-1166)

/* eml21:MagneticPermeabilityUom */
enum eml21__MagneticPermeabilityUom {
	eml21__MagneticPermeabilityUom__H_x002fm = 0,
	eml21__MagneticPermeabilityUom__uH_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:8936 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom (-1167)

/* eml21:MagneticVectorPotentialUom */
enum eml21__MagneticVectorPotentialUom {
	eml21__MagneticVectorPotentialUom__Wb_x002fm = 0,
	eml21__MagneticVectorPotentialUom__Wb_x002fmm = 1
};
#endif

/* eml2_1ForGsoap.h:8953 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom (-1168)

/* eml21:MassLengthUom */
enum eml21__MassLengthUom {
	eml21__MassLengthUom__kg_x002em = 0,
	eml21__MassLengthUom__lbm_x002eft = 1
};
#endif

/* eml2_1ForGsoap.h:8970 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom (-1169)

/* eml21:MassPerAreaUom */
enum eml21__MassPerAreaUom {
	eml21__MassPerAreaUom__0_x002e01_x0020lbm_x002fft2 = 0,
	eml21__MassPerAreaUom__kg_x002fm2 = 1,
	eml21__MassPerAreaUom__lbm_x002fft2 = 2,
	eml21__MassPerAreaUom__Mg_x002fm2 = 3,
	eml21__MassPerAreaUom__ton_x005bUS_x005d_x002fft2 = 4
};
#endif

/* eml2_1ForGsoap.h:9002 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom (-1170)

/* eml21:MassPerEnergyUom */
enum eml21__MassPerEnergyUom {
	eml21__MassPerEnergyUom__kg_x002f_x0028kW_x002eh_x0029 = 0,
	eml21__MassPerEnergyUom__kg_x002fJ = 1,
	eml21__MassPerEnergyUom__kg_x002fMJ = 2,
	eml21__MassPerEnergyUom__lbm_x002f_x0028hp_x002eh_x0029 = 3,
	eml21__MassPerEnergyUom__mg_x002fJ = 4
};
#endif

/* eml2_1ForGsoap.h:9034 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom (-1171)

/* eml21:MassPerLengthUom */
enum eml21__MassPerLengthUom {
	eml21__MassPerLengthUom__kg_x002em_x002fcm2 = 0,
	eml21__MassPerLengthUom__kg_x002fm = 1,
	eml21__MassPerLengthUom__klbm_x002fin = 2,
	eml21__MassPerLengthUom__lbm_x002fft = 3,
	eml21__MassPerLengthUom__Mg_x002fin = 4
};
#endif

/* eml2_1ForGsoap.h:9066 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom (-1172)

/* eml21:MassPerMassUom */
enum eml21__MassPerMassUom {
	eml21__MassPerMassUom___x0025 = 0,
	eml21__MassPerMassUom___x0025_x005bmass_x005d = 1,
	eml21__MassPerMassUom__Euc = 2,
	eml21__MassPerMassUom__g_x002fkg = 3,
	eml21__MassPerMassUom__g_x002ft = 4,
	eml21__MassPerMassUom__kg_x002fkg = 5,
	eml21__MassPerMassUom__kg_x002fsack_x005b94lbm_x005d = 6,
	eml21__MassPerMassUom__kg_x002ft = 7,
	eml21__MassPerMassUom__mg_x002fg = 8,
	eml21__MassPerMassUom__mg_x002fkg = 9,
	eml21__MassPerMassUom__ng_x002fg = 10,
	eml21__MassPerMassUom__ng_x002fmg = 11,
	eml21__MassPerMassUom__ppk = 12,
	eml21__MassPerMassUom__ppm = 13,
	eml21__MassPerMassUom__ppm_x005bmass_x005d = 14,
	eml21__MassPerMassUom__ug_x002fg = 15,
	eml21__MassPerMassUom__ug_x002fmg = 16
};
#endif

/* eml2_1ForGsoap.h:9158 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom (-1173)

/* eml21:MassPerTimePerAreaUom */
enum eml21__MassPerTimePerAreaUom {
	eml21__MassPerTimePerAreaUom__g_x002eft_x002f_x0028cm3_x002es_x0029 = 0,
	eml21__MassPerTimePerAreaUom__g_x002em_x002f_x0028cm3_x002es_x0029 = 1,
	eml21__MassPerTimePerAreaUom__kg_x002f_x0028m2_x002es_x0029 = 2,
	eml21__MassPerTimePerAreaUom__kPa_x002es_x002fm = 3,
	eml21__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002eh_x0029 = 4,
	eml21__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002es_x0029 = 5,
	eml21__MassPerTimePerAreaUom__MPa_x002es_x002fm = 6
};
#endif

/* eml2_1ForGsoap.h:9200 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom (-1174)

/* eml21:MassPerTimePerLengthUom */
enum eml21__MassPerTimePerLengthUom {
	eml21__MassPerTimePerLengthUom__kg_x002f_x0028m_x002es_x0029 = 0,
	eml21__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002eh_x0029 = 1,
	eml21__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002es_x0029 = 2,
	eml21__MassPerTimePerLengthUom__Pa_x002es = 3
};
#endif

/* eml2_1ForGsoap.h:9227 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom (-1175)

/* eml21:MassPerTimeUom */
enum eml21__MassPerTimeUom {
	eml21__MassPerTimeUom__1E6_x0020lbm_x002fa = 0,
	eml21__MassPerTimeUom__g_x002fs = 1,
	eml21__MassPerTimeUom__kg_x002fd = 2,
	eml21__MassPerTimeUom__kg_x002fh = 3,
	eml21__MassPerTimeUom__kg_x002fmin = 4,
	eml21__MassPerTimeUom__kg_x002fs = 5,
	eml21__MassPerTimeUom__lbm_x002fd = 6,
	eml21__MassPerTimeUom__lbm_x002fh = 7,
	eml21__MassPerTimeUom__lbm_x002fmin = 8,
	eml21__MassPerTimeUom__lbm_x002fs = 9,
	eml21__MassPerTimeUom__Mg_x002fa = 10,
	eml21__MassPerTimeUom__Mg_x002fd = 11,
	eml21__MassPerTimeUom__Mg_x002fh = 12,
	eml21__MassPerTimeUom__Mg_x002fmin = 13,
	eml21__MassPerTimeUom__t_x002fa = 14,
	eml21__MassPerTimeUom__t_x002fd = 15,
	eml21__MassPerTimeUom__t_x002fh = 16,
	eml21__MassPerTimeUom__t_x002fmin = 17,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fa = 18,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fd = 19,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fh = 20,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fmin = 21,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fa = 22,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fd = 23,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fh = 24,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fmin = 25
};
#endif

/* eml2_1ForGsoap.h:9364 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom (-1176)

/* eml21:MassPerVolumePerLengthUom */
enum eml21__MassPerVolumePerLengthUom {
	eml21__MassPerVolumePerLengthUom__g_x002fcm4 = 0,
	eml21__MassPerVolumePerLengthUom__kg_x002fdm4 = 1,
	eml21__MassPerVolumePerLengthUom__kg_x002fm4 = 2,
	eml21__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 3,
	eml21__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 4,
	eml21__MassPerVolumePerLengthUom__lbm_x002fft4 = 5,
	eml21__MassPerVolumePerLengthUom__Pa_x002es2_x002fm3 = 6
};
#endif

/* eml2_1ForGsoap.h:9406 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom (-1177)

/* eml21:MassPerVolumePerPressureUom */
enum eml21__MassPerVolumePerPressureUom {
	eml21__MassPerVolumePerPressureUom__kg_x002fm3_x002ekPa = 0,
	eml21__MassPerVolumePerPressureUom__lb_x002fft_x002epsi = 1
};
#endif

/* eml2_1ForGsoap.h:9415 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom (-1178)

/* eml21:MassPerVolumePerTemperatureUom */
enum eml21__MassPerVolumePerTemperatureUom {
	eml21__MassPerVolumePerTemperatureUom__kg_x002fm3_x002edegC = 0,
	eml21__MassPerVolumePerTemperatureUom__kg_x002fm3_x002eK = 1,
	eml21__MassPerVolumePerTemperatureUom__lb_x002fft_x002edegF = 2
};
#endif

/* eml2_1ForGsoap.h:9425 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom (-1179)

/* eml21:MassPerVolumeUom */
enum eml21__MassPerVolumeUom {
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fbbl = 0,
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 1,
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 2,
	eml21__MassPerVolumeUom__0_x002e01_x0020grain_x002fft3 = 3,
	eml21__MassPerVolumeUom__0_x002e1_x0020lbm_x002fbbl = 4,
	eml21__MassPerVolumeUom__10_x0020Mg_x002fm3 = 5,
	eml21__MassPerVolumeUom__g_x002fcm3 = 6,
	eml21__MassPerVolumeUom__g_x002fdm3 = 7,
	eml21__MassPerVolumeUom__g_x002fgal_x005bUK_x005d = 8,
	eml21__MassPerVolumeUom__g_x002fgal_x005bUS_x005d = 9,
	eml21__MassPerVolumeUom__g_x002fL = 10,
	eml21__MassPerVolumeUom__g_x002fm3 = 11,
	eml21__MassPerVolumeUom__grain_x002fft3 = 12,
	eml21__MassPerVolumeUom__grain_x002fgal_x005bUS_x005d = 13,
	eml21__MassPerVolumeUom__kg_x002fdm3 = 14,
	eml21__MassPerVolumeUom__kg_x002fL = 15,
	eml21__MassPerVolumeUom__kg_x002fm3 = 16,
	eml21__MassPerVolumeUom__lbm_x002fbbl = 17,
	eml21__MassPerVolumeUom__lbm_x002fft3 = 18,
	eml21__MassPerVolumeUom__lbm_x002fgal_x005bUK_x005d = 19,
	eml21__MassPerVolumeUom__lbm_x002fgal_x005bUS_x005d = 20,
	eml21__MassPerVolumeUom__lbm_x002fin3 = 21,
	eml21__MassPerVolumeUom__mg_x002fdm3 = 22,
	eml21__MassPerVolumeUom__mg_x002fgal_x005bUS_x005d = 23,
	eml21__MassPerVolumeUom__mg_x002fL = 24,
	eml21__MassPerVolumeUom__mg_x002fm3 = 25,
	eml21__MassPerVolumeUom__Mg_x002fm3 = 26,
	eml21__MassPerVolumeUom__t_x002fm3 = 27,
	eml21__MassPerVolumeUom__ug_x002fcm3 = 28
};
#endif

/* eml2_1ForGsoap.h:9577 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUom (-1180)

/* eml21:MassUom */
enum eml21__MassUom {
	eml21__MassUom__g = 'g',
	eml21__MassUom__t = 't',
	eml21__MassUom__ag = 'u',
	eml21__MassUom__cg = 'v',
	eml21__MassUom__ct = 'w',
	eml21__MassUom__cwt_x005bUK_x005d = 'x',
	eml21__MassUom__cwt_x005bUS_x005d = 'y',
	eml21__MassUom__Eg = 'z',
	eml21__MassUom__fg = 123,
	eml21__MassUom__Gg = 124,
	eml21__MassUom__grain = 125,
	eml21__MassUom__hg = 126,
	eml21__MassUom__kg = 127,
	eml21__MassUom__klbm = 128,
	eml21__MassUom__lbm = 129,
	eml21__MassUom__mg = 130,
	eml21__MassUom__Mg = 131,
	eml21__MassUom__ng = 132,
	eml21__MassUom__ozm = 133,
	eml21__MassUom__ozm_x005btroy_x005d = 134,
	eml21__MassUom__pg = 135,
	eml21__MassUom__sack_x005b94lbm_x005d = 136,
	eml21__MassUom__Tg = 137,
	eml21__MassUom__ton_x005bUK_x005d = 138,
	eml21__MassUom__ton_x005bUS_x005d = 139,
	eml21__MassUom__ug = 140
};
#endif

/* eml2_1ForGsoap.h:9714 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom (-1181)

/* eml21:MobilityUom */
enum eml21__MobilityUom {
	eml21__MobilityUom__D_x002f_x0028Pa_x002es_x0029 = 0,
	eml21__MobilityUom__D_x002fcP = 1,
	eml21__MobilityUom__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 2,
	eml21__MobilityUom__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 3,
	eml21__MobilityUom__mD_x002f_x0028Pa_x002es_x0029 = 4,
	eml21__MobilityUom__mD_x002fcP = 5,
	eml21__MobilityUom__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 6
};
#endif

/* eml2_1ForGsoap.h:9756 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom (-1182)

/* eml21:MolarEnergyUom */
enum eml21__MolarEnergyUom {
	eml21__MolarEnergyUom__Btu_x005bIT_x005d_x002flbmol = 0,
	eml21__MolarEnergyUom__J_x002fmol = 1,
	eml21__MolarEnergyUom__kcal_x005bth_x005d_x002fmol = 2,
	eml21__MolarEnergyUom__kJ_x002fkmol = 3,
	eml21__MolarEnergyUom__MJ_x002fkmol = 4
};
#endif

/* eml2_1ForGsoap.h:9788 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom (-1183)

/* eml21:MolarHeatCapacityUom */
enum eml21__MolarHeatCapacityUom {
	eml21__MolarHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edeltaF_x0029 = 0,
	eml21__MolarHeatCapacityUom__cal_x005bth_x005d_x002f_x0028mol_x002edeltaC_x0029 = 1,
	eml21__MolarHeatCapacityUom__J_x002f_x0028mol_x002edeltaK_x0029 = 2,
	eml21__MolarHeatCapacityUom__kJ_x002f_x0028kmol_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:9815 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom (-1184)

/* eml21:MolarVolumeUom */
enum eml21__MolarVolumeUom {
	eml21__MolarVolumeUom__dm3_x002fkmol = 0,
	eml21__MolarVolumeUom__ft3_x002flbmol = 1,
	eml21__MolarVolumeUom__L_x002fkmol = 2,
	eml21__MolarVolumeUom__L_x002fmol = 3,
	eml21__MolarVolumeUom__m3_x002fkmol = 4,
	eml21__MolarVolumeUom__m3_x002fmol = 5
};
#endif

/* eml2_1ForGsoap.h:9852 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom (-1185)

/* eml21:MolecularWeightUom */
enum eml21__MolecularWeightUom {
	eml21__MolecularWeightUom__g_x002fmol = 0,
	eml21__MolecularWeightUom__kg_x002fmol = 1,
	eml21__MolecularWeightUom__lbm_x002flbmol = 2
};
#endif

/* eml2_1ForGsoap.h:9874 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom (-1186)

/* eml21:MomentOfForceUom */
enum eml21__MomentOfForceUom {
	eml21__MomentOfForceUom__J = 'J',
	eml21__MomentOfForceUom__1000_x0020lbf_x002eft = 'K',
	eml21__MomentOfForceUom__daN_x002em = 'L',
	eml21__MomentOfForceUom__dN_x002em = 'M',
	eml21__MomentOfForceUom__kgf_x002em = 'N',
	eml21__MomentOfForceUom__kN_x002em = 'O',
	eml21__MomentOfForceUom__lbf_x002eft = 'P',
	eml21__MomentOfForceUom__lbf_x002ein = 'Q',
	eml21__MomentOfForceUom__lbm_x002eft2_x002fs2 = 'R',
	eml21__MomentOfForceUom__N_x002em = 'S',
	eml21__MomentOfForceUom__pdl_x002eft = 'T',
	eml21__MomentOfForceUom__tonf_x005bUS_x005d_x002eft = 'U',
	eml21__MomentOfForceUom__tonf_x005bUS_x005d_x002emi = 'V'
};
#endif

/* eml2_1ForGsoap.h:9946 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom (-1187)

/* eml21:MomentOfInertiaUom */
enum eml21__MomentOfInertiaUom {
	eml21__MomentOfInertiaUom__kg_x002em2 = 0,
	eml21__MomentOfInertiaUom__lbm_x002eft2 = 1
};
#endif

/* eml2_1ForGsoap.h:9963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom (-1188)

/* eml21:MomentumUom */
enum eml21__MomentumUom {
	eml21__MomentumUom__kg_x002em_x002fs = 0,
	eml21__MomentumUom__lbm_x002eft_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:9980 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom (-1189)

/* eml21:NormalizedPowerUom */
enum eml21__NormalizedPowerUom {
	eml21__NormalizedPowerUom__B_x002eW = 0,
	eml21__NormalizedPowerUom__dB_x002emW = 1,
	eml21__NormalizedPowerUom__dB_x002eMW = 2,
	eml21__NormalizedPowerUom__dB_x002eW = 3
};
#endif

/* eml2_1ForGsoap.h:10007 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom (-1190)

/* eml21:PermeabilityLengthUom */
enum eml21__PermeabilityLengthUom {
	eml21__PermeabilityLengthUom__D_x002eft = 0,
	eml21__PermeabilityLengthUom__D_x002em = 1,
	eml21__PermeabilityLengthUom__mD_x002eft = 2,
	eml21__PermeabilityLengthUom__mD_x002em = 3,
	eml21__PermeabilityLengthUom__TD_x005bAPI_x005d_x002em = 4
};
#endif

/* eml2_1ForGsoap.h:10039 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom (-1191)

/* eml21:PermeabilityRockUom */
enum eml21__PermeabilityRockUom {
	eml21__PermeabilityRockUom__D = 'D',
	eml21__PermeabilityRockUom__D_x005bAPI_x005d = 'E',
	eml21__PermeabilityRockUom__mD = 'F',
	eml21__PermeabilityRockUom__TD_x005bAPI_x005d = 'G'
};
#endif

/* eml2_1ForGsoap.h:10066 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom (-1192)

/* eml21:PermittivityUom */
enum eml21__PermittivityUom {
	eml21__PermittivityUom__F_x002fm = 0,
	eml21__PermittivityUom__uF_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:10083 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom (-1193)

/* eml21:PlaneAngleUom */
enum eml21__PlaneAngleUom {
	eml21__PlaneAngleUom__0_x002e001_x0020seca = 0,
	eml21__PlaneAngleUom__ccgr = 1,
	eml21__PlaneAngleUom__cgr = 2,
	eml21__PlaneAngleUom__dega = 3,
	eml21__PlaneAngleUom__gon = 4,
	eml21__PlaneAngleUom__krad = 5,
	eml21__PlaneAngleUom__mila = 6,
	eml21__PlaneAngleUom__mina = 7,
	eml21__PlaneAngleUom__Mrad = 8,
	eml21__PlaneAngleUom__mrad = 9,
	eml21__PlaneAngleUom__rad = 10,
	eml21__PlaneAngleUom__rev = 11,
	eml21__PlaneAngleUom__seca = 12,
	eml21__PlaneAngleUom__urad = 13
};
#endif

/* eml2_1ForGsoap.h:10160 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom (-1194)

/* eml21:PotentialDifferencePerPowerDropUom */
enum eml21__PotentialDifferencePerPowerDropUom {
	eml21__PotentialDifferencePerPowerDropUom__V_x002fB = 0,
	eml21__PotentialDifferencePerPowerDropUom__V_x002fdB = 1
};
#endif

/* eml2_1ForGsoap.h:10177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom (-1195)

/* eml21:PowerPerAreaUom */
enum eml21__PowerPerAreaUom {
	eml21__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 0,
	eml21__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__PowerPerAreaUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 2,
	eml21__PowerPerAreaUom__hp_x002fin2 = 3,
	eml21__PowerPerAreaUom__hp_x005bhyd_x005d_x002fin2 = 4,
	eml21__PowerPerAreaUom__kW_x002fcm2 = 5,
	eml21__PowerPerAreaUom__kW_x002fm2 = 6,
	eml21__PowerPerAreaUom__mW_x002fm2 = 7,
	eml21__PowerPerAreaUom__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 8,
	eml21__PowerPerAreaUom__W_x002fcm2 = 9,
	eml21__PowerPerAreaUom__W_x002fm2 = 10,
	eml21__PowerPerAreaUom__W_x002fmm2 = 11
};
#endif

/* eml2_1ForGsoap.h:10244 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom (-1196)

/* eml21:PowerPerPowerUom */
enum eml21__PowerPerPowerUom {
	eml21__PowerPerPowerUom___x0025 = 0,
	eml21__PowerPerPowerUom__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 1,
	eml21__PowerPerPowerUom__Euc = 2,
	eml21__PowerPerPowerUom__W_x002fkW = 3,
	eml21__PowerPerPowerUom__W_x002fW = 4
};
#endif

/* eml2_1ForGsoap.h:10276 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom (-1197)

/* eml21:PowerPerVolumeUom */
enum eml21__PowerPerVolumeUom {
	eml21__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 0,
	eml21__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 1,
	eml21__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 2,
	eml21__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 3,
	eml21__PowerPerVolumeUom__hp_x002fft3 = 4,
	eml21__PowerPerVolumeUom__kW_x002fm3 = 5,
	eml21__PowerPerVolumeUom__uW_x002fm3 = 6,
	eml21__PowerPerVolumeUom__W_x002fm3 = 7
};
#endif

/* eml2_1ForGsoap.h:10323 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom (-1198)

/* eml21:PowerUom */
enum eml21__PowerUom {
	eml21__PowerUom__W = 'W',
	eml21__PowerUom__cW = 'X',
	eml21__PowerUom__dW = 'Y',
	eml21__PowerUom__EW = 'Z',
	eml21__PowerUom__fW = 91,
	eml21__PowerUom__GW = 92,
	eml21__PowerUom__hp = 93,
	eml21__PowerUom__hp_x005belec_x005d = 94,
	eml21__PowerUom__hp_x005bhyd_x005d = 95,
	eml21__PowerUom__hp_x005bmetric_x005d = 96,
	eml21__PowerUom__kW = 'a',
	eml21__PowerUom__MW = 'b',
	eml21__PowerUom__mW = 'c',
	eml21__PowerUom__nW = 'd',
	eml21__PowerUom__pW = 'e',
	eml21__PowerUom__tonRefrig = 'f',
	eml21__PowerUom__TW = 'g',
	eml21__PowerUom__uW = 'h'
};
#endif

/* eml2_1ForGsoap.h:10420 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom (-1199)

/* eml21:PressurePerPressureUom */
enum eml21__PressurePerPressureUom {
	eml21__PressurePerPressureUom__atm_x002fatm = 0,
	eml21__PressurePerPressureUom__bar_x002fbar = 1,
	eml21__PressurePerPressureUom__Euc = 2,
	eml21__PressurePerPressureUom__kPa_x002fkPa = 3,
	eml21__PressurePerPressureUom__MPa_x002fMPa = 4,
	eml21__PressurePerPressureUom__Pa_x002fPa = 5,
	eml21__PressurePerPressureUom__psi_x002fpsi = 6
};
#endif

/* eml2_1ForGsoap.h:10462 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom (-1200)

/* eml21:PressurePerTimeUom */
enum eml21__PressurePerTimeUom {
	eml21__PressurePerTimeUom__atm_x002fh = 0,
	eml21__PressurePerTimeUom__bar_x002fh = 1,
	eml21__PressurePerTimeUom__kPa_x002fh = 2,
	eml21__PressurePerTimeUom__kPa_x002fmin = 3,
	eml21__PressurePerTimeUom__MPa_x002fh = 4,
	eml21__PressurePerTimeUom__Pa_x002fh = 5,
	eml21__PressurePerTimeUom__Pa_x002fs = 6,
	eml21__PressurePerTimeUom__psi_x002fh = 7,
	eml21__PressurePerTimeUom__psi_x002fmin = 8
};
#endif

/* eml2_1ForGsoap.h:10514 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom (-1201)

/* eml21:PressurePerVolumeUom */
enum eml21__PressurePerVolumeUom {
	eml21__PressurePerVolumeUom__Pa_x002fm3 = 0,
	eml21__PressurePerVolumeUom__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:10531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom (-1202)

/* eml21:PressureSquaredPerForceTimePerAreaUom */
enum eml21__PressureSquaredPerForceTimePerAreaUom {
	eml21__PressureSquaredPerForceTimePerAreaUom__0_x002e001_x0020kPa2_x002fcP = 0,
	eml21__PressureSquaredPerForceTimePerAreaUom__bar2_x002fcP = 1,
	eml21__PressureSquaredPerForceTimePerAreaUom__kPa2_x002fcP = 2,
	eml21__PressureSquaredPerForceTimePerAreaUom__Pa2_x002f_x0028Pa_x002es_x0029 = 3,
	eml21__PressureSquaredPerForceTimePerAreaUom__psi2_x002fcP = 4
};
#endif

/* eml2_1ForGsoap.h:10563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom (-1203)

/* eml21:PressureSquaredUom */
enum eml21__PressureSquaredUom {
	eml21__PressureSquaredUom__bar2 = 0,
	eml21__PressureSquaredUom__GPa2 = 1,
	eml21__PressureSquaredUom__kPa2 = 2,
	eml21__PressureSquaredUom__kpsi2 = 3,
	eml21__PressureSquaredUom__Pa2 = 4,
	eml21__PressureSquaredUom__psi2 = 5
};
#endif

/* eml2_1ForGsoap.h:10600 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom (-1204)

/* eml21:PressureTimePerVolumeUom */
enum eml21__PressureTimePerVolumeUom {
	eml21__PressureTimePerVolumeUom__Pa_x002es_x002fm3 = 0,
	eml21__PressureTimePerVolumeUom__psi_x002ed_x002fbbl = 1
};
#endif

/* eml2_1ForGsoap.h:10617 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom (-1205)

/* eml21:PressureUom */
enum eml21__PressureUom {
	eml21__PressureUom__0_x002e01_x0020lbf_x002fft2 = 0,
	eml21__PressureUom__at = 1,
	eml21__PressureUom__atm = 2,
	eml21__PressureUom__bar = 3,
	eml21__PressureUom__cmH2O_x005b4degC_x005d = 4,
	eml21__PressureUom__cPa = 5,
	eml21__PressureUom__dPa = 6,
	eml21__PressureUom__dyne_x002fcm2 = 7,
	eml21__PressureUom__EPa = 8,
	eml21__PressureUom__fPa = 9,
	eml21__PressureUom__GPa = 10,
	eml21__PressureUom__hbar = 11,
	eml21__PressureUom__inH2O_x005b39degF_x005d = 12,
	eml21__PressureUom__inH2O_x005b60degF_x005d = 13,
	eml21__PressureUom__inHg_x005b32degF_x005d = 14,
	eml21__PressureUom__inHg_x005b60degF_x005d = 15,
	eml21__PressureUom__kgf_x002fcm2 = 16,
	eml21__PressureUom__kgf_x002fm2 = 17,
	eml21__PressureUom__kgf_x002fmm2 = 18,
	eml21__PressureUom__kN_x002fm2 = 19,
	eml21__PressureUom__kPa = 20,
	eml21__PressureUom__kpsi = 21,
	eml21__PressureUom__lbf_x002fft2 = 22,
	eml21__PressureUom__mbar = 23,
	eml21__PressureUom__mmHg_x005b0degC_x005d = 24,
	eml21__PressureUom__mPa = 25,
	eml21__PressureUom__MPa = 26,
	eml21__PressureUom__Mpsi = 27,
	eml21__PressureUom__N_x002fm2 = 28,
	eml21__PressureUom__N_x002fmm2 = 29,
	eml21__PressureUom__nPa = 30,
	eml21__PressureUom__Pa = 31,
	eml21__PressureUom__pPa = 32,
	eml21__PressureUom__psi = 33,
	eml21__PressureUom__tonf_x005bUK_x005d_x002fft2 = 34,
	eml21__PressureUom__tonf_x005bUS_x005d_x002fft2 = 35,
	eml21__PressureUom__tonf_x005bUS_x005d_x002fin2 = 36,
	eml21__PressureUom__torr = 37,
	eml21__PressureUom__TPa = 38,
	eml21__PressureUom__ubar = 39,
	eml21__PressureUom__umHg_x005b0degC_x005d = 40,
	eml21__PressureUom__uPa = 41,
	eml21__PressureUom__upsi = 42
};
#endif

/* eml2_1ForGsoap.h:10839 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom (-1206)

/* eml21:QuantityOfLightUom */
enum eml21__QuantityOfLightUom {
	eml21__QuantityOfLightUom__lm_x002es = 0
};
#endif

/* eml2_1ForGsoap.h:10851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom (-1207)

/* eml21:RadianceUom */
enum eml21__RadianceUom {
	eml21__RadianceUom__W_x002f_x0028m2_x002esr_x0029 = 0
};
#endif

/* eml2_1ForGsoap.h:10863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom (-1208)

/* eml21:RadiantIntensityUom */
enum eml21__RadiantIntensityUom {
	eml21__RadiantIntensityUom__W_x002fsr = 0
};
#endif

/* eml2_1ForGsoap.h:10875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom (-1209)

/* eml21:ReciprocalAreaUom */
enum eml21__ReciprocalAreaUom {
	eml21__ReciprocalAreaUom__1_x002fft2 = 0,
	eml21__ReciprocalAreaUom__1_x002fkm2 = 1,
	eml21__ReciprocalAreaUom__1_x002fm2 = 2,
	eml21__ReciprocalAreaUom__1_x002fmi2 = 3
};
#endif

/* eml2_1ForGsoap.h:10902 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom (-1210)

/* eml21:ReciprocalElectricPotentialDifferenceUom */
enum eml21__ReciprocalElectricPotentialDifferenceUom {
	eml21__ReciprocalElectricPotentialDifferenceUom__1_x002fuV = 0,
	eml21__ReciprocalElectricPotentialDifferenceUom__1_x002fV = 1
};
#endif

/* eml2_1ForGsoap.h:10919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom (-1211)

/* eml21:ReciprocalForceUom */
enum eml21__ReciprocalForceUom {
	eml21__ReciprocalForceUom__1_x002flbf = 0,
	eml21__ReciprocalForceUom__1_x002fN = 1
};
#endif

/* eml2_1ForGsoap.h:10936 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom (-1212)

/* eml21:ReciprocalLengthUom */
enum eml21__ReciprocalLengthUom {
	eml21__ReciprocalLengthUom__1_x002fangstrom = 0,
	eml21__ReciprocalLengthUom__1_x002fcm = 1,
	eml21__ReciprocalLengthUom__1_x002fft = 2,
	eml21__ReciprocalLengthUom__1_x002fin = 3,
	eml21__ReciprocalLengthUom__1_x002fm = 4,
	eml21__ReciprocalLengthUom__1_x002fmi = 5,
	eml21__ReciprocalLengthUom__1_x002fmm = 6,
	eml21__ReciprocalLengthUom__1_x002fnm = 7,
	eml21__ReciprocalLengthUom__1_x002fyd = 8,
	eml21__ReciprocalLengthUom__1E_9_x00201_x002fft = 9
};
#endif

/* eml2_1ForGsoap.h:10993 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom (-1213)

/* eml21:ReciprocalMassTimeUom */
enum eml21__ReciprocalMassTimeUom {
	eml21__ReciprocalMassTimeUom__1_x002f_x0028kg_x002es_x0029 = 0,
	eml21__ReciprocalMassTimeUom__Bq_x002fkg = 1,
	eml21__ReciprocalMassTimeUom__pCi_x002fg = 2
};
#endif

/* eml2_1ForGsoap.h:11015 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom (-1214)

/* eml21:ReciprocalMassUom */
enum eml21__ReciprocalMassUom {
	eml21__ReciprocalMassUom__1_x002fg = 0,
	eml21__ReciprocalMassUom__1_x002fkg = 1,
	eml21__ReciprocalMassUom__1_x002flbm = 2
};
#endif

/* eml2_1ForGsoap.h:11037 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom (-1215)

/* eml21:ReciprocalPressureUom */
enum eml21__ReciprocalPressureUom {
	eml21__ReciprocalPressureUom__1_x002fbar = 0,
	eml21__ReciprocalPressureUom__1_x002fkPa = 1,
	eml21__ReciprocalPressureUom__1_x002fPa = 2,
	eml21__ReciprocalPressureUom__1_x002fpPa = 3,
	eml21__ReciprocalPressureUom__1_x002fpsi = 4,
	eml21__ReciprocalPressureUom__1_x002fupsi = 5
};
#endif

/* eml2_1ForGsoap.h:11074 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom (-1216)

/* eml21:ReciprocalTimeUom */
enum eml21__ReciprocalTimeUom {
	eml21__ReciprocalTimeUom__1_x002fa = 0,
	eml21__ReciprocalTimeUom__1_x002fd = 1,
	eml21__ReciprocalTimeUom__1_x002fh = 2,
	eml21__ReciprocalTimeUom__1_x002fmin = 3,
	eml21__ReciprocalTimeUom__1_x002fms = 4,
	eml21__ReciprocalTimeUom__1_x002fs = 5,
	eml21__ReciprocalTimeUom__1_x002fus = 6,
	eml21__ReciprocalTimeUom__1_x002fwk = 7
};
#endif

/* eml2_1ForGsoap.h:11121 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom (-1217)

/* eml21:ReciprocalVolumeUom */
enum eml21__ReciprocalVolumeUom {
	eml21__ReciprocalVolumeUom__1_x002fbbl = 0,
	eml21__ReciprocalVolumeUom__1_x002fft3 = 1,
	eml21__ReciprocalVolumeUom__1_x002fgal_x005bUK_x005d = 2,
	eml21__ReciprocalVolumeUom__1_x002fgal_x005bUS_x005d = 3,
	eml21__ReciprocalVolumeUom__1_x002fL = 4,
	eml21__ReciprocalVolumeUom__1_x002fm3 = 5
};
#endif

/* eml2_1ForGsoap.h:11158 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom (-1218)

/* eml21:ReluctanceUom */
enum eml21__ReluctanceUom {
	eml21__ReluctanceUom__1_x002fH = 0
};
#endif

/* eml2_1ForGsoap.h:11170 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom (-1219)

/* eml21:SecondMomentOfAreaUom */
enum eml21__SecondMomentOfAreaUom {
	eml21__SecondMomentOfAreaUom__cm4 = 0,
	eml21__SecondMomentOfAreaUom__in4 = 1,
	eml21__SecondMomentOfAreaUom__m4 = 2
};
#endif

/* eml2_1ForGsoap.h:11192 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom (-1220)

/* eml21:SignalingEventPerTimeUom */
enum eml21__SignalingEventPerTimeUom {
	eml21__SignalingEventPerTimeUom__Bd = 0
};
#endif

/* eml2_1ForGsoap.h:11204 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom (-1221)

/* eml21:SolidAngleUom */
enum eml21__SolidAngleUom {
	eml21__SolidAngleUom__sr = 0
};
#endif

/* eml2_1ForGsoap.h:11216 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom (-1222)

/* eml21:SpecificHeatCapacityUom */
enum eml21__SpecificHeatCapacityUom {
	eml21__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaF_x0029 = 0,
	eml21__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaR_x0029 = 1,
	eml21__SpecificHeatCapacityUom__cal_x005bth_x005d_x002f_x0028g_x002edeltaK_x0029 = 2,
	eml21__SpecificHeatCapacityUom__J_x002f_x0028g_x002edeltaK_x0029 = 3,
	eml21__SpecificHeatCapacityUom__J_x002f_x0028kg_x002edeltaK_x0029 = 4,
	eml21__SpecificHeatCapacityUom__kcal_x005bth_x005d_x002f_x0028kg_x002edeltaC_x0029 = 5,
	eml21__SpecificHeatCapacityUom__kJ_x002f_x0028kg_x002edeltaK_x0029 = 6,
	eml21__SpecificHeatCapacityUom__kW_x002eh_x002f_x0028kg_x002edeltaC_x0029 = 7
};
#endif

/* eml2_1ForGsoap.h:11263 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom (-1223)

/* eml21:TemperatureIntervalPerLengthUom */
enum eml21__TemperatureIntervalPerLengthUom {
	eml21__TemperatureIntervalPerLengthUom__0_x002e01_x0020deltaF_x002fft = 0,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fft = 1,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fhm = 2,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fkm = 3,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fm = 4,
	eml21__TemperatureIntervalPerLengthUom__deltaF_x002fft = 5,
	eml21__TemperatureIntervalPerLengthUom__deltaF_x002fm = 6,
	eml21__TemperatureIntervalPerLengthUom__deltaK_x002fkm = 7,
	eml21__TemperatureIntervalPerLengthUom__deltaK_x002fm = 8
};
#endif

/* eml2_1ForGsoap.h:11315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom (-1224)

/* eml21:TemperatureIntervalPerPressureUom */
enum eml21__TemperatureIntervalPerPressureUom {
	eml21__TemperatureIntervalPerPressureUom__deltaC_x002fkPa = 0,
	eml21__TemperatureIntervalPerPressureUom__deltaF_x002fpsi = 1,
	eml21__TemperatureIntervalPerPressureUom__deltaK_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:11337 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom (-1225)

/* eml21:TemperatureIntervalPerTimeUom */
enum eml21__TemperatureIntervalPerTimeUom {
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fh = 0,
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fmin = 1,
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fs = 2,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fh = 3,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fmin = 4,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fs = 5,
	eml21__TemperatureIntervalPerTimeUom__deltaK_x002fs = 6
};
#endif

/* eml2_1ForGsoap.h:11379 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom (-1226)

/* eml21:TemperatureIntervalUom */
enum eml21__TemperatureIntervalUom {
	eml21__TemperatureIntervalUom__deltaC = 0,
	eml21__TemperatureIntervalUom__deltaF = 1,
	eml21__TemperatureIntervalUom__deltaK = 2,
	eml21__TemperatureIntervalUom__deltaR = 3
};
#endif

/* eml2_1ForGsoap.h:11406 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom (-1227)

/* eml21:ThermalConductanceUom */
enum eml21__ThermalConductanceUom {
	eml21__ThermalConductanceUom__W_x002fdeltaK = 0
};
#endif

/* eml2_1ForGsoap.h:11418 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom (-1228)

/* eml21:ThermalConductivityUom */
enum eml21__ThermalConductivityUom {
	eml21__ThermalConductivityUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edeltaF_x0029 = 0,
	eml21__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edeltaC_x0029 = 1,
	eml21__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edeltaC_x0029 = 2,
	eml21__ThermalConductivityUom__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edeltaC_x0029 = 3,
	eml21__ThermalConductivityUom__W_x002f_x0028m_x002edeltaK_x0029 = 4
};
#endif

/* eml2_1ForGsoap.h:11450 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom (-1229)

/* eml21:ThermalDiffusivityUom */
enum eml21__ThermalDiffusivityUom {
	eml21__ThermalDiffusivityUom__cm2_x002fs = 0,
	eml21__ThermalDiffusivityUom__ft2_x002fh = 1,
	eml21__ThermalDiffusivityUom__ft2_x002fs = 2,
	eml21__ThermalDiffusivityUom__in2_x002fs = 3,
	eml21__ThermalDiffusivityUom__m2_x002fh = 4,
	eml21__ThermalDiffusivityUom__m2_x002fs = 5,
	eml21__ThermalDiffusivityUom__mm2_x002fs = 6
};
#endif

/* eml2_1ForGsoap.h:11492 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom (-1230)

/* eml21:ThermalInsulanceUom */
enum eml21__ThermalInsulanceUom {
	eml21__ThermalInsulanceUom__deltaC_x002em2_x002eh_x002fkcal_x005bth_x005d = 0,
	eml21__ThermalInsulanceUom__deltaF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 1,
	eml21__ThermalInsulanceUom__deltaK_x002em2_x002fkW = 2,
	eml21__ThermalInsulanceUom__deltaK_x002em2_x002fW = 3
};
#endif

/* eml2_1ForGsoap.h:11519 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom (-1231)

/* eml21:ThermalResistanceUom */
enum eml21__ThermalResistanceUom {
	eml21__ThermalResistanceUom__deltaK_x002fW = 0
};
#endif

/* eml2_1ForGsoap.h:11531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1232)

/* eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom */
enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom {
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degC_x002fdegC = 0,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degF_x002fdegF = 1,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degR_x002fdegR = 2,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__Euc = 3,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__K_x002fK = 4
};
#endif

/* eml2_1ForGsoap.h:11563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom (-1233)

/* eml21:ThermodynamicTemperatureUom */
enum eml21__ThermodynamicTemperatureUom {
	eml21__ThermodynamicTemperatureUom__K = 'K',
	eml21__ThermodynamicTemperatureUom__degC = 'L',
	eml21__ThermodynamicTemperatureUom__degF = 'M',
	eml21__ThermodynamicTemperatureUom__degR = 'N'
};
#endif

/* eml2_1ForGsoap.h:11590 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom (-1234)

/* eml21:TimePerLengthUom */
enum eml21__TimePerLengthUom {
	eml21__TimePerLengthUom__0_x002e001_x0020h_x002fft = 0,
	eml21__TimePerLengthUom__h_x002fkm = 1,
	eml21__TimePerLengthUom__min_x002fft = 2,
	eml21__TimePerLengthUom__min_x002fm = 3,
	eml21__TimePerLengthUom__ms_x002fcm = 4,
	eml21__TimePerLengthUom__ms_x002fft = 5,
	eml21__TimePerLengthUom__ms_x002fin = 6,
	eml21__TimePerLengthUom__ms_x002fm = 7,
	eml21__TimePerLengthUom__ns_x002fft = 8,
	eml21__TimePerLengthUom__ns_x002fm = 9,
	eml21__TimePerLengthUom__s_x002fcm = 10,
	eml21__TimePerLengthUom__s_x002fft = 11,
	eml21__TimePerLengthUom__s_x002fin = 12,
	eml21__TimePerLengthUom__s_x002fm = 13,
	eml21__TimePerLengthUom__us_x002fft = 14,
	eml21__TimePerLengthUom__us_x002fin = 15,
	eml21__TimePerLengthUom__us_x002fm = 16
};
#endif

/* eml2_1ForGsoap.h:11682 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom (-1235)

/* eml21:TimePerMassUom */
enum eml21__TimePerMassUom {
	eml21__TimePerMassUom__s_x002fkg = 0
};
#endif

/* eml2_1ForGsoap.h:11694 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom (-1236)

/* eml21:TimePerTimeUom */
enum eml21__TimePerTimeUom {
	eml21__TimePerTimeUom___x0025 = 0,
	eml21__TimePerTimeUom__Euc = 1,
	eml21__TimePerTimeUom__ms_x002fs = 2,
	eml21__TimePerTimeUom__s_x002fs = 3
};
#endif

/* eml2_1ForGsoap.h:11721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom (-1237)

/* eml21:TimePerVolumeUom */
enum eml21__TimePerVolumeUom {
	eml21__TimePerVolumeUom__0_x002e001_x0020d_x002fft3 = 0,
	eml21__TimePerVolumeUom__d_x002fbbl = 1,
	eml21__TimePerVolumeUom__d_x002fft3 = 2,
	eml21__TimePerVolumeUom__d_x002fm3 = 3,
	eml21__TimePerVolumeUom__h_x002fft3 = 4,
	eml21__TimePerVolumeUom__h_x002fm3 = 5,
	eml21__TimePerVolumeUom__s_x002fft3 = 6,
	eml21__TimePerVolumeUom__s_x002fL = 7,
	eml21__TimePerVolumeUom__s_x002fm3 = 8,
	eml21__TimePerVolumeUom__s_x002fqt_x005bUK_x005d = 9,
	eml21__TimePerVolumeUom__s_x002fqt_x005bUS_x005d = 10
};
#endif

/* eml2_1ForGsoap.h:11783 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom (-1238)

/* eml21:TimeUom */
enum eml21__TimeUom {
	eml21__TimeUom__a = 'a',
	eml21__TimeUom__d = 'd',
	eml21__TimeUom__h = 'h',
	eml21__TimeUom__s = 's',
	eml21__TimeUom__1_x002f2_x0020ms = 't',
	eml21__TimeUom__100_x0020ka_x005bt_x005d = 'u',
	eml21__TimeUom__a_x005bt_x005d = 'v',
	eml21__TimeUom__ca = 'w',
	eml21__TimeUom__cs = 'x',
	eml21__TimeUom__ds = 'y',
	eml21__TimeUom__Ea_x005bt_x005d = 'z',
	eml21__TimeUom__fa = 123,
	eml21__TimeUom__Ga_x005bt_x005d = 124,
	eml21__TimeUom__hs = 125,
	eml21__TimeUom__ka_x005bt_x005d = 126,
	eml21__TimeUom__Ma_x005bt_x005d = 127,
	eml21__TimeUom__min_ = 128,
	eml21__TimeUom__ms = 129,
	eml21__TimeUom__na = 130,
	eml21__TimeUom__ns = 131,
	eml21__TimeUom__ps = 132,
	eml21__TimeUom__Ta_x005bt_x005d = 133,
	eml21__TimeUom__us = 134,
	eml21__TimeUom__wk = 135
};
#endif

/* eml2_1ForGsoap.h:11914 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom (-1239)

/* eml21:VerticalCoordinateUom */
enum eml21__VerticalCoordinateUom {
	eml21__VerticalCoordinateUom__m = 'm',
	eml21__VerticalCoordinateUom__ft = 'n',
	eml21__VerticalCoordinateUom__ftUS = 'o',
	eml21__VerticalCoordinateUom__ftBr_x002865_x0029 = 'p'
};
#endif

/* eml2_1ForGsoap.h:11941 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom (-1240)

/* eml21:VolumeFlowRatePerVolumeFlowRateUom */
enum eml21__VolumeFlowRatePerVolumeFlowRateUom {
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0025 = 0,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 1,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 2,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 3,
	eml21__VolumeFlowRatePerVolumeFlowRateUom__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 4,
	eml21__VolumeFlowRatePerVolumeFlowRateUom__Euc = 5
};
#endif

/* eml2_1ForGsoap.h:11978 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom (-1241)

/* eml21:VolumePerAreaUom */
enum eml21__VolumePerAreaUom {
	eml21__VolumePerAreaUom__1E6_x0020bbl_x002facre = 0,
	eml21__VolumePerAreaUom__bbl_x002facre = 1,
	eml21__VolumePerAreaUom__ft3_x002fft2 = 2,
	eml21__VolumePerAreaUom__m3_x002fm2 = 3
};
#endif

/* eml2_1ForGsoap.h:12005 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom (-1242)

/* eml21:VolumePerLengthUom */
enum eml21__VolumePerLengthUom {
	eml21__VolumePerLengthUom__0_x002e01_x0020dm3_x002fkm = 0,
	eml21__VolumePerLengthUom__0_x002e01_x0020L_x002fkm = 1,
	eml21__VolumePerLengthUom__bbl_x002fft = 2,
	eml21__VolumePerLengthUom__bbl_x002fin = 3,
	eml21__VolumePerLengthUom__bbl_x002fmi = 4,
	eml21__VolumePerLengthUom__dm3_x002fm = 5,
	eml21__VolumePerLengthUom__ft3_x002fft = 6,
	eml21__VolumePerLengthUom__gal_x005bUK_x005d_x002fmi = 7,
	eml21__VolumePerLengthUom__gal_x005bUS_x005d_x002fft = 8,
	eml21__VolumePerLengthUom__gal_x005bUS_x005d_x002fmi = 9,
	eml21__VolumePerLengthUom__in3_x002fft = 10,
	eml21__VolumePerLengthUom__L_x002fm = 11,
	eml21__VolumePerLengthUom__m3_x002fkm = 12,
	eml21__VolumePerLengthUom__m3_x002fm = 13
};
#endif

/* eml2_1ForGsoap.h:12082 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom (-1243)

/* eml21:VolumePerMassUom */
enum eml21__VolumePerMassUom {
	eml21__VolumePerMassUom__0_x002e01_x0020L_x002fkg = 0,
	eml21__VolumePerMassUom__bbl_x002fton_x005bUK_x005d = 1,
	eml21__VolumePerMassUom__bbl_x002fton_x005bUS_x005d = 2,
	eml21__VolumePerMassUom__cm3_x002fg = 3,
	eml21__VolumePerMassUom__dm3_x002fkg = 4,
	eml21__VolumePerMassUom__dm3_x002ft = 5,
	eml21__VolumePerMassUom__ft3_x002fkg = 6,
	eml21__VolumePerMassUom__ft3_x002flbm = 7,
	eml21__VolumePerMassUom__ft3_x002fsack_x005b94lbm_x005d = 8,
	eml21__VolumePerMassUom__gal_x005bUK_x005d_x002flbm = 9,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002flbm = 10,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 11,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 12,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 13,
	eml21__VolumePerMassUom__L_x002fkg = 14,
	eml21__VolumePerMassUom__L_x002ft = 15,
	eml21__VolumePerMassUom__L_x002fton_x005bUK_x005d = 16,
	eml21__VolumePerMassUom__m3_x002fg = 17,
	eml21__VolumePerMassUom__m3_x002fkg = 18,
	eml21__VolumePerMassUom__m3_x002ft = 19,
	eml21__VolumePerMassUom__m3_x002fton_x005bUK_x005d = 20,
	eml21__VolumePerMassUom__m3_x002fton_x005bUS_x005d = 21
};
#endif

/* eml2_1ForGsoap.h:12199 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom (-1244)

/* eml21:VolumePerPressureUom */
enum eml21__VolumePerPressureUom {
	eml21__VolumePerPressureUom__bbl_x002fpsi = 0,
	eml21__VolumePerPressureUom__m3_x002fkPa = 1,
	eml21__VolumePerPressureUom__m3_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:12221 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom (-1245)

/* eml21:VolumePerRotationUom */
enum eml21__VolumePerRotationUom {
	eml21__VolumePerRotationUom__ft3_x002frad = 0,
	eml21__VolumePerRotationUom__m3_x002frad = 1,
	eml21__VolumePerRotationUom__m3_x002frev = 2
};
#endif

/* eml2_1ForGsoap.h:12243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom (-1246)

/* eml21:VolumePerTimeLengthUom */
enum eml21__VolumePerTimeLengthUom {
	eml21__VolumePerTimeLengthUom__1000_x0020bbl_x002eft_x002fd = 0,
	eml21__VolumePerTimeLengthUom__1000_x0020m4_x002fd = 1,
	eml21__VolumePerTimeLengthUom__m4_x002fs = 2
};
#endif

/* eml2_1ForGsoap.h:12265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom (-1247)

/* eml21:VolumePerTimePerAreaUom */
enum eml21__VolumePerTimePerAreaUom {
	eml21__VolumePerTimePerAreaUom__ft3_x002f_x0028min_x002eft2_x0029 = 0,
	eml21__VolumePerTimePerAreaUom__ft3_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 2,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 3,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 4,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 5,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 6,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 7,
	eml21__VolumePerTimePerAreaUom__m3_x002f_x0028s_x002em2_x0029 = 8
};
#endif

/* eml2_1ForGsoap.h:12317 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom (-1248)

/* eml21:VolumePerTimePerLengthUom */
enum eml21__VolumePerTimePerLengthUom {
	eml21__VolumePerTimePerLengthUom__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 0,
	eml21__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028d_x002em_x0029 = 1,
	eml21__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028h_x002em_x0029 = 2,
	eml21__VolumePerTimePerLengthUom__bbl_x002f_x0028d_x002eft_x0029 = 3,
	eml21__VolumePerTimePerLengthUom__ft3_x002f_x0028d_x002eft_x0029 = 4,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 5,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 6,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 7,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 8,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 9,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 10,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028d_x002em_x0029 = 11,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028h_x002em_x0029 = 12,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002eft_x0029 = 13,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002em_x0029 = 14
};
#endif

/* eml2_1ForGsoap.h:12399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom (-1249)

/* eml21:VolumePerTimePerPressureLengthUom */
enum eml21__VolumePerTimePerPressureLengthUom {
	eml21__VolumePerTimePerPressureLengthUom__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 0,
	eml21__VolumePerTimePerPressureLengthUom__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 1,
	eml21__VolumePerTimePerPressureLengthUom__m2_x002f_x0028kPa_x002ed_x0029 = 2,
	eml21__VolumePerTimePerPressureLengthUom__m2_x002f_x0028Pa_x002es_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:12426 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom (-1250)

/* eml21:VolumePerTimePerPressureUom */
enum eml21__VolumePerTimePerPressureUom {
	eml21__VolumePerTimePerPressureUom__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 0,
	eml21__VolumePerTimePerPressureUom__bbl_x002f_x0028kPa_x002ed_x0029 = 1,
	eml21__VolumePerTimePerPressureUom__bbl_x002f_x0028psi_x002ed_x0029 = 2,
	eml21__VolumePerTimePerPressureUom__L_x002f_x0028bar_x002emin_x0029 = 3,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002ed_x0029 = 4,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002eh_x0029 = 5,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002emin_x0029 = 6,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002ed_x0029 = 7,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002eh_x0029 = 8,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028Pa_x002es_x0029 = 9,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028psi_x002ed_x0029 = 10
};
#endif

/* eml2_1ForGsoap.h:12488 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom (-1251)

/* eml21:VolumePerTimePerTimeUom */
enum eml21__VolumePerTimePerTimeUom {
	eml21__VolumePerTimePerTimeUom__bbl_x002fd2 = 0,
	eml21__VolumePerTimePerTimeUom__bbl_x002fh2 = 1,
	eml21__VolumePerTimePerTimeUom__dm3_x002fs2 = 2,
	eml21__VolumePerTimePerTimeUom__ft3_x002fd2 = 3,
	eml21__VolumePerTimePerTimeUom__ft3_x002fh2 = 4,
	eml21__VolumePerTimePerTimeUom__ft3_x002fmin2 = 5,
	eml21__VolumePerTimePerTimeUom__ft3_x002fs2 = 6,
	eml21__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fh2 = 7,
	eml21__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fmin2 = 8,
	eml21__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fh2 = 9,
	eml21__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fmin2 = 10,
	eml21__VolumePerTimePerTimeUom__L_x002fs2 = 11,
	eml21__VolumePerTimePerTimeUom__m3_x002fd2 = 12,
	eml21__VolumePerTimePerTimeUom__m3_x002fs2 = 13
};
#endif

/* eml2_1ForGsoap.h:12565 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom (-1252)

/* eml21:VolumePerTimePerVolumeUom */
enum eml21__VolumePerTimePerVolumeUom {
	eml21__VolumePerTimePerVolumeUom__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 0,
	eml21__VolumePerTimePerVolumeUom__m3_x002f_x0028s_x002em3_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:12582 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom (-1253)

/* eml21:VolumePerTimeUom */
enum eml21__VolumePerTimeUom {
	eml21__VolumePerTimeUom__1_x002f30_x0020cm3_x002fmin = 0,
	eml21__VolumePerTimeUom__1000_x0020bbl_x002fd = 1,
	eml21__VolumePerTimeUom__1000_x0020ft3_x002fd = 2,
	eml21__VolumePerTimeUom__1000_x0020m3_x002fd = 3,
	eml21__VolumePerTimeUom__1000_x0020m3_x002fh = 4,
	eml21__VolumePerTimeUom__1E6_x0020bbl_x002fd = 5,
	eml21__VolumePerTimeUom__1E6_x0020ft3_x002fd = 6,
	eml21__VolumePerTimeUom__1E6_x0020m3_x002fd = 7,
	eml21__VolumePerTimeUom__bbl_x002fd = 8,
	eml21__VolumePerTimeUom__bbl_x002fh = 9,
	eml21__VolumePerTimeUom__bbl_x002fmin = 10,
	eml21__VolumePerTimeUom__cm3_x002fh = 11,
	eml21__VolumePerTimeUom__cm3_x002fmin = 12,
	eml21__VolumePerTimeUom__cm3_x002fs = 13,
	eml21__VolumePerTimeUom__dm3_x002fs = 14,
	eml21__VolumePerTimeUom__ft3_x002fd = 15,
	eml21__VolumePerTimeUom__ft3_x002fh = 16,
	eml21__VolumePerTimeUom__ft3_x002fmin = 17,
	eml21__VolumePerTimeUom__ft3_x002fs = 18,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fd = 19,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fh = 20,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fmin = 21,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fd = 22,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fh = 23,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fmin = 24,
	eml21__VolumePerTimeUom__L_x002fh = 25,
	eml21__VolumePerTimeUom__L_x002fmin = 26,
	eml21__VolumePerTimeUom__L_x002fs = 27,
	eml21__VolumePerTimeUom__m3_x002fd = 28,
	eml21__VolumePerTimeUom__m3_x002fh = 29,
	eml21__VolumePerTimeUom__m3_x002fmin = 30,
	eml21__VolumePerTimeUom__m3_x002fs = 31
};
#endif

/* eml2_1ForGsoap.h:12749 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom (-1254)

/* eml21:VolumePerVolumeUom */
enum eml21__VolumePerVolumeUom {
	eml21__VolumePerVolumeUom___x0025 = 0,
	eml21__VolumePerVolumeUom___x0025_x005bvol_x005d = 1,
	eml21__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fft3 = 2,
	eml21__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fm3 = 3,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 4,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 5,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 6,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 7,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 8,
	eml21__VolumePerVolumeUom__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 9,
	eml21__VolumePerVolumeUom__0_x002e01_x0020bbl_x002fbbl = 10,
	eml21__VolumePerVolumeUom__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 11,
	eml21__VolumePerVolumeUom__0_x002e1_x0020L_x002fbbl = 12,
	eml21__VolumePerVolumeUom__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 13,
	eml21__VolumePerVolumeUom__1000_x0020ft3_x002fbbl = 14,
	eml21__VolumePerVolumeUom__1000_x0020m3_x002fm3 = 15,
	eml21__VolumePerVolumeUom__1E_6_x0020acre_x002eft_x002fbbl = 16,
	eml21__VolumePerVolumeUom__1E_6_x0020bbl_x002fft3 = 17,
	eml21__VolumePerVolumeUom__1E_6_x0020bbl_x002fm3 = 18,
	eml21__VolumePerVolumeUom__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 19,
	eml21__VolumePerVolumeUom__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 20,
	eml21__VolumePerVolumeUom__1E6_x0020ft3_x002fbbl = 21,
	eml21__VolumePerVolumeUom__bbl_x002f_x0028acre_x002eft_x0029 = 22,
	eml21__VolumePerVolumeUom__bbl_x002fbbl = 23,
	eml21__VolumePerVolumeUom__bbl_x002fft3 = 24,
	eml21__VolumePerVolumeUom__bbl_x002fm3 = 25,
	eml21__VolumePerVolumeUom__cEuc = 26,
	eml21__VolumePerVolumeUom__cm3_x002fcm3 = 27,
	eml21__VolumePerVolumeUom__cm3_x002fL = 28,
	eml21__VolumePerVolumeUom__cm3_x002fm3 = 29,
	eml21__VolumePerVolumeUom__dm3_x002fm3 = 30,
	eml21__VolumePerVolumeUom__Euc = 31,
	eml21__VolumePerVolumeUom__ft3_x002fbbl = 32,
	eml21__VolumePerVolumeUom__ft3_x002fft3 = 33,
	eml21__VolumePerVolumeUom__gal_x005bUK_x005d_x002fft3 = 34,
	eml21__VolumePerVolumeUom__gal_x005bUS_x005d_x002fbbl = 35,
	eml21__VolumePerVolumeUom__gal_x005bUS_x005d_x002fft3 = 36,
	eml21__VolumePerVolumeUom__L_x002fm3 = 37,
	eml21__VolumePerVolumeUom__m3_x002f_x0028ha_x002em_x0029 = 38,
	eml21__VolumePerVolumeUom__m3_x002fbbl = 39,
	eml21__VolumePerVolumeUom__m3_x002fm3 = 40,
	eml21__VolumePerVolumeUom__mL_x002fgal_x005bUK_x005d = 41,
	eml21__VolumePerVolumeUom__mL_x002fgal_x005bUS_x005d = 42,
	eml21__VolumePerVolumeUom__mL_x002fmL = 43,
	eml21__VolumePerVolumeUom__ppk = 44,
	eml21__VolumePerVolumeUom__ppm = 45,
	eml21__VolumePerVolumeUom__ppm_x005bvol_x005d = 46
};
#endif

/* eml2_1ForGsoap.h:12991 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom (-1255)

/* eml21:VolumetricHeatTransferCoefficientUom */
enum eml21__VolumetricHeatTransferCoefficientUom {
	eml21__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edeltaF_x0029 = 0,
	eml21__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edeltaF_x0029 = 1,
	eml21__VolumetricHeatTransferCoefficientUom__kW_x002f_x0028m3_x002edeltaK_x0029 = 2,
	eml21__VolumetricHeatTransferCoefficientUom__W_x002f_x0028m3_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:13018 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom (-1256)

/* eml21:VolumetricThermalExpansionUom */
enum eml21__VolumetricThermalExpansionUom {
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaC = 0,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaF = 1,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaK = 2,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaR = 3,
	eml21__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaC_x0029 = 4,
	eml21__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaF_x0029 = 5,
	eml21__VolumetricThermalExpansionUom__m3_x002f_x0028m3_x002edeltaK_x0029 = 6,
	eml21__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaC = 7,
	eml21__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaF = 8
};
#endif

/* eml2_1ForGsoap.h:13070 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom (-1257)

/* eml21:VolumeUom */
enum eml21__VolumeUom {
	eml21__VolumeUom__L = 'L',
	eml21__VolumeUom__1000_x0020bbl = 'M',
	eml21__VolumeUom__1000_x0020ft3 = 'N',
	eml21__VolumeUom__1000_x0020gal_x005bUK_x005d = 'O',
	eml21__VolumeUom__1000_x0020gal_x005bUS_x005d = 'P',
	eml21__VolumeUom__1000_x0020m3 = 'Q',
	eml21__VolumeUom__1E_6_x0020gal_x005bUS_x005d = 'R',
	eml21__VolumeUom__1E12_x0020ft3 = 'S',
	eml21__VolumeUom__1E6_x0020bbl = 'T',
	eml21__VolumeUom__1E6_x0020ft3 = 'U',
	eml21__VolumeUom__1E6_x0020m3 = 'V',
	eml21__VolumeUom__1E9_x0020bbl = 'W',
	eml21__VolumeUom__1E9_x0020ft3 = 'X',
	eml21__VolumeUom__acre_x002eft = 'Y',
	eml21__VolumeUom__bbl = 'Z',
	eml21__VolumeUom__cm3 = 91,
	eml21__VolumeUom__dm3 = 92,
	eml21__VolumeUom__floz_x005bUK_x005d = 93,
	eml21__VolumeUom__floz_x005bUS_x005d = 94,
	eml21__VolumeUom__ft3 = 95,
	eml21__VolumeUom__gal_x005bUK_x005d = 96,
	eml21__VolumeUom__gal_x005bUS_x005d = 'a',
	eml21__VolumeUom__ha_x002em = 'b',
	eml21__VolumeUom__hL = 'c',
	eml21__VolumeUom__in3 = 'd',
	eml21__VolumeUom__km3 = 'e',
	eml21__VolumeUom__m3 = 'f',
	eml21__VolumeUom__mi3 = 'g',
	eml21__VolumeUom__mL = 'h',
	eml21__VolumeUom__mm3 = 'i',
	eml21__VolumeUom__pt_x005bUK_x005d = 'j',
	eml21__VolumeUom__pt_x005bUS_x005d = 'k',
	eml21__VolumeUom__qt_x005bUK_x005d = 'l',
	eml21__VolumeUom__qt_x005bUS_x005d = 'm',
	eml21__VolumeUom__um2_x002em = 'n',
	eml21__VolumeUom__yd3 = 'o'
};
#endif

/* eml2_1ForGsoap.h:13349 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind (-1262)

/* eml21:ExistenceKind */
enum eml21__ExistenceKind {
	eml21__ExistenceKind__actual = 0,
	eml21__ExistenceKind__planned = 1,
	eml21__ExistenceKind__simulated = 2
};
#endif

/* eml2_1ForGsoap.h:13375 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank (-1263)

/* eml21:GeochronologicalRank */
enum eml21__GeochronologicalRank {
	eml21__GeochronologicalRank__eon = 0,
	eml21__GeochronologicalRank__era = 1,
	eml21__GeochronologicalRank__period = 2,
	eml21__GeochronologicalRank__epoch = 3,
	eml21__GeochronologicalRank__age = 4,
	eml21__GeochronologicalRank__chron = 5
};
#endif

/* eml2_1ForGsoap.h:13392 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind (-1264)

/* eml21:LithologyKind */
enum eml21__LithologyKind {
	eml21__LithologyKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml21__LithologyKind__alkali_x0020olivine_x0020basalt = 1,
	eml21__LithologyKind__amphibolite = 2,
	eml21__LithologyKind__andesite = 3,
	eml21__LithologyKind__anhydrite = 4,
	eml21__LithologyKind__anorthositic_x0020rock = 5,
	eml21__LithologyKind__anthracite = 6,
	eml21__LithologyKind__aplite = 7,
	eml21__LithologyKind__arenite = 8,
	eml21__LithologyKind__argillaceous = 9,
	eml21__LithologyKind__arkose = 10,
	eml21__LithologyKind__basalt = 11,
	eml21__LithologyKind__basanite = 12,
	eml21__LithologyKind__bauxite = 13,
	eml21__LithologyKind__bituminous_x0020coal = 14,
	eml21__LithologyKind__blueschist_x0020metamorphic_x0020rock = 15,
	eml21__LithologyKind__boninite = 16,
	eml21__LithologyKind__breccia = 17,
	eml21__LithologyKind__carbonate_x0020ooze = 18,
	eml21__LithologyKind__carbonatite = 19,
	eml21__LithologyKind__chalk = 20,
	eml21__LithologyKind__chert = 21,
	eml21__LithologyKind__clay = 22,
	eml21__LithologyKind__claystone = 23,
	eml21__LithologyKind__coal = 24,
	eml21__LithologyKind__conglomerate = 25,
	eml21__LithologyKind__dacite = 26,
	eml21__LithologyKind__diabase = 27,
	eml21__LithologyKind__diamictite = 28,
	eml21__LithologyKind__diorite = 29,
	eml21__LithologyKind__dioritoid = 30,
	eml21__LithologyKind__doleritic_x0020rock = 31,
	eml21__LithologyKind__dolomite = 32,
	eml21__LithologyKind__dolomitic = 33,
	eml21__LithologyKind__eclogite = 34,
	eml21__LithologyKind__exotic_x0020alkaline_x0020rock = 35,
	eml21__LithologyKind__feldspar = 36,
	eml21__LithologyKind__feldspathic_x0020arenite = 37,
	eml21__LithologyKind__fine_x0020grained_x0020igneous_x0020rock = 38,
	eml21__LithologyKind__foid_x0020dioritoid = 39,
	eml21__LithologyKind__foid_x0020gabbroid = 40,
	eml21__LithologyKind__foid_x0020syenitoid = 41,
	eml21__LithologyKind__foidite = 42,
	eml21__LithologyKind__foiditoid = 43,
	eml21__LithologyKind__foidolite = 44,
	eml21__LithologyKind__foliated_x0020metamorphic_x0020rock = 45,
	eml21__LithologyKind__fragmental_x0020igneous_x0020rock = 46,
	eml21__LithologyKind__gabbro = 47,
	eml21__LithologyKind__gabbroic_x0020rock = 48,
	eml21__LithologyKind__gabbroid = 49,
	eml21__LithologyKind__glauconite = 50,
	eml21__LithologyKind__gneiss = 51,
	eml21__LithologyKind__granite = 52,
	eml21__LithologyKind__granodiorite = 53,
	eml21__LithologyKind__granofels = 54,
	eml21__LithologyKind__granulite = 55,
	eml21__LithologyKind__gravel = 56,
	eml21__LithologyKind__greenstone = 57,
	eml21__LithologyKind__gumbo = 58,
	eml21__LithologyKind__gypsum = 59,
	eml21__LithologyKind__halite = 60,
	eml21__LithologyKind__hornfels = 61,
	eml21__LithologyKind__igneous_x0020rock = 62,
	eml21__LithologyKind__impact_x0020generated_x0020material = 63,
	eml21__LithologyKind__impure_x0020dolomite = 64,
	eml21__LithologyKind__impure_x0020limestone = 'A',
	eml21__LithologyKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 'B',
	eml21__LithologyKind__iron_x0020rich_x0020sedimentary_x0020rock = 'C',
	eml21__LithologyKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 'D',
	eml21__LithologyKind__komatiitic_x0020rock = 'E',
	eml21__LithologyKind__latitic_x0020rock = 'F',
	eml21__LithologyKind__lignite = 'G',
	eml21__LithologyKind__lime_x0020boundstone = 'H',
	eml21__LithologyKind__lime_x0020framestone = 'I',
	eml21__LithologyKind__lime_x0020grainstone = 'J',
	eml21__LithologyKind__lime_x0020mudstone = 'K',
	eml21__LithologyKind__lime_x0020packstone = 'L',
	eml21__LithologyKind__lime_x0020wackestone = 'M',
	eml21__LithologyKind__limestone = 'N',
	eml21__LithologyKind__marble = 'O',
	eml21__LithologyKind__marl = 'P',
	eml21__LithologyKind__metamorphic_x0020rock = 'Q',
	eml21__LithologyKind__mica_x0020schist = 'R',
	eml21__LithologyKind__migmatite = 'S',
	eml21__LithologyKind__monzogabbro = 'T',
	eml21__LithologyKind__mud = 'U',
	eml21__LithologyKind__mudstone = 'V',
	eml21__LithologyKind__mylonitic_x0020rock = 'W',
	eml21__LithologyKind__no_x0020description = 'X',
	eml21__LithologyKind__no_x0020sample = 'Y',
	eml21__LithologyKind__ooze = 'Z',
	eml21__LithologyKind__ophiolite = 91,
	eml21__LithologyKind__organic_x0020bearing_x0020mudstone = 92,
	eml21__LithologyKind__peat = 93,
	eml21__LithologyKind__pegmatite = 94,
	eml21__LithologyKind__peridotite = 95,
	eml21__LithologyKind__phaneritic_x0020igneous_x0020rock = 96,
	eml21__LithologyKind__phonolite = 'a',
	eml21__LithologyKind__phonolitoid = 'b',
	eml21__LithologyKind__phosphate = 'c',
	eml21__LithologyKind__phosphate_x0020rock = 'd',
	eml21__LithologyKind__phyllite = 'e',
	eml21__LithologyKind__porphyry = 'f',
	eml21__LithologyKind__potassium_x0020and_x0020magnesium_x0020salts = 'g',
	eml21__LithologyKind__pyroclastic_x0020breccia = 'h',
	eml21__LithologyKind__pyroclastic_x0020rock = 'i',
	eml21__LithologyKind__pyroxenite = 'j',
	eml21__LithologyKind__quartz_x0020arenite = 'k',
	eml21__LithologyKind__quartzite = 'l',
	eml21__LithologyKind__rhyolite = 'm',
	eml21__LithologyKind__rock_x0020salt = 'n',
	eml21__LithologyKind__sand = 'o',
	eml21__LithologyKind__sandstone = 'p',
	eml21__LithologyKind__sandy = 'q',
	eml21__LithologyKind__sapropel = 'r',
	eml21__LithologyKind__schist = 's',
	eml21__LithologyKind__serpentinite = 't',
	eml21__LithologyKind__shale = 'u',
	eml21__LithologyKind__siliceous_x0020ooze = 'v',
	eml21__LithologyKind__silt = 'w',
	eml21__LithologyKind__siltstone = 'x',
	eml21__LithologyKind__skarn = 'y',
	eml21__LithologyKind__slate = 'z',
	eml21__LithologyKind__spilite = 123,
	eml21__LithologyKind__syenite = 124,
	eml21__LithologyKind__syenitoid = 125,
	eml21__LithologyKind__sylvite = 126,
	eml21__LithologyKind__tephrite = 127,
	eml21__LithologyKind__tephritoid = 128,
	eml21__LithologyKind__tholeiitic_x0020basalt = 129,
	eml21__LithologyKind__tonalite = 130,
	eml21__LithologyKind__trachyte = 131,
	eml21__LithologyKind__trachytic_x0020rock = 132,
	eml21__LithologyKind__trachytoid = 133,
	eml21__LithologyKind__travertine = 134,
	eml21__LithologyKind__tuff = 135,
	eml21__LithologyKind__tuffite = 136,
	eml21__LithologyKind__ultrabasic = 137,
	eml21__LithologyKind__undifferentiated = 138,
	eml21__LithologyKind__unknown = 139,
	eml21__LithologyKind__wacke = 140
};
#endif

/* eml2_1ForGsoap.h:13540 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind (-1265)

/* eml21:LithologyQualifierKind */
enum eml21__LithologyQualifierKind {
	eml21__LithologyQualifierKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml21__LithologyQualifierKind__alkali_x0020olivine_x0020basalt = 1,
	eml21__LithologyQualifierKind__amphibolite = 2,
	eml21__LithologyQualifierKind__amphibolitic = 3,
	eml21__LithologyQualifierKind__andesite = 4,
	eml21__LithologyQualifierKind__andesitic = 5,
	eml21__LithologyQualifierKind__anhydrite = 6,
	eml21__LithologyQualifierKind__anhydritic = 7,
	eml21__LithologyQualifierKind__ankerite = 8,
	eml21__LithologyQualifierKind__ankeritic = 9,
	eml21__LithologyQualifierKind__anorthositic_x0020rock = 10,
	eml21__LithologyQualifierKind__anthracite = 11,
	eml21__LithologyQualifierKind__anthracitic = 12,
	eml21__LithologyQualifierKind__aplite = 13,
	eml21__LithologyQualifierKind__aplitic = 14,
	eml21__LithologyQualifierKind__arenite = 15,
	eml21__LithologyQualifierKind__arenitic = 16,
	eml21__LithologyQualifierKind__argillaceous = 17,
	eml21__LithologyQualifierKind__arkose = 18,
	eml21__LithologyQualifierKind__arkosic = 19,
	eml21__LithologyQualifierKind__barite = 20,
	eml21__LithologyQualifierKind__baritic = 21,
	eml21__LithologyQualifierKind__basalt = 22,
	eml21__LithologyQualifierKind__basaltic = 23,
	eml21__LithologyQualifierKind__basanite = 24,
	eml21__LithologyQualifierKind__basanitic = 25,
	eml21__LithologyQualifierKind__bauxite = 26,
	eml21__LithologyQualifierKind__bauxitic = 27,
	eml21__LithologyQualifierKind__belemnites = 28,
	eml21__LithologyQualifierKind__belemnitic = 29,
	eml21__LithologyQualifierKind__bioturbated = 30,
	eml21__LithologyQualifierKind__bioturbation = 31,
	eml21__LithologyQualifierKind__bitumen = 32,
	eml21__LithologyQualifierKind__bituminous = 33,
	eml21__LithologyQualifierKind__bituminous_x0020coal = 34,
	eml21__LithologyQualifierKind__blueschist_x0020metamorphic_x0020rock = 35,
	eml21__LithologyQualifierKind__boninite = 36,
	eml21__LithologyQualifierKind__breccia = 37,
	eml21__LithologyQualifierKind__brecciated = 38,
	eml21__LithologyQualifierKind__bryozoan = 39,
	eml21__LithologyQualifierKind__bryozoans = 40,
	eml21__LithologyQualifierKind__burrowed = 41,
	eml21__LithologyQualifierKind__burrows = 42,
	eml21__LithologyQualifierKind__calcareous = 43,
	eml21__LithologyQualifierKind__calcite = 44,
	eml21__LithologyQualifierKind__calcite_x0020concretion = 45,
	eml21__LithologyQualifierKind__calcitic = 46,
	eml21__LithologyQualifierKind__carbonaceous = 47,
	eml21__LithologyQualifierKind__carbonate_x0020ooze = 48,
	eml21__LithologyQualifierKind__carbonatite = 49,
	eml21__LithologyQualifierKind__carbonatitic = 50,
	eml21__LithologyQualifierKind__chalk = 51,
	eml21__LithologyQualifierKind__chalky = 52,
	eml21__LithologyQualifierKind__chamosite = 53,
	eml21__LithologyQualifierKind__chamositic = 54,
	eml21__LithologyQualifierKind__chert = 55,
	eml21__LithologyQualifierKind__cherty = 56,
	eml21__LithologyQualifierKind__chlorite = 57,
	eml21__LithologyQualifierKind__chloritic = 58,
	eml21__LithologyQualifierKind__clay = 59,
	eml21__LithologyQualifierKind__claystone = 60,
	eml21__LithologyQualifierKind__coal = 61,
	eml21__LithologyQualifierKind__concretionary = 62,
	eml21__LithologyQualifierKind__concretions = 63,
	eml21__LithologyQualifierKind__conglomerate = 64,
	eml21__LithologyQualifierKind__conglomeratic = 'A',
	eml21__LithologyQualifierKind__coral_x0020fragments = 'B',
	eml21__LithologyQualifierKind__coralline = 'C',
	eml21__LithologyQualifierKind__crinoidal = 'D',
	eml21__LithologyQualifierKind__crinoids = 'E',
	eml21__LithologyQualifierKind__dacite = 'F',
	eml21__LithologyQualifierKind__dacitic = 'G',
	eml21__LithologyQualifierKind__diabase = 'H',
	eml21__LithologyQualifierKind__diabasic = 'I',
	eml21__LithologyQualifierKind__diamictite = 'J',
	eml21__LithologyQualifierKind__diamictitic = 'K',
	eml21__LithologyQualifierKind__diatomaceous = 'L',
	eml21__LithologyQualifierKind__diatoms = 'M',
	eml21__LithologyQualifierKind__diorite = 'N',
	eml21__LithologyQualifierKind__dioritic = 'O',
	eml21__LithologyQualifierKind__dioritoid = 'P',
	eml21__LithologyQualifierKind__dioritoidic = 'Q',
	eml21__LithologyQualifierKind__doleritic_x0020rock = 'R',
	eml21__LithologyQualifierKind__dolomite = 'S',
	eml21__LithologyQualifierKind__dolomite_x0020concretion = 'T',
	eml21__LithologyQualifierKind__dolomite_x0020stringer = 'U',
	eml21__LithologyQualifierKind__dolomitic = 'V',
	eml21__LithologyQualifierKind__eclogite = 'W',
	eml21__LithologyQualifierKind__eclogitic = 'X',
	eml21__LithologyQualifierKind__exotic_x0020alkaline_x0020rock = 'Y',
	eml21__LithologyQualifierKind__feldspar = 'Z',
	eml21__LithologyQualifierKind__feldsparic = 91,
	eml21__LithologyQualifierKind__feldspathic = 92,
	eml21__LithologyQualifierKind__feldspathic_x0020arenite = 93,
	eml21__LithologyQualifierKind__ferruginous = 94,
	eml21__LithologyQualifierKind__fine_x0020grained_x0020igneous_x0020rock = 95,
	eml21__LithologyQualifierKind__foid_x0020dioritoid = 96,
	eml21__LithologyQualifierKind__foid_x0020gabbroid = 'a',
	eml21__LithologyQualifierKind__foid_x0020syenitoid = 'b',
	eml21__LithologyQualifierKind__foidite = 'c',
	eml21__LithologyQualifierKind__foiditic = 'd',
	eml21__LithologyQualifierKind__foiditoid = 'e',
	eml21__LithologyQualifierKind__foidolite = 'f',
	eml21__LithologyQualifierKind__foidolitic = 'g',
	eml21__LithologyQualifierKind__foliated_x0020metamorphic_x0020rock = 'h',
	eml21__LithologyQualifierKind__foraminifera = 'i',
	eml21__LithologyQualifierKind__foraminiferous = 'j',
	eml21__LithologyQualifierKind__forams = 'k',
	eml21__LithologyQualifierKind__fossil_x0020fragments = 'l',
	eml21__LithologyQualifierKind__fossiliferous = 'm',
	eml21__LithologyQualifierKind__fossils_x0020undifferentiated = 'n',
	eml21__LithologyQualifierKind__fragmental_x0020igneous_x0020rock = 'o',
	eml21__LithologyQualifierKind__gabbro = 'p',
	eml21__LithologyQualifierKind__gabbroic = 'q',
	eml21__LithologyQualifierKind__gabbroic_x0020rock = 'r',
	eml21__LithologyQualifierKind__gabbroid = 's',
	eml21__LithologyQualifierKind__gabbroidic = 't',
	eml21__LithologyQualifierKind__gilsonite = 'u',
	eml21__LithologyQualifierKind__gilsonitic = 'v',
	eml21__LithologyQualifierKind__glauconite = 'w',
	eml21__LithologyQualifierKind__glauconitic = 'x',
	eml21__LithologyQualifierKind__gneiss = 'y',
	eml21__LithologyQualifierKind__gneissic = 'z',
	eml21__LithologyQualifierKind__granite = 123,
	eml21__LithologyQualifierKind__granitic = 124,
	eml21__LithologyQualifierKind__granodiorite = 125,
	eml21__LithologyQualifierKind__granodioritic = 126,
	eml21__LithologyQualifierKind__granofels = 127,
	eml21__LithologyQualifierKind__granulite = 128,
	eml21__LithologyQualifierKind__granulitic = 129,
	eml21__LithologyQualifierKind__gravel = 130,
	eml21__LithologyQualifierKind__gravelly = 131,
	eml21__LithologyQualifierKind__greenstone = 132,
	eml21__LithologyQualifierKind__gumbo = 133,
	eml21__LithologyQualifierKind__gypsiferous = 134,
	eml21__LithologyQualifierKind__gypsum = 135,
	eml21__LithologyQualifierKind__halite = 136,
	eml21__LithologyQualifierKind__halitic = 137,
	eml21__LithologyQualifierKind__hornfels = 138,
	eml21__LithologyQualifierKind__hornfelsic = 139,
	eml21__LithologyQualifierKind__igneous = 140,
	eml21__LithologyQualifierKind__igneous_x0020rock = 141,
	eml21__LithologyQualifierKind__illite = 142,
	eml21__LithologyQualifierKind__illitic = 143,
	eml21__LithologyQualifierKind__impact_x0020generated_x0020material = 144,
	eml21__LithologyQualifierKind__impure_x0020dolomite = 145,
	eml21__LithologyQualifierKind__impure_x0020limestone = 146,
	eml21__LithologyQualifierKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 147,
	eml21__LithologyQualifierKind__iron_x0020rich_x0020sedimentary_x0020rock = 148,
	eml21__LithologyQualifierKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 149,
	eml21__LithologyQualifierKind__kaolinite = 150,
	eml21__LithologyQualifierKind__kaolinitic = 151,
	eml21__LithologyQualifierKind__komatiitic_x0020rock = 152,
	eml21__LithologyQualifierKind__latitic_x0020rock = 153,
	eml21__LithologyQualifierKind__lignite = 154,
	eml21__LithologyQualifierKind__lignitic = 155,
	eml21__LithologyQualifierKind__lime_x0020boundstone = 156,
	eml21__LithologyQualifierKind__lime_x0020framestone = 157,
	eml21__LithologyQualifierKind__lime_x0020grainstone = 158,
	eml21__LithologyQualifierKind__lime_x0020mudstone = 159,
	eml21__LithologyQualifierKind__lime_x0020packstone = 160,
	eml21__LithologyQualifierKind__lime_x0020wackestone = 161,
	eml21__LithologyQualifierKind__limestone = 162,
	eml21__LithologyQualifierKind__limestone_x0020stringer = 163,
	eml21__LithologyQualifierKind__lithic = 164,
	eml21__LithologyQualifierKind__lithic_x0020fragments = 165,
	eml21__LithologyQualifierKind__marble = 166,
	eml21__LithologyQualifierKind__marcasite = 167,
	eml21__LithologyQualifierKind__marcasitic = 168,
	eml21__LithologyQualifierKind__marl = 169,
	eml21__LithologyQualifierKind__marly = 170,
	eml21__LithologyQualifierKind__metamorphic_x0020rock = 171,
	eml21__LithologyQualifierKind__mica = 172,
	eml21__LithologyQualifierKind__mica_x0020schist = 173,
	eml21__LithologyQualifierKind__micaceous = 174,
	eml21__LithologyQualifierKind__microfossiliferous = 175,
	eml21__LithologyQualifierKind__microfossils = 176,
	eml21__LithologyQualifierKind__migmatite = 177,
	eml21__LithologyQualifierKind__migmatitic = 178,
	eml21__LithologyQualifierKind__monzogabbro = 179,
	eml21__LithologyQualifierKind__monzogabbroic = 180,
	eml21__LithologyQualifierKind__mud = 181,
	eml21__LithologyQualifierKind__muddy = 182,
	eml21__LithologyQualifierKind__mudstone = 183,
	eml21__LithologyQualifierKind__mylonitic_x0020rock = 184,
	eml21__LithologyQualifierKind__no_x0020sample = 185,
	eml21__LithologyQualifierKind__oncolite = 186,
	eml21__LithologyQualifierKind__oncoliths = 187,
	eml21__LithologyQualifierKind__oncolitic = 188,
	eml21__LithologyQualifierKind__ooids = 189,
	eml21__LithologyQualifierKind__ooliths = 190,
	eml21__LithologyQualifierKind__oolitic = 191,
	eml21__LithologyQualifierKind__ooze = 192,
	eml21__LithologyQualifierKind__ophiolite = 193,
	eml21__LithologyQualifierKind__ophiolitic = 194,
	eml21__LithologyQualifierKind__organic_x0020bearing_x0020mudstone = 195,
	eml21__LithologyQualifierKind__ostracodal = 196,
	eml21__LithologyQualifierKind__ostracods = 197,
	eml21__LithologyQualifierKind__peat = 198,
	eml21__LithologyQualifierKind__peaty = 199,
	eml21__LithologyQualifierKind__pebble = 200,
	eml21__LithologyQualifierKind__pebbly = 201,
	eml21__LithologyQualifierKind__pegmatite = 202,
	eml21__LithologyQualifierKind__pegmatitic = 203,
	eml21__LithologyQualifierKind__pelletal = 204,
	eml21__LithologyQualifierKind__pellets = 205,
	eml21__LithologyQualifierKind__peloidal = 206,
	eml21__LithologyQualifierKind__peloids = 207,
	eml21__LithologyQualifierKind__peridotite = 208,
	eml21__LithologyQualifierKind__peridotitic = 209,
	eml21__LithologyQualifierKind__phaneritic_x0020igneous_x0020rock = 210,
	eml21__LithologyQualifierKind__phonolite = 211,
	eml21__LithologyQualifierKind__phonolitic = 212,
	eml21__LithologyQualifierKind__phonolitoid = 213,
	eml21__LithologyQualifierKind__phosphate = 214,
	eml21__LithologyQualifierKind__phosphate_x0020rock = 215,
	eml21__LithologyQualifierKind__phosphatic = 216,
	eml21__LithologyQualifierKind__phyllite = 217,
	eml21__LithologyQualifierKind__phyllitic = 218,
	eml21__LithologyQualifierKind__pisolite = 219,
	eml21__LithologyQualifierKind__pisoliths = 220,
	eml21__LithologyQualifierKind__pisolitic = 221,
	eml21__LithologyQualifierKind__plant_x0020remains = 222,
	eml21__LithologyQualifierKind__porphyritic = 223,
	eml21__LithologyQualifierKind__porphyry = 224,
	eml21__LithologyQualifierKind__potassium_x0020and_x0020magnesium_x0020salts = 225,
	eml21__LithologyQualifierKind__pyrite = 226,
	eml21__LithologyQualifierKind__pyritic = 227,
	eml21__LithologyQualifierKind__pyroclastic_x0020breccia = 228,
	eml21__LithologyQualifierKind__pyroclastic_x0020rock = 229,
	eml21__LithologyQualifierKind__pyroxenite = 230,
	eml21__LithologyQualifierKind__pyroxenitic = 231,
	eml21__LithologyQualifierKind__quartiferous = 232,
	eml21__LithologyQualifierKind__quartz = 233,
	eml21__LithologyQualifierKind__quartz_x0020arenite = 234,
	eml21__LithologyQualifierKind__quartzite = 235,
	eml21__LithologyQualifierKind__quartzitic = 236,
	eml21__LithologyQualifierKind__radiolaria = 237,
	eml21__LithologyQualifierKind__radiolarian = 238,
	eml21__LithologyQualifierKind__rhyolite = 239,
	eml21__LithologyQualifierKind__rhyolitic = 240,
	eml21__LithologyQualifierKind__rock_x0020salt = 241,
	eml21__LithologyQualifierKind__rootlets = 242,
	eml21__LithologyQualifierKind__salty = 243,
	eml21__LithologyQualifierKind__sand = 244,
	eml21__LithologyQualifierKind__sandstone = 245,
	eml21__LithologyQualifierKind__sandy = 246,
	eml21__LithologyQualifierKind__sapropel = 247,
	eml21__LithologyQualifierKind__sapropelic = 248,
	eml21__LithologyQualifierKind__schist = 249,
	eml21__LithologyQualifierKind__schisty = 250,
	eml21__LithologyQualifierKind__sepentinitic = 251,
	eml21__LithologyQualifierKind__serpentinite = 252,
	eml21__LithologyQualifierKind__shale = 253,
	eml21__LithologyQualifierKind__shaly = 254,
	eml21__LithologyQualifierKind__shell_x0020fragments = 255,
	eml21__LithologyQualifierKind__shelly = 256,
	eml21__LithologyQualifierKind__siderite = 257,
	eml21__LithologyQualifierKind__siderite_x0020concretion = 258,
	eml21__LithologyQualifierKind__sideritic = 259,
	eml21__LithologyQualifierKind__siliceous_x0020ooze = 260,
	eml21__LithologyQualifierKind__silt = 261,
	eml21__LithologyQualifierKind__siltstone = 262,
	eml21__LithologyQualifierKind__silty = 263,
	eml21__LithologyQualifierKind__skarn = 264,
	eml21__LithologyQualifierKind__skarny = 265,
	eml21__LithologyQualifierKind__slate = 266,
	eml21__LithologyQualifierKind__slaty = 267,
	eml21__LithologyQualifierKind__smectite = 268,
	eml21__LithologyQualifierKind__smectitic = 269,
	eml21__LithologyQualifierKind__spicular = 270,
	eml21__LithologyQualifierKind__spicules = 271,
	eml21__LithologyQualifierKind__spilite = 272,
	eml21__LithologyQualifierKind__spilitic = 273,
	eml21__LithologyQualifierKind__stylolites = 274,
	eml21__LithologyQualifierKind__stylolitic = 275,
	eml21__LithologyQualifierKind__syenite = 276,
	eml21__LithologyQualifierKind__syenitic = 277,
	eml21__LithologyQualifierKind__syenitoid = 278,
	eml21__LithologyQualifierKind__sylvite = 279,
	eml21__LithologyQualifierKind__sylvitic = 280,
	eml21__LithologyQualifierKind__tarry = 281,
	eml21__LithologyQualifierKind__tephrite = 282,
	eml21__LithologyQualifierKind__tephritic = 283,
	eml21__LithologyQualifierKind__tephritoid = 284,
	eml21__LithologyQualifierKind__tholeiitic_x0020basalt = 285,
	eml21__LithologyQualifierKind__tonalite = 286,
	eml21__LithologyQualifierKind__tonalitic = 287,
	eml21__LithologyQualifierKind__trachyte = 288,
	eml21__LithologyQualifierKind__trachytic = 289,
	eml21__LithologyQualifierKind__trachytic_x0020rock = 290,
	eml21__LithologyQualifierKind__trachytoid = 291,
	eml21__LithologyQualifierKind__travertine = 292,
	eml21__LithologyQualifierKind__tuff = 293,
	eml21__LithologyQualifierKind__tuffaceous = 294,
	eml21__LithologyQualifierKind__tuffite = 295,
	eml21__LithologyQualifierKind__tuffitic = 296,
	eml21__LithologyQualifierKind__ultrabasic = 297,
	eml21__LithologyQualifierKind__undifferentiated = 298,
	eml21__LithologyQualifierKind__unknown = 299,
	eml21__LithologyQualifierKind__wacke = 300
};
#endif

/* eml2_1ForGsoap.h:13852 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank (-1266)

/* eml21:LithostratigraphicRank */
enum eml21__LithostratigraphicRank {
	eml21__LithostratigraphicRank__group = 0,
	eml21__LithostratigraphicRank__formation = 1,
	eml21__LithostratigraphicRank__member = 2,
	eml21__LithostratigraphicRank__bed = 3
};
#endif

/* eml2_1ForGsoap.h:13901 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind (-1267)

/* eml21:MatrixCementKind */
enum eml21__MatrixCementKind {
	eml21__MatrixCementKind__ankerite = 0,
	eml21__MatrixCementKind__calcite = 1,
	eml21__MatrixCementKind__chlorite = 2,
	eml21__MatrixCementKind__dolomite = 3,
	eml21__MatrixCementKind__illite = 4,
	eml21__MatrixCementKind__kaolinite = 5,
	eml21__MatrixCementKind__quartz = 6,
	eml21__MatrixCementKind__siderite = 7,
	eml21__MatrixCementKind__smectite = 8
};
#endif

/* eml2_1ForGsoap.h:13921 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass (-1268)

/* eml21:MeasureClass */
enum eml21__MeasureClass {
	eml21__MeasureClass__absorbed_x0020dose = 0,
	eml21__MeasureClass__activity_x0020of_x0020radioactivity = 1,
	eml21__MeasureClass__amount_x0020of_x0020substance = 2,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml21__MeasureClass__angle_x0020per_x0020length = 8,
	eml21__MeasureClass__angle_x0020per_x0020volume = 9,
	eml21__MeasureClass__angular_x0020acceleration = 10,
	eml21__MeasureClass__angular_x0020velocity = 11,
	eml21__MeasureClass__api_x0020gamma_x0020ray = 12,
	eml21__MeasureClass__api_x0020gravity = 13,
	eml21__MeasureClass__api_x0020neutron = 14,
	eml21__MeasureClass__area = 15,
	eml21__MeasureClass__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml21__MeasureClass__area_x0020per_x0020area = 17,
	eml21__MeasureClass__area_x0020per_x0020count = 18,
	eml21__MeasureClass__area_x0020per_x0020mass = 19,
	eml21__MeasureClass__area_x0020per_x0020time = 20,
	eml21__MeasureClass__area_x0020per_x0020volume = 21,
	eml21__MeasureClass__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml21__MeasureClass__capacitance = 23,
	eml21__MeasureClass__cation_x0020exchange_x0020capacity = 24,
	eml21__MeasureClass__data_x0020transfer_x0020speed = 25,
	eml21__MeasureClass__diffusion_x0020coefficient = 26,
	eml21__MeasureClass__diffusive_x0020time_x0020of_x0020flight = 27,
	eml21__MeasureClass__digital_x0020storage = 28,
	eml21__MeasureClass__dimensionless = 29,
	eml21__MeasureClass__dipole_x0020moment = 30,
	eml21__MeasureClass__dose_x0020equivalent = 31,
	eml21__MeasureClass__dynamic_x0020viscosity = 32,
	eml21__MeasureClass__electric_x0020charge = 33,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020area = 34,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020mass = 35,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020volume = 36,
	eml21__MeasureClass__electric_x0020conductance = 37,
	eml21__MeasureClass__electric_x0020conductivity = 38,
	eml21__MeasureClass__electric_x0020current = 39,
	eml21__MeasureClass__electric_x0020current_x0020density = 40,
	eml21__MeasureClass__electric_x0020field_x0020strength = 41,
	eml21__MeasureClass__electric_x0020potential_x0020difference = 42,
	eml21__MeasureClass__electric_x0020resistance = 43,
	eml21__MeasureClass__electric_x0020resistance_x0020per_x0020length = 44,
	eml21__MeasureClass__electrical_x0020resistivity = 45,
	eml21__MeasureClass__electromagnetic_x0020moment = 46,
	eml21__MeasureClass__energy = 47,
	eml21__MeasureClass__energy_x0020length_x0020per_x0020area = 48,
	eml21__MeasureClass__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml21__MeasureClass__energy_x0020per_x0020area = 50,
	eml21__MeasureClass__energy_x0020per_x0020length = 51,
	eml21__MeasureClass__energy_x0020per_x0020mass = 52,
	eml21__MeasureClass__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml21__MeasureClass__energy_x0020per_x0020volume = 54,
	eml21__MeasureClass__force = 55,
	eml21__MeasureClass__force_x0020area = 56,
	eml21__MeasureClass__force_x0020length_x0020per_x0020length = 57,
	eml21__MeasureClass__force_x0020per_x0020force = 58,
	eml21__MeasureClass__force_x0020per_x0020length = 59,
	eml21__MeasureClass__force_x0020per_x0020volume = 60,
	eml21__MeasureClass__frequency = 61,
	eml21__MeasureClass__frequency_x0020interval = 62,
	eml21__MeasureClass__heat_x0020capacity = 63,
	eml21__MeasureClass__heat_x0020flow_x0020rate = 64,
	eml21__MeasureClass__heat_x0020transfer_x0020coefficient = 'A',
	eml21__MeasureClass__illuminance = 'B',
	eml21__MeasureClass__inductance = 'C',
	eml21__MeasureClass__isothermal_x0020compressibility = 'D',
	eml21__MeasureClass__kinematic_x0020viscosity = 'E',
	eml21__MeasureClass__length = 'F',
	eml21__MeasureClass__length_x0020per_x0020length = 'G',
	eml21__MeasureClass__length_x0020per_x0020mass = 'H',
	eml21__MeasureClass__length_x0020per_x0020pressure = 'I',
	eml21__MeasureClass__length_x0020per_x0020temperature = 'J',
	eml21__MeasureClass__length_x0020per_x0020time = 'K',
	eml21__MeasureClass__length_x0020per_x0020volume = 'L',
	eml21__MeasureClass__light_x0020exposure = 'M',
	eml21__MeasureClass__linear_x0020acceleration = 'N',
	eml21__MeasureClass__linear_x0020thermal_x0020expansion = 'O',
	eml21__MeasureClass__logarithmic_x0020power_x0020ratio = 'P',
	eml21__MeasureClass__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml21__MeasureClass__luminance = 'R',
	eml21__MeasureClass__luminous_x0020efficacy = 'S',
	eml21__MeasureClass__luminous_x0020flux = 'T',
	eml21__MeasureClass__luminous_x0020intensity = 'U',
	eml21__MeasureClass__magnetic_x0020dipole_x0020moment = 'V',
	eml21__MeasureClass__magnetic_x0020field_x0020strength = 'W',
	eml21__MeasureClass__magnetic_x0020flux = 'X',
	eml21__MeasureClass__magnetic_x0020flux_x0020density = 'Y',
	eml21__MeasureClass__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml21__MeasureClass__magnetic_x0020permeability = 91,
	eml21__MeasureClass__magnetic_x0020vector_x0020potential = 92,
	eml21__MeasureClass__mass = 93,
	eml21__MeasureClass__mass_x0020length = 94,
	eml21__MeasureClass__mass_x0020per_x0020area = 95,
	eml21__MeasureClass__mass_x0020per_x0020energy = 96,
	eml21__MeasureClass__mass_x0020per_x0020length = 'a',
	eml21__MeasureClass__mass_x0020per_x0020mass = 'b',
	eml21__MeasureClass__mass_x0020per_x0020time = 'c',
	eml21__MeasureClass__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml21__MeasureClass__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml21__MeasureClass__mass_x0020per_x0020volume = 'f',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml21__MeasureClass__mobility = 'j',
	eml21__MeasureClass__molar_x0020energy = 'k',
	eml21__MeasureClass__molar_x0020heat_x0020capacity = 'l',
	eml21__MeasureClass__molar_x0020volume = 'm',
	eml21__MeasureClass__molecular_x0020weight = 'n',
	eml21__MeasureClass__moment_x0020of_x0020force = 'o',
	eml21__MeasureClass__moment_x0020of_x0020inertia = 'p',
	eml21__MeasureClass__momentum = 'q',
	eml21__MeasureClass__normalized_x0020power = 'r',
	eml21__MeasureClass__permeability_x0020length = 's',
	eml21__MeasureClass__permeability_x0020rock = 't',
	eml21__MeasureClass__permittivity = 'u',
	eml21__MeasureClass__plane_x0020angle = 'v',
	eml21__MeasureClass__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml21__MeasureClass__power = 'x',
	eml21__MeasureClass__power_x0020per_x0020area = 'y',
	eml21__MeasureClass__power_x0020per_x0020power = 'z',
	eml21__MeasureClass__power_x0020per_x0020volume = 123,
	eml21__MeasureClass__pressure = 124,
	eml21__MeasureClass__pressure_x0020per_x0020pressure = 125,
	eml21__MeasureClass__pressure_x0020per_x0020time = 126,
	eml21__MeasureClass__pressure_x0020per_x0020volume = 127,
	eml21__MeasureClass__pressure_x0020squared = 128,
	eml21__MeasureClass__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml21__MeasureClass__pressure_x0020time_x0020per_x0020volume = 130,
	eml21__MeasureClass__quantity_x0020of_x0020light = 131,
	eml21__MeasureClass__radiance = 132,
	eml21__MeasureClass__radiant_x0020intensity = 133,
	eml21__MeasureClass__reciprocal_x0020area = 134,
	eml21__MeasureClass__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml21__MeasureClass__reciprocal_x0020force = 136,
	eml21__MeasureClass__reciprocal_x0020length = 137,
	eml21__MeasureClass__reciprocal_x0020mass = 138,
	eml21__MeasureClass__reciprocal_x0020mass_x0020time = 139,
	eml21__MeasureClass__reciprocal_x0020pressure = 140,
	eml21__MeasureClass__reciprocal_x0020time = 141,
	eml21__MeasureClass__reciprocal_x0020volume = 142,
	eml21__MeasureClass__reluctance = 143,
	eml21__MeasureClass__second_x0020moment_x0020of_x0020area = 144,
	eml21__MeasureClass__signaling_x0020event_x0020per_x0020time = 145,
	eml21__MeasureClass__solid_x0020angle = 146,
	eml21__MeasureClass__specific_x0020heat_x0020capacity = 147,
	eml21__MeasureClass__temperature_x0020interval = 148,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020length = 149,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020time = 151,
	eml21__MeasureClass__thermal_x0020conductance = 152,
	eml21__MeasureClass__thermal_x0020conductivity = 153,
	eml21__MeasureClass__thermal_x0020diffusivity = 154,
	eml21__MeasureClass__thermal_x0020insulance = 155,
	eml21__MeasureClass__thermal_x0020resistance = 156,
	eml21__MeasureClass__thermodynamic_x0020temperature = 157,
	eml21__MeasureClass__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml21__MeasureClass__time = 159,
	eml21__MeasureClass__time_x0020per_x0020length = 160,
	eml21__MeasureClass__time_x0020per_x0020mass = 161,
	eml21__MeasureClass__time_x0020per_x0020time = 162,
	eml21__MeasureClass__time_x0020per_x0020volume = 163,
	eml21__MeasureClass__vertical_x0020coordinate = 164,
	eml21__MeasureClass__volume = 165,
	eml21__MeasureClass__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml21__MeasureClass__volume_x0020per_x0020area = 167,
	eml21__MeasureClass__volume_x0020per_x0020length = 168,
	eml21__MeasureClass__volume_x0020per_x0020mass = 169,
	eml21__MeasureClass__volume_x0020per_x0020pressure = 170,
	eml21__MeasureClass__volume_x0020per_x0020rotation = 171,
	eml21__MeasureClass__volume_x0020per_x0020time = 172,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020length = 173,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml21__MeasureClass__volume_x0020per_x0020volume = 180,
	eml21__MeasureClass__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml21__MeasureClass__volumetric_x0020thermal_x0020expansion = 182,
	eml21__MeasureClass__unitless = 183
};
#endif

/* eml2_1ForGsoap.h:14112 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind (-1269)

/* eml21:QuantityClassKind */
enum eml21__QuantityClassKind {
	eml21__QuantityClassKind__absorbed_x0020dose = 0,
	eml21__QuantityClassKind__activity_x0020of_x0020radioactivity = 1,
	eml21__QuantityClassKind__amount_x0020of_x0020substance = 2,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml21__QuantityClassKind__angle_x0020per_x0020length = 8,
	eml21__QuantityClassKind__angle_x0020per_x0020volume = 9,
	eml21__QuantityClassKind__angular_x0020acceleration = 10,
	eml21__QuantityClassKind__angular_x0020velocity = 11,
	eml21__QuantityClassKind__api_x0020gamma_x0020ray = 12,
	eml21__QuantityClassKind__api_x0020gravity = 13,
	eml21__QuantityClassKind__api_x0020neutron = 14,
	eml21__QuantityClassKind__area = 15,
	eml21__QuantityClassKind__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml21__QuantityClassKind__area_x0020per_x0020area = 17,
	eml21__QuantityClassKind__area_x0020per_x0020count = 18,
	eml21__QuantityClassKind__area_x0020per_x0020mass = 19,
	eml21__QuantityClassKind__area_x0020per_x0020time = 20,
	eml21__QuantityClassKind__area_x0020per_x0020volume = 21,
	eml21__QuantityClassKind__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml21__QuantityClassKind__capacitance = 23,
	eml21__QuantityClassKind__cation_x0020exchange_x0020capacity = 24,
	eml21__QuantityClassKind__data_x0020transfer_x0020speed = 25,
	eml21__QuantityClassKind__diffusion_x0020coefficient = 26,
	eml21__QuantityClassKind__diffusive_x0020time_x0020of_x0020flight = 27,
	eml21__QuantityClassKind__digital_x0020storage = 28,
	eml21__QuantityClassKind__dimensionless = 29,
	eml21__QuantityClassKind__dipole_x0020moment = 30,
	eml21__QuantityClassKind__dose_x0020equivalent = 31,
	eml21__QuantityClassKind__dynamic_x0020viscosity = 32,
	eml21__QuantityClassKind__electric_x0020charge = 33,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020area = 34,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020mass = 35,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020volume = 36,
	eml21__QuantityClassKind__electric_x0020conductance = 37,
	eml21__QuantityClassKind__electric_x0020conductivity = 38,
	eml21__QuantityClassKind__electric_x0020current = 39,
	eml21__QuantityClassKind__electric_x0020current_x0020density = 40,
	eml21__QuantityClassKind__electric_x0020field_x0020strength = 41,
	eml21__QuantityClassKind__electric_x0020potential_x0020difference = 42,
	eml21__QuantityClassKind__electric_x0020resistance = 43,
	eml21__QuantityClassKind__electric_x0020resistance_x0020per_x0020length = 44,
	eml21__QuantityClassKind__electrical_x0020resistivity = 45,
	eml21__QuantityClassKind__electromagnetic_x0020moment = 46,
	eml21__QuantityClassKind__energy = 47,
	eml21__QuantityClassKind__energy_x0020length_x0020per_x0020area = 48,
	eml21__QuantityClassKind__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml21__QuantityClassKind__energy_x0020per_x0020area = 50,
	eml21__QuantityClassKind__energy_x0020per_x0020length = 51,
	eml21__QuantityClassKind__energy_x0020per_x0020mass = 52,
	eml21__QuantityClassKind__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml21__QuantityClassKind__energy_x0020per_x0020volume = 54,
	eml21__QuantityClassKind__force = 55,
	eml21__QuantityClassKind__force_x0020area = 56,
	eml21__QuantityClassKind__force_x0020length_x0020per_x0020length = 57,
	eml21__QuantityClassKind__force_x0020per_x0020force = 58,
	eml21__QuantityClassKind__force_x0020per_x0020length = 59,
	eml21__QuantityClassKind__force_x0020per_x0020volume = 60,
	eml21__QuantityClassKind__frequency = 61,
	eml21__QuantityClassKind__frequency_x0020interval = 62,
	eml21__QuantityClassKind__heat_x0020capacity = 63,
	eml21__QuantityClassKind__heat_x0020flow_x0020rate = 64,
	eml21__QuantityClassKind__heat_x0020transfer_x0020coefficient = 'A',
	eml21__QuantityClassKind__illuminance = 'B',
	eml21__QuantityClassKind__inductance = 'C',
	eml21__QuantityClassKind__isothermal_x0020compressibility = 'D',
	eml21__QuantityClassKind__kinematic_x0020viscosity = 'E',
	eml21__QuantityClassKind__length = 'F',
	eml21__QuantityClassKind__length_x0020per_x0020length = 'G',
	eml21__QuantityClassKind__length_x0020per_x0020mass = 'H',
	eml21__QuantityClassKind__length_x0020per_x0020pressure = 'I',
	eml21__QuantityClassKind__length_x0020per_x0020temperature = 'J',
	eml21__QuantityClassKind__length_x0020per_x0020time = 'K',
	eml21__QuantityClassKind__length_x0020per_x0020volume = 'L',
	eml21__QuantityClassKind__light_x0020exposure = 'M',
	eml21__QuantityClassKind__linear_x0020acceleration = 'N',
	eml21__QuantityClassKind__linear_x0020thermal_x0020expansion = 'O',
	eml21__QuantityClassKind__logarithmic_x0020power_x0020ratio = 'P',
	eml21__QuantityClassKind__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml21__QuantityClassKind__luminance = 'R',
	eml21__QuantityClassKind__luminous_x0020efficacy = 'S',
	eml21__QuantityClassKind__luminous_x0020flux = 'T',
	eml21__QuantityClassKind__luminous_x0020intensity = 'U',
	eml21__QuantityClassKind__magnetic_x0020dipole_x0020moment = 'V',
	eml21__QuantityClassKind__magnetic_x0020field_x0020strength = 'W',
	eml21__QuantityClassKind__magnetic_x0020flux = 'X',
	eml21__QuantityClassKind__magnetic_x0020flux_x0020density = 'Y',
	eml21__QuantityClassKind__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml21__QuantityClassKind__magnetic_x0020permeability = 91,
	eml21__QuantityClassKind__magnetic_x0020vector_x0020potential = 92,
	eml21__QuantityClassKind__mass = 93,
	eml21__QuantityClassKind__mass_x0020length = 94,
	eml21__QuantityClassKind__mass_x0020per_x0020area = 95,
	eml21__QuantityClassKind__mass_x0020per_x0020energy = 96,
	eml21__QuantityClassKind__mass_x0020per_x0020length = 'a',
	eml21__QuantityClassKind__mass_x0020per_x0020mass = 'b',
	eml21__QuantityClassKind__mass_x0020per_x0020time = 'c',
	eml21__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml21__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml21__QuantityClassKind__mass_x0020per_x0020volume = 'f',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml21__QuantityClassKind__mobility = 'j',
	eml21__QuantityClassKind__molar_x0020energy = 'k',
	eml21__QuantityClassKind__molar_x0020heat_x0020capacity = 'l',
	eml21__QuantityClassKind__molar_x0020volume = 'm',
	eml21__QuantityClassKind__molecular_x0020weight = 'n',
	eml21__QuantityClassKind__moment_x0020of_x0020force = 'o',
	eml21__QuantityClassKind__moment_x0020of_x0020inertia = 'p',
	eml21__QuantityClassKind__momentum = 'q',
	eml21__QuantityClassKind__normalized_x0020power = 'r',
	eml21__QuantityClassKind__permeability_x0020length = 's',
	eml21__QuantityClassKind__permeability_x0020rock = 't',
	eml21__QuantityClassKind__permittivity = 'u',
	eml21__QuantityClassKind__plane_x0020angle = 'v',
	eml21__QuantityClassKind__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml21__QuantityClassKind__power = 'x',
	eml21__QuantityClassKind__power_x0020per_x0020area = 'y',
	eml21__QuantityClassKind__power_x0020per_x0020power = 'z',
	eml21__QuantityClassKind__power_x0020per_x0020volume = 123,
	eml21__QuantityClassKind__pressure = 124,
	eml21__QuantityClassKind__pressure_x0020per_x0020pressure = 125,
	eml21__QuantityClassKind__pressure_x0020per_x0020time = 126,
	eml21__QuantityClassKind__pressure_x0020per_x0020volume = 127,
	eml21__QuantityClassKind__pressure_x0020squared = 128,
	eml21__QuantityClassKind__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml21__QuantityClassKind__pressure_x0020time_x0020per_x0020volume = 130,
	eml21__QuantityClassKind__quantity_x0020of_x0020light = 131,
	eml21__QuantityClassKind__radiance = 132,
	eml21__QuantityClassKind__radiant_x0020intensity = 133,
	eml21__QuantityClassKind__reciprocal_x0020area = 134,
	eml21__QuantityClassKind__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml21__QuantityClassKind__reciprocal_x0020force = 136,
	eml21__QuantityClassKind__reciprocal_x0020length = 137,
	eml21__QuantityClassKind__reciprocal_x0020mass = 138,
	eml21__QuantityClassKind__reciprocal_x0020mass_x0020time = 139,
	eml21__QuantityClassKind__reciprocal_x0020pressure = 140,
	eml21__QuantityClassKind__reciprocal_x0020time = 141,
	eml21__QuantityClassKind__reciprocal_x0020volume = 142,
	eml21__QuantityClassKind__reluctance = 143,
	eml21__QuantityClassKind__second_x0020moment_x0020of_x0020area = 144,
	eml21__QuantityClassKind__signaling_x0020event_x0020per_x0020time = 145,
	eml21__QuantityClassKind__solid_x0020angle = 146,
	eml21__QuantityClassKind__specific_x0020heat_x0020capacity = 147,
	eml21__QuantityClassKind__temperature_x0020interval = 148,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020length = 149,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020time = 151,
	eml21__QuantityClassKind__thermal_x0020conductance = 152,
	eml21__QuantityClassKind__thermal_x0020conductivity = 153,
	eml21__QuantityClassKind__thermal_x0020diffusivity = 154,
	eml21__QuantityClassKind__thermal_x0020insulance = 155,
	eml21__QuantityClassKind__thermal_x0020resistance = 156,
	eml21__QuantityClassKind__thermodynamic_x0020temperature = 157,
	eml21__QuantityClassKind__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml21__QuantityClassKind__time = 159,
	eml21__QuantityClassKind__time_x0020per_x0020length = 160,
	eml21__QuantityClassKind__time_x0020per_x0020mass = 161,
	eml21__QuantityClassKind__time_x0020per_x0020time = 162,
	eml21__QuantityClassKind__time_x0020per_x0020volume = 163,
	eml21__QuantityClassKind__vertical_x0020coordinate = 164,
	eml21__QuantityClassKind__volume = 165,
	eml21__QuantityClassKind__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml21__QuantityClassKind__volume_x0020per_x0020area = 167,
	eml21__QuantityClassKind__volume_x0020per_x0020length = 168,
	eml21__QuantityClassKind__volume_x0020per_x0020mass = 169,
	eml21__QuantityClassKind__volume_x0020per_x0020pressure = 170,
	eml21__QuantityClassKind__volume_x0020per_x0020rotation = 171,
	eml21__QuantityClassKind__volume_x0020per_x0020time = 172,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020length = 173,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml21__QuantityClassKind__volume_x0020per_x0020volume = 180,
	eml21__QuantityClassKind__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml21__QuantityClassKind__volumetric_x0020thermal_x0020expansion = 182,
	eml21__QuantityClassKind__unitless = 183,
	eml21__QuantityClassKind__not_x0020a_x0020measure = 184
};
#endif

/* eml2_1ForGsoap.h:14318 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition (-1270)

/* eml21:ReferenceCondition */
enum eml21__ReferenceCondition {
	eml21__ReferenceCondition__0_x0020degC_x00201_x0020atm = 0,
	eml21__ReferenceCondition__0_x0020degC_x00201_x0020bar = 1,
	eml21__ReferenceCondition__15_x0020degC_x00201_x0020atm = 2,
	eml21__ReferenceCondition__15_x0020degC_x00201_x0020bar = 3,
	eml21__ReferenceCondition__20_x0020degC_x00201_x0020atm = 4,
	eml21__ReferenceCondition__20_x0020degC_x00201_x0020bar = 5,
	eml21__ReferenceCondition__25_x0020degC_x00201_x0020bar = 6,
	eml21__ReferenceCondition__60_x0020degF_x00201_x0020atm = 7,
	eml21__ReferenceCondition__60_x0020degF_x002030_x0020in_x0020Hg = 8,
	eml21__ReferenceCondition__ambient = 9
};
#endif

/* eml2_1ForGsoap.h:14352 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference (-1271)

/* eml21:WellboreDatumReference */
enum eml21__WellboreDatumReference {
	eml21__WellboreDatumReference__ground_x0020level = 0,
	eml21__WellboreDatumReference__kelly_x0020bushing = 1,
	eml21__WellboreDatumReference__mean_x0020sea_x0020level = 2,
	eml21__WellboreDatumReference__derrick_x0020floor = 3,
	eml21__WellboreDatumReference__casing_x0020flange = 4,
	eml21__WellboreDatumReference__crown_x0020valve = 5,
	eml21__WellboreDatumReference__rotary_x0020bushing = 6,
	eml21__WellboreDatumReference__rotary_x0020table = 7,
	eml21__WellboreDatumReference__sea_x0020floor = 8,
	eml21__WellboreDatumReference__lowest_x0020astronomical_x0020tide = 9,
	eml21__WellboreDatumReference__mean_x0020higher_x0020high_x0020water = 10,
	eml21__WellboreDatumReference__mean_x0020high_x0020water = 11,
	eml21__WellboreDatumReference__mean_x0020lower_x0020low_x0020water = 12,
	eml21__WellboreDatumReference__mean_x0020low_x0020water = 13,
	eml21__WellboreDatumReference__mean_x0020tide_x0020level = 14,
	eml21__WellboreDatumReference__kickoff_x0020point = 15
};
#endif

/* eml2_1ForGsoap.h:14415 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus (-1272)

/* eml21:WellStatus */
enum eml21__WellStatus {
	eml21__WellStatus__abandoned = 0,
	eml21__WellStatus__active = 1,
	eml21__WellStatus__active_x0020_x002d__x0020injecting = 2,
	eml21__WellStatus__active_x0020_x002d__x0020producing = 3,
	eml21__WellStatus__completed = 4,
	eml21__WellStatus__drilling = 5,
	eml21__WellStatus__partially_x0020plugged = 6,
	eml21__WellStatus__permitted = 7,
	eml21__WellStatus__plugged_x0020and_x0020abandoned = 8,
	eml21__WellStatus__proposed = 9,
	eml21__WellStatus__sold = 10,
	eml21__WellStatus__suspended = 11,
	eml21__WellStatus__temporarily_x0020abandoned = 12,
	eml21__WellStatus__testing = 13,
	eml21__WellStatus__tight = 14,
	eml21__WellStatus__working_x0020over = 15,
	eml21__WellStatus__unknown = 16
};
#endif

/* eml2_1ForGsoap.h:14513 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind (-1273)

/* eml21:ReferencePressureKind */
enum eml21__ReferencePressureKind {
	eml21__ReferencePressureKind__absolute = 0,
	eml21__ReferencePressureKind__ambient = 1,
	eml21__ReferencePressureKind__legal = 2
};
#endif

/* eml2_1ForGsoap.h:14591 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagNumberingScheme (-1274)

/* witsml2:NameTagNumberingScheme */
enum witsml2__NameTagNumberingScheme {
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC10 = 0,
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC2 = 1,
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC6 = 2,
	witsml2__NameTagNumberingScheme__EAN_x002eUCC = 3,
	witsml2__NameTagNumberingScheme__EPC64 = 4,
	witsml2__NameTagNumberingScheme__EPC96 = 5,
	witsml2__NameTagNumberingScheme__F2F = 6,
	witsml2__NameTagNumberingScheme__MFM = 7,
	witsml2__NameTagNumberingScheme__MSRCID = 8,
	witsml2__NameTagNumberingScheme__serial_x0020number = 9
};
#endif

/* eml2_1ForGsoap.h:14612 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagTechnology (-1275)

/* witsml2:NameTagTechnology */
enum witsml2__NameTagTechnology {
	witsml2__NameTagTechnology__intrinsic = 0,
	witsml2__NameTagTechnology__labeled = 1,
	witsml2__NameTagTechnology__painted = 2,
	witsml2__NameTagTechnology__stamped = 3,
	witsml2__NameTagTechnology__tagged = 4,
	witsml2__NameTagTechnology__temporary = 5
};
#endif

/* eml2_1ForGsoap.h:14629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagLocation (-1276)

/* witsml2:NameTagLocation */
enum witsml2__NameTagLocation {
	witsml2__NameTagLocation__body = 0,
	witsml2__NameTagLocation__box = 1,
	witsml2__NameTagLocation__other = 2,
	witsml2__NameTagLocation__pin = 3
};
#endif

/* eml2_1ForGsoap.h:14644 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreType (-1277)

/* witsml2:WellboreType */
enum witsml2__WellboreType {
	witsml2__WellboreType__bypass = 0,
	witsml2__WellboreType__initial = 1,
	witsml2__WellboreType__redrill = 2,
	witsml2__WellboreType__reentry = 3,
	witsml2__WellboreType__respud = 4,
	witsml2__WellboreType__sidetrack = 5
};
#endif

/* eml2_1ForGsoap.h:14685 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreShape (-1278)

/* witsml2:WellboreShape */
enum witsml2__WellboreShape {
	witsml2__WellboreShape__build_x0020and_x0020hold = 0,
	witsml2__WellboreShape__deviated = 1,
	witsml2__WellboreShape__double_x0020kickoff = 2,
	witsml2__WellboreShape__horizontal = 3,
	witsml2__WellboreShape__S_shaped = 4,
	witsml2__WellboreShape__vertical = 5
};
#endif

/* eml2_1ForGsoap.h:14726 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PrincipalMeridian (-1279)

/* witsml2:PrincipalMeridian */
enum witsml2__PrincipalMeridian {
	witsml2__PrincipalMeridian__1st_x0020Principal_x0020Meridian = 0,
	witsml2__PrincipalMeridian__2nd_x0020Principal_x0020Meridian = 1,
	witsml2__PrincipalMeridian__3rd_x0020Principal_x0020Meridian = 2,
	witsml2__PrincipalMeridian__4th_x0020Principal_x0020Meridian = 3,
	witsml2__PrincipalMeridian__5th_x0020Principal_x0020Meridian = 4,
	witsml2__PrincipalMeridian__6th_x0020Principal_x0020Meridian = 5,
	witsml2__PrincipalMeridian__Black_x0020Hills_x0020Meridian = 6,
	witsml2__PrincipalMeridian__Boise_x0020Meridian = 7,
	witsml2__PrincipalMeridian__Chickasaw_x0020Meridian = 8,
	witsml2__PrincipalMeridian__Choctaw_x0020Meridian = 9,
	witsml2__PrincipalMeridian__Cimarron_x0020Meridian = 10,
	witsml2__PrincipalMeridian__Copper_x0020River_x0020Meridian = 11,
	witsml2__PrincipalMeridian__Fairbanks_x0020Meridian = 12,
	witsml2__PrincipalMeridian__Gila_x0020and_x0020Salt_x0020River_x0020Meridian = 13,
	witsml2__PrincipalMeridian__Humboldt_x0020Meridian = 14,
	witsml2__PrincipalMeridian__Huntsville_x0020Meridian = 15,
	witsml2__PrincipalMeridian__Indian_x0020Meridian = 16,
	witsml2__PrincipalMeridian__Kateel_x0020River_x0020Meridian = 17,
	witsml2__PrincipalMeridian__Lousiana_x0020Meridian = 18,
	witsml2__PrincipalMeridian__Michigan_x0020Meridian = 19,
	witsml2__PrincipalMeridian__Montana_x0020Meridian = 20,
	witsml2__PrincipalMeridian__Mount_x0020Diablo_x0020Meridian = 21,
	witsml2__PrincipalMeridian__Navajo_x0020Meridian = 22,
	witsml2__PrincipalMeridian__New_x0020Mexico_x0020Meridian = 23,
	witsml2__PrincipalMeridian__Saint_x0020Helena_x0020Meridian = 24,
	witsml2__PrincipalMeridian__Saint_x0020Stephens_x0020Meridian = 25,
	witsml2__PrincipalMeridian__Salt_x0020Lake_x0020Meridian = 26,
	witsml2__PrincipalMeridian__San_x0020Bernardo_x0020Meridian = 27,
	witsml2__PrincipalMeridian__Seward_x0020Meridian = 28,
	witsml2__PrincipalMeridian__Tallahassee_x0020Meridian = 29,
	witsml2__PrincipalMeridian__Uintah_x0020Meridian = 30,
	witsml2__PrincipalMeridian__Umiat_x0020Meridian = 31,
	witsml2__PrincipalMeridian__Ute_x0020Meridian = 32,
	witsml2__PrincipalMeridian__Washington_x0020Meridian = 33,
	witsml2__PrincipalMeridian__Williamette_x0020Meridian = 34,
	witsml2__PrincipalMeridian__Wind_x0020River_x0020Meridian = 35
};
#endif

/* eml2_1ForGsoap.h:14917 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EastOrWest (-1280)

/* witsml2:EastOrWest */
enum witsml2__EastOrWest {
	witsml2__EastOrWest__east = 0,
	witsml2__EastOrWest__west = 1
};
#endif

/* eml2_1ForGsoap.h:14938 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NorthOrSouth (-1281)

/* witsml2:NorthOrSouth */
enum witsml2__NorthOrSouth {
	witsml2__NorthOrSouth__north = 0,
	witsml2__NorthOrSouth__south = 1
};
#endif

/* eml2_1ForGsoap.h:14959 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellPurpose (-1282)

/* witsml2:WellPurpose */
enum witsml2__WellPurpose {
	witsml2__WellPurpose__appraisal = 0,
	witsml2__WellPurpose__appraisal_x0020_x002d__x0020confirmation_x0020appraisal = 1,
	witsml2__WellPurpose__appraisal_x0020_x002d__x0020exploratory_x0020appraisal = 2,
	witsml2__WellPurpose__exploration = 3,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020deeper_pool_x0020wildcat = 4,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020new_field_x0020wildcat = 5,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020new_pool_x0020wildcat = 6,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020outpost_x0020wildcat = 7,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020shallower_pool_x0020wildcat = 8,
	witsml2__WellPurpose__development = 9,
	witsml2__WellPurpose__development_x0020_x002d__x0020infill_x0020development = 10,
	witsml2__WellPurpose__development_x0020_x002d__x0020injector = 11,
	witsml2__WellPurpose__development_x0020_x002d__x0020producer = 12,
	witsml2__WellPurpose__fluid_x0020storage = 13,
	witsml2__WellPurpose__fluid_x0020storage_x0020_x002d__x0020gas_x0020storage = 14,
	witsml2__WellPurpose__general_x0020srvc = 15,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020borehole_x0020re_acquisition = 16,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020observation = 17,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020relief = 18,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research = 19,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020drill_x0020test = 20,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020strat_x0020test = 21,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020waste_x0020disposal = 22,
	witsml2__WellPurpose__mineral = 23
};
#endif

/* eml2_1ForGsoap.h:15090 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellFluid (-1283)

/* witsml2:WellFluid */
enum witsml2__WellFluid {
	witsml2__WellFluid__air = 0,
	witsml2__WellFluid__condensate = 1,
	witsml2__WellFluid__dry = 2,
	witsml2__WellFluid__gas = 3,
	witsml2__WellFluid__gas_water = 4,
	witsml2__WellFluid__non_x0020HC_x0020gas = 5,
	witsml2__WellFluid__non_x0020HC_x0020gas_x0020_x002d__x0020CO2 = 6,
	witsml2__WellFluid__oil = 7,
	witsml2__WellFluid__oil_gas = 8,
	witsml2__WellFluid__oil_water = 9,
	witsml2__WellFluid__steam = 10,
	witsml2__WellFluid__water = 11,
	witsml2__WellFluid__water_x0020_x002d__x0020brine = 12,
	witsml2__WellFluid__water_x0020_x002d__x0020fresh_x0020water = 13
};
#endif

/* eml2_1ForGsoap.h:15171 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellDirection (-1284)

/* witsml2:WellDirection */
enum witsml2__WellDirection {
	witsml2__WellDirection__huff_n_puff = 0,
	witsml2__WellDirection__injector = 1,
	witsml2__WellDirection__producer = 2,
	witsml2__WellDirection__uncertain = 3
};
#endif

/* eml2_1ForGsoap.h:15202 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ElevCodeEnum (-1285)

/* witsml2:ElevCodeEnum */
enum witsml2__ElevCodeEnum {
	witsml2__ElevCodeEnum__CF = 0,
	witsml2__ElevCodeEnum__CV = 1,
	witsml2__ElevCodeEnum__DF = 2,
	witsml2__ElevCodeEnum__GL = 3,
	witsml2__ElevCodeEnum__KB = 4,
	witsml2__ElevCodeEnum__RB = 5,
	witsml2__ElevCodeEnum__RT = 6,
	witsml2__ElevCodeEnum__SF = 7,
	witsml2__ElevCodeEnum__LAT = 8,
	witsml2__ElevCodeEnum__SL = 9,
	witsml2__ElevCodeEnum__MHHW = 10,
	witsml2__ElevCodeEnum__MHW = 11,
	witsml2__ElevCodeEnum__MLLW = 12,
	witsml2__ElevCodeEnum__MLW = 13,
	witsml2__ElevCodeEnum__MTL = 14,
	witsml2__ElevCodeEnum__KO = 15,
	witsml2__ElevCodeEnum__unknown = 16
};
#endif

/* eml2_1ForGsoap.h:15298 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BhaStatus (-1286)

/* witsml2:BhaStatus */
enum witsml2__BhaStatus {
	witsml2__BhaStatus__final_ = 0,
	witsml2__BhaStatus__progress = 1,
	witsml2__BhaStatus__plan = 2
};
#endif

/* eml2_1ForGsoap.h:15312 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudSubClass (-1287)

/* witsml2:MudSubClass */
enum witsml2__MudSubClass {
	witsml2__MudSubClass__aerated_x0020mud = 0,
	witsml2__MudSubClass__air = 1,
	witsml2__MudSubClass__brackish_x0020water = 2,
	witsml2__MudSubClass__brine = 3,
	witsml2__MudSubClass__caesium_x0020formate = 4,
	witsml2__MudSubClass__diesel_x0020oil_based = 5,
	witsml2__MudSubClass__ester_x0020synthetic_based = 6,
	witsml2__MudSubClass__freshwater = 7,
	witsml2__MudSubClass__glycol_x0020mud = 8,
	witsml2__MudSubClass__gyp_x0020mud = 9,
	witsml2__MudSubClass__internal_olefin_x0020synthetic_based = 10,
	witsml2__MudSubClass__lightly_x0020treated_x0020non_dispersed = 11,
	witsml2__MudSubClass__lignite_x002flignosulfonate_x0020mud = 12,
	witsml2__MudSubClass__lime_x0020mud = 13,
	witsml2__MudSubClass__linear_x0020paraffin_x0020synthetic_based = 14,
	witsml2__MudSubClass__linear_alpha_olefin_x0020synthetic_based = 15,
	witsml2__MudSubClass__low_x0020solids = 16,
	witsml2__MudSubClass__low_x0020toxicity_x0020mineral_x0020oil_based = 17,
	witsml2__MudSubClass__mineral_x0020oil_based = 18,
	witsml2__MudSubClass__mist = 19,
	witsml2__MudSubClass__mixed_metal_x0020oxide_x0020mud = 20,
	witsml2__MudSubClass__native_x002fnatural_x0020mud = 21,
	witsml2__MudSubClass__natural_x0020gas = 22,
	witsml2__MudSubClass__nitrogen_aerated_x0020mud = 23,
	witsml2__MudSubClass__non_aqueous_x0020_x0028invert_x0020emulsion_x0029_x0020drilling_x0020fluids = 24,
	witsml2__MudSubClass__non_dispersed = 25,
	witsml2__MudSubClass__pneumatic_x0020_x0028gaseous_x0029_x0020drilling_x0020fluids = 26,
	witsml2__MudSubClass__polymer_x0020mud = 27,
	witsml2__MudSubClass__potassium_x0020formate = 28,
	witsml2__MudSubClass__potassium_treated_x0020mud = 29,
	witsml2__MudSubClass__salt_x0020water_x0020mud = 30,
	witsml2__MudSubClass__saturated_x0020salt_x0020mud = 31,
	witsml2__MudSubClass__sea_x0020water = 32,
	witsml2__MudSubClass__seawater_x0020mud = 33,
	witsml2__MudSubClass__silicate_x0020mud = 34,
	witsml2__MudSubClass__sodium_x0020formate = 35,
	witsml2__MudSubClass__spud_x0020mud = 36,
	witsml2__MudSubClass__stable_x0020foam = 37,
	witsml2__MudSubClass__stiff_x0020foam = 38,
	witsml2__MudSubClass__water_based_x0020drilling_x0020fluids = 39
};
#endif

/* eml2_1ForGsoap.h:15363 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudClass (-1288)

/* witsml2:MudClass */
enum witsml2__MudClass {
	witsml2__MudClass__oil_based = 0,
	witsml2__MudClass__water_based = 1,
	witsml2__MudClass__other = 2,
	witsml2__MudClass__pneumatic = 3
};
#endif

/* eml2_1ForGsoap.h:15386 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeakType (-1289)

/* witsml2:GasPeakType */
enum witsml2__GasPeakType {
	witsml2__GasPeakType__circulating_x0020background_x0020gas = 0,
	witsml2__GasPeakType__connection_x0020gas = 1,
	witsml2__GasPeakType__drilling_x0020background_x0020gas = 2,
	witsml2__GasPeakType__drilling_x0020gas_x0020peak = 3,
	witsml2__GasPeakType__flow_x0020check_x0020gas = 4,
	witsml2__GasPeakType__no_x0020readings = 5,
	witsml2__GasPeakType__other = 6,
	witsml2__GasPeakType__shut_x0020down_x0020gas = 7,
	witsml2__GasPeakType__trip_x0020gas = 8
};
#endif

/* eml2_1ForGsoap.h:15406 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReportVersion (-1290)

/* witsml2:OpsReportVersion */
enum witsml2__OpsReportVersion {
	witsml2__OpsReportVersion__preliminary = 0,
	witsml2__OpsReportVersion__normal = 1,
	witsml2__OpsReportVersion__final_ = 2
};
#endif

/* eml2_1ForGsoap.h:15432 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PresTestType (-1291)

/* witsml2:PresTestType */
enum witsml2__PresTestType {
	witsml2__PresTestType__leak_x0020off_x0020test = 0,
	witsml2__PresTestType__formation_x0020integrity_x0020test = 1
};
#endif

/* eml2_1ForGsoap.h:15453 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReadingKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReadingKind (-1292)

/* witsml2:ReadingKind */
enum witsml2__ReadingKind {
	witsml2__ReadingKind__measured = 0,
	witsml2__ReadingKind__estimated = 1,
	witsml2__ReadingKind__unknown = 2
};
#endif

/* eml2_1ForGsoap.h:15479 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityCode (-1293)

/* witsml2:DrillActivityCode */
enum witsml2__DrillActivityCode {
	witsml2__DrillActivityCode__abandonment = 0,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020log_x0020plugs = 1,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020run_x0020plugs = 2,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020wait_x0020on_x0020cement = 3,
	witsml2__DrillActivityCode__casing = 4,
	witsml2__DrillActivityCode__cement = 5,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020circulate = 6,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020other = 7,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020rig_x0020up = 8,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020wait_x0020on_x0020cement = 9,
	witsml2__DrillActivityCode__circulate = 10,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020boulder_x0020or_x0020gravel = 11,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020casing = 12,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020cementing = 13,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020circulate_x0020samples = 14,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020coring = 15,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020drilling = 16,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020fishing = 17,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020gumbo_x0020attack = 18,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020logging = 19,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020lost_x0020circulation = 20,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020well_x0020control = 21,
	witsml2__DrillActivityCode__completion_x0020operations = 22,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020gravel_x0020packing = 23,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020logging = 24,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020rig_x0020up = 25,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020running_x0020liner = 26,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020tear_x0020down = 27,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020testing = 28,
	witsml2__DrillActivityCode__cond_x0020mud = 29,
	witsml2__DrillActivityCode__coring = 30,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020conventional = 31,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020flow_x0020check = 32,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020laydown_x0020barrel = 33,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020oriented = 34,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020plastic_x0020sleeve = 35,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020rig_x0020up_x0020core_x0020barrel = 36,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020sponge = 37,
	witsml2__DrillActivityCode__cut = 38,
	witsml2__DrillActivityCode__deviation_x0020survey = 39,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020multi_shot = 40,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020single_x0020shot = 41,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020drift = 42,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020gyro = 43,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020MWD = 44,
	witsml2__DrillActivityCode__dir_x0020work = 45,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020horizontal_x0020drilling = 46,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020motor_x0020drilling = 47,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020orient = 48,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020rotary_x0020drilling = 49,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020slant_x0020drilling = 50,
	witsml2__DrillActivityCode__drilling = 51,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020casing = 52,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020connection = 53,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020drill_x0020cement = 54,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020flow_x0020check = 55,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020hole_x0020opening = 56,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020new_x0020hole = 57,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020sidetracking = 58,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020under_reaming = 59,
	witsml2__DrillActivityCode__DST = 60,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020cased_x0020hole = 61,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020lay_x0020down_x0020tools = 62,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole = 63,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole_x0020closed_x0020chamber = 64,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020rig_x0020up_x0020tools = 'A',
	witsml2__DrillActivityCode__fishing = 'B',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020BHA = 'C',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020casing = 'D',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020cones = 'E',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020other = 'F',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020stuck_x0020pipe = 'G',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020wireline_x0020tools = 'H',
	witsml2__DrillActivityCode__float_x0020equip = 'I',
	witsml2__DrillActivityCode__HSE = 'J',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020hold_x0020drill = 'K',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020incident = 'L',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020safety_x0020meeting = 'M',
	witsml2__DrillActivityCode__mill = 'N',
	witsml2__DrillActivityCode__mill_x0020_x002d__x0020cut_x0020casing_x0020or_x0020tubing = 'O',
	witsml2__DrillActivityCode__mill_x0020_x002d__x0020milling = 'P',
	witsml2__DrillActivityCode__miscellaneous = 'Q',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP = 'R',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020diverter = 'S',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020manifold = 'T',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020other = 'U',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020PVT_x0020system = 'V',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020stack = 'W',
	witsml2__DrillActivityCode__plug_x0020back = 'X',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020abandonment = 'Y',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020kick_x0020off_x0020plug = 'Z',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020lost_x0020circulation = 91,
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020wait_x0020on_x0020cement = 92,
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020well_x0020control = 93,
	witsml2__DrillActivityCode__pressure_x0020test = 94,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020manifold = 95,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020stack = 96,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020integrity_x0020test = 'a',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020leak_x0020off_x0020test = 'b',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020packer = 'c',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020PIT = 'd',
	witsml2__DrillActivityCode__reaming = 'e',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020back_x0020reaming = 'f',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020coring = 'g',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020drill = 'h',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020logging = 'i',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020under_reaming = 'j',
	witsml2__DrillActivityCode__rig_x0020move = 'k',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020anchor_x0020handling = 'l',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_pad_x0020move = 'm',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_well_x0020move = 'n',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020jack_x0020up_x0020or_x0020down = 'o',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020other = 'p',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020position_x0020rig = 'q',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020skid_x0020rig = 'r',
	witsml2__DrillActivityCode__rig_x0020release = 's',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020cut_x0020casing = 't',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020install_x0020capping_x0020assembly = 'u',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020MOB_x0020or_x0020DE_MOB = 'v',
	witsml2__DrillActivityCode__rig_x0020repairs = 'w',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020drawworks = 'x',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020electrical = 'y',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020mud_x0020system = 'z',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020other = 123,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020rotary = 124,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020subsea_x0020equipment = 125,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020well_x0020control_x0020equipment = 126,
	witsml2__DrillActivityCode__rig_x0020service = 127,
	witsml2__DrillActivityCode__rig_x0020service_x0020_x002d__x0020lubricate_x0020rig = 128,
	witsml2__DrillActivityCode__rig_x0020service_x0020_x002d__x0020test_x0020equipment = 129,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down = 130,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020rig_x0020up = 131,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020site_x0020work = 132,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020tear_x0020down = 133,
	witsml2__DrillActivityCode__run_x0020casing = 134,
	witsml2__DrillActivityCode__run_x0020liner = 135,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser = 136,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020other = 137,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020run_x0020or_x0020pull_x0020riser = 138,
	witsml2__DrillActivityCode__set = 139,
	witsml2__DrillActivityCode__slip_x0020drilling_x0020line = 140,
	witsml2__DrillActivityCode__squeeze_x0020cement = 141,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020repair = 142,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020shoe = 143,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020parted_x0020casing = 144,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020perforations_x0020DST = 145,
	witsml2__DrillActivityCode__stuck_x0020pipe = 146,
	witsml2__DrillActivityCode__surface_x0020string_x0020handling = 147,
	witsml2__DrillActivityCode__test_x0020completion = 148,
	witsml2__DrillActivityCode__testing_x0020general = 149,
	witsml2__DrillActivityCode__testing_x0020general_x0020_x002d__x0020equipment = 150,
	witsml2__DrillActivityCode__testing_x0020general_x0020_x002d__x0020flow = 151,
	witsml2__DrillActivityCode__tripping = 152,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020back_reaming = 153,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020flow_x0020check = 154,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020in = 155,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020out = 156,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020in_x0020_x0028from_x0020surface_x0029 = 157,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020out_x0020_x0028to_x0020surface_x0029 = 158,
	witsml2__DrillActivityCode__wait = 159,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020daylight = 160,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020environmental_x0020or_x0020regulatory = 161,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020equipment = 162,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020holiday = 163,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020ice = 164,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020on_x0020orders = 165,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020operator = 166,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020other = 167,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020partners = 168,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020service_x0020company = 169,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020weather = 170,
	witsml2__DrillActivityCode__well_x0020control = 171,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020mix = 172,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020shut_x0020in = 173,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020strip = 174,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020well_x0020kill = 175,
	witsml2__DrillActivityCode__well_x0020srvc = 176,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020casing_x0020repair = 177,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020clean_x0020well_x0020to_x0020compl_x0020fluid = 178,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020coiled_x0020tubing_x0020work = 179,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020gravel_x0020pack = 180,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020install_x0020or_x0020test_x0020xmas_x0020tree = 181,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020kill_x0020well = 182,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020land = 183,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020perforate = 184,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020completion = 185,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020suspension_x0020plugs = 186,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020completion = 187,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020screens = 188,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020sand_x0020control = 189,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020stimulation = 190,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020subsea_x0020work = 191,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020surface_x0020line_x0020work = 192,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020suspend_x0020well_x0020or_x0020pull_x0020BOPs = 193,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020test_x0020well = 194,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wash = 195,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wireline_x0020work = 196,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020work_x0020tubulars = 197,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020workstring_x0020run = 198,
	witsml2__DrillActivityCode__wireline_x0020logs = 199,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020abandonment = 200,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020evaluation = 201,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020form_x0020tester = 202,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020other = 203,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020side_x0020wall_x0020cores = 204,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020velocity = 205
};
#endif

/* eml2_1ForGsoap.h:15696 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityClassType (-1294)

/* witsml2:DrillActivityClassType */
enum witsml2__DrillActivityClassType {
	witsml2__DrillActivityClassType__planned = 0,
	witsml2__DrillActivityClassType__unplanned = 1,
	witsml2__DrillActivityClassType__downtime = 2
};
#endif

/* eml2_1ForGsoap.h:15710 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StateDetailActivity (-1295)

/* witsml2:StateDetailActivity */
enum witsml2__StateDetailActivity {
	witsml2__StateDetailActivity__injury = 0,
	witsml2__StateDetailActivity__operation_x0020failed = 1,
	witsml2__StateDetailActivity__kick = 2,
	witsml2__StateDetailActivity__circulation_x0020loss = 3,
	witsml2__StateDetailActivity__mud_x0020loss = 4,
	witsml2__StateDetailActivity__stuck_x0020equipment = 5,
	witsml2__StateDetailActivity__equipment_x0020failure = 6,
	witsml2__StateDetailActivity__equipment_x0020hang = 7,
	witsml2__StateDetailActivity__success = 8
};
#endif

/* eml2_1ForGsoap.h:15766 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemState (-1296)

/* witsml2:ItemState */
enum witsml2__ItemState {
	witsml2__ItemState__actual = 0,
	witsml2__ItemState__model = 1,
	witsml2__ItemState__plan = 2
};
#endif

/* eml2_1ForGsoap.h:15792 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InnerBarrelType (-1297)

/* witsml2:InnerBarrelType */
enum witsml2__InnerBarrelType {
	witsml2__InnerBarrelType__undifferentiated = 0,
	witsml2__InnerBarrelType__aluminum = 1,
	witsml2__InnerBarrelType__gel = 2,
	witsml2__InnerBarrelType__fiberglass = 3
};
#endif

/* eml2_1ForGsoap.h:15823 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellTestType (-1298)

/* witsml2:WellTestType */
enum witsml2__WellTestType {
	witsml2__WellTestType__drill_x0020stem_x0020test = 0,
	witsml2__WellTestType__production_x0020test = 1
};
#endif

/* eml2_1ForGsoap.h:15844 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellControlIncidentType (-1299)

/* witsml2:WellControlIncidentType */
enum witsml2__WellControlIncidentType {
	witsml2__WellControlIncidentType__shallow_x0020gas_x0020kick = 0,
	witsml2__WellControlIncidentType__water_x0020kick = 1,
	witsml2__WellControlIncidentType__oil_x0020kick = 2,
	witsml2__WellControlIncidentType__gas_x0020kick = 3
};
#endif

/* eml2_1ForGsoap.h:15875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellKillingProcedureType (-1300)

/* witsml2:WellKillingProcedureType */
enum witsml2__WellKillingProcedureType {
	witsml2__WellKillingProcedureType__drillers_x0020method = 0,
	witsml2__WellKillingProcedureType__wait_x0020and_x0020weight = 1,
	witsml2__WellKillingProcedureType__bullheading = 2,
	witsml2__WellKillingProcedureType__lubricate_x0020and_x0020bleed = 3,
	witsml2__WellKillingProcedureType__forward_x0020circulation = 4,
	witsml2__WellKillingProcedureType__reverse_x0020circulation = 5
};
#endif

/* eml2_1ForGsoap.h:15918 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularAssembly (-1301)

/* witsml2:TubularAssembly */
enum witsml2__TubularAssembly {
	witsml2__TubularAssembly__drilling = 0,
	witsml2__TubularAssembly__directional_x0020drilling = 1,
	witsml2__TubularAssembly__fishing = 2,
	witsml2__TubularAssembly__condition_x0020mud = 3,
	witsml2__TubularAssembly__tubing_x0020conveyed_x0020logging = 4,
	witsml2__TubularAssembly__cementing = 5,
	witsml2__TubularAssembly__casing = 6,
	witsml2__TubularAssembly__clean_x0020out = 7,
	witsml2__TubularAssembly__completion_x0020or_x0020testing = 8,
	witsml2__TubularAssembly__coring = 9,
	witsml2__TubularAssembly__hole_x0020opening_x0020or_x0020underreaming = 10,
	witsml2__TubularAssembly__milling_x0020or_x0020dressing_x0020or_x0020cutting = 11,
	witsml2__TubularAssembly__wiper_x0020or_x0020check_x0020or_x0020reaming = 12,
	witsml2__TubularAssembly__unknown = 13
};
#endif

/* eml2_1ForGsoap.h:15947 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoxPinConfig (-1302)

/* witsml2:BoxPinConfig */
enum witsml2__BoxPinConfig {
	witsml2__BoxPinConfig__bottom_x0020box = 0,
	witsml2__BoxPinConfig__top_x0020box = 1,
	witsml2__BoxPinConfig__top_x0020pin = 2,
	witsml2__BoxPinConfig__bottom_x0020pin_x0020top_x0020box = 3,
	witsml2__BoxPinConfig__bottom_x0020pin = 4
};
#endif

/* eml2_1ForGsoap.h:15963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MaterialType (-1303)

/* witsml2:MaterialType */
enum witsml2__MaterialType {
	witsml2__MaterialType__aluminum = 0,
	witsml2__MaterialType__beryllium_x0020copper = 1,
	witsml2__MaterialType__chrome_x0020alloy = 2,
	witsml2__MaterialType__composite = 3,
	witsml2__MaterialType__other = 4,
	witsml2__MaterialType__non_magnetic_x0020steel = 5,
	witsml2__MaterialType__plastic = 6,
	witsml2__MaterialType__steel = 7,
	witsml2__MaterialType__steel_x0020alloy = 8,
	witsml2__MaterialType__titanium = 9
};
#endif

/* eml2_1ForGsoap.h:15984 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitType (-1304)

/* witsml2:BitType */
enum witsml2__BitType {
	witsml2__BitType__diamond = 0,
	witsml2__BitType__diamond_x0020core = 1,
	witsml2__BitType__insert_x0020roller_x0020cone = 2,
	witsml2__BitType__PDC = 3,
	witsml2__BitType__PDC_x0020core = 4,
	witsml2__BitType__roller_x0020cone = 5
};
#endif

/* eml2_1ForGsoap.h:16025 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitDullCode (-1305)

/* witsml2:BitDullCode */
enum witsml2__BitDullCode {
	witsml2__BitDullCode__BC = 0,
	witsml2__BitDullCode__BT = 1,
	witsml2__BitDullCode__BU = 2,
	witsml2__BitDullCode__CC = 3,
	witsml2__BitDullCode__CD = 4,
	witsml2__BitDullCode__CI = 5,
	witsml2__BitDullCode__CR = 6,
	witsml2__BitDullCode__CT = 7,
	witsml2__BitDullCode__ER = 8,
	witsml2__BitDullCode__FC = 9,
	witsml2__BitDullCode__HC = 10,
	witsml2__BitDullCode__JD = 11,
	witsml2__BitDullCode__LC = 12,
	witsml2__BitDullCode__LN = 13,
	witsml2__BitDullCode__LT = 14,
	witsml2__BitDullCode__NO = 15,
	witsml2__BitDullCode__OC = 16,
	witsml2__BitDullCode__PB = 17,
	witsml2__BitDullCode__PN = 18,
	witsml2__BitDullCode__RG = 19,
	witsml2__BitDullCode__RO = 20,
	witsml2__BitDullCode__SD = 21,
	witsml2__BitDullCode__SS = 22,
	witsml2__BitDullCode__TR = 23,
	witsml2__BitDullCode__WO = 24,
	witsml2__BitDullCode__WT = 25
};
#endif

/* eml2_1ForGsoap.h:16166 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitReasonPulled (-1306)

/* witsml2:BitReasonPulled */
enum witsml2__BitReasonPulled {
	witsml2__BitReasonPulled__BHA = 0,
	witsml2__BitReasonPulled__CM = 1,
	witsml2__BitReasonPulled__CP = 2,
	witsml2__BitReasonPulled__DMF = 3,
	witsml2__BitReasonPulled__DP = 4,
	witsml2__BitReasonPulled__DST = 5,
	witsml2__BitReasonPulled__DTF = 6,
	witsml2__BitReasonPulled__FM = 7,
	witsml2__BitReasonPulled__HP = 8,
	witsml2__BitReasonPulled__HR = 9,
	witsml2__BitReasonPulled__LOG = 10,
	witsml2__BitReasonPulled__PP = 11,
	witsml2__BitReasonPulled__PR = 12,
	witsml2__BitReasonPulled__RIG = 13,
	witsml2__BitReasonPulled__TD = 14,
	witsml2__BitReasonPulled__TQ = 15,
	witsml2__BitReasonPulled__TW = 16,
	witsml2__BitReasonPulled__WC = 17
};
#endif

/* eml2_1ForGsoap.h:16267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NozzleType (-1307)

/* witsml2:NozzleType */
enum witsml2__NozzleType {
	witsml2__NozzleType__extended = 0,
	witsml2__NozzleType__normal = 1
};
#endif

/* eml2_1ForGsoap.h:16280 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionPosition (-1308)

/* witsml2:ConnectionPosition */
enum witsml2__ConnectionPosition {
	witsml2__ConnectionPosition__both = 0,
	witsml2__ConnectionPosition__bottom = 1,
	witsml2__ConnectionPosition__top = 2
};
#endif

/* eml2_1ForGsoap.h:16306 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JarType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JarType (-1309)

/* witsml2:JarType */
enum witsml2__JarType {
	witsml2__JarType__mechanical = 0,
	witsml2__JarType__hydraulic = 1,
	witsml2__JarType__hydro_x0020mechanical = 2
};
#endif

/* eml2_1ForGsoap.h:16320 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JarAction (-1310)

/* witsml2:JarAction */
enum witsml2__JarAction {
	witsml2__JarAction__up = 0,
	witsml2__JarAction__down = 1,
	witsml2__JarAction__both = 2,
	witsml2__JarAction__vibrating = 3
};
#endif

/* eml2_1ForGsoap.h:16335 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasurementType (-1311)

/* witsml2:MeasurementType */
enum witsml2__MeasurementType {
	witsml2__MeasurementType__acceleration = 0,
	witsml2__MeasurementType__acoustic_x0020caliper = 1,
	witsml2__MeasurementType__acoustic_x0020casing_x0020collar_x0020locator = 2,
	witsml2__MeasurementType__acoustic_x0020impedance = 3,
	witsml2__MeasurementType__acoustic_x0020porosity = 4,
	witsml2__MeasurementType__acoustic_x0020velocity = 5,
	witsml2__MeasurementType__acoustic_x0020wave_x0020matrix_x0020travel_x0020time = 6,
	witsml2__MeasurementType__acoustic_x0020wave_x0020travel_x0020time = 7,
	witsml2__MeasurementType__amplitude = 8,
	witsml2__MeasurementType__amplitude_x0020of_x0020acoustic_x0020wave = 9,
	witsml2__MeasurementType__amplitude_x0020of_x0020E_M_x0020wave = 10,
	witsml2__MeasurementType__amplitude_x0020ratio = 11,
	witsml2__MeasurementType__area = 12,
	witsml2__MeasurementType__attenuation = 13,
	witsml2__MeasurementType__attenuation_x0020of_x0020acoustic_x0020wave = 14,
	witsml2__MeasurementType__attenuation_x0020of_x0020E_M_x0020wave = 15,
	witsml2__MeasurementType__auxiliary = 16,
	witsml2__MeasurementType__average_x0020porosity = 17,
	witsml2__MeasurementType__azimuth = 18,
	witsml2__MeasurementType__barite_x0020mud_x0020correction = 19,
	witsml2__MeasurementType__bed_x0020thickness_x0020correction = 20,
	witsml2__MeasurementType__bit_x0020size = 21,
	witsml2__MeasurementType__blocked = 22,
	witsml2__MeasurementType__borehole_x0020environment_x0020correction = 23,
	witsml2__MeasurementType__borehole_x0020fluid_x0020correction = 24,
	witsml2__MeasurementType__borehole_x0020size_x0020correction = 25,
	witsml2__MeasurementType__bromide_x0020mud_x0020correction = 26,
	witsml2__MeasurementType__bulk_x0020compressibility = 27,
	witsml2__MeasurementType__bulk_x0020density = 28,
	witsml2__MeasurementType__bulk_x0020volume = 29,
	witsml2__MeasurementType__bulk_x0020volume_x0020gas = 30,
	witsml2__MeasurementType__bulk_x0020volume_x0020hydrocarbon = 31,
	witsml2__MeasurementType__bulk_x0020volume_x0020oil = 32,
	witsml2__MeasurementType__bulk_x0020volume_x0020water = 33,
	witsml2__MeasurementType__C_x002fO_x0020ratio = 34,
	witsml2__MeasurementType__caliper = 35,
	witsml2__MeasurementType__cased_x0020hole_x0020correction = 36,
	witsml2__MeasurementType__casing_x0020collar_x0020locator = 37,
	witsml2__MeasurementType__casing_x0020correction = 38,
	witsml2__MeasurementType__casing_x0020diameter_x0020correction = 39,
	witsml2__MeasurementType__casing_x0020inspection = 40,
	witsml2__MeasurementType__casing_x0020thickness_x0020correction = 41,
	witsml2__MeasurementType__casing_x0020weight_x0020correction = 42,
	witsml2__MeasurementType__cement_x0020correction = 43,
	witsml2__MeasurementType__cement_x0020density_x0020correction = 44,
	witsml2__MeasurementType__cement_x0020evaluation = 45,
	witsml2__MeasurementType__cement_x0020thickness_x0020correction = 46,
	witsml2__MeasurementType__cement_x0020type_x0020correction = 47,
	witsml2__MeasurementType__CH_x0020density_x0020porosity = 48,
	witsml2__MeasurementType__CH_x0020dolomite_x0020density_x0020porosity = 49,
	witsml2__MeasurementType__CH_x0020dolomite_x0020neutron_x0020porosity = 50,
	witsml2__MeasurementType__CH_x0020limestone_x0020density_x0020porosity = 51,
	witsml2__MeasurementType__CH_x0020limestone_x0020neutron_x0020porosity = 52,
	witsml2__MeasurementType__CH_x0020neutron_x0020porosity = 53,
	witsml2__MeasurementType__CH_x0020sandstone_x0020density_x0020porosity = 54,
	witsml2__MeasurementType__CH_x0020sandstone_x0020neutron_x0020porosity = 55,
	witsml2__MeasurementType__compressional_x0020wave_x0020dolomite_x0020porosity = 56,
	witsml2__MeasurementType__compressional_x0020wave_x0020limestone_x0020porosity = 57,
	witsml2__MeasurementType__compressional_x0020wave_x0020matrix_x0020travel_x0020time = 58,
	witsml2__MeasurementType__compressional_x0020wave_x0020sandstone_x0020porosity = 59,
	witsml2__MeasurementType__compressional_x0020wave_x0020travel_x0020time = 60,
	witsml2__MeasurementType__conductivity = 61,
	witsml2__MeasurementType__conductivity_x0020from_x0020attenuation = 62,
	witsml2__MeasurementType__conductivity_x0020from_x0020phase_x0020shift = 63,
	witsml2__MeasurementType__connate_x0020water_x0020conductivity = 64,
	witsml2__MeasurementType__connate_x0020water_x0020resistivity = 'A',
	witsml2__MeasurementType__conventional_x0020core_x0020porosity = 'B',
	witsml2__MeasurementType__core_x0020matrix_x0020density = 'C',
	witsml2__MeasurementType__core_x0020permeability = 'D',
	witsml2__MeasurementType__core_x0020porosity = 'E',
	witsml2__MeasurementType__corrected = 'F',
	witsml2__MeasurementType__count_x0020rate = 'G',
	witsml2__MeasurementType__count_x0020rate_x0020ratio = 'H',
	witsml2__MeasurementType__cross_x0020plot_x0020porosity = 'I',
	witsml2__MeasurementType__decay_x0020time = 'J',
	witsml2__MeasurementType__deep_x0020conductivity = 'K',
	witsml2__MeasurementType__deep_x0020induction_x0020conductivity = 'L',
	witsml2__MeasurementType__deep_x0020induction_x0020resistivity = 'M',
	witsml2__MeasurementType__deep_x0020laterolog_x0020conductivity = 'N',
	witsml2__MeasurementType__deep_x0020laterolog_x0020resistivity = 'O',
	witsml2__MeasurementType__deep_x0020resistivity = 'P',
	witsml2__MeasurementType__density = 'Q',
	witsml2__MeasurementType__density_x0020porosity = 'R',
	witsml2__MeasurementType__depth = 'S',
	witsml2__MeasurementType__depth_x0020adjusted = 'T',
	witsml2__MeasurementType__depth_x0020derived_x0020from_x0020velocity = 'U',
	witsml2__MeasurementType__deviation = 'V',
	witsml2__MeasurementType__dielectric = 'W',
	witsml2__MeasurementType__diffusion_x0020correction = 'X',
	witsml2__MeasurementType__dip = 'Y',
	witsml2__MeasurementType__dipmeter = 'Z',
	witsml2__MeasurementType__dipmeter_x0020conductivity = 91,
	witsml2__MeasurementType__dipmeter_x0020resistivity = 92,
	witsml2__MeasurementType__dolomite_x0020acoustic_x0020porosity = 93,
	witsml2__MeasurementType__dolomite_x0020density_x0020porosity = 94,
	witsml2__MeasurementType__dolomite_x0020neutron_x0020porosity = 95,
	witsml2__MeasurementType__edited = 96,
	witsml2__MeasurementType__effective_x0020porosity = 'a',
	witsml2__MeasurementType__electric_x0020current = 'b',
	witsml2__MeasurementType__electric_x0020potential = 'c',
	witsml2__MeasurementType__electromagnetic_x0020wave_x0020matrix_x0020travel_x0020time = 'd',
	witsml2__MeasurementType__electromagnetic_x0020wave_x0020travel_x0020time = 'e',
	witsml2__MeasurementType__element = 'f',
	witsml2__MeasurementType__elemental_x0020ratio = 'g',
	witsml2__MeasurementType__enhanced = 'h',
	witsml2__MeasurementType__filtered = 'i',
	witsml2__MeasurementType__flowmeter = 'j',
	witsml2__MeasurementType__fluid_x0020density = 'k',
	witsml2__MeasurementType__fluid_x0020velocity = 'l',
	witsml2__MeasurementType__fluid_x0020viscosity = 'm',
	witsml2__MeasurementType__flushed_x0020zone_x0020conductivity = 'n',
	witsml2__MeasurementType__flushed_x0020zone_x0020resistivity = 'o',
	witsml2__MeasurementType__flushed_x0020zone_x0020saturation = 'p',
	witsml2__MeasurementType__force = 'q',
	witsml2__MeasurementType__formation_x0020density_x0020correction = 'r',
	witsml2__MeasurementType__formation_x0020properties_x0020correction = 's',
	witsml2__MeasurementType__formation_x0020salinity_x0020correction = 't',
	witsml2__MeasurementType__formation_x0020saturation_x0020correction = 'u',
	witsml2__MeasurementType__formation_x0020volume_x0020factor_x0020correction = 'v',
	witsml2__MeasurementType__formation_x0020water_x0020density_x0020correction = 'w',
	witsml2__MeasurementType__formation_x0020water_x0020saturation_x0020correction = 'x',
	witsml2__MeasurementType__free_x0020fluid_x0020index = 'y',
	witsml2__MeasurementType__friction_x0020effect_x0020correction = 'z',
	witsml2__MeasurementType__gamma_x0020ray = 123,
	witsml2__MeasurementType__gamma_x0020ray_x0020minus_x0020uranium = 124,
	witsml2__MeasurementType__gas_x0020saturation = 125,
	witsml2__MeasurementType__gradiomanometer = 126,
	witsml2__MeasurementType__high_x0020frequency_x0020conductivity = 127,
	witsml2__MeasurementType__high_x0020frequency_x0020electromagnetic = 128,
	witsml2__MeasurementType__high_x0020frequency_x0020electromagnetic_x0020porosity = 129,
	witsml2__MeasurementType__high_x0020frequency_x0020E_M_x0020phase_x0020shift = 130,
	witsml2__MeasurementType__high_x0020frequency_x0020resistivity = 131,
	witsml2__MeasurementType__hydrocarbon_x0020correction = 132,
	witsml2__MeasurementType__hydrocarbon_x0020density_x0020correction = 133,
	witsml2__MeasurementType__hydrocarbon_x0020gravity_x0020correction = 134,
	witsml2__MeasurementType__hydrocarbon_x0020saturation = 135,
	witsml2__MeasurementType__hydrocarbon_x0020viscosity_x0020correction = 136,
	witsml2__MeasurementType__image = 137,
	witsml2__MeasurementType__interpretation_x0020variable = 138,
	witsml2__MeasurementType__iron_x0020mud_x0020correction = 139,
	witsml2__MeasurementType__joined = 140,
	witsml2__MeasurementType__KCl_x0020mud_x0020correction = 141,
	witsml2__MeasurementType__length = 142,
	witsml2__MeasurementType__limestone_x0020acoustic_x0020porosity = 143,
	witsml2__MeasurementType__limestone_x0020density_x0020porosity = 144,
	witsml2__MeasurementType__limestone_x0020neutron_x0020porosity = 145,
	witsml2__MeasurementType__lithology_x0020correction = 146,
	witsml2__MeasurementType__log_x0020derived_x0020permeability = 147,
	witsml2__MeasurementType__log_x0020matrix_x0020density = 148,
	witsml2__MeasurementType__magnetic_x0020casing_x0020collar_x0020locator = 149,
	witsml2__MeasurementType__matrix_x0020density = 150,
	witsml2__MeasurementType__matrix_x0020travel_x0020time = 151,
	witsml2__MeasurementType__measured_x0020depth = 152,
	witsml2__MeasurementType__mechanical_x0020caliper = 153,
	witsml2__MeasurementType__mechanical_x0020casing_x0020collar_x0020locator = 154,
	witsml2__MeasurementType__medium_x0020conductivity = 155,
	witsml2__MeasurementType__medium_x0020induction_x0020conductivity = 156,
	witsml2__MeasurementType__medium_x0020induction_x0020resistivity = 157,
	witsml2__MeasurementType__medium_x0020laterolog_x0020conductivity = 158,
	witsml2__MeasurementType__medium_x0020laterolog_x0020resistivity = 159,
	witsml2__MeasurementType__medium_x0020resistivity = 160,
	witsml2__MeasurementType__micro_x0020conductivity = 161,
	witsml2__MeasurementType__micro_x0020inverse_x0020conductivity = 162,
	witsml2__MeasurementType__micro_x0020inverse_x0020resistivity = 163,
	witsml2__MeasurementType__micro_x0020laterolog_x0020conductivity = 164,
	witsml2__MeasurementType__micro_x0020laterolog_x0020resistivity = 165,
	witsml2__MeasurementType__micro_x0020normal_x0020conductivity = 166,
	witsml2__MeasurementType__micro_x0020normal_x0020resistivity = 167,
	witsml2__MeasurementType__micro_x0020resistivity = 168,
	witsml2__MeasurementType__micro_x0020spherically_x0020focused_x0020conductivity = 169,
	witsml2__MeasurementType__micro_x0020spherically_x0020focused_x0020resistivity = 170,
	witsml2__MeasurementType__mineral = 171,
	witsml2__MeasurementType__mud_x0020cake_x0020conductivity = 172,
	witsml2__MeasurementType__mud_x0020cake_x0020correction = 173,
	witsml2__MeasurementType__mud_x0020cake_x0020density_x0020correction = 174,
	witsml2__MeasurementType__mud_x0020cake_x0020resistivity = 175,
	witsml2__MeasurementType__mud_x0020cake_x0020resistivity_x0020correction = 176,
	witsml2__MeasurementType__mud_x0020cake_x0020thickness_x0020correction = 177,
	witsml2__MeasurementType__mud_x0020composition_x0020correction = 178,
	witsml2__MeasurementType__mud_x0020conductivity = 179,
	witsml2__MeasurementType__mud_x0020filtrate_x0020conductivity = 180,
	witsml2__MeasurementType__mud_x0020filtrate_x0020correction = 181,
	witsml2__MeasurementType__mud_x0020filtrate_x0020density_x0020correction = 182,
	witsml2__MeasurementType__mud_x0020filtrate_x0020resistivity = 183,
	witsml2__MeasurementType__mud_x0020filtrate_x0020resistivity_x0020correction = 184,
	witsml2__MeasurementType__mud_x0020filtrate_x0020salinity_x0020correction = 185,
	witsml2__MeasurementType__mud_x0020resistivity = 186,
	witsml2__MeasurementType__mud_x0020salinity_x0020correction = 187,
	witsml2__MeasurementType__mud_x0020viscosity_x0020correction = 188,
	witsml2__MeasurementType__mud_x0020weight_x0020correction = 189,
	witsml2__MeasurementType__neutron_x0020die_x0020away_x0020time = 190,
	witsml2__MeasurementType__neutron_x0020porosity = 191,
	witsml2__MeasurementType__nuclear_x0020caliper = 192,
	witsml2__MeasurementType__nuclear_x0020magnetic_x0020decay_x0020time = 193,
	witsml2__MeasurementType__nuclear_x0020magnetism_x0020log_x0020permeability = 194,
	witsml2__MeasurementType__nuclear_x0020magnetism_x0020porosity = 195,
	witsml2__MeasurementType__OH_x0020density_x0020porosity = 196,
	witsml2__MeasurementType__OH_x0020dolomite_x0020density_x0020porosity = 197,
	witsml2__MeasurementType__OH_x0020dolomite_x0020neutron_x0020porosity = 198,
	witsml2__MeasurementType__OH_x0020limestone_x0020density_x0020porosity = 199,
	witsml2__MeasurementType__OH_x0020limestone_x0020neutron_x0020porosity = 200,
	witsml2__MeasurementType__OH_x0020neutron_x0020porosity = 201,
	witsml2__MeasurementType__OH_x0020sandstone_x0020density_x0020porosity = 202,
	witsml2__MeasurementType__OH_x0020sandstone_x0020neutron_x0020porosity = 203,
	witsml2__MeasurementType__oil_x0020based_x0020mud_x0020correction = 204,
	witsml2__MeasurementType__oil_x0020saturation = 205,
	witsml2__MeasurementType__perforating = 206,
	witsml2__MeasurementType__permeability = 207,
	witsml2__MeasurementType__phase_x0020shift = 208,
	witsml2__MeasurementType__photoelectric_x0020absorption = 209,
	witsml2__MeasurementType__photoelectric_x0020absorption_x0020correction = 210,
	witsml2__MeasurementType__physical_x0020measurement_x0020correction = 211,
	witsml2__MeasurementType__plane_x0020angle = 212,
	witsml2__MeasurementType__porosity = 213,
	witsml2__MeasurementType__porosity_x0020correction = 214,
	witsml2__MeasurementType__potassium = 215,
	witsml2__MeasurementType__pressure = 216,
	witsml2__MeasurementType__pressure_x0020correction = 217,
	witsml2__MeasurementType__processed = 218,
	witsml2__MeasurementType__pulsed_x0020neutron_x0020porosity = 219,
	witsml2__MeasurementType__quality = 220,
	witsml2__MeasurementType__ratio = 221,
	witsml2__MeasurementType__raw = 222,
	witsml2__MeasurementType__relative_x0020bearing = 223,
	witsml2__MeasurementType__resistivity = 224,
	witsml2__MeasurementType__resistivity_x0020factor_x0020correction = 225,
	witsml2__MeasurementType__resistivity_x0020from_x0020attenuation = 226,
	witsml2__MeasurementType__resistivity_x0020from_x0020phase_x0020shift = 227,
	witsml2__MeasurementType__resistivity_x0020phase_x0020shift = 228,
	witsml2__MeasurementType__resistivity_x0020ratio = 229,
	witsml2__MeasurementType__salinity = 230,
	witsml2__MeasurementType__sampling = 231,
	witsml2__MeasurementType__sandstone_x0020acoustic_x0020porosity = 232,
	witsml2__MeasurementType__sandstone_x0020density_x0020porosity = 233,
	witsml2__MeasurementType__sandstone_x0020neutron_x0020porosity = 234,
	witsml2__MeasurementType__saturation = 235,
	witsml2__MeasurementType__shale_x0020volume = 236,
	witsml2__MeasurementType__shallow_x0020conductivity = 237,
	witsml2__MeasurementType__shallow_x0020induction_x0020conductivity = 238,
	witsml2__MeasurementType__shallow_x0020induction_x0020resistivity = 239,
	witsml2__MeasurementType__shallow_x0020laterolog_x0020conductivity = 240,
	witsml2__MeasurementType__shallow_x0020laterolog_x0020resistivity = 241,
	witsml2__MeasurementType__shallow_x0020resistivity = 242,
	witsml2__MeasurementType__shear_x0020wave_x0020dolomite_x0020porosity = 243,
	witsml2__MeasurementType__shear_x0020wave_x0020limestone_x0020porosity = 244,
	witsml2__MeasurementType__shear_x0020wave_x0020matrix_x0020travel_x0020time = 245,
	witsml2__MeasurementType__shear_x0020wave_x0020sandstone_x0020porosity = 246,
	witsml2__MeasurementType__shear_x0020wave_x0020travel_x0020time = 247,
	witsml2__MeasurementType__shifted = 248,
	witsml2__MeasurementType__sidewall_x0020core_x0020porosity = 249,
	witsml2__MeasurementType__sigma = 250,
	witsml2__MeasurementType__sigma_x0020formation = 251,
	witsml2__MeasurementType__sigma_x0020gas = 252,
	witsml2__MeasurementType__sigma_x0020hydrocarbon = 253,
	witsml2__MeasurementType__sigma_x0020matrix = 254,
	witsml2__MeasurementType__sigma_x0020oil = 255,
	witsml2__MeasurementType__sigma_x0020water = 256,
	witsml2__MeasurementType__slippage_x0020velocity_x0020correction = 257,
	witsml2__MeasurementType__smoothed = 258,
	witsml2__MeasurementType__spectral_x0020gamma_x0020ray = 259,
	witsml2__MeasurementType__spherically_x0020focused_x0020conductivity = 260,
	witsml2__MeasurementType__spherically_x0020focused_x0020resistivity = 261,
	witsml2__MeasurementType__spontaneous_x0020potential = 262,
	witsml2__MeasurementType__spreading_x0020loss_x0020correction = 263,
	witsml2__MeasurementType__synthetic_x0020well_x0020log_x0020trace = 264,
	witsml2__MeasurementType__temperature = 265,
	witsml2__MeasurementType__temperature_x0020correction = 266,
	witsml2__MeasurementType__tension = 267,
	witsml2__MeasurementType__Th_x002fK_x0020ratio = 268,
	witsml2__MeasurementType__thorium = 269,
	witsml2__MeasurementType__time = 270,
	witsml2__MeasurementType__tool_x0020diameter_x0020correction = 271,
	witsml2__MeasurementType__tool_x0020eccentricity_x0020correction = 272,
	witsml2__MeasurementType__total_x0020gamma_x0020ray = 273,
	witsml2__MeasurementType__total_x0020porosity = 274,
	witsml2__MeasurementType__tracer_x0020survey = 275,
	witsml2__MeasurementType__travel_x0020time = 276,
	witsml2__MeasurementType__true_x0020conductivity = 277,
	witsml2__MeasurementType__true_x0020resistivity = 278,
	witsml2__MeasurementType__true_x0020vertical_x0020depth = 279,
	witsml2__MeasurementType__tube_x0020wave_x0020dolomite_x0020porosity = 280,
	witsml2__MeasurementType__tube_x0020wave_x0020limestone_x0020porosity = 281,
	witsml2__MeasurementType__tube_x0020wave_x0020matrix_x0020travel_x0020time = 282,
	witsml2__MeasurementType__tube_x0020wave_x0020sandstone_x0020porosity = 283,
	witsml2__MeasurementType__tube_x0020wave_x0020travel_x0020time = 284,
	witsml2__MeasurementType__uranium = 285,
	witsml2__MeasurementType__velocity = 286,
	witsml2__MeasurementType__volume = 287,
	witsml2__MeasurementType__water_x0020based_x0020fluid_x0020correction = 288,
	witsml2__MeasurementType__water_x0020holdup_x0020correction = 289,
	witsml2__MeasurementType__water_x0020saturated_x0020conductivity = 290,
	witsml2__MeasurementType__water_x0020saturated_x0020resistivity = 291,
	witsml2__MeasurementType__water_x0020saturation = 292
};
#endif

/* eml2_1ForGsoap.h:17795 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BearingType (-1312)

/* witsml2:BearingType */
enum witsml2__BearingType {
	witsml2__BearingType__oil_x0020seal = 0,
	witsml2__BearingType__mud_x0020lube = 1,
	witsml2__BearingType__other = 2
};
#endif

/* eml2_1ForGsoap.h:17809 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BladeShapeType (-1313)

/* witsml2:BladeShapeType */
enum witsml2__BladeShapeType {
	witsml2__BladeShapeType__dynamic = 0,
	witsml2__BladeShapeType__melon = 1,
	witsml2__BladeShapeType__spiral = 2,
	witsml2__BladeShapeType__straight = 3,
	witsml2__BladeShapeType__variable = 4
};
#endif

/* eml2_1ForGsoap.h:17825 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BladeType (-1314)

/* witsml2:BladeType */
enum witsml2__BladeType {
	witsml2__BladeType__clamp_on = 0,
	witsml2__BladeType__integral = 1,
	witsml2__BladeType__sleeve = 2,
	witsml2__BladeType__welded = 3
};
#endif

/* eml2_1ForGsoap.h:17840 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpenerType (-1315)

/* witsml2:HoleOpenerType */
enum witsml2__HoleOpenerType {
	witsml2__HoleOpenerType__under_reamer = 0,
	witsml2__HoleOpenerType__fixed_x0020blade = 1
};
#endif

/* eml2_1ForGsoap.h:17853 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DeflectionMethod (-1316)

/* witsml2:DeflectionMethod */
enum witsml2__DeflectionMethod {
	witsml2__DeflectionMethod__hybrid = 0,
	witsml2__DeflectionMethod__point_x0020bit = 1,
	witsml2__DeflectionMethod__push_x0020bit = 2
};
#endif

/* eml2_1ForGsoap.h:17879 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponentType (-1317)

/* witsml2:TubularComponentType */
enum witsml2__TubularComponentType {
	witsml2__TubularComponentType__accelerator = 0,
	witsml2__TubularComponentType__adjustable_x0020kickoff = 1,
	witsml2__TubularComponentType__bit_x0020core_x0020diamond = 2,
	witsml2__TubularComponentType__bit_x0020core_x0020PDC = 3,
	witsml2__TubularComponentType__bit_x0020diamond_x0020fixed_x0020cut = 4,
	witsml2__TubularComponentType__bit_x0020hole_x0020opener = 5,
	witsml2__TubularComponentType__bit_x0020insert_x0020roller_x0020cone = 6,
	witsml2__TubularComponentType__bit_x0020mill_x0020tooth_x0020roller_x0020cone = 7,
	witsml2__TubularComponentType__bit_x0020PDC_x0020fixed_x0020cutter = 8,
	witsml2__TubularComponentType__bit_x0020under_x0020reamer = 9,
	witsml2__TubularComponentType__bridge_x0020plug = 10,
	witsml2__TubularComponentType__bull_x0020plug = 11,
	witsml2__TubularComponentType__bullnose = 12,
	witsml2__TubularComponentType__casing = 13,
	witsml2__TubularComponentType__casing_x0020crossover = 14,
	witsml2__TubularComponentType__casing_x0020cutter = 15,
	witsml2__TubularComponentType__casing_x0020head = 16,
	witsml2__TubularComponentType__casing_x0020inflatable_x0020packer = 17,
	witsml2__TubularComponentType__casing_x0020shoe_x0020screw_in = 18,
	witsml2__TubularComponentType__catch_x0020assembly = 19,
	witsml2__TubularComponentType__coiled_x0020tubing_x0020in_x0020hole = 20,
	witsml2__TubularComponentType__coiled_x0020tubing_x0020on_x0020coil = 21,
	witsml2__TubularComponentType__core_x0020barrel = 22,
	witsml2__TubularComponentType__core_x0020orientation_x0020barrel = 23,
	witsml2__TubularComponentType__die_x0020collar = 24,
	witsml2__TubularComponentType__die_x0020collar_x0020LH = 25,
	witsml2__TubularComponentType__directional_x0020guidance_x0020system = 26,
	witsml2__TubularComponentType__drill_x0020collar = 27,
	witsml2__TubularComponentType__drill_x0020collar_x0020short = 28,
	witsml2__TubularComponentType__drill_x0020pipe = 29,
	witsml2__TubularComponentType__drill_x0020pipe_x0020compressive = 30,
	witsml2__TubularComponentType__drill_x0020pipe_x0020LH = 31,
	witsml2__TubularComponentType__drill_x0020stem_x0020test_x0020BHA = 32,
	witsml2__TubularComponentType__drive_x0020pipe = 33,
	witsml2__TubularComponentType__dual_x0020catch_x0020assembly = 34,
	witsml2__TubularComponentType__extension_x0020bowl_x0020overshot = 35,
	witsml2__TubularComponentType__extension_x0020sub_overshot = 36,
	witsml2__TubularComponentType__float_x0020collar = 37,
	witsml2__TubularComponentType__float_x0020shoe = 38,
	witsml2__TubularComponentType__flow_x0020head = 39,
	witsml2__TubularComponentType__guide_x0020shoe = 40,
	witsml2__TubularComponentType__hanger_x0020casing_x0020subsea = 41,
	witsml2__TubularComponentType__hanger_x0020casing_x0020surface = 42,
	witsml2__TubularComponentType__hanger_x0020liner = 43,
	witsml2__TubularComponentType__hanger_x0020mud_x0020line = 44,
	witsml2__TubularComponentType__hanger_x0020tubing = 45,
	witsml2__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe = 46,
	witsml2__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe_x0020LH = 47,
	witsml2__TubularComponentType__jar = 48,
	witsml2__TubularComponentType__junk_x0020basket = 49,
	witsml2__TubularComponentType__junk_x0020basket_x0020reverse_x0020circulation = 50,
	witsml2__TubularComponentType__kelly = 51,
	witsml2__TubularComponentType__keyseat_x0020wiper_x0020tool = 52,
	witsml2__TubularComponentType__landing_x0020float_x0020collar = 53,
	witsml2__TubularComponentType__lead_x0020impression_x0020block = 54,
	witsml2__TubularComponentType__liner = 55,
	witsml2__TubularComponentType__logging_x0020while_x0020drilling_x0020tool = 56,
	witsml2__TubularComponentType__magnet = 57,
	witsml2__TubularComponentType__mill_x0020casing_x0020cutting = 58,
	witsml2__TubularComponentType__mill_x0020dress = 59,
	witsml2__TubularComponentType__mill_x0020flat_x0020bottom = 60,
	witsml2__TubularComponentType__mill_x0020hollow = 61,
	witsml2__TubularComponentType__mill_x0020packer_x0020picker_x0020assembly = 62,
	witsml2__TubularComponentType__mill_x0020pilot = 63,
	witsml2__TubularComponentType__mill_x0020polish = 64,
	witsml2__TubularComponentType__mill_x0020section = 'A',
	witsml2__TubularComponentType__mill_x0020taper = 'B',
	witsml2__TubularComponentType__mill_x0020washover = 'C',
	witsml2__TubularComponentType__mill_x0020watermelon = 'D',
	witsml2__TubularComponentType__millout_x0020extension = 'E',
	witsml2__TubularComponentType__motor = 'F',
	witsml2__TubularComponentType__motor_x0020instrumented = 'G',
	witsml2__TubularComponentType__motor_x0020steerable = 'H',
	witsml2__TubularComponentType__mule_x0020shoe = 'I',
	witsml2__TubularComponentType__multilateral_x0020hanger_x0020running_x0020tool = 'J',
	witsml2__TubularComponentType__MWD_x0020hang_x0020off_x0020sub = 'K',
	witsml2__TubularComponentType__MWD_x0020pulser = 'L',
	witsml2__TubularComponentType__non_magnetic_x0020collar = 'M',
	witsml2__TubularComponentType__non_magnetic_x0020stabilizer = 'N',
	witsml2__TubularComponentType__other = 'O',
	witsml2__TubularComponentType__overshot = 'P',
	witsml2__TubularComponentType__overshot_x0020LH = 'Q',
	witsml2__TubularComponentType__oversize_x0020lip_x0020guide_x0020overshot = 'R',
	witsml2__TubularComponentType__packer = 'S',
	witsml2__TubularComponentType__packer_x0020retrieve_x0020TT_x0020squeeze = 'T',
	witsml2__TubularComponentType__packer_x0020RTTS = 'U',
	witsml2__TubularComponentType__packer_x0020storm_x0020valve_x0020RTTS = 'V',
	witsml2__TubularComponentType__pipe_x0020cutter = 'W',
	witsml2__TubularComponentType__polished_x0020bore_x0020receptacle = 'X',
	witsml2__TubularComponentType__ported_x0020stinger = 'Y',
	witsml2__TubularComponentType__prepacked_x0020screens = 'Z',
	witsml2__TubularComponentType__reamer = 91,
	witsml2__TubularComponentType__reversing_x0020tool = 92,
	witsml2__TubularComponentType__riser_x0020high_x0020pressure = 93,
	witsml2__TubularComponentType__riser_x0020marine = 94,
	witsml2__TubularComponentType__riser_x0020production = 95,
	witsml2__TubularComponentType__rotary_x0020steering_x0020tool = 96,
	witsml2__TubularComponentType__running_x0020tool = 'a',
	witsml2__TubularComponentType__safety_x0020joint = 'b',
	witsml2__TubularComponentType__safety_x0020joint_x0020LH = 'c',
	witsml2__TubularComponentType__scab_x0020liner_x0020bit_x0020guide = 'd',
	witsml2__TubularComponentType__scraper = 'e',
	witsml2__TubularComponentType__scratchers = 'f',
	witsml2__TubularComponentType__slotted_x0020liner = 'g',
	witsml2__TubularComponentType__spear = 'h',
	witsml2__TubularComponentType__stabilizer = 'i',
	witsml2__TubularComponentType__stabilizer_x0020inline = 'j',
	witsml2__TubularComponentType__stabilizer_x0020near_x0020bit = 'k',
	witsml2__TubularComponentType__stabilizer_x0020near_x0020bit_x0020roller_x0020reamer = 'l',
	witsml2__TubularComponentType__stabilizer_x0020non_rotating = 'm',
	witsml2__TubularComponentType__stabilizer_x0020steerable = 'n',
	witsml2__TubularComponentType__stabilizer_x0020string = 'o',
	witsml2__TubularComponentType__stabilizer_x0020string_x0020roller_x0020reamer = 'p',
	witsml2__TubularComponentType__stabilizer_x0020turbo_x0020back = 'q',
	witsml2__TubularComponentType__stabilizer_x0020variable_x0020blade = 'r',
	witsml2__TubularComponentType__stage_x0020cement_x0020collar = 's',
	witsml2__TubularComponentType__sub_bar_x0020catcher = 't',
	witsml2__TubularComponentType__sub_bent = 'u',
	witsml2__TubularComponentType__sub_bit = 'v',
	witsml2__TubularComponentType__sub_bumper = 'w',
	witsml2__TubularComponentType__sub_catcher = 'x',
	witsml2__TubularComponentType__sub_circulation = 'y',
	witsml2__TubularComponentType__sub_cone = 'z',
	witsml2__TubularComponentType__sub_crossover = 123,
	witsml2__TubularComponentType__sub_dart = 124,
	witsml2__TubularComponentType__sub_filter = 125,
	witsml2__TubularComponentType__sub_float = 126,
	witsml2__TubularComponentType__sub_jetting = 127,
	witsml2__TubularComponentType__sub_junk = 128,
	witsml2__TubularComponentType__sub_orienting = 129,
	witsml2__TubularComponentType__sub_ported = 130,
	witsml2__TubularComponentType__sub_pressure_x0020relief = 131,
	witsml2__TubularComponentType__sub_pump_x0020out = 132,
	witsml2__TubularComponentType__sub_restrictor = 133,
	witsml2__TubularComponentType__sub_saver = 134,
	witsml2__TubularComponentType__sub_shock = 135,
	witsml2__TubularComponentType__sub_side_x0020entry = 136,
	witsml2__TubularComponentType__sub_stop = 137,
	witsml2__TubularComponentType__surface_x0020pipe = 138,
	witsml2__TubularComponentType__taper_x0020tap = 139,
	witsml2__TubularComponentType__taper_x0020tap_x0020LH = 140,
	witsml2__TubularComponentType__thruster = 141,
	witsml2__TubularComponentType__tieback_x0020polished_x0020bore_x0020receptacle = 142,
	witsml2__TubularComponentType__tieback_x0020stinger = 143,
	witsml2__TubularComponentType__tubing = 144,
	witsml2__TubularComponentType__tubing_conveyed_x0020perforating_x0020gun = 145,
	witsml2__TubularComponentType__turbine = 146,
	witsml2__TubularComponentType__unknown = 147,
	witsml2__TubularComponentType__washover_x0020pipe = 148,
	witsml2__TubularComponentType__whipstock = 149,
	witsml2__TubularComponentType__whipstock_x0020anchor = 150
};
#endif

/* eml2_1ForGsoap.h:18041 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IadcBearingWearCode (-1318)

/* witsml2:IadcBearingWearCode */
enum witsml2__IadcBearingWearCode {
	witsml2__IadcBearingWearCode__0 = 0,
	witsml2__IadcBearingWearCode__1 = 1,
	witsml2__IadcBearingWearCode__2 = 2,
	witsml2__IadcBearingWearCode__3 = 3,
	witsml2__IadcBearingWearCode__4 = 4,
	witsml2__IadcBearingWearCode__5 = 5,
	witsml2__IadcBearingWearCode__6 = 6,
	witsml2__IadcBearingWearCode__7 = 7,
	witsml2__IadcBearingWearCode__8 = 8,
	witsml2__IadcBearingWearCode__E = 'E',
	witsml2__IadcBearingWearCode__F = 'F',
	witsml2__IadcBearingWearCode__N = 'N',
	witsml2__IadcBearingWearCode__X = 'X'
};
#endif

/* eml2_1ForGsoap.h:18065 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IadcIntegerCode (-1319)

/* witsml2:IadcIntegerCode */
enum witsml2__IadcIntegerCode {
	witsml2__IadcIntegerCode__0 = 0,
	witsml2__IadcIntegerCode__1 = 1,
	witsml2__IadcIntegerCode__2 = 2,
	witsml2__IadcIntegerCode__3 = 3,
	witsml2__IadcIntegerCode__4 = 4,
	witsml2__IadcIntegerCode__5 = 5,
	witsml2__IadcIntegerCode__6 = 6,
	witsml2__IadcIntegerCode__7 = 7,
	witsml2__IadcIntegerCode__8 = 8
};
#endif

/* eml2_1ForGsoap.h:18085 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreFluidLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreFluidLocation (-1320)

/* witsml2:WellboreFluidLocation */
enum witsml2__WellboreFluidLocation {
	witsml2__WellboreFluidLocation__annulus = 0,
	witsml2__WellboreFluidLocation__deadend = 1,
	witsml2__WellboreFluidLocation__in_x0020pipe = 2,
	witsml2__WellboreFluidLocation__rat_x0020hole = 3
};
#endif

/* eml2_1ForGsoap.h:18100 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobType (-1321)

/* witsml2:CementJobType */
enum witsml2__CementJobType {
	witsml2__CementJobType__primary = 0,
	witsml2__CementJobType__plug = 1,
	witsml2__CementJobType__squeeze = 2
};
#endif

/* eml2_1ForGsoap.h:18114 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleCasingType (-1322)

/* witsml2:HoleCasingType */
enum witsml2__HoleCasingType {
	witsml2__HoleCasingType__blow_x0020out_x0020preventer = 0,
	witsml2__HoleCasingType__casing = 1,
	witsml2__HoleCasingType__conductor = 2,
	witsml2__HoleCasingType__curved_x0020conductor = 3,
	witsml2__HoleCasingType__liner = 4,
	witsml2__HoleCasingType__open_x0020hole = 5,
	witsml2__HoleCasingType__riser = 6,
	witsml2__HoleCasingType__tubing = 7
};
#endif

/* eml2_1ForGsoap.h:18133 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IndexDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IndexDirection (-1323)

/* witsml2:IndexDirection */
enum witsml2__IndexDirection {
	witsml2__IndexDirection__decreasing = 0,
	witsml2__IndexDirection__increasing = 1
};
#endif

/* eml2_1ForGsoap.h:18154 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LoggingMethod (-1324)

/* witsml2:LoggingMethod */
enum witsml2__LoggingMethod {
	witsml2__LoggingMethod__computed = 0,
	witsml2__LoggingMethod__distributed = 1,
	witsml2__LoggingMethod__LWD = 2,
	witsml2__LoggingMethod__mixed = 3,
	witsml2__LoggingMethod__MWD = 4,
	witsml2__LoggingMethod__surface = 5,
	witsml2__LoggingMethod__wireline = 6
};
#endif

/* eml2_1ForGsoap.h:18200 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndexType (-1325)

/* witsml2:ChannelIndexType */
enum witsml2__ChannelIndexType {
	witsml2__ChannelIndexType__measured_x0020depth = 0,
	witsml2__ChannelIndexType__true_x0020vertical_x0020depth = 1,
	witsml2__ChannelIndexType__pass_x0020indexed_x0020depth = 2,
	witsml2__ChannelIndexType__date_x0020time = 3,
	witsml2__ChannelIndexType__elapsed_x0020time = 4,
	witsml2__ChannelIndexType__temperature = 5,
	witsml2__ChannelIndexType__pressure = 6
};
#endif

/* eml2_1ForGsoap.h:18246 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelState (-1326)

/* witsml2:ChannelState */
enum witsml2__ChannelState {
	witsml2__ChannelState__calculated = 0,
	witsml2__ChannelState__final_ = 1,
	witsml2__ChannelState__memory = 2,
	witsml2__ChannelState__processed = 3,
	witsml2__ChannelState__real_x0020time = 4
};
#endif

/* eml2_1ForGsoap.h:18282 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EtpDataType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EtpDataType (-1327)

/* witsml2:EtpDataType */
enum witsml2__EtpDataType {
	witsml2__EtpDataType__boolean = 0,
	witsml2__EtpDataType__bytes = 1,
	witsml2__EtpDataType__double_ = 2,
	witsml2__EtpDataType__float_ = 3,
	witsml2__EtpDataType__int_ = 4,
	witsml2__EtpDataType__long_ = 5,
	witsml2__EtpDataType__null = 6,
	witsml2__EtpDataType__string = 7,
	witsml2__EtpDataType__vector = 8
};
#endif

/* eml2_1ForGsoap.h:18338 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelStatus (-1328)

/* witsml2:ChannelStatus */
enum witsml2__ChannelStatus {
	witsml2__ChannelStatus__active = 0,
	witsml2__ChannelStatus__closed = 1,
	witsml2__ChannelStatus__inactive = 2
};
#endif

/* eml2_1ForGsoap.h:18364 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelDerivation (-1329)

/* witsml2:ChannelDerivation */
enum witsml2__ChannelDerivation {
	witsml2__ChannelDerivation__raw = 0,
	witsml2__ChannelDerivation__simulated = 1,
	witsml2__ChannelDerivation__spliced = 2,
	witsml2__ChannelDerivation__sampled = 3,
	witsml2__ChannelDerivation__model = 4
};
#endif

/* eml2_1ForGsoap.h:18400 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BackupScaleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BackupScaleType (-1330)

/* witsml2:BackupScaleType */
enum witsml2__BackupScaleType {
	witsml2__BackupScaleType__x10 = 0,
	witsml2__BackupScaleType__offscale_x0020left_x002fright = 1,
	witsml2__BackupScaleType__other = 2
};
#endif

/* eml2_1ForGsoap.h:18414 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CalibrationPointRole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CalibrationPointRole (-1331)

/* witsml2:CalibrationPointRole */
enum witsml2__CalibrationPointRole {
	witsml2__CalibrationPointRole__left_x0020edge = 0,
	witsml2__CalibrationPointRole__right_x0020edge = 1,
	witsml2__CalibrationPointRole__fraction = 2,
	witsml2__CalibrationPointRole__other = 3
};
#endif

/* eml2_1ForGsoap.h:18445 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FileNameType (-1332)

/* witsml2:FileNameType */
enum witsml2__FileNameType {
	witsml2__FileNameType__file_x0020name = 0,
	witsml2__FileNameType__path_x0020name = 1,
	witsml2__FileNameType__universal_x0020resource_x0020locator = 2,
	witsml2__FileNameType__other = 3
};
#endif

/* eml2_1ForGsoap.h:18476 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogSectionType (-1333)

/* witsml2:LogSectionType */
enum witsml2__LogSectionType {
	witsml2__LogSectionType__main = 0,
	witsml2__LogSectionType__repeat = 1,
	witsml2__LogSectionType__calibration = 2,
	witsml2__LogSectionType__tie_x0020in = 3,
	witsml2__LogSectionType__going_x0020in_x0020hole = 4,
	witsml2__LogSectionType__other = 5
};
#endif

/* eml2_1ForGsoap.h:18501 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MessageDigestType (-1334)

/* witsml2:MessageDigestType */
enum witsml2__MessageDigestType {
	witsml2__MessageDigestType__MD5 = 0,
	witsml2__MessageDigestType__SHA1 = 1,
	witsml2__MessageDigestType__other = 2
};
#endif

/* eml2_1ForGsoap.h:18523 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MimeType (-1335)

/* witsml2:MimeType */
enum witsml2__MimeType {
	witsml2__MimeType__image_x002ftiff = 0,
	witsml2__MimeType__image_x002fgif = 1,
	witsml2__MimeType__image_x002fpng = 2,
	witsml2__MimeType__image_x002fxml_x002bsvg = 3,
	witsml2__MimeType__other = 4
};
#endif

/* eml2_1ForGsoap.h:18559 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogRectangleType (-1336)

/* witsml2:LogRectangleType */
enum witsml2__LogRectangleType {
	witsml2__LogRectangleType__header = 0,
	witsml2__LogRectangleType__alternate = 1
};
#endif

/* eml2_1ForGsoap.h:18576 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogTrackType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogTrackType (-1337)

/* witsml2:LogTrackType */
enum witsml2__LogTrackType {
	witsml2__LogTrackType__curves = 0,
	witsml2__LogTrackType__data = 1,
	witsml2__LogTrackType__depth = 2,
	witsml2__LogTrackType__traces = 3,
	witsml2__LogTrackType__other = 4
};
#endif

/* eml2_1ForGsoap.h:18600 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LineStyle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LineStyle (-1338)

/* witsml2:LineStyle */
enum witsml2__LineStyle {
	witsml2__LineStyle__dashed = 0,
	witsml2__LineStyle__solid = 1,
	witsml2__LineStyle__dotted = 2,
	witsml2__LineStyle__short_x0020dashed = 3,
	witsml2__LineStyle__long_x0020dashed = 4
};
#endif

/* eml2_1ForGsoap.h:18616 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ScaleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ScaleType (-1339)

/* witsml2:ScaleType */
enum witsml2__ScaleType {
	witsml2__ScaleType__linear = 0,
	witsml2__ScaleType__logarithmic = 1
};
#endif

/* eml2_1ForGsoap.h:18629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogIndexType (-1340)

/* witsml2:LogIndexType */
enum witsml2__LogIndexType {
	witsml2__LogIndexType__date_x0020time = 0,
	witsml2__LogIndexType__elapsed_x0020time = 1,
	witsml2__LogIndexType__length = 2,
	witsml2__LogIndexType__measured_x0020depth = 3,
	witsml2__LogIndexType__vertical_x0020depth = 4,
	witsml2__LogIndexType__other = 5
};
#endif

/* eml2_1ForGsoap.h:18670 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfConveyanceMethod (-1341)

/* witsml2:PerfConveyanceMethod */
enum witsml2__PerfConveyanceMethod {
	witsml2__PerfConveyanceMethod__slick_x0020line = 0,
	witsml2__PerfConveyanceMethod__tubing_x0020conveyed = 1,
	witsml2__PerfConveyanceMethod__wireline = 2
};
#endif

/* eml2_1ForGsoap.h:18684 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventClassType (-1342)

/* witsml2:EventClassType */
enum witsml2__EventClassType {
	witsml2__EventClassType__daily_x0020cost = 0,
	witsml2__EventClassType__daily_x0020report = 1,
	witsml2__EventClassType__failure_x0020_x0028downhole_x0020equipment_x0020only_x0029 = 2,
	witsml2__EventClassType__job = 3,
	witsml2__EventClassType__job_x0020plan_x0020_x0028phases_x0029 = 4,
	witsml2__EventClassType__mud_x0020attributes = 5,
	witsml2__EventClassType__npt_x0020_x0028lost_x0020time_x0020event_x0029 = 6,
	witsml2__EventClassType__time_x0020log_x0020_x0028time_x0020measure_x0029 = 7
};
#endif

/* eml2_1ForGsoap.h:18703 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionTypes (-1343)

/* witsml2:CasingConnectionTypes */
enum witsml2__CasingConnectionTypes {
	witsml2__CasingConnectionTypes__landed = 0,
	witsml2__CasingConnectionTypes__self_sealing_threaded = 1,
	witsml2__CasingConnectionTypes__welded = 2
};
#endif

/* eml2_1ForGsoap.h:18717 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionTypes (-1344)

/* witsml2:TubingConnectionTypes */
enum witsml2__TubingConnectionTypes {
	witsml2__TubingConnectionTypes__dogscompressionfit_notsealed = 0,
	witsml2__TubingConnectionTypes__landed = 1,
	witsml2__TubingConnectionTypes__latched = 2,
	witsml2__TubingConnectionTypes__radial = 3,
	witsml2__TubingConnectionTypes__selfsealing_threaded = 4,
	witsml2__TubingConnectionTypes__slipfit_sealed = 5,
	witsml2__TubingConnectionTypes__threaded = 6
};
#endif

/* eml2_1ForGsoap.h:18735 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionTypes (-1345)

/* witsml2:RodConnectionTypes */
enum witsml2__RodConnectionTypes {
	witsml2__RodConnectionTypes__eating_x0020nipple_cup = 0,
	witsml2__RodConnectionTypes__latched = 1,
	witsml2__RodConnectionTypes__seating_x0020nipple_mechanical = 2,
	witsml2__RodConnectionTypes__slipfit_x0020sealed = 3,
	witsml2__RodConnectionTypes__threaded = 4,
	witsml2__RodConnectionTypes__welded = 5
};
#endif

/* eml2_1ForGsoap.h:18752 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionTypes (-1346)

/* witsml2:OtherConnectionTypes */
enum witsml2__OtherConnectionTypes {
	witsml2__OtherConnectionTypes__cemented_in_place = 0,
	witsml2__OtherConnectionTypes__dogscompressionfit_sealed = 1
};
#endif

/* eml2_1ForGsoap.h:18765 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionFormType (-1347)

/* witsml2:ConnectionFormType */
enum witsml2__ConnectionFormType {
	witsml2__ConnectionFormType__box = 0,
	witsml2__ConnectionFormType__flange = 1,
	witsml2__ConnectionFormType__mandrel = 2,
	witsml2__ConnectionFormType__pin = 3,
	witsml2__ConnectionFormType__welded = 4
};
#endif

/* eml2_1ForGsoap.h:18781 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentType (-1348)

/* witsml2:EquipmentType */
enum witsml2__EquipmentType {
	witsml2__EquipmentType__bridge_x0020plug = 0,
	witsml2__EquipmentType__bull_x0020plug = 1,
	witsml2__EquipmentType__capillary_x0020tubing = 2,
	witsml2__EquipmentType__casing_x0020crossover = 3,
	witsml2__EquipmentType__casing_x0020hanger = 4,
	witsml2__EquipmentType__casing_x0020head = 5,
	witsml2__EquipmentType__casing_x0020liner_expandable = 6,
	witsml2__EquipmentType__casing_x0020shoe = 7,
	witsml2__EquipmentType__casing_x0020spool = 8,
	witsml2__EquipmentType__casing_x002fcasing_x0020liner = 9,
	witsml2__EquipmentType__cement_x0020_x0028behind_x0020casing_x0029 = 10,
	witsml2__EquipmentType__cement_x0020basket = 11,
	witsml2__EquipmentType__cement_x0020retainer = 12,
	witsml2__EquipmentType__cement_x0020squeeze = 13,
	witsml2__EquipmentType__cement_x0020stage_x0020tool = 14,
	witsml2__EquipmentType__chemical_x0020injection_x0020mandrel = 15,
	witsml2__EquipmentType__chemical_x0020injection_x0020valve = 16,
	witsml2__EquipmentType__corrosion_x0020coupon_x0020carrier = 17,
	witsml2__EquipmentType__dip_x0020tube = 18,
	witsml2__EquipmentType__downhole_x0020choke = 19,
	witsml2__EquipmentType__downhole_x0020sensor = 20,
	witsml2__EquipmentType__ESP_x0020assembly = 21,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020discharge = 22,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020intake = 23,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020base = 24,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020head = 25,
	witsml2__EquipmentType__ESP_x0020cable = 26,
	witsml2__EquipmentType__ESP_x0020gas_x0020handler = 27,
	witsml2__EquipmentType__ESP_x0020gas_x0020separator = 28,
	witsml2__EquipmentType__ESP_x0020lower_x0020pigtail = 29,
	witsml2__EquipmentType__ESP_x0020motor = 30,
	witsml2__EquipmentType__ESP_x0020motor_x0020base_x0020centralizer = 31,
	witsml2__EquipmentType__ESP_x0020motor_x0020flat_x0020cable = 32,
	witsml2__EquipmentType__ESP_x0020motor_x0020shroud = 33,
	witsml2__EquipmentType__ESP_x0020promotor = 34,
	witsml2__EquipmentType__ESP_x0020pump = 35,
	witsml2__EquipmentType__ESP_x0020pump_x0020discharge_x0020sensor_x0020sub = 36,
	witsml2__EquipmentType__ESP_x0020seal = 37,
	witsml2__EquipmentType__expansion_x0020joint = 38,
	witsml2__EquipmentType__external_x0020cementing_x0020port = 39,
	witsml2__EquipmentType__fill = 40,
	witsml2__EquipmentType__fish = 41,
	witsml2__EquipmentType__float_x0020collar = 42,
	witsml2__EquipmentType__float_x0020shoe_x002fguide_x0020shoe = 43,
	witsml2__EquipmentType__gas_x0020anchor = 44,
	witsml2__EquipmentType__gas_x0020lift_x0020mandrel = 45,
	witsml2__EquipmentType__gas_x0020lift_x0020valve = 46,
	witsml2__EquipmentType__gravel_x0020pack_x0020screen = 47,
	witsml2__EquipmentType__hydraulic_x0020pump = 48,
	witsml2__EquipmentType__injection_x0020mandrel = 49,
	witsml2__EquipmentType__injection_x0020valve = 50,
	witsml2__EquipmentType__junk_x0020in_x0020wellbore = 51,
	witsml2__EquipmentType__landing_x0020collar = 52,
	witsml2__EquipmentType__liner_x0020entry_x0020guide = 53,
	witsml2__EquipmentType__liner_x0020hanger = 54,
	witsml2__EquipmentType__mule_x0020shoe = 55,
	witsml2__EquipmentType__notched_x0020collar = 56,
	witsml2__EquipmentType__on_off_x0020tool = 57,
	witsml2__EquipmentType__overshot = 58,
	witsml2__EquipmentType__packer = 59,
	witsml2__EquipmentType__packer_x0020plug = 60,
	witsml2__EquipmentType__packer_multiple_x0020strings = 61,
	witsml2__EquipmentType__packoff_x0020_x0028tubing_x0029 = 62,
	witsml2__EquipmentType__pcp_flex_x0020shaft_x0020intake = 63,
	witsml2__EquipmentType__pcp_gear_x0020reducer_x0020_x0028subsurface_x0029 = 64,
	witsml2__EquipmentType__pcp_no_x0020turn_x0020tool_x002ftorque_x0020anchor = 'A',
	witsml2__EquipmentType__pcp_rotor = 'B',
	witsml2__EquipmentType__pcp_stator = 'C',
	witsml2__EquipmentType__pcp_tag_x0020bar = 'D',
	witsml2__EquipmentType__plug_x0020__x0020cement = 'E',
	witsml2__EquipmentType__plug_x0020__x0020mud = 'F',
	witsml2__EquipmentType__plunger_x0020lift_x0020ball = 'G',
	witsml2__EquipmentType__plunger_x0020lift_x0020bottom_x0020hole_x0020bumper_x0020assembly = 'H',
	witsml2__EquipmentType__plunger_x0020lift_x0020bumper_x0020spring = 'I',
	witsml2__EquipmentType__plunger_x0020lift_x0020collar_x0020stop = 'J',
	witsml2__EquipmentType__plunger_x0020lift_x0020plunger = 'K',
	witsml2__EquipmentType__polished_x0020rod = 'L',
	witsml2__EquipmentType__polished_x0020rod_x0020liner = 'M',
	witsml2__EquipmentType__ported_x0020collar = 'N',
	witsml2__EquipmentType__profile_x0020nipple = 'O',
	witsml2__EquipmentType__profile_x0020nipple_x0020plug = 'P',
	witsml2__EquipmentType__pump_out_x0020plug = 'Q',
	witsml2__EquipmentType__sand_x0020screen_tubing = 'R',
	witsml2__EquipmentType__sand_x0020separator = 'S',
	witsml2__EquipmentType__screen_x0020liner_x002finsert = 'T',
	witsml2__EquipmentType__seal_x0020assembly = 'U',
	witsml2__EquipmentType__seal_x0020bore_x0020extension = 'V',
	witsml2__EquipmentType__seat_x0020nipple_x002fshoe = 'W',
	witsml2__EquipmentType__shear_x0020tool = 'X',
	witsml2__EquipmentType__sliding_x0020sleeve = 'Y',
	witsml2__EquipmentType__steam_x0020cup_x0020mandrel = 'Z',
	witsml2__EquipmentType__steam_x0020deflectors = 91,
	witsml2__EquipmentType__strainer_x0020nipple = 92,
	witsml2__EquipmentType__subsurface_x0020safety_x0020valve = 93,
	witsml2__EquipmentType__sucker_x0020rod = 94,
	witsml2__EquipmentType__sucker_x0020rod_x0020backoff_x0020coupling = 95,
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_insert = 96,
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_jacket = 'a',
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020barrel = 'b',
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020plunger = 'c',
	witsml2__EquipmentType__sucker_x0020rod_x0020sub = 'd',
	witsml2__EquipmentType__sucker_x0020rod_continuous = 'e',
	witsml2__EquipmentType__sucker_x0020rod_ribbon = 'f',
	witsml2__EquipmentType__sucker_x0020rod_sinker_x0020bar = 'g',
	witsml2__EquipmentType__tcp_x0020gun = 'h',
	witsml2__EquipmentType__tubing = 'i',
	witsml2__EquipmentType__tubing_x0020_x0028coiled_x0029 = 'j',
	witsml2__EquipmentType__tubing_x0020anchor_x002fcatcher = 'k',
	witsml2__EquipmentType__tubing_x0020crossover = 'l',
	witsml2__EquipmentType__tubing_x0020drain = 'm',
	witsml2__EquipmentType__tubing_x0020hanger = 'n',
	witsml2__EquipmentType__tubing_x0020head_x0020_x0028spool_x0029 = 'o',
	witsml2__EquipmentType__tubing_x0020purge_x0020check_x0020valve = 'p',
	witsml2__EquipmentType__tubing_x0020sub = 'q',
	witsml2__EquipmentType__wellbore_x0020notes = 'r',
	witsml2__EquipmentType__whipstock = 's',
	witsml2__EquipmentType__wireline_x0020re_entry_x0020guide_x0020_x0028bell_x0020collar_x0029 = 't',
	witsml2__EquipmentType__y_tool = 'u'
};
#endif

/* eml2_1ForGsoap.h:18910 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GradeType (-1349)

/* witsml2:GradeType */
enum witsml2__GradeType {
	witsml2__GradeType__35 = 35,
	witsml2__GradeType__45 = 45,
	witsml2__GradeType__46 = 46,
	witsml2__GradeType__50 = 50,
	witsml2__GradeType__75 = 'K',
	witsml2__GradeType__95 = 95,
	witsml2__GradeType__13CR = 96,
	witsml2__GradeType__13CR__x002080 = 'a',
	witsml2__GradeType__13CR__x002085 = 'b',
	witsml2__GradeType__13CR__x002095 = 'c',
	witsml2__GradeType__13CR_110 = 'd',
	witsml2__GradeType__620C = 'e',
	witsml2__GradeType__750N = 'f',
	witsml2__GradeType__75A = 'g',
	witsml2__GradeType__780M = 'h',
	witsml2__GradeType__960M = 'i',
	witsml2__GradeType__970N = 'j',
	witsml2__GradeType__A53 = 'k',
	witsml2__GradeType__A53A = 'l',
	witsml2__GradeType__A53B = 'm',
	witsml2__GradeType__Armco_95 = 'n',
	witsml2__GradeType__B = 'o',
	witsml2__GradeType__C = 'p',
	witsml2__GradeType__C_110 = 'q',
	witsml2__GradeType__C_75 = 'r',
	witsml2__GradeType__C_90 = 's',
	witsml2__GradeType__C_95 = 't',
	witsml2__GradeType__D = 'u',
	witsml2__GradeType__DE = 'v',
	witsml2__GradeType__DER = 'w',
	witsml2__GradeType__DR = 'x',
	witsml2__GradeType__DWR = 'y',
	witsml2__GradeType__E = 'z',
	witsml2__GradeType__E_75 = 123,
	witsml2__GradeType__EL = 124,
	witsml2__GradeType__F_25 = 125,
	witsml2__GradeType__FG = 126,
	witsml2__GradeType__FS_80 = 127,
	witsml2__GradeType__FSS_95 = 128,
	witsml2__GradeType__G = 129,
	witsml2__GradeType__G_105 = 130,
	witsml2__GradeType__GT_80S = 131,
	witsml2__GradeType__H2S_90 = 132,
	witsml2__GradeType__H2S_95 = 133,
	witsml2__GradeType__H_40 = 134,
	witsml2__GradeType__HC_95 = 135,
	witsml2__GradeType__HCK_55 = 136,
	witsml2__GradeType__HCL_80 = 137,
	witsml2__GradeType__HCN_80 = 138,
	witsml2__GradeType__HCP_110 = 139,
	witsml2__GradeType__HCQ_125 = 140,
	witsml2__GradeType__HO_70 = 141,
	witsml2__GradeType__HS = 142,
	witsml2__GradeType__J_20 = 143,
	witsml2__GradeType__J_55 = 144,
	witsml2__GradeType__K = 145,
	witsml2__GradeType__K_40 = 146,
	witsml2__GradeType__K_55 = 147,
	witsml2__GradeType__KD = 148,
	witsml2__GradeType__KD_63 = 149,
	witsml2__GradeType__L_80 = 150,
	witsml2__GradeType__LS_140 = 151,
	witsml2__GradeType__LS_50 = 152,
	witsml2__GradeType__LS_65 = 153,
	witsml2__GradeType__M_65 = 154,
	witsml2__GradeType__M_90 = 155,
	witsml2__GradeType__M_95 = 156,
	witsml2__GradeType__MAV_50 = 157,
	witsml2__GradeType__MD_56 = 158,
	witsml2__GradeType__MMS = 159,
	witsml2__GradeType__N_105 = 160,
	witsml2__GradeType__N_23 = 161,
	witsml2__GradeType__N_30 = 162,
	witsml2__GradeType__N_40 = 163,
	witsml2__GradeType__N_54 = 164,
	witsml2__GradeType__N_75 = 165,
	witsml2__GradeType__N_78 = 166,
	witsml2__GradeType__N_80 = 167,
	witsml2__GradeType__N_90 = 168,
	witsml2__GradeType__N_96 = 169,
	witsml2__GradeType__N_97 = 170,
	witsml2__GradeType__P_105 = 171,
	witsml2__GradeType__P_110 = 172,
	witsml2__GradeType__PCP_x0020_x0020900 = 173,
	witsml2__GradeType__PCP_x00201000 = 174,
	witsml2__GradeType__PCP_x00201500 = 175,
	witsml2__GradeType__PCP_x00202500 = 176,
	witsml2__GradeType__PH_6 = 177,
	witsml2__GradeType__Plus = 178,
	witsml2__GradeType__Q_125 = 179,
	witsml2__GradeType__QT_1000 = 180,
	witsml2__GradeType__QT_1200 = 181,
	witsml2__GradeType__QT_700 = 182,
	witsml2__GradeType__QT_800 = 183,
	witsml2__GradeType__QT_900 = 184,
	witsml2__GradeType__S = 185,
	witsml2__GradeType__S_135 = 186,
	witsml2__GradeType__S_59 = 187,
	witsml2__GradeType__S_60 = 188,
	witsml2__GradeType__S_67 = 189,
	witsml2__GradeType__S_80 = 190,
	witsml2__GradeType__S_87 = 191,
	witsml2__GradeType__S_88 = 192,
	witsml2__GradeType__S_95 = 193,
	witsml2__GradeType__SC_90 = 194,
	witsml2__GradeType__SE = 195,
	witsml2__GradeType__SER = 196,
	witsml2__GradeType__SM = 197,
	witsml2__GradeType__SOO_95 = 198,
	witsml2__GradeType__Stainless = 199,
	witsml2__GradeType__SWR = 200,
	witsml2__GradeType__T = 201,
	witsml2__GradeType__T_66 = 202,
	witsml2__GradeType__T_95 = 203,
	witsml2__GradeType__T_D61 = 204,
	witsml2__GradeType__T_D63 = 205,
	witsml2__GradeType__T_K65 = 206,
	witsml2__GradeType__UHS = 207,
	witsml2__GradeType__USS_125 = 208,
	witsml2__GradeType__USS_140 = 209,
	witsml2__GradeType__USS_50 = 210,
	witsml2__GradeType__USS_95 = 211,
	witsml2__GradeType__V_150 = 212,
	witsml2__GradeType__WC_50 = 213,
	witsml2__GradeType__X = 214,
	witsml2__GradeType__X_140 = 215,
	witsml2__GradeType__X_42 = 216,
	witsml2__GradeType__X_46 = 217,
	witsml2__GradeType__X_52 = 218,
	witsml2__GradeType__X_56 = 219,
	witsml2__GradeType__X_60 = 220,
	witsml2__GradeType__X_70 = 221,
	witsml2__GradeType__X_95 = 222,
	witsml2__GradeType__XD = 223
};
#endif

/* eml2_1ForGsoap.h:19055 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeType (-1350)

/* witsml2:BoreholeType */
enum witsml2__BoreholeType {
	witsml2__BoreholeType__cavern = 0,
	witsml2__BoreholeType__cavity = 1,
	witsml2__BoreholeType__normalborehole = 2,
	witsml2__BoreholeType__underream = 3
};
#endif

/* eml2_1ForGsoap.h:19070 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Coating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Coating (-1351)

/* witsml2:Coating */
enum witsml2__Coating {
	witsml2__Coating__bare = 0,
	witsml2__Coating__carbonnitrided = 1,
	witsml2__Coating__carburized = 2,
	witsml2__Coating__carburized_hardened = 3,
	witsml2__Coating__cementlined = 4,
	witsml2__Coating__chrome = 5,
	witsml2__Coating__chrome_plated = 6,
	witsml2__Coating__chromeplated_grooved = 7,
	witsml2__Coating__chromeplated_heavy = 8,
	witsml2__Coating__corrosion_x0020coating = 9,
	witsml2__Coating__dblgalv = 10,
	witsml2__Coating__duolin20wr = 11,
	witsml2__Coating__duoline = 12,
	witsml2__Coating__duoline10 = 13,
	witsml2__Coating__duoline20 = 14,
	witsml2__Coating__epdm = 15,
	witsml2__Coating__fiberglass_lined = 16,
	witsml2__Coating__galvanized = 17,
	witsml2__Coating__hardened = 18,
	witsml2__Coating__hard_lined = 19,
	witsml2__Coating__ins = 20,
	witsml2__Coating__ipc = 21,
	witsml2__Coating__ipc_epoxy = 22,
	witsml2__Coating__ipc_epxthk = 23,
	witsml2__Coating__ipc_epxthn = 24,
	witsml2__Coating__ipc_nylon = 25,
	witsml2__Coating__ipc_rwrap = 26,
	witsml2__Coating__ipc_s505 = 27,
	witsml2__Coating__ipc_s650 = 28,
	witsml2__Coating__ipc_tk70 = 29,
	witsml2__Coating__ipc_tk75 = 30,
	witsml2__Coating__lp = 31,
	witsml2__Coating__moly = 32,
	witsml2__Coating__mtr = 33,
	witsml2__Coating__n_x002fa = 34,
	witsml2__Coating__nickel_carbide = 35,
	witsml2__Coating__nickel_plated = 36,
	witsml2__Coating__nitrided = 37,
	witsml2__Coating__nitrile = 38,
	witsml2__Coating__pap = 39,
	witsml2__Coating__pelined = 40,
	witsml2__Coating__phosphate = 41,
	witsml2__Coating__phosphorus = 42,
	witsml2__Coating__plastic = 43,
	witsml2__Coating__plunger_lubricant = 44,
	witsml2__Coating__polished_rodliner = 45,
	witsml2__Coating__polypropylene = 46,
	witsml2__Coating__ppw_x002fnitrl = 47,
	witsml2__Coating__pvclined = 48,
	witsml2__Coating__rodguide_1 = 49,
	witsml2__Coating__rodguide_2 = 50,
	witsml2__Coating__rodguide_2_x002e = 51,
	witsml2__Coating__rodguide_3 = 52,
	witsml2__Coating__rodguide_4 = 53,
	witsml2__Coating__rodguide_5 = 54,
	witsml2__Coating__rodguide_6 = 55,
	witsml2__Coating__rodguide_7 = 56,
	witsml2__Coating__rodguide_fx = 57,
	witsml2__Coating__rodguide_so = 58,
	witsml2__Coating__rodguide_so1 = 59,
	witsml2__Coating__rodguide_so2 = 60,
	witsml2__Coating__rodguide_so3 = 61,
	witsml2__Coating__rodguide_so4 = 62,
	witsml2__Coating__rodguide_so5 = 63,
	witsml2__Coating__rodguide_so6 = 64,
	witsml2__Coating__rodguide_so8 = 'A',
	witsml2__Coating__rodguide_sp = 'B',
	witsml2__Coating__spray_metal = 'C',
	witsml2__Coating__spray_metal_monel = 'D',
	witsml2__Coating__spraymetal_monel = 'E',
	witsml2__Coating__spraymetal_nickel = 'F',
	witsml2__Coating__spraymetal_od_x002fnickelplated_id = 'G',
	witsml2__Coating__spraymetal_steel = 'H',
	witsml2__Coating__spraymetal_thick = 'I',
	witsml2__Coating__sslined = 'J',
	witsml2__Coating__teflon = 'K',
	witsml2__Coating__teflon_red = 'L',
	witsml2__Coating__teflon_tan = 'M',
	witsml2__Coating__teflon_yellow = 'N',
	witsml2__Coating__thermo = 'O',
	witsml2__Coating__tk_4 = 'P',
	witsml2__Coating__tk_99 = 'Q',
	witsml2__Coating__tuffr = 'R',
	witsml2__Coating__tungsten_x0020plated = 'S',
	witsml2__Coating__zincplated = 'T'
};
#endif

/* eml2_1ForGsoap.h:19166 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringType (-1352)

/* witsml2:DownholeStringType */
enum witsml2__DownholeStringType {
	witsml2__DownholeStringType__casing = 0,
	witsml2__DownholeStringType__others = 1,
	witsml2__DownholeStringType__rod = 2,
	witsml2__DownholeStringType__tubing = 3,
	witsml2__DownholeStringType__wellhead = 4
};
#endif

/* eml2_1ForGsoap.h:19182 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SubStringType (-1353)

/* witsml2:SubStringType */
enum witsml2__SubStringType {
	witsml2__SubStringType__abandoned_x0020junk_x002ffish = 0,
	witsml2__SubStringType__capillary_x0020string_x0020_x0028inside_x0020tubing_x0029 = 1,
	witsml2__SubStringType__capillary_x0020string_x0020_x0028tubing_x002fcasing_x0020annulus_x0029 = 2,
	witsml2__SubStringType__conductor_x0020casing = 3,
	witsml2__SubStringType__drill_x0020string = 4,
	witsml2__SubStringType__flowline = 5,
	witsml2__SubStringType__geological_x0020objects = 6,
	witsml2__SubStringType__inner_x0020liner = 7,
	witsml2__SubStringType__intermediate_x0020casing = 8,
	witsml2__SubStringType__production_x0020casing = 9,
	witsml2__SubStringType__production_x0020liner = 10,
	witsml2__SubStringType__protective_x0020casing = 11,
	witsml2__SubStringType__surface_x0020casing = 12,
	witsml2__SubStringType__wellbore_x0020notes = 13,
	witsml2__SubStringType__y_tool_x0020string = 14
};
#endif

/* eml2_1ForGsoap.h:19208 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyType (-1354)

/* witsml2:GeologyType */
enum witsml2__GeologyType {
	witsml2__GeologyType__aquifer = 0,
	witsml2__GeologyType__reservoir = 1
};
#endif

/* eml2_1ForGsoap.h:19221 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationToolType (-1355)

/* witsml2:PerforationToolType */
enum witsml2__PerforationToolType {
	witsml2__PerforationToolType__casing_x0020gun = 0,
	witsml2__PerforationToolType__coiled_x0020tubing_x0020jet_x0020tool = 1,
	witsml2__PerforationToolType__drilled = 2,
	witsml2__PerforationToolType__mandrel = 3,
	witsml2__PerforationToolType__n_x002fa = 4,
	witsml2__PerforationToolType__slots_machine_x0020cut = 5,
	witsml2__PerforationToolType__slots_undercut = 6,
	witsml2__PerforationToolType__strip_x0020gun = 7,
	witsml2__PerforationToolType__tcp_x0020gun = 8,
	witsml2__PerforationToolType__through_x0020tubing_x0020gun = 9
};
#endif

/* eml2_1ForGsoap.h:19242 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraftType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraftType (-1356)

/* witsml2:SupportCraftType */
enum witsml2__SupportCraftType {
	witsml2__SupportCraftType__barge = 0,
	witsml2__SupportCraftType__standby_x0020boat = 1,
	witsml2__SupportCraftType__helicopter = 2,
	witsml2__SupportCraftType__supply_x0020boat = 3,
	witsml2__SupportCraftType__truck = 4,
	witsml2__SupportCraftType__crew_x0020vehicle = 5,
	witsml2__SupportCraftType__tug_x0020boat = 6
};
#endif

/* eml2_1ForGsoap.h:19260 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ScrType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ScrType (-1357)

/* witsml2:ScrType */
enum witsml2__ScrType {
	witsml2__ScrType__string_x0020annulus = 0,
	witsml2__ScrType__string_x0020kill_x0020line = 1,
	witsml2__ScrType__string_x0020choke_x0020line = 2,
	witsml2__ScrType__unknown = 3
};
#endif

/* eml2_1ForGsoap.h:19279 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOpType (-1358)

/* witsml2:PumpOpType */
enum witsml2__PumpOpType {
	witsml2__PumpOpType__drilling = 0,
	witsml2__PumpOpType__reaming = 1,
	witsml2__PumpOpType__circulating = 2,
	witsml2__PumpOpType__slow_x0020pump = 3
};
#endif

/* eml2_1ForGsoap.h:19294 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AziRef (-1359)

/* witsml2:AziRef */
enum witsml2__AziRef {
	witsml2__AziRef__magnetic_x0020north = 0,
	witsml2__AziRef__grid_x0020north = 1,
	witsml2__AziRef__true_x0020north = 2
};
#endif

/* eml2_1ForGsoap.h:19320 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationType (-1360)

/* witsml2:TrajStationType */
enum witsml2__TrajStationType {
	witsml2__TrajStationType__azimuth_x0020on_x0020plane = 0,
	witsml2__TrajStationType__buildrate_x0020to_x0020delta_MD = 1,
	witsml2__TrajStationType__buildrate_x0020to_x0020INCL = 2,
	witsml2__TrajStationType__buildrate_x0020to_x0020MD = 3,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020AZI = 4,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020delta_MD = 5,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL = 6,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL_x0020and_x0020AZI = 7,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020MD = 8,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020TVD = 9,
	witsml2__TrajStationType__buildrate_x0020TVD = 10,
	witsml2__TrajStationType__casing_x0020MD = 11,
	witsml2__TrajStationType__casing_x0020TVD = 12,
	witsml2__TrajStationType__DLS = 13,
	witsml2__TrajStationType__DLS_x0020to_x0020AZI_x0020and_x0020MD = 14,
	witsml2__TrajStationType__DLS_x0020to_x0020AZI_TVD = 15,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL = 16,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020AZI = 17,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020MD = 18,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020TVD = 19,
	witsml2__TrajStationType__DLS_x0020to_x0020NS = 20,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020AZI = 21,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020delta_MD = 22,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL = 23,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL_AZI = 24,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020MD = 25,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020TVD = 26,
	witsml2__TrajStationType__formation_x0020MD = 27,
	witsml2__TrajStationType__formation_x0020TVD = 28,
	witsml2__TrajStationType__hold_x0020to_x0020delta_MD = 29,
	witsml2__TrajStationType__hold_x0020to_x0020MD = 30,
	witsml2__TrajStationType__hold_x0020to_x0020TVD = 31,
	witsml2__TrajStationType__INCL_x0020AZI_x0020and_x0020TVD = 32,
	witsml2__TrajStationType__interpolated = 33,
	witsml2__TrajStationType__marker_x0020MD = 34,
	witsml2__TrajStationType__marker_x0020TVD = 35,
	witsml2__TrajStationType__MD_x0020and_x0020INCL = 36,
	witsml2__TrajStationType__MD_x0020INCL_x0020and_x0020AZI = 37,
	witsml2__TrajStationType__N_x0020E_x0020and_x0020TVD = 38,
	witsml2__TrajStationType__NS_x0020EW_x0020and_x0020TVD = 39,
	witsml2__TrajStationType__target_x0020center = 40,
	witsml2__TrajStationType__target_x0020offset = 41,
	witsml2__TrajStationType__tie_x0020in_x0020point = 42,
	witsml2__TrajStationType__turnrate_x0020to_x0020AZI = 43,
	witsml2__TrajStationType__turnrate_x0020to_x0020delta_MD = 44,
	witsml2__TrajStationType__turnrate_x0020to_x0020MD = 45,
	witsml2__TrajStationType__turnrate_x0020to_x0020TVD = 46,
	witsml2__TrajStationType__unknown = 47
};
#endif

/* eml2_1ForGsoap.h:19571 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TypeSurveyTool (-1361)

/* witsml2:TypeSurveyTool */
enum witsml2__TypeSurveyTool {
	witsml2__TypeSurveyTool__gyroscopic_x0020inertial = 0,
	witsml2__TypeSurveyTool__gyroscopic_x0020MWD = 1,
	witsml2__TypeSurveyTool__gyroscopic_x0020north_x0020seeking = 2,
	witsml2__TypeSurveyTool__magnetic_x0020multiple_shot = 3,
	witsml2__TypeSurveyTool__magnetic_x0020MWD = 4,
	witsml2__TypeSurveyTool__magnetic_x0020single_shot = 5
};
#endif

/* eml2_1ForGsoap.h:19588 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStnCalcAlgorithm (-1362)

/* witsml2:TrajStnCalcAlgorithm */
enum witsml2__TrajStnCalcAlgorithm {
	witsml2__TrajStnCalcAlgorithm__average_x0020angle = 0,
	witsml2__TrajStnCalcAlgorithm__balanced_x0020tangential = 1,
	witsml2__TrajStnCalcAlgorithm__constant_x0020tool_x0020face = 2,
	witsml2__TrajStnCalcAlgorithm__custom = 3,
	witsml2__TrajStnCalcAlgorithm__inertial = 4,
	witsml2__TrajStnCalcAlgorithm__minimum_x0020curvature = 5,
	witsml2__TrajStnCalcAlgorithm__radius_x0020of_x0020curvature = 6,
	witsml2__TrajStnCalcAlgorithm__tangential = 7
};
#endif

/* eml2_1ForGsoap.h:19607 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationStatus (-1363)

/* witsml2:TrajStationStatus */
enum witsml2__TrajStationStatus {
	witsml2__TrajStationStatus__open = 0,
	witsml2__TrajStationStatus__rejected = 1,
	witsml2__TrajStationStatus__position = 2
};
#endif

/* eml2_1ForGsoap.h:19633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyToolOperatingMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyToolOperatingMode (-1364)

/* witsml2:SurveyToolOperatingMode */
enum witsml2__SurveyToolOperatingMode {
	witsml2__SurveyToolOperatingMode__continuous_x0020xy = 0,
	witsml2__SurveyToolOperatingMode__continuous_x0020xyz = 1,
	witsml2__SurveyToolOperatingMode__continuous_x0020z = 2,
	witsml2__SurveyToolOperatingMode__unknown = 3,
	witsml2__SurveyToolOperatingMode__stationary = 4
};
#endif

/* eml2_1ForGsoap.h:19653 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorModelMisalignmentMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorModelMisalignmentMode (-1365)

/* witsml2:ErrorModelMisalignmentMode */
enum witsml2__ErrorModelMisalignmentMode {
	witsml2__ErrorModelMisalignmentMode__1 = 1,
	witsml2__ErrorModelMisalignmentMode__2 = 2,
	witsml2__ErrorModelMisalignmentMode__3 = 3,
	witsml2__ErrorModelMisalignmentMode__unknown = 4
};
#endif

/* eml2_1ForGsoap.h:19680 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorPropagationMode (-1366)

/* witsml2:ErrorPropagationMode */
enum witsml2__ErrorPropagationMode {
	witsml2__ErrorPropagationMode__B = 'B',
	witsml2__ErrorPropagationMode__R = 'R',
	witsml2__ErrorPropagationMode__S = 'S',
	witsml2__ErrorPropagationMode__W = 'W',
	witsml2__ErrorPropagationMode__G = 'G'
};
#endif

/* eml2_1ForGsoap.h:19716 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AuthorizationStatus (-1367)

/* witsml2:AuthorizationStatus */
enum witsml2__AuthorizationStatus {
	witsml2__AuthorizationStatus__draft = 0,
	witsml2__AuthorizationStatus__authorized = 1,
	witsml2__AuthorizationStatus__superseded = 2,
	witsml2__AuthorizationStatus__withdrawn = 3
};
#endif

/* eml2_1ForGsoap.h:19747 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigType (-1368)

/* witsml2:RigType */
enum witsml2__RigType {
	witsml2__RigType__barge = 0,
	witsml2__RigType__coiled_x0020tubing = 1,
	witsml2__RigType__floater = 2,
	witsml2__RigType__jackup = 3,
	witsml2__RigType__land = 4,
	witsml2__RigType__platform = 5,
	witsml2__RigType__semi_submersible = 6
};
#endif

/* eml2_1ForGsoap.h:19793 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BopType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BopType (-1369)

/* witsml2:BopType */
enum witsml2__BopType {
	witsml2__BopType__annular_x0020preventer = 0,
	witsml2__BopType__shear_x0020ram = 1,
	witsml2__BopType__blind_x0020ram = 2,
	witsml2__BopType__pipe_x0020ram = 3,
	witsml2__BopType__drilling_x0020spool = 4,
	witsml2__BopType__flexible_x0020joint = 5,
	witsml2__BopType__connector = 6
};
#endif

/* eml2_1ForGsoap.h:19811 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PitType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PitType (-1370)

/* witsml2:PitType */
enum witsml2__PitType {
	witsml2__PitType__bulk = 0,
	witsml2__PitType__chemical = 1,
	witsml2__PitType__drilling = 2,
	witsml2__PitType__mix = 3,
	witsml2__PitType__mud_x0020cleaning = 4,
	witsml2__PitType__sand_x0020trap = 5,
	witsml2__PitType__slug = 6,
	witsml2__PitType__storage = 7,
	witsml2__PitType__surge_x0020tank = 8,
	witsml2__PitType__trip_x0020tank = 9
};
#endif

/* eml2_1ForGsoap.h:19836 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpType (-1371)

/* witsml2:PumpType */
enum witsml2__PumpType {
	witsml2__PumpType__centrifugal = 0,
	witsml2__PumpType__duplex = 1,
	witsml2__PumpType__triplex = 2
};
#endif

/* eml2_1ForGsoap.h:19862 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurfEquipType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurfEquipType (-1372)

/* witsml2:SurfEquipType */
enum witsml2__SurfEquipType {
	witsml2__SurfEquipType__IADC = 0,
	witsml2__SurfEquipType__custom = 1,
	witsml2__SurfEquipType__coiled_x0020tubing = 2,
	witsml2__SurfEquipType__unknown = 3
};
#endif

/* eml2_1ForGsoap.h:19881 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DerrickType (-1373)

/* witsml2:DerrickType */
enum witsml2__DerrickType {
	witsml2__DerrickType__double_ = 0,
	witsml2__DerrickType__quadruple = 1,
	witsml2__DerrickType__slant = 2,
	witsml2__DerrickType__triple = 3
};
#endif

/* eml2_1ForGsoap.h:19912 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrawWorksType (-1374)

/* witsml2:DrawWorksType */
enum witsml2__DrawWorksType {
	witsml2__DrawWorksType__mechanical = 0,
	witsml2__DrawWorksType__standard_x0020electric = 1,
	witsml2__DrawWorksType__diesel_x0020electric = 2,
	witsml2__DrawWorksType__ram_x0020rig = 3
};
#endif

/* eml2_1ForGsoap.h:19927 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DriveType (-1375)

/* witsml2:DriveType */
enum witsml2__DriveType {
	witsml2__DriveType__coiled_x0020tubing = 0,
	witsml2__DriveType__rotary_x0020kelly_x0020drive = 1,
	witsml2__DriveType__top_x0020drive = 2
};
#endif

/* eml2_1ForGsoap.h:19953 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskType (-1376)

/* witsml2:RiskType */
enum witsml2__RiskType {
	witsml2__RiskType__risk = 0,
	witsml2__RiskType__event = 1,
	witsml2__RiskType__near_x0020miss = 2,
	witsml2__RiskType__best_x0020practice = 3,
	witsml2__RiskType__lessons_x0020learned = 4,
	witsml2__RiskType__other = 5
};
#endif

/* eml2_1ForGsoap.h:19970 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskCategory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskCategory (-1377)

/* witsml2:RiskCategory */
enum witsml2__RiskCategory {
	witsml2__RiskCategory__hydraulics = 0,
	witsml2__RiskCategory__mechanical = 1,
	witsml2__RiskCategory__time_x0020related = 2,
	witsml2__RiskCategory__wellbore_x0020stability = 3,
	witsml2__RiskCategory__directional_x0020drilling = 4,
	witsml2__RiskCategory__bit = 5,
	witsml2__RiskCategory__equipment_x0020failure = 6,
	witsml2__RiskCategory__completion = 7,
	witsml2__RiskCategory__casing = 8,
	witsml2__RiskCategory__other = 9,
	witsml2__RiskCategory__HSE = 10
};
#endif

/* eml2_1ForGsoap.h:20000 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskSubCategory (-1378)

/* witsml2:RiskSubCategory */
enum witsml2__RiskSubCategory {
	witsml2__RiskSubCategory__gas_x0020kick = 0,
	witsml2__RiskSubCategory__shallow_x0020water_x0020influx = 1,
	witsml2__RiskSubCategory__other_x0020influx_x0020or_x0020kicks = 2,
	witsml2__RiskSubCategory__loss_x0020circulation = 3,
	witsml2__RiskSubCategory__poor_x0020hole_x0020cleaning = 4,
	witsml2__RiskSubCategory__good_x0020hole_x0020cleaning_x0020at_x0020high_x0020ROP = 5,
	witsml2__RiskSubCategory__high_x0020mud_x0020weight = 6,
	witsml2__RiskSubCategory__special_x0020additives_x0020needed = 7,
	witsml2__RiskSubCategory__gumbo_x0020problems = 8,
	witsml2__RiskSubCategory__high_x0020ECD_x0020__x0020rheology_x0020related = 9,
	witsml2__RiskSubCategory__excessive_x0020circulation = 10,
	witsml2__RiskSubCategory__performing_x0020a_x0020kill = 11,
	witsml2__RiskSubCategory__mud_x0020weight_x0020change = 12,
	witsml2__RiskSubCategory__excessive_x0020pipe_x0020cement_x0020scaling = 13,
	witsml2__RiskSubCategory__pit_x0020gain_x0020or_x0020loss = 14,
	witsml2__RiskSubCategory__mud_x0020stability_x0020problems = 15,
	witsml2__RiskSubCategory__shallow_x0020gas_x0020flow = 16,
	witsml2__RiskSubCategory__twist_x0020off = 17,
	witsml2__RiskSubCategory__stuck_x0020pipe = 18,
	witsml2__RiskSubCategory__wireline_x0020stuck_x0020in_x0020hole = 19,
	witsml2__RiskSubCategory__stick_x0020and_x0020slip = 20,
	witsml2__RiskSubCategory__vibration_x0020__x0020axial = 21,
	witsml2__RiskSubCategory__vibration_x0020__x0020torsional = 22,
	witsml2__RiskSubCategory__vibration_x0020__x0020transverse = 23,
	witsml2__RiskSubCategory__vibration_x0020unknown_x0020or_x0020rough_x0020drilling = 24,
	witsml2__RiskSubCategory__uneven_x0020wear_x0020of_x0020BHA = 25,
	witsml2__RiskSubCategory__uneven_x0020wear_x0020of_x0020drillstring = 26,
	witsml2__RiskSubCategory__excessive_x0020torque = 27,
	witsml2__RiskSubCategory__excessive_x0020drag = 28,
	witsml2__RiskSubCategory__reaming_x0020greater_x0020than_x00202_x0020hours = 29,
	witsml2__RiskSubCategory__washouts = 30,
	witsml2__RiskSubCategory__tight_x0020hole_x0020or_x0020overPull = 31,
	witsml2__RiskSubCategory__failed_x0020inspections_x0020or_x0020fatigue_x0020wear = 32,
	witsml2__RiskSubCategory__mechanical = 33,
	witsml2__RiskSubCategory__drilling_x0020greater_x0020than_x00201000_x0020feet_x002fday = 34,
	witsml2__RiskSubCategory__drilling_x0020greater_x0020than_x00202000_x0020feet_x002fday = 35,
	witsml2__RiskSubCategory__drilling_x0020less_x0020than_x002020_x0020feet_x002fday = 36,
	witsml2__RiskSubCategory__trips_x0020greater_x0020than_x002024_x0020hours = 37,
	witsml2__RiskSubCategory__excessive_x0020time_x0020for_x0020BHA_x0020makeup = 38,
	witsml2__RiskSubCategory__waiting_x0020on_x0020decisions = 39,
	witsml2__RiskSubCategory__waiting_x0020on_x0020weather = 40,
	witsml2__RiskSubCategory__waiting_x0020on_x0020tools = 41,
	witsml2__RiskSubCategory__sloughing_x0020or_x0020packoffs = 42,
	witsml2__RiskSubCategory__ballooning = 43,
	witsml2__RiskSubCategory__fracture_x0020problems = 44,
	witsml2__RiskSubCategory__unstable_x0020zones = 45,
	witsml2__RiskSubCategory__formation_x0020integrity_x0020test = 46,
	witsml2__RiskSubCategory__leak_off_x0020test = 47,
	witsml2__RiskSubCategory__tectonics = 48,
	witsml2__RiskSubCategory__pore_x0020pressure = 49,
	witsml2__RiskSubCategory__breakouts = 50,
	witsml2__RiskSubCategory__bed_x0020parallel = 51,
	witsml2__RiskSubCategory__wellbore_x0020stability = 52,
	witsml2__RiskSubCategory__excessive_x0020doglegs = 53,
	witsml2__RiskSubCategory__sidetrack = 54,
	witsml2__RiskSubCategory__BHA_x0020change_x0020for_x0020directional = 55,
	witsml2__RiskSubCategory__wrong_x0020total_x0020flow_x0020area = 56,
	witsml2__RiskSubCategory__well_x0020collision_x0020__x0020actual = 57,
	witsml2__RiskSubCategory__well_x0020collision_x0020__x0020technical = 58,
	witsml2__RiskSubCategory__geosteering = 59,
	witsml2__RiskSubCategory__abnormal_x0020tendency_x0020changes = 60,
	witsml2__RiskSubCategory__resurveying = 61,
	witsml2__RiskSubCategory__in_field_x0020referencing_x0020_x0028IFR_x0029_x0020actions = 62,
	witsml2__RiskSubCategory__bit_x0020or_x0020BHA_x0020performance = 63,
	witsml2__RiskSubCategory__drilling_x0020optimization = 64,
	witsml2__RiskSubCategory__bit_x0020balling = 'A',
	witsml2__RiskSubCategory__lost_x0020cones_x0020or_x0020broken_x0020cutters = 'B',
	witsml2__RiskSubCategory__excessive_x0020bit_x0020wear_x0020or_x0020gauge = 'C',
	witsml2__RiskSubCategory__low_x0020rate_x0020of_x0020bit_x0020penetration = 'D',
	witsml2__RiskSubCategory__high_x0020rate_x0020of_x0020bit_x0020penetration = 'E',
	witsml2__RiskSubCategory__downhole_x0020tool = 'F',
	witsml2__RiskSubCategory__surface_x0020system = 'G',
	witsml2__RiskSubCategory__motor_x0020or_x0020rotary_x0020steerable_x0020system_x0020failure = 'H',
	witsml2__RiskSubCategory__topdrive_x0020failure = 'I',
	witsml2__RiskSubCategory__hoisting_x0020equipment_x0020failure = 'J',
	witsml2__RiskSubCategory__circulating_x0020equipment_x0020failure = 'K',
	witsml2__RiskSubCategory__electrical_x0020system_x0020failure = 'L',
	witsml2__RiskSubCategory__blow_x0020out_x0020preventer_x0020events = 'M',
	witsml2__RiskSubCategory__surface_x0020instrumentation_x0020problems = 'N',
	witsml2__RiskSubCategory__rig_x0020communications = 'O',
	witsml2__RiskSubCategory__completion_x0020equipment_x0020failure = 'P',
	witsml2__RiskSubCategory__miscellaneous_x0020rig_x0020equipment = 'Q',
	witsml2__RiskSubCategory__tool_x0020or_x0020equipment_x0020failure = 'R',
	witsml2__RiskSubCategory__squeeze_x0020jobs = 'S',
	witsml2__RiskSubCategory__casing_x0020surge_x0020losses = 'T',
	witsml2__RiskSubCategory__stuck_x0020casing_x0020or_x0020completion = 'U',
	witsml2__RiskSubCategory__shoe_x0020failures = 'V',
	witsml2__RiskSubCategory__early_x0020cement_x0020setup = 'W',
	witsml2__RiskSubCategory__casing_x0020collapse = 'X',
	witsml2__RiskSubCategory__milling = 'Y',
	witsml2__RiskSubCategory__excessive_x0020casing_x0020wear_x0020or_x0020cuttings = 'Z',
	witsml2__RiskSubCategory__excessive_x0020formation_x0020damage_x0020or_x0020skin = 91,
	witsml2__RiskSubCategory__casing_x0020rotation_x0020or_x0020reciprocation_x0020rqd = 92,
	witsml2__RiskSubCategory__broaching = 93,
	witsml2__RiskSubCategory__completion_x0020or_x0020casing = 94,
	witsml2__RiskSubCategory__stratigraphy = 95,
	witsml2__RiskSubCategory__fishing = 96,
	witsml2__RiskSubCategory__junk_x0020in_x0020hole = 'a',
	witsml2__RiskSubCategory__delay_x0020due_x0020to_x0020political_x0020unrest = 'b',
	witsml2__RiskSubCategory__rig_x0020move = 'c',
	witsml2__RiskSubCategory__gas_x0020hydrates = 'd',
	witsml2__RiskSubCategory__pending_x0020analysis = 'e',
	witsml2__RiskSubCategory__riser_x0020disconnect = 'f',
	witsml2__RiskSubCategory__other = 'g',
	witsml2__RiskSubCategory__personnel = 'h',
	witsml2__RiskSubCategory__environmental = 'i',
	witsml2__RiskSubCategory__automotive = 'j',
	witsml2__RiskSubCategory__asset = 'k',
	witsml2__RiskSubCategory__information = 'l',
	witsml2__RiskSubCategory__time = 'm',
	witsml2__RiskSubCategory__HSE = 'n'
};
#endif

/* eml2_1ForGsoap.h:20182 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskAffectedPersonnel (-1379)

/* witsml2:RiskAffectedPersonnel */
enum witsml2__RiskAffectedPersonnel {
	witsml2__RiskAffectedPersonnel__cementer = 0,
	witsml2__RiskAffectedPersonnel__company_x0020man = 1,
	witsml2__RiskAffectedPersonnel__contractor = 2,
	witsml2__RiskAffectedPersonnel__directional_x0020driller = 3,
	witsml2__RiskAffectedPersonnel__driller = 4,
	witsml2__RiskAffectedPersonnel__drilling_x0020engineer = 5,
	witsml2__RiskAffectedPersonnel__drilling_x0020superintendent = 6,
	witsml2__RiskAffectedPersonnel__drilling_x0020team = 7,
	witsml2__RiskAffectedPersonnel__facility_x0020engineer = 8,
	witsml2__RiskAffectedPersonnel__field_x0020service_x0020manager = 9,
	witsml2__RiskAffectedPersonnel__foreman = 10,
	witsml2__RiskAffectedPersonnel__general_x0020service_x0020supervisor = 11,
	witsml2__RiskAffectedPersonnel__geologist = 12,
	witsml2__RiskAffectedPersonnel__member = 13,
	witsml2__RiskAffectedPersonnel__mud_x0020engineer = 14,
	witsml2__RiskAffectedPersonnel__mud_x0020logger = 15,
	witsml2__RiskAffectedPersonnel__MWD_x0020or_x0020LWD_x0020engineer = 16,
	witsml2__RiskAffectedPersonnel__perform_x0020engineer = 17,
	witsml2__RiskAffectedPersonnel__petrophysicist = 18,
	witsml2__RiskAffectedPersonnel__production_x0020engineer = 19,
	witsml2__RiskAffectedPersonnel__remotely_x0020operated_x0020vehicle_x0020engineer = 20,
	witsml2__RiskAffectedPersonnel__safety_x0020manager = 21,
	witsml2__RiskAffectedPersonnel__sales_x0020engineer = 22,
	witsml2__RiskAffectedPersonnel__service_x0020supervisor = 23,
	witsml2__RiskAffectedPersonnel__technical_x0020support = 24,
	witsml2__RiskAffectedPersonnel__tool_x0020pusher = 25,
	witsml2__RiskAffectedPersonnel__wireline_x0020engineer = 26
};
#endif

/* eml2_1ForGsoap.h:20224 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialKind (-1380)

/* witsml2:StimMaterialKind */
enum witsml2__StimMaterialKind {
	witsml2__StimMaterialKind__additive = 0,
	witsml2__StimMaterialKind__brine = 1,
	witsml2__StimMaterialKind__CO2 = 2,
	witsml2__StimMaterialKind__gel = 3,
	witsml2__StimMaterialKind__N2 = 4,
	witsml2__StimMaterialKind__other = 5,
	witsml2__StimMaterialKind__proppant_x0020agent = 6,
	witsml2__StimMaterialKind__water = 7
};
#endif

/* eml2_1ForGsoap.h:20243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditiveKind (-1381)

/* witsml2:StimAdditiveKind */
enum witsml2__StimAdditiveKind {
	witsml2__StimAdditiveKind__acid = 0,
	witsml2__StimAdditiveKind__activator = 1,
	witsml2__StimAdditiveKind__biocide = 2,
	witsml2__StimAdditiveKind__breaker = 3,
	witsml2__StimAdditiveKind__breaker_x0020aid = 4,
	witsml2__StimAdditiveKind__buffer = 5,
	witsml2__StimAdditiveKind__clay_x0020stabilizer = 6,
	witsml2__StimAdditiveKind__corrosion_x0020inhibitor = 7,
	witsml2__StimAdditiveKind__corrosion_x0020inhibitor_x0020aid = 8,
	witsml2__StimAdditiveKind__crosslinker = 9,
	witsml2__StimAdditiveKind__delaying_x0020agent = 10,
	witsml2__StimAdditiveKind__fibers = 11,
	witsml2__StimAdditiveKind__fluid_x0020loss_x0020additive = 12,
	witsml2__StimAdditiveKind__foamer = 13,
	witsml2__StimAdditiveKind__friction_x0020reducer = 14,
	witsml2__StimAdditiveKind__gelling_x0020agent = 15,
	witsml2__StimAdditiveKind__iron_x0020control_x0020additive = 16,
	witsml2__StimAdditiveKind__mutual_x0020solvent = 17,
	witsml2__StimAdditiveKind__salt = 18,
	witsml2__StimAdditiveKind__stabilizer = 19,
	witsml2__StimAdditiveKind__surfactant = 20
};
#endif

/* eml2_1ForGsoap.h:20275 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ProppantAgentKind (-1382)

/* witsml2:ProppantAgentKind */
enum witsml2__ProppantAgentKind {
	witsml2__ProppantAgentKind__ceramic = 0,
	witsml2__ProppantAgentKind__resin_x0020coated_x0020ceramic = 1,
	witsml2__ProppantAgentKind__resin_x0020coated_x0020sand = 2,
	witsml2__ProppantAgentKind__sand = 3
};
#endif

/* eml2_1ForGsoap.h:20290 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTestAnalysisMethod (-1383)

/* witsml2:StimFetTestAnalysisMethod */
enum witsml2__StimFetTestAnalysisMethod {
	witsml2__StimFetTestAnalysisMethod__average = 0,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020g_time = 1,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020linear_x0020time = 2,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020radial_x0020time = 3,
	witsml2__StimFetTestAnalysisMethod__gdk_x00202_d = 4,
	witsml2__StimFetTestAnalysisMethod__horner = 5,
	witsml2__StimFetTestAnalysisMethod__linear = 6,
	witsml2__StimFetTestAnalysisMethod__log_log = 7,
	witsml2__StimFetTestAnalysisMethod__nolte = 8,
	witsml2__StimFetTestAnalysisMethod__other = 9,
	witsml2__StimFetTestAnalysisMethod__pdl_x0020coefficient = 10,
	witsml2__StimFetTestAnalysisMethod__perkins_x0020and_x0020kern_x00202_d = 11,
	witsml2__StimFetTestAnalysisMethod__radial_x00202_d = 12,
	witsml2__StimFetTestAnalysisMethod__square_x0020root = 13,
	witsml2__StimFetTestAnalysisMethod__third_party_x0020software = 14
};
#endif

/* eml2_1ForGsoap.h:20316 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PIDXCommodityCode (-1384)

/* witsml2:PIDXCommodityCode */
enum witsml2__PIDXCommodityCode {
	witsml2__PIDXCommodityCode__71131001 = 71131001LL,
	witsml2__PIDXCommodityCode__71131002 = 71131002LL,
	witsml2__PIDXCommodityCode__71131003 = 71131003LL,
	witsml2__PIDXCommodityCode__71131004 = 71131004LL,
	witsml2__PIDXCommodityCode__71131005 = 71131005LL,
	witsml2__PIDXCommodityCode__71131006 = 71131006LL,
	witsml2__PIDXCommodityCode__71131007 = 71131007LL,
	witsml2__PIDXCommodityCode__71131008 = 71131008LL,
	witsml2__PIDXCommodityCode__71131009 = 71131009LL,
	witsml2__PIDXCommodityCode__71131010 = 71131010LL,
	witsml2__PIDXCommodityCode__71131011 = 71131011LL,
	witsml2__PIDXCommodityCode__71131012 = 71131012LL,
	witsml2__PIDXCommodityCode__71131013 = 71131013LL,
	witsml2__PIDXCommodityCode__71131014 = 71131014LL,
	witsml2__PIDXCommodityCode__71131015 = 71131015LL,
	witsml2__PIDXCommodityCode__71131016 = 71131016LL,
	witsml2__PIDXCommodityCode__71131018 = 71131018LL,
	witsml2__PIDXCommodityCode__71131019 = 71131019LL
};
#endif

/* eml2_1ForGsoap.h:20345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidSubtype (-1385)

/* witsml2:StimFluidSubtype */
enum witsml2__StimFluidSubtype {
	witsml2__StimFluidSubtype__acid = 0,
	witsml2__StimFluidSubtype__base = 1,
	witsml2__StimFluidSubtype__carbon_x0020dioxide = 2,
	witsml2__StimFluidSubtype__carbon_x0020dioxide_x0020and_x0020nitrogen = 3,
	witsml2__StimFluidSubtype__carbon_x0020dioxide_x0020and_x0020water = 4,
	witsml2__StimFluidSubtype__condensate = 5,
	witsml2__StimFluidSubtype__cross_linked_x0020gel = 6,
	witsml2__StimFluidSubtype__crude_x0020oil = 7,
	witsml2__StimFluidSubtype__diesel = 8,
	witsml2__StimFluidSubtype__foam = 9,
	witsml2__StimFluidSubtype__fracturing_x0020oil = 10,
	witsml2__StimFluidSubtype__fresh_x0020water = 11,
	witsml2__StimFluidSubtype__gelled_x0020acid = 12,
	witsml2__StimFluidSubtype__gelled_x0020condensate = 13,
	witsml2__StimFluidSubtype__gelled_x0020crude = 14,
	witsml2__StimFluidSubtype__gelled_x0020diesel = 15,
	witsml2__StimFluidSubtype__gelled_x0020oil = 16,
	witsml2__StimFluidSubtype__gelled_x0020salt_x0020water = 17,
	witsml2__StimFluidSubtype__hot_x0020condensate = 18,
	witsml2__StimFluidSubtype__hot_x0020fresh_x0020water = 19,
	witsml2__StimFluidSubtype__hot_x0020oil = 20,
	witsml2__StimFluidSubtype__hot_x0020salt_x0020water = 21,
	witsml2__StimFluidSubtype__hybrid = 22,
	witsml2__StimFluidSubtype__linear_x0020gel = 23,
	witsml2__StimFluidSubtype__liquefied_x0020petroleum_x0020gas = 24,
	witsml2__StimFluidSubtype__nitrogen = 25,
	witsml2__StimFluidSubtype__oil = 26,
	witsml2__StimFluidSubtype__other = 27,
	witsml2__StimFluidSubtype__produced_x0020water = 28,
	witsml2__StimFluidSubtype__salt_x0020water = 29,
	witsml2__StimFluidSubtype__slick_x0020water = 30
};
#endif

/* eml2_1ForGsoap.h:20387 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversionMethod (-1386)

/* witsml2:StimJobDiversionMethod */
enum witsml2__StimJobDiversionMethod {
	witsml2__StimJobDiversionMethod__ball_x0020sealer = 0,
	witsml2__StimJobDiversionMethod__bands = 1,
	witsml2__StimJobDiversionMethod__chemical = 2,
	witsml2__StimJobDiversionMethod__fibers = 3,
	witsml2__StimJobDiversionMethod__other = 4,
	witsml2__StimJobDiversionMethod__packer = 5,
	witsml2__StimJobDiversionMethod__solid_x0020particle = 6,
	witsml2__StimJobDiversionMethod__straddle_x0020packer = 7
};
#endif

/* eml2_1ForGsoap.h:20406 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidKind (-1387)

/* witsml2:StimFluidKind */
enum witsml2__StimFluidKind {
	witsml2__StimFluidKind__acid_based = 0,
	witsml2__StimFluidKind__gas = 1,
	witsml2__StimFluidKind__oil_based = 2,
	witsml2__StimFluidKind__water_based = 3
};
#endif

/* eml2_1ForGsoap.h:20433 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPathType (-1388)

/* witsml2:StimFlowPathType */
enum witsml2__StimFlowPathType {
	witsml2__StimFlowPathType__annulus = 0,
	witsml2__StimFlowPathType__casing = 1,
	witsml2__StimFlowPathType__drill_x0020pipe = 2,
	witsml2__StimFlowPathType__open_x0020hole = 3,
	witsml2__StimFlowPathType__tubing = 4,
	witsml2__StimFlowPathType__tubing_x0020and_x0020annulus = 5
};
#endif

/* eml2_1ForGsoap.h:20474 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorTermSource
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorTermSource (-1389)

/* witsml2:ErrorTermSource */
enum witsml2__ErrorTermSource {
	witsml2__ErrorTermSource__sensor = 0,
	witsml2__ErrorTermSource__azimuth_x0020reference = 1,
	witsml2__ErrorTermSource__magnetic = 2,
	witsml2__ErrorTermSource__alignment = 3,
	witsml2__ErrorTermSource__misalignment = 4,
	witsml2__ErrorTermSource__depth = 5,
	witsml2__ErrorTermSource__reference = 6
};
#endif

/* eml2_1ForGsoap.h:20520 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluorescence (-1390)

/* witsml2:ShowFluorescence */
enum witsml2__ShowFluorescence {
	witsml2__ShowFluorescence__faint = 0,
	witsml2__ShowFluorescence__bright = 1,
	witsml2__ShowFluorescence__none = 2
};
#endif

/* eml2_1ForGsoap.h:20534 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowSpeed (-1391)

/* witsml2:ShowSpeed */
enum witsml2__ShowSpeed {
	witsml2__ShowSpeed__slow = 0,
	witsml2__ShowSpeed__moderately_x0020fast = 1,
	witsml2__ShowSpeed__fast = 2,
	witsml2__ShowSpeed__instantaneous = 3,
	witsml2__ShowSpeed__none = 4
};
#endif

/* eml2_1ForGsoap.h:20550 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowLevel (-1392)

/* witsml2:ShowLevel */
enum witsml2__ShowLevel {
	witsml2__ShowLevel__blooming = 0,
	witsml2__ShowLevel__streaming = 1
};
#endif

/* eml2_1ForGsoap.h:20563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowRating (-1393)

/* witsml2:ShowRating */
enum witsml2__ShowRating {
	witsml2__ShowRating__none = 0,
	witsml2__ShowRating__very_x0020poor = 1,
	witsml2__ShowRating__poor = 2,
	witsml2__ShowRating__fair = 3,
	witsml2__ShowRating__good = 4,
	witsml2__ShowRating__very_x0020good = 5
};
#endif

/* eml2_1ForGsoap.h:20580 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluid (-1394)

/* witsml2:ShowFluid */
enum witsml2__ShowFluid {
	witsml2__ShowFluid__gas = 0,
	witsml2__ShowFluid__oil = 1
};
#endif

/* eml2_1ForGsoap.h:20593 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureParameterKind (-1395)

/* witsml2:PressureParameterKind */
enum witsml2__PressureParameterKind {
	witsml2__PressureParameterKind__direct_x0020fracture_x0020pressure_x0020measurement = 0,
	witsml2__PressureParameterKind__pore_x0020pressure_x0020estimate_x0020while_x0020drilling = 1
};
#endif

/* eml2_1ForGsoap.h:20606 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameterKind (-1396)

/* witsml2:MudLogStringParameterKind */
enum witsml2__MudLogStringParameterKind {
	witsml2__MudLogStringParameterKind__bit_x0020parameters = 0,
	witsml2__MudLogStringParameterKind__bit_x0020type_x0020comment = 1,
	witsml2__MudLogStringParameterKind__casing_x0020point_x0020comment = 2,
	witsml2__MudLogStringParameterKind__chromatograph_x0020comment = 3,
	witsml2__MudLogStringParameterKind__circulation_x0020system_x0020comment = 4,
	witsml2__MudLogStringParameterKind__core_x0020interval_x0020comment = 5,
	witsml2__MudLogStringParameterKind__drilling_x0020data_x0020comment = 6,
	witsml2__MudLogStringParameterKind__gas_x0020peaks_x0020comment = 7,
	witsml2__MudLogStringParameterKind__gas_x0020ratio_x0020comment = 8,
	witsml2__MudLogStringParameterKind__general_x0020engineering_x0020comment = 9,
	witsml2__MudLogStringParameterKind__lithlog_x0020comment = 10,
	witsml2__MudLogStringParameterKind__LWD_x0020comment = 11,
	witsml2__MudLogStringParameterKind__marker_x0020or_x0020formation_x0020top_x0020comment = 12,
	witsml2__MudLogStringParameterKind__midnight_x0020depth_x0020date = 13,
	witsml2__MudLogStringParameterKind__mud_x0020check_x0020comment = 14,
	witsml2__MudLogStringParameterKind__mud_x0020data_x0020comment = 15,
	witsml2__MudLogStringParameterKind__mudlog_x0020comment = 16,
	witsml2__MudLogStringParameterKind__pressure_x0020data_x0020comment = 17,
	witsml2__MudLogStringParameterKind__shale_x0020density_x0020comment = 18,
	witsml2__MudLogStringParameterKind__short_x0020trip_x0020comment = 19,
	witsml2__MudLogStringParameterKind__show_x0020report_x0020comment = 20,
	witsml2__MudLogStringParameterKind__sidewall_x0020core_x0020comment = 21,
	witsml2__MudLogStringParameterKind__sliding_x0020Interval = 22,
	witsml2__MudLogStringParameterKind__steam_x0020still_x0020results_x0020comment = 23,
	witsml2__MudLogStringParameterKind__survey_x0020comment = 24,
	witsml2__MudLogStringParameterKind__temperature_x0020data_x0020comment = 25,
	witsml2__MudLogStringParameterKind__temperature_x0020trend_x0020comment = 26,
	witsml2__MudLogStringParameterKind__unknown = 27,
	witsml2__MudLogStringParameterKind__wireline_x0020log_x0020comment = 28
};
#endif

/* eml2_1ForGsoap.h:20646 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureGradientParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureGradientParameterKind (-1397)

/* witsml2:PressureGradientParameterKind */
enum witsml2__PressureGradientParameterKind {
	witsml2__PressureGradientParameterKind__direct_x0020pore_x0020pressure_x0020gradient_x0020measurement = 0,
	witsml2__PressureGradientParameterKind__fracture_x0020pressure_x0020gradient_x0020estimate = 1,
	witsml2__PressureGradientParameterKind__kick_x0020pressure_x0020gradient = 2,
	witsml2__PressureGradientParameterKind__lost_x0020returns = 3,
	witsml2__PressureGradientParameterKind__overburden_x0020gradient = 4,
	witsml2__PressureGradientParameterKind__pore_x0020pressure_x0020gradient_x0020estimate = 5
};
#endif

/* eml2_1ForGsoap.h:20663 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConcentrationParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConcentrationParameterKind (-1398)

/* witsml2:ConcentrationParameterKind */
enum witsml2__ConcentrationParameterKind {
	witsml2__ConcentrationParameterKind__cuttings_x0020gas = 0
};
#endif

/* eml2_1ForGsoap.h:20679 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ForceParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ForceParameterKind (-1399)

/* witsml2:ForceParameterKind */
enum witsml2__ForceParameterKind {
	witsml2__ForceParameterKind__overpull_x0020on_x0020connection = 0,
	witsml2__ForceParameterKind__overpull_x0020on_x0020trip = 1
};
#endif

/* eml2_1ForGsoap.h:20700 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatus (-1400)

/* witsml2:CompletionStatus */
enum witsml2__CompletionStatus {
	witsml2__CompletionStatus__active = 0,
	witsml2__CompletionStatus__inactive = 1,
	witsml2__CompletionStatus__permanently_x0020abandoned = 2,
	witsml2__CompletionStatus__planned = 3,
	witsml2__CompletionStatus__suspended = 4,
	witsml2__CompletionStatus__temporarily_x0020abandoned = 5,
	witsml2__CompletionStatus__testing = 6
};
#endif

/* eml2_1ForGsoap.h:20718 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PhysicalStatus (-1401)

/* witsml2:PhysicalStatus */
enum witsml2__PhysicalStatus {
	witsml2__PhysicalStatus__closed = 0,
	witsml2__PhysicalStatus__open = 1,
	witsml2__PhysicalStatus__proposed = 2
};
#endif

/* eml2_1ForGsoap.h:20732 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatus (-1402)

/* witsml2:PerforationStatus */
enum witsml2__PerforationStatus {
	witsml2__PerforationStatus__open = 0,
	witsml2__PerforationStatus__proposed = 1,
	witsml2__PerforationStatus__squeezed = 2
};
#endif

/* eml2_1ForGsoap.h:43230 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_1__gml__RelatedTimeType_relativePosition (-1916)

/* gml:RelatedTimeType-relativePosition */
enum _gml__RelatedTimeType_relativePosition {
	_gml__RelatedTimeType_relativePosition__Before = 0,
	_gml__RelatedTimeType_relativePosition__After = 1,
	_gml__RelatedTimeType_relativePosition__Begins = 2,
	_gml__RelatedTimeType_relativePosition__Ends = 3,
	_gml__RelatedTimeType_relativePosition__During = 4,
	_gml__RelatedTimeType_relativePosition__Equals = 5,
	_gml__RelatedTimeType_relativePosition__Contains = 6,
	_gml__RelatedTimeType_relativePosition__Overlaps = 7,
	_gml__RelatedTimeType_relativePosition__Meets = 8,
	_gml__RelatedTimeType_relativePosition__OverlappedBy = 9,
	_gml__RelatedTimeType_relativePosition__MetBy = 10,
	_gml__RelatedTimeType_relativePosition__BegunBy = 11,
	_gml__RelatedTimeType_relativePosition__EndedBy = 12
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/struct_tm.h:80 */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-13)

typedef struct tm xsd__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* eml2_1ForGsoap.h:237 */
class eml21__AbstractObject;	/* eml2_1ForGsoap.h:267 */
class eml21__Citation;	/* eml2_1ForGsoap.h:269 */
class eml21__CustomData;	/* eml2_1ForGsoap.h:271 */
class eml21__ExtensionNameValue;	/* eml2_1ForGsoap.h:273 */
class eml21__ObjectAlias;	/* eml2_1ForGsoap.h:275 */
class eml21__AbstractValueArray;	/* eml2_1ForGsoap.h:287 */
class eml21__JaggedArray;	/* eml2_1ForGsoap.h:319 */
class eml21__MdInterval;	/* eml2_1ForGsoap.h:321 */
class eml21__TvdInterval;	/* eml2_1ForGsoap.h:329 */
class eml21__DataObjectReference;	/* eml2_1ForGsoap.h:1065 */
class eml21__ExternalDataset;	/* eml2_1ForGsoap.h:1069 */
class eml21__ExternalDatasetPart;	/* eml2_1ForGsoap.h:1071 */
class eml21__AbstractActivityParameter;	/* eml2_1ForGsoap.h:1073 */
class eml21__AbstractParameterKey;	/* eml2_1ForGsoap.h:1075 */
class eml21__ParameterTemplate;	/* eml2_1ForGsoap.h:1089 */
class eml21__GeologicTime;	/* eml2_1ForGsoap.h:1097 */
class eml21__TimeIndex;	/* eml2_1ForGsoap.h:1103 */
class eml21__TimeIndices;	/* eml2_1ForGsoap.h:1105 */
class eml21__TimeSeriesParentage;	/* eml2_1ForGsoap.h:1109 */
class eml21__AbstractPressureValue;	/* eml2_1ForGsoap.h:1113 */
union _eml21__union_AbstractTemperaturePressure;	/* eml2_1ForGsoap.h:21752 */
class eml21__AbstractTemperaturePressure;	/* eml2_1ForGsoap.h:1115 */
class eml21__DensityValue;	/* eml2_1ForGsoap.h:1117 */
class eml21__FlowRateValue;	/* eml2_1ForGsoap.h:1119 */
class eml21__PressureValue;	/* eml2_1ForGsoap.h:1123 */
class eml21__VolumeValue;	/* eml2_1ForGsoap.h:1133 */
class eml21__AbstractGeodeticCrs;	/* eml2_1ForGsoap.h:1135 */
class eml21__AbstractProjectedCrs;	/* eml2_1ForGsoap.h:1137 */
class eml21__AbstractVerticalCrs;	/* eml2_1ForGsoap.h:1139 */
class eml21__FailingRule;	/* eml2_1ForGsoap.h:1179 */
class eml21__IndexRange;	/* eml2_1ForGsoap.h:1181 */
class eml21__AbstractGraphicalInformation;	/* eml2_1ForGsoap.h:1183 */
class gml__AbstractGMLType;	/* eml2_1ForGsoap.h:1197 */
class gml__ReferenceType;	/* eml2_1ForGsoap.h:1201 */
union _gml__union_TimePrimitivePropertyType;	/* eml2_1ForGsoap.h:22215 */
class __gml__TimePrimitivePropertyType_sequence;	/* eml2_1ForGsoap.h:22204 */
class gml__TimePrimitivePropertyType;	/* eml2_1ForGsoap.h:1213 */
class __gml__EllipsoidalCSPropertyType_sequence;	/* eml2_1ForGsoap.h:22280 */
class gml__EllipsoidalCSPropertyType;	/* eml2_1ForGsoap.h:1215 */
class __gml__CoordinateSystemAxisPropertyType_sequence;	/* eml2_1ForGsoap.h:22346 */
class gml__CoordinateSystemAxisPropertyType;	/* eml2_1ForGsoap.h:1221 */
class __gml__CartesianCSPropertyType_sequence;	/* eml2_1ForGsoap.h:22412 */
class gml__CartesianCSPropertyType;	/* eml2_1ForGsoap.h:1225 */
class __gml__SphericalCSPropertyType_sequence;	/* eml2_1ForGsoap.h:22478 */
class gml__SphericalCSPropertyType;	/* eml2_1ForGsoap.h:1229 */
class __gml__GeodeticDatumPropertyType_sequence;	/* eml2_1ForGsoap.h:22544 */
class gml__GeodeticDatumPropertyType;	/* eml2_1ForGsoap.h:1233 */
class __gml__PrimeMeridianPropertyType_sequence;	/* eml2_1ForGsoap.h:22610 */
class gml__PrimeMeridianPropertyType;	/* eml2_1ForGsoap.h:1239 */
class __gml__EllipsoidPropertyType_sequence;	/* eml2_1ForGsoap.h:22676 */
class gml__EllipsoidPropertyType;	/* eml2_1ForGsoap.h:1247 */
union _gml__union_GeneralConversionPropertyType;	/* eml2_1ForGsoap.h:22754 */
class __gml__GeneralConversionPropertyType_sequence;	/* eml2_1ForGsoap.h:22742 */
class gml__GeneralConversionPropertyType;	/* eml2_1ForGsoap.h:1257 */
union _gml__union_CRSPropertyType;	/* eml2_1ForGsoap.h:22826 */
class __gml__CRSPropertyType_sequence;	/* eml2_1ForGsoap.h:22815 */
class gml__CRSPropertyType;	/* eml2_1ForGsoap.h:1263 */
class __gml__GeodeticCRSPropertyType_sequence;	/* eml2_1ForGsoap.h:22887 */
class gml__GeodeticCRSPropertyType;	/* eml2_1ForGsoap.h:1265 */
class __gml__VerticalCSPropertyType_sequence;	/* eml2_1ForGsoap.h:22949 */
class gml__VerticalCSPropertyType;	/* eml2_1ForGsoap.h:1269 */
class __gml__VerticalDatumPropertyType_sequence;	/* eml2_1ForGsoap.h:23015 */
class gml__VerticalDatumPropertyType;	/* eml2_1ForGsoap.h:1273 */
class __gml__domainOfValidity_sequence;	/* eml2_1ForGsoap.h:23082 */
class _gml__domainOfValidity;	/* eml2_1ForGsoap.h:1277 */
class _gml__secondDefiningParameter;	/* eml2_1ForGsoap.h:1279 */
union _gml__union_SecondDefiningParameter;	/* eml2_1ForGsoap.h:23172 */
class _gml__SecondDefiningParameter;	/* eml2_1ForGsoap.h:1281 */
union _gml__union_coordinateOperationAccuracy;	/* eml2_1ForGsoap.h:23213 */
class __gml__coordinateOperationAccuracy_sequence;	/* eml2_1ForGsoap.h:23206 */
class _gml__coordinateOperationAccuracy;	/* eml2_1ForGsoap.h:1283 */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_1ForGsoap.h:23293 */
class __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23286 */
class gmd__EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_1ForGsoap.h:1287 */
class __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23352 */
class gmd__EX_USCORETemporalExtent_USCOREPropertyType;	/* eml2_1ForGsoap.h:1291 */
class __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23412 */
class gmd__EX_USCOREVerticalExtent_USCOREPropertyType;	/* eml2_1ForGsoap.h:1295 */
class __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23472 */
class gmd__MD_USCOREIdentifier_USCOREPropertyType;	/* eml2_1ForGsoap.h:1303 */
class __gmd__CI_USCORECitation_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23532 */
class gmd__CI_USCORECitation_USCOREPropertyType;	/* eml2_1ForGsoap.h:1307 */
class __gmd__CI_USCOREDate_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23592 */
class gmd__CI_USCOREDate_USCOREPropertyType;	/* eml2_1ForGsoap.h:1311 */
class __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23652 */
class gmd__CI_USCOREDateTypeCode_USCOREPropertyType;	/* eml2_1ForGsoap.h:1315 */
class __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23680 */
class gmd__CI_USCOREResponsibleParty_USCOREPropertyType;	/* eml2_1ForGsoap.h:1317 */
class __gmd__CI_USCOREContact_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23740 */
class gmd__CI_USCOREContact_USCOREPropertyType;	/* eml2_1ForGsoap.h:1321 */
class __gmd__CI_USCORETelephone_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23800 */
class gmd__CI_USCORETelephone_USCOREPropertyType;	/* eml2_1ForGsoap.h:1325 */
class __gmd__CI_USCOREAddress_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23860 */
class gmd__CI_USCOREAddress_USCOREPropertyType;	/* eml2_1ForGsoap.h:1329 */
class __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23920 */
class gmd__CI_USCOREOnlineResource_USCOREPropertyType;	/* eml2_1ForGsoap.h:1333 */
class __gmd__URL_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:23980 */
class gmd__URL_USCOREPropertyType;	/* eml2_1ForGsoap.h:1337 */
class __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24008 */
class gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType;	/* eml2_1ForGsoap.h:1339 */
class __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24036 */
class gmd__CI_USCORERoleCode_USCOREPropertyType;	/* eml2_1ForGsoap.h:1341 */
class __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24064 */
class gmd__CI_USCOREPresentationFormCode_USCOREPropertyType;	/* eml2_1ForGsoap.h:1343 */
class __gmd__CI_USCORESeries_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24092 */
class gmd__CI_USCORESeries_USCOREPropertyType;	/* eml2_1ForGsoap.h:1345 */
class __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24152 */
class gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType;	/* eml2_1ForGsoap.h:1349 */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType;	/* eml2_1ForGsoap.h:24187 */
class __gmd__DQ_USCOREResult_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24180 */
class gmd__DQ_USCOREResult_USCOREPropertyType;	/* eml2_1ForGsoap.h:1351 */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_1ForGsoap.h:24265 */
class __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24254 */
class gts__TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_1ForGsoap.h:1355 */
class gco__AbstractObject_USCOREType;	/* eml2_1ForGsoap.h:1357 */
union _gco__union_CharacterString_USCOREPropertyType;	/* eml2_1ForGsoap.h:24380 */
class __gco__CharacterString_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24374 */
class gco__CharacterString_USCOREPropertyType;	/* eml2_1ForGsoap.h:1359 */
class __gco__Boolean_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24429 */
class gco__Boolean_USCOREPropertyType;	/* eml2_1ForGsoap.h:1361 */
class __gco__Real_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24457 */
class gco__Real_USCOREPropertyType;	/* eml2_1ForGsoap.h:1363 */
union _gco__union_Date_USCOREPropertyType;	/* eml2_1ForGsoap.h:24488 */
class gco__Date_USCOREPropertyType;	/* eml2_1ForGsoap.h:1365 */
class __gco__DateTime_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24517 */
class gco__DateTime_USCOREPropertyType;	/* eml2_1ForGsoap.h:1369 */
union _gsr__union_SC_USCORECRS_USCOREPropertyType;	/* eml2_1ForGsoap.h:24564 */
class __gsr__SC_USCORECRS_USCOREPropertyType_sequence;	/* eml2_1ForGsoap.h:24553 */
class gsr__SC_USCORECRS_USCOREPropertyType;	/* eml2_1ForGsoap.h:1371 */
class witsml2__NameTag;	/* eml2_1ForGsoap.h:1377 */
class witsml2__Cost;	/* eml2_1ForGsoap.h:1379 */
class witsml2__ReferencePoint;	/* eml2_1ForGsoap.h:1389 */
class witsml2__WellDatum;	/* eml2_1ForGsoap.h:1399 */
class witsml2__RefWellbore;	/* eml2_1ForGsoap.h:1401 */
class witsml2__RefWellboreRig;	/* eml2_1ForGsoap.h:1403 */
class witsml2__AbstractWellLocation;	/* eml2_1ForGsoap.h:1405 */
class witsml2__PublicLandSurveySystem;	/* eml2_1ForGsoap.h:1407 */
class witsml2__DrillingParams;	/* eml2_1ForGsoap.h:1411 */
class witsml2__Fluid;	/* eml2_1ForGsoap.h:1413 */
class witsml2__RheometerViscosity;	/* eml2_1ForGsoap.h:1415 */
class witsml2__DrillReportWellboreInfo;	/* eml2_1ForGsoap.h:1421 */
class witsml2__DrillReportStatusInfo;	/* eml2_1ForGsoap.h:1423 */
class witsml2__Rheometer;	/* eml2_1ForGsoap.h:1425 */
class witsml2__DrillReportPorePressure;	/* eml2_1ForGsoap.h:1427 */
class witsml2__DrillReportSurveyStation;	/* eml2_1ForGsoap.h:1431 */
class witsml2__DrillActivity;	/* eml2_1ForGsoap.h:1433 */
class witsml2__DrillReportLogInfo;	/* eml2_1ForGsoap.h:1435 */
class witsml2__DrillReportCoreInfo;	/* eml2_1ForGsoap.h:1437 */
class witsml2__DrillReportWellTestInfo;	/* eml2_1ForGsoap.h:1439 */
class witsml2__DrillReportFormTestInfo;	/* eml2_1ForGsoap.h:1441 */
class witsml2__DrillReportLithShowInfo;	/* eml2_1ForGsoap.h:1443 */
class witsml2__DrillReportEquipFailureInfo;	/* eml2_1ForGsoap.h:1445 */
class witsml2__DrillReportControlIncidentInfo;	/* eml2_1ForGsoap.h:1447 */
class witsml2__DrillReportStratInfo;	/* eml2_1ForGsoap.h:1449 */
class witsml2__DrillReportPerfInfo;	/* eml2_1ForGsoap.h:1451 */
class witsml2__DrillReportGasReadingInfo;	/* eml2_1ForGsoap.h:1453 */
class __witsml2__AbstractBottomHoleTemperature_sequence;	/* eml2_1ForGsoap.h:27829 */
class witsml2__AbstractBottomHoleTemperature;	/* eml2_1ForGsoap.h:1455 */
class witsml2__TubularComponent;	/* eml2_1ForGsoap.h:1463 */
class witsml2__BitRecord;	/* eml2_1ForGsoap.h:1465 */
class witsml2__Nozzle;	/* eml2_1ForGsoap.h:1467 */
class witsml2__Connection;	/* eml2_1ForGsoap.h:1469 */
class witsml2__Jar;	/* eml2_1ForGsoap.h:1471 */
class witsml2__MwdTool;	/* eml2_1ForGsoap.h:1473 */
class witsml2__Sensor;	/* eml2_1ForGsoap.h:1475 */
class witsml2__Motor;	/* eml2_1ForGsoap.h:1477 */
class witsml2__Stabilizer;	/* eml2_1ForGsoap.h:1479 */
class witsml2__Bend;	/* eml2_1ForGsoap.h:1481 */
class witsml2__HoleOpener;	/* eml2_1ForGsoap.h:1483 */
class witsml2__RotarySteerableTool;	/* eml2_1ForGsoap.h:1485 */
class witsml2__AbstractRotarySteerableTool;	/* eml2_1ForGsoap.h:1487 */
class witsml2__AbstractCementJob;	/* eml2_1ForGsoap.h:1503 */
class witsml2__AbstractCementStage;	/* eml2_1ForGsoap.h:1507 */
class witsml2__CementingFluid;	/* eml2_1ForGsoap.h:1509 */
class witsml2__CementPumpScheduleStep;	/* eml2_1ForGsoap.h:1511 */
class witsml2__CementAdditive;	/* eml2_1ForGsoap.h:1513 */
class witsml2__FluidLocation;	/* eml2_1ForGsoap.h:1515 */
class witsml2__WellboreGeometrySection;	/* eml2_1ForGsoap.h:1521 */
class witsml2__ChannelData;	/* eml2_1ForGsoap.h:1525 */
class witsml2__PointMetadata;	/* eml2_1ForGsoap.h:1527 */
class witsml2__ChannelIndex;	/* eml2_1ForGsoap.h:1531 */
class witsml2__AbstractIndexValue;	/* eml2_1ForGsoap.h:1535 */
class witsml2__AbstractLogDataContext;	/* eml2_1ForGsoap.h:1543 */
class witsml2__LogChannelAxis;	/* eml2_1ForGsoap.h:1549 */
class witsml2__DepthRegTrack;	/* eml2_1ForGsoap.h:1553 */
class witsml2__DepthRegLogRect;	/* eml2_1ForGsoap.h:1555 */
class witsml2__DepthRegTrackCurve;	/* eml2_1ForGsoap.h:1557 */
class witsml2__DepthRegLogSection;	/* eml2_1ForGsoap.h:1561 */
class witsml2__DepthRegCalibrationPoint;	/* eml2_1ForGsoap.h:1563 */
class witsml2__DepthRegPoint;	/* eml2_1ForGsoap.h:1565 */
class witsml2__DepthRegParameter;	/* eml2_1ForGsoap.h:1567 */
class witsml2__DepthRegRectangle;	/* eml2_1ForGsoap.h:1569 */
class witsml2__DownholeComponentReference;	/* eml2_1ForGsoap.h:1575 */
class witsml2__BoreholeStringReference;	/* eml2_1ForGsoap.h:1577 */
class witsml2__DownholeStringReference;	/* eml2_1ForGsoap.h:1579 */
class witsml2__AbstractEventExtension;	/* eml2_1ForGsoap.h:1581 */
class witsml2__Perforating;	/* eml2_1ForGsoap.h:1603 */
class witsml2__MemberObject;	/* eml2_1ForGsoap.h:1609 */
class witsml2__Participant;	/* eml2_1ForGsoap.h:1611 */
class witsml2__DownholeString;	/* eml2_1ForGsoap.h:1615 */
class witsml2__StringEquipmentSet;	/* eml2_1ForGsoap.h:1617 */
class witsml2__StringEquipment;	/* eml2_1ForGsoap.h:1619 */
class witsml2__EventInfo;	/* eml2_1ForGsoap.h:1621 */
class witsml2__EventRefInfo;	/* eml2_1ForGsoap.h:1623 */
class witsml2__ObjectSequence;	/* eml2_1ForGsoap.h:1625 */
class witsml2__ReferenceContainer;	/* eml2_1ForGsoap.h:1627 */
class witsml2__Assembly;	/* eml2_1ForGsoap.h:1631 */
class witsml2__StringAccessory;	/* eml2_1ForGsoap.h:1633 */
class witsml2__BoreholeStringSet;	/* eml2_1ForGsoap.h:1635 */
class witsml2__BoreholeString;	/* eml2_1ForGsoap.h:1637 */
class witsml2__Borehole;	/* eml2_1ForGsoap.h:1639 */
class witsml2__GeologyFeature;	/* eml2_1ForGsoap.h:1641 */
class witsml2__DownholeStringSet;	/* eml2_1ForGsoap.h:1643 */
class witsml2__EquipmentSet;	/* eml2_1ForGsoap.h:1645 */
class witsml2__Equipment;	/* eml2_1ForGsoap.h:1647 */
class witsml2__ExtPropNameValue;	/* eml2_1ForGsoap.h:1649 */
class witsml2__PerfSlot;	/* eml2_1ForGsoap.h:1651 */
class witsml2__PerfHole;	/* eml2_1ForGsoap.h:1653 */
class witsml2__PerforationSets;	/* eml2_1ForGsoap.h:1655 */
class witsml2__PerforationSet;	/* eml2_1ForGsoap.h:1657 */
class witsml2__AbstractConnectionType;	/* eml2_1ForGsoap.h:1659 */
class witsml2__ShakerScreen;	/* eml2_1ForGsoap.h:1669 */
class witsml2__Hse;	/* eml2_1ForGsoap.h:1671 */
class witsml2__Incident;	/* eml2_1ForGsoap.h:1673 */
class witsml2__Personnel;	/* eml2_1ForGsoap.h:1675 */
class witsml2__SupportCraft;	/* eml2_1ForGsoap.h:1677 */
class witsml2__Weather;	/* eml2_1ForGsoap.h:1679 */
class __witsml2__AbstractItemWtOrVolPerUnit_sequence;	/* eml2_1ForGsoap.h:33729 */
class witsml2__AbstractItemWtOrVolPerUnit;	/* eml2_1ForGsoap.h:1681 */
class witsml2__AnchorState;	/* eml2_1ForGsoap.h:1687 */
class witsml2__DayCost;	/* eml2_1ForGsoap.h:1691 */
class witsml2__Scr;	/* eml2_1ForGsoap.h:1693 */
class witsml2__PitVolume;	/* eml2_1ForGsoap.h:1695 */
class witsml2__MudVolume;	/* eml2_1ForGsoap.h:1697 */
class witsml2__MudLosses;	/* eml2_1ForGsoap.h:1699 */
class witsml2__Inventory;	/* eml2_1ForGsoap.h:1701 */
class witsml2__RigResponse;	/* eml2_1ForGsoap.h:1703 */
class witsml2__PumpOp;	/* eml2_1ForGsoap.h:1705 */
class witsml2__ShakerOp;	/* eml2_1ForGsoap.h:1707 */
class witsml2__TrajectoryStation;	/* eml2_1ForGsoap.h:1711 */
class witsml2__StnTrajRawData;	/* eml2_1ForGsoap.h:1713 */
class witsml2__StnTrajCorUsed;	/* eml2_1ForGsoap.h:1715 */
class witsml2__StnTrajValid;	/* eml2_1ForGsoap.h:1717 */
class witsml2__StnTrajMatrixCov;	/* eml2_1ForGsoap.h:1719 */
class witsml2__RefWellboreTrajectoryStation;	/* eml2_1ForGsoap.h:1721 */
class witsml2__IscwsaSurveyToolOperatingCondition;	/* eml2_1ForGsoap.h:1723 */
class witsml2__IscwsaSurveyToolOperatingInterval;	/* eml2_1ForGsoap.h:1725 */
class witsml2__IscwsaModelParameters;	/* eml2_1ForGsoap.h:1727 */
class witsml2__IscwsaErrorTermValue;	/* eml2_1ForGsoap.h:1729 */
class witsml2__IscwsaAuthorizationData;	/* eml2_1ForGsoap.h:1735 */
class witsml2__Bop;	/* eml2_1ForGsoap.h:1739 */
class witsml2__BopComponent;	/* eml2_1ForGsoap.h:1741 */
class witsml2__Pit;	/* eml2_1ForGsoap.h:1743 */
class witsml2__MudPump;	/* eml2_1ForGsoap.h:1745 */
class witsml2__Shaker;	/* eml2_1ForGsoap.h:1747 */
class witsml2__Centrifuge;	/* eml2_1ForGsoap.h:1749 */
class witsml2__Hydrocyclone;	/* eml2_1ForGsoap.h:1751 */
class witsml2__Degasser;	/* eml2_1ForGsoap.h:1753 */
class witsml2__SurfaceEquipment;	/* eml2_1ForGsoap.h:1755 */
class witsml2__StimTubular;	/* eml2_1ForGsoap.h:1761 */
class witsml2__StimReservoirInterval;	/* eml2_1ForGsoap.h:1763 */
class witsml2__StimPumpFlowBackTest;	/* eml2_1ForGsoap.h:1765 */
class witsml2__StimFlowPath;	/* eml2_1ForGsoap.h:1769 */
class witsml2__StimFluid;	/* eml2_1ForGsoap.h:1771 */
class witsml2__StimPumpFlowBackTestStep;	/* eml2_1ForGsoap.h:1773 */
class witsml2__StimJobMaterialCatalog;	/* eml2_1ForGsoap.h:1775 */
class witsml2__StimISO13503_USCORE5Point;	/* eml2_1ForGsoap.h:1777 */
class witsml2__StimStepDownTest;	/* eml2_1ForGsoap.h:1781 */
class witsml2__StimMaterialQuantity;	/* eml2_1ForGsoap.h:1783 */
class witsml2__StimISO13503_USCORE2Properties;	/* eml2_1ForGsoap.h:1787 */
class witsml2__StimPressureFlowRate;	/* eml2_1ForGsoap.h:1789 */
class witsml2__StimJobStep;	/* eml2_1ForGsoap.h:1791 */
class witsml2__StimStepTest;	/* eml2_1ForGsoap.h:1793 */
class witsml2__StimMaterial;	/* eml2_1ForGsoap.h:1795 */
class witsml2__StimEvent;	/* eml2_1ForGsoap.h:1799 */
class witsml2__ISO13503_USCORE2CrushTestData;	/* eml2_1ForGsoap.h:1801 */
class witsml2__StimFetTest;	/* eml2_1ForGsoap.h:1803 */
class witsml2__StimShutInPressure;	/* eml2_1ForGsoap.h:1805 */
class witsml2__StimJobDiagnosticSession;	/* eml2_1ForGsoap.h:1809 */
class witsml2__StimPerforationClusterSet;	/* eml2_1ForGsoap.h:1811 */
class witsml2__StimJobLogCatalog;	/* eml2_1ForGsoap.h:1813 */
class __witsml2__StimJobDiversion_sequence;	/* eml2_1ForGsoap.h:39069 */
class witsml2__StimJobDiversion;	/* eml2_1ForGsoap.h:1815 */
class witsml2__ISO13503_USCORE2SieveAnalysisData;	/* eml2_1ForGsoap.h:1817 */
class witsml2__SurveySection;	/* eml2_1ForGsoap.h:1821 */
class witsml2__AbstractIscwsaErrorCoefficient;	/* eml2_1ForGsoap.h:1823 */
class witsml2__IscwsaNomenclatureConstant;	/* eml2_1ForGsoap.h:1831 */
class witsml2__IscwsaErrorTerm;	/* eml2_1ForGsoap.h:1833 */
class witsml2__IscwsaErrorCoefficient;	/* eml2_1ForGsoap.h:1835 */
class witsml2__IscwsaNomenclature;	/* eml2_1ForGsoap.h:1839 */
class witsml2__IscwsaNameAndDescription;	/* eml2_1ForGsoap.h:1841 */
class witsml2__CuttingsIntervalShow;	/* eml2_1ForGsoap.h:1845 */
class witsml2__LithologyQualifier;	/* eml2_1ForGsoap.h:1855 */
class witsml2__CuttingsIntervalLithology;	/* eml2_1ForGsoap.h:1857 */
class witsml2__InterpretedIntervalLithology;	/* eml2_1ForGsoap.h:1861 */
class witsml2__MudlogReportInterval;	/* eml2_1ForGsoap.h:1871 */
class witsml2__MudLogParameter;	/* eml2_1ForGsoap.h:1873 */
class __witsml2__TorqueStatistics_sequence;	/* eml2_1ForGsoap.h:40191 */
class witsml2__TorqueStatistics;	/* eml2_1ForGsoap.h:1875 */
class __witsml2__DxcStatistics_sequence;	/* eml2_1ForGsoap.h:40231 */
class witsml2__DxcStatistics;	/* eml2_1ForGsoap.h:1883 */
class __witsml2__MudDensityStatistics_sequence;	/* eml2_1ForGsoap.h:40271 */
class witsml2__MudDensityStatistics;	/* eml2_1ForGsoap.h:1885 */
class __witsml2__EcdStatistics_sequence;	/* eml2_1ForGsoap.h:40311 */
class witsml2__EcdStatistics;	/* eml2_1ForGsoap.h:1887 */
class __witsml2__WobStatistics_sequence;	/* eml2_1ForGsoap.h:40351 */
class witsml2__WobStatistics;	/* eml2_1ForGsoap.h:1889 */
class __witsml2__DrillingParameters_sequence;	/* eml2_1ForGsoap.h:40391 */
class witsml2__DrillingParameters;	/* eml2_1ForGsoap.h:1895 */
class __witsml2__MudGas_sequence;	/* eml2_1ForGsoap.h:40467 */
class witsml2__MudGas;	/* eml2_1ForGsoap.h:1897 */
class witsml2__GasInMud;	/* eml2_1ForGsoap.h:1899 */
class witsml2__GasPeak;	/* eml2_1ForGsoap.h:1901 */
class __witsml2__RpmStatistics_sequence;	/* eml2_1ForGsoap.h:40591 */
class witsml2__RpmStatistics;	/* eml2_1ForGsoap.h:1905 */
class __witsml2__TorqueCurrentStatistics_sequence;	/* eml2_1ForGsoap.h:40631 */
class witsml2__TorqueCurrentStatistics;	/* eml2_1ForGsoap.h:1907 */
class __witsml2__RopStatistics_sequence;	/* eml2_1ForGsoap.h:40671 */
class witsml2__RopStatistics;	/* eml2_1ForGsoap.h:1909 */
class witsml2__Chromatograph;	/* eml2_1ForGsoap.h:1911 */
class witsml2__CompletionStatusHistory;	/* eml2_1ForGsoap.h:1919 */
class witsml2__ContactIntervalSet;	/* eml2_1ForGsoap.h:1923 */
class witsml2__GravelPackInterval;	/* eml2_1ForGsoap.h:1925 */
class witsml2__IntervalStatusHistory;	/* eml2_1ForGsoap.h:1927 */
class witsml2__OpenHoleInterval;	/* eml2_1ForGsoap.h:1929 */
class witsml2__PerforationSetInterval;	/* eml2_1ForGsoap.h:1931 */
class witsml2__PerforationStatusHistory;	/* eml2_1ForGsoap.h:1933 */
class witsml2__SlotsInterval;	/* eml2_1ForGsoap.h:1935 */
class eml21__AbstractBooleanArray;	/* eml2_1ForGsoap.h:277 */
class eml21__AbstractNumericArray;	/* eml2_1ForGsoap.h:283 */
class eml21__AbstractStringArray;	/* eml2_1ForGsoap.h:285 */
class eml21__EpcExternalPartReference;	/* eml2_1ForGsoap.h:1067 */
class eml21__Activity;	/* eml2_1ForGsoap.h:1077 */
class eml21__ActivityTemplate;	/* eml2_1ForGsoap.h:1079 */
class eml21__DataObjectParameter;	/* eml2_1ForGsoap.h:1081 */
class eml21__DoubleQuantityParameter;	/* eml2_1ForGsoap.h:1083 */
class eml21__IntegerQuantityParameter;	/* eml2_1ForGsoap.h:1085 */
class eml21__ObjectParameterKey;	/* eml2_1ForGsoap.h:1087 */
class eml21__StringParameter;	/* eml2_1ForGsoap.h:1091 */
class eml21__TimeIndexParameter;	/* eml2_1ForGsoap.h:1093 */
class eml21__TimeIndexParameterKey;	/* eml2_1ForGsoap.h:1095 */
class eml21__PropertyKind;	/* eml2_1ForGsoap.h:1099 */
class eml21__PropertyKindDictionary;	/* eml2_1ForGsoap.h:1101 */
class eml21__TimeSeries;	/* eml2_1ForGsoap.h:1107 */
class eml21__AbsolutePressure;	/* eml2_1ForGsoap.h:1111 */
class eml21__GaugePressure;	/* eml2_1ForGsoap.h:1121 */
union _eml21__union_ReferenceTemperaturePressure_;	/* eml2_1ForGsoap.h:42227 */
class eml21__ReferenceTemperaturePressure;	/* eml2_1ForGsoap.h:1127 */
class eml21__RelativePressure;	/* eml2_1ForGsoap.h:1129 */
class eml21__TemperaturePressure;	/* eml2_1ForGsoap.h:1131 */
class eml21__GeodeticCrs;	/* eml2_1ForGsoap.h:1141 */
class eml21__GeodeticEpsgCrs;	/* eml2_1ForGsoap.h:1143 */
class eml21__GeodeticGmlCrs;	/* eml2_1ForGsoap.h:1145 */
class eml21__GeodeticLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1147 */
class eml21__GeodeticUnknownCrs;	/* eml2_1ForGsoap.h:1149 */
class eml21__GeodeticWktCrs;	/* eml2_1ForGsoap.h:1151 */
class eml21__ProjectedCrs;	/* eml2_1ForGsoap.h:1153 */
class eml21__ProjectedEpsgCrs;	/* eml2_1ForGsoap.h:1155 */
class eml21__ProjectedGmlCrs;	/* eml2_1ForGsoap.h:1157 */
class eml21__ProjectedLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1159 */
class eml21__ProjectedUnknownCrs;	/* eml2_1ForGsoap.h:1161 */
class eml21__ProjectedWktCrs;	/* eml2_1ForGsoap.h:1163 */
class eml21__VerticalCrs;	/* eml2_1ForGsoap.h:1165 */
class eml21__VerticalEpsgCrs;	/* eml2_1ForGsoap.h:1167 */
class eml21__VerticalGmlCrs;	/* eml2_1ForGsoap.h:1169 */
class eml21__VerticalLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1171 */
class eml21__VerticalUnknownCrs;	/* eml2_1ForGsoap.h:1173 */
class eml21__VerticalWktCrs;	/* eml2_1ForGsoap.h:1175 */
class eml21__DataAssuranceRecord;	/* eml2_1ForGsoap.h:1177 */
class eml21__GraphicalInformationSet;	/* eml2_1ForGsoap.h:1185 */
class gml__DefinitionBaseType;	/* eml2_1ForGsoap.h:1195 */
class gml__StringOrRefType;	/* eml2_1ForGsoap.h:1199 */
class gml__CodeType;	/* eml2_1ForGsoap.h:1205 */
class gml__AbstractTimeObjectType;	/* eml2_1ForGsoap.h:1209 */
class gml__RelatedTimeType;	/* eml2_1ForGsoap.h:1211 */
class gml__MeasureType;	/* eml2_1ForGsoap.h:1245 */
class gmd__EX_USCOREExtent_USCOREType;	/* eml2_1ForGsoap.h:1285 */
class gmd__AbstractEX_USCOREGeographicExtent_USCOREType;	/* eml2_1ForGsoap.h:1289 */
class gmd__EX_USCORETemporalExtent_USCOREType;	/* eml2_1ForGsoap.h:1293 */
class gmd__EX_USCOREVerticalExtent_USCOREType;	/* eml2_1ForGsoap.h:1297 */
class gmd__AbstractDQ_USCOREElement_USCOREType;	/* eml2_1ForGsoap.h:1301 */
class gmd__MD_USCOREIdentifier_USCOREType;	/* eml2_1ForGsoap.h:1305 */
class gmd__CI_USCORECitation_USCOREType;	/* eml2_1ForGsoap.h:1309 */
class gmd__CI_USCOREDate_USCOREType;	/* eml2_1ForGsoap.h:1313 */
class gmd__CI_USCOREResponsibleParty_USCOREType;	/* eml2_1ForGsoap.h:1319 */
class gmd__CI_USCOREContact_USCOREType;	/* eml2_1ForGsoap.h:1323 */
class gmd__CI_USCORETelephone_USCOREType;	/* eml2_1ForGsoap.h:1327 */
class gmd__CI_USCOREAddress_USCOREType;	/* eml2_1ForGsoap.h:1331 */
class gmd__CI_USCOREOnlineResource_USCOREType;	/* eml2_1ForGsoap.h:1335 */
class gmd__CI_USCORESeries_USCOREType;	/* eml2_1ForGsoap.h:1347 */
class gmd__AbstractDQ_USCOREResult_USCOREType;	/* eml2_1ForGsoap.h:1353 */
class gco__CodeListValue_USCOREType;	/* eml2_1ForGsoap.h:1367 */
class witsml2__Attachment;	/* eml2_1ForGsoap.h:1373 */
class witsml2__Wellbore;	/* eml2_1ForGsoap.h:1383 */
class witsml2__GeodeticWellLocation;	/* eml2_1ForGsoap.h:1391 */
class witsml2__ProjectedWellLocation;	/* eml2_1ForGsoap.h:1393 */
class witsml2__Well;	/* eml2_1ForGsoap.h:1395 */
class witsml2__BhaRun;	/* eml2_1ForGsoap.h:1409 */
class witsml2__FluidsReport;	/* eml2_1ForGsoap.h:1417 */
class witsml2__DrillReport;	/* eml2_1ForGsoap.h:1419 */
class __witsml2__BottomHoleCirculatingTemperature_sequence_;	/* eml2_1ForGsoap.h:44789 */
class witsml2__BottomHoleCirculatingTemperature;	/* eml2_1ForGsoap.h:1457 */
class __witsml2__BottomHoleStaticTemperature_sequence_;	/* eml2_1ForGsoap.h:44828 */
class witsml2__BottomHoleStaticTemperature;	/* eml2_1ForGsoap.h:1459 */
class witsml2__Tubular;	/* eml2_1ForGsoap.h:1461 */
class __witsml2__BendAngle_sequence;	/* eml2_1ForGsoap.h:44933 */
class witsml2__BendAngle;	/* eml2_1ForGsoap.h:1489 */
class __witsml2__BendOffset_sequence;	/* eml2_1ForGsoap.h:44967 */
class witsml2__BendOffset;	/* eml2_1ForGsoap.h:1491 */
class witsml2__CementStageDesign;	/* eml2_1ForGsoap.h:1493 */
class witsml2__CementJobEvaluation;	/* eml2_1ForGsoap.h:1495 */
class witsml2__CementJobReport;	/* eml2_1ForGsoap.h:1497 */
class witsml2__CementDesignStage;	/* eml2_1ForGsoap.h:1499 */
class witsml2__CementJobDesign;	/* eml2_1ForGsoap.h:1501 */
class witsml2__CementJob;	/* eml2_1ForGsoap.h:1505 */
class witsml2__CementStageReport;	/* eml2_1ForGsoap.h:1517 */
class witsml2__WellboreGeometry;	/* eml2_1ForGsoap.h:1519 */
class witsml2__ChannelSet;	/* eml2_1ForGsoap.h:1523 */
class witsml2__PassIndexedDepth;	/* eml2_1ForGsoap.h:1529 */
class witsml2__Log;	/* eml2_1ForGsoap.h:1533 */
class witsml2__TimeIndexValue;	/* eml2_1ForGsoap.h:1537 */
class witsml2__DepthIndexValue;	/* eml2_1ForGsoap.h:1539 */
class witsml2__Channel;	/* eml2_1ForGsoap.h:1541 */
class witsml2__IndexRangeContext;	/* eml2_1ForGsoap.h:1545 */
class witsml2__ObjectContext;	/* eml2_1ForGsoap.h:1547 */
class witsml2__ChannelValueContext;	/* eml2_1ForGsoap.h:1551 */
class witsml2__DepthRegImage;	/* eml2_1ForGsoap.h:1559 */
class witsml2__WellCMLedger;	/* eml2_1ForGsoap.h:1571 */
class witsml2__CementExtension;	/* eml2_1ForGsoap.h:1583 */
class witsml2__CleanFillExtension;	/* eml2_1ForGsoap.h:1585 */
class witsml2__DirectionalSurveyExtension;	/* eml2_1ForGsoap.h:1587 */
class witsml2__LostCirculationExtension;	/* eml2_1ForGsoap.h:1589 */
class witsml2__BHPExtension;	/* eml2_1ForGsoap.h:1591 */
class witsml2__AcidizefracExtension;	/* eml2_1ForGsoap.h:1593 */
class witsml2__JobExtension;	/* eml2_1ForGsoap.h:1595 */
class witsml2__PressureTestExtension;	/* eml2_1ForGsoap.h:1597 */
class witsml2__WaitingOnExtension;	/* eml2_1ForGsoap.h:1599 */
class witsml2__PerforatingExtension;	/* eml2_1ForGsoap.h:1601 */
class witsml2__FluidReportExtension;	/* eml2_1ForGsoap.h:1605 */
class witsml2__DownholeExtension;	/* eml2_1ForGsoap.h:1607 */
class witsml2__DownholeComponent;	/* eml2_1ForGsoap.h:1613 */
class witsml2__EquipmentConnection;	/* eml2_1ForGsoap.h:1629 */
class witsml2__CasingConnectionType;	/* eml2_1ForGsoap.h:1661 */
class witsml2__TubingConnectionType;	/* eml2_1ForGsoap.h:1663 */
class witsml2__RodConnectionType;	/* eml2_1ForGsoap.h:1665 */
class witsml2__OtherConnectionType;	/* eml2_1ForGsoap.h:1667 */
class witsml2__ItemVolPerUnit;	/* eml2_1ForGsoap.h:1683 */
class witsml2__ItemWtPerUnit;	/* eml2_1ForGsoap.h:1685 */
class witsml2__OpsReport;	/* eml2_1ForGsoap.h:1689 */
class witsml2__Trajectory;	/* eml2_1ForGsoap.h:1709 */
class witsml2__ToolErrorModel;	/* eml2_1ForGsoap.h:1733 */
class witsml2__RigUtilization;	/* eml2_1ForGsoap.h:1737 */
class witsml2__Rig;	/* eml2_1ForGsoap.h:1757 */
class witsml2__Risk;	/* eml2_1ForGsoap.h:1759 */
class witsml2__StimPerforationCluster;	/* eml2_1ForGsoap.h:1767 */
class witsml2__StimProppantAgent;	/* eml2_1ForGsoap.h:1779 */
class witsml2__StimAdditive;	/* eml2_1ForGsoap.h:1785 */
class witsml2__StimJob;	/* eml2_1ForGsoap.h:1797 */
class witsml2__StimJobStage;	/* eml2_1ForGsoap.h:1807 */
class witsml2__SurveyProgram;	/* eml2_1ForGsoap.h:1819 */
class witsml2__Azi;	/* eml2_1ForGsoap.h:1825 */
class witsml2__Inc;	/* eml2_1ForGsoap.h:1827 */
class witsml2__Depth;	/* eml2_1ForGsoap.h:1829 */
class witsml2__ToolErrorTermSet;	/* eml2_1ForGsoap.h:1837 */
class witsml2__Tvd;	/* eml2_1ForGsoap.h:1843 */
class witsml2__WellboreGeology;	/* eml2_1ForGsoap.h:1847 */
class witsml2__ShowEvaluation;	/* eml2_1ForGsoap.h:1849 */
class witsml2__InterpretedGeology;	/* eml2_1ForGsoap.h:1851 */
class witsml2__ShowEvaluationInterval;	/* eml2_1ForGsoap.h:1859 */
class witsml2__CuttingsGeologyInterval;	/* eml2_1ForGsoap.h:1863 */
class witsml2__CuttingsGeology;	/* eml2_1ForGsoap.h:1865 */
class witsml2__InterpretedGeologyInterval;	/* eml2_1ForGsoap.h:1869 */
class witsml2__MudLogForceParameter;	/* eml2_1ForGsoap.h:1877 */
class witsml2__MudLogPressureParameter;	/* eml2_1ForGsoap.h:1879 */
class witsml2__MudLogPressureGradientParameter;	/* eml2_1ForGsoap.h:1881 */
class witsml2__MudLogStringParameter;	/* eml2_1ForGsoap.h:1891 */
class witsml2__MudLogReport;	/* eml2_1ForGsoap.h:1893 */
class witsml2__MudLogConcentrationParameter;	/* eml2_1ForGsoap.h:1903 */
class witsml2__WellboreMarker;	/* eml2_1ForGsoap.h:1913 */
class witsml2__WellboreMarkerSet;	/* eml2_1ForGsoap.h:1915 */
class witsml2__WellCompletion;	/* eml2_1ForGsoap.h:1917 */
class witsml2__WellboreCompletion;	/* eml2_1ForGsoap.h:1921 */
class eml21__AbstractFloatingPointArray;	/* eml2_1ForGsoap.h:279 */
class eml21__AbstractIntegerArray;	/* eml2_1ForGsoap.h:281 */
class eml21__BooleanArrayFromIndexArray;	/* eml2_1ForGsoap.h:291 */
class eml21__BooleanConstantArray;	/* eml2_1ForGsoap.h:293 */
class eml21__BooleanExternalArray;	/* eml2_1ForGsoap.h:295 */
class eml21__GenericMeasure;	/* eml2_1ForGsoap.h:307 */
class eml21__StringConstantArray;	/* eml2_1ForGsoap.h:323 */
class eml21__StringExternalArray;	/* eml2_1ForGsoap.h:325 */
class eml21__AbsorbedDoseMeasure;	/* eml2_1ForGsoap.h:331 */
class eml21__AbsorbedDoseMeasureExt;	/* eml2_1ForGsoap.h:333 */
class eml21__ActivityOfRadioactivityMeasure;	/* eml2_1ForGsoap.h:335 */
class eml21__ActivityOfRadioactivityMeasureExt;	/* eml2_1ForGsoap.h:337 */
class eml21__AmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:339 */
class eml21__AmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:341 */
class eml21__AmountOfSubstancePerAmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:343 */
class eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:345 */
class eml21__AmountOfSubstancePerAreaMeasure;	/* eml2_1ForGsoap.h:347 */
class eml21__AmountOfSubstancePerAreaMeasureExt;	/* eml2_1ForGsoap.h:349 */
class eml21__AmountOfSubstancePerTimeMeasure;	/* eml2_1ForGsoap.h:351 */
class eml21__AmountOfSubstancePerTimeMeasureExt;	/* eml2_1ForGsoap.h:353 */
class eml21__AmountOfSubstancePerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:355 */
class eml21__AmountOfSubstancePerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:357 */
class eml21__AmountOfSubstancePerVolumeMeasure;	/* eml2_1ForGsoap.h:359 */
class eml21__AmountOfSubstancePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:361 */
class eml21__AnglePerLengthMeasure;	/* eml2_1ForGsoap.h:363 */
class eml21__AnglePerLengthMeasureExt;	/* eml2_1ForGsoap.h:365 */
class eml21__AnglePerVolumeMeasure;	/* eml2_1ForGsoap.h:367 */
class eml21__AnglePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:369 */
class eml21__AngularAccelerationMeasure;	/* eml2_1ForGsoap.h:371 */
class eml21__AngularAccelerationMeasureExt;	/* eml2_1ForGsoap.h:373 */
class eml21__AngularVelocityMeasure;	/* eml2_1ForGsoap.h:375 */
class eml21__AngularVelocityMeasureExt;	/* eml2_1ForGsoap.h:377 */
class eml21__APIGammaRayMeasure;	/* eml2_1ForGsoap.h:379 */
class eml21__APIGammaRayMeasureExt;	/* eml2_1ForGsoap.h:381 */
class eml21__APIGravityMeasure;	/* eml2_1ForGsoap.h:383 */
class eml21__APIGravityMeasureExt;	/* eml2_1ForGsoap.h:385 */
class eml21__APINeutronMeasure;	/* eml2_1ForGsoap.h:387 */
class eml21__APINeutronMeasureExt;	/* eml2_1ForGsoap.h:389 */
class eml21__AreaMeasure;	/* eml2_1ForGsoap.h:391 */
class eml21__AreaMeasureExt;	/* eml2_1ForGsoap.h:393 */
class eml21__AreaPerAmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:395 */
class eml21__AreaPerAmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:397 */
class eml21__AreaPerAreaMeasure;	/* eml2_1ForGsoap.h:399 */
class eml21__AreaPerAreaMeasureExt;	/* eml2_1ForGsoap.h:401 */
class eml21__AreaPerCountMeasure;	/* eml2_1ForGsoap.h:403 */
class eml21__AreaPerCountMeasureExt;	/* eml2_1ForGsoap.h:405 */
class eml21__AreaPerMassMeasure;	/* eml2_1ForGsoap.h:407 */
class eml21__AreaPerMassMeasureExt;	/* eml2_1ForGsoap.h:409 */
class eml21__AreaPerTimeMeasure;	/* eml2_1ForGsoap.h:411 */
class eml21__AreaPerTimeMeasureExt;	/* eml2_1ForGsoap.h:413 */
class eml21__AreaPerVolumeMeasure;	/* eml2_1ForGsoap.h:415 */
class eml21__AreaPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:417 */
class eml21__AttenuationPerFrequencyIntervalMeasure;	/* eml2_1ForGsoap.h:419 */
class eml21__AttenuationPerFrequencyIntervalMeasureExt;	/* eml2_1ForGsoap.h:421 */
class eml21__CapacitanceMeasure;	/* eml2_1ForGsoap.h:423 */
class eml21__CapacitanceMeasureExt;	/* eml2_1ForGsoap.h:425 */
class eml21__CationExchangeCapacityMeasure;	/* eml2_1ForGsoap.h:427 */
class eml21__CationExchangeCapacityMeasureExt;	/* eml2_1ForGsoap.h:429 */
class eml21__DataTransferSpeedMeasure;	/* eml2_1ForGsoap.h:431 */
class eml21__DataTransferSpeedMeasureExt;	/* eml2_1ForGsoap.h:433 */
class eml21__DiffusionCoefficientMeasure;	/* eml2_1ForGsoap.h:435 */
class eml21__DiffusionCoefficientMeasureExt;	/* eml2_1ForGsoap.h:437 */
class eml21__DiffusiveTimeOfFlightMeasure;	/* eml2_1ForGsoap.h:439 */
class eml21__DiffusiveTimeOfFlightMeasureExt;	/* eml2_1ForGsoap.h:441 */
class eml21__DigitalStorageMeasure;	/* eml2_1ForGsoap.h:443 */
class eml21__DigitalStorageMeasureExt;	/* eml2_1ForGsoap.h:445 */
class eml21__DimensionlessMeasure;	/* eml2_1ForGsoap.h:447 */
class eml21__DimensionlessMeasureExt;	/* eml2_1ForGsoap.h:449 */
class eml21__DipoleMomentMeasure;	/* eml2_1ForGsoap.h:451 */
class eml21__DipoleMomentMeasureExt;	/* eml2_1ForGsoap.h:453 */
class eml21__DoseEquivalentMeasure;	/* eml2_1ForGsoap.h:455 */
class eml21__DoseEquivalentMeasureExt;	/* eml2_1ForGsoap.h:457 */
class eml21__DynamicViscosityMeasure;	/* eml2_1ForGsoap.h:459 */
class eml21__DynamicViscosityMeasureExt;	/* eml2_1ForGsoap.h:461 */
class eml21__ElectricalResistivityMeasure;	/* eml2_1ForGsoap.h:463 */
class eml21__ElectricalResistivityMeasureExt;	/* eml2_1ForGsoap.h:465 */
class eml21__ElectricChargeMeasure;	/* eml2_1ForGsoap.h:467 */
class eml21__ElectricChargeMeasureExt;	/* eml2_1ForGsoap.h:469 */
class eml21__ElectricChargePerAreaMeasure;	/* eml2_1ForGsoap.h:471 */
class eml21__ElectricChargePerAreaMeasureExt;	/* eml2_1ForGsoap.h:473 */
class eml21__ElectricChargePerMassMeasure;	/* eml2_1ForGsoap.h:475 */
class eml21__ElectricChargePerMassMeasureExt;	/* eml2_1ForGsoap.h:477 */
class eml21__ElectricChargePerVolumeMeasure;	/* eml2_1ForGsoap.h:479 */
class eml21__ElectricChargePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:481 */
class eml21__ElectricConductanceMeasure;	/* eml2_1ForGsoap.h:483 */
class eml21__ElectricConductanceMeasureExt;	/* eml2_1ForGsoap.h:485 */
class eml21__ElectricConductivityMeasure;	/* eml2_1ForGsoap.h:487 */
class eml21__ElectricConductivityMeasureExt;	/* eml2_1ForGsoap.h:489 */
class eml21__ElectricCurrentDensityMeasure;	/* eml2_1ForGsoap.h:491 */
class eml21__ElectricCurrentDensityMeasureExt;	/* eml2_1ForGsoap.h:493 */
class eml21__ElectricCurrentMeasure;	/* eml2_1ForGsoap.h:495 */
class eml21__ElectricCurrentMeasureExt;	/* eml2_1ForGsoap.h:497 */
class eml21__ElectricFieldStrengthMeasure;	/* eml2_1ForGsoap.h:499 */
class eml21__ElectricFieldStrengthMeasureExt;	/* eml2_1ForGsoap.h:501 */
class eml21__ElectricPotentialDifferenceMeasure;	/* eml2_1ForGsoap.h:503 */
class eml21__ElectricPotentialDifferenceMeasureExt;	/* eml2_1ForGsoap.h:505 */
class eml21__ElectricResistanceMeasure;	/* eml2_1ForGsoap.h:507 */
class eml21__ElectricResistanceMeasureExt;	/* eml2_1ForGsoap.h:509 */
class eml21__ElectricResistancePerLengthMeasure;	/* eml2_1ForGsoap.h:511 */
class eml21__ElectricResistancePerLengthMeasureExt;	/* eml2_1ForGsoap.h:513 */
class eml21__ElectromagneticMomentMeasure;	/* eml2_1ForGsoap.h:515 */
class eml21__ElectromagneticMomentMeasureExt;	/* eml2_1ForGsoap.h:517 */
class eml21__EnergyLengthPerAreaMeasure;	/* eml2_1ForGsoap.h:519 */
class eml21__EnergyLengthPerAreaMeasureExt;	/* eml2_1ForGsoap.h:521 */
class eml21__EnergyLengthPerTimeAreaTemperatureMeasure;	/* eml2_1ForGsoap.h:523 */
class eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt;	/* eml2_1ForGsoap.h:525 */
class eml21__EnergyMeasure;	/* eml2_1ForGsoap.h:527 */
class eml21__EnergyMeasureExt;	/* eml2_1ForGsoap.h:529 */
class eml21__EnergyPerAreaMeasure;	/* eml2_1ForGsoap.h:531 */
class eml21__EnergyPerAreaMeasureExt;	/* eml2_1ForGsoap.h:533 */
class eml21__EnergyPerLengthMeasure;	/* eml2_1ForGsoap.h:535 */
class eml21__EnergyPerLengthMeasureExt;	/* eml2_1ForGsoap.h:537 */
class eml21__EnergyPerMassMeasure;	/* eml2_1ForGsoap.h:539 */
class eml21__EnergyPerMassMeasureExt;	/* eml2_1ForGsoap.h:541 */
class eml21__EnergyPerMassPerTimeMeasure;	/* eml2_1ForGsoap.h:543 */
class eml21__EnergyPerMassPerTimeMeasureExt;	/* eml2_1ForGsoap.h:545 */
class eml21__EnergyPerVolumeMeasure;	/* eml2_1ForGsoap.h:547 */
class eml21__EnergyPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:549 */
class eml21__ForceAreaMeasure;	/* eml2_1ForGsoap.h:551 */
class eml21__ForceAreaMeasureExt;	/* eml2_1ForGsoap.h:553 */
class eml21__ForceLengthPerLengthMeasure;	/* eml2_1ForGsoap.h:555 */
class eml21__ForceLengthPerLengthMeasureExt;	/* eml2_1ForGsoap.h:557 */
class eml21__ForceMeasure;	/* eml2_1ForGsoap.h:559 */
class eml21__ForceMeasureExt;	/* eml2_1ForGsoap.h:561 */
class eml21__ForcePerForceMeasure;	/* eml2_1ForGsoap.h:563 */
class eml21__ForcePerForceMeasureExt;	/* eml2_1ForGsoap.h:565 */
class eml21__ForcePerLengthMeasure;	/* eml2_1ForGsoap.h:567 */
class eml21__ForcePerLengthMeasureExt;	/* eml2_1ForGsoap.h:569 */
class eml21__ForcePerVolumeMeasure;	/* eml2_1ForGsoap.h:571 */
class eml21__ForcePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:573 */
class eml21__FrequencyIntervalMeasure;	/* eml2_1ForGsoap.h:575 */
class eml21__FrequencyIntervalMeasureExt;	/* eml2_1ForGsoap.h:577 */
class eml21__FrequencyMeasure;	/* eml2_1ForGsoap.h:579 */
class eml21__FrequencyMeasureExt;	/* eml2_1ForGsoap.h:581 */
class eml21__HeatCapacityMeasure;	/* eml2_1ForGsoap.h:583 */
class eml21__HeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:585 */
class eml21__HeatFlowRateMeasure;	/* eml2_1ForGsoap.h:587 */
class eml21__HeatFlowRateMeasureExt;	/* eml2_1ForGsoap.h:589 */
class eml21__HeatTransferCoefficientMeasure;	/* eml2_1ForGsoap.h:591 */
class eml21__HeatTransferCoefficientMeasureExt;	/* eml2_1ForGsoap.h:593 */
class eml21__IlluminanceMeasure;	/* eml2_1ForGsoap.h:595 */
class eml21__IlluminanceMeasureExt;	/* eml2_1ForGsoap.h:597 */
class eml21__InductanceMeasure;	/* eml2_1ForGsoap.h:599 */
class eml21__InductanceMeasureExt;	/* eml2_1ForGsoap.h:601 */
class eml21__IsothermalCompressibilityMeasure;	/* eml2_1ForGsoap.h:603 */
class eml21__IsothermalCompressibilityMeasureExt;	/* eml2_1ForGsoap.h:605 */
class eml21__KinematicViscosityMeasure;	/* eml2_1ForGsoap.h:607 */
class eml21__KinematicViscosityMeasureExt;	/* eml2_1ForGsoap.h:609 */
class eml21__LengthMeasure;	/* eml2_1ForGsoap.h:611 */
class eml21__LengthMeasureExt;	/* eml2_1ForGsoap.h:613 */
class eml21__LengthPerLengthMeasure;	/* eml2_1ForGsoap.h:615 */
class eml21__LengthPerLengthMeasureExt;	/* eml2_1ForGsoap.h:617 */
class eml21__LengthPerMassMeasure;	/* eml2_1ForGsoap.h:619 */
class eml21__LengthPerMassMeasureExt;	/* eml2_1ForGsoap.h:621 */
class eml21__LengthPerPressureMeasure;	/* eml2_1ForGsoap.h:623 */
class eml21__LengthPerPressureMeasureExt;	/* eml2_1ForGsoap.h:625 */
class eml21__LengthPerTemperatureMeasure;	/* eml2_1ForGsoap.h:627 */
class eml21__LengthPerTemperatureMeasureExt;	/* eml2_1ForGsoap.h:629 */
class eml21__LengthPerTimeMeasure;	/* eml2_1ForGsoap.h:631 */
class eml21__LengthPerTimeMeasureExt;	/* eml2_1ForGsoap.h:633 */
class eml21__LengthPerVolumeMeasure;	/* eml2_1ForGsoap.h:635 */
class eml21__LengthPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:637 */
class eml21__LightExposureMeasure;	/* eml2_1ForGsoap.h:639 */
class eml21__LightExposureMeasureExt;	/* eml2_1ForGsoap.h:641 */
class eml21__LinearAccelerationMeasure;	/* eml2_1ForGsoap.h:643 */
class eml21__LinearAccelerationMeasureExt;	/* eml2_1ForGsoap.h:645 */
class eml21__LinearThermalExpansionMeasure;	/* eml2_1ForGsoap.h:647 */
class eml21__LinearThermalExpansionMeasureExt;	/* eml2_1ForGsoap.h:649 */
class eml21__LogarithmicPowerRatioMeasure;	/* eml2_1ForGsoap.h:651 */
class eml21__LogarithmicPowerRatioMeasureExt;	/* eml2_1ForGsoap.h:653 */
class eml21__LogarithmicPowerRatioPerLengthMeasure;	/* eml2_1ForGsoap.h:655 */
class eml21__LogarithmicPowerRatioPerLengthMeasureExt;	/* eml2_1ForGsoap.h:657 */
class eml21__LuminanceMeasure;	/* eml2_1ForGsoap.h:659 */
class eml21__LuminanceMeasureExt;	/* eml2_1ForGsoap.h:661 */
class eml21__LuminousEfficacyMeasure;	/* eml2_1ForGsoap.h:663 */
class eml21__LuminousEfficacyMeasureExt;	/* eml2_1ForGsoap.h:665 */
class eml21__LuminousFluxMeasure;	/* eml2_1ForGsoap.h:667 */
class eml21__LuminousFluxMeasureExt;	/* eml2_1ForGsoap.h:669 */
class eml21__LuminousIntensityMeasure;	/* eml2_1ForGsoap.h:671 */
class eml21__LuminousIntensityMeasureExt;	/* eml2_1ForGsoap.h:673 */
class eml21__MagneticDipoleMomentMeasure;	/* eml2_1ForGsoap.h:675 */
class eml21__MagneticDipoleMomentMeasureExt;	/* eml2_1ForGsoap.h:677 */
class eml21__MagneticFieldStrengthMeasure;	/* eml2_1ForGsoap.h:679 */
class eml21__MagneticFieldStrengthMeasureExt;	/* eml2_1ForGsoap.h:681 */
class eml21__MagneticFluxDensityMeasure;	/* eml2_1ForGsoap.h:683 */
class eml21__MagneticFluxDensityMeasureExt;	/* eml2_1ForGsoap.h:685 */
class eml21__MagneticFluxDensityPerLengthMeasure;	/* eml2_1ForGsoap.h:687 */
class eml21__MagneticFluxDensityPerLengthMeasureExt;	/* eml2_1ForGsoap.h:689 */
class eml21__MagneticFluxMeasure;	/* eml2_1ForGsoap.h:691 */
class eml21__MagneticFluxMeasureExt;	/* eml2_1ForGsoap.h:693 */
class eml21__MagneticPermeabilityMeasure;	/* eml2_1ForGsoap.h:695 */
class eml21__MagneticPermeabilityMeasureExt;	/* eml2_1ForGsoap.h:697 */
class eml21__MagneticVectorPotentialMeasure;	/* eml2_1ForGsoap.h:699 */
class eml21__MagneticVectorPotentialMeasureExt;	/* eml2_1ForGsoap.h:701 */
class eml21__MassLengthMeasure;	/* eml2_1ForGsoap.h:703 */
class eml21__MassLengthMeasureExt;	/* eml2_1ForGsoap.h:705 */
class eml21__MassMeasure;	/* eml2_1ForGsoap.h:707 */
class eml21__MassMeasureExt;	/* eml2_1ForGsoap.h:709 */
class eml21__MassPerAreaMeasure;	/* eml2_1ForGsoap.h:711 */
class eml21__MassPerAreaMeasureExt;	/* eml2_1ForGsoap.h:713 */
class eml21__MassPerEnergyMeasure;	/* eml2_1ForGsoap.h:715 */
class eml21__MassPerEnergyMeasureExt;	/* eml2_1ForGsoap.h:717 */
class eml21__MassPerLengthMeasure;	/* eml2_1ForGsoap.h:719 */
class eml21__MassPerLengthMeasureExt;	/* eml2_1ForGsoap.h:721 */
class eml21__MassPerMassMeasure;	/* eml2_1ForGsoap.h:723 */
class eml21__MassPerMassMeasureExt;	/* eml2_1ForGsoap.h:725 */
class eml21__MassPerTimeMeasure;	/* eml2_1ForGsoap.h:727 */
class eml21__MassPerTimeMeasureExt;	/* eml2_1ForGsoap.h:729 */
class eml21__MassPerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:731 */
class eml21__MassPerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:733 */
class eml21__MassPerTimePerLengthMeasure;	/* eml2_1ForGsoap.h:735 */
class eml21__MassPerTimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:737 */
class eml21__MassPerVolumeMeasure;	/* eml2_1ForGsoap.h:739 */
class eml21__MassPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:741 */
class eml21__MassPerVolumePerLengthMeasure;	/* eml2_1ForGsoap.h:743 */
class eml21__MassPerVolumePerLengthMeasureExt;	/* eml2_1ForGsoap.h:745 */
class eml21__MassPerVolumePerPressureMeasure;	/* eml2_1ForGsoap.h:747 */
class eml21__MassPerVolumePerPressureMeasureExt;	/* eml2_1ForGsoap.h:749 */
class eml21__MassPerVolumePerTemperatureMeasure;	/* eml2_1ForGsoap.h:751 */
class eml21__MassPerVolumePerTemperatureMeasureExt;	/* eml2_1ForGsoap.h:753 */
class eml21__MobilityMeasure;	/* eml2_1ForGsoap.h:755 */
class eml21__MobilityMeasureExt;	/* eml2_1ForGsoap.h:757 */
class eml21__MolarEnergyMeasure;	/* eml2_1ForGsoap.h:759 */
class eml21__MolarEnergyMeasureExt;	/* eml2_1ForGsoap.h:761 */
class eml21__MolarHeatCapacityMeasure;	/* eml2_1ForGsoap.h:763 */
class eml21__MolarHeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:765 */
class eml21__MolarVolumeMeasure;	/* eml2_1ForGsoap.h:767 */
class eml21__MolarVolumeMeasureExt;	/* eml2_1ForGsoap.h:769 */
class eml21__MolecularWeightMeasure;	/* eml2_1ForGsoap.h:771 */
class eml21__MolecularWeightMeasureExt;	/* eml2_1ForGsoap.h:773 */
class eml21__MomentOfForceMeasure;	/* eml2_1ForGsoap.h:775 */
class eml21__MomentOfForceMeasureExt;	/* eml2_1ForGsoap.h:777 */
class eml21__MomentOfInertiaMeasure;	/* eml2_1ForGsoap.h:779 */
class eml21__MomentOfInertiaMeasureExt;	/* eml2_1ForGsoap.h:781 */
class eml21__MomentumMeasure;	/* eml2_1ForGsoap.h:783 */
class eml21__MomentumMeasureExt;	/* eml2_1ForGsoap.h:785 */
class eml21__NormalizedPowerMeasure;	/* eml2_1ForGsoap.h:787 */
class eml21__NormalizedPowerMeasureExt;	/* eml2_1ForGsoap.h:789 */
class eml21__PermeabilityLengthMeasure;	/* eml2_1ForGsoap.h:791 */
class eml21__PermeabilityLengthMeasureExt;	/* eml2_1ForGsoap.h:793 */
class eml21__PermeabilityRockMeasure;	/* eml2_1ForGsoap.h:795 */
class eml21__PermeabilityRockMeasureExt;	/* eml2_1ForGsoap.h:797 */
class eml21__PermittivityMeasure;	/* eml2_1ForGsoap.h:799 */
class eml21__PermittivityMeasureExt;	/* eml2_1ForGsoap.h:801 */
class eml21__PlaneAngleMeasure;	/* eml2_1ForGsoap.h:803 */
class eml21__PlaneAngleMeasureExt;	/* eml2_1ForGsoap.h:805 */
class eml21__PotentialDifferencePerPowerDropMeasure;	/* eml2_1ForGsoap.h:807 */
class eml21__PotentialDifferencePerPowerDropMeasureExt;	/* eml2_1ForGsoap.h:809 */
class eml21__PowerMeasure;	/* eml2_1ForGsoap.h:811 */
class eml21__PowerMeasureExt;	/* eml2_1ForGsoap.h:813 */
class eml21__PowerPerAreaMeasure;	/* eml2_1ForGsoap.h:815 */
class eml21__PowerPerAreaMeasureExt;	/* eml2_1ForGsoap.h:817 */
class eml21__PowerPerPowerMeasure;	/* eml2_1ForGsoap.h:819 */
class eml21__PowerPerPowerMeasureExt;	/* eml2_1ForGsoap.h:821 */
class eml21__PowerPerVolumeMeasure;	/* eml2_1ForGsoap.h:823 */
class eml21__PowerPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:825 */
class eml21__PressureMeasure;	/* eml2_1ForGsoap.h:827 */
class eml21__PressureMeasureExt;	/* eml2_1ForGsoap.h:829 */
class eml21__PressurePerPressureMeasure;	/* eml2_1ForGsoap.h:831 */
class eml21__PressurePerPressureMeasureExt;	/* eml2_1ForGsoap.h:833 */
class eml21__PressurePerTimeMeasure;	/* eml2_1ForGsoap.h:835 */
class eml21__PressurePerTimeMeasureExt;	/* eml2_1ForGsoap.h:837 */
class eml21__PressurePerVolumeMeasure;	/* eml2_1ForGsoap.h:839 */
class eml21__PressurePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:841 */
class eml21__PressureSquaredMeasure;	/* eml2_1ForGsoap.h:843 */
class eml21__PressureSquaredMeasureExt;	/* eml2_1ForGsoap.h:845 */
class eml21__PressureSquaredPerForceTimePerAreaMeasure;	/* eml2_1ForGsoap.h:847 */
class eml21__PressureSquaredPerForceTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:849 */
class eml21__PressureTimePerVolumeMeasure;	/* eml2_1ForGsoap.h:851 */
class eml21__PressureTimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:853 */
class eml21__QuantityOfLightMeasure;	/* eml2_1ForGsoap.h:855 */
class eml21__QuantityOfLightMeasureExt;	/* eml2_1ForGsoap.h:857 */
class eml21__RadianceMeasure;	/* eml2_1ForGsoap.h:859 */
class eml21__RadianceMeasureExt;	/* eml2_1ForGsoap.h:861 */
class eml21__RadiantIntensityMeasure;	/* eml2_1ForGsoap.h:863 */
class eml21__RadiantIntensityMeasureExt;	/* eml2_1ForGsoap.h:865 */
class eml21__ReciprocalAreaMeasure;	/* eml2_1ForGsoap.h:867 */
class eml21__ReciprocalAreaMeasureExt;	/* eml2_1ForGsoap.h:869 */
class eml21__ReciprocalElectricPotentialDifferenceMeasure;	/* eml2_1ForGsoap.h:871 */
class eml21__ReciprocalElectricPotentialDifferenceMeasureExt;	/* eml2_1ForGsoap.h:873 */
class eml21__ReciprocalForceMeasure;	/* eml2_1ForGsoap.h:875 */
class eml21__ReciprocalForceMeasureExt;	/* eml2_1ForGsoap.h:877 */
class eml21__ReciprocalLengthMeasure;	/* eml2_1ForGsoap.h:879 */
class eml21__ReciprocalLengthMeasureExt;	/* eml2_1ForGsoap.h:881 */
class eml21__ReciprocalMassMeasure;	/* eml2_1ForGsoap.h:883 */
class eml21__ReciprocalMassMeasureExt;	/* eml2_1ForGsoap.h:885 */
class eml21__ReciprocalMassTimeMeasure;	/* eml2_1ForGsoap.h:887 */
class eml21__ReciprocalMassTimeMeasureExt;	/* eml2_1ForGsoap.h:889 */
class eml21__ReciprocalPressureMeasure;	/* eml2_1ForGsoap.h:891 */
class eml21__ReciprocalPressureMeasureExt;	/* eml2_1ForGsoap.h:893 */
class eml21__ReciprocalTimeMeasure;	/* eml2_1ForGsoap.h:895 */
class eml21__ReciprocalTimeMeasureExt;	/* eml2_1ForGsoap.h:897 */
class eml21__ReciprocalVolumeMeasure;	/* eml2_1ForGsoap.h:899 */
class eml21__ReciprocalVolumeMeasureExt;	/* eml2_1ForGsoap.h:901 */
class eml21__ReluctanceMeasure;	/* eml2_1ForGsoap.h:903 */
class eml21__ReluctanceMeasureExt;	/* eml2_1ForGsoap.h:905 */
class eml21__SecondMomentOfAreaMeasure;	/* eml2_1ForGsoap.h:907 */
class eml21__SecondMomentOfAreaMeasureExt;	/* eml2_1ForGsoap.h:909 */
class eml21__SignalingEventPerTimeMeasure;	/* eml2_1ForGsoap.h:911 */
class eml21__SignalingEventPerTimeMeasureExt;	/* eml2_1ForGsoap.h:913 */
class eml21__SolidAngleMeasure;	/* eml2_1ForGsoap.h:915 */
class eml21__SolidAngleMeasureExt;	/* eml2_1ForGsoap.h:917 */
class eml21__SpecificHeatCapacityMeasure;	/* eml2_1ForGsoap.h:919 */
class eml21__SpecificHeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:921 */
class eml21__TemperatureIntervalMeasure;	/* eml2_1ForGsoap.h:923 */
class eml21__TemperatureIntervalMeasureExt;	/* eml2_1ForGsoap.h:925 */
class eml21__TemperatureIntervalPerLengthMeasure;	/* eml2_1ForGsoap.h:927 */
class eml21__TemperatureIntervalPerLengthMeasureExt;	/* eml2_1ForGsoap.h:929 */
class eml21__TemperatureIntervalPerPressureMeasure;	/* eml2_1ForGsoap.h:931 */
class eml21__TemperatureIntervalPerPressureMeasureExt;	/* eml2_1ForGsoap.h:933 */
class eml21__TemperatureIntervalPerTimeMeasure;	/* eml2_1ForGsoap.h:935 */
class eml21__TemperatureIntervalPerTimeMeasureExt;	/* eml2_1ForGsoap.h:937 */
class eml21__ThermalConductanceMeasure;	/* eml2_1ForGsoap.h:939 */
class eml21__ThermalConductanceMeasureExt;	/* eml2_1ForGsoap.h:941 */
class eml21__ThermalConductivityMeasure;	/* eml2_1ForGsoap.h:943 */
class eml21__ThermalConductivityMeasureExt;	/* eml2_1ForGsoap.h:945 */
class eml21__ThermalDiffusivityMeasure;	/* eml2_1ForGsoap.h:947 */
class eml21__ThermalDiffusivityMeasureExt;	/* eml2_1ForGsoap.h:949 */
class eml21__ThermalInsulanceMeasure;	/* eml2_1ForGsoap.h:951 */
class eml21__ThermalInsulanceMeasureExt;	/* eml2_1ForGsoap.h:953 */
class eml21__ThermalResistanceMeasure;	/* eml2_1ForGsoap.h:955 */
class eml21__ThermalResistanceMeasureExt;	/* eml2_1ForGsoap.h:957 */
class eml21__ThermodynamicTemperatureMeasure;	/* eml2_1ForGsoap.h:959 */
class eml21__ThermodynamicTemperatureMeasureExt;	/* eml2_1ForGsoap.h:961 */
class eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure;	/* eml2_1ForGsoap.h:963 */
class eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt;	/* eml2_1ForGsoap.h:965 */
class eml21__TimeMeasure;	/* eml2_1ForGsoap.h:967 */
class eml21__TimeMeasureExt;	/* eml2_1ForGsoap.h:969 */
class eml21__TimePerLengthMeasure;	/* eml2_1ForGsoap.h:971 */
class eml21__TimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:973 */
class eml21__TimePerMassMeasure;	/* eml2_1ForGsoap.h:975 */
class eml21__TimePerMassMeasureExt;	/* eml2_1ForGsoap.h:977 */
class eml21__TimePerTimeMeasure;	/* eml2_1ForGsoap.h:979 */
class eml21__TimePerTimeMeasureExt;	/* eml2_1ForGsoap.h:981 */
class eml21__TimePerVolumeMeasure;	/* eml2_1ForGsoap.h:983 */
class eml21__TimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:985 */
class eml21__UnitlessMeasure;	/* eml2_1ForGsoap.h:987 */
class eml21__VerticalCoordinateMeasure;	/* eml2_1ForGsoap.h:989 */
class eml21__VerticalCoordinateMeasureExt;	/* eml2_1ForGsoap.h:991 */
class eml21__VolumeFlowRatePerVolumeFlowRateMeasure;	/* eml2_1ForGsoap.h:993 */
class eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt;	/* eml2_1ForGsoap.h:995 */
class eml21__VolumeMeasure;	/* eml2_1ForGsoap.h:997 */
class eml21__VolumeMeasureExt;	/* eml2_1ForGsoap.h:999 */
class eml21__VolumePerAreaMeasure;	/* eml2_1ForGsoap.h:1001 */
class eml21__VolumePerAreaMeasureExt;	/* eml2_1ForGsoap.h:1003 */
class eml21__VolumePerLengthMeasure;	/* eml2_1ForGsoap.h:1005 */
class eml21__VolumePerLengthMeasureExt;	/* eml2_1ForGsoap.h:1007 */
class eml21__VolumePerMassMeasure;	/* eml2_1ForGsoap.h:1009 */
class eml21__VolumePerMassMeasureExt;	/* eml2_1ForGsoap.h:1011 */
class eml21__VolumePerPressureMeasure;	/* eml2_1ForGsoap.h:1013 */
class eml21__VolumePerPressureMeasureExt;	/* eml2_1ForGsoap.h:1015 */
class eml21__VolumePerRotationMeasure;	/* eml2_1ForGsoap.h:1017 */
class eml21__VolumePerRotationMeasureExt;	/* eml2_1ForGsoap.h:1019 */
class eml21__VolumePerTimeLengthMeasure;	/* eml2_1ForGsoap.h:1021 */
class eml21__VolumePerTimeLengthMeasureExt;	/* eml2_1ForGsoap.h:1023 */
class eml21__VolumePerTimeMeasure;	/* eml2_1ForGsoap.h:1025 */
class eml21__VolumePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1027 */
class eml21__VolumePerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:1029 */
class eml21__VolumePerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:1031 */
class eml21__VolumePerTimePerLengthMeasure;	/* eml2_1ForGsoap.h:1033 */
class eml21__VolumePerTimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:1035 */
class eml21__VolumePerTimePerPressureLengthMeasure;	/* eml2_1ForGsoap.h:1037 */
class eml21__VolumePerTimePerPressureLengthMeasureExt;	/* eml2_1ForGsoap.h:1039 */
class eml21__VolumePerTimePerPressureMeasure;	/* eml2_1ForGsoap.h:1041 */
class eml21__VolumePerTimePerPressureMeasureExt;	/* eml2_1ForGsoap.h:1043 */
class eml21__VolumePerTimePerTimeMeasure;	/* eml2_1ForGsoap.h:1045 */
class eml21__VolumePerTimePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1047 */
class eml21__VolumePerTimePerVolumeMeasure;	/* eml2_1ForGsoap.h:1049 */
class eml21__VolumePerTimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1051 */
class eml21__VolumePerVolumeMeasure;	/* eml2_1ForGsoap.h:1053 */
class eml21__VolumePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1055 */
class eml21__VolumetricHeatTransferCoefficientMeasure;	/* eml2_1ForGsoap.h:1057 */
class eml21__VolumetricHeatTransferCoefficientMeasureExt;	/* eml2_1ForGsoap.h:1059 */
class eml21__VolumetricThermalExpansionMeasure;	/* eml2_1ForGsoap.h:1061 */
class eml21__VolumetricThermalExpansionMeasureExt;	/* eml2_1ForGsoap.h:1063 */
class eml21__ReferencePressure;	/* eml2_1ForGsoap.h:1125 */
class gml__DefinitionType;	/* eml2_1ForGsoap.h:1193 */
class gml__CodeWithAuthorityType;	/* eml2_1ForGsoap.h:1203 */
class gml__AbstractTimePrimitiveType;	/* eml2_1ForGsoap.h:1207 */
class gml__AngleType;	/* eml2_1ForGsoap.h:1243 */
class gml__LengthType;	/* eml2_1ForGsoap.h:1251 */
class gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType;	/* eml2_1ForGsoap.h:1299 */
class witsml2__WellVerticalDepthCoord;	/* eml2_1ForGsoap.h:1375 */
class witsml2__MeasuredDepthCoord;	/* eml2_1ForGsoap.h:1381 */
class witsml2__DistanceNorthSouth;	/* eml2_1ForGsoap.h:1385 */
class witsml2__DistanceEastWest;	/* eml2_1ForGsoap.h:1387 */
class witsml2__WellElevationCoord;	/* eml2_1ForGsoap.h:1397 */
class witsml2__MeasureOrQuantity;	/* eml2_1ForGsoap.h:1731 */
class eml21__AuthorityQualifiedName;	/* eml2_1ForGsoap.h:289 */
class eml21__FloatingPointConstantArray;	/* eml2_1ForGsoap.h:301 */
class eml21__FloatingPointExternalArray;	/* eml2_1ForGsoap.h:303 */
class eml21__FloatingPointLatticeArray;	/* eml2_1ForGsoap.h:305 */
class eml21__IntegerArrayFromBooleanMaskArray;	/* eml2_1ForGsoap.h:309 */
class eml21__IntegerConstantArray;	/* eml2_1ForGsoap.h:311 */
class eml21__IntegerExternalArray;	/* eml2_1ForGsoap.h:313 */
class eml21__IntegerLatticeArray;	/* eml2_1ForGsoap.h:315 */
class eml21__IntegerRangeArray;	/* eml2_1ForGsoap.h:317 */
class eml21__StringMeasure;	/* eml2_1ForGsoap.h:327 */
class gml__IdentifiedObjectType;	/* eml2_1ForGsoap.h:1191 */
class witsml2__TimestampedCommentString;	/* eml2_1ForGsoap.h:1429 */
class witsml2__EventType;	/* eml2_1ForGsoap.h:1573 */
class witsml2__LithostratigraphicUnit;	/* eml2_1ForGsoap.h:1853 */
class witsml2__GeochronologicalUnit;	/* eml2_1ForGsoap.h:1867 */
class eml21__DoubleExternalArray;	/* eml2_1ForGsoap.h:297 */
class eml21__FloatExternalArray;	/* eml2_1ForGsoap.h:299 */
class gml__AbstractCRSType;	/* eml2_1ForGsoap.h:1189 */
class gml__AbstractCoordinateSystemType;	/* eml2_1ForGsoap.h:1219 */
class gml__CoordinateSystemAxisType;	/* eml2_1ForGsoap.h:1223 */
class gml__AbstractDatumType;	/* eml2_1ForGsoap.h:1237 */
class gml__PrimeMeridianType;	/* eml2_1ForGsoap.h:1241 */
class gml__EllipsoidType;	/* eml2_1ForGsoap.h:1249 */
class gml__AbstractCoordinateOperationType;	/* eml2_1ForGsoap.h:1261 */
union _gml__union_GeodeticCRSType;	/* eml2_1ForGsoap.h:62611 */
class gml__GeodeticCRSType;	/* eml2_1ForGsoap.h:1187 */
class gml__EllipsoidalCSType;	/* eml2_1ForGsoap.h:1217 */
class gml__CartesianCSType;	/* eml2_1ForGsoap.h:1227 */
class gml__SphericalCSType;	/* eml2_1ForGsoap.h:1231 */
class gml__GeodeticDatumType;	/* eml2_1ForGsoap.h:1235 */
class gml__AbstractGeneralDerivedCRSType;	/* eml2_1ForGsoap.h:1255 */
class gml__AbstractGeneralConversionType;	/* eml2_1ForGsoap.h:1259 */
class gml__VerticalCRSType;	/* eml2_1ForGsoap.h:1267 */
class gml__VerticalCSType;	/* eml2_1ForGsoap.h:1271 */
class gml__VerticalDatumType;	/* eml2_1ForGsoap.h:1275 */
union _gml__union_ProjectedCRSType;	/* eml2_1ForGsoap.h:63145 */
class gml__ProjectedCRSType;	/* eml2_1ForGsoap.h:1253 */

/* eml2_1ForGsoap.h:237 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary
#define SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary (-8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* custom/struct_tm.h:70 */
#ifndef SOAP_TYPE_gsoap_eml2_1_tm
#define SOAP_TYPE_gsoap_eml2_1_tm (-12)
#if 0 /* Volatile: declared external of the data binding interface and not redeclared here */
struct SOAP_CMAC tm {
      public:
        /** Required element 'tm-sec' of XML schema type 'xsd:int' */
        int tm_sec;
        /** Required element 'tm-min' of XML schema type 'xsd:int' */
        int tm_min;
        /** Required element 'tm-hour' of XML schema type 'xsd:int' */
        int tm_hour;
        /** Required element 'tm-mday' of XML schema type 'xsd:int' */
        int tm_mday;
        /** Required element 'tm-mon' of XML schema type 'xsd:int' */
        int tm_mon;
        /** Required element 'tm-year' of XML schema type 'xsd:int' */
        int tm_year;
        /** Required element 'tm-isdst' of XML schema type 'xsd:int' */
        int tm_isdst;
};
#endif
#endif

/* eml2_1ForGsoap.h:267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject (-19)
/* complex XML schema type 'eml21:AbstractObject': */
class SOAP_CMAC eml21__AbstractObject {
      public:
        /// Optional element 'eml21:Aliases' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> Aliases;
        /// Required element 'eml21:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'eml21:CustomData' of XML schema type 'eml21:CustomData'
        eml21__CustomData *CustomData;
        /// Optional element 'eml21:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional attribute 'objectVersion' of XML schema type 'eml21:String64'
        std::string *objectVersion;
        /// Required attribute 'schemaVersion' of XML schema type 'eml21:String64'
        std::string schemaVersion;
        /// Required attribute 'uuid' of XML schema type 'eml21:UuidString'
        std::string uuid;
        /// Optional attribute 'existenceKind' of XML schema type 'eml21:ExistenceKind'
        enum eml21__ExistenceKind *existenceKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractObject, default initialized and not managed by a soap context
        virtual eml21__AbstractObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractObject); }
      public:
        /// Constructor with default initializations
        eml21__AbstractObject() : Aliases(), Citation(), CustomData(), ExtensionNameValue(), objectVersion(), schemaVersion(), uuid(), existenceKind(), soap() { }
        virtual ~eml21__AbstractObject() { }
        /// Friend allocator used by soap_new_eml21__AbstractObject(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractObject * SOAP_FMAC2 soap_instantiate_eml21__AbstractObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:269 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_eml21__Citation (-20)
/* complex XML schema type 'eml21:Citation': */
class SOAP_CMAC eml21__Citation {
      public:
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Required element 'eml21:Originator' of XML schema type 'eml21:String64'
        std::string Originator;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm Creation;
        /// Required element 'eml21:Format' of XML schema type 'eml21:String2000'
        std::string Format;
        /// Optional element 'eml21:Editor' of XML schema type 'eml21:String64'
        std::string *Editor;
        /// Optional element 'eml21:LastUpdate' of XML schema type 'xsd:dateTime'
        struct tm *LastUpdate;
        /// Optional element 'eml21:VersionString' of XML schema type 'eml21:String64'
        std::string *VersionString;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'eml21:DescriptiveKeywords' of XML schema type 'eml21:String2000'
        std::string *DescriptiveKeywords;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__Citation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__Citation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__Citation, default initialized and not managed by a soap context
        virtual eml21__Citation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__Citation); }
      public:
        /// Constructor with default initializations
        eml21__Citation() : Title(), Originator(), Creation(), Format(), Editor(), LastUpdate(), VersionString(), Description(), DescriptiveKeywords(), soap() { }
        virtual ~eml21__Citation() { }
        /// Friend allocator used by soap_new_eml21__Citation(struct soap*, int)
        friend SOAP_FMAC1 eml21__Citation * SOAP_FMAC2 soap_instantiate_eml21__Citation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_eml21__CustomData (-21)
/* complex XML schema type 'eml21:CustomData': */
class SOAP_CMAC eml21__CustomData {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CustomData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CustomData, default initialized and not managed by a soap context
        virtual eml21__CustomData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CustomData); }
      public:
        /// Constructor with default initializations
        eml21__CustomData() : __any(), soap() { }
        virtual ~eml21__CustomData() { }
        /// Friend allocator used by soap_new_eml21__CustomData(struct soap*, int)
        friend SOAP_FMAC1 eml21__CustomData * SOAP_FMAC2 soap_instantiate_eml21__CustomData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue (-22)
/* complex XML schema type 'eml21:ExtensionNameValue': */
class SOAP_CMAC eml21__ExtensionNameValue {
      public:
        /// Required element 'eml21:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'eml21:Value' of XML schema type 'eml21:StringMeasure'
        eml21__StringMeasure *Value;
        /// Optional element 'eml21:MeasureClass' of XML schema type 'eml21:MeasureClass'
        enum eml21__MeasureClass *MeasureClass;
        /// Optional element 'eml21:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'eml21:Index' of XML schema type 'xsd:int'
        int *Index;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExtensionNameValue, default initialized and not managed by a soap context
        virtual eml21__ExtensionNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExtensionNameValue); }
      public:
        /// Constructor with default initializations
        eml21__ExtensionNameValue() : Name(), Value(), MeasureClass(), DTim(), Index(), Description(), soap() { }
        virtual ~eml21__ExtensionNameValue() { }
        /// Friend allocator used by soap_new_eml21__ExtensionNameValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExtensionNameValue * SOAP_FMAC2 soap_instantiate_eml21__ExtensionNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:275 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias (-23)
/* complex XML schema type 'eml21:ObjectAlias': */
class SOAP_CMAC eml21__ObjectAlias {
      public:
        /// Required element 'eml21:Identifier' of XML schema type 'eml21:String64'
        std::string Identifier;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ObjectAlias, default initialized and not managed by a soap context
        virtual eml21__ObjectAlias *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ObjectAlias); }
      public:
        /// Constructor with default initializations
        eml21__ObjectAlias() : Identifier(), Description(), authority(), soap() { }
        virtual ~eml21__ObjectAlias() { }
        /// Friend allocator used by soap_new_eml21__ObjectAlias(struct soap*, int)
        friend SOAP_FMAC1 eml21__ObjectAlias * SOAP_FMAC2 soap_instantiate_eml21__ObjectAlias(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:287 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray (-29)
/* complex XML schema type 'eml21:AbstractValueArray': */
class SOAP_CMAC eml21__AbstractValueArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractValueArray, default initialized and not managed by a soap context
        virtual eml21__AbstractValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractValueArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractValueArray() : soap() { }
        virtual ~eml21__AbstractValueArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractValueArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractValueArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:319 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray (-45)
/* complex XML schema type 'eml21:JaggedArray': */
class SOAP_CMAC eml21__JaggedArray {
      public:
        /// Required element 'eml21:Elements' of XML schema type 'eml21:AbstractValueArray'
        eml21__AbstractValueArray *Elements;
        /// Required element 'eml21:CumulativeLength' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *CumulativeLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__JaggedArray, default initialized and not managed by a soap context
        virtual eml21__JaggedArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__JaggedArray); }
      public:
        /// Constructor with default initializations
        eml21__JaggedArray() : Elements(), CumulativeLength(), soap() { }
        virtual ~eml21__JaggedArray() { }
        /// Friend allocator used by soap_new_eml21__JaggedArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__JaggedArray * SOAP_FMAC2 soap_instantiate_eml21__JaggedArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval (-46)
/* complex XML schema type 'eml21:MdInterval': */
class SOAP_CMAC eml21__MdInterval {
      public:
        /// Required element 'eml21:MdTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdTop;
        /// Required element 'eml21:MdBase' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdBase;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MdInterval, default initialized and not managed by a soap context
        virtual eml21__MdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MdInterval); }
      public:
        /// Constructor with default initializations
        eml21__MdInterval() : MdTop(), MdBase(), datum(), soap() { }
        virtual ~eml21__MdInterval() { }
        /// Friend allocator used by soap_new_eml21__MdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml21__MdInterval * SOAP_FMAC2 soap_instantiate_eml21__MdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:329 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval (-50)
/* complex XML schema type 'eml21:TvdInterval': */
class SOAP_CMAC eml21__TvdInterval {
      public:
        /// Required element 'eml21:TvdTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdTop;
        /// Required element 'eml21:TvdBase' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdBase;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TvdInterval, default initialized and not managed by a soap context
        virtual eml21__TvdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TvdInterval); }
      public:
        /// Constructor with default initializations
        eml21__TvdInterval() : TvdTop(), TvdBase(), datum(), soap() { }
        virtual ~eml21__TvdInterval() { }
        /// Friend allocator used by soap_new_eml21__TvdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml21__TvdInterval * SOAP_FMAC2 soap_instantiate_eml21__TvdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1065 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference (-418)
/* complex XML schema type 'eml21:DataObjectReference': */
class SOAP_CMAC eml21__DataObjectReference {
      public:
        /// Required element 'eml21:ContentType' of XML schema type 'eml21:String2000'
        std::string ContentType;
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Required element 'eml21:Uuid' of XML schema type 'eml21:UuidString'
        std::string Uuid;
        /// Optional element 'eml21:UuidAuthority' of XML schema type 'eml21:String64'
        std::string *UuidAuthority;
        /// Optional element 'eml21:Uri' of XML schema type 'xsd:anyURI'
        std::string *Uri;
        /// Optional element 'eml21:VersionString' of XML schema type 'eml21:String64'
        std::string *VersionString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataObjectReference, default initialized and not managed by a soap context
        virtual eml21__DataObjectReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataObjectReference); }
      public:
        /// Constructor with default initializations
        eml21__DataObjectReference() : ContentType(), Title(), Uuid(), UuidAuthority(), Uri(), VersionString(), soap() { }
        virtual ~eml21__DataObjectReference() { }
        /// Friend allocator used by soap_new_eml21__DataObjectReference(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataObjectReference * SOAP_FMAC2 soap_instantiate_eml21__DataObjectReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1069 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset (-420)
/* complex XML schema type 'eml21:ExternalDataset': */
class SOAP_CMAC eml21__ExternalDataset {
      public:
        /// Required element 'eml21:ExternalFileProxy' of XML schema type 'eml21:ExternalDatasetPart'
        std::vector<eml21__ExternalDatasetPart *> ExternalFileProxy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExternalDataset, default initialized and not managed by a soap context
        virtual eml21__ExternalDataset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExternalDataset); }
      public:
        /// Constructor with default initializations
        eml21__ExternalDataset() : ExternalFileProxy(), soap() { }
        virtual ~eml21__ExternalDataset() { }
        /// Friend allocator used by soap_new_eml21__ExternalDataset(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExternalDataset * SOAP_FMAC2 soap_instantiate_eml21__ExternalDataset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1071 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart (-421)
/* complex XML schema type 'eml21:ExternalDatasetPart': */
class SOAP_CMAC eml21__ExternalDatasetPart {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:PathInExternalFile' of XML schema type 'eml21:String2000'
        std::string PathInExternalFile;
        /// Required element 'eml21:StartIndex' of XML schema type 'xsd:unsignedLong'
        ULONG64 StartIndex;
        /// Required element 'eml21:EpcExternalPartReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *EpcExternalPartReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExternalDatasetPart, default initialized and not managed by a soap context
        virtual eml21__ExternalDatasetPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExternalDatasetPart); }
      public:
        /// Constructor with default initializations
        eml21__ExternalDatasetPart() : Count(), PathInExternalFile(), StartIndex(), EpcExternalPartReference(), soap() { }
        virtual ~eml21__ExternalDatasetPart() { }
        /// Friend allocator used by soap_new_eml21__ExternalDatasetPart(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExternalDatasetPart * SOAP_FMAC2 soap_instantiate_eml21__ExternalDatasetPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1073 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter (-422)
/* complex XML schema type 'eml21:AbstractActivityParameter': */
class SOAP_CMAC eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Optional element 'eml21:Index' of XML schema type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'eml21:Selection' of XML schema type 'eml21:String2000'
        std::string *Selection;
        /// Optional element 'eml21:Key' of XML schema type 'eml21:AbstractParameterKey'
        std::vector<eml21__AbstractParameterKey *> Key;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractActivityParameter, default initialized and not managed by a soap context
        virtual eml21__AbstractActivityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractActivityParameter); }
      public:
        /// Constructor with default initializations
        eml21__AbstractActivityParameter() : Title(), Index(), Selection(), Key(), soap() { }
        virtual ~eml21__AbstractActivityParameter() { }
        /// Friend allocator used by soap_new_eml21__AbstractActivityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractActivityParameter * SOAP_FMAC2 soap_instantiate_eml21__AbstractActivityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1075 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey (-423)
/* complex XML schema type 'eml21:AbstractParameterKey': */
class SOAP_CMAC eml21__AbstractParameterKey {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractParameterKey, default initialized and not managed by a soap context
        virtual eml21__AbstractParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__AbstractParameterKey() : soap() { }
        virtual ~eml21__AbstractParameterKey() { }
        /// Friend allocator used by soap_new_eml21__AbstractParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractParameterKey * SOAP_FMAC2 soap_instantiate_eml21__AbstractParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1089 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate (-430)
/* complex XML schema type 'eml21:ParameterTemplate': */
class SOAP_CMAC eml21__ParameterTemplate {
      public:
        /// Optional element 'eml21:AllowedKind' of XML schema type 'eml21:ParameterKind'
        std::vector<enum eml21__ParameterKind> AllowedKind;
        /// Required element 'eml21:IsInput' of XML schema type 'xsd:boolean'
        bool IsInput;
        /// Optional element 'eml21:KeyConstraint' of XML schema type 'eml21:String2000'
        std::vector<std::string> KeyConstraint;
        /// Required element 'eml21:IsOutput' of XML schema type 'xsd:boolean'
        bool IsOutput;
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Optional element 'eml21:DataObjectContentType' of XML schema type 'eml21:String2000'
        std::string *DataObjectContentType;
        /// Required element 'eml21:MaxOccurs' of XML schema type 'xsd:long'
        LONG64 MaxOccurs;
        /// Required element 'eml21:MinOccurs' of XML schema type 'xsd:long'
        LONG64 MinOccurs;
        /// Optional element 'eml21:Constraint' of XML schema type 'eml21:String2000'
        std::string *Constraint;
        /// Optional element 'eml21:DefaultValue' of XML schema type 'eml21:AbstractActivityParameter'
        std::vector<eml21__AbstractActivityParameter *> DefaultValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ParameterTemplate, default initialized and not managed by a soap context
        virtual eml21__ParameterTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ParameterTemplate); }
      public:
        /// Constructor with default initializations
        eml21__ParameterTemplate() : AllowedKind(), IsInput(), KeyConstraint(), IsOutput(), Title(), DataObjectContentType(), MaxOccurs(), MinOccurs(), Constraint(), DefaultValue(), soap() { }
        virtual ~eml21__ParameterTemplate() { }
        /// Friend allocator used by soap_new_eml21__ParameterTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml21__ParameterTemplate * SOAP_FMAC2 soap_instantiate_eml21__ParameterTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1097 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime (-434)
/* complex XML schema type 'eml21:GeologicTime': */
class SOAP_CMAC eml21__GeologicTime {
      public:
        /// Optional element 'eml21:AgeOffsetAttribute' of XML schema type 'xsd:long'
        LONG64 *AgeOffsetAttribute;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeologicTime, default initialized and not managed by a soap context
        virtual eml21__GeologicTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeologicTime); }
      public:
        /// Constructor with default initializations
        eml21__GeologicTime() : AgeOffsetAttribute(), DateTime(), soap() { }
        virtual ~eml21__GeologicTime() { }
        /// Friend allocator used by soap_new_eml21__GeologicTime(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeologicTime * SOAP_FMAC2 soap_instantiate_eml21__GeologicTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1103 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex (-437)
/* complex XML schema type 'eml21:TimeIndex': */
class SOAP_CMAC eml21__TimeIndex {
      public:
        /// Required element 'eml21:Index' of XML schema type 'xsd:unsignedLong'
        ULONG64 Index;
        /// Required element 'eml21:TimeSeries' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndex, default initialized and not managed by a soap context
        virtual eml21__TimeIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndex); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndex() : Index(), TimeSeries(), soap() { }
        virtual ~eml21__TimeIndex() { }
        /// Friend allocator used by soap_new_eml21__TimeIndex(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndex * SOAP_FMAC2 soap_instantiate_eml21__TimeIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1105 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices (-438)
/* complex XML schema type 'eml21:TimeIndices': */
class SOAP_CMAC eml21__TimeIndices {
      public:
        /// Required element 'eml21:TimeIndexCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 TimeIndexCount;
        /// Optional element 'eml21:TimeIndexStart' of XML schema type 'xsd:unsignedLong'
        ULONG64 *TimeIndexStart;
        /// Optional element 'eml21:SimulatorTimeStep' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *SimulatorTimeStep;
        /// Required element 'eml21:UseInterval' of XML schema type 'xsd:boolean'
        bool UseInterval;
        /// Required element 'eml21:TimeSeries' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndices, default initialized and not managed by a soap context
        virtual eml21__TimeIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndices); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndices() : TimeIndexCount(), TimeIndexStart(), SimulatorTimeStep(), UseInterval(), TimeSeries(), soap() { }
        virtual ~eml21__TimeIndices() { }
        /// Friend allocator used by soap_new_eml21__TimeIndices(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndices * SOAP_FMAC2 soap_instantiate_eml21__TimeIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1109 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage (-440)
/* complex XML schema type 'eml21:TimeSeriesParentage': */
class SOAP_CMAC eml21__TimeSeriesParentage {
      public:
        /// Required element 'eml21:HasOverlap' of XML schema type 'xsd:boolean'
        bool HasOverlap;
        /// Required element 'eml21:ParentTimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *ParentTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeSeriesParentage, default initialized and not managed by a soap context
        virtual eml21__TimeSeriesParentage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeSeriesParentage); }
      public:
        /// Constructor with default initializations
        eml21__TimeSeriesParentage() : HasOverlap(), ParentTimeIndex(), soap() { }
        virtual ~eml21__TimeSeriesParentage() { }
        /// Friend allocator used by soap_new_eml21__TimeSeriesParentage(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeSeriesParentage * SOAP_FMAC2 soap_instantiate_eml21__TimeSeriesParentage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1113 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue (-442)
/* complex XML schema type 'eml21:AbstractPressureValue': */
class SOAP_CMAC eml21__AbstractPressureValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractPressureValue, default initialized and not managed by a soap context
        virtual eml21__AbstractPressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractPressureValue); }
      public:
        /// Constructor with default initializations
        eml21__AbstractPressureValue() : soap() { }
        virtual ~eml21__AbstractPressureValue() { }
        /// Friend allocator used by soap_new_eml21__AbstractPressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractPressureValue * SOAP_FMAC2 soap_instantiate_eml21__AbstractPressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:21752 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__union_AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1__eml21__union_AbstractTemperaturePressure (-1437)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml21__union_AbstractTemperaturePressure
{
};
#endif

/* eml2_1ForGsoap.h:1115 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure (-443)
/* Choice: */
class SOAP_CMAC eml21__AbstractTemperaturePressure {
      public:
        /// Union with union _eml21__union_AbstractTemperaturePressure variant selector __union_AbstractTemperaturePressure set to one of:
        int __union_AbstractTemperaturePressure;
        union _eml21__union_AbstractTemperaturePressure union_AbstractTemperaturePressure;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractTemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__AbstractTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__AbstractTemperaturePressure() : __union_AbstractTemperaturePressure(), soap() { }
        virtual ~eml21__AbstractTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__AbstractTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__AbstractTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1117 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue (-444)
/* complex XML schema type 'eml21:DensityValue': */
class SOAP_CMAC eml21__DensityValue {
      public:
        /// Required element 'eml21:Density' of XML schema type 'eml21:MassPerVolumeMeasureExt'
        eml21__MassPerVolumeMeasureExt *Density;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DensityValue, default initialized and not managed by a soap context
        virtual eml21__DensityValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DensityValue); }
      public:
        /// Constructor with default initializations
        eml21__DensityValue() : Density(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__DensityValue() { }
        /// Friend allocator used by soap_new_eml21__DensityValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__DensityValue * SOAP_FMAC2 soap_instantiate_eml21__DensityValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1119 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue (-445)
/* complex XML schema type 'eml21:FlowRateValue': */
class SOAP_CMAC eml21__FlowRateValue {
      public:
        /// Required element 'eml21:FlowRate' of XML schema type 'eml21:VolumePerTimeMeasureExt'
        eml21__VolumePerTimeMeasureExt *FlowRate;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FlowRateValue, default initialized and not managed by a soap context
        virtual eml21__FlowRateValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FlowRateValue); }
      public:
        /// Constructor with default initializations
        eml21__FlowRateValue() : FlowRate(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__FlowRateValue() { }
        /// Friend allocator used by soap_new_eml21__FlowRateValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__FlowRateValue * SOAP_FMAC2 soap_instantiate_eml21__FlowRateValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1123 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue (-447)
/* complex XML schema type 'eml21:PressureValue': */
class SOAP_CMAC eml21__PressureValue {
      public:
        /// Required element 'eml21:AbstractPressureValue' of XML schema type 'eml21:AbstractPressureValue'
        eml21__AbstractPressureValue *AbstractPressureValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureValue, default initialized and not managed by a soap context
        virtual eml21__PressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureValue); }
      public:
        /// Constructor with default initializations
        eml21__PressureValue() : AbstractPressureValue(), soap() { }
        virtual ~eml21__PressureValue() { }
        /// Friend allocator used by soap_new_eml21__PressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureValue * SOAP_FMAC2 soap_instantiate_eml21__PressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1133 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue (-452)
/* complex XML schema type 'eml21:VolumeValue': */
class SOAP_CMAC eml21__VolumeValue {
      public:
        /// Required element 'eml21:Volume' of XML schema type 'eml21:VolumeMeasureExt'
        eml21__VolumeMeasureExt *Volume;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeValue, default initialized and not managed by a soap context
        virtual eml21__VolumeValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeValue); }
      public:
        /// Constructor with default initializations
        eml21__VolumeValue() : Volume(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__VolumeValue() { }
        /// Friend allocator used by soap_new_eml21__VolumeValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeValue * SOAP_FMAC2 soap_instantiate_eml21__VolumeValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1135 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs (-453)
/* complex XML schema type 'eml21:AbstractGeodeticCrs': */
class SOAP_CMAC eml21__AbstractGeodeticCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractGeodeticCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractGeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractGeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractGeodeticCrs() : soap() { }
        virtual ~eml21__AbstractGeodeticCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractGeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractGeodeticCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractGeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1137 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs (-454)
/* complex XML schema type 'eml21:AbstractProjectedCrs': */
class SOAP_CMAC eml21__AbstractProjectedCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractProjectedCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractProjectedCrs() : soap() { }
        virtual ~eml21__AbstractProjectedCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractProjectedCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1139 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs (-455)
/* complex XML schema type 'eml21:AbstractVerticalCrs': */
class SOAP_CMAC eml21__AbstractVerticalCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractVerticalCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractVerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractVerticalCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractVerticalCrs() : soap() { }
        virtual ~eml21__AbstractVerticalCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractVerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractVerticalCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractVerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1179 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule (-475)
/* complex XML schema type 'eml21:FailingRule': */
class SOAP_CMAC eml21__FailingRule {
      public:
        /// Required element 'eml21:RuleId' of XML schema type 'eml21:String64'
        std::string RuleId;
        /// Optional element 'eml21:RuleName' of XML schema type 'eml21:String2000'
        std::string *RuleName;
        /// Optional element 'eml21:Severity' of XML schema type 'eml21:String64'
        std::string *Severity;
        /// Optional element 'eml21:FailingRuleExtensions' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> FailingRuleExtensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FailingRule, default initialized and not managed by a soap context
        virtual eml21__FailingRule *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FailingRule); }
      public:
        /// Constructor with default initializations
        eml21__FailingRule() : RuleId(), RuleName(), Severity(), FailingRuleExtensions(), soap() { }
        virtual ~eml21__FailingRule() { }
        /// Friend allocator used by soap_new_eml21__FailingRule(struct soap*, int)
        friend SOAP_FMAC1 eml21__FailingRule * SOAP_FMAC2 soap_instantiate_eml21__FailingRule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1181 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange (-476)
/* complex XML schema type 'eml21:IndexRange': */
class SOAP_CMAC eml21__IndexRange {
      public:
        /// Required element 'eml21:IndexMinimum' of XML schema type 'eml21:String64'
        std::string IndexMinimum;
        /// Required element 'eml21:IndexMaximum' of XML schema type 'eml21:String64'
        std::string IndexMaximum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IndexRange, default initialized and not managed by a soap context
        virtual eml21__IndexRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IndexRange); }
      public:
        /// Constructor with default initializations
        eml21__IndexRange() : IndexMinimum(), IndexMaximum(), soap() { }
        virtual ~eml21__IndexRange() { }
        /// Friend allocator used by soap_new_eml21__IndexRange(struct soap*, int)
        friend SOAP_FMAC1 eml21__IndexRange * SOAP_FMAC2 soap_instantiate_eml21__IndexRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1183 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation (-477)
/* complex XML schema type 'eml21:AbstractGraphicalInformation': */
class SOAP_CMAC eml21__AbstractGraphicalInformation {
      public:
        /// Required element 'eml21:TargetObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TargetObject;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractGraphicalInformation, default initialized and not managed by a soap context
        virtual eml21__AbstractGraphicalInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractGraphicalInformation); }
      public:
        /// Constructor with default initializations
        eml21__AbstractGraphicalInformation() : TargetObject(), soap() { }
        virtual ~eml21__AbstractGraphicalInformation() { }
        /// Friend allocator used by soap_new_eml21__AbstractGraphicalInformation(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractGraphicalInformation * SOAP_FMAC2 soap_instantiate_eml21__AbstractGraphicalInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1197 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType (-484)
/* complex XML schema type 'gml:AbstractGMLType': */
class SOAP_CMAC gml__AbstractGMLType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Optional element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGMLType, default initialized and not managed by a soap context
        virtual gml__AbstractGMLType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGMLType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGMLType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__AbstractGMLType() { }
        /// Friend allocator used by soap_new_gml__AbstractGMLType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGMLType * SOAP_FMAC2 soap_instantiate_gml__AbstractGMLType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1201 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType (-486)
/* complex XML schema type 'gml:ReferenceType': */
class SOAP_CMAC gml__ReferenceType {
      public:
        /// Optional attribute 'owns' of XML schema type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ReferenceType, default initialized and not managed by a soap context
        virtual gml__ReferenceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ReferenceType); }
      public:
        /// Constructor with default initializations
        gml__ReferenceType() : owns((bool)0), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__ReferenceType() { }
        /// Friend allocator used by soap_new_gml__ReferenceType(struct soap*, int)
        friend SOAP_FMAC1 gml__ReferenceType * SOAP_FMAC2 soap_instantiate_gml__ReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22215 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_1__gml__union_TimePrimitivePropertyType (-1453)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_TimePrimitivePropertyType
{
};
#endif

/* eml2_1ForGsoap.h:22204 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__TimePrimitivePropertyType_sequence (-1452)
/* Wrapper: */
class SOAP_CMAC __gml__TimePrimitivePropertyType_sequence {
      public:
        /// Union with union _gml__union_TimePrimitivePropertyType variant selector __unionAbstractTimePrimitive set to one of:
        int __unionAbstractTimePrimitive;
        union _gml__union_TimePrimitivePropertyType union_TimePrimitivePropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__TimePrimitivePropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__TimePrimitivePropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__TimePrimitivePropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__TimePrimitivePropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__TimePrimitivePropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__TimePrimitivePropertyType_sequence() : __unionAbstractTimePrimitive() { }
        virtual ~__gml__TimePrimitivePropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__TimePrimitivePropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__TimePrimitivePropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__TimePrimitivePropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType (-492)
/* complex XML schema type 'gml:TimePrimitivePropertyType': */
class SOAP_CMAC gml__TimePrimitivePropertyType {
      public:
        __gml__TimePrimitivePropertyType_sequence *__TimePrimitivePropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Optional attribute 'owns' of XML schema type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__TimePrimitivePropertyType, default initialized and not managed by a soap context
        virtual gml__TimePrimitivePropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__TimePrimitivePropertyType); }
      public:
        /// Constructor with default initializations
        gml__TimePrimitivePropertyType() : __TimePrimitivePropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), owns((bool)0), soap() { }
        virtual ~gml__TimePrimitivePropertyType() { }
        /// Friend allocator used by soap_new_gml__TimePrimitivePropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__TimePrimitivePropertyType * SOAP_FMAC2 soap_instantiate_gml__TimePrimitivePropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22280 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidalCSPropertyType_sequence (-1455)
/* Wrapper: */
class SOAP_CMAC __gml__EllipsoidalCSPropertyType_sequence {
      public:
        /// Required element 'gml:EllipsoidalCS' of XML schema type 'gml:EllipsoidalCSType'
        gml__EllipsoidalCSType *EllipsoidalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__EllipsoidalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__EllipsoidalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__EllipsoidalCSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__EllipsoidalCSPropertyType_sequence() : EllipsoidalCS() { }
        virtual ~__gml__EllipsoidalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__EllipsoidalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__EllipsoidalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1215 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType (-493)
/* complex XML schema type 'gml:EllipsoidalCSPropertyType': */
class SOAP_CMAC gml__EllipsoidalCSPropertyType {
      public:
        __gml__EllipsoidalCSPropertyType_sequence *__EllipsoidalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidalCSPropertyType() : __EllipsoidalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22346 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__CoordinateSystemAxisPropertyType_sequence (-1458)
/* Wrapper: */
class SOAP_CMAC __gml__CoordinateSystemAxisPropertyType_sequence {
      public:
        /// Required element 'gml:CoordinateSystemAxis' of XML schema type 'gml:CoordinateSystemAxisType'
        gml__CoordinateSystemAxisType *CoordinateSystemAxis;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__CoordinateSystemAxisPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__CoordinateSystemAxisPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CoordinateSystemAxisPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CoordinateSystemAxisPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CoordinateSystemAxisPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__CoordinateSystemAxisPropertyType_sequence() : CoordinateSystemAxis() { }
        virtual ~__gml__CoordinateSystemAxisPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CoordinateSystemAxisPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CoordinateSystemAxisPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CoordinateSystemAxisPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1221 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType (-496)
/* complex XML schema type 'gml:CoordinateSystemAxisPropertyType': */
class SOAP_CMAC gml__CoordinateSystemAxisPropertyType {
      public:
        __gml__CoordinateSystemAxisPropertyType_sequence *__CoordinateSystemAxisPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisPropertyType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CoordinateSystemAxisPropertyType() : __CoordinateSystemAxisPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CoordinateSystemAxisPropertyType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisPropertyType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22412 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__CartesianCSPropertyType_sequence (-1461)
/* Wrapper: */
class SOAP_CMAC __gml__CartesianCSPropertyType_sequence {
      public:
        /// Required element 'gml:CartesianCS' of XML schema type 'gml:CartesianCSType'
        gml__CartesianCSType *CartesianCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__CartesianCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__CartesianCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CartesianCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CartesianCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CartesianCSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__CartesianCSPropertyType_sequence() : CartesianCS() { }
        virtual ~__gml__CartesianCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CartesianCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CartesianCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CartesianCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1225 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType (-498)
/* complex XML schema type 'gml:CartesianCSPropertyType': */
class SOAP_CMAC gml__CartesianCSPropertyType {
      public:
        __gml__CartesianCSPropertyType_sequence *__CartesianCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSPropertyType, default initialized and not managed by a soap context
        virtual gml__CartesianCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CartesianCSPropertyType() : __CartesianCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CartesianCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22478 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__SphericalCSPropertyType_sequence (-1464)
/* Wrapper: */
class SOAP_CMAC __gml__SphericalCSPropertyType_sequence {
      public:
        /// Required element 'gml:SphericalCS' of XML schema type 'gml:SphericalCSType'
        gml__SphericalCSType *SphericalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__SphericalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__SphericalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__SphericalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__SphericalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__SphericalCSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__SphericalCSPropertyType_sequence() : SphericalCS() { }
        virtual ~__gml__SphericalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__SphericalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__SphericalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__SphericalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1229 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType (-500)
/* complex XML schema type 'gml:SphericalCSPropertyType': */
class SOAP_CMAC gml__SphericalCSPropertyType {
      public:
        __gml__SphericalCSPropertyType_sequence *__SphericalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__SphericalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__SphericalCSPropertyType() : __SphericalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__SphericalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22544 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__GeodeticDatumPropertyType_sequence (-1467)
/* Wrapper: */
class SOAP_CMAC __gml__GeodeticDatumPropertyType_sequence {
      public:
        /// Required element 'gml:GeodeticDatum' of XML schema type 'gml:GeodeticDatumType'
        gml__GeodeticDatumType *GeodeticDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__GeodeticDatumPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__GeodeticDatumPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeodeticDatumPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeodeticDatumPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeodeticDatumPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__GeodeticDatumPropertyType_sequence() : GeodeticDatum() { }
        virtual ~__gml__GeodeticDatumPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeodeticDatumPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeodeticDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1233 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType (-502)
/* complex XML schema type 'gml:GeodeticDatumPropertyType': */
class SOAP_CMAC gml__GeodeticDatumPropertyType {
      public:
        __gml__GeodeticDatumPropertyType_sequence *__GeodeticDatumPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticDatumPropertyType() : __GeodeticDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22610 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__PrimeMeridianPropertyType_sequence (-1470)
/* Wrapper: */
class SOAP_CMAC __gml__PrimeMeridianPropertyType_sequence {
      public:
        /// Required element 'gml:PrimeMeridian' of XML schema type 'gml:PrimeMeridianType'
        gml__PrimeMeridianType *PrimeMeridian;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__PrimeMeridianPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__PrimeMeridianPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__PrimeMeridianPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__PrimeMeridianPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__PrimeMeridianPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__PrimeMeridianPropertyType_sequence() : PrimeMeridian() { }
        virtual ~__gml__PrimeMeridianPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__PrimeMeridianPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__PrimeMeridianPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__PrimeMeridianPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1239 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType (-505)
/* complex XML schema type 'gml:PrimeMeridianPropertyType': */
class SOAP_CMAC gml__PrimeMeridianPropertyType {
      public:
        __gml__PrimeMeridianPropertyType_sequence *__PrimeMeridianPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianPropertyType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianPropertyType); }
      public:
        /// Constructor with default initializations
        gml__PrimeMeridianPropertyType() : __PrimeMeridianPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__PrimeMeridianPropertyType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianPropertyType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22676 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidPropertyType_sequence (-1473)
/* Wrapper: */
class SOAP_CMAC __gml__EllipsoidPropertyType_sequence {
      public:
        /// Required element 'gml:Ellipsoid' of XML schema type 'gml:EllipsoidType'
        gml__EllipsoidType *Ellipsoid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__EllipsoidPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__EllipsoidPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__EllipsoidPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__EllipsoidPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__EllipsoidPropertyType_sequence() : Ellipsoid() { }
        virtual ~__gml__EllipsoidPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__EllipsoidPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__EllipsoidPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1247 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType (-509)
/* complex XML schema type 'gml:EllipsoidPropertyType': */
class SOAP_CMAC gml__EllipsoidPropertyType {
      public:
        __gml__EllipsoidPropertyType_sequence *__EllipsoidPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidPropertyType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidPropertyType() : __EllipsoidPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22754 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gml__union_GeneralConversionPropertyType (-1477)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeneralConversionPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:22742 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__GeneralConversionPropertyType_sequence (-1476)
/* Wrapper: */
class SOAP_CMAC __gml__GeneralConversionPropertyType_sequence {
      public:
        /// Union with union _gml__union_GeneralConversionPropertyType variant selector __unionAbstractGeneralConversion set to one of:
        int __unionAbstractGeneralConversion;
        union _gml__union_GeneralConversionPropertyType union_GeneralConversionPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__GeneralConversionPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__GeneralConversionPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeneralConversionPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeneralConversionPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeneralConversionPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__GeneralConversionPropertyType_sequence() : __unionAbstractGeneralConversion() { }
        virtual ~__gml__GeneralConversionPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeneralConversionPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeneralConversionPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeneralConversionPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1257 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType (-514)
/* complex XML schema type 'gml:GeneralConversionPropertyType': */
class SOAP_CMAC gml__GeneralConversionPropertyType {
      public:
        __gml__GeneralConversionPropertyType_sequence *__GeneralConversionPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeneralConversionPropertyType, default initialized and not managed by a soap context
        virtual gml__GeneralConversionPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeneralConversionPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeneralConversionPropertyType() : __GeneralConversionPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeneralConversionPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeneralConversionPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeneralConversionPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeneralConversionPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22826 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gml__union_CRSPropertyType (-1480)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_CRSPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:22815 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__CRSPropertyType_sequence (-1479)
/* Wrapper: */
class SOAP_CMAC __gml__CRSPropertyType_sequence {
      public:
        /// Union with union _gml__union_CRSPropertyType variant selector __unionAbstractCRS set to one of:
        int __unionAbstractCRS;
        union _gml__union_CRSPropertyType union_CRSPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__CRSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__CRSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CRSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CRSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CRSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__CRSPropertyType_sequence() : __unionAbstractCRS() { }
        virtual ~__gml__CRSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CRSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1263 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType (-517)
/* complex XML schema type 'gml:CRSPropertyType': */
class SOAP_CMAC gml__CRSPropertyType {
      public:
        __gml__CRSPropertyType_sequence *__CRSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CRSPropertyType, default initialized and not managed by a soap context
        virtual gml__CRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CRSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CRSPropertyType() : __CRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22887 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__GeodeticCRSPropertyType_sequence (-1482)
/* Wrapper: */
class SOAP_CMAC __gml__GeodeticCRSPropertyType_sequence {
      public:
        /// Required element 'gml:GeodeticCRS' of XML schema type 'gml:GeodeticCRSType'
        gml__GeodeticCRSType *GeodeticCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__GeodeticCRSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__GeodeticCRSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeodeticCRSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeodeticCRSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeodeticCRSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__GeodeticCRSPropertyType_sequence() : GeodeticCRS() { }
        virtual ~__gml__GeodeticCRSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeodeticCRSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeodeticCRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticCRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType (-518)
/* complex XML schema type 'gml:GeodeticCRSPropertyType': */
class SOAP_CMAC gml__GeodeticCRSPropertyType {
      public:
        __gml__GeodeticCRSPropertyType_sequence *__GeodeticCRSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticCRSPropertyType() : __GeodeticCRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticCRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:22949 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__VerticalCSPropertyType_sequence (-1485)
/* Wrapper: */
class SOAP_CMAC __gml__VerticalCSPropertyType_sequence {
      public:
        /// Required element 'gml:VerticalCS' of XML schema type 'gml:VerticalCSType'
        gml__VerticalCSType *VerticalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__VerticalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__VerticalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__VerticalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__VerticalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__VerticalCSPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__VerticalCSPropertyType_sequence() : VerticalCS() { }
        virtual ~__gml__VerticalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__VerticalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__VerticalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1269 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType (-520)
/* complex XML schema type 'gml:VerticalCSPropertyType': */
class SOAP_CMAC gml__VerticalCSPropertyType {
      public:
        __gml__VerticalCSPropertyType_sequence *__VerticalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCSPropertyType() : __VerticalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23015 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__VerticalDatumPropertyType_sequence (-1488)
/* Wrapper: */
class SOAP_CMAC __gml__VerticalDatumPropertyType_sequence {
      public:
        /// Required element 'gml:VerticalDatum' of XML schema type 'gml:VerticalDatumType'
        gml__VerticalDatumType *VerticalDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__VerticalDatumPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__VerticalDatumPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__VerticalDatumPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__VerticalDatumPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__VerticalDatumPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gml__VerticalDatumPropertyType_sequence() : VerticalDatum() { }
        virtual ~__gml__VerticalDatumPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__VerticalDatumPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__VerticalDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType (-522)
/* complex XML schema type 'gml:VerticalDatumPropertyType': */
class SOAP_CMAC gml__VerticalDatumPropertyType {
      public:
        __gml__VerticalDatumPropertyType_sequence *__VerticalDatumPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumPropertyType); }
      public:
        /// Constructor with default initializations
        gml__VerticalDatumPropertyType() : __VerticalDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23082 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__domainOfValidity_sequence (-1491)
/* Wrapper: */
class SOAP_CMAC __gml__domainOfValidity_sequence {
      public:
        /// Required element 'gmd:EX_Extent' of XML schema type 'gmd:EX_Extent_Type'
        gmd__EX_USCOREExtent_USCOREType *gmd__EX_USCOREExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__domainOfValidity_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__domainOfValidity_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__domainOfValidity_sequence, default initialized and not managed by a soap context
        virtual __gml__domainOfValidity_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__domainOfValidity_sequence); }
      public:
        /// Constructor with default initializations
        __gml__domainOfValidity_sequence() : gmd__EX_USCOREExtent() { }
        virtual ~__gml__domainOfValidity_sequence() { }
        /// Friend allocator used by soap_new___gml__domainOfValidity_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__domainOfValidity_sequence * SOAP_FMAC2 soap_instantiate___gml__domainOfValidity_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1277 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity (-524)
/* complex XML schema type 'gml:domainOfValidity': */
class SOAP_CMAC _gml__domainOfValidity {
      public:
        __gml__domainOfValidity_sequence *__domainOfValidity_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__domainOfValidity, default initialized and not managed by a soap context
        virtual _gml__domainOfValidity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__domainOfValidity); }
      public:
        /// Constructor with default initializations
        _gml__domainOfValidity() : __domainOfValidity_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__domainOfValidity() { }
        /// Friend allocator used by soap_new__gml__domainOfValidity(struct soap*, int)
        friend SOAP_FMAC1 _gml__domainOfValidity * SOAP_FMAC2 soap_instantiate__gml__domainOfValidity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1279 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter (-525)
/* complex XML schema type 'gml:secondDefiningParameter': */
class SOAP_CMAC _gml__secondDefiningParameter {
      public:
        /// Required element 'gml:SecondDefiningParameter' of XML schema type 'gml:SecondDefiningParameter'
        _gml__SecondDefiningParameter *SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__secondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__secondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__secondDefiningParameter); }
      public:
        /// Constructor with default initializations
        _gml__secondDefiningParameter() : SecondDefiningParameter(), soap() { }
        virtual ~_gml__secondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__secondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__secondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__secondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23172 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1__gml__union_SecondDefiningParameter (-1495)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_SecondDefiningParameter
{
        #define SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_inverseFlattening	(1)	/**< union variant selector value for member inverseFlattening */
        gml__MeasureType *inverseFlattening;
        #define SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_semiMinorAxis	(2)	/**< union variant selector value for member semiMinorAxis */
        gml__LengthType *semiMinorAxis;
        #define SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_isSphere	(3)	/**< union variant selector value for member isSphere */
        bool isSphere;
};
#endif

/* eml2_1ForGsoap.h:1281 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter (-526)
/* Choice: */
class SOAP_CMAC _gml__SecondDefiningParameter {
      public:
        /// Union with union _gml__union_SecondDefiningParameter variant selector __union_SecondDefiningParameter set to one of: SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_inverseFlattening SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_semiMinorAxis SOAP_UNION_gsoap_eml2_1__gml__union_SecondDefiningParameter_isSphere
        int __union_SecondDefiningParameter;
        union _gml__union_SecondDefiningParameter union_SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__SecondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__SecondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__SecondDefiningParameter); }
      public:
        /// Constructor with default initializations
        _gml__SecondDefiningParameter() : __union_SecondDefiningParameter(), soap() { }
        virtual ~_gml__SecondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__SecondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__SecondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__SecondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23213 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_1__gml__union_coordinateOperationAccuracy (-1499)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_coordinateOperationAccuracy
{
};
#endif

/* eml2_1ForGsoap.h:23206 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_1___gml__coordinateOperationAccuracy_sequence (-1498)
/* Wrapper: */
class SOAP_CMAC __gml__coordinateOperationAccuracy_sequence {
      public:
        /// Union with union _gml__union_coordinateOperationAccuracy variant selector __unionAbstractDQ_USCOREPositionalAccuracy set to one of:
        int __unionAbstractDQ_USCOREPositionalAccuracy;
        union _gml__union_coordinateOperationAccuracy union_coordinateOperationAccuracy;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gml__coordinateOperationAccuracy_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gml__coordinateOperationAccuracy_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__coordinateOperationAccuracy_sequence, default initialized and not managed by a soap context
        virtual __gml__coordinateOperationAccuracy_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__coordinateOperationAccuracy_sequence); }
      public:
        /// Constructor with default initializations
        __gml__coordinateOperationAccuracy_sequence() : __unionAbstractDQ_USCOREPositionalAccuracy() { }
        virtual ~__gml__coordinateOperationAccuracy_sequence() { }
        /// Friend allocator used by soap_new___gml__coordinateOperationAccuracy_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__coordinateOperationAccuracy_sequence * SOAP_FMAC2 soap_instantiate___gml__coordinateOperationAccuracy_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1283 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy (-527)
/* complex XML schema type 'gml:coordinateOperationAccuracy': */
class SOAP_CMAC _gml__coordinateOperationAccuracy {
      public:
        __gml__coordinateOperationAccuracy_sequence *__coordinateOperationAccuracy_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__coordinateOperationAccuracy, default initialized and not managed by a soap context
        virtual _gml__coordinateOperationAccuracy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__coordinateOperationAccuracy); }
      public:
        /// Constructor with default initializations
        _gml__coordinateOperationAccuracy() : __coordinateOperationAccuracy_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__coordinateOperationAccuracy() { }
        /// Friend allocator used by soap_new__gml__coordinateOperationAccuracy(struct soap*, int)
        friend SOAP_FMAC1 _gml__coordinateOperationAccuracy * SOAP_FMAC2 soap_instantiate__gml__coordinateOperationAccuracy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23293 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType (-1502)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:23286 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1501)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence {
      public:
        /// Union with union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType variant selector __unionAbstractEX_USCOREGeographicExtent set to one of:
        int __unionAbstractEX_USCOREGeographicExtent;
        union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType union_EX_USCOREGeographicExtent_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence() : __unionAbstractEX_USCOREGeographicExtent() { }
        virtual ~__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1287 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-529)
/* complex XML schema type 'gmd:EX_GeographicExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREGeographicExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence *__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREGeographicExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREGeographicExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREGeographicExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREGeographicExtent_USCOREPropertyType() : __EX_USCOREGeographicExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREGeographicExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREGeographicExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23352 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1504)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:EX_TemporalExtent' of XML schema type 'gmd:EX_TemporalExtent_Type'
        gmd__EX_USCORETemporalExtent_USCOREType *EX_USCORETemporalExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence() : EX_USCORETemporalExtent() { }
        virtual ~__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1291 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-531)
/* complex XML schema type 'gmd:EX_TemporalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence *__EX_USCORETemporalExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCORETemporalExtent_USCOREPropertyType() : __EX_USCORETemporalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23412 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1507)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:EX_VerticalExtent' of XML schema type 'gmd:EX_VerticalExtent_Type'
        gmd__EX_USCOREVerticalExtent_USCOREType *EX_USCOREVerticalExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence() : EX_USCOREVerticalExtent() { }
        virtual ~__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1295 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-533)
/* complex XML schema type 'gmd:EX_VerticalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence *__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREVerticalExtent_USCOREPropertyType() : __EX_USCOREVerticalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23472 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1510)
/* Wrapper: */
class SOAP_CMAC __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:MD_Identifier' of XML schema type 'gmd:MD_Identifier_Type'
        gmd__MD_USCOREIdentifier_USCOREType *MD_USCOREIdentifier;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence() : MD_USCOREIdentifier() { }
        virtual ~__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1303 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType (-537)
/* Type gmd__MD_USCOREIdentifier_USCOREPropertyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'gmd:MD_Identifier_PropertyType': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREPropertyType {
      public:
        __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence *__MD_USCOREIdentifier_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__MD_USCOREIdentifier_USCOREPropertyType() : __MD_USCOREIdentifier_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23532 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1513)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORECitation_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Citation' of XML schema type 'gmd:CI_Citation_Type'
        gmd__CI_USCORECitation_USCOREType *CI_USCORECitation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORECitation_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORECitation_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORECitation_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORECitation_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORECitation_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCORECitation_USCOREPropertyType_sequence() : CI_USCORECitation() { }
        virtual ~__gmd__CI_USCORECitation_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORECitation_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORECitation_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORECitation_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1307 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType (-539)
/* complex XML schema type 'gmd:CI_Citation_PropertyType': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREPropertyType {
      public:
        __gmd__CI_USCORECitation_USCOREPropertyType_sequence *__CI_USCORECitation_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORECitation_USCOREPropertyType() : __CI_USCORECitation_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORECitation_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23592 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1516)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREDate_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Date' of XML schema type 'gmd:CI_Date_Type'
        gmd__CI_USCOREDate_USCOREType *CI_USCOREDate;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDate_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDate_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREDate_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREDate_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREDate_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREDate_USCOREPropertyType_sequence() : CI_USCOREDate() { }
        virtual ~__gmd__CI_USCOREDate_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREDate_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREDate_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDate_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1311 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType (-541)
/* complex XML schema type 'gmd:CI_Date_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREPropertyType {
      public:
        __gmd__CI_USCOREDate_USCOREPropertyType_sequence *__CI_USCOREDate_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDate_USCOREPropertyType() : __CI_USCOREDate_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREDate_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23652 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1519)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_DateTypeCode' of XML schema type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREDateTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence() : CI_USCOREDateTypeCode() { }
        virtual ~__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-543)
/* complex XML schema type 'gmd:CI_DateTypeCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDateTypeCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence *__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDateTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDateTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDateTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType() : __CI_USCOREDateTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREDateTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDateTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23680 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1522)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_ResponsibleParty' of XML schema type 'gmd:CI_ResponsibleParty_Type'
        gmd__CI_USCOREResponsibleParty_USCOREType *CI_USCOREResponsibleParty;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence() : CI_USCOREResponsibleParty() { }
        virtual ~__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1317 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-544)
/* complex XML schema type 'gmd:CI_ResponsibleParty_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREPropertyType {
      public:
        __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence *__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREResponsibleParty_USCOREPropertyType() : __CI_USCOREResponsibleParty_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23740 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1525)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREContact_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Contact' of XML schema type 'gmd:CI_Contact_Type'
        gmd__CI_USCOREContact_USCOREType *CI_USCOREContact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREContact_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREContact_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREContact_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREContact_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREContact_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREContact_USCOREPropertyType_sequence() : CI_USCOREContact() { }
        virtual ~__gmd__CI_USCOREContact_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREContact_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREContact_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREContact_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType (-546)
/* complex XML schema type 'gmd:CI_Contact_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREPropertyType {
      public:
        __gmd__CI_USCOREContact_USCOREPropertyType_sequence *__CI_USCOREContact_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREContact_USCOREPropertyType() : __CI_USCOREContact_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREContact_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23800 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1528)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORETelephone_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Telephone' of XML schema type 'gmd:CI_Telephone_Type'
        gmd__CI_USCORETelephone_USCOREType *CI_USCORETelephone;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORETelephone_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORETelephone_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORETelephone_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORETelephone_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORETelephone_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCORETelephone_USCOREPropertyType_sequence() : CI_USCORETelephone() { }
        virtual ~__gmd__CI_USCORETelephone_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORETelephone_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORETelephone_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1325 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType (-548)
/* complex XML schema type 'gmd:CI_Telephone_PropertyType': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREPropertyType {
      public:
        __gmd__CI_USCORETelephone_USCOREPropertyType_sequence *__CI_USCORETelephone_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORETelephone_USCOREPropertyType() : __CI_USCORETelephone_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORETelephone_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23860 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1531)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREAddress_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Address' of XML schema type 'gmd:CI_Address_Type'
        gmd__CI_USCOREAddress_USCOREType *CI_USCOREAddress;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREAddress_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREAddress_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREAddress_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREAddress_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREAddress_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREAddress_USCOREPropertyType_sequence() : CI_USCOREAddress() { }
        virtual ~__gmd__CI_USCOREAddress_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREAddress_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREAddress_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1329 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType (-550)
/* complex XML schema type 'gmd:CI_Address_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREPropertyType {
      public:
        __gmd__CI_USCOREAddress_USCOREPropertyType_sequence *__CI_USCOREAddress_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREAddress_USCOREPropertyType() : __CI_USCOREAddress_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREAddress_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23920 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1534)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_OnlineResource' of XML schema type 'gmd:CI_OnlineResource_Type'
        gmd__CI_USCOREOnlineResource_USCOREType *CI_USCOREOnlineResource;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence() : CI_USCOREOnlineResource() { }
        virtual ~__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1333 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-552)
/* complex XML schema type 'gmd:CI_OnlineResource_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREPropertyType {
      public:
        __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence *__CI_USCOREOnlineResource_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnlineResource_USCOREPropertyType() : __CI_USCOREOnlineResource_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:23980 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__URL_USCOREPropertyType_sequence (-1537)
/* Wrapper: */
class SOAP_CMAC __gmd__URL_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:URL' of XML schema type 'xsd:anyURI'
        std::string URL;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__URL_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__URL_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__URL_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__URL_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__URL_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__URL_USCOREPropertyType_sequence() : URL() { }
        virtual ~__gmd__URL_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__URL_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__URL_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__URL_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1337 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType (-554)
/* complex XML schema type 'gmd:URL_PropertyType': */
class SOAP_CMAC gmd__URL_USCOREPropertyType {
      public:
        __gmd__URL_USCOREPropertyType_sequence *__URL_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__URL_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__URL_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__URL_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__URL_USCOREPropertyType() : __URL_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__URL_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__URL_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__URL_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__URL_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24008 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1539)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_OnLineFunctionCode' of XML schema type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREOnLineFunctionCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence() : CI_USCOREOnLineFunctionCode() { }
        virtual ~__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-555)
/* complex XML schema type 'gmd:CI_OnLineFunctionCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence *__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() : __CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24036 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1541)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_RoleCode' of XML schema type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCORERoleCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence() : CI_USCORERoleCode() { }
        virtual ~__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1341 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType (-556)
/* complex XML schema type 'gmd:CI_RoleCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCORERoleCode_USCOREPropertyType {
      public:
        __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence *__CI_USCORERoleCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORERoleCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORERoleCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORERoleCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORERoleCode_USCOREPropertyType() : __CI_USCORERoleCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCORERoleCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORERoleCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24064 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1543)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_PresentationFormCode' of XML schema type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREPresentationFormCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence() : CI_USCOREPresentationFormCode() { }
        virtual ~__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1343 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-557)
/* complex XML schema type 'gmd:CI_PresentationFormCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREPresentationFormCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence *__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREPresentationFormCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREPresentationFormCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() : __CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24092 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1545)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORESeries_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Series' of XML schema type 'gmd:CI_Series_Type'
        gmd__CI_USCORESeries_USCOREType *CI_USCORESeries;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORESeries_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__CI_USCORESeries_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORESeries_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORESeries_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORESeries_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__CI_USCORESeries_USCOREPropertyType_sequence() : CI_USCORESeries() { }
        virtual ~__gmd__CI_USCORESeries_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORESeries_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORESeries_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORESeries_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType (-558)
/* complex XML schema type 'gmd:CI_Series_PropertyType': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREPropertyType {
      public:
        __gmd__CI_USCORESeries_USCOREPropertyType_sequence *__CI_USCORESeries_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORESeries_USCOREPropertyType() : __CI_USCORESeries_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORESeries_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24152 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1548)
/* Wrapper: */
class SOAP_CMAC __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:DQ_EvaluationMethodTypeCode' of XML schema type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *DQ_USCOREEvaluationMethodTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence() : DQ_USCOREEvaluationMethodTypeCode() { }
        virtual ~__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1349 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-560)
/* complex XML schema type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType {
      public:
        __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence *__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() : __DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24187 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__union_DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gmd__union_DQ_USCOREResult_USCOREPropertyType (-1551)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:24180 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1550)
/* Wrapper: */
class SOAP_CMAC __gmd__DQ_USCOREResult_USCOREPropertyType_sequence {
      public:
        /// Union with union _gmd__union_DQ_USCOREResult_USCOREPropertyType variant selector __unionAbstractDQ_USCOREResult set to one of:
        int __unionAbstractDQ_USCOREResult;
        union _gmd__union_DQ_USCOREResult_USCOREPropertyType union_DQ_USCOREResult_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREResult_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gmd__DQ_USCOREResult_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__DQ_USCOREResult_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__DQ_USCOREResult_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__DQ_USCOREResult_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gmd__DQ_USCOREResult_USCOREPropertyType_sequence() : __unionAbstractDQ_USCOREResult() { }
        virtual ~__gmd__DQ_USCOREResult_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__DQ_USCOREResult_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREResult_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1351 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType (-561)
/* complex XML schema type 'gmd:DQ_Result_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREResult_USCOREPropertyType {
      public:
        __gmd__DQ_USCOREResult_USCOREPropertyType_sequence *__DQ_USCOREResult_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREResult_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREResult_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREResult_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__DQ_USCOREResult_USCOREPropertyType() : __DQ_USCOREResult_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__DQ_USCOREResult_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREResult_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24265 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gts__union_TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gts__union_TM_USCOREPrimitive_USCOREPropertyType (-1554)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:24254 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1553)
/* Wrapper: */
class SOAP_CMAC __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence {
      public:
        /// Union with union _gts__union_TM_USCOREPrimitive_USCOREPropertyType variant selector __unionAbstractTimePrimitive set to one of:
        int __unionAbstractTimePrimitive;
        union _gts__union_TM_USCOREPrimitive_USCOREPropertyType union_TM_USCOREPrimitive_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence() : __unionAbstractTimePrimitive() { }
        virtual ~__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1355 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType (-563)
/* complex XML schema type 'gts:TM_Primitive_PropertyType': */
class SOAP_CMAC gts__TM_USCOREPrimitive_USCOREPropertyType {
      public:
        __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence *__TM_USCOREPrimitive_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gts__TM_USCOREPrimitive_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gts__TM_USCOREPrimitive_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gts__TM_USCOREPrimitive_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gts__TM_USCOREPrimitive_USCOREPropertyType() : __TM_USCOREPrimitive_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gts__TM_USCOREPrimitive_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gts__TM_USCOREPrimitive_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1357 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType (-564)
/* complex XML schema type 'gco:AbstractObject_Type': */
class SOAP_CMAC gco__AbstractObject_USCOREType {
      public:
        /// Optional attribute 'id' of XML schema type 'xsd:ID'
        std::string *id;
        /// Optional attribute 'uuid' of XML schema type 'xsd:string'
        std::string *uuid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__AbstractObject_USCOREType, default initialized and not managed by a soap context
        virtual gco__AbstractObject_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__AbstractObject_USCOREType); }
      public:
        /// Constructor with default initializations
        gco__AbstractObject_USCOREType() : id(), uuid(), soap() { }
        virtual ~gco__AbstractObject_USCOREType() { }
        /// Friend allocator used by soap_new_gco__AbstractObject_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__AbstractObject_USCOREType * SOAP_FMAC2 soap_instantiate_gco__AbstractObject_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24380 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType (-1558)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_CharacterString_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_CharacterString	(1)	/**< union variant selector value for member CharacterString */
        std::string *CharacterString;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode	(2)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_	(3)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode_;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode	(4)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_	(5)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode_;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode	(6)	/**< union variant selector value for member gmd__CI_USCORERoleCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_	(7)	/**< union variant selector value for member gmd__CI_USCORERoleCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode_;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode	(8)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_	(9)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode_;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode	(10)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_	(11)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode_;
};
#endif

/* eml2_1ForGsoap.h:24374 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gco__CharacterString_USCOREPropertyType_sequence (-1557)
/* Wrapper: */
class SOAP_CMAC __gco__CharacterString_USCOREPropertyType_sequence {
      public:
        /// Union with union _gco__union_CharacterString_USCOREPropertyType variant selector __unionCharacterString set to one of: SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_CharacterString SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_ SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_ SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_ SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_ SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode SOAP_UNION_gsoap_eml2_1__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_
        int __unionCharacterString;
        union _gco__union_CharacterString_USCOREPropertyType union_CharacterString_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gco__CharacterString_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gco__CharacterString_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__CharacterString_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__CharacterString_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__CharacterString_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gco__CharacterString_USCOREPropertyType_sequence() : __unionCharacterString() { }
        virtual ~__gco__CharacterString_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__CharacterString_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__CharacterString_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__CharacterString_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1359 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType (-565)
/* complex XML schema type 'gco:CharacterString_PropertyType': */
class SOAP_CMAC gco__CharacterString_USCOREPropertyType {
      public:
        __gco__CharacterString_USCOREPropertyType_sequence *__CharacterString_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CharacterString_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__CharacterString_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CharacterString_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__CharacterString_USCOREPropertyType() : __CharacterString_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__CharacterString_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__CharacterString_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__CharacterString_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__CharacterString_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24429 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gco__Boolean_USCOREPropertyType_sequence (-1560)
/* Wrapper: */
class SOAP_CMAC __gco__Boolean_USCOREPropertyType_sequence {
      public:
        /// Required element 'gco:Boolean' of XML schema type 'xsd:boolean'
        bool Boolean;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gco__Boolean_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gco__Boolean_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__Boolean_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__Boolean_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__Boolean_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gco__Boolean_USCOREPropertyType_sequence() : Boolean() { }
        virtual ~__gco__Boolean_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__Boolean_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__Boolean_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Boolean_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1361 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType (-566)
/* complex XML schema type 'gco:Boolean_PropertyType': */
class SOAP_CMAC gco__Boolean_USCOREPropertyType {
      public:
        __gco__Boolean_USCOREPropertyType_sequence *__Boolean_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Boolean_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Boolean_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Boolean_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Boolean_USCOREPropertyType() : __Boolean_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Boolean_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Boolean_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Boolean_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Boolean_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24457 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gco__Real_USCOREPropertyType_sequence (-1562)
/* Wrapper: */
class SOAP_CMAC __gco__Real_USCOREPropertyType_sequence {
      public:
        /// Required element 'gco:Real' of XML schema type 'xsd:double'
        double Real;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gco__Real_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gco__Real_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__Real_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__Real_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__Real_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gco__Real_USCOREPropertyType_sequence() : Real() { }
        virtual ~__gco__Real_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__Real_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__Real_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Real_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1363 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType (-567)
/* complex XML schema type 'gco:Real_PropertyType': */
class SOAP_CMAC gco__Real_USCOREPropertyType {
      public:
        __gco__Real_USCOREPropertyType_sequence *__Real_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Real_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Real_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Real_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Real_USCOREPropertyType() : __Real_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Real_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Real_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Real_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Real_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24488 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__union_Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gco__union_Date_USCOREPropertyType (-1564)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_Date_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_1__gco__union_Date_USCOREPropertyType_Date	(1)	/**< union variant selector value for member Date */
        std::string *Date;
        #define SOAP_UNION_gsoap_eml2_1__gco__union_Date_USCOREPropertyType_DateTime	(2)	/**< union variant selector value for member DateTime */
        struct tm *DateTime;
};
#endif

/* eml2_1ForGsoap.h:1365 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType (-568)
/* complex XML schema type 'gco:Date_PropertyType': */
class SOAP_CMAC gco__Date_USCOREPropertyType {
      public:
        /// Union with union _gco__union_Date_USCOREPropertyType variant selector __union_Date_USCOREPropertyType set to one of: SOAP_UNION_gsoap_eml2_1__gco__union_Date_USCOREPropertyType_Date SOAP_UNION_gsoap_eml2_1__gco__union_Date_USCOREPropertyType_DateTime
        int __union_Date_USCOREPropertyType;
        union _gco__union_Date_USCOREPropertyType union_Date_USCOREPropertyType;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Date_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Date_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Date_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Date_USCOREPropertyType() : __union_Date_USCOREPropertyType(), gco__nilReason(), soap() { }
        virtual ~gco__Date_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Date_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Date_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Date_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24517 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gco__DateTime_USCOREPropertyType_sequence (-1566)
/* Wrapper: */
class SOAP_CMAC __gco__DateTime_USCOREPropertyType_sequence {
      public:
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gco__DateTime_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gco__DateTime_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__DateTime_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__DateTime_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__DateTime_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gco__DateTime_USCOREPropertyType_sequence() : DateTime() { }
        virtual ~__gco__DateTime_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__DateTime_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__DateTime_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__DateTime_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1369 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType (-570)
/* complex XML schema type 'gco:DateTime_PropertyType': */
class SOAP_CMAC gco__DateTime_USCOREPropertyType {
      public:
        __gco__DateTime_USCOREPropertyType_sequence *__DateTime_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__DateTime_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__DateTime_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__DateTime_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__DateTime_USCOREPropertyType() : __DateTime_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__DateTime_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__DateTime_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__DateTime_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__DateTime_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:24564 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gsr__union_SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1__gsr__union_SC_USCORECRS_USCOREPropertyType (-1569)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gsr__union_SC_USCORECRS_USCOREPropertyType
{
};
#endif

/* eml2_1ForGsoap.h:24553 */
#ifndef SOAP_TYPE_gsoap_eml2_1___gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1___gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1568)
/* Wrapper: */
class SOAP_CMAC __gsr__SC_USCORECRS_USCOREPropertyType_sequence {
      public:
        /// Union with union _gsr__union_SC_USCORECRS_USCOREPropertyType variant selector __unionAbstractCRS set to one of:
        int __unionAbstractCRS;
        union _gsr__union_SC_USCORECRS_USCOREPropertyType union_SC_USCORECRS_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___gsr__SC_USCORECRS_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___gsr__SC_USCORECRS_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gsr__SC_USCORECRS_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gsr__SC_USCORECRS_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gsr__SC_USCORECRS_USCOREPropertyType_sequence); }
      public:
        /// Constructor with default initializations
        __gsr__SC_USCORECRS_USCOREPropertyType_sequence() : __unionAbstractCRS() { }
        virtual ~__gsr__SC_USCORECRS_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gsr__SC_USCORECRS_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gsr__SC_USCORECRS_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gsr__SC_USCORECRS_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1371 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType (-571)
/* complex XML schema type 'gsr:SC_CRS_PropertyType': */
class SOAP_CMAC gsr__SC_USCORECRS_USCOREPropertyType {
      public:
        __gsr__SC_USCORECRS_USCOREPropertyType_sequence *__SC_USCORECRS_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gsr__SC_USCORECRS_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gsr__SC_USCORECRS_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gsr__SC_USCORECRS_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gsr__SC_USCORECRS_USCOREPropertyType() : __SC_USCORECRS_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gsr__SC_USCORECRS_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gsr__SC_USCORECRS_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1377 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag (-574)
/* complex XML schema type 'witsml2:NameTag': */
class SOAP_CMAC witsml2__NameTag {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:NumberingScheme' of XML schema type 'witsml2:NameTagNumberingScheme'
        enum witsml2__NameTagNumberingScheme NumberingScheme;
        /// Optional element 'witsml2:Technology' of XML schema type 'witsml2:NameTagTechnology'
        enum witsml2__NameTagTechnology *Technology;
        /// Optional element 'witsml2:Location' of XML schema type 'witsml2:NameTagLocation'
        enum witsml2__NameTagLocation *Location;
        /// Optional element 'witsml2:InstallationDate' of XML schema type 'eml21:TimeStamp'
        std::string *InstallationDate;
        /// Optional element 'witsml2:InstallationCompany' of XML schema type 'eml21:String64'
        std::string *InstallationCompany;
        /// Optional element 'witsml2:MountingCode' of XML schema type 'eml21:String64'
        std::string *MountingCode;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__NameTag, default initialized and not managed by a soap context
        virtual witsml2__NameTag *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__NameTag); }
      public:
        /// Constructor with default initializations
        witsml2__NameTag() : Name(), NumberingScheme(), Technology(), Location(), InstallationDate(), InstallationCompany(), MountingCode(), Comment(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__NameTag() { }
        /// Friend allocator used by soap_new_witsml2__NameTag(struct soap*, int)
        friend SOAP_FMAC1 witsml2__NameTag * SOAP_FMAC2 soap_instantiate_witsml2__NameTag(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1379 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Cost
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Cost (-575)
/* complex XML schema type 'witsml2:Cost': */
class SOAP_CMAC witsml2__Cost {
      public:
        /// Required attribute 'currency' of XML schema type 'eml21:String64'
        std::string currency;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Cost
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Cost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Cost, default initialized and not managed by a soap context
        virtual witsml2__Cost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Cost); }
      public:
        /// Constructor with default initializations
        witsml2__Cost() : currency(), soap() { }
        virtual ~witsml2__Cost() { }
        /// Friend allocator used by soap_new_witsml2__Cost(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Cost * SOAP_FMAC2 soap_instantiate_witsml2__Cost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1389 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint (-580)
/* complex XML schema type 'witsml2:ReferencePoint': */
class SOAP_CMAC witsml2__ReferencePoint {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:MeasuredDepth' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Elevation' of XML schema type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *Elevation;
        /// Required element 'witsml2:Location' of XML schema type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ReferencePoint, default initialized and not managed by a soap context
        virtual witsml2__ReferencePoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ReferencePoint); }
      public:
        /// Constructor with default initializations
        witsml2__ReferencePoint() : Name(), Type(), MeasuredDepth(), Description(), ExtensionNameValue(), Elevation(), Location(), uid(), soap() { }
        virtual ~witsml2__ReferencePoint() { }
        /// Friend allocator used by soap_new_witsml2__ReferencePoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ReferencePoint * SOAP_FMAC2 soap_instantiate_witsml2__ReferencePoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum (-585)
/* complex XML schema type 'witsml2:WellDatum': */
class SOAP_CMAC witsml2__WellDatum {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml2:Code' of XML schema type 'eml21:WellboreDatumReference'
        enum eml21__WellboreDatumReference *Code;
        /// Optional element 'witsml2:Kind' of XML schema type 'eml21:String64'
        std::vector<std::string> Kind;
        /// Optional element 'witsml2:MeasuredDepth' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Wellbore' of XML schema type 'witsml2:RefWellbore'
        witsml2__RefWellbore *Wellbore;
        /// Optional element 'witsml2:Rig' of XML schema type 'witsml2:RefWellboreRig'
        witsml2__RefWellboreRig *Rig;
        /// Optional element 'witsml2:Elevation' of XML schema type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *Elevation;
        /// Optional element 'witsml2:HorizontalLocation' of XML schema type 'witsml2:AbstractWellLocation'
        witsml2__AbstractWellLocation *HorizontalLocation;
        /// Required element 'witsml2:Crs' of XML schema type 'eml21:AbstractVerticalCrs'
        eml21__AbstractVerticalCrs *Crs;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellDatum, default initialized and not managed by a soap context
        virtual witsml2__WellDatum *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellDatum); }
      public:
        /// Constructor with default initializations
        witsml2__WellDatum() : Name(), Code(), Kind(), MeasuredDepth(), Comment(), ExtensionNameValue(), Wellbore(), Rig(), Elevation(), HorizontalLocation(), Crs(), uid(), soap() { }
        virtual ~witsml2__WellDatum() { }
        /// Friend allocator used by soap_new_witsml2__WellDatum(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellDatum * SOAP_FMAC2 soap_instantiate_witsml2__WellDatum(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1401 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore (-586)
/* complex XML schema type 'witsml2:RefWellbore': */
class SOAP_CMAC witsml2__RefWellbore {
      public:
        /// Required element 'witsml2:WellboreReference' of XML schema type 'eml21:String64'
        std::string WellboreReference;
        /// Optional element 'witsml2:WellParent' of XML schema type 'eml21:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellbore, default initialized and not managed by a soap context
        virtual witsml2__RefWellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellbore); }
      public:
        /// Constructor with default initializations
        witsml2__RefWellbore() : WellboreReference(), WellParent(), soap() { }
        virtual ~witsml2__RefWellbore() { }
        /// Friend allocator used by soap_new_witsml2__RefWellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellbore * SOAP_FMAC2 soap_instantiate_witsml2__RefWellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1403 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig (-587)
/* complex XML schema type 'witsml2:RefWellboreRig': */
class SOAP_CMAC witsml2__RefWellboreRig {
      public:
        /// Required element 'witsml2:RigReference' of XML schema type 'eml21:String64'
        std::string RigReference;
        /// Optional element 'witsml2:WellboreParent' of XML schema type 'eml21:String64'
        std::string *WellboreParent;
        /// Optional element 'witsml2:WellParent' of XML schema type 'eml21:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellboreRig, default initialized and not managed by a soap context
        virtual witsml2__RefWellboreRig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellboreRig); }
      public:
        /// Constructor with default initializations
        witsml2__RefWellboreRig() : RigReference(), WellboreParent(), WellParent(), soap() { }
        virtual ~witsml2__RefWellboreRig() { }
        /// Friend allocator used by soap_new_witsml2__RefWellboreRig(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellboreRig * SOAP_FMAC2 soap_instantiate_witsml2__RefWellboreRig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1405 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation (-588)
/* complex XML schema type 'witsml2:AbstractWellLocation': */
class SOAP_CMAC witsml2__AbstractWellLocation {
      public:
        /// Optional element 'witsml2:Original' of XML schema type 'xsd:boolean'
        bool *Original;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractWellLocation, default initialized and not managed by a soap context
        virtual witsml2__AbstractWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractWellLocation); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractWellLocation() : Original(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__AbstractWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__AbstractWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__AbstractWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1407 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem (-589)
/* complex XML schema type 'witsml2:PublicLandSurveySystem': */
class SOAP_CMAC witsml2__PublicLandSurveySystem {
      public:
        /// Optional element 'witsml2:PrincipalMeridian' of XML schema type 'witsml2:PrincipalMeridian'
        enum witsml2__PrincipalMeridian *PrincipalMeridian;
        /// Optional element 'witsml2:Range' of XML schema type 'xsd:int'
        int *Range;
        /// Optional element 'witsml2:RangeDir' of XML schema type 'witsml2:EastOrWest'
        enum witsml2__EastOrWest *RangeDir;
        /// Optional element 'witsml2:Township' of XML schema type 'xsd:int'
        int *Township;
        /// Optional element 'witsml2:TownshipDir' of XML schema type 'witsml2:NorthOrSouth'
        enum witsml2__NorthOrSouth *TownshipDir;
        /// Optional element 'witsml2:Section' of XML schema type 'witsml2:SectionNumber'
        std::string *Section;
        /// Optional element 'witsml2:QuarterSection' of XML schema type 'witsml2:PublicLandSurveySystemQuarterSection'
        std::string *QuarterSection;
        /// Optional element 'witsml2:QuarterTownship' of XML schema type 'witsml2:PublicLandSurveySystemQuarterTownship'
        std::string *QuarterTownship;
        /// Optional element 'witsml2:FootageNS' of XML schema type 'witsml2:DistanceNorthSouth'
        witsml2__DistanceNorthSouth *FootageNS;
        /// Optional element 'witsml2:FootageEW' of XML schema type 'witsml2:DistanceEastWest'
        witsml2__DistanceEastWest *FootageEW;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PublicLandSurveySystem, default initialized and not managed by a soap context
        virtual witsml2__PublicLandSurveySystem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PublicLandSurveySystem); }
      public:
        /// Constructor with default initializations
        witsml2__PublicLandSurveySystem() : PrincipalMeridian(), Range(), RangeDir(), Township(), TownshipDir(), Section(), QuarterSection(), QuarterTownship(), FootageNS(), FootageEW(), soap() { }
        virtual ~witsml2__PublicLandSurveySystem() { }
        /// Friend allocator used by soap_new_witsml2__PublicLandSurveySystem(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PublicLandSurveySystem * SOAP_FMAC2 soap_instantiate_witsml2__PublicLandSurveySystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1411 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams (-591)
/* complex XML schema type 'witsml2:DrillingParams': */
class SOAP_CMAC witsml2__DrillingParams {
      public:
        /// Optional element 'witsml2:ETimOpBit' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimOpBit;
        /// Optional element 'witsml2:MdHoleStart' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHoleStart;
        /// Required element 'witsml2:MdHoleStop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHoleStop;
        /// Optional element 'witsml2:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:HkldRot' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldRot;
        /// Optional element 'witsml2:OverPull' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *OverPull;
        /// Optional element 'witsml2:SlackOff' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *SlackOff;
        /// Optional element 'witsml2:HkldUp' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldUp;
        /// Optional element 'witsml2:HkldDn' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldDn;
        /// Optional element 'witsml2:TqOnBotAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotAv;
        /// Optional element 'witsml2:TqOnBotMx' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotMx;
        /// Optional element 'witsml2:TqOnBotMn' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotMn;
        /// Optional element 'witsml2:TqOffBotAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOffBotAv;
        /// Optional element 'witsml2:TqDhAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqDhAv;
        /// Optional element 'witsml2:WtAboveJar' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WtAboveJar;
        /// Optional element 'witsml2:WtBelowJar' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WtBelowJar;
        /// Optional element 'witsml2:WtMud' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WtMud;
        /// Optional element 'witsml2:FlowratePumpAv' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpAv;
        /// Optional element 'witsml2:FlowratePumpMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpMx;
        /// Optional element 'witsml2:FlowratePumpMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpMn;
        /// Optional element 'witsml2:VelNozzleAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *VelNozzleAv;
        /// Optional element 'witsml2:PowBit' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *PowBit;
        /// Optional element 'witsml2:PresDropBit' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresDropBit;
        /// Optional element 'witsml2:CTimHold' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimHold;
        /// Optional element 'witsml2:CTimSteering' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimSteering;
        /// Optional element 'witsml2:CTimDrillRot' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimDrillRot;
        /// Optional element 'witsml2:CTimDrillSlid' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimDrillSlid;
        /// Optional element 'witsml2:CTimCirc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimCirc;
        /// Optional element 'witsml2:CTimReam' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimReam;
        /// Optional element 'witsml2:DistDrillRot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistReam' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistHold' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistSteering' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistSteering;
        /// Optional element 'witsml2:RpmAv' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmAv;
        /// Optional element 'witsml2:RpmMx' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmMx;
        /// Optional element 'witsml2:RpmMn' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmMn;
        /// Optional element 'witsml2:RpmAvDh' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmAvDh;
        /// Optional element 'witsml2:RopAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:RopMx' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopMx;
        /// Optional element 'witsml2:RopMn' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopMn;
        /// Optional element 'witsml2:WobAv' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobAv;
        /// Optional element 'witsml2:WobMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMx;
        /// Optional element 'witsml2:WobMn' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMn;
        /// Optional element 'witsml2:WobAvDh' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobAvDh;
        /// Optional element 'witsml2:ReasonTrip' of XML schema type 'eml21:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml2:ObjectiveBha' of XML schema type 'eml21:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml2:AziTop' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziTop;
        /// Optional element 'witsml2:AziBottom' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziBottom;
        /// Optional element 'witsml2:InclStart' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclStart;
        /// Optional element 'witsml2:InclMx' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclMx;
        /// Optional element 'witsml2:InclMn' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclMn;
        /// Optional element 'witsml2:InclStop' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclStop;
        /// Optional element 'witsml2:TempMudDhMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempMudDhMx;
        /// Optional element 'witsml2:PresPumpAv' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresPumpAv;
        /// Optional element 'witsml2:FlowrateBit' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateBit;
        /// Optional element 'witsml2:MudClass' of XML schema type 'witsml2:MudClass'
        enum witsml2__MudClass *MudClass;
        /// Optional element 'witsml2:MudSubClass' of XML schema type 'witsml2:MudSubClass'
        enum witsml2__MudSubClass *MudSubClass;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillingParams, default initialized and not managed by a soap context
        virtual witsml2__DrillingParams *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillingParams); }
      public:
        /// Constructor with default initializations
        witsml2__DrillingParams() : ETimOpBit(), MdHoleStart(), MdHoleStop(), Tubular(), HkldRot(), OverPull(), SlackOff(), HkldUp(), HkldDn(), TqOnBotAv(), TqOnBotMx(), TqOnBotMn(), TqOffBotAv(), TqDhAv(), WtAboveJar(), WtBelowJar(), WtMud(), FlowratePumpAv(), FlowratePumpMx(), FlowratePumpMn(), VelNozzleAv(), PowBit(), PresDropBit(), CTimHold(), CTimSteering(), CTimDrillRot(), CTimDrillSlid(), CTimCirc(), CTimReam(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), RpmAv(), RpmMx(), RpmMn(), RpmAvDh(), RopAv(), RopMx(), RopMn(), WobAv(), WobMx(), WobMn(), WobAvDh(), ReasonTrip(), ObjectiveBha(), AziTop(), AziBottom(), InclStart(), InclMx(), InclMn(), InclStop(), TempMudDhMx(), PresPumpAv(), FlowrateBit(), MudClass(), MudSubClass(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillingParams() { }
        /// Friend allocator used by soap_new_witsml2__DrillingParams(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillingParams * SOAP_FMAC2 soap_instantiate_witsml2__DrillingParams(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1413 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid (-592)
/* complex XML schema type 'witsml2:Fluid': */
class SOAP_CMAC witsml2__Fluid {
      public:
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:LocationSample' of XML schema type 'eml21:String64'
        std::string *LocationSample;
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Ecd' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Ecd;
        /// Optional element 'witsml2:KickToleranceVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *KickToleranceVolume;
        /// Optional element 'witsml2:KickToleranceIntensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *KickToleranceIntensity;
        /// Optional element 'witsml2:TempFlowLine' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempFlowLine;
        /// Optional element 'witsml2:PresBopRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBopRating;
        /// Optional element 'witsml2:MudClass' of XML schema type 'witsml2:MudClass'
        enum witsml2__MudClass *MudClass;
        /// Optional element 'witsml2:Density' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:VisFunnel' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *VisFunnel;
        /// Optional element 'witsml2:TempVis' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempVis;
        /// Optional element 'witsml2:Pv' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *Pv;
        /// Optional element 'witsml2:Yp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Yp;
        /// Optional element 'witsml2:Gel10Sec' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Sec;
        /// Optional element 'witsml2:Gel10Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Min;
        /// Optional element 'witsml2:Gel30Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel30Min;
        /// Optional element 'witsml2:FilterCakeLtlp' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FilterCakeLtlp;
        /// Optional element 'witsml2:FiltrateLtlp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FiltrateLtlp;
        /// Optional element 'witsml2:TempHthp' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempHthp;
        /// Optional element 'witsml2:PresHthp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresHthp;
        /// Optional element 'witsml2:FiltrateHthp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FiltrateHthp;
        /// Optional element 'witsml2:FilterCakeHthp' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FilterCakeHthp;
        /// Optional element 'witsml2:SolidsPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsPc;
        /// Optional element 'witsml2:WaterPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *WaterPc;
        /// Optional element 'witsml2:OilPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *OilPc;
        /// Optional element 'witsml2:SandPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SandPc;
        /// Optional element 'witsml2:SolidsLowGravPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsLowGravPc;
        /// Optional element 'witsml2:SolidsLowGrav' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SolidsLowGrav;
        /// Optional element 'witsml2:SolidsCalcPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsCalcPc;
        /// Optional element 'witsml2:BaritePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *BaritePc;
        /// Optional element 'witsml2:Lcm' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Lcm;
        /// Optional element 'witsml2:Mbt' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Mbt;
        /// Optional element 'witsml2:Ph' of XML schema type 'xsd:double'
        double *Ph;
        /// Optional element 'witsml2:TempPh' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempPh;
        /// Optional element 'witsml2:Pm' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Pm;
        /// Optional element 'witsml2:PmFiltrate' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *PmFiltrate;
        /// Optional element 'witsml2:Mf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Mf;
        /// Optional element 'witsml2:AlkalinityP1' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *AlkalinityP1;
        /// Optional element 'witsml2:AlkalinityP2' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *AlkalinityP2;
        /// Optional element 'witsml2:Chloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Chloride;
        /// Optional element 'witsml2:Calcium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Calcium;
        /// Optional element 'witsml2:Magnesium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Magnesium;
        /// Optional element 'witsml2:Potassium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Potassium;
        /// Optional element 'witsml2:BrinePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *BrinePc;
        /// Optional element 'witsml2:BrineDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *BrineDensity;
        /// Optional element 'witsml2:Lime' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Lime;
        /// Optional element 'witsml2:ElectStab' of XML schema type 'eml21:ElectricPotentialDifferenceMeasure'
        eml21__ElectricPotentialDifferenceMeasure *ElectStab;
        /// Optional element 'witsml2:CalciumChloridePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *CalciumChloridePc;
        /// Optional element 'witsml2:CalciumChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *CalciumChloride;
        /// Optional element 'witsml2:Company' of XML schema type 'eml21:String64'
        std::string *Company;
        /// Optional element 'witsml2:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Asg' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *Asg;
        /// Optional element 'witsml2:SolidsHiGravPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsHiGravPc;
        /// Optional element 'witsml2:SolidsHiGrav' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SolidsHiGrav;
        /// Optional element 'witsml2:Polymer' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Polymer;
        /// Optional element 'witsml2:PolyType' of XML schema type 'eml21:String64'
        std::string *PolyType;
        /// Optional element 'witsml2:SolCorPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolCorPc;
        /// Optional element 'witsml2:OilCtg' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *OilCtg;
        /// Optional element 'witsml2:OilCtgDry' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *OilCtgDry;
        /// Optional element 'witsml2:HardnessCa' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *HardnessCa;
        /// Optional element 'witsml2:Sulfide' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Sulfide;
        /// Optional element 'witsml2:AverageCuttingSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AverageCuttingSize;
        /// Optional element 'witsml2:Carbonate' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Carbonate;
        /// Optional element 'witsml2:Iron' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Iron;
        /// Optional element 'witsml2:MetalRecovered' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *MetalRecovered;
        /// Optional element 'witsml2:Turbidity' of XML schema type 'xsd:double'
        double *Turbidity;
        /// Optional element 'witsml2:OilGrease' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *OilGrease;
        /// Optional element 'witsml2:Salt' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Salt;
        /// Optional element 'witsml2:SaltPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SaltPc;
        /// Optional element 'witsml2:Tct' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Tct;
        /// Optional element 'witsml2:WaterPhaseSalinity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WaterPhaseSalinity;
        /// Optional element 'witsml2:WholeMudCalcium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WholeMudCalcium;
        /// Optional element 'witsml2:WholeMudChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WholeMudChloride;
        /// Optional element 'witsml2:ZincOxide' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *ZincOxide;
        /// Optional element 'witsml2:SodiumChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SodiumChloride;
        /// Optional element 'witsml2:SodiumChloridePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SodiumChloridePc;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Rheometer' of XML schema type 'witsml2:Rheometer'
        std::vector<witsml2__Rheometer *> Rheometer;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Fluid, default initialized and not managed by a soap context
        virtual witsml2__Fluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Fluid); }
      public:
        /// Constructor with default initializations
        witsml2__Fluid() : Type(), LocationSample(), DTim(), Md(), Tvd(), Ecd(), KickToleranceVolume(), KickToleranceIntensity(), TempFlowLine(), PresBopRating(), MudClass(), Density(), VisFunnel(), TempVis(), Pv(), Yp(), Gel10Sec(), Gel10Min(), Gel30Min(), FilterCakeLtlp(), FiltrateLtlp(), TempHthp(), PresHthp(), FiltrateHthp(), FilterCakeHthp(), SolidsPc(), WaterPc(), OilPc(), SandPc(), SolidsLowGravPc(), SolidsLowGrav(), SolidsCalcPc(), BaritePc(), Lcm(), Mbt(), Ph(), TempPh(), Pm(), PmFiltrate(), Mf(), AlkalinityP1(), AlkalinityP2(), Chloride(), Calcium(), Magnesium(), Potassium(), BrinePc(), BrineDensity(), Lime(), ElectStab(), CalciumChloridePc(), CalciumChloride(), Company(), Engineer(), Asg(), SolidsHiGravPc(), SolidsHiGrav(), Polymer(), PolyType(), SolCorPc(), OilCtg(), OilCtgDry(), HardnessCa(), Sulfide(), AverageCuttingSize(), Carbonate(), Iron(), MetalRecovered(), Turbidity(), OilGrease(), Salt(), SaltPc(), Tct(), WaterPhaseSalinity(), WholeMudCalcium(), WholeMudChloride(), ZincOxide(), SodiumChloride(), SodiumChloridePc(), Comments(), ExtensionNameValue(), Rheometer(), uid(), soap() { }
        virtual ~witsml2__Fluid() { }
        /// Friend allocator used by soap_new_witsml2__Fluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Fluid * SOAP_FMAC2 soap_instantiate_witsml2__Fluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1415 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity (-593)
/* complex XML schema type 'witsml2:RheometerViscosity': */
class SOAP_CMAC witsml2__RheometerViscosity {
      public:
        /// Required element 'witsml2:Speed' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *Speed;
        /// Required element 'witsml2:Viscosity' of XML schema type 'xsd:double'
        double Viscosity;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RheometerViscosity, default initialized and not managed by a soap context
        virtual witsml2__RheometerViscosity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RheometerViscosity); }
      public:
        /// Constructor with default initializations
        witsml2__RheometerViscosity() : Speed(), Viscosity(), uid(), soap() { }
        virtual ~witsml2__RheometerViscosity() { }
        /// Friend allocator used by soap_new_witsml2__RheometerViscosity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RheometerViscosity * SOAP_FMAC2 soap_instantiate_witsml2__RheometerViscosity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1421 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo (-596)
/* complex XML schema type 'witsml2:DrillReportWellboreInfo': */
class SOAP_CMAC witsml2__DrillReportWellboreInfo {
      public:
        /// Optional element 'witsml2:DTimSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimSpud;
        /// Optional element 'witsml2:DTimPreSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPreSpud;
        /// Optional element 'witsml2:DateDrillComplete' of XML schema type 'xsd:date'
        std::string *DateDrillComplete;
        /// Optional element 'witsml2:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml2:DrillContractor' of XML schema type 'eml21:String64'
        std::string *DrillContractor;
        /// Optional element 'witsml2:RigAlias' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> RigAlias;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportWellboreInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportWellboreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportWellboreInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportWellboreInfo() : DTimSpud(), DTimPreSpud(), DateDrillComplete(), Operator(), DrillContractor(), RigAlias(), soap() { }
        virtual ~witsml2__DrillReportWellboreInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportWellboreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportWellboreInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportWellboreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo (-597)
/* complex XML schema type 'witsml2:DrillReportStatusInfo': */
class SOAP_CMAC witsml2__DrillReportStatusInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:MdPlugTop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdPlugTop;
        /// Optional element 'witsml2:DiaHole' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:MdDiaHoleStart' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdDiaHoleStart;
        /// Optional element 'witsml2:DiaPilot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPilot;
        /// Optional element 'witsml2:MdDiaPilotPlan' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdDiaPilotPlan;
        /// Optional element 'witsml2:TvdDiaPilotPlan' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdDiaPilotPlan;
        /// Optional element 'witsml2:TypeWellbore' of XML schema type 'witsml2:WellboreType'
        enum witsml2__WellboreType *TypeWellbore;
        /// Optional element 'witsml2:MdKickoff' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml2:TvdKickoff' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *TvdKickoff;
        /// Optional element 'witsml2:StrengthForm' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *StrengthForm;
        /// Optional element 'witsml2:MdStrengthForm' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdStrengthForm;
        /// Optional element 'witsml2:TvdStrengthForm' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdStrengthForm;
        /// Optional element 'witsml2:DiaCsgLast' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:MdCsgLast' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:TvdCsgLast' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdCsgLast;
        /// Optional element 'witsml2:PresTestType' of XML schema type 'witsml2:PresTestType'
        enum witsml2__PresTestType *PresTestType;
        /// Optional element 'witsml2:MdPlanned' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:DistDrill' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrill;
        /// Optional element 'witsml2:Sum24Hr' of XML schema type 'eml21:String2000'
        std::string *Sum24Hr;
        /// Optional element 'witsml2:Forecast24Hr' of XML schema type 'eml21:String2000'
        std::string *Forecast24Hr;
        /// Optional element 'witsml2:RopCurrent' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopCurrent;
        /// Optional element 'witsml2:Rig' of XML schema type 'eml21:String64'
        std::string *Rig;
        /// Optional element 'witsml2:ETimStart' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimStart;
        /// Optional element 'witsml2:ETimSpud' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSpud;
        /// Optional element 'witsml2:ETimLoc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLoc;
        /// Optional element 'witsml2:ETimDrill' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrill;
        /// Optional element 'witsml2:RopAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:Supervisor' of XML schema type 'eml21:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Geologist' of XML schema type 'eml21:String64'
        std::string *Geologist;
        /// Optional element 'witsml2:ETimDrillRot' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillRot;
        /// Optional element 'witsml2:ETimDrillSlid' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillSlid;
        /// Optional element 'witsml2:ETimCirc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimCirc;
        /// Optional element 'witsml2:ETimReam' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimReam;
        /// Optional element 'witsml2:ETimHold' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimHold;
        /// Optional element 'witsml2:ETimSteering' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSteering;
        /// Optional element 'witsml2:DistDrillRot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistReam' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistHold' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistSteering' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistSteering;
        /// Optional element 'witsml2:NumPob' of XML schema type 'xsd:int'
        int *NumPob;
        /// Optional element 'witsml2:NumContract' of XML schema type 'xsd:int'
        int *NumContract;
        /// Optional element 'witsml2:NumOperator' of XML schema type 'xsd:int'
        int *NumOperator;
        /// Optional element 'witsml2:NumService' of XML schema type 'xsd:int'
        int *NumService;
        /// Optional element 'witsml2:NumAFE' of XML schema type 'eml21:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:ConditionHole' of XML schema type 'eml21:String64'
        std::string *ConditionHole;
        /// Optional element 'witsml2:TvdLot' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdLot;
        /// Optional element 'witsml2:PresLotEmw' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PresLotEmw;
        /// Optional element 'witsml2:PresKickTol' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresKickTol;
        /// Optional element 'witsml2:VolKickTol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolKickTol;
        /// Optional element 'witsml2:Maasp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Maasp;
        /// Optional element 'witsml2:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ParentWellbore' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ParentWellbore;
        /// Optional element 'witsml2:ElevKelly' of XML schema type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *ElevKelly;
        /// Optional element 'witsml2:CostDay' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostDay;
        /// Optional element 'witsml2:CostDayMud' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostDayMud;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportStatusInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportStatusInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportStatusInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportStatusInfo() : DTim(), Md(), Tvd(), MdPlugTop(), DiaHole(), MdDiaHoleStart(), DiaPilot(), MdDiaPilotPlan(), TvdDiaPilotPlan(), TypeWellbore(), MdKickoff(), TvdKickoff(), StrengthForm(), MdStrengthForm(), TvdStrengthForm(), DiaCsgLast(), MdCsgLast(), TvdCsgLast(), PresTestType(), MdPlanned(), DistDrill(), Sum24Hr(), Forecast24Hr(), RopCurrent(), Rig(), ETimStart(), ETimSpud(), ETimLoc(), ETimDrill(), RopAv(), Supervisor(), Engineer(), Geologist(), ETimDrillRot(), ETimDrillSlid(), ETimCirc(), ETimReam(), ETimHold(), ETimSteering(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), NumPob(), NumContract(), NumOperator(), NumService(), NumAFE(), ConditionHole(), TvdLot(), PresLotEmw(), PresKickTol(), VolKickTol(), Maasp(), Tubular(), ExtensionNameValue(), ParentWellbore(), ElevKelly(), CostDay(), CostDayMud(), uid(), soap() { }
        virtual ~witsml2__DrillReportStatusInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportStatusInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportStatusInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportStatusInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1425 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer (-598)
/* complex XML schema type 'witsml2:Rheometer': */
class SOAP_CMAC witsml2__Rheometer {
      public:
        /// Optional element 'witsml2:TempRheom' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempRheom;
        /// Optional element 'witsml2:PresRheom' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRheom;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Viscosity' of XML schema type 'witsml2:RheometerViscosity'
        std::vector<witsml2__RheometerViscosity *> Viscosity;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Rheometer, default initialized and not managed by a soap context
        virtual witsml2__Rheometer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Rheometer); }
      public:
        /// Constructor with default initializations
        witsml2__Rheometer() : TempRheom(), PresRheom(), ExtensionNameValue(), Viscosity(), uid(), soap() { }
        virtual ~witsml2__Rheometer() { }
        /// Friend allocator used by soap_new_witsml2__Rheometer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Rheometer * SOAP_FMAC2 soap_instantiate_witsml2__Rheometer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1427 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure (-599)
/* complex XML schema type 'witsml2:DrillReportPorePressure': */
class SOAP_CMAC witsml2__DrillReportPorePressure {
      public:
        /// Required element 'witsml2:ReadingKind' of XML schema type 'witsml2:ReadingKind'
        enum witsml2__ReadingKind ReadingKind;
        /// Required element 'witsml2:EquivalentMudWeight' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *EquivalentMudWeight;
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportPorePressure, default initialized and not managed by a soap context
        virtual witsml2__DrillReportPorePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportPorePressure); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportPorePressure() : ReadingKind(), EquivalentMudWeight(), DTim(), Md(), Tvd(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportPorePressure() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportPorePressure(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportPorePressure * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportPorePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1431 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation (-601)
/* complex XML schema type 'witsml2:DrillReportSurveyStation': */
class SOAP_CMAC witsml2__DrillReportSurveyStation {
      public:
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Required element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Incl' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml2:Azi' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml2:VertSect' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *VertSect;
        /// Optional element 'witsml2:Dls' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Location' of XML schema type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportSurveyStation, default initialized and not managed by a soap context
        virtual witsml2__DrillReportSurveyStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportSurveyStation); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportSurveyStation() : DTim(), Md(), Tvd(), Incl(), Azi(), VertSect(), Dls(), ExtensionNameValue(), Location(), uid(), soap() { }
        virtual ~witsml2__DrillReportSurveyStation() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportSurveyStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportSurveyStation * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportSurveyStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1433 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity (-602)
/* complex XML schema type 'witsml2:DrillActivity': */
class SOAP_CMAC witsml2__DrillActivity {
      public:
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:Duration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *Duration;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Phase' of XML schema type 'eml21:String64'
        std::string *Phase;
        /// Optional element 'witsml2:ActivityCode' of XML schema type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:DetailActivity' of XML schema type 'eml21:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml2:TypeActivityClass' of XML schema type 'witsml2:DrillActivityClassType'
        enum witsml2__DrillActivityClassType *TypeActivityClass;
        /// Optional element 'witsml2:ActivityMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ActivityMdInterval;
        /// Optional element 'witsml2:ActivityTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *ActivityTvdInterval;
        /// Optional element 'witsml2:BitMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *BitMdInterval;
        /// Optional element 'witsml2:State' of XML schema type 'eml21:String64'
        std::string *State;
        /// Optional element 'witsml2:StateDetailActivity' of XML schema type 'witsml2:StateDetailActivity'
        enum witsml2__StateDetailActivity *StateDetailActivity;
        /// Optional element 'witsml2:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml2:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:Optimum' of XML schema type 'xsd:boolean'
        bool *Optimum;
        /// Optional element 'witsml2:Productive' of XML schema type 'xsd:boolean'
        bool *Productive;
        /// Optional element 'witsml2:ItemState' of XML schema type 'witsml2:ItemState'
        enum witsml2__ItemState *ItemState;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ProprietaryCode' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ProprietaryCode;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillActivity, default initialized and not managed by a soap context
        virtual witsml2__DrillActivity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillActivity); }
      public:
        /// Constructor with default initializations
        witsml2__DrillActivity() : DTimStart(), DTimEnd(), Duration(), Md(), Tvd(), Phase(), ActivityCode(), DetailActivity(), TypeActivityClass(), ActivityMdInterval(), ActivityTvdInterval(), BitMdInterval(), State(), StateDetailActivity(), Operator(), Tubular(), Optimum(), Productive(), ItemState(), Comments(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml2__DrillActivity() { }
        /// Friend allocator used by soap_new_witsml2__DrillActivity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillActivity * SOAP_FMAC2 soap_instantiate_witsml2__DrillActivity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1435 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo (-603)
/* complex XML schema type 'witsml2:DrillReportLogInfo': */
class SOAP_CMAC witsml2__DrillReportLogInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:ServiceCompany' of XML schema type 'eml21:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml2:LoggedMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *LoggedMdInterval;
        /// Optional element 'witsml2:LoggedTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *LoggedTvdInterval;
        /// Optional element 'witsml2:Tool' of XML schema type 'eml21:String64'
        std::string *Tool;
        /// Optional element 'witsml2:MdTempTool' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdTempTool;
        /// Optional element 'witsml2:TvdTempTool' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdTempTool;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BottomHoleTemperature' of XML schema type 'witsml2:AbstractBottomHoleTemperature'
        witsml2__AbstractBottomHoleTemperature *BottomHoleTemperature;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportLogInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportLogInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportLogInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportLogInfo() : DTim(), RunNumber(), ServiceCompany(), LoggedMdInterval(), LoggedTvdInterval(), Tool(), MdTempTool(), TvdTempTool(), ExtensionNameValue(), BottomHoleTemperature(), uid(), soap() { }
        virtual ~witsml2__DrillReportLogInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportLogInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportLogInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportLogInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1437 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo (-604)
/* complex XML schema type 'witsml2:DrillReportCoreInfo': */
class SOAP_CMAC witsml2__DrillReportCoreInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:CoreNumber' of XML schema type 'eml21:String64'
        std::string *CoreNumber;
        /// Optional element 'witsml2:CoredMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *CoredMdInterval;
        /// Optional element 'witsml2:CoredTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *CoredTvdInterval;
        /// Optional element 'witsml2:LenRecovered' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenRecovered;
        /// Optional element 'witsml2:RecoverPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RecoverPc;
        /// Optional element 'witsml2:LenBarrel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBarrel;
        /// Optional element 'witsml2:InnerBarrelType' of XML schema type 'witsml2:InnerBarrelType'
        enum witsml2__InnerBarrelType *InnerBarrelType;
        /// Optional element 'witsml2:CoreDescription' of XML schema type 'eml21:String2000'
        std::string *CoreDescription;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportCoreInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportCoreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportCoreInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportCoreInfo() : DTim(), CoreNumber(), CoredMdInterval(), CoredTvdInterval(), LenRecovered(), RecoverPc(), LenBarrel(), InnerBarrelType(), CoreDescription(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportCoreInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportCoreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportCoreInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportCoreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1439 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo (-605)
/* complex XML schema type 'witsml2:DrillReportWellTestInfo': */
class SOAP_CMAC witsml2__DrillReportWellTestInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:TestType' of XML schema type 'witsml2:WellTestType'
        enum witsml2__WellTestType *TestType;
        /// Optional element 'witsml2:TestNumber' of XML schema type 'xsd:int'
        int *TestNumber;
        /// Optional element 'witsml2:TestMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *TestMdInterval;
        /// Optional element 'witsml2:TestTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TestTvdInterval;
        /// Optional element 'witsml2:ChokeOrificeSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ChokeOrificeSize;
        /// Optional element 'witsml2:DensityOil' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityOil;
        /// Optional element 'witsml2:DensityWater' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityWater;
        /// Optional element 'witsml2:DensityGas' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityGas;
        /// Optional element 'witsml2:FlowRateOil' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateOil;
        /// Optional element 'witsml2:FlowRateWater' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateWater;
        /// Optional element 'witsml2:FlowRateGas' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateGas;
        /// Optional element 'witsml2:PresShutIn' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutIn;
        /// Optional element 'witsml2:PresFlowing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresFlowing;
        /// Optional element 'witsml2:PresBottom' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBottom;
        /// Optional element 'witsml2:GasOilRatio' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasOilRatio;
        /// Optional element 'witsml2:WaterOilRatio' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *WaterOilRatio;
        /// Optional element 'witsml2:Chloride' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *Chloride;
        /// Optional element 'witsml2:CarbonDioxide' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *CarbonDioxide;
        /// Optional element 'witsml2:HydrogenSulfide' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *HydrogenSulfide;
        /// Optional element 'witsml2:VolOilTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOilTotal;
        /// Optional element 'witsml2:VolGasTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolGasTotal;
        /// Optional element 'witsml2:VolWaterTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolWaterTotal;
        /// Optional element 'witsml2:VolOilStored' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOilStored;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportWellTestInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportWellTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportWellTestInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportWellTestInfo() : DTim(), TestType(), TestNumber(), TestMdInterval(), TestTvdInterval(), ChokeOrificeSize(), DensityOil(), DensityWater(), DensityGas(), FlowRateOil(), FlowRateWater(), FlowRateGas(), PresShutIn(), PresFlowing(), PresBottom(), GasOilRatio(), WaterOilRatio(), Chloride(), CarbonDioxide(), HydrogenSulfide(), VolOilTotal(), VolGasTotal(), VolWaterTotal(), VolOilStored(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportWellTestInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportWellTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportWellTestInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportWellTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1441 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo (-606)
/* complex XML schema type 'witsml2:DrillReportFormTestInfo': */
class SOAP_CMAC witsml2__DrillReportFormTestInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:PresPore' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresPore;
        /// Optional element 'witsml2:GoodSeal' of XML schema type 'xsd:boolean'
        bool *GoodSeal;
        /// Optional element 'witsml2:MdSample' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdSample;
        /// Optional element 'witsml2:DominateComponent' of XML schema type 'eml21:String64'
        std::string *DominateComponent;
        /// Optional element 'witsml2:DensityHC' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityHC;
        /// Optional element 'witsml2:VolumeSample' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeSample;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportFormTestInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportFormTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportFormTestInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportFormTestInfo() : DTim(), Md(), Tvd(), PresPore(), GoodSeal(), MdSample(), DominateComponent(), DensityHC(), VolumeSample(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportFormTestInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportFormTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportFormTestInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportFormTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1443 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo (-607)
/* complex XML schema type 'witsml2:DrillReportLithShowInfo': */
class SOAP_CMAC witsml2__DrillReportLithShowInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:ShowMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ShowMdInterval;
        /// Optional element 'witsml2:ShowTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *ShowTvdInterval;
        /// Optional element 'witsml2:Show' of XML schema type 'eml21:String2000'
        std::string *Show;
        /// Optional element 'witsml2:Lithology' of XML schema type 'eml21:String2000'
        std::string *Lithology;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportLithShowInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportLithShowInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportLithShowInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportLithShowInfo() : DTim(), ShowMdInterval(), ShowTvdInterval(), Show(), Lithology(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportLithShowInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportLithShowInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportLithShowInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportLithShowInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1445 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo (-608)
/* complex XML schema type 'witsml2:DrillReportEquipFailureInfo': */
class SOAP_CMAC witsml2__DrillReportEquipFailureInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:EquipClass' of XML schema type 'eml21:String64'
        std::string *EquipClass;
        /// Optional element 'witsml2:ETimMissProduction' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimMissProduction;
        /// Optional element 'witsml2:DTimRepair' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRepair;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportEquipFailureInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportEquipFailureInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportEquipFailureInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportEquipFailureInfo() : DTim(), Md(), Tvd(), EquipClass(), ETimMissProduction(), DTimRepair(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportEquipFailureInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportEquipFailureInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportEquipFailureInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportEquipFailureInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1447 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo (-609)
/* complex XML schema type 'witsml2:DrillReportControlIncidentInfo': */
class SOAP_CMAC witsml2__DrillReportControlIncidentInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:MdInflow' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdInflow;
        /// Optional element 'witsml2:TvdInflow' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdInflow;
        /// Optional element 'witsml2:Phase' of XML schema type 'eml21:String64'
        std::string *Phase;
        /// Optional element 'witsml2:ActivityCode' of XML schema type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:DetailActivity' of XML schema type 'eml21:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml2:ETimLost' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLost;
        /// Optional element 'witsml2:DTimRegained' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRegained;
        /// Optional element 'witsml2:DiaBit' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaBit;
        /// Optional element 'witsml2:MdBit' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:WtMud' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WtMud;
        /// Required element 'witsml2:PorePressure' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PorePressure;
        /// Optional element 'witsml2:DiaCsgLast' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:MdCsgLast' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:VolMudGained' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudGained;
        /// Optional element 'witsml2:PresShutInCasing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutInCasing;
        /// Optional element 'witsml2:PresShutInDrill' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutInDrill;
        /// Optional element 'witsml2:IncidentType' of XML schema type 'witsml2:WellControlIncidentType'
        enum witsml2__WellControlIncidentType *IncidentType;
        /// Optional element 'witsml2:KillingType' of XML schema type 'witsml2:WellKillingProcedureType'
        enum witsml2__WellKillingProcedureType *KillingType;
        /// Optional element 'witsml2:Formation' of XML schema type 'eml21:String2000'
        std::string *Formation;
        /// Optional element 'witsml2:TempBottom' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempBottom;
        /// Optional element 'witsml2:PresMaxChoke' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresMaxChoke;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ProprietaryCode' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ProprietaryCode;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportControlIncidentInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportControlIncidentInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportControlIncidentInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportControlIncidentInfo() : DTim(), MdInflow(), TvdInflow(), Phase(), ActivityCode(), DetailActivity(), ETimLost(), DTimRegained(), DiaBit(), MdBit(), WtMud(), PorePressure(), DiaCsgLast(), MdCsgLast(), VolMudGained(), PresShutInCasing(), PresShutInDrill(), IncidentType(), KillingType(), Formation(), TempBottom(), PresMaxChoke(), Description(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml2__DrillReportControlIncidentInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportControlIncidentInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportControlIncidentInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportControlIncidentInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1449 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo (-610)
/* complex XML schema type 'witsml2:DrillReportStratInfo': */
class SOAP_CMAC witsml2__DrillReportStratInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:MdTop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdTop;
        /// Optional element 'witsml2:TvdTop' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdTop;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportStratInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportStratInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportStratInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportStratInfo() : DTim(), MdTop(), TvdTop(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportStratInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportStratInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportStratInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportStratInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1451 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo (-611)
/* complex XML schema type 'witsml2:DrillReportPerfInfo': */
class SOAP_CMAC witsml2__DrillReportPerfInfo {
      public:
        /// Optional element 'witsml2:DTimOpen' of XML schema type 'eml21:TimeStamp'
        std::string *DTimOpen;
        /// Optional element 'witsml2:DTimClose' of XML schema type 'eml21:TimeStamp'
        std::string *DTimClose;
        /// Optional element 'witsml2:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:PerforationTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportPerfInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportPerfInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportPerfInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportPerfInfo() : DTimOpen(), DTimClose(), PerforationMdInterval(), PerforationTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportPerfInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportPerfInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportPerfInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportPerfInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1453 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo (-612)
/* complex XML schema type 'witsml2:DrillReportGasReadingInfo': */
class SOAP_CMAC witsml2__DrillReportGasReadingInfo {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:ReadingType' of XML schema type 'witsml2:GasPeakType'
        enum witsml2__GasPeakType *ReadingType;
        /// Optional element 'witsml2:GasReadingMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *GasReadingMdInterval;
        /// Optional element 'witsml2:GasReadingTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *GasReadingTvdInterval;
        /// Optional element 'witsml2:GasHigh' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasHigh;
        /// Optional element 'witsml2:GasLow' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasLow;
        /// Optional element 'witsml2:Meth' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Meth;
        /// Optional element 'witsml2:Eth' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Eth;
        /// Optional element 'witsml2:Prop' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Prop;
        /// Optional element 'witsml2:Ibut' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Ibut;
        /// Optional element 'witsml2:Nbut' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Nbut;
        /// Optional element 'witsml2:Ipent' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Ipent;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportGasReadingInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportGasReadingInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportGasReadingInfo); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReportGasReadingInfo() : DTim(), ReadingType(), GasReadingMdInterval(), GasReadingTvdInterval(), GasHigh(), GasLow(), Meth(), Eth(), Prop(), Ibut(), Nbut(), Ipent(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportGasReadingInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportGasReadingInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportGasReadingInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportGasReadingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:27829 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractBottomHoleTemperature_sequence (-1634)
/* Wrapper: */
class SOAP_CMAC __witsml2__AbstractBottomHoleTemperature_sequence {
      public:
        /// Required element 'witsml2:BottomHoleTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *BottomHoleTemperature;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractBottomHoleTemperature_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractBottomHoleTemperature_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__AbstractBottomHoleTemperature_sequence, default initialized and not managed by a soap context
        virtual __witsml2__AbstractBottomHoleTemperature_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__AbstractBottomHoleTemperature_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__AbstractBottomHoleTemperature_sequence() : BottomHoleTemperature() { }
        virtual ~__witsml2__AbstractBottomHoleTemperature_sequence() { }
        /// Friend allocator used by soap_new___witsml2__AbstractBottomHoleTemperature_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__AbstractBottomHoleTemperature_sequence * SOAP_FMAC2 soap_instantiate___witsml2__AbstractBottomHoleTemperature_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1455 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature (-613)
/* complex XML schema type 'witsml2:AbstractBottomHoleTemperature': */
class SOAP_CMAC witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__AbstractBottomHoleTemperature_sequence *__AbstractBottomHoleTemperature_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractBottomHoleTemperature, default initialized and not managed by a soap context
        virtual witsml2__AbstractBottomHoleTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractBottomHoleTemperature); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractBottomHoleTemperature() : __AbstractBottomHoleTemperature_sequence(), soap() { }
        virtual ~witsml2__AbstractBottomHoleTemperature() { }
        /// Friend allocator used by soap_new_witsml2__AbstractBottomHoleTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractBottomHoleTemperature * SOAP_FMAC2 soap_instantiate_witsml2__AbstractBottomHoleTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1463 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent (-617)
/* complex XML schema type 'witsml2:TubularComponent': */
class SOAP_CMAC witsml2__TubularComponent {
      public:
        /// Required element 'witsml2:TypeTubularComponent' of XML schema type 'witsml2:TubularComponentType'
        enum witsml2__TubularComponentType TypeTubularComponent;
        /// Required element 'witsml2:Sequence' of XML schema type 'xsd:int'
        int Sequence;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required element 'witsml2:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Required element 'witsml2:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml2:OdMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdMx;
        /// Required element 'witsml2:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml2:LenJointAv' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenJointAv;
        /// Optional element 'witsml2:NumJointStand' of XML schema type 'xsd:int'
        int *NumJointStand;
        /// Optional element 'witsml2:WtPerLen' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml2:Grade' of XML schema type 'eml21:String64'
        std::string *Grade;
        /// Optional element 'witsml2:OdDrift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdDrift;
        /// Optional element 'witsml2:TensYield' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *TensYield;
        /// Optional element 'witsml2:TqYield' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml2:StressFatigue' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *StressFatigue;
        /// Optional element 'witsml2:LenFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenFishneck;
        /// Optional element 'witsml2:IdFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdFishneck;
        /// Optional element 'witsml2:OdFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdFishneck;
        /// Optional element 'witsml2:Disp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Disp;
        /// Optional element 'witsml2:PresBurst' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBurst;
        /// Optional element 'witsml2:PresCollapse' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCollapse;
        /// Optional element 'witsml2:ClassService' of XML schema type 'eml21:String64'
        std::string *ClassService;
        /// Optional element 'witsml2:WearWall' of XML schema type 'eml21:LengthPerLengthMeasure'
        eml21__LengthPerLengthMeasure *WearWall;
        /// Optional element 'witsml2:ThickWall' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ThickWall;
        /// Optional element 'witsml2:ConfigCon' of XML schema type 'witsml2:BoxPinConfig'
        enum witsml2__BoxPinConfig *ConfigCon;
        /// Optional element 'witsml2:BendStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *BendStiffness;
        /// Optional element 'witsml2:AxialStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *AxialStiffness;
        /// Optional element 'witsml2:TorsionalStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *TorsionalStiffness;
        /// Optional element 'witsml2:TypeMaterial' of XML schema type 'witsml2:MaterialType'
        enum witsml2__MaterialType *TypeMaterial;
        /// Optional element 'witsml2:DoglegMx' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *DoglegMx;
        /// Optional element 'witsml2:Vendor' of XML schema type 'eml21:String64'
        std::string *Vendor;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:AreaNozzleFlow' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *AreaNozzleFlow;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Connection' of XML schema type 'witsml2:Connection'
        std::vector<witsml2__Connection *> Connection;
        /// Optional element 'witsml2:Jar' of XML schema type 'witsml2:Jar'
        witsml2__Jar *Jar;
        /// Optional element 'witsml2:MwdTool' of XML schema type 'witsml2:MwdTool'
        witsml2__MwdTool *MwdTool;
        /// Optional element 'witsml2:BitRecord' of XML schema type 'witsml2:BitRecord'
        witsml2__BitRecord *BitRecord;
        /// Optional element 'witsml2:Motor' of XML schema type 'witsml2:Motor'
        witsml2__Motor *Motor;
        /// Optional element 'witsml2:Stabilizer' of XML schema type 'witsml2:Stabilizer'
        std::vector<witsml2__Stabilizer *> Stabilizer;
        /// Optional element 'witsml2:Bend' of XML schema type 'witsml2:Bend'
        std::vector<witsml2__Bend *> Bend;
        /// Optional element 'witsml2:HoleOpener' of XML schema type 'witsml2:HoleOpener'
        witsml2__HoleOpener *HoleOpener;
        /// Optional element 'witsml2:RotarySteerableTool' of XML schema type 'witsml2:RotarySteerableTool'
        witsml2__RotarySteerableTool *RotarySteerableTool;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Nozzle' of XML schema type 'witsml2:Nozzle'
        std::vector<witsml2__Nozzle *> Nozzle;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TubularComponent, default initialized and not managed by a soap context
        virtual witsml2__TubularComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TubularComponent); }
      public:
        /// Constructor with default initializations
        witsml2__TubularComponent() : TypeTubularComponent(), Sequence(), Description(), Id(), Od(), OdMx(), Len(), LenJointAv(), NumJointStand(), WtPerLen(), Grade(), OdDrift(), TensYield(), TqYield(), StressFatigue(), LenFishneck(), IdFishneck(), OdFishneck(), Disp(), PresBurst(), PresCollapse(), ClassService(), WearWall(), ThickWall(), ConfigCon(), BendStiffness(), AxialStiffness(), TorsionalStiffness(), TypeMaterial(), DoglegMx(), Vendor(), Model(), NameTag(), AreaNozzleFlow(), ExtensionNameValue(), Connection(), Jar(), MwdTool(), BitRecord(), Motor(), Stabilizer(), Bend(), HoleOpener(), RotarySteerableTool(), ExtensionAny(), Nozzle(), uid(), soap() { }
        virtual ~witsml2__TubularComponent() { }
        /// Friend allocator used by soap_new_witsml2__TubularComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TubularComponent * SOAP_FMAC2 soap_instantiate_witsml2__TubularComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1465 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord (-618)
/* complex XML schema type 'witsml2:BitRecord': */
class SOAP_CMAC witsml2__BitRecord {
      public:
        /// Optional element 'witsml2:NumBit' of XML schema type 'eml21:String64'
        std::string *NumBit;
        /// Required element 'witsml2:DiaBit' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaBit;
        /// Optional element 'witsml2:DiaPassThru' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPassThru;
        /// Optional element 'witsml2:DiaPilot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPilot;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:TypeBit' of XML schema type 'witsml2:BitType'
        enum witsml2__BitType *TypeBit;
        /// Optional element 'witsml2:CodeMfg' of XML schema type 'eml21:String64'
        std::string *CodeMfg;
        /// Optional element 'witsml2:CodeIADC' of XML schema type 'eml21:String64'
        std::string *CodeIADC;
        /// Optional element 'witsml2:CondInitInner' of XML schema type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondInitInner;
        /// Optional element 'witsml2:CondInitOuter' of XML schema type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondInitOuter;
        /// Optional element 'witsml2:CondInitDull' of XML schema type 'witsml2:BitDullCode'
        enum witsml2__BitDullCode *CondInitDull;
        /// Optional element 'witsml2:CondInitLocation' of XML schema type 'eml21:String64'
        std::string *CondInitLocation;
        /// Optional element 'witsml2:CondInitBearing' of XML schema type 'witsml2:IadcBearingWearCode'
        enum witsml2__IadcBearingWearCode *CondInitBearing;
        /// Optional element 'witsml2:CondInitGauge' of XML schema type 'eml21:String64'
        std::string *CondInitGauge;
        /// Optional element 'witsml2:CondInitOther' of XML schema type 'eml21:String64'
        std::string *CondInitOther;
        /// Optional element 'witsml2:CondInitReason' of XML schema type 'witsml2:BitReasonPulled'
        enum witsml2__BitReasonPulled *CondInitReason;
        /// Optional element 'witsml2:CondFinalInner' of XML schema type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondFinalInner;
        /// Optional element 'witsml2:CondFinalOuter' of XML schema type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondFinalOuter;
        /// Optional element 'witsml2:CondFinalDull' of XML schema type 'witsml2:BitDullCode'
        enum witsml2__BitDullCode *CondFinalDull;
        /// Optional element 'witsml2:CondFinalLocation' of XML schema type 'eml21:String64'
        std::string *CondFinalLocation;
        /// Optional element 'witsml2:CondFinalBearing' of XML schema type 'witsml2:IadcBearingWearCode'
        enum witsml2__IadcBearingWearCode *CondFinalBearing;
        /// Optional element 'witsml2:CondFinalGauge' of XML schema type 'eml21:String64'
        std::string *CondFinalGauge;
        /// Optional element 'witsml2:CondFinalOther' of XML schema type 'eml21:String64'
        std::string *CondFinalOther;
        /// Optional element 'witsml2:CondFinalReason' of XML schema type 'witsml2:BitReasonPulled'
        enum witsml2__BitReasonPulled *CondFinalReason;
        /// Optional element 'witsml2:Drive' of XML schema type 'eml21:String64'
        std::string *Drive;
        /// Optional element 'witsml2:BitClass' of XML schema type 'eml21:String64'
        std::string *BitClass;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Cost' of XML schema type 'witsml2:Cost'
        witsml2__Cost *Cost;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BitRecord, default initialized and not managed by a soap context
        virtual witsml2__BitRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BitRecord); }
      public:
        /// Constructor with default initializations
        witsml2__BitRecord() : NumBit(), DiaBit(), DiaPassThru(), DiaPilot(), Manufacturer(), TypeBit(), CodeMfg(), CodeIADC(), CondInitInner(), CondInitOuter(), CondInitDull(), CondInitLocation(), CondInitBearing(), CondInitGauge(), CondInitOther(), CondInitReason(), CondFinalInner(), CondFinalOuter(), CondFinalDull(), CondFinalLocation(), CondFinalBearing(), CondFinalGauge(), CondFinalOther(), CondFinalReason(), Drive(), BitClass(), ExtensionNameValue(), Cost(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__BitRecord() { }
        /// Friend allocator used by soap_new_witsml2__BitRecord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BitRecord * SOAP_FMAC2 soap_instantiate_witsml2__BitRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1467 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle (-619)
/* complex XML schema type 'witsml2:Nozzle': */
class SOAP_CMAC witsml2__Nozzle {
      public:
        /// Optional element 'witsml2:Index' of XML schema type 'xsd:int'
        int *Index;
        /// Optional element 'witsml2:DiaNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml2:TypeNozzle' of XML schema type 'witsml2:NozzleType'
        enum witsml2__NozzleType *TypeNozzle;
        /// Optional element 'witsml2:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml2:Orientation' of XML schema type 'eml21:String64'
        std::string *Orientation;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Nozzle, default initialized and not managed by a soap context
        virtual witsml2__Nozzle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Nozzle); }
      public:
        /// Constructor with default initializations
        witsml2__Nozzle() : Index(), DiaNozzle(), TypeNozzle(), Len(), Orientation(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Nozzle() { }
        /// Friend allocator used by soap_new_witsml2__Nozzle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Nozzle * SOAP_FMAC2 soap_instantiate_witsml2__Nozzle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1469 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Connection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Connection (-620)
/* complex XML schema type 'witsml2:Connection': */
class SOAP_CMAC witsml2__Connection {
      public:
        /// Optional element 'witsml2:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml2:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml2:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml2:TypeThread' of XML schema type 'eml21:String64'
        std::string *TypeThread;
        /// Optional element 'witsml2:SizeThread' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeThread;
        /// Optional element 'witsml2:TensYield' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *TensYield;
        /// Optional element 'witsml2:TqYield' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml2:Position' of XML schema type 'witsml2:ConnectionPosition'
        enum witsml2__ConnectionPosition *Position;
        /// Optional element 'witsml2:CriticalCrossSection' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *CriticalCrossSection;
        /// Optional element 'witsml2:PresLeak' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresLeak;
        /// Optional element 'witsml2:TqMakeup' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqMakeup;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Connection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Connection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Connection, default initialized and not managed by a soap context
        virtual witsml2__Connection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Connection); }
      public:
        /// Constructor with default initializations
        witsml2__Connection() : Id(), Od(), Len(), TypeThread(), SizeThread(), TensYield(), TqYield(), Position(), CriticalCrossSection(), PresLeak(), TqMakeup(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Connection() { }
        /// Friend allocator used by soap_new_witsml2__Connection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Connection * SOAP_FMAC2 soap_instantiate_witsml2__Connection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1471 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Jar
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Jar (-621)
/* complex XML schema type 'witsml2:Jar': */
class SOAP_CMAC witsml2__Jar {
      public:
        /// Optional element 'witsml2:ForUpSet' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForUpSet;
        /// Optional element 'witsml2:ForDownSet' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForDownSet;
        /// Optional element 'witsml2:ForUpTrip' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForUpTrip;
        /// Optional element 'witsml2:ForDownTrip' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForDownTrip;
        /// Optional element 'witsml2:ForPmpOpen' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForPmpOpen;
        /// Optional element 'witsml2:ForSealFric' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForSealFric;
        /// Optional element 'witsml2:TypeJar' of XML schema type 'witsml2:JarType'
        enum witsml2__JarType *TypeJar;
        /// Optional element 'witsml2:JarAction' of XML schema type 'witsml2:JarAction'
        enum witsml2__JarAction *JarAction;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Jar
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Jar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Jar, default initialized and not managed by a soap context
        virtual witsml2__Jar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Jar); }
      public:
        /// Constructor with default initializations
        witsml2__Jar() : ForUpSet(), ForDownSet(), ForUpTrip(), ForDownTrip(), ForPmpOpen(), ForSealFric(), TypeJar(), JarAction(), ExtensionAny(), soap() { }
        virtual ~witsml2__Jar() { }
        /// Friend allocator used by soap_new_witsml2__Jar(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Jar * SOAP_FMAC2 soap_instantiate_witsml2__Jar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1473 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool (-622)
/* complex XML schema type 'witsml2:MwdTool': */
class SOAP_CMAC witsml2__MwdTool {
      public:
        /// Optional element 'witsml2:FlowrateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml2:FlowrateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml2:TempMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempMx;
        /// Optional element 'witsml2:IdEquv' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdEquv;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Sensor' of XML schema type 'witsml2:Sensor'
        std::vector<witsml2__Sensor *> Sensor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MwdTool, default initialized and not managed by a soap context
        virtual witsml2__MwdTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MwdTool); }
      public:
        /// Constructor with default initializations
        witsml2__MwdTool() : FlowrateMn(), FlowrateMx(), TempMx(), IdEquv(), ExtensionAny(), Sensor(), soap() { }
        virtual ~witsml2__MwdTool() { }
        /// Friend allocator used by soap_new_witsml2__MwdTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MwdTool * SOAP_FMAC2 soap_instantiate_witsml2__MwdTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1475 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor (-623)
/* complex XML schema type 'witsml2:Sensor': */
class SOAP_CMAC witsml2__Sensor {
      public:
        /// Optional element 'witsml2:TypeMeasurement' of XML schema type 'witsml2:MeasurementType'
        enum witsml2__MeasurementType *TypeMeasurement;
        /// Optional element 'witsml2:OffsetBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OffsetBot;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Sensor, default initialized and not managed by a soap context
        virtual witsml2__Sensor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Sensor); }
      public:
        /// Constructor with default initializations
        witsml2__Sensor() : TypeMeasurement(), OffsetBot(), Comments(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Sensor() { }
        /// Friend allocator used by soap_new_witsml2__Sensor(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Sensor * SOAP_FMAC2 soap_instantiate_witsml2__Sensor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1477 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Motor
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Motor (-624)
/* complex XML schema type 'witsml2:Motor': */
class SOAP_CMAC witsml2__Motor {
      public:
        /// Optional element 'witsml2:OffsetTool' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OffsetTool;
        /// Optional element 'witsml2:PresLossFact' of XML schema type 'xsd:double'
        double *PresLossFact;
        /// Optional element 'witsml2:FlowrateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml2:FlowrateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml2:DiaRotorNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaRotorNozzle;
        /// Optional element 'witsml2:ClearanceBearBox' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ClearanceBearBox;
        /// Optional element 'witsml2:LobesRotor' of XML schema type 'xsd:int'
        int *LobesRotor;
        /// Optional element 'witsml2:LobesStator' of XML schema type 'xsd:int'
        int *LobesStator;
        /// Optional element 'witsml2:TypeBearing' of XML schema type 'witsml2:BearingType'
        enum witsml2__BearingType *TypeBearing;
        /// Optional element 'witsml2:TempOpMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempOpMx;
        /// Optional element 'witsml2:RotorCatcher' of XML schema type 'xsd:boolean'
        bool *RotorCatcher;
        /// Optional element 'witsml2:DumpValve' of XML schema type 'xsd:boolean'
        bool *DumpValve;
        /// Optional element 'witsml2:DiaNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml2:Rotatable' of XML schema type 'xsd:boolean'
        bool *Rotatable;
        /// Optional element 'witsml2:BendSettingsMn' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BendSettingsMn;
        /// Optional element 'witsml2:BendSettingsMx' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BendSettingsMx;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Motor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Motor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Motor, default initialized and not managed by a soap context
        virtual witsml2__Motor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Motor); }
      public:
        /// Constructor with default initializations
        witsml2__Motor() : OffsetTool(), PresLossFact(), FlowrateMn(), FlowrateMx(), DiaRotorNozzle(), ClearanceBearBox(), LobesRotor(), LobesStator(), TypeBearing(), TempOpMx(), RotorCatcher(), DumpValve(), DiaNozzle(), Rotatable(), BendSettingsMn(), BendSettingsMx(), ExtensionAny(), soap() { }
        virtual ~witsml2__Motor() { }
        /// Friend allocator used by soap_new_witsml2__Motor(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Motor * SOAP_FMAC2 soap_instantiate_witsml2__Motor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1479 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer (-625)
/* complex XML schema type 'witsml2:Stabilizer': */
class SOAP_CMAC witsml2__Stabilizer {
      public:
        /// Optional element 'witsml2:LenBlade' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBlade;
        /// Optional element 'witsml2:LenBladeGauge' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBladeGauge;
        /// Optional element 'witsml2:OdBladeMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdBladeMx;
        /// Optional element 'witsml2:OdBladeMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdBladeMn;
        /// Optional element 'witsml2:DistBladeBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistBladeBot;
        /// Optional element 'witsml2:ShapeBlade' of XML schema type 'witsml2:BladeShapeType'
        enum witsml2__BladeShapeType *ShapeBlade;
        /// Optional element 'witsml2:FactFric' of XML schema type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml2:TypeBlade' of XML schema type 'witsml2:BladeType'
        enum witsml2__BladeType *TypeBlade;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Stabilizer, default initialized and not managed by a soap context
        virtual witsml2__Stabilizer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Stabilizer); }
      public:
        /// Constructor with default initializations
        witsml2__Stabilizer() : LenBlade(), LenBladeGauge(), OdBladeMx(), OdBladeMn(), DistBladeBot(), ShapeBlade(), FactFric(), TypeBlade(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Stabilizer() { }
        /// Friend allocator used by soap_new_witsml2__Stabilizer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Stabilizer * SOAP_FMAC2 soap_instantiate_witsml2__Stabilizer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1481 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Bend
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Bend (-626)
/* complex XML schema type 'witsml2:Bend': */
class SOAP_CMAC witsml2__Bend {
      public:
        /// Optional element 'witsml2:Angle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Angle;
        /// Optional element 'witsml2:DistBendBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistBendBot;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Bend
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Bend; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Bend, default initialized and not managed by a soap context
        virtual witsml2__Bend *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Bend); }
      public:
        /// Constructor with default initializations
        witsml2__Bend() : Angle(), DistBendBot(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Bend() { }
        /// Friend allocator used by soap_new_witsml2__Bend(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Bend * SOAP_FMAC2 soap_instantiate_witsml2__Bend(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1483 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener (-627)
/* complex XML schema type 'witsml2:HoleOpener': */
class SOAP_CMAC witsml2__HoleOpener {
      public:
        /// Optional element 'witsml2:TypeHoleOpener' of XML schema type 'witsml2:HoleOpenerType'
        enum witsml2__HoleOpenerType *TypeHoleOpener;
        /// Optional element 'witsml2:NumCutter' of XML schema type 'xsd:int'
        int *NumCutter;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:DiaHoleOpener' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHoleOpener;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__HoleOpener, default initialized and not managed by a soap context
        virtual witsml2__HoleOpener *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__HoleOpener); }
      public:
        /// Constructor with default initializations
        witsml2__HoleOpener() : TypeHoleOpener(), NumCutter(), Manufacturer(), DiaHoleOpener(), ExtensionAny(), soap() { }
        virtual ~witsml2__HoleOpener() { }
        /// Friend allocator used by soap_new_witsml2__HoleOpener(struct soap*, int)
        friend SOAP_FMAC1 witsml2__HoleOpener * SOAP_FMAC2 soap_instantiate_witsml2__HoleOpener(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1485 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool (-628)
/* complex XML schema type 'witsml2:RotarySteerableTool': */
class SOAP_CMAC witsml2__RotarySteerableTool {
      public:
        /// Required element 'witsml2:DeflectionMethod' of XML schema type 'witsml2:DeflectionMethod'
        enum witsml2__DeflectionMethod DeflectionMethod;
        /// Optional element 'witsml2:HoleSizeMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleSizeMn;
        /// Optional element 'witsml2:HoleSizeMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleSizeMx;
        /// Optional element 'witsml2:WobMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMx;
        /// Optional element 'witsml2:OperatingSpeed' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *OperatingSpeed;
        /// Optional element 'witsml2:SpeedMx' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *SpeedMx;
        /// Optional element 'witsml2:FlowRateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateMn;
        /// Optional element 'witsml2:FlowRateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateMx;
        /// Optional element 'witsml2:DownLinkFlowRateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *DownLinkFlowRateMn;
        /// Optional element 'witsml2:DownLinkFlowRateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *DownLinkFlowRateMx;
        /// Optional element 'witsml2:PressLossFact' of XML schema type 'xsd:double'
        double *PressLossFact;
        /// Optional element 'witsml2:PadCount' of XML schema type 'xsd:int'
        int *PadCount;
        /// Optional element 'witsml2:PadLen' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadLen;
        /// Optional element 'witsml2:PadWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadWidth;
        /// Optional element 'witsml2:PadOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadOffset;
        /// Optional element 'witsml2:OpenPadOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OpenPadOd;
        /// Optional element 'witsml2:ClosePadOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ClosePadOd;
        /// Required element 'witsml2:AbstractRotarySteerableTool' of XML schema type 'witsml2:AbstractRotarySteerableTool'
        witsml2__AbstractRotarySteerableTool *AbstractRotarySteerableTool;
        /// Optional element 'witsml2:Sensor' of XML schema type 'witsml2:Sensor'
        std::vector<witsml2__Sensor *> Sensor;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml2__RotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RotarySteerableTool); }
      public:
        /// Constructor with default initializations
        witsml2__RotarySteerableTool() : DeflectionMethod(), HoleSizeMn(), HoleSizeMx(), WobMx(), OperatingSpeed(), SpeedMx(), FlowRateMn(), FlowRateMx(), DownLinkFlowRateMn(), DownLinkFlowRateMx(), PressLossFact(), PadCount(), PadLen(), PadWidth(), PadOffset(), OpenPadOd(), ClosePadOd(), AbstractRotarySteerableTool(), Sensor(), ExtensionAny(), soap() { }
        virtual ~witsml2__RotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml2__RotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml2__RotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1487 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool (-629)
/* complex XML schema type 'witsml2:AbstractRotarySteerableTool': */
class SOAP_CMAC witsml2__AbstractRotarySteerableTool {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractRotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml2__AbstractRotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractRotarySteerableTool); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractRotarySteerableTool() : soap() { }
        virtual ~witsml2__AbstractRotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml2__AbstractRotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractRotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml2__AbstractRotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1503 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob (-637)
/* complex XML schema type 'witsml2:AbstractCementJob': */
class SOAP_CMAC witsml2__AbstractCementJob {
      public:
        /// Optional element 'witsml2:CementEngr' of XML schema type 'eml21:String64'
        std::string *CementEngr;
        /// Optional element 'witsml2:ETimWaitingOnCement' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimWaitingOnCement;
        /// Optional element 'witsml2:PlugInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PlugInterval;
        /// Optional element 'witsml2:MdHole' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:Contractor' of XML schema type 'eml21:String64'
        std::string *Contractor;
        /// Optional element 'witsml2:RpmPipe' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmPipe;
        /// Optional element 'witsml2:TqInitPipeRot' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqInitPipeRot;
        /// Optional element 'witsml2:TqPipeAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqPipeAv;
        /// Optional element 'witsml2:TqPipeMx' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqPipeMx;
        /// Optional element 'witsml2:OverPull' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *OverPull;
        /// Optional element 'witsml2:SlackOff' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *SlackOff;
        /// Optional element 'witsml2:RpmPipeRecip' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmPipeRecip;
        /// Optional element 'witsml2:LenPipeRecipStroke' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenPipeRecipStroke;
        /// Optional element 'witsml2:Reciprocating' of XML schema type 'xsd:boolean'
        bool *Reciprocating;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractCementJob, default initialized and not managed by a soap context
        virtual witsml2__AbstractCementJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractCementJob); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractCementJob() : CementEngr(), ETimWaitingOnCement(), PlugInterval(), MdHole(), Contractor(), RpmPipe(), TqInitPipeRot(), TqPipeAv(), TqPipeMx(), OverPull(), SlackOff(), RpmPipeRecip(), LenPipeRecipStroke(), Reciprocating(), soap() { }
        virtual ~witsml2__AbstractCementJob() { }
        /// Friend allocator used by soap_new_witsml2__AbstractCementJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractCementJob * SOAP_FMAC2 soap_instantiate_witsml2__AbstractCementJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1507 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage (-639)
/* complex XML schema type 'witsml2:AbstractCementStage': */
class SOAP_CMAC witsml2__AbstractCementStage {
      public:
        /// Optional element 'witsml2:AnnularFlowAfter' of XML schema type 'xsd:boolean'
        bool *AnnularFlowAfter;
        /// Optional element 'witsml2:ReciprocationSlackoff' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ReciprocationSlackoff;
        /// Optional element 'witsml2:BotPlug' of XML schema type 'xsd:boolean'
        bool *BotPlug;
        /// Optional element 'witsml2:BotPlugNumber' of XML schema type 'xsd:int'
        int *BotPlugNumber;
        /// Optional element 'witsml2:DiaTailPipe' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaTailPipe;
        /// Optional element 'witsml2:DisplacementFluidRefId' of XML schema type 'eml21:UuidString'
        std::string *DisplacementFluidRefId;
        /// Optional element 'witsml2:ETimPresHeld' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimPresHeld;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:FlowrateMudCirc' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMudCirc;
        /// Optional element 'witsml2:Gel10Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Min;
        /// Optional element 'witsml2:Gel10Sec' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Sec;
        /// Optional element 'witsml2:MdCircOut' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCircOut;
        /// Optional element 'witsml2:MdCoilTbg' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCoilTbg;
        /// Optional element 'witsml2:MdString' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdString;
        /// Optional element 'witsml2:MdTool' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdTool;
        /// Optional element 'witsml2:MixMethod' of XML schema type 'eml21:String64'
        std::string *MixMethod;
        /// Required element 'witsml2:NumStage' of XML schema type 'xsd:int'
        int NumStage;
        /// Optional element 'witsml2:ReciprocationOverpull' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ReciprocationOverpull;
        /// Optional element 'witsml2:PillBelowPlug' of XML schema type 'xsd:boolean'
        bool *PillBelowPlug;
        /// Optional element 'witsml2:PlugCatcher' of XML schema type 'xsd:boolean'
        bool *PlugCatcher;
        /// Optional element 'witsml2:PresBackPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBackPressure;
        /// Optional element 'witsml2:PresBump' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBump;
        /// Optional element 'witsml2:PresCoilTbgEnd' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCoilTbgEnd;
        /// Optional element 'witsml2:PresCoilTbgStart' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCoilTbgStart;
        /// Optional element 'witsml2:PresCsgEnd' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCsgEnd;
        /// Optional element 'witsml2:PresCsgStart' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCsgStart;
        /// Optional element 'witsml2:PresDisplace' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresDisplace;
        /// Optional element 'witsml2:PresHeld' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresHeld;
        /// Optional element 'witsml2:PresMudCirc' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresMudCirc;
        /// Optional element 'witsml2:PresTbgEnd' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTbgEnd;
        /// Optional element 'witsml2:PresTbgStart' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTbgStart;
        /// Optional element 'witsml2:PvMud' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *PvMud;
        /// Optional element 'witsml2:SqueezeObjective' of XML schema type 'eml21:String64'
        std::string *SqueezeObjective;
        /// Optional element 'witsml2:StageMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *StageMdInterval;
        /// Optional element 'witsml2:TailPipePerf' of XML schema type 'xsd:boolean'
        bool *TailPipePerf;
        /// Optional element 'witsml2:TailPipeUsed' of XML schema type 'xsd:boolean'
        bool *TailPipeUsed;
        /// Optional element 'witsml2:TempBHCT' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempBHCT;
        /// Optional element 'witsml2:TempBHST' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempBHST;
        /// Optional element 'witsml2:TopPlug' of XML schema type 'xsd:boolean'
        bool *TopPlug;
        /// Optional element 'witsml2:TypeOriginalMud' of XML schema type 'eml21:String64'
        std::string *TypeOriginalMud;
        /// Required element 'witsml2:TypeStage' of XML schema type 'eml21:String64'
        std::string TypeStage;
        /// Optional element 'witsml2:VolCircPrior' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolCircPrior;
        /// Optional element 'witsml2:VolCsgIn' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolCsgIn;
        /// Optional element 'witsml2:VolCsgOut' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolCsgOut;
        /// Optional element 'witsml2:VolDisplaceFluid' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolDisplaceFluid;
        /// Optional element 'witsml2:VolExcess' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolExcess;
        /// Optional element 'witsml2:VolExcessMethod' of XML schema type 'eml21:String64'
        std::string *VolExcessMethod;
        /// Optional element 'witsml2:VolMudLost' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudLost;
        /// Optional element 'witsml2:VolReturns' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolReturns;
        /// Optional element 'witsml2:WtMud' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WtMud;
        /// Optional element 'witsml2:YpMud' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *YpMud;
        /// Optional element 'witsml2:OriginalFluidLocation' of XML schema type 'witsml2:FluidLocation'
        std::vector<witsml2__FluidLocation *> OriginalFluidLocation;
        /// Optional element 'witsml2:EndingFluidLocation' of XML schema type 'witsml2:FluidLocation'
        std::vector<witsml2__FluidLocation *> EndingFluidLocation;
        /// Optional element 'witsml2:Step' of XML schema type 'witsml2:CementPumpScheduleStep'
        std::vector<witsml2__CementPumpScheduleStep *> Step;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractCementStage, default initialized and not managed by a soap context
        virtual witsml2__AbstractCementStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractCementStage); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractCementStage() : AnnularFlowAfter(), ReciprocationSlackoff(), BotPlug(), BotPlugNumber(), DiaTailPipe(), DisplacementFluidRefId(), ETimPresHeld(), ExtensionNameValue(), FlowrateMudCirc(), Gel10Min(), Gel10Sec(), MdCircOut(), MdCoilTbg(), MdString(), MdTool(), MixMethod(), NumStage(), ReciprocationOverpull(), PillBelowPlug(), PlugCatcher(), PresBackPressure(), PresBump(), PresCoilTbgEnd(), PresCoilTbgStart(), PresCsgEnd(), PresCsgStart(), PresDisplace(), PresHeld(), PresMudCirc(), PresTbgEnd(), PresTbgStart(), PvMud(), SqueezeObjective(), StageMdInterval(), TailPipePerf(), TailPipeUsed(), TempBHCT(), TempBHST(), TopPlug(), TypeOriginalMud(), TypeStage(), VolCircPrior(), VolCsgIn(), VolCsgOut(), VolDisplaceFluid(), VolExcess(), VolExcessMethod(), VolMudLost(), VolReturns(), WtMud(), YpMud(), OriginalFluidLocation(), EndingFluidLocation(), Step(), soap() { }
        virtual ~witsml2__AbstractCementStage() { }
        /// Friend allocator used by soap_new_witsml2__AbstractCementStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractCementStage * SOAP_FMAC2 soap_instantiate_witsml2__AbstractCementStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1509 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid (-640)
/* complex XML schema type 'witsml2:CementingFluid': */
class SOAP_CMAC witsml2__CementingFluid {
      public:
        /// Optional element 'witsml2:ETimTransitions' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimTransitions;
        /// Optional element 'witsml2:ETimZeroGel' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimZeroGel;
        /// Optional element 'witsml2:TypeFluid' of XML schema type 'eml21:String64'
        std::string *TypeFluid;
        /// Optional element 'witsml2:FluidIndex' of XML schema type 'xsd:unsignedLong'
        ULONG64 *FluidIndex;
        /// Optional element 'witsml2:DescFluid' of XML schema type 'eml21:String64'
        std::string *DescFluid;
        /// Optional element 'witsml2:Purpose' of XML schema type 'eml21:String64'
        std::string *Purpose;
        /// Optional element 'witsml2:ClassSlurryDryBlend' of XML schema type 'eml21:String64'
        std::string *ClassSlurryDryBlend;
        /// Optional element 'witsml2:SlurryPlacementInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *SlurryPlacementInterval;
        /// Optional element 'witsml2:SourceWater' of XML schema type 'eml21:String64'
        std::string *SourceWater;
        /// Optional element 'witsml2:VolWater' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolWater;
        /// Optional element 'witsml2:VolCement' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolCement;
        /// Optional element 'witsml2:RatioMixWater' of XML schema type 'eml21:VolumePerMassMeasure'
        eml21__VolumePerMassMeasure *RatioMixWater;
        /// Optional element 'witsml2:VolFluid' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolFluid;
        /// Optional element 'witsml2:ExcessPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *ExcessPc;
        /// Optional element 'witsml2:VolYield' of XML schema type 'eml21:VolumePerMassMeasure'
        eml21__VolumePerMassMeasure *VolYield;
        /// Optional element 'witsml2:Density' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:SolidVolumeFraction' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidVolumeFraction;
        /// Optional element 'witsml2:VolPumped' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolPumped;
        /// Optional element 'witsml2:VolOther' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOther;
        /// Optional element 'witsml2:FluidRheologicalModel' of XML schema type 'eml21:String64'
        std::string *FluidRheologicalModel;
        /// Optional element 'witsml2:Viscosity' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *Viscosity;
        /// Optional element 'witsml2:Yp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Yp;
        /// Optional element 'witsml2:N' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *N;
        /// Optional element 'witsml2:K' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *K;
        /// Optional element 'witsml2:Gel10SecReading' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Gel10SecReading;
        /// Optional element 'witsml2:Gel10SecStrength' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10SecStrength;
        /// Optional element 'witsml2:Gel1MinReading' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Gel1MinReading;
        /// Optional element 'witsml2:Gel1MinStrength' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel1MinStrength;
        /// Optional element 'witsml2:Gel10MinReading' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Gel10MinReading;
        /// Optional element 'witsml2:Gel10MinStrength' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10MinStrength;
        /// Optional element 'witsml2:TypeBaseFluid' of XML schema type 'eml21:String64'
        std::string *TypeBaseFluid;
        /// Optional element 'witsml2:DensBaseFluid' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensBaseFluid;
        /// Optional element 'witsml2:DryBlendName' of XML schema type 'eml21:String64'
        std::string *DryBlendName;
        /// Optional element 'witsml2:DryBlendDescription' of XML schema type 'eml21:String64'
        std::string *DryBlendDescription;
        /// Optional element 'witsml2:MassDryBlend' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *MassDryBlend;
        /// Optional element 'witsml2:DensDryBlend' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensDryBlend;
        /// Optional element 'witsml2:MassSackDryBlend' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *MassSackDryBlend;
        /// Optional element 'witsml2:FoamUsed' of XML schema type 'xsd:boolean'
        bool *FoamUsed;
        /// Optional element 'witsml2:TypeGasFoam' of XML schema type 'eml21:String64'
        std::string *TypeGasFoam;
        /// Optional element 'witsml2:VolGasFoam' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolGasFoam;
        /// Optional element 'witsml2:RatioConstGasMethodAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RatioConstGasMethodAv;
        /// Optional element 'witsml2:DensConstGasMethod' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensConstGasMethod;
        /// Optional element 'witsml2:RatioConstGasMethodStart' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RatioConstGasMethodStart;
        /// Optional element 'witsml2:RatioConstGasMethodEnd' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RatioConstGasMethodEnd;
        /// Optional element 'witsml2:DensConstGasFoam' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensConstGasFoam;
        /// Optional element 'witsml2:ETimThickening' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimThickening;
        /// Optional element 'witsml2:TempThickening' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempThickening;
        /// Optional element 'witsml2:PresTestThickening' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTestThickening;
        /// Optional element 'witsml2:ConsTestThickening' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *ConsTestThickening;
        /// Optional element 'witsml2:PcFreeWater' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PcFreeWater;
        /// Optional element 'witsml2:TempFreeWater' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempFreeWater;
        /// Optional element 'witsml2:VolTestFluidLoss' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTestFluidLoss;
        /// Optional element 'witsml2:TempFluidLoss' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempFluidLoss;
        /// Optional element 'witsml2:PresTestFluidLoss' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTestFluidLoss;
        /// Optional element 'witsml2:TimeFluidLoss' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *TimeFluidLoss;
        /// Optional element 'witsml2:VolAPIFluidLoss' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolAPIFluidLoss;
        /// Optional element 'witsml2:ETimComprStren1' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimComprStren1;
        /// Optional element 'witsml2:ETimComprStren2' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimComprStren2;
        /// Optional element 'witsml2:PresComprStren1' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresComprStren1;
        /// Optional element 'witsml2:PresComprStren2' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresComprStren2;
        /// Optional element 'witsml2:TempComprStren1' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempComprStren1;
        /// Optional element 'witsml2:TempComprStren2' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempComprStren2;
        /// Optional element 'witsml2:DensAtPres' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensAtPres;
        /// Optional element 'witsml2:VolReserved' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolReserved;
        /// Optional element 'witsml2:VolTotSlurry' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTotSlurry;
        /// Optional element 'witsml2:CementAdditive' of XML schema type 'witsml2:CementAdditive'
        std::vector<witsml2__CementAdditive *> CementAdditive;
        /// Optional element 'witsml2:Rheometer' of XML schema type 'witsml2:Rheometer'
        std::vector<witsml2__Rheometer *> Rheometer;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementingFluid, default initialized and not managed by a soap context
        virtual witsml2__CementingFluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementingFluid); }
      public:
        /// Constructor with default initializations
        witsml2__CementingFluid() : ETimTransitions(), ETimZeroGel(), TypeFluid(), FluidIndex(), DescFluid(), Purpose(), ClassSlurryDryBlend(), SlurryPlacementInterval(), SourceWater(), VolWater(), VolCement(), RatioMixWater(), VolFluid(), ExcessPc(), VolYield(), Density(), SolidVolumeFraction(), VolPumped(), VolOther(), FluidRheologicalModel(), Viscosity(), Yp(), N(), K(), Gel10SecReading(), Gel10SecStrength(), Gel1MinReading(), Gel1MinStrength(), Gel10MinReading(), Gel10MinStrength(), TypeBaseFluid(), DensBaseFluid(), DryBlendName(), DryBlendDescription(), MassDryBlend(), DensDryBlend(), MassSackDryBlend(), FoamUsed(), TypeGasFoam(), VolGasFoam(), RatioConstGasMethodAv(), DensConstGasMethod(), RatioConstGasMethodStart(), RatioConstGasMethodEnd(), DensConstGasFoam(), ETimThickening(), TempThickening(), PresTestThickening(), ConsTestThickening(), PcFreeWater(), TempFreeWater(), VolTestFluidLoss(), TempFluidLoss(), PresTestFluidLoss(), TimeFluidLoss(), VolAPIFluidLoss(), ETimComprStren1(), ETimComprStren2(), PresComprStren1(), PresComprStren2(), TempComprStren1(), TempComprStren2(), DensAtPres(), VolReserved(), VolTotSlurry(), CementAdditive(), Rheometer(), uid(), soap() { }
        virtual ~witsml2__CementingFluid() { }
        /// Friend allocator used by soap_new_witsml2__CementingFluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementingFluid * SOAP_FMAC2 soap_instantiate_witsml2__CementingFluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1511 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep (-641)
/* complex XML schema type 'witsml2:CementPumpScheduleStep': */
class SOAP_CMAC witsml2__CementPumpScheduleStep {
      public:
        /// Required element 'witsml2:FluidReferenceId' of XML schema type 'eml21:UuidString'
        std::string FluidReferenceId;
        /// Optional element 'witsml2:RatioFluidExcess' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RatioFluidExcess;
        /// Optional element 'witsml2:ETimPump' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimPump;
        /// Optional element 'witsml2:RatePump' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *RatePump;
        /// Optional element 'witsml2:VolPump' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolPump;
        /// Optional element 'witsml2:StrokePump' of XML schema type 'xsd:int'
        int *StrokePump;
        /// Optional element 'witsml2:PresBack' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBack;
        /// Optional element 'witsml2:ETimShutdown' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimShutdown;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementPumpScheduleStep, default initialized and not managed by a soap context
        virtual witsml2__CementPumpScheduleStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementPumpScheduleStep); }
      public:
        /// Constructor with default initializations
        witsml2__CementPumpScheduleStep() : FluidReferenceId(), RatioFluidExcess(), ETimPump(), RatePump(), VolPump(), StrokePump(), PresBack(), ETimShutdown(), Comments(), uid(), soap() { }
        virtual ~witsml2__CementPumpScheduleStep() { }
        /// Friend allocator used by soap_new_witsml2__CementPumpScheduleStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementPumpScheduleStep * SOAP_FMAC2 soap_instantiate_witsml2__CementPumpScheduleStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1513 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive (-642)
/* complex XML schema type 'witsml2:CementAdditive': */
class SOAP_CMAC witsml2__CementAdditive {
      public:
        /// Required element 'witsml2:NameAdd' of XML schema type 'eml21:String64'
        std::string NameAdd;
        /// Optional element 'witsml2:TypeAdd' of XML schema type 'eml21:String64'
        std::string *TypeAdd;
        /// Optional element 'witsml2:FormAdd' of XML schema type 'eml21:String64'
        std::string *FormAdd;
        /// Optional element 'witsml2:DensAdd' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensAdd;
        /// Required element 'witsml2:Additive' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *Additive;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementAdditive, default initialized and not managed by a soap context
        virtual witsml2__CementAdditive *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementAdditive); }
      public:
        /// Constructor with default initializations
        witsml2__CementAdditive() : NameAdd(), TypeAdd(), FormAdd(), DensAdd(), Additive(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__CementAdditive() { }
        /// Friend allocator used by soap_new_witsml2__CementAdditive(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementAdditive * SOAP_FMAC2 soap_instantiate_witsml2__CementAdditive(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1515 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation (-643)
/* complex XML schema type 'witsml2:FluidLocation': */
class SOAP_CMAC witsml2__FluidLocation {
      public:
        /// Required element 'witsml2:FluidReferenceId' of XML schema type 'eml21:UuidString'
        std::string FluidReferenceId;
        /// Required element 'witsml2:MDFluidBase' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MDFluidBase;
        /// Required element 'witsml2:MDFluidTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MDFluidTop;
        /// Required element 'witsml2:Volume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Volume;
        /// Required element 'witsml2:LocationType' of XML schema type 'witsml2:WellboreFluidLocation'
        enum witsml2__WellboreFluidLocation LocationType;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidLocation, default initialized and not managed by a soap context
        virtual witsml2__FluidLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidLocation); }
      public:
        /// Constructor with default initializations
        witsml2__FluidLocation() : FluidReferenceId(), MDFluidBase(), MDFluidTop(), Volume(), LocationType(), uid(), soap() { }
        virtual ~witsml2__FluidLocation() { }
        /// Friend allocator used by soap_new_witsml2__FluidLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidLocation * SOAP_FMAC2 soap_instantiate_witsml2__FluidLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1521 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection (-646)
/* complex XML schema type 'witsml2:WellboreGeometrySection': */
class SOAP_CMAC witsml2__WellboreGeometrySection {
      public:
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:TypeHoleCasing' of XML schema type 'witsml2:HoleCasingType'
        enum witsml2__HoleCasingType *TypeHoleCasing;
        /// Optional element 'witsml2:SectionMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *SectionMdInterval;
        /// Optional element 'witsml2:SectionTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *SectionTvdInterval;
        /// Optional element 'witsml2:IdSection' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdSection;
        /// Optional element 'witsml2:OdSection' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdSection;
        /// Optional element 'witsml2:WtPerLen' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml2:Grade' of XML schema type 'eml21:String64'
        std::string *Grade;
        /// Optional element 'witsml2:CurveConductor' of XML schema type 'xsd:boolean'
        bool *CurveConductor;
        /// Optional element 'witsml2:DiaDrift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaDrift;
        /// Optional element 'witsml2:FactFric' of XML schema type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BhaRun' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> BhaRun;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeometrySection, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeometrySection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeometrySection); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreGeometrySection() : Citation(), TypeHoleCasing(), SectionMdInterval(), SectionTvdInterval(), IdSection(), OdSection(), WtPerLen(), Grade(), CurveConductor(), DiaDrift(), FactFric(), ExtensionNameValue(), BhaRun(), uid(), soap() { }
        virtual ~witsml2__WellboreGeometrySection() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeometrySection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeometrySection * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeometrySection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1525 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData (-648)
/* complex XML schema type 'witsml2:ChannelData': */
class SOAP_CMAC witsml2__ChannelData {
      public:
        /// Optional element 'witsml2:Data' of XML schema type 'xsd:string'
        std::string *Data;
        /// Optional element 'witsml2:FileUri' of XML schema type 'xsd:anyURI'
        std::string *FileUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelData, default initialized and not managed by a soap context
        virtual witsml2__ChannelData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelData); }
      public:
        /// Constructor with default initializations
        witsml2__ChannelData() : Data(), FileUri(), soap() { }
        virtual ~witsml2__ChannelData() { }
        /// Friend allocator used by soap_new_witsml2__ChannelData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelData * SOAP_FMAC2 soap_instantiate_witsml2__ChannelData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1527 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata (-649)
/* complex XML schema type 'witsml2:PointMetadata': */
class SOAP_CMAC witsml2__PointMetadata {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:EtpDataType' of XML schema type 'witsml2:EtpDataType'
        enum witsml2__EtpDataType EtpDataType;
        /// Required element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PointMetadata, default initialized and not managed by a soap context
        virtual witsml2__PointMetadata *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PointMetadata); }
      public:
        /// Constructor with default initializations
        witsml2__PointMetadata() : Name(), EtpDataType(), Description(), soap() { }
        virtual ~witsml2__PointMetadata() { }
        /// Friend allocator used by soap_new_witsml2__PointMetadata(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PointMetadata * SOAP_FMAC2 soap_instantiate_witsml2__PointMetadata(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex (-651)
/* complex XML schema type 'witsml2:ChannelIndex': */
class SOAP_CMAC witsml2__ChannelIndex {
      public:
        /// Required element 'witsml2:IndexType' of XML schema type 'witsml2:ChannelIndexType'
        enum witsml2__ChannelIndexType IndexType;
        /// Required element 'witsml2:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml2:Direction' of XML schema type 'witsml2:IndexDirection'
        enum witsml2__IndexDirection Direction;
        /// Required element 'witsml2:Mnemonic' of XML schema type 'eml21:String64'
        std::string Mnemonic;
        /// Optional element 'witsml2:DatumReference' of XML schema type 'eml21:String64'
        std::string *DatumReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelIndex, default initialized and not managed by a soap context
        virtual witsml2__ChannelIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelIndex); }
      public:
        /// Constructor with default initializations
        witsml2__ChannelIndex() : IndexType(), Uom(), Direction(), Mnemonic(), DatumReference(), soap() { }
        virtual ~witsml2__ChannelIndex() { }
        /// Friend allocator used by soap_new_witsml2__ChannelIndex(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelIndex * SOAP_FMAC2 soap_instantiate_witsml2__ChannelIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1535 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue (-653)
/* complex XML schema type 'witsml2:AbstractIndexValue': */
class SOAP_CMAC witsml2__AbstractIndexValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractIndexValue, default initialized and not managed by a soap context
        virtual witsml2__AbstractIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractIndexValue); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractIndexValue() : soap() { }
        virtual ~witsml2__AbstractIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__AbstractIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__AbstractIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1543 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext (-657)
/* complex XML schema type 'witsml2:AbstractLogDataContext': */
class SOAP_CMAC witsml2__AbstractLogDataContext {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractLogDataContext, default initialized and not managed by a soap context
        virtual witsml2__AbstractLogDataContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractLogDataContext); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractLogDataContext() : soap() { }
        virtual ~witsml2__AbstractLogDataContext() { }
        /// Friend allocator used by soap_new_witsml2__AbstractLogDataContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractLogDataContext * SOAP_FMAC2 soap_instantiate_witsml2__AbstractLogDataContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1549 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis (-660)
/* complex XML schema type 'witsml2:LogChannelAxis': */
class SOAP_CMAC witsml2__LogChannelAxis {
      public:
        /// Required element 'witsml2:AxisStart' of XML schema type 'xsd:double'
        double AxisStart;
        /// Required element 'witsml2:AxisSpacing' of XML schema type 'xsd:double'
        double AxisSpacing;
        /// Required element 'witsml2:AxisCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 AxisCount;
        /// Optional element 'witsml2:AxisName' of XML schema type 'eml21:String64'
        std::string *AxisName;
        /// Required element 'witsml2:AxisPropertyKind' of XML schema type 'eml21:String64'
        std::string AxisPropertyKind;
        /// Required element 'witsml2:AxisUom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string AxisUom;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LogChannelAxis, default initialized and not managed by a soap context
        virtual witsml2__LogChannelAxis *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LogChannelAxis); }
      public:
        /// Constructor with default initializations
        witsml2__LogChannelAxis() : AxisStart(), AxisSpacing(), AxisCount(), AxisName(), AxisPropertyKind(), AxisUom(), uid(), soap() { }
        virtual ~witsml2__LogChannelAxis() { }
        /// Friend allocator used by soap_new_witsml2__LogChannelAxis(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LogChannelAxis * SOAP_FMAC2 soap_instantiate_witsml2__LogChannelAxis(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1553 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack (-662)
/* complex XML schema type 'witsml2:DepthRegTrack': */
class SOAP_CMAC witsml2__DepthRegTrack {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Required element 'witsml2:Type' of XML schema type 'witsml2:LogTrackType'
        enum witsml2__LogTrackType Type;
        /// Required element 'witsml2:LeftEdge' of XML schema type 'xsd:unsignedLong'
        ULONG64 LeftEdge;
        /// Required element 'witsml2:RightEdge' of XML schema type 'xsd:unsignedLong'
        ULONG64 RightEdge;
        /// Optional element 'witsml2:TrackCurveScaleRect' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> TrackCurveScaleRect;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:AssociatedCurve' of XML schema type 'witsml2:DepthRegTrackCurve'
        std::vector<witsml2__DepthRegTrackCurve *> AssociatedCurve;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegTrack, default initialized and not managed by a soap context
        virtual witsml2__DepthRegTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegTrack); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegTrack() : Name(), Type(), LeftEdge(), RightEdge(), TrackCurveScaleRect(), ExtensionNameValue(), AssociatedCurve(), uid(), soap() { }
        virtual ~witsml2__DepthRegTrack() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegTrack(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegTrack * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1555 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect (-663)
/* complex XML schema type 'witsml2:DepthRegLogRect': */
class SOAP_CMAC witsml2__DepthRegLogRect {
      public:
        /// Optional element 'witsml2:Type' of XML schema type 'witsml2:LogRectangleType'
        enum witsml2__LogRectangleType *Type;
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Position' of XML schema type 'witsml2:DepthRegRectangle'
        witsml2__DepthRegRectangle *Position;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegLogRect, default initialized and not managed by a soap context
        virtual witsml2__DepthRegLogRect *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegLogRect); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegLogRect() : Type(), Name(), ExtensionNameValue(), Position(), uid(), soap() { }
        virtual ~witsml2__DepthRegLogRect() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegLogRect(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegLogRect * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegLogRect(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1557 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve (-664)
/* complex XML schema type 'witsml2:DepthRegTrackCurve': */
class SOAP_CMAC witsml2__DepthRegTrackCurve {
      public:
        /// Required element 'witsml2:CurveInfo' of XML schema type 'eml21:String64'
        std::string CurveInfo;
        /// Required element 'witsml2:LineStyle' of XML schema type 'witsml2:LineStyle'
        enum witsml2__LineStyle LineStyle;
        /// Required element 'witsml2:LineWeight' of XML schema type 'eml21:String64'
        std::string LineWeight;
        /// Required element 'witsml2:LineColor' of XML schema type 'eml21:String64'
        std::string LineColor;
        /// Required element 'witsml2:CurveScaleType' of XML schema type 'witsml2:ScaleType'
        enum witsml2__ScaleType CurveScaleType;
        /// Required element 'witsml2:CurveUnit' of XML schema type 'eml21:TypeEnum'
        std::string CurveUnit;
        /// Required element 'witsml2:CurveLeftScaleValue' of XML schema type 'xsd:double'
        double CurveLeftScaleValue;
        /// Required element 'witsml2:CurveRightScaleValue' of XML schema type 'xsd:double'
        double CurveRightScaleValue;
        /// Required element 'witsml2:CurveBackupScaleType' of XML schema type 'witsml2:BackupScaleType'
        enum witsml2__BackupScaleType CurveBackupScaleType;
        /// Optional element 'witsml2:CurveScaleRect' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> CurveScaleRect;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegTrackCurve, default initialized and not managed by a soap context
        virtual witsml2__DepthRegTrackCurve *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegTrackCurve); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegTrackCurve() : CurveInfo(), LineStyle(), LineWeight(), LineColor(), CurveScaleType(), CurveUnit(), CurveLeftScaleValue(), CurveRightScaleValue(), CurveBackupScaleType(), CurveScaleRect(), Description(), uid(), soap() { }
        virtual ~witsml2__DepthRegTrackCurve() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegTrackCurve(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegTrackCurve * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegTrackCurve(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1561 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection (-666)
/* complex XML schema type 'witsml2:DepthRegLogSection': */
class SOAP_CMAC witsml2__DepthRegLogSection {
      public:
        /// Required element 'witsml2:LogSectionSequenceNumber' of XML schema type 'xsd:unsignedLong'
        ULONG64 LogSectionSequenceNumber;
        /// Optional element 'witsml2:LogSectionType' of XML schema type 'witsml2:LogSectionType'
        enum witsml2__LogSectionType *LogSectionType;
        /// Optional element 'witsml2:LogSectionName' of XML schema type 'eml21:String64'
        std::string *LogSectionName;
        /// Optional element 'witsml2:LogMatrix' of XML schema type 'eml21:String64'
        std::string *LogMatrix;
        /// Optional element 'witsml2:ScaleNumerator' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ScaleNumerator;
        /// Optional element 'witsml2:ScaleDenominator' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *ScaleDenominator;
        /// Required element 'witsml2:IndexType' of XML schema type 'witsml2:LogIndexType'
        enum witsml2__LogIndexType IndexType;
        /// Required element 'witsml2:IndexUom' of XML schema type 'eml21:String64'
        std::string IndexUom;
        /// Optional element 'witsml2:IndexReference' of XML schema type 'eml21:WellboreDatumReference'
        enum eml21__WellboreDatumReference *IndexReference;
        /// Optional element 'witsml2:Log' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Log;
        /// Required element 'witsml2:MinInterval' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *MinInterval;
        /// Required element 'witsml2:MaxInterval' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *MaxInterval;
        /// Optional element 'witsml2:VerticalLabel' of XML schema type 'eml21:String2000'
        std::string *VerticalLabel;
        /// Optional element 'witsml2:VerticalRatio' of XML schema type 'eml21:String2000'
        std::string *VerticalRatio;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:UpperCurveScaleRect' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> UpperCurveScaleRect;
        /// Optional element 'witsml2:CalibrationPoint' of XML schema type 'witsml2:DepthRegCalibrationPoint'
        std::vector<witsml2__DepthRegCalibrationPoint *> CalibrationPoint;
        /// Optional element 'witsml2:WhiteSpace' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> WhiteSpace;
        /// Optional element 'witsml2:LowerCurveScaleRect' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> LowerCurveScaleRect;
        /// Optional element 'witsml2:LogSectionRect' of XML schema type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> LogSectionRect;
        /// Optional element 'witsml2:Parameter' of XML schema type 'witsml2:DepthRegParameter'
        std::vector<witsml2__DepthRegParameter *> Parameter;
        /// Optional element 'witsml2:Track' of XML schema type 'witsml2:DepthRegTrack'
        std::vector<witsml2__DepthRegTrack *> Track;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegLogSection, default initialized and not managed by a soap context
        virtual witsml2__DepthRegLogSection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegLogSection); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegLogSection() : LogSectionSequenceNumber(), LogSectionType(), LogSectionName(), LogMatrix(), ScaleNumerator(), ScaleDenominator(), IndexType(), IndexUom(), IndexReference(), Log(), MinInterval(), MaxInterval(), VerticalLabel(), VerticalRatio(), Comment(), ExtensionNameValue(), UpperCurveScaleRect(), CalibrationPoint(), WhiteSpace(), LowerCurveScaleRect(), LogSectionRect(), Parameter(), Track(), uid(), soap() { }
        virtual ~witsml2__DepthRegLogSection() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegLogSection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegLogSection * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegLogSection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint (-667)
/* complex XML schema type 'witsml2:DepthRegCalibrationPoint': */
class SOAP_CMAC witsml2__DepthRegCalibrationPoint {
      public:
        /// Required element 'witsml2:Index' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Index;
        /// Required element 'witsml2:Track' of XML schema type 'eml21:String64'
        std::string Track;
        /// Required element 'witsml2:Role' of XML schema type 'witsml2:CalibrationPointRole'
        enum witsml2__CalibrationPointRole Role;
        /// Optional element 'witsml2:CurveName' of XML schema type 'eml21:String64'
        std::string *CurveName;
        /// Optional element 'witsml2:Fraction' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *Fraction;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::vector<std::string> Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Parameter' of XML schema type 'witsml2:DepthRegParameter'
        std::vector<witsml2__DepthRegParameter *> Parameter;
        /// Required element 'witsml2:Point' of XML schema type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Point;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegCalibrationPoint, default initialized and not managed by a soap context
        virtual witsml2__DepthRegCalibrationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegCalibrationPoint); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegCalibrationPoint() : Index(), Track(), Role(), CurveName(), Fraction(), Comment(), ExtensionNameValue(), Parameter(), Point(), uid(), soap() { }
        virtual ~witsml2__DepthRegCalibrationPoint() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegCalibrationPoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegCalibrationPoint * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegCalibrationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1565 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint (-668)
/* complex XML schema type 'witsml2:DepthRegPoint': */
class SOAP_CMAC witsml2__DepthRegPoint {
      public:
        /// Required element 'witsml2:X' of XML schema type 'xsd:unsignedLong'
        ULONG64 X;
        /// Required element 'witsml2:Y' of XML schema type 'xsd:unsignedLong'
        ULONG64 Y;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegPoint, default initialized and not managed by a soap context
        virtual witsml2__DepthRegPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegPoint); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegPoint() : X(), Y(), soap() { }
        virtual ~witsml2__DepthRegPoint() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegPoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegPoint * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1567 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter (-669)
/* complex XML schema type 'witsml2:DepthRegParameter': */
class SOAP_CMAC witsml2__DepthRegParameter {
      public:
        /// Required element 'witsml2:Mnemonic' of XML schema type 'eml21:String64'
        std::string Mnemonic;
        /// Optional element 'witsml2:Dictionary' of XML schema type 'eml21:String64'
        std::string *Dictionary;
        /// Optional element 'witsml2:TopIndex' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *TopIndex;
        /// Optional element 'witsml2:BottomIndex' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *BottomIndex;
        /// Required element 'witsml2:Value' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Value;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegParameter, default initialized and not managed by a soap context
        virtual witsml2__DepthRegParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegParameter); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegParameter() : Mnemonic(), Dictionary(), TopIndex(), BottomIndex(), Value(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DepthRegParameter() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegParameter * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1569 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle (-670)
/* complex XML schema type 'witsml2:DepthRegRectangle': */
class SOAP_CMAC witsml2__DepthRegRectangle {
      public:
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Ul' of XML schema type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ul;
        /// Optional element 'witsml2:Ur' of XML schema type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ur;
        /// Optional element 'witsml2:Ll' of XML schema type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ll;
        /// Optional element 'witsml2:Lr' of XML schema type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Lr;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegRectangle, default initialized and not managed by a soap context
        virtual witsml2__DepthRegRectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegRectangle); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegRectangle() : ExtensionNameValue(), Ul(), Ur(), Ll(), Lr(), uid(), soap() { }
        virtual ~witsml2__DepthRegRectangle() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegRectangle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegRectangle * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegRectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1575 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference (-673)
/* complex XML schema type 'witsml2:DownholeComponentReference': */
class SOAP_CMAC witsml2__DownholeComponentReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// Optional element 'witsml2:PerforationSetReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> PerforationSetReferenceId;
        /// Optional element 'witsml2:BoreholeStringReference' of XML schema type 'witsml2:BoreholeStringReference'
        std::vector<witsml2__BoreholeStringReference *> BoreholeStringReference;
        /// Optional element 'witsml2:DownholeStringsReference' of XML schema type 'witsml2:DownholeStringReference'
        std::vector<witsml2__DownholeStringReference *> DownholeStringsReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeComponentReference, default initialized and not managed by a soap context
        virtual witsml2__DownholeComponentReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeComponentReference); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeComponentReference() : StringEquipmentReferenceId(), PerforationSetReferenceId(), BoreholeStringReference(), DownholeStringsReference(), soap() { }
        virtual ~witsml2__DownholeComponentReference() { }
        /// Friend allocator used by soap_new_witsml2__DownholeComponentReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeComponentReference * SOAP_FMAC2 soap_instantiate_witsml2__DownholeComponentReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1577 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference (-674)
/* complex XML schema type 'witsml2:BoreholeStringReference': */
class SOAP_CMAC witsml2__BoreholeStringReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// Required attribute 'boreholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string boreholeStringReferenceId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeStringReference, default initialized and not managed by a soap context
        virtual witsml2__BoreholeStringReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeStringReference); }
      public:
        /// Constructor with default initializations
        witsml2__BoreholeStringReference() : StringEquipmentReferenceId(), boreholeStringReferenceId(), soap() { }
        virtual ~witsml2__BoreholeStringReference() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeStringReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeStringReference * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeStringReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1579 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference (-675)
/* complex XML schema type 'witsml2:DownholeStringReference': */
class SOAP_CMAC witsml2__DownholeStringReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// Required attribute 'downholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string downholeStringReferenceId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeStringReference, default initialized and not managed by a soap context
        virtual witsml2__DownholeStringReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeStringReference); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeStringReference() : StringEquipmentReferenceId(), downholeStringReferenceId(), soap() { }
        virtual ~witsml2__DownholeStringReference() { }
        /// Friend allocator used by soap_new_witsml2__DownholeStringReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeStringReference * SOAP_FMAC2 soap_instantiate_witsml2__DownholeStringReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1581 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension (-676)
/* complex XML schema type 'witsml2:AbstractEventExtension': */
class SOAP_CMAC witsml2__AbstractEventExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractEventExtension, default initialized and not managed by a soap context
        virtual witsml2__AbstractEventExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractEventExtension); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractEventExtension() : soap() { }
        virtual ~witsml2__AbstractEventExtension() { }
        /// Friend allocator used by soap_new_witsml2__AbstractEventExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractEventExtension * SOAP_FMAC2 soap_instantiate_witsml2__AbstractEventExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1603 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating (-687)
/* complex XML schema type 'witsml2:Perforating': */
class SOAP_CMAC witsml2__Perforating {
      public:
        /// Optional element 'witsml2:StageNumber' of XML schema type 'xsd:int'
        int *StageNumber;
        /// Optional element 'witsml2:BottomPackerSet' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *BottomPackerSet;
        /// Optional element 'witsml2:PerforationFluidType' of XML schema type 'eml21:String64'
        std::string *PerforationFluidType;
        /// Optional element 'witsml2:HydrostaticPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *HydrostaticPressure;
        /// Optional element 'witsml2:SurfacePressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *SurfacePressure;
        /// Optional element 'witsml2:ReservoirPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *ReservoirPressure;
        /// Optional element 'witsml2:FluidDensity' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *FluidDensity;
        /// Optional element 'witsml2:FluidLevel' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *FluidLevel;
        /// Optional element 'witsml2:ConveyanceMethod' of XML schema type 'witsml2:PerfConveyanceMethod'
        enum witsml2__PerfConveyanceMethod *ConveyanceMethod;
        /// Optional element 'witsml2:ShotsPlanned' of XML schema type 'xsd:int'
        int *ShotsPlanned;
        /// Optional element 'witsml2:ShotsDensity' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *ShotsDensity;
        /// Optional element 'witsml2:ShotsMisfired' of XML schema type 'xsd:int'
        int *ShotsMisfired;
        /// Optional element 'witsml2:Orientation' of XML schema type 'eml21:String64'
        std::string *Orientation;
        /// Optional element 'witsml2:OrientationMethod' of XML schema type 'eml21:String64'
        std::string *OrientationMethod;
        /// Optional element 'witsml2:PerforationCompany' of XML schema type 'eml21:String64'
        std::string *PerforationCompany;
        /// Optional element 'witsml2:CarrierManufacturer' of XML schema type 'eml21:String64'
        std::string *CarrierManufacturer;
        /// Optional element 'witsml2:CarrierSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *CarrierSize;
        /// Optional element 'witsml2:CarrierDescription' of XML schema type 'eml21:String2000'
        std::string *CarrierDescription;
        /// Optional element 'witsml2:ChargeManufacturer' of XML schema type 'eml21:String64'
        std::string *ChargeManufacturer;
        /// Optional element 'witsml2:ChargeSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ChargeSize;
        /// Optional element 'witsml2:ChargeWeight' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *ChargeWeight;
        /// Optional element 'witsml2:ChargeType' of XML schema type 'eml21:String64'
        std::string *ChargeType;
        /// Optional element 'witsml2:RefLog' of XML schema type 'eml21:String64'
        std::string *RefLog;
        /// Optional element 'witsml2:GunCentralized' of XML schema type 'eml21:String64'
        std::string *GunCentralized;
        /// Optional element 'witsml2:GunSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GunSize;
        /// Optional element 'witsml2:GunDesciption' of XML schema type 'eml21:String2000'
        std::string *GunDesciption;
        /// Optional element 'witsml2:GunLeftInHole' of XML schema type 'xsd:boolean'
        bool *GunLeftInHole;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Perforating, default initialized and not managed by a soap context
        virtual witsml2__Perforating *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Perforating); }
      public:
        /// Constructor with default initializations
        witsml2__Perforating() : StageNumber(), BottomPackerSet(), PerforationFluidType(), HydrostaticPressure(), SurfacePressure(), ReservoirPressure(), FluidDensity(), FluidLevel(), ConveyanceMethod(), ShotsPlanned(), ShotsDensity(), ShotsMisfired(), Orientation(), OrientationMethod(), PerforationCompany(), CarrierManufacturer(), CarrierSize(), CarrierDescription(), ChargeManufacturer(), ChargeSize(), ChargeWeight(), ChargeType(), RefLog(), GunCentralized(), GunSize(), GunDesciption(), GunLeftInHole(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Perforating() { }
        /// Friend allocator used by soap_new_witsml2__Perforating(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Perforating * SOAP_FMAC2 soap_instantiate_witsml2__Perforating(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1609 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject (-690)
/* complex XML schema type 'witsml2:MemberObject': */
class SOAP_CMAC witsml2__MemberObject {
      public:
        /// Optional element 'witsml2:IndexType' of XML schema type 'witsml2:LogIndexType'
        enum witsml2__LogIndexType *IndexType;
        /// Optional element 'witsml2:RangeMin' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *RangeMin;
        /// Optional element 'witsml2:RangeMax' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *RangeMax;
        /// Optional element 'witsml2:RangeDateTimeMin' of XML schema type 'eml21:TimeStamp'
        std::string *RangeDateTimeMin;
        /// Optional element 'witsml2:RangeDateTimeMax' of XML schema type 'eml21:TimeStamp'
        std::string *RangeDateTimeMax;
        /// Optional element 'witsml2:MnemonicList' of XML schema type 'xsd:string'
        std::string *MnemonicList;
        /// Optional element 'witsml2:ReferenceDepth' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *ReferenceDepth;
        /// Optional element 'witsml2:ReferenceDateTime' of XML schema type 'eml21:TimeStamp'
        std::string *ReferenceDateTime;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml2:Sequence3' of XML schema type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence3;
        /// Required element 'witsml2:ObjectReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ObjectReference;
        /// Required element 'witsml2:Sequence1' of XML schema type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence1;
        /// Required element 'witsml2:Sequence2' of XML schema type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence2;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MemberObject, default initialized and not managed by a soap context
        virtual witsml2__MemberObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MemberObject); }
      public:
        /// Constructor with default initializations
        witsml2__MemberObject() : IndexType(), RangeMin(), RangeMax(), RangeDateTimeMin(), RangeDateTimeMax(), MnemonicList(), ReferenceDepth(), ReferenceDateTime(), ExtensionNameValue(), Sequence3(), ObjectReference(), Sequence1(), Sequence2(), uid(), soap() { }
        virtual ~witsml2__MemberObject() { }
        /// Friend allocator used by soap_new_witsml2__MemberObject(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MemberObject * SOAP_FMAC2 soap_instantiate_witsml2__MemberObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1611 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Participant
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Participant (-691)
/* complex XML schema type 'witsml2:Participant': */
class SOAP_CMAC witsml2__Participant {
      public:
        /// Optional element 'witsml2:ExtNameValues' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtNameValues;
        /// Optional element 'witsml2:Participant' of XML schema type 'witsml2:MemberObject'
        std::vector<witsml2__MemberObject *> Participant;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Participant
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Participant; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Participant, default initialized and not managed by a soap context
        virtual witsml2__Participant *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Participant); }
      public:
        /// Constructor with default initializations
        witsml2__Participant() : ExtNameValues(), Participant(), soap() { }
        virtual ~witsml2__Participant() { }
        /// Friend allocator used by soap_new_witsml2__Participant(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Participant * SOAP_FMAC2 soap_instantiate_witsml2__Participant(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1615 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString (-693)
/* Type witsml2__DownholeString is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'witsml2:DownholeString': */
class SOAP_CMAC witsml2__DownholeString {
      public:
        /// Required element 'witsml2:StringType' of XML schema type 'witsml2:DownholeStringType'
        enum witsml2__DownholeStringType StringType;
        /// Optional element 'witsml2:SubStringType' of XML schema type 'witsml2:SubStringType'
        enum witsml2__SubStringType *SubStringType;
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:StringInstallDate' of XML schema type 'eml21:TimeStamp'
        std::string *StringInstallDate;
        /// Optional element 'witsml2:ParentStringsName' of XML schema type 'eml21:String64'
        std::string *ParentStringsName;
        /// Optional element 'witsml2:StringMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *StringMdInterval;
        /// Optional element 'witsml2:AxisOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AxisOffset;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Accessories' of XML schema type 'witsml2:StringAccessory'
        witsml2__StringAccessory *Accessories;
        /// Optional element 'witsml2:StringEquipmentSet' of XML schema type 'witsml2:StringEquipmentSet'
        witsml2__StringEquipmentSet *StringEquipmentSet;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required element 'witsml2:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Optional element 'witsml2:ParentString' of XML schema type 'witsml2:DownholeString'
        witsml2__DownholeString *ParentString;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeString, default initialized and not managed by a soap context
        virtual witsml2__DownholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeString); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeString() : StringType(), SubStringType(), Name(), StringInstallDate(), ParentStringsName(), StringMdInterval(), AxisOffset(), ExtensionNameValue(), Accessories(), StringEquipmentSet(), ExtensionAny(), ReferenceWellbore(), ParentString(), uid(), soap() { }
        virtual ~witsml2__DownholeString() { }
        /// Friend allocator used by soap_new_witsml2__DownholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeString * SOAP_FMAC2 soap_instantiate_witsml2__DownholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1617 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet (-694)
/* complex XML schema type 'witsml2:StringEquipmentSet': */
class SOAP_CMAC witsml2__StringEquipmentSet {
      public:
        /// Required element 'witsml2:StringEquipment' of XML schema type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> StringEquipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringEquipmentSet, default initialized and not managed by a soap context
        virtual witsml2__StringEquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringEquipmentSet); }
      public:
        /// Constructor with default initializations
        witsml2__StringEquipmentSet() : StringEquipment(), soap() { }
        virtual ~witsml2__StringEquipmentSet() { }
        /// Friend allocator used by soap_new_witsml2__StringEquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringEquipmentSet * SOAP_FMAC2 soap_instantiate_witsml2__StringEquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1619 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment (-695)
/* Type witsml2__StringEquipment is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'witsml2:StringEquipment': */
class SOAP_CMAC witsml2__StringEquipment {
      public:
        /// Optional element 'witsml2:EquipmentType' of XML schema type 'witsml2:EquipmentTypeExt'
        std::string *EquipmentType;
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String2000'
        std::string *Name;
        /// Optional element 'witsml2:EquipmentEventHistory' of XML schema type 'witsml2:EventInfo'
        std::vector<witsml2__EventInfo *> EquipmentEventHistory;
        /// Optional element 'witsml2:Status' of XML schema type 'eml21:String64'
        std::string *Status;
        /// Optional element 'witsml2:RunNo' of XML schema type 'eml21:String64'
        std::string *RunNo;
        /// Optional element 'witsml2:PreviousRunDays' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *PreviousRunDays;
        /// Optional element 'witsml2:ObjectCondition' of XML schema type 'eml21:String64'
        std::string *ObjectCondition;
        /// Optional element 'witsml2:SurfaceCondition' of XML schema type 'eml21:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml2:Count' of XML schema type 'xsd:int'
        int *Count;
        /// Optional element 'witsml2:Length' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Length;
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:OutsideString' of XML schema type 'xsd:boolean'
        bool *OutsideString;
        /// Optional element 'witsml2:TensileMax' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *TensileMax;
        /// Optional element 'witsml2:PresRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRating;
        /// Optional element 'witsml2:PresCollapse' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCollapse;
        /// Optional element 'witsml2:PresBurst' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBurst;
        /// Optional element 'witsml2:HeatRating' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *HeatRating;
        /// Optional element 'witsml2:IsLinetoSurface' of XML schema type 'xsd:boolean'
        bool *IsLinetoSurface;
        /// Optional element 'witsml2:IsCentralized' of XML schema type 'xsd:boolean'
        bool *IsCentralized;
        /// Optional element 'witsml2:HasScratchers' of XML schema type 'xsd:boolean'
        bool *HasScratchers;
        /// Optional element 'witsml2:PerforationSetRefId' of XML schema type 'eml21:String64'
        std::vector<std::string> PerforationSetRefId;
        /// Optional element 'witsml2:PermanentRemarks' of XML schema type 'eml21:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml2:UsageComment' of XML schema type 'eml21:String2000'
        std::string *UsageComment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Assembly' of XML schema type 'witsml2:Assembly'
        witsml2__Assembly *Assembly;
        /// Optional element 'witsml2:OrderOfObject' of XML schema type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *OrderOfObject;
        /// Optional element 'witsml2:InsideComponent' of XML schema type 'witsml2:ReferenceContainer'
        std::vector<witsml2__ReferenceContainer *> InsideComponent;
        /// Optional element 'witsml2:OutsideComponent' of XML schema type 'witsml2:ReferenceContainer'
        std::vector<witsml2__ReferenceContainer *> OutsideComponent;
        /// Optional element 'witsml2:ConnectionNext' of XML schema type 'witsml2:EquipmentConnection'
        std::vector<witsml2__EquipmentConnection *> ConnectionNext;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Required attribute 'equipmentReferenceUid' of XML schema type 'eml21:String64'
        std::string equipmentReferenceUid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringEquipment, default initialized and not managed by a soap context
        virtual witsml2__StringEquipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringEquipment); }
      public:
        /// Constructor with default initializations
        witsml2__StringEquipment() : EquipmentType(), Name(), EquipmentEventHistory(), Status(), RunNo(), PreviousRunDays(), ObjectCondition(), SurfaceCondition(), Count(), Length(), MdInterval(), TvdInterval(), OutsideString(), TensileMax(), PresRating(), PresCollapse(), PresBurst(), HeatRating(), IsLinetoSurface(), IsCentralized(), HasScratchers(), PerforationSetRefId(), PermanentRemarks(), UsageComment(), ExtensionNameValue(), Assembly(), OrderOfObject(), InsideComponent(), OutsideComponent(), ConnectionNext(), uid(), equipmentReferenceUid(), soap() { }
        virtual ~witsml2__StringEquipment() { }
        /// Friend allocator used by soap_new_witsml2__StringEquipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringEquipment * SOAP_FMAC2 soap_instantiate_witsml2__StringEquipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1621 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo (-696)
/* complex XML schema type 'witsml2:EventInfo': */
class SOAP_CMAC witsml2__EventInfo {
      public:
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BeginEvent' of XML schema type 'witsml2:EventRefInfo'
        witsml2__EventRefInfo *BeginEvent;
        /// Optional element 'witsml2:EndEvent' of XML schema type 'witsml2:EventRefInfo'
        witsml2__EventRefInfo *EndEvent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventInfo, default initialized and not managed by a soap context
        virtual witsml2__EventInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventInfo); }
      public:
        /// Constructor with default initializations
        witsml2__EventInfo() : ExtensionNameValue(), BeginEvent(), EndEvent(), soap() { }
        virtual ~witsml2__EventInfo() { }
        /// Friend allocator used by soap_new_witsml2__EventInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventInfo * SOAP_FMAC2 soap_instantiate_witsml2__EventInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1623 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo (-697)
/* complex XML schema type 'witsml2:EventRefInfo': */
class SOAP_CMAC witsml2__EventRefInfo {
      public:
        /// Optional element 'witsml2:EventReferenceId' of XML schema type 'eml21:String64'
        std::string *EventReferenceId;
        /// Optional element 'witsml2:EventDate' of XML schema type 'eml21:TimeStamp'
        std::string *EventDate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventRefInfo, default initialized and not managed by a soap context
        virtual witsml2__EventRefInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventRefInfo); }
      public:
        /// Constructor with default initializations
        witsml2__EventRefInfo() : EventReferenceId(), EventDate(), soap() { }
        virtual ~witsml2__EventRefInfo() { }
        /// Friend allocator used by soap_new_witsml2__EventRefInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventRefInfo * SOAP_FMAC2 soap_instantiate_witsml2__EventRefInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence (-698)
/* complex XML schema type 'witsml2:ObjectSequence': */
class SOAP_CMAC witsml2__ObjectSequence {
      public:
        /// Required attribute 'description' of XML schema type 'eml21:String2000'
        std::string description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ObjectSequence, default initialized and not managed by a soap context
        virtual witsml2__ObjectSequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ObjectSequence); }
      public:
        /// Constructor with default initializations
        witsml2__ObjectSequence() : description(), soap() { }
        virtual ~witsml2__ObjectSequence() { }
        /// Friend allocator used by soap_new_witsml2__ObjectSequence(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ObjectSequence * SOAP_FMAC2 soap_instantiate_witsml2__ObjectSequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1627 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer (-699)
/* complex XML schema type 'witsml2:ReferenceContainer': */
class SOAP_CMAC witsml2__ReferenceContainer {
      public:
        /// Required element 'witsml2:StringReferenceId' of XML schema type 'eml21:String64'
        std::string StringReferenceId;
        /// Required element 'witsml2:EquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string EquipmentReferenceId;
        /// Required element 'witsml2:AccesoryEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string AccesoryEquipmentReferenceId;
        /// Required element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ReferenceContainer, default initialized and not managed by a soap context
        virtual witsml2__ReferenceContainer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ReferenceContainer); }
      public:
        /// Constructor with default initializations
        witsml2__ReferenceContainer() : StringReferenceId(), EquipmentReferenceId(), AccesoryEquipmentReferenceId(), Comment(), uid(), soap() { }
        virtual ~witsml2__ReferenceContainer() { }
        /// Friend allocator used by soap_new_witsml2__ReferenceContainer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ReferenceContainer * SOAP_FMAC2 soap_instantiate_witsml2__ReferenceContainer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1631 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly (-701)
/* complex XML schema type 'witsml2:Assembly': */
class SOAP_CMAC witsml2__Assembly {
      public:
        /// Optional element 'witsml2:Part' of XML schema type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> Part;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Assembly, default initialized and not managed by a soap context
        virtual witsml2__Assembly *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Assembly); }
      public:
        /// Constructor with default initializations
        witsml2__Assembly() : Part(), soap() { }
        virtual ~witsml2__Assembly() { }
        /// Friend allocator used by soap_new_witsml2__Assembly(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Assembly * SOAP_FMAC2 soap_instantiate_witsml2__Assembly(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory (-702)
/* complex XML schema type 'witsml2:StringAccessory': */
class SOAP_CMAC witsml2__StringAccessory {
      public:
        /// Required element 'witsml2:Accessory' of XML schema type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> Accessory;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringAccessory, default initialized and not managed by a soap context
        virtual witsml2__StringAccessory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringAccessory); }
      public:
        /// Constructor with default initializations
        witsml2__StringAccessory() : Accessory(), soap() { }
        virtual ~witsml2__StringAccessory() { }
        /// Friend allocator used by soap_new_witsml2__StringAccessory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringAccessory * SOAP_FMAC2 soap_instantiate_witsml2__StringAccessory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1635 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet (-703)
/* complex XML schema type 'witsml2:BoreholeStringSet': */
class SOAP_CMAC witsml2__BoreholeStringSet {
      public:
        /// Required element 'witsml2:BoreholeString' of XML schema type 'witsml2:BoreholeString'
        std::vector<witsml2__BoreholeString *> BoreholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeStringSet, default initialized and not managed by a soap context
        virtual witsml2__BoreholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeStringSet); }
      public:
        /// Constructor with default initializations
        witsml2__BoreholeStringSet() : BoreholeString(), soap() { }
        virtual ~witsml2__BoreholeStringSet() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeStringSet * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1637 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString (-704)
/* complex XML schema type 'witsml2:BoreholeString': */
class SOAP_CMAC witsml2__BoreholeString {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:Accessories' of XML schema type 'witsml2:StringAccessory'
        witsml2__StringAccessory *Accessories;
        /// Optional element 'witsml2:Borehole' of XML schema type 'witsml2:Borehole'
        std::vector<witsml2__Borehole *> Borehole;
        /// Optional element 'witsml2:GeologyFeature' of XML schema type 'witsml2:GeologyFeature'
        std::vector<witsml2__GeologyFeature *> GeologyFeature;
        /// Required element 'witsml2:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeString, default initialized and not managed by a soap context
        virtual witsml2__BoreholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeString); }
      public:
        /// Constructor with default initializations
        witsml2__BoreholeString() : Name(), Accessories(), Borehole(), GeologyFeature(), ReferenceWellbore(), uid(), soap() { }
        virtual ~witsml2__BoreholeString() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeString * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1639 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole (-705)
/* complex XML schema type 'witsml2:Borehole': */
class SOAP_CMAC witsml2__Borehole {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:TypeBorehole' of XML schema type 'witsml2:BoreholeType'
        enum witsml2__BoreholeType *TypeBorehole;
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:BoreholeDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BoreholeDiameter;
        /// Optional element 'witsml2:DescriptionPermanent' of XML schema type 'eml21:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:EquipmentEventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EquipmentEventHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Borehole, default initialized and not managed by a soap context
        virtual witsml2__Borehole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Borehole); }
      public:
        /// Constructor with default initializations
        witsml2__Borehole() : Name(), TypeBorehole(), MdInterval(), TvdInterval(), BoreholeDiameter(), DescriptionPermanent(), ExtensionNameValue(), EquipmentEventHistory(), uid(), soap() { }
        virtual ~witsml2__Borehole() { }
        /// Friend allocator used by soap_new_witsml2__Borehole(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Borehole * SOAP_FMAC2 soap_instantiate_witsml2__Borehole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1641 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature (-706)
/* complex XML schema type 'witsml2:GeologyFeature': */
class SOAP_CMAC witsml2__GeologyFeature {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:GeologyType' of XML schema type 'witsml2:GeologyType'
        enum witsml2__GeologyType *GeologyType;
        /// Optional element 'witsml2:FeatureMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *FeatureMdInterval;
        /// Optional element 'witsml2:FeatureTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *FeatureTvdInterval;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeologyFeature, default initialized and not managed by a soap context
        virtual witsml2__GeologyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeologyFeature); }
      public:
        /// Constructor with default initializations
        witsml2__GeologyFeature() : Name(), GeologyType(), FeatureMdInterval(), FeatureTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__GeologyFeature() { }
        /// Friend allocator used by soap_new_witsml2__GeologyFeature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeologyFeature * SOAP_FMAC2 soap_instantiate_witsml2__GeologyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1643 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet (-707)
/* complex XML schema type 'witsml2:DownholeStringSet': */
class SOAP_CMAC witsml2__DownholeStringSet {
      public:
        /// Required element 'witsml2:DownholeString' of XML schema type 'witsml2:DownholeString'
        std::vector<witsml2__DownholeString *> DownholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeStringSet, default initialized and not managed by a soap context
        virtual witsml2__DownholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeStringSet); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeStringSet() : DownholeString(), soap() { }
        virtual ~witsml2__DownholeStringSet() { }
        /// Friend allocator used by soap_new_witsml2__DownholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeStringSet * SOAP_FMAC2 soap_instantiate_witsml2__DownholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1645 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet (-708)
/* complex XML schema type 'witsml2:EquipmentSet': */
class SOAP_CMAC witsml2__EquipmentSet {
      public:
        /// Required element 'witsml2:Equipment' of XML schema type 'witsml2:Equipment'
        std::vector<witsml2__Equipment *> Equipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EquipmentSet, default initialized and not managed by a soap context
        virtual witsml2__EquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EquipmentSet); }
      public:
        /// Constructor with default initializations
        witsml2__EquipmentSet() : Equipment(), soap() { }
        virtual ~witsml2__EquipmentSet() { }
        /// Friend allocator used by soap_new_witsml2__EquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EquipmentSet * SOAP_FMAC2 soap_instantiate_witsml2__EquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1647 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment (-709)
/* complex XML schema type 'witsml2:Equipment': */
class SOAP_CMAC witsml2__Equipment {
      public:
        /// Optional element 'witsml2:EquipmentName' of XML schema type 'eml21:String64'
        std::string *EquipmentName;
        /// Required element 'witsml2:EquipmentType' of XML schema type 'witsml2:EquipmentTypeExt'
        std::string EquipmentType;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:CatalogId' of XML schema type 'eml21:String64'
        std::string *CatalogId;
        /// Optional element 'witsml2:CatalogName' of XML schema type 'eml21:String64'
        std::string *CatalogName;
        /// Optional element 'witsml2:BrandName' of XML schema type 'eml21:String64'
        std::string *BrandName;
        /// Optional element 'witsml2:ModelType' of XML schema type 'eml21:String64'
        std::string *ModelType;
        /// Optional element 'witsml2:Series' of XML schema type 'eml21:String64'
        std::string *Series;
        /// Optional element 'witsml2:IsSerialized' of XML schema type 'xsd:boolean'
        bool *IsSerialized;
        /// Optional element 'witsml2:SerialNumber' of XML schema type 'eml21:String64'
        std::string *SerialNumber;
        /// Optional element 'witsml2:PartNo' of XML schema type 'eml21:String64'
        std::string *PartNo;
        /// Optional element 'witsml2:SurfaceCondition' of XML schema type 'eml21:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml2:Material' of XML schema type 'eml21:String64'
        std::string *Material;
        /// Optional element 'witsml2:Grade' of XML schema type 'witsml2:GradeType'
        enum witsml2__GradeType *Grade;
        /// Optional element 'witsml2:UnitWeight' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *UnitWeight;
        /// Optional element 'witsml2:CoatingLinerApplied' of XML schema type 'xsd:boolean'
        bool *CoatingLinerApplied;
        /// Optional element 'witsml2:OutsideCoating' of XML schema type 'witsml2:Coating'
        enum witsml2__Coating *OutsideCoating;
        /// Optional element 'witsml2:InsideCoating' of XML schema type 'witsml2:Coating'
        enum witsml2__Coating *InsideCoating;
        /// Optional element 'witsml2:UnitLength' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *UnitLength;
        /// Optional element 'witsml2:MajorOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MajorOd;
        /// Optional element 'witsml2:MinorOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinorOd;
        /// Optional element 'witsml2:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml2:MaxOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MaxOd;
        /// Optional element 'witsml2:MinOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinOd;
        /// Optional element 'witsml2:MajorId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MajorId;
        /// Optional element 'witsml2:MinorId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinorId;
        /// Optional element 'witsml2:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml2:MaxId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MaxId;
        /// Optional element 'witsml2:MinId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinId;
        /// Optional element 'witsml2:Drift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Drift;
        /// Optional element 'witsml2:NominalSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *NominalSize;
        /// Optional element 'witsml2:NameService' of XML schema type 'eml21:String64'
        std::string *NameService;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:DescriptionPermanent' of XML schema type 'eml21:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml2:Remark' of XML schema type 'eml21:String2000'
        std::string *Remark;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Property' of XML schema type 'witsml2:ExtPropNameValue'
        std::vector<witsml2__ExtPropNameValue *> Property;
        /// Optional element 'witsml2:SlotAsManufactured' of XML schema type 'witsml2:PerfSlot'
        std::vector<witsml2__PerfSlot *> SlotAsManufactured;
        /// Optional element 'witsml2:HoleAsManufactured' of XML schema type 'witsml2:PerfHole'
        std::vector<witsml2__PerfHole *> HoleAsManufactured;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Equipment, default initialized and not managed by a soap context
        virtual witsml2__Equipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Equipment); }
      public:
        /// Constructor with default initializations
        witsml2__Equipment() : EquipmentName(), EquipmentType(), Manufacturer(), Model(), CatalogId(), CatalogName(), BrandName(), ModelType(), Series(), IsSerialized(), SerialNumber(), PartNo(), SurfaceCondition(), Material(), Grade(), UnitWeight(), CoatingLinerApplied(), OutsideCoating(), InsideCoating(), UnitLength(), MajorOd(), MinorOd(), Od(), MaxOd(), MinOd(), MajorId(), MinorId(), Id(), MaxId(), MinId(), Drift(), NominalSize(), NameService(), Description(), DescriptionPermanent(), Remark(), ExtensionNameValue(), ExtensionAny(), Property(), SlotAsManufactured(), HoleAsManufactured(), uid(), soap() { }
        virtual ~witsml2__Equipment() { }
        /// Friend allocator used by soap_new_witsml2__Equipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Equipment * SOAP_FMAC2 soap_instantiate_witsml2__Equipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1649 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue (-710)
/* complex XML schema type 'witsml2:ExtPropNameValue': */
class SOAP_CMAC witsml2__ExtPropNameValue {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:Value' of XML schema type 'eml21:String2000'
        std::string *Value;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ExtPropNameValue, default initialized and not managed by a soap context
        virtual witsml2__ExtPropNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ExtPropNameValue); }
      public:
        /// Constructor with default initializations
        witsml2__ExtPropNameValue() : Name(), Value(), uid(), soap() { }
        virtual ~witsml2__ExtPropNameValue() { }
        /// Friend allocator used by soap_new_witsml2__ExtPropNameValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ExtPropNameValue * SOAP_FMAC2 soap_instantiate_witsml2__ExtPropNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1651 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot (-711)
/* complex XML schema type 'witsml2:PerfSlot': */
class SOAP_CMAC witsml2__PerfSlot {
      public:
        /// Optional element 'witsml2:SlotHeight' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotHeight;
        /// Optional element 'witsml2:SlotWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotWidth;
        /// Optional element 'witsml2:SlotCenterDistance' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotCenterDistance;
        /// Optional element 'witsml2:SlotCount' of XML schema type 'xsd:int'
        int *SlotCount;
        /// Optional element 'witsml2:Remarks' of XML schema type 'eml21:String2000'
        std::string *Remarks;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerfSlot, default initialized and not managed by a soap context
        virtual witsml2__PerfSlot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerfSlot); }
      public:
        /// Constructor with default initializations
        witsml2__PerfSlot() : SlotHeight(), SlotWidth(), SlotCenterDistance(), SlotCount(), Remarks(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PerfSlot() { }
        /// Friend allocator used by soap_new_witsml2__PerfSlot(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerfSlot * SOAP_FMAC2 soap_instantiate_witsml2__PerfSlot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1653 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole (-712)
/* complex XML schema type 'witsml2:PerfHole': */
class SOAP_CMAC witsml2__PerfHole {
      public:
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:HoleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml2:HoleAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml2:HolePattern' of XML schema type 'eml21:String64'
        std::string *HolePattern;
        /// Optional element 'witsml2:Remarks' of XML schema type 'eml21:String2000'
        std::string *Remarks;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:HoleDensity' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml2:HoleCount' of XML schema type 'xsd:int'
        int *HoleCount;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerfHole, default initialized and not managed by a soap context
        virtual witsml2__PerfHole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerfHole); }
      public:
        /// Constructor with default initializations
        witsml2__PerfHole() : MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), Remarks(), ExtensionNameValue(), HoleDensity(), HoleCount(), uid(), soap() { }
        virtual ~witsml2__PerfHole() { }
        /// Friend allocator used by soap_new_witsml2__PerfHole(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerfHole * SOAP_FMAC2 soap_instantiate_witsml2__PerfHole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1655 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets (-713)
/* complex XML schema type 'witsml2:PerforationSets': */
class SOAP_CMAC witsml2__PerforationSets {
      public:
        /// Required element 'witsml2:PerforationSet' of XML schema type 'witsml2:PerforationSet'
        std::vector<witsml2__PerforationSet *> PerforationSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSets, default initialized and not managed by a soap context
        virtual witsml2__PerforationSets *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSets); }
      public:
        /// Constructor with default initializations
        witsml2__PerforationSets() : PerforationSet(), soap() { }
        virtual ~witsml2__PerforationSets() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSets(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSets * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1657 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet (-714)
/* complex XML schema type 'witsml2:PerforationSet': */
class SOAP_CMAC witsml2__PerforationSet {
      public:
        /// Optional element 'witsml2:BoreholeStringReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> BoreholeStringReferenceId;
        /// Optional element 'witsml2:DownholeStringReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> DownholeStringReferenceId;
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:HoleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml2:HoleAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml2:HolePattern' of XML schema type 'eml21:String64'
        std::string *HolePattern;
        /// Optional element 'witsml2:HoleDensity' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml2:HoleCount' of XML schema type 'xsd:int'
        int *HoleCount;
        /// Optional element 'witsml2:FrictionFactor' of XML schema type 'xsd:double'
        double *FrictionFactor;
        /// Optional element 'witsml2:FrictionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:DischargeCoefficient' of XML schema type 'xsd:double'
        double *DischargeCoefficient;
        /// Optional element 'witsml2:PerforationTool' of XML schema type 'witsml2:PerforationToolType'
        enum witsml2__PerforationToolType *PerforationTool;
        /// Optional element 'witsml2:PerforationPenetration' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PerforationPenetration;
        /// Optional element 'witsml2:CrushZoneDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *CrushZoneDiameter;
        /// Optional element 'witsml2:CrushDamageRatio' of XML schema type 'eml21:String64'
        std::string *CrushDamageRatio;
        /// Optional element 'witsml2:PerforationDate' of XML schema type 'eml21:TimeStamp'
        std::string *PerforationDate;
        /// Optional element 'witsml2:PermanentRemarks' of XML schema type 'eml21:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSet, default initialized and not managed by a soap context
        virtual witsml2__PerforationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSet); }
      public:
        /// Constructor with default initializations
        witsml2__PerforationSet() : BoreholeStringReferenceId(), DownholeStringReferenceId(), MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), HoleDensity(), HoleCount(), FrictionFactor(), FrictionPres(), DischargeCoefficient(), PerforationTool(), PerforationPenetration(), CrushZoneDiameter(), CrushDamageRatio(), PerforationDate(), PermanentRemarks(), EventHistory(), uid(), soap() { }
        virtual ~witsml2__PerforationSet() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSet * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType (-715)
/* complex XML schema type 'witsml2:AbstractConnectionType': */
class SOAP_CMAC witsml2__AbstractConnectionType {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractConnectionType, default initialized and not managed by a soap context
        virtual witsml2__AbstractConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractConnectionType); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractConnectionType() : soap() { }
        virtual ~witsml2__AbstractConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__AbstractConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__AbstractConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1669 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen (-720)
/* complex XML schema type 'witsml2:ShakerScreen': */
class SOAP_CMAC witsml2__ShakerScreen {
      public:
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:NumDeck' of XML schema type 'xsd:int'
        int *NumDeck;
        /// Optional element 'witsml2:MeshX' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MeshX;
        /// Optional element 'witsml2:MeshY' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MeshY;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:CutPoint' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *CutPoint;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShakerScreen, default initialized and not managed by a soap context
        virtual witsml2__ShakerScreen *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShakerScreen); }
      public:
        /// Constructor with default initializations
        witsml2__ShakerScreen() : DTimStart(), DTimEnd(), NumDeck(), MeshX(), MeshY(), Manufacturer(), Model(), CutPoint(), soap() { }
        virtual ~witsml2__ShakerScreen() { }
        /// Friend allocator used by soap_new_witsml2__ShakerScreen(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShakerScreen * SOAP_FMAC2 soap_instantiate_witsml2__ShakerScreen(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1671 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Hse
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Hse (-721)
/* complex XML schema type 'witsml2:Hse': */
class SOAP_CMAC witsml2__Hse {
      public:
        /// Optional element 'witsml2:DaysIncFree' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *DaysIncFree;
        /// Optional element 'witsml2:LastCsgPresTest' of XML schema type 'eml21:TimeStamp'
        std::string *LastCsgPresTest;
        /// Optional element 'witsml2:PresLastCsg' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresLastCsg;
        /// Optional element 'witsml2:LastBopPresTest' of XML schema type 'eml21:TimeStamp'
        std::string *LastBopPresTest;
        /// Optional element 'witsml2:NextBopPresTest' of XML schema type 'eml21:TimeStamp'
        std::string *NextBopPresTest;
        /// Optional element 'witsml2:PresStdPipe' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresStdPipe;
        /// Optional element 'witsml2:PresKellyHose' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresKellyHose;
        /// Optional element 'witsml2:PresDiverter' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresDiverter;
        /// Optional element 'witsml2:PresAnnular' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresAnnular;
        /// Optional element 'witsml2:PresRams' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRams;
        /// Optional element 'witsml2:PresChokeLine' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresChokeLine;
        /// Optional element 'witsml2:PresChokeMan' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresChokeMan;
        /// Optional element 'witsml2:LastFireBoatDrill' of XML schema type 'eml21:TimeStamp'
        std::string *LastFireBoatDrill;
        /// Optional element 'witsml2:LastAbandonDrill' of XML schema type 'eml21:TimeStamp'
        std::string *LastAbandonDrill;
        /// Optional element 'witsml2:LastRigInspection' of XML schema type 'eml21:TimeStamp'
        std::string *LastRigInspection;
        /// Optional element 'witsml2:LastSafetyMeeting' of XML schema type 'eml21:TimeStamp'
        std::string *LastSafetyMeeting;
        /// Optional element 'witsml2:LastSafetyInspection' of XML schema type 'eml21:TimeStamp'
        std::string *LastSafetyInspection;
        /// Optional element 'witsml2:LastTripDrill' of XML schema type 'eml21:TimeStamp'
        std::string *LastTripDrill;
        /// Optional element 'witsml2:LastDiverterDrill' of XML schema type 'eml21:TimeStamp'
        std::string *LastDiverterDrill;
        /// Optional element 'witsml2:LastBopDrill' of XML schema type 'eml21:TimeStamp'
        std::string *LastBopDrill;
        /// Optional element 'witsml2:RegAgencyInsp' of XML schema type 'xsd:boolean'
        bool *RegAgencyInsp;
        /// Optional element 'witsml2:NonComplianceIssued' of XML schema type 'xsd:boolean'
        bool *NonComplianceIssued;
        /// Optional element 'witsml2:NumStopCards' of XML schema type 'xsd:int'
        int *NumStopCards;
        /// Optional element 'witsml2:FluidDischarged' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidDischarged;
        /// Optional element 'witsml2:VolCtgDischarged' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolCtgDischarged;
        /// Optional element 'witsml2:VolOilCtgDischarge' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOilCtgDischarge;
        /// Optional element 'witsml2:WasteDischarged' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *WasteDischarged;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:Incident' of XML schema type 'witsml2:Incident'
        std::vector<witsml2__Incident *> Incident;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Hse
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Hse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Hse, default initialized and not managed by a soap context
        virtual witsml2__Hse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Hse); }
      public:
        /// Constructor with default initializations
        witsml2__Hse() : DaysIncFree(), LastCsgPresTest(), PresLastCsg(), LastBopPresTest(), NextBopPresTest(), PresStdPipe(), PresKellyHose(), PresDiverter(), PresAnnular(), PresRams(), PresChokeLine(), PresChokeMan(), LastFireBoatDrill(), LastAbandonDrill(), LastRigInspection(), LastSafetyMeeting(), LastSafetyInspection(), LastTripDrill(), LastDiverterDrill(), LastBopDrill(), RegAgencyInsp(), NonComplianceIssued(), NumStopCards(), FluidDischarged(), VolCtgDischarged(), VolOilCtgDischarge(), WasteDischarged(), Comments(), Incident(), soap() { }
        virtual ~witsml2__Hse() { }
        /// Friend allocator used by soap_new_witsml2__Hse(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Hse * SOAP_FMAC2 soap_instantiate_witsml2__Hse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1673 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Incident
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Incident (-722)
/* complex XML schema type 'witsml2:Incident': */
class SOAP_CMAC witsml2__Incident {
      public:
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Optional element 'witsml2:Reporter' of XML schema type 'eml21:String64'
        std::string *Reporter;
        /// Optional element 'witsml2:NumMinorInjury' of XML schema type 'xsd:int'
        int *NumMinorInjury;
        /// Optional element 'witsml2:NumMajorInjury' of XML schema type 'xsd:int'
        int *NumMajorInjury;
        /// Optional element 'witsml2:NumFatality' of XML schema type 'xsd:int'
        int *NumFatality;
        /// Optional element 'witsml2:IsNearMiss' of XML schema type 'xsd:boolean'
        bool *IsNearMiss;
        /// Optional element 'witsml2:DescLocation' of XML schema type 'eml21:String64'
        std::string *DescLocation;
        /// Optional element 'witsml2:DescAccident' of XML schema type 'eml21:String2000'
        std::string *DescAccident;
        /// Optional element 'witsml2:RemedialActionDesc' of XML schema type 'eml21:String2000'
        std::string *RemedialActionDesc;
        /// Optional element 'witsml2:CauseDesc' of XML schema type 'eml21:String2000'
        std::string *CauseDesc;
        /// Optional element 'witsml2:ETimLostGross' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLostGross;
        /// Optional element 'witsml2:CostLossGross' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostLossGross;
        /// Optional element 'witsml2:ResponsibleCompany' of XML schema type 'eml21:String64'
        std::string *ResponsibleCompany;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Incident
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Incident; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Incident, default initialized and not managed by a soap context
        virtual witsml2__Incident *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Incident); }
      public:
        /// Constructor with default initializations
        witsml2__Incident() : DTim(), Reporter(), NumMinorInjury(), NumMajorInjury(), NumFatality(), IsNearMiss(), DescLocation(), DescAccident(), RemedialActionDesc(), CauseDesc(), ETimLostGross(), CostLossGross(), ResponsibleCompany(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Incident() { }
        /// Friend allocator used by soap_new_witsml2__Incident(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Incident * SOAP_FMAC2 soap_instantiate_witsml2__Incident(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1675 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel (-723)
/* complex XML schema type 'witsml2:Personnel': */
class SOAP_CMAC witsml2__Personnel {
      public:
        /// Optional element 'witsml2:Company' of XML schema type 'eml21:String64'
        std::string *Company;
        /// Optional element 'witsml2:TypeService' of XML schema type 'eml21:String64'
        std::string *TypeService;
        /// Optional element 'witsml2:NumPeople' of XML schema type 'xsd:int'
        int *NumPeople;
        /// Optional element 'witsml2:TotalTime' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *TotalTime;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Personnel, default initialized and not managed by a soap context
        virtual witsml2__Personnel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Personnel); }
      public:
        /// Constructor with default initializations
        witsml2__Personnel() : Company(), TypeService(), NumPeople(), TotalTime(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Personnel() { }
        /// Friend allocator used by soap_new_witsml2__Personnel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Personnel * SOAP_FMAC2 soap_instantiate_witsml2__Personnel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1677 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft (-724)
/* complex XML schema type 'witsml2:SupportCraft': */
class SOAP_CMAC witsml2__SupportCraft {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:TypeSupportCraft' of XML schema type 'witsml2:SupportCraftType'
        enum witsml2__SupportCraftType TypeSupportCraft;
        /// Optional element 'witsml2:DTimArrived' of XML schema type 'eml21:TimeStamp'
        std::string *DTimArrived;
        /// Optional element 'witsml2:DTimDeparted' of XML schema type 'eml21:TimeStamp'
        std::string *DTimDeparted;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SupportCraft, default initialized and not managed by a soap context
        virtual witsml2__SupportCraft *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SupportCraft); }
      public:
        /// Constructor with default initializations
        witsml2__SupportCraft() : Name(), TypeSupportCraft(), DTimArrived(), DTimDeparted(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__SupportCraft() { }
        /// Friend allocator used by soap_new_witsml2__SupportCraft(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SupportCraft * SOAP_FMAC2 soap_instantiate_witsml2__SupportCraft(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1679 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Weather
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Weather (-725)
/* complex XML schema type 'witsml2:Weather': */
class SOAP_CMAC witsml2__Weather {
      public:
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Optional element 'witsml2:Agency' of XML schema type 'eml21:String64'
        std::string *Agency;
        /// Optional element 'witsml2:BarometricPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *BarometricPressure;
        /// Optional element 'witsml2:BeaufortScaleNumber' of XML schema type 'witsml2:BeaufortScaleIntegerCode'
        short *BeaufortScaleNumber;
        /// Optional element 'witsml2:TempSurfaceMn' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempSurfaceMn;
        /// Optional element 'witsml2:TempSurfaceMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempSurfaceMx;
        /// Optional element 'witsml2:TempWindChill' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempWindChill;
        /// Optional element 'witsml2:Tempsea' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Tempsea;
        /// Optional element 'witsml2:Visibility' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Visibility;
        /// Optional element 'witsml2:AziWave' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziWave;
        /// Optional element 'witsml2:HtWave' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtWave;
        /// Optional element 'witsml2:SignificantWave' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SignificantWave;
        /// Optional element 'witsml2:MaxWave' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MaxWave;
        /// Optional element 'witsml2:PeriodWave' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *PeriodWave;
        /// Optional element 'witsml2:AziWind' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziWind;
        /// Optional element 'witsml2:VelWind' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *VelWind;
        /// Optional element 'witsml2:TypePrecip' of XML schema type 'eml21:String64'
        std::string *TypePrecip;
        /// Optional element 'witsml2:AmtPrecip' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AmtPrecip;
        /// Optional element 'witsml2:CoverCloud' of XML schema type 'eml21:String64'
        std::string *CoverCloud;
        /// Optional element 'witsml2:CeilingCloud' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *CeilingCloud;
        /// Optional element 'witsml2:CurrentSea' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *CurrentSea;
        /// Optional element 'witsml2:AziCurrentSea' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziCurrentSea;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Weather
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Weather; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Weather, default initialized and not managed by a soap context
        virtual witsml2__Weather *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Weather); }
      public:
        /// Constructor with default initializations
        witsml2__Weather() : DTim(), Agency(), BarometricPressure(), BeaufortScaleNumber(), TempSurfaceMn(), TempSurfaceMx(), TempWindChill(), Tempsea(), Visibility(), AziWave(), HtWave(), SignificantWave(), MaxWave(), PeriodWave(), AziWind(), VelWind(), TypePrecip(), AmtPrecip(), CoverCloud(), CeilingCloud(), CurrentSea(), AziCurrentSea(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Weather() { }
        /// Friend allocator used by soap_new_witsml2__Weather(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Weather * SOAP_FMAC2 soap_instantiate_witsml2__Weather(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:33729 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractItemWtOrVolPerUnit_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractItemWtOrVolPerUnit_sequence (-1749)
/* Wrapper: */
class SOAP_CMAC __witsml2__AbstractItemWtOrVolPerUnit_sequence {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractItemWtOrVolPerUnit_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__AbstractItemWtOrVolPerUnit_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__AbstractItemWtOrVolPerUnit_sequence, default initialized and not managed by a soap context
        virtual __witsml2__AbstractItemWtOrVolPerUnit_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__AbstractItemWtOrVolPerUnit_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__AbstractItemWtOrVolPerUnit_sequence() { }
        virtual ~__witsml2__AbstractItemWtOrVolPerUnit_sequence() { }
        /// Friend allocator used by soap_new___witsml2__AbstractItemWtOrVolPerUnit_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__AbstractItemWtOrVolPerUnit_sequence * SOAP_FMAC2 soap_instantiate___witsml2__AbstractItemWtOrVolPerUnit_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1681 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit (-726)
/* complex XML schema type 'witsml2:AbstractItemWtOrVolPerUnit': */
class SOAP_CMAC witsml2__AbstractItemWtOrVolPerUnit {
      public:
        __witsml2__AbstractItemWtOrVolPerUnit_sequence *__AbstractItemWtOrVolPerUnit_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractItemWtOrVolPerUnit, default initialized and not managed by a soap context
        virtual witsml2__AbstractItemWtOrVolPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractItemWtOrVolPerUnit); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractItemWtOrVolPerUnit() : __AbstractItemWtOrVolPerUnit_sequence(), soap() { }
        virtual ~witsml2__AbstractItemWtOrVolPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__AbstractItemWtOrVolPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractItemWtOrVolPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__AbstractItemWtOrVolPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1687 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState (-729)
/* complex XML schema type 'witsml2:AnchorState': */
class SOAP_CMAC witsml2__AnchorState {
      public:
        /// Required element 'witsml2:AnchorName' of XML schema type 'eml21:String64'
        std::string AnchorName;
        /// Optional element 'witsml2:AnchorAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AnchorAngle;
        /// Optional element 'witsml2:AnchorTension' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *AnchorTension;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AnchorState, default initialized and not managed by a soap context
        virtual witsml2__AnchorState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AnchorState); }
      public:
        /// Constructor with default initializations
        witsml2__AnchorState() : AnchorName(), AnchorAngle(), AnchorTension(), Description(), soap() { }
        virtual ~witsml2__AnchorState() { }
        /// Friend allocator used by soap_new_witsml2__AnchorState(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AnchorState * SOAP_FMAC2 soap_instantiate_witsml2__AnchorState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1691 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost (-731)
/* complex XML schema type 'witsml2:DayCost': */
class SOAP_CMAC witsml2__DayCost {
      public:
        /// Optional element 'witsml2:NumAFE' of XML schema type 'eml21:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:CostGroup' of XML schema type 'eml21:String64'
        std::string *CostGroup;
        /// Required element 'witsml2:CostClass' of XML schema type 'eml21:String64'
        std::string CostClass;
        /// Required element 'witsml2:CostCode' of XML schema type 'eml21:String64'
        std::string CostCode;
        /// Optional element 'witsml2:CostSubCode' of XML schema type 'eml21:String64'
        std::string *CostSubCode;
        /// Optional element 'witsml2:CostItemDescription' of XML schema type 'eml21:String64'
        std::string *CostItemDescription;
        /// Optional element 'witsml2:ItemKind' of XML schema type 'eml21:UomEnum'
        std::string *ItemKind;
        /// Optional element 'witsml2:ItemSize' of XML schema type 'xsd:double'
        double *ItemSize;
        /// Optional element 'witsml2:QtyItem' of XML schema type 'xsd:int'
        int *QtyItem;
        /// Optional element 'witsml2:NumInvoice' of XML schema type 'eml21:String64'
        std::string *NumInvoice;
        /// Optional element 'witsml2:NumPO' of XML schema type 'eml21:String64'
        std::string *NumPO;
        /// Optional element 'witsml2:NumTicket' of XML schema type 'eml21:String64'
        std::string *NumTicket;
        /// Optional element 'witsml2:IsCarryOver' of XML schema type 'xsd:boolean'
        bool *IsCarryOver;
        /// Optional element 'witsml2:IsRental' of XML schema type 'xsd:boolean'
        bool *IsRental;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:NumSerial' of XML schema type 'eml21:String64'
        std::string *NumSerial;
        /// Optional element 'witsml2:NameVendor' of XML schema type 'eml21:String64'
        std::string *NameVendor;
        /// Optional element 'witsml2:NumVendor' of XML schema type 'eml21:String64'
        std::string *NumVendor;
        /// Optional element 'witsml2:Pool' of XML schema type 'eml21:String64'
        std::string *Pool;
        /// Optional element 'witsml2:Estimated' of XML schema type 'xsd:boolean'
        bool *Estimated;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:CostAmount' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostAmount;
        /// Optional element 'witsml2:CostPerItem' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostPerItem;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DayCost, default initialized and not managed by a soap context
        virtual witsml2__DayCost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DayCost); }
      public:
        /// Constructor with default initializations
        witsml2__DayCost() : NumAFE(), CostGroup(), CostClass(), CostCode(), CostSubCode(), CostItemDescription(), ItemKind(), ItemSize(), QtyItem(), NumInvoice(), NumPO(), NumTicket(), IsCarryOver(), IsRental(), NameTag(), NumSerial(), NameVendor(), NumVendor(), Pool(), Estimated(), ExtensionNameValue(), CostAmount(), CostPerItem(), uid(), soap() { }
        virtual ~witsml2__DayCost() { }
        /// Friend allocator used by soap_new_witsml2__DayCost(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DayCost * SOAP_FMAC2 soap_instantiate_witsml2__DayCost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1693 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Scr
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Scr (-732)
/* complex XML schema type 'witsml2:Scr': */
class SOAP_CMAC witsml2__Scr {
      public:
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Required element 'witsml2:Pump' of XML schema type 'xsd:int'
        int Pump;
        /// Required element 'witsml2:TypeScr' of XML schema type 'witsml2:ScrType'
        enum witsml2__ScrType TypeScr;
        /// Required element 'witsml2:RateStroke' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RateStroke;
        /// Required element 'witsml2:PresRecorded' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRecorded;
        /// Optional element 'witsml2:MdBit' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Scr
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Scr; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Scr, default initialized and not managed by a soap context
        virtual witsml2__Scr *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Scr); }
      public:
        /// Constructor with default initializations
        witsml2__Scr() : DTim(), Pump(), TypeScr(), RateStroke(), PresRecorded(), MdBit(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Scr() { }
        /// Friend allocator used by soap_new_witsml2__Scr(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Scr * SOAP_FMAC2 soap_instantiate_witsml2__Scr(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume (-733)
/* complex XML schema type 'witsml2:PitVolume': */
class SOAP_CMAC witsml2__PitVolume {
      public:
        /// Required element 'witsml2:Pit' of XML schema type 'xsd:int'
        int Pit;
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Required element 'witsml2:VolPit' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolPit;
        /// Optional element 'witsml2:DensFluid' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensFluid;
        /// Optional element 'witsml2:DescFluid' of XML schema type 'eml21:String64'
        std::string *DescFluid;
        /// Optional element 'witsml2:VisFunnel' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *VisFunnel;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PitVolume, default initialized and not managed by a soap context
        virtual witsml2__PitVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PitVolume); }
      public:
        /// Constructor with default initializations
        witsml2__PitVolume() : Pit(), DTim(), VolPit(), DensFluid(), DescFluid(), VisFunnel(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PitVolume() { }
        /// Friend allocator used by soap_new_witsml2__PitVolume(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PitVolume * SOAP_FMAC2 soap_instantiate_witsml2__PitVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1697 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume (-734)
/* complex XML schema type 'witsml2:MudVolume': */
class SOAP_CMAC witsml2__MudVolume {
      public:
        /// Optional element 'witsml2:VolTotMudStart' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTotMudStart;
        /// Optional element 'witsml2:VolMudDumped' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudDumped;
        /// Optional element 'witsml2:VolMudReceived' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudReceived;
        /// Optional element 'witsml2:VolMudReturned' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudReturned;
        /// Optional element 'witsml2:VolMudBuilt' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudBuilt;
        /// Optional element 'witsml2:VolMudString' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudString;
        /// Optional element 'witsml2:VolMudCasing' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudCasing;
        /// Optional element 'witsml2:VolMudHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudHole;
        /// Optional element 'witsml2:VolMudRiser' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudRiser;
        /// Optional element 'witsml2:VolTotMudEnd' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTotMudEnd;
        /// Optional element 'witsml2:MudLosses' of XML schema type 'witsml2:MudLosses'
        witsml2__MudLosses *MudLosses;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudVolume, default initialized and not managed by a soap context
        virtual witsml2__MudVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudVolume); }
      public:
        /// Constructor with default initializations
        witsml2__MudVolume() : VolTotMudStart(), VolMudDumped(), VolMudReceived(), VolMudReturned(), VolMudBuilt(), VolMudString(), VolMudCasing(), VolMudHole(), VolMudRiser(), VolTotMudEnd(), MudLosses(), soap() { }
        virtual ~witsml2__MudVolume() { }
        /// Friend allocator used by soap_new_witsml2__MudVolume(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudVolume * SOAP_FMAC2 soap_instantiate_witsml2__MudVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1699 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses (-735)
/* complex XML schema type 'witsml2:MudLosses': */
class SOAP_CMAC witsml2__MudLosses {
      public:
        /// Optional element 'witsml2:VolLostShakerSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostShakerSurf;
        /// Optional element 'witsml2:VolLostMudCleanerSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostMudCleanerSurf;
        /// Optional element 'witsml2:VolLostPitsSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostPitsSurf;
        /// Optional element 'witsml2:VolLostTrippingSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostTrippingSurf;
        /// Optional element 'witsml2:VolLostOtherSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostOtherSurf;
        /// Optional element 'witsml2:VolTotMudLostSurf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTotMudLostSurf;
        /// Optional element 'witsml2:VolLostCircHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostCircHole;
        /// Optional element 'witsml2:VolLostCsgHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostCsgHole;
        /// Optional element 'witsml2:VolLostCmtHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostCmtHole;
        /// Optional element 'witsml2:VolLostBhdCsgHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostBhdCsgHole;
        /// Optional element 'witsml2:VolLostAbandonHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostAbandonHole;
        /// Optional element 'witsml2:VolLostOtherHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolLostOtherHole;
        /// Optional element 'witsml2:VolTotMudLostHole' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolTotMudLostHole;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLosses, default initialized and not managed by a soap context
        virtual witsml2__MudLosses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLosses); }
      public:
        /// Constructor with default initializations
        witsml2__MudLosses() : VolLostShakerSurf(), VolLostMudCleanerSurf(), VolLostPitsSurf(), VolLostTrippingSurf(), VolLostOtherSurf(), VolTotMudLostSurf(), VolLostCircHole(), VolLostCsgHole(), VolLostCmtHole(), VolLostBhdCsgHole(), VolLostAbandonHole(), VolLostOtherHole(), VolTotMudLostHole(), soap() { }
        virtual ~witsml2__MudLosses() { }
        /// Friend allocator used by soap_new_witsml2__MudLosses(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLosses * SOAP_FMAC2 soap_instantiate_witsml2__MudLosses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1701 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory (-736)
/* complex XML schema type 'witsml2:Inventory': */
class SOAP_CMAC witsml2__Inventory {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:ItemWtOrVolPerUnit' of XML schema type 'witsml2:AbstractItemWtOrVolPerUnit'
        witsml2__AbstractItemWtOrVolPerUnit *ItemWtOrVolPerUnit;
        /// Optional element 'witsml2:PricePerUnit' of XML schema type 'witsml2:Cost'
        witsml2__Cost *PricePerUnit;
        /// Optional element 'witsml2:QtyStart' of XML schema type 'xsd:int'
        int *QtyStart;
        /// Optional element 'witsml2:QtyAdjustment' of XML schema type 'xsd:int'
        int *QtyAdjustment;
        /// Optional element 'witsml2:QtyReceived' of XML schema type 'xsd:int'
        int *QtyReceived;
        /// Optional element 'witsml2:QtyReturned' of XML schema type 'xsd:int'
        int *QtyReturned;
        /// Optional element 'witsml2:QtyUsed' of XML schema type 'xsd:int'
        int *QtyUsed;
        /// Optional element 'witsml2:CostItem' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostItem;
        /// Optional element 'witsml2:QtyOnLocation' of XML schema type 'xsd:int'
        int *QtyOnLocation;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Inventory, default initialized and not managed by a soap context
        virtual witsml2__Inventory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Inventory); }
      public:
        /// Constructor with default initializations
        witsml2__Inventory() : Name(), ItemWtOrVolPerUnit(), PricePerUnit(), QtyStart(), QtyAdjustment(), QtyReceived(), QtyReturned(), QtyUsed(), CostItem(), QtyOnLocation(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Inventory() { }
        /// Friend allocator used by soap_new_witsml2__Inventory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Inventory * SOAP_FMAC2 soap_instantiate_witsml2__Inventory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1703 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse (-737)
/* complex XML schema type 'witsml2:RigResponse': */
class SOAP_CMAC witsml2__RigResponse {
      public:
        /// Optional element 'witsml2:RigHeading' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RigHeading;
        /// Optional element 'witsml2:RigHeave' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RigHeave;
        /// Optional element 'witsml2:RigPitchAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RigPitchAngle;
        /// Optional element 'witsml2:RigRollAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RigRollAngle;
        /// Optional element 'witsml2:RiserAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RiserAngle;
        /// Optional element 'witsml2:RiserDirection' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RiserDirection;
        /// Optional element 'witsml2:RiserTension' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RiserTension;
        /// Optional element 'witsml2:VariableDeckLoad' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *VariableDeckLoad;
        /// Optional element 'witsml2:TotalDeckLoad' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *TotalDeckLoad;
        /// Optional element 'witsml2:GuideBaseAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *GuideBaseAngle;
        /// Optional element 'witsml2:BallJointAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BallJointAngle;
        /// Optional element 'witsml2:BallJointDirection' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BallJointDirection;
        /// Optional element 'witsml2:OffsetRig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OffsetRig;
        /// Optional element 'witsml2:LoadLeg1' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *LoadLeg1;
        /// Optional element 'witsml2:LoadLeg2' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *LoadLeg2;
        /// Optional element 'witsml2:LoadLeg3' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *LoadLeg3;
        /// Optional element 'witsml2:LoadLeg4' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *LoadLeg4;
        /// Optional element 'witsml2:PenetrationLeg1' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PenetrationLeg1;
        /// Optional element 'witsml2:PenetrationLeg2' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PenetrationLeg2;
        /// Optional element 'witsml2:PenetrationLeg3' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PenetrationLeg3;
        /// Optional element 'witsml2:PenetrationLeg4' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PenetrationLeg4;
        /// Optional element 'witsml2:DispRig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispRig;
        /// Optional element 'witsml2:MeanDraft' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MeanDraft;
        /// Optional element 'witsml2:AnchorState' of XML schema type 'witsml2:AnchorState'
        std::vector<witsml2__AnchorState *> AnchorState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RigResponse, default initialized and not managed by a soap context
        virtual witsml2__RigResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RigResponse); }
      public:
        /// Constructor with default initializations
        witsml2__RigResponse() : RigHeading(), RigHeave(), RigPitchAngle(), RigRollAngle(), RiserAngle(), RiserDirection(), RiserTension(), VariableDeckLoad(), TotalDeckLoad(), GuideBaseAngle(), BallJointAngle(), BallJointDirection(), OffsetRig(), LoadLeg1(), LoadLeg2(), LoadLeg3(), LoadLeg4(), PenetrationLeg1(), PenetrationLeg2(), PenetrationLeg3(), PenetrationLeg4(), DispRig(), MeanDraft(), AnchorState(), soap() { }
        virtual ~witsml2__RigResponse() { }
        /// Friend allocator used by soap_new_witsml2__RigResponse(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RigResponse * SOAP_FMAC2 soap_instantiate_witsml2__RigResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1705 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp (-738)
/* complex XML schema type 'witsml2:PumpOp': */
class SOAP_CMAC witsml2__PumpOp {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Required element 'witsml2:Pump' of XML schema type 'xsd:int'
        int Pump;
        /// Optional element 'witsml2:TypeOperation' of XML schema type 'witsml2:PumpOpType'
        enum witsml2__PumpOpType *TypeOperation;
        /// Optional element 'witsml2:IdLiner' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdLiner;
        /// Optional element 'witsml2:LenStroke' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenStroke;
        /// Required element 'witsml2:RateStroke' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RateStroke;
        /// Required element 'witsml2:Pressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pressure;
        /// Optional element 'witsml2:PcEfficiency' of XML schema type 'eml21:PowerPerPowerMeasure'
        eml21__PowerPerPowerMeasure *PcEfficiency;
        /// Optional element 'witsml2:PumpOutput' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *PumpOutput;
        /// Optional element 'witsml2:MdBit' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PumpOp, default initialized and not managed by a soap context
        virtual witsml2__PumpOp *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PumpOp); }
      public:
        /// Constructor with default initializations
        witsml2__PumpOp() : DTim(), Pump(), TypeOperation(), IdLiner(), LenStroke(), RateStroke(), Pressure(), PcEfficiency(), PumpOutput(), MdBit(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PumpOp() { }
        /// Friend allocator used by soap_new_witsml2__PumpOp(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PumpOp * SOAP_FMAC2 soap_instantiate_witsml2__PumpOp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1707 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp (-739)
/* complex XML schema type 'witsml2:ShakerOp': */
class SOAP_CMAC witsml2__ShakerOp {
      public:
        /// Required element 'witsml2:Shaker' of XML schema type 'eml21:String64'
        std::string Shaker;
        /// Optional element 'witsml2:MdHole' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:HoursRun' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *HoursRun;
        /// Optional element 'witsml2:PcScreenCovered' of XML schema type 'eml21:AreaPerAreaMeasure'
        eml21__AreaPerAreaMeasure *PcScreenCovered;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ShakerScreen' of XML schema type 'witsml2:ShakerScreen'
        witsml2__ShakerScreen *ShakerScreen;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShakerOp, default initialized and not managed by a soap context
        virtual witsml2__ShakerOp *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShakerOp); }
      public:
        /// Constructor with default initializations
        witsml2__ShakerOp() : Shaker(), MdHole(), DTim(), HoursRun(), PcScreenCovered(), ExtensionNameValue(), ShakerScreen(), uid(), soap() { }
        virtual ~witsml2__ShakerOp() { }
        /// Friend allocator used by soap_new_witsml2__ShakerOp(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShakerOp * SOAP_FMAC2 soap_instantiate_witsml2__ShakerOp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1711 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation (-741)
/* complex XML schema type 'witsml2:TrajectoryStation': */
class SOAP_CMAC witsml2__TrajectoryStation {
      public:
        /// Optional element 'witsml2:ManuallyEntered' of XML schema type 'xsd:boolean'
        bool *ManuallyEntered;
        /// Optional element 'witsml2:Target' of XML schema type 'eml21:String64'
        std::string *Target;
        /// Optional element 'witsml2:DTimStn' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStn;
        /// Required element 'witsml2:TypeTrajStation' of XML schema type 'witsml2:TrajStationType'
        enum witsml2__TrajStationType TypeTrajStation;
        /// Optional element 'witsml2:TypeSurveyTool' of XML schema type 'witsml2:TypeSurveyTool'
        enum witsml2__TypeSurveyTool *TypeSurveyTool;
        /// Optional element 'witsml2:CalcAlgorithm' of XML schema type 'witsml2:TrajStnCalcAlgorithm'
        enum witsml2__TrajStnCalcAlgorithm *CalcAlgorithm;
        /// Required element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Incl' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml2:Azi' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml2:Mtf' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Mtf;
        /// Optional element 'witsml2:Gtf' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Gtf;
        /// Optional element 'witsml2:DispNs' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispNs;
        /// Optional element 'witsml2:DispEw' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispEw;
        /// Optional element 'witsml2:VertSect' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *VertSect;
        /// Optional element 'witsml2:Dls' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml2:RateTurn' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *RateTurn;
        /// Optional element 'witsml2:RateBuild' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *RateBuild;
        /// Optional element 'witsml2:MdDelta' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdDelta;
        /// Optional element 'witsml2:TvdDelta' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdDelta;
        /// Optional element 'witsml2:GravTotalUncert' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalUncert;
        /// Optional element 'witsml2:DipAngleUncert' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipAngleUncert;
        /// Optional element 'witsml2:MagTotalUncert' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalUncert;
        /// Optional element 'witsml2:GravAccelCorUsed' of XML schema type 'xsd:boolean'
        bool *GravAccelCorUsed;
        /// Optional element 'witsml2:MagXAxialCorUsed' of XML schema type 'xsd:boolean'
        bool *MagXAxialCorUsed;
        /// Optional element 'witsml2:SagCorUsed' of XML schema type 'xsd:boolean'
        bool *SagCorUsed;
        /// Optional element 'witsml2:MagDrlstrCorUsed' of XML schema type 'xsd:boolean'
        bool *MagDrlstrCorUsed;
        /// Optional element 'witsml2:InfieldRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InfieldRefCorUsed;
        /// Optional element 'witsml2:InterpolatedInfieldRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InterpolatedInfieldRefCorUsed;
        /// Optional element 'witsml2:InHoleRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InHoleRefCorUsed;
        /// Optional element 'witsml2:AxialMagInterferenceCorUsed' of XML schema type 'xsd:boolean'
        bool *AxialMagInterferenceCorUsed;
        /// Optional element 'witsml2:CosagCorUsed' of XML schema type 'xsd:boolean'
        bool *CosagCorUsed;
        /// Optional element 'witsml2:MSACorUsed' of XML schema type 'xsd:boolean'
        bool *MSACorUsed;
        /// Optional element 'witsml2:GravTotalFieldReference' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalFieldReference;
        /// Optional element 'witsml2:MagTotalFieldReference' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalFieldReference;
        /// Optional element 'witsml2:MagDipAngleReference' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDipAngleReference;
        /// Optional element 'witsml2:MagModelUsed' of XML schema type 'eml21:String64'
        std::string *MagModelUsed;
        /// Optional element 'witsml2:MagModelValid' of XML schema type 'eml21:String64'
        std::string *MagModelValid;
        /// Optional element 'witsml2:GeoModelUsed' of XML schema type 'eml21:String64'
        std::string *GeoModelUsed;
        /// Optional element 'witsml2:StatusTrajStation' of XML schema type 'witsml2:TrajStationStatus'
        enum witsml2__TrajStationStatus *StatusTrajStation;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Valid' of XML schema type 'witsml2:StnTrajValid'
        witsml2__StnTrajValid *Valid;
        /// Optional element 'witsml2:MatrixCov' of XML schema type 'witsml2:StnTrajMatrixCov'
        witsml2__StnTrajMatrixCov *MatrixCov;
        /// Optional element 'witsml2:Location' of XML schema type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// Optional element 'witsml2:SourceStation' of XML schema type 'witsml2:RefWellboreTrajectoryStation'
        witsml2__RefWellboreTrajectoryStation *SourceStation;
        /// Optional element 'witsml2:RawData' of XML schema type 'witsml2:StnTrajRawData'
        witsml2__StnTrajRawData *RawData;
        /// Optional element 'witsml2:CorUsed' of XML schema type 'witsml2:StnTrajCorUsed'
        witsml2__StnTrajCorUsed *CorUsed;
        /// Optional element 'witsml2:IscwsaToolErrorModel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *IscwsaToolErrorModel;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TrajectoryStation, default initialized and not managed by a soap context
        virtual witsml2__TrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TrajectoryStation); }
      public:
        /// Constructor with default initializations
        witsml2__TrajectoryStation() : ManuallyEntered(), Target(), DTimStn(), TypeTrajStation(), TypeSurveyTool(), CalcAlgorithm(), Md(), Tvd(), Incl(), Azi(), Mtf(), Gtf(), DispNs(), DispEw(), VertSect(), Dls(), RateTurn(), RateBuild(), MdDelta(), TvdDelta(), GravTotalUncert(), DipAngleUncert(), MagTotalUncert(), GravAccelCorUsed(), MagXAxialCorUsed(), SagCorUsed(), MagDrlstrCorUsed(), InfieldRefCorUsed(), InterpolatedInfieldRefCorUsed(), InHoleRefCorUsed(), AxialMagInterferenceCorUsed(), CosagCorUsed(), MSACorUsed(), GravTotalFieldReference(), MagTotalFieldReference(), MagDipAngleReference(), MagModelUsed(), MagModelValid(), GeoModelUsed(), StatusTrajStation(), ExtensionNameValue(), Valid(), MatrixCov(), Location(), SourceStation(), RawData(), CorUsed(), IscwsaToolErrorModel(), uid(), soap() { }
        virtual ~witsml2__TrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml2__TrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml2__TrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1713 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData (-742)
/* complex XML schema type 'witsml2:StnTrajRawData': */
class SOAP_CMAC witsml2__StnTrajRawData {
      public:
        /// Optional element 'witsml2:GravAxialRaw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravAxialRaw;
        /// Optional element 'witsml2:GravTran1Raw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran1Raw;
        /// Optional element 'witsml2:GravTran2Raw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran2Raw;
        /// Optional element 'witsml2:MagAxialRaw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialRaw;
        /// Optional element 'witsml2:MagTran1Raw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1Raw;
        /// Optional element 'witsml2:MagTran2Raw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2Raw;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajRawData, default initialized and not managed by a soap context
        virtual witsml2__StnTrajRawData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajRawData); }
      public:
        /// Constructor with default initializations
        witsml2__StnTrajRawData() : GravAxialRaw(), GravTran1Raw(), GravTran2Raw(), MagAxialRaw(), MagTran1Raw(), MagTran2Raw(), soap() { }
        virtual ~witsml2__StnTrajRawData() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajRawData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajRawData * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajRawData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1715 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed (-743)
/* complex XML schema type 'witsml2:StnTrajCorUsed': */
class SOAP_CMAC witsml2__StnTrajCorUsed {
      public:
        /// Optional element 'witsml2:GravAxialAccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravAxialAccelCor;
        /// Optional element 'witsml2:GravTran1AccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran1AccelCor;
        /// Optional element 'witsml2:GravTran2AccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran2AccelCor;
        /// Optional element 'witsml2:MagAxialDrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialDrlstrCor;
        /// Optional element 'witsml2:MagTran1DrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1DrlstrCor;
        /// Optional element 'witsml2:MagTran2DrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2DrlstrCor;
        /// Optional element 'witsml2:MagTran1MSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1MSACor;
        /// Optional element 'witsml2:MagTran2MSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2MSACor;
        /// Optional element 'witsml2:MagAxialMSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialMSACor;
        /// Optional element 'witsml2:SagIncCor' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *SagIncCor;
        /// Optional element 'witsml2:SagAziCor' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *SagAziCor;
        /// Optional element 'witsml2:StnMagDeclUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *StnMagDeclUsed;
        /// Optional element 'witsml2:StnGridConUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *StnGridConUsed;
        /// Optional element 'witsml2:DirSensorOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DirSensorOffset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajCorUsed, default initialized and not managed by a soap context
        virtual witsml2__StnTrajCorUsed *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajCorUsed); }
      public:
        /// Constructor with default initializations
        witsml2__StnTrajCorUsed() : GravAxialAccelCor(), GravTran1AccelCor(), GravTran2AccelCor(), MagAxialDrlstrCor(), MagTran1DrlstrCor(), MagTran2DrlstrCor(), MagTran1MSACor(), MagTran2MSACor(), MagAxialMSACor(), SagIncCor(), SagAziCor(), StnMagDeclUsed(), StnGridConUsed(), DirSensorOffset(), soap() { }
        virtual ~witsml2__StnTrajCorUsed() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajCorUsed(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajCorUsed * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajCorUsed(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1717 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid (-744)
/* complex XML schema type 'witsml2:StnTrajValid': */
class SOAP_CMAC witsml2__StnTrajValid {
      public:
        /// Optional element 'witsml2:MagTotalFieldCalc' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalFieldCalc;
        /// Optional element 'witsml2:MagDipAngleCalc' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDipAngleCalc;
        /// Optional element 'witsml2:GravTotalFieldCalc' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalFieldCalc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajValid, default initialized and not managed by a soap context
        virtual witsml2__StnTrajValid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajValid); }
      public:
        /// Constructor with default initializations
        witsml2__StnTrajValid() : MagTotalFieldCalc(), MagDipAngleCalc(), GravTotalFieldCalc(), soap() { }
        virtual ~witsml2__StnTrajValid() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajValid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajValid * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajValid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1719 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov (-745)
/* complex XML schema type 'witsml2:StnTrajMatrixCov': */
class SOAP_CMAC witsml2__StnTrajMatrixCov {
      public:
        /// Optional element 'witsml2:VarianceNN' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNN;
        /// Optional element 'witsml2:VarianceNE' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNE;
        /// Optional element 'witsml2:VarianceNVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNVert;
        /// Optional element 'witsml2:VarianceEE' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceEE;
        /// Optional element 'witsml2:VarianceEVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceEVert;
        /// Optional element 'witsml2:VarianceVertVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceVertVert;
        /// Optional element 'witsml2:BiasN' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasN;
        /// Optional element 'witsml2:BiasE' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasE;
        /// Optional element 'witsml2:BiasVert' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasVert;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajMatrixCov, default initialized and not managed by a soap context
        virtual witsml2__StnTrajMatrixCov *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajMatrixCov); }
      public:
        /// Constructor with default initializations
        witsml2__StnTrajMatrixCov() : VarianceNN(), VarianceNE(), VarianceNVert(), VarianceEE(), VarianceEVert(), VarianceVertVert(), BiasN(), BiasE(), BiasVert(), soap() { }
        virtual ~witsml2__StnTrajMatrixCov() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajMatrixCov(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajMatrixCov * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajMatrixCov(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation (-746)
/* complex XML schema type 'witsml2:RefWellboreTrajectoryStation': */
class SOAP_CMAC witsml2__RefWellboreTrajectoryStation {
      public:
        /// Required element 'witsml2:StationReference' of XML schema type 'eml21:String64'
        std::string StationReference;
        /// Required element 'witsml2:TrajectoryParent' of XML schema type 'eml21:String64'
        std::string TrajectoryParent;
        /// Optional element 'witsml2:WellboreParent' of XML schema type 'eml21:String64'
        std::string *WellboreParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellboreTrajectoryStation, default initialized and not managed by a soap context
        virtual witsml2__RefWellboreTrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellboreTrajectoryStation); }
      public:
        /// Constructor with default initializations
        witsml2__RefWellboreTrajectoryStation() : StationReference(), TrajectoryParent(), WellboreParent(), soap() { }
        virtual ~witsml2__RefWellboreTrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml2__RefWellboreTrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellboreTrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml2__RefWellboreTrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1723 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition (-747)
/* complex XML schema type 'witsml2:IscwsaSurveyToolOperatingCondition': */
class SOAP_CMAC witsml2__IscwsaSurveyToolOperatingCondition {
      public:
        /// Optional element 'witsml2:Parameter' of XML schema type 'eml21:String64'
        std::string *Parameter;
        /// Optional element 'witsml2:Min' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Min;
        /// Optional element 'witsml2:Max' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Max;
        /// Optional element 'witsml2:Value' of XML schema type 'eml21:String64'
        std::string *Value;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaSurveyToolOperatingCondition, default initialized and not managed by a soap context
        virtual witsml2__IscwsaSurveyToolOperatingCondition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaSurveyToolOperatingCondition); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaSurveyToolOperatingCondition() : Parameter(), Min(), Max(), Value(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__IscwsaSurveyToolOperatingCondition() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaSurveyToolOperatingCondition(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaSurveyToolOperatingCondition * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaSurveyToolOperatingCondition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1725 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval (-748)
/* complex XML schema type 'witsml2:IscwsaSurveyToolOperatingInterval': */
class SOAP_CMAC witsml2__IscwsaSurveyToolOperatingInterval {
      public:
        /// Required element 'witsml2:Mode' of XML schema type 'witsml2:SurveyToolOperatingMode'
        enum witsml2__SurveyToolOperatingMode Mode;
        /// Required element 'witsml2:Start' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Start;
        /// Required element 'witsml2:End' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *End;
        /// Optional element 'witsml2:Speed' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *Speed;
        /// Optional element 'witsml2:SampleRate' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *SampleRate;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaSurveyToolOperatingInterval, default initialized and not managed by a soap context
        virtual witsml2__IscwsaSurveyToolOperatingInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaSurveyToolOperatingInterval); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaSurveyToolOperatingInterval() : Mode(), Start(), End(), Speed(), SampleRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__IscwsaSurveyToolOperatingInterval() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaSurveyToolOperatingInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaSurveyToolOperatingInterval * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaSurveyToolOperatingInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1727 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters (-749)
/* complex XML schema type 'witsml2:IscwsaModelParameters': */
class SOAP_CMAC witsml2__IscwsaModelParameters {
      public:
        /// Required element 'witsml2:MisalignmentMode' of XML schema type 'witsml2:ErrorModelMisalignmentMode'
        enum witsml2__ErrorModelMisalignmentMode MisalignmentMode;
        /// Optional element 'witsml2:GyroInitialization' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *GyroInitialization;
        /// Optional element 'witsml2:GyroReinitializationDistance' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GyroReinitializationDistance;
        /// Optional element 'witsml2:Switching' of XML schema type 'xsd:boolean'
        bool *Switching;
        /// Optional element 'witsml2:NoiseReductionFactor' of XML schema type 'xsd:double'
        double *NoiseReductionFactor;
        /// Optional element 'witsml2:GyroRunningSpeed' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *GyroRunningSpeed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaModelParameters, default initialized and not managed by a soap context
        virtual witsml2__IscwsaModelParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaModelParameters); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaModelParameters() : MisalignmentMode(), GyroInitialization(), GyroReinitializationDistance(), Switching(), NoiseReductionFactor(), GyroRunningSpeed(), soap() { }
        virtual ~witsml2__IscwsaModelParameters() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaModelParameters(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaModelParameters * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaModelParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1729 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue (-750)
/* complex XML schema type 'witsml2:IscwsaErrorTermValue': */
class SOAP_CMAC witsml2__IscwsaErrorTermValue {
      public:
        /// Required element 'witsml2:Term' of XML schema type 'eml21:String64'
        std::string Term;
        /// Required element 'witsml2:Prop' of XML schema type 'witsml2:ErrorPropagationMode'
        enum witsml2__ErrorPropagationMode Prop;
        /// Optional element 'witsml2:Bias' of XML schema type 'xsd:double'
        double *Bias;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml2:Value' of XML schema type 'witsml2:MeasureOrQuantity'
        witsml2__MeasureOrQuantity *Value;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaErrorTermValue, default initialized and not managed by a soap context
        virtual witsml2__IscwsaErrorTermValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaErrorTermValue); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaErrorTermValue() : Term(), Prop(), Bias(), Comment(), ExtensionNameValue(), Value(), uid(), soap() { }
        virtual ~witsml2__IscwsaErrorTermValue() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaErrorTermValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaErrorTermValue * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaErrorTermValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1735 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData (-753)
/* complex XML schema type 'witsml2:IscwsaAuthorizationData': */
class SOAP_CMAC witsml2__IscwsaAuthorizationData {
      public:
        /// Optional element 'witsml2:Author' of XML schema type 'eml21:String64'
        std::string *Author;
        /// Optional element 'witsml2:Source' of XML schema type 'eml21:String64'
        std::string *Source;
        /// Required element 'witsml2:Authority' of XML schema type 'eml21:String64'
        std::string Authority;
        /// Required element 'witsml2:Status' of XML schema type 'witsml2:AuthorizationStatus'
        enum witsml2__AuthorizationStatus Status;
        /// Optional element 'witsml2:Version' of XML schema type 'eml21:String64'
        std::string *Version;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaAuthorizationData, default initialized and not managed by a soap context
        virtual witsml2__IscwsaAuthorizationData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaAuthorizationData); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaAuthorizationData() : Author(), Source(), Authority(), Status(), Version(), Comment(), soap() { }
        virtual ~witsml2__IscwsaAuthorizationData() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaAuthorizationData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaAuthorizationData * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaAuthorizationData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1739 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Bop
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Bop (-755)
/* complex XML schema type 'witsml2:Bop': */
class SOAP_CMAC witsml2__Bop {
      public:
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:TypeConnectionBop' of XML schema type 'eml21:String64'
        std::string *TypeConnectionBop;
        /// Optional element 'witsml2:SizeConnectionBop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeConnectionBop;
        /// Required element 'witsml2:PresBopRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBopRating;
        /// Required element 'witsml2:SizeBopSys' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeBopSys;
        /// Optional element 'witsml2:RotBop' of XML schema type 'xsd:boolean'
        bool *RotBop;
        /// Optional element 'witsml2:IdBoosterLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdBoosterLine;
        /// Optional element 'witsml2:OdBoosterLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdBoosterLine;
        /// Optional element 'witsml2:LenBoosterLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBoosterLine;
        /// Optional element 'witsml2:IdSurfLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdSurfLine;
        /// Optional element 'witsml2:OdSurfLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdSurfLine;
        /// Optional element 'witsml2:LenSurfLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenSurfLine;
        /// Optional element 'witsml2:IdChkLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdChkLine;
        /// Optional element 'witsml2:OdChkLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdChkLine;
        /// Optional element 'witsml2:LenChkLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenChkLine;
        /// Optional element 'witsml2:IdKillLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdKillLine;
        /// Optional element 'witsml2:OdKillLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdKillLine;
        /// Optional element 'witsml2:LenKillLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenKillLine;
        /// Optional element 'witsml2:TypeDiverter' of XML schema type 'eml21:String64'
        std::string *TypeDiverter;
        /// Optional element 'witsml2:DiaDiverter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaDiverter;
        /// Optional element 'witsml2:PresWorkDiverter' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresWorkDiverter;
        /// Optional element 'witsml2:Accumulator' of XML schema type 'eml21:String64'
        std::string *Accumulator;
        /// Optional element 'witsml2:CapAccFluid' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapAccFluid;
        /// Optional element 'witsml2:PresAccPreCharge' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresAccPreCharge;
        /// Optional element 'witsml2:VolAccPreCharge' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolAccPreCharge;
        /// Optional element 'witsml2:PresAccOpRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresAccOpRating;
        /// Optional element 'witsml2:TypeControlManifold' of XML schema type 'eml21:String64'
        std::string *TypeControlManifold;
        /// Optional element 'witsml2:DescControlManifold' of XML schema type 'eml21:String2000'
        std::string *DescControlManifold;
        /// Optional element 'witsml2:TypeChokeManifold' of XML schema type 'eml21:String64'
        std::string *TypeChokeManifold;
        /// Optional element 'witsml2:PresChokeManifold' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresChokeManifold;
        /// Optional element 'witsml2:BopComponent' of XML schema type 'witsml2:BopComponent'
        std::vector<witsml2__BopComponent *> BopComponent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Bop
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Bop; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Bop, default initialized and not managed by a soap context
        virtual witsml2__Bop *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Bop); }
      public:
        /// Constructor with default initializations
        witsml2__Bop() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), NameTag(), TypeConnectionBop(), SizeConnectionBop(), PresBopRating(), SizeBopSys(), RotBop(), IdBoosterLine(), OdBoosterLine(), LenBoosterLine(), IdSurfLine(), OdSurfLine(), LenSurfLine(), IdChkLine(), OdChkLine(), LenChkLine(), IdKillLine(), OdKillLine(), LenKillLine(), TypeDiverter(), DiaDiverter(), PresWorkDiverter(), Accumulator(), CapAccFluid(), PresAccPreCharge(), VolAccPreCharge(), PresAccOpRating(), TypeControlManifold(), DescControlManifold(), TypeChokeManifold(), PresChokeManifold(), BopComponent(), soap() { }
        virtual ~witsml2__Bop() { }
        /// Friend allocator used by soap_new_witsml2__Bop(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Bop * SOAP_FMAC2 soap_instantiate_witsml2__Bop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1741 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent (-756)
/* complex XML schema type 'witsml2:BopComponent': */
class SOAP_CMAC witsml2__BopComponent {
      public:
        /// Optional element 'witsml2:TypeBopComp' of XML schema type 'witsml2:BopType'
        enum witsml2__BopType *TypeBopComp;
        /// Optional element 'witsml2:DescComp' of XML schema type 'eml21:String64'
        std::string *DescComp;
        /// Optional element 'witsml2:IdPassThru' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdPassThru;
        /// Optional element 'witsml2:PresWork' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresWork;
        /// Optional element 'witsml2:DiaCloseMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCloseMn;
        /// Optional element 'witsml2:DiaCloseMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCloseMx;
        /// Optional element 'witsml2:Nomenclature' of XML schema type 'eml21:String64'
        std::string *Nomenclature;
        /// Optional element 'witsml2:IsVariable' of XML schema type 'xsd:boolean'
        bool *IsVariable;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BopComponent, default initialized and not managed by a soap context
        virtual witsml2__BopComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BopComponent); }
      public:
        /// Constructor with default initializations
        witsml2__BopComponent() : TypeBopComp(), DescComp(), IdPassThru(), PresWork(), DiaCloseMn(), DiaCloseMx(), Nomenclature(), IsVariable(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__BopComponent() { }
        /// Friend allocator used by soap_new_witsml2__BopComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BopComponent * SOAP_FMAC2 soap_instantiate_witsml2__BopComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1743 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Pit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Pit (-757)
/* complex XML schema type 'witsml2:Pit': */
class SOAP_CMAC witsml2__Pit {
      public:
        /// Required element 'witsml2:Index' of XML schema type 'xsd:int'
        int Index;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Required element 'witsml2:CapMx' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapMx;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypePit' of XML schema type 'witsml2:PitType'
        enum witsml2__PitType *TypePit;
        /// Optional element 'witsml2:IsActive' of XML schema type 'xsd:boolean'
        bool *IsActive;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Pit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Pit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Pit, default initialized and not managed by a soap context
        virtual witsml2__Pit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Pit); }
      public:
        /// Constructor with default initializations
        witsml2__Pit() : Index(), DTimInstall(), DTimRemove(), CapMx(), Owner(), TypePit(), IsActive(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Pit() { }
        /// Friend allocator used by soap_new_witsml2__Pit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Pit * SOAP_FMAC2 soap_instantiate_witsml2__Pit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1745 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump (-758)
/* complex XML schema type 'witsml2:MudPump': */
class SOAP_CMAC witsml2__MudPump {
      public:
        /// Required element 'witsml2:Index' of XML schema type 'xsd:int'
        int Index;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypePump' of XML schema type 'witsml2:PumpType'
        enum witsml2__PumpType *TypePump;
        /// Optional element 'witsml2:NumCyl' of XML schema type 'xsd:int'
        int *NumCyl;
        /// Optional element 'witsml2:OdRod' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdRod;
        /// Required element 'witsml2:IdLiner' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdLiner;
        /// Optional element 'witsml2:PumpAction' of XML schema type 'witsml2:PumpActionIntegerCode'
        short *PumpAction;
        /// Optional element 'witsml2:Eff' of XML schema type 'eml21:PowerPerPowerMeasure'
        eml21__PowerPerPowerMeasure *Eff;
        /// Optional element 'witsml2:LenStroke' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenStroke;
        /// Optional element 'witsml2:PresMx' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresMx;
        /// Optional element 'witsml2:PowHydMx' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *PowHydMx;
        /// Optional element 'witsml2:SpmMx' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *SpmMx;
        /// Required element 'witsml2:Displacement' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Displacement;
        /// Optional element 'witsml2:PresDamp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresDamp;
        /// Optional element 'witsml2:VolDamp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolDamp;
        /// Optional element 'witsml2:PowMechMx' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *PowMechMx;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudPump, default initialized and not managed by a soap context
        virtual witsml2__MudPump *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudPump); }
      public:
        /// Constructor with default initializations
        witsml2__MudPump() : Index(), Manufacturer(), Model(), DTimInstall(), DTimRemove(), Owner(), TypePump(), NumCyl(), OdRod(), IdLiner(), PumpAction(), Eff(), LenStroke(), PresMx(), PowHydMx(), SpmMx(), Displacement(), PresDamp(), VolDamp(), PowMechMx(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__MudPump() { }
        /// Friend allocator used by soap_new_witsml2__MudPump(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudPump * SOAP_FMAC2 soap_instantiate_witsml2__MudPump(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1747 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker (-759)
/* complex XML schema type 'witsml2:Shaker': */
class SOAP_CMAC witsml2__Shaker {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:LocationShaker' of XML schema type 'eml21:String64'
        std::string *LocationShaker;
        /// Optional element 'witsml2:NumDecks' of XML schema type 'xsd:int'
        int *NumDecks;
        /// Optional element 'witsml2:NumCascLevel' of XML schema type 'xsd:int'
        int *NumCascLevel;
        /// Optional element 'witsml2:MudCleaner' of XML schema type 'xsd:boolean'
        bool *MudCleaner;
        /// Optional element 'witsml2:CapFlow' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:SizeMeshMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeMeshMn;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Shaker, default initialized and not managed by a soap context
        virtual witsml2__Shaker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Shaker); }
      public:
        /// Constructor with default initializations
        witsml2__Shaker() : Name(), Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), LocationShaker(), NumDecks(), NumCascLevel(), MudCleaner(), CapFlow(), Owner(), SizeMeshMn(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Shaker() { }
        /// Friend allocator used by soap_new_witsml2__Shaker(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Shaker * SOAP_FMAC2 soap_instantiate_witsml2__Shaker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1749 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge (-760)
/* complex XML schema type 'witsml2:Centrifuge': */
class SOAP_CMAC witsml2__Centrifuge {
      public:
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:CapFlow' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Centrifuge, default initialized and not managed by a soap context
        virtual witsml2__Centrifuge *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Centrifuge); }
      public:
        /// Constructor with default initializations
        witsml2__Centrifuge() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), CapFlow(), Owner(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Centrifuge() { }
        /// Friend allocator used by soap_new_witsml2__Centrifuge(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Centrifuge * SOAP_FMAC2 soap_instantiate_witsml2__Centrifuge(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1751 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone (-761)
/* complex XML schema type 'witsml2:Hydrocyclone': */
class SOAP_CMAC witsml2__Hydrocyclone {
      public:
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:DescCone' of XML schema type 'eml21:String64'
        std::string *DescCone;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Hydrocyclone, default initialized and not managed by a soap context
        virtual witsml2__Hydrocyclone *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Hydrocyclone); }
      public:
        /// Constructor with default initializations
        witsml2__Hydrocyclone() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), DescCone(), Owner(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Hydrocyclone() { }
        /// Friend allocator used by soap_new_witsml2__Hydrocyclone(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Hydrocyclone * SOAP_FMAC2 soap_instantiate_witsml2__Hydrocyclone(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1753 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser (-762)
/* complex XML schema type 'witsml2:Degasser': */
class SOAP_CMAC witsml2__Degasser {
      public:
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XML schema type 'eml21:TimeStamp'
        std::string *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRemove;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:Height' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Height;
        /// Optional element 'witsml2:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml2:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml2:CapFlow' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:AreaSeparatorFlow' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *AreaSeparatorFlow;
        /// Optional element 'witsml2:HtMudSeal' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtMudSeal;
        /// Optional element 'witsml2:IdInlet' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdInlet;
        /// Optional element 'witsml2:IdVentLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdVentLine;
        /// Optional element 'witsml2:LenVentLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenVentLine;
        /// Optional element 'witsml2:CapGasSep' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *CapGasSep;
        /// Optional element 'witsml2:CapBlowdown' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *CapBlowdown;
        /// Optional element 'witsml2:PresRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRating;
        /// Optional element 'witsml2:TempRating' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempRating;
        /// Optional element 'witsml2:NameTag' of XML schema type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Degasser, default initialized and not managed by a soap context
        virtual witsml2__Degasser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Degasser); }
      public:
        /// Constructor with default initializations
        witsml2__Degasser() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), Owner(), Height(), Len(), Id(), CapFlow(), AreaSeparatorFlow(), HtMudSeal(), IdInlet(), IdVentLine(), LenVentLine(), CapGasSep(), CapBlowdown(), PresRating(), TempRating(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Degasser() { }
        /// Friend allocator used by soap_new_witsml2__Degasser(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Degasser * SOAP_FMAC2 soap_instantiate_witsml2__Degasser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1755 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment (-763)
/* complex XML schema type 'witsml2:SurfaceEquipment': */
class SOAP_CMAC witsml2__SurfaceEquipment {
      public:
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:PresRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRating;
        /// Required element 'witsml2:TypeSurfEquip' of XML schema type 'witsml2:SurfEquipType'
        enum witsml2__SurfEquipType TypeSurfEquip;
        /// Optional element 'witsml2:UsePumpDischarge' of XML schema type 'xsd:boolean'
        bool *UsePumpDischarge;
        /// Optional element 'witsml2:UseStandpipe' of XML schema type 'xsd:boolean'
        bool *UseStandpipe;
        /// Optional element 'witsml2:UseHose' of XML schema type 'xsd:boolean'
        bool *UseHose;
        /// Optional element 'witsml2:UseSwivel' of XML schema type 'xsd:boolean'
        bool *UseSwivel;
        /// Optional element 'witsml2:UseKelly' of XML schema type 'xsd:boolean'
        bool *UseKelly;
        /// Optional element 'witsml2:UseTopStack' of XML schema type 'xsd:boolean'
        bool *UseTopStack;
        /// Optional element 'witsml2:UseInjStack' of XML schema type 'xsd:boolean'
        bool *UseInjStack;
        /// Optional element 'witsml2:UseSurfaceIron' of XML schema type 'xsd:boolean'
        bool *UseSurfaceIron;
        /// Optional element 'witsml2:IdStandpipe' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdStandpipe;
        /// Optional element 'witsml2:LenStandpipe' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenStandpipe;
        /// Optional element 'witsml2:IdHose' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdHose;
        /// Optional element 'witsml2:LenHose' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenHose;
        /// Optional element 'witsml2:IdSwivel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdSwivel;
        /// Optional element 'witsml2:LenSwivel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenSwivel;
        /// Optional element 'witsml2:IdKelly' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdKelly;
        /// Optional element 'witsml2:LenKelly' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenKelly;
        /// Optional element 'witsml2:IdSurfaceIron' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdSurfaceIron;
        /// Optional element 'witsml2:LenSurfaceIron' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenSurfaceIron;
        /// Optional element 'witsml2:HtSurfaceIron' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtSurfaceIron;
        /// Optional element 'witsml2:IdDischargeLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdDischargeLine;
        /// Optional element 'witsml2:LenDischargeLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenDischargeLine;
        /// Optional element 'witsml2:CtWrapType' of XML schema type 'eml21:String64'
        std::string *CtWrapType;
        /// Optional element 'witsml2:OdReel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdReel;
        /// Optional element 'witsml2:OdCore' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdCore;
        /// Optional element 'witsml2:WidReelWrap' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *WidReelWrap;
        /// Optional element 'witsml2:LenReel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenReel;
        /// Optional element 'witsml2:InjStkUp' of XML schema type 'xsd:boolean'
        bool *InjStkUp;
        /// Optional element 'witsml2:HtInjStk' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtInjStk;
        /// Optional element 'witsml2:UmbInside' of XML schema type 'xsd:boolean'
        bool *UmbInside;
        /// Optional element 'witsml2:OdUmbilical' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdUmbilical;
        /// Optional element 'witsml2:LenUmbilical' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenUmbilical;
        /// Optional element 'witsml2:IdTopStk' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdTopStk;
        /// Optional element 'witsml2:HtTopStk' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtTopStk;
        /// Optional element 'witsml2:HtFlange' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtFlange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurfaceEquipment, default initialized and not managed by a soap context
        virtual witsml2__SurfaceEquipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurfaceEquipment); }
      public:
        /// Constructor with default initializations
        witsml2__SurfaceEquipment() : Description(), PresRating(), TypeSurfEquip(), UsePumpDischarge(), UseStandpipe(), UseHose(), UseSwivel(), UseKelly(), UseTopStack(), UseInjStack(), UseSurfaceIron(), IdStandpipe(), LenStandpipe(), IdHose(), LenHose(), IdSwivel(), LenSwivel(), IdKelly(), LenKelly(), IdSurfaceIron(), LenSurfaceIron(), HtSurfaceIron(), IdDischargeLine(), LenDischargeLine(), CtWrapType(), OdReel(), OdCore(), WidReelWrap(), LenReel(), InjStkUp(), HtInjStk(), UmbInside(), OdUmbilical(), LenUmbilical(), IdTopStk(), HtTopStk(), HtFlange(), soap() { }
        virtual ~witsml2__SurfaceEquipment() { }
        /// Friend allocator used by soap_new_witsml2__SurfaceEquipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurfaceEquipment * SOAP_FMAC2 soap_instantiate_witsml2__SurfaceEquipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1761 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular (-766)
/* complex XML schema type 'witsml2:StimTubular': */
class SOAP_CMAC witsml2__StimTubular {
      public:
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml2:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml2:Weight' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *Weight;
        /// Optional element 'witsml2:TubularMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *TubularMdInterval;
        /// Optional element 'witsml2:TubularTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TubularTvdInterval;
        /// Optional element 'witsml2:VolumeFactor' of XML schema type 'eml21:VolumePerLengthMeasure'
        eml21__VolumePerLengthMeasure *VolumeFactor;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimTubular, default initialized and not managed by a soap context
        virtual witsml2__StimTubular *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimTubular); }
      public:
        /// Constructor with default initializations
        witsml2__StimTubular() : Type(), Id(), Od(), Weight(), TubularMdInterval(), TubularTvdInterval(), VolumeFactor(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimTubular() { }
        /// Friend allocator used by soap_new_witsml2__StimTubular(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimTubular * SOAP_FMAC2 soap_instantiate_witsml2__StimTubular(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1763 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval (-767)
/* complex XML schema type 'witsml2:StimReservoirInterval': */
class SOAP_CMAC witsml2__StimReservoirInterval {
      public:
        /// Optional element 'witsml2:LithMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *LithMdInterval;
        /// Optional element 'witsml2:LithFormationPermeability' of XML schema type 'eml21:PermeabilityRockMeasure'
        eml21__PermeabilityRockMeasure *LithFormationPermeability;
        /// Optional element 'witsml2:LithYoungsModulus' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *LithYoungsModulus;
        /// Optional element 'witsml2:LithPorePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *LithPorePres;
        /// Optional element 'witsml2:LithNetPayThickness' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LithNetPayThickness;
        /// Optional element 'witsml2:LithName' of XML schema type 'eml21:String2000'
        std::string *LithName;
        /// Optional element 'witsml2:GrossPayMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *GrossPayMdInterval;
        /// Optional element 'witsml2:GrossPayThickness' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GrossPayThickness;
        /// Optional element 'witsml2:NetPayThickness' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *NetPayThickness;
        /// Optional element 'witsml2:NetPayPorePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *NetPayPorePres;
        /// Optional element 'witsml2:NetPayFluidCompressibility' of XML schema type 'eml21:IsothermalCompressibilityMeasure'
        eml21__IsothermalCompressibilityMeasure *NetPayFluidCompressibility;
        /// Optional element 'witsml2:NetPayFluidViscosity' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *NetPayFluidViscosity;
        /// Optional element 'witsml2:NetPayName' of XML schema type 'eml21:String2000'
        std::string *NetPayName;
        /// Optional element 'witsml2:NetPayFormationPermeability' of XML schema type 'eml21:PermeabilityRockMeasure'
        eml21__PermeabilityRockMeasure *NetPayFormationPermeability;
        /// Optional element 'witsml2:LithPoissonsRatio' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *LithPoissonsRatio;
        /// Optional element 'witsml2:NetPayFormationPorosity' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NetPayFormationPorosity;
        /// Optional element 'witsml2:FormationPermeability' of XML schema type 'eml21:PermeabilityRockMeasure'
        eml21__PermeabilityRockMeasure *FormationPermeability;
        /// Optional element 'witsml2:FormationPorosity' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *FormationPorosity;
        /// Optional element 'witsml2:NameFormation' of XML schema type 'eml21:String2000'
        std::string *NameFormation;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimReservoirInterval, default initialized and not managed by a soap context
        virtual witsml2__StimReservoirInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimReservoirInterval); }
      public:
        /// Constructor with default initializations
        witsml2__StimReservoirInterval() : LithMdInterval(), LithFormationPermeability(), LithYoungsModulus(), LithPorePres(), LithNetPayThickness(), LithName(), GrossPayMdInterval(), GrossPayThickness(), NetPayThickness(), NetPayPorePres(), NetPayFluidCompressibility(), NetPayFluidViscosity(), NetPayName(), NetPayFormationPermeability(), LithPoissonsRatio(), NetPayFormationPorosity(), FormationPermeability(), FormationPorosity(), NameFormation(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimReservoirInterval() { }
        /// Friend allocator used by soap_new_witsml2__StimReservoirInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimReservoirInterval * SOAP_FMAC2 soap_instantiate_witsml2__StimReservoirInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1765 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest (-768)
/* complex XML schema type 'witsml2:StimPumpFlowBackTest': */
class SOAP_CMAC witsml2__StimPumpFlowBackTest {
      public:
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:FlowBackVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FlowBackVolume;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:FractureCloseDuration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *FractureCloseDuration;
        /// Optional element 'witsml2:PresCasing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCasing;
        /// Optional element 'witsml2:PresTubing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTubing;
        /// Optional element 'witsml2:FractureClosePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Step' of XML schema type 'witsml2:StimPumpFlowBackTestStep'
        std::vector<witsml2__StimPumpFlowBackTestStep *> Step;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPumpFlowBackTest, default initialized and not managed by a soap context
        virtual witsml2__StimPumpFlowBackTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPumpFlowBackTest); }
      public:
        /// Constructor with default initializations
        witsml2__StimPumpFlowBackTest() : DTimEnd(), FlowBackVolume(), DTimStart(), FractureCloseDuration(), PresCasing(), PresTubing(), FractureClosePres(), ExtensionNameValue(), Step(), uid(), soap() { }
        virtual ~witsml2__StimPumpFlowBackTest() { }
        /// Friend allocator used by soap_new_witsml2__StimPumpFlowBackTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPumpFlowBackTest * SOAP_FMAC2 soap_instantiate_witsml2__StimPumpFlowBackTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1769 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath (-770)
/* complex XML schema type 'witsml2:StimFlowPath': */
class SOAP_CMAC witsml2__StimFlowPath {
      public:
        /// Optional element 'witsml2:AvgPmaxPacPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPmaxPacPres;
        /// Optional element 'witsml2:FrictionFactorOpenHole' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *FrictionFactorOpenHole;
        /// Optional element 'witsml2:AvgPmaxWeaklinkPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPmaxWeaklinkPres;
        /// Optional element 'witsml2:BreakDownPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *BreakDownPres;
        /// Optional element 'witsml2:BridgePlugMD' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *BridgePlugMD;
        /// Optional element 'witsml2:FractureGradient' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradient;
        /// Optional element 'witsml2:Kind' of XML schema type 'witsml2:StimFlowPathType'
        enum witsml2__StimFlowPathType *Kind;
        /// Optional element 'witsml2:MaxPmaxPacPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPmaxPacPres;
        /// Optional element 'witsml2:MaxPmaxWeaklinkPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPmaxWeaklinkPres;
        /// Optional element 'witsml2:PackerMD' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *PackerMD;
        /// Optional element 'witsml2:FrictionFactorPipe' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *FrictionFactorPipe;
        /// Optional element 'witsml2:TubingBottomMD' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *TubingBottomMD;
        /// Optional element 'witsml2:Tubular' of XML schema type 'witsml2:StimTubular'
        std::vector<witsml2__StimTubular *> Tubular;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFlowPath, default initialized and not managed by a soap context
        virtual witsml2__StimFlowPath *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFlowPath); }
      public:
        /// Constructor with default initializations
        witsml2__StimFlowPath() : AvgPmaxPacPres(), FrictionFactorOpenHole(), AvgPmaxWeaklinkPres(), BreakDownPres(), BridgePlugMD(), FractureGradient(), Kind(), MaxPmaxPacPres(), MaxPmaxWeaklinkPres(), PackerMD(), FrictionFactorPipe(), TubingBottomMD(), Tubular(), soap() { }
        virtual ~witsml2__StimFlowPath() { }
        /// Friend allocator used by soap_new_witsml2__StimFlowPath(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFlowPath * SOAP_FMAC2 soap_instantiate_witsml2__StimFlowPath(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1771 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid (-771)
/* complex XML schema type 'witsml2:StimFluid': */
class SOAP_CMAC witsml2__StimFluid {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String2000'
        std::string *Name;
        /// Optional element 'witsml2:Kind' of XML schema type 'witsml2:StimFluidKind'
        enum witsml2__StimFluidKind *Kind;
        /// Optional element 'witsml2:Subtype' of XML schema type 'witsml2:StimFluidSubtype'
        enum witsml2__StimFluidSubtype *Subtype;
        /// Optional element 'witsml2:Purpose' of XML schema type 'eml21:String2000'
        std::string *Purpose;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:Supplier' of XML schema type 'eml21:String2000'
        std::string *Supplier;
        /// Optional element 'witsml2:IsKillFluid' of XML schema type 'xsd:boolean'
        bool *IsKillFluid;
        /// Optional element 'witsml2:Volume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Volume;
        /// Optional element 'witsml2:Density' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:FluidTemp' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *FluidTemp;
        /// Optional element 'witsml2:GelStrength10Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *GelStrength10Min;
        /// Optional element 'witsml2:GelStrength10Sec' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *GelStrength10Sec;
        /// Optional element 'witsml2:SpecificGravity' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *SpecificGravity;
        /// Optional element 'witsml2:Viscosity' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *Viscosity;
        /// Optional element 'witsml2:pH' of XML schema type 'eml21:UnitlessMeasure'
        eml21__UnitlessMeasure *pH;
        /// Optional element 'witsml2:AdditiveConcentration' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AdditiveConcentration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFluid, default initialized and not managed by a soap context
        virtual witsml2__StimFluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFluid); }
      public:
        /// Constructor with default initializations
        witsml2__StimFluid() : Name(), Kind(), Subtype(), Purpose(), Description(), Supplier(), IsKillFluid(), Volume(), Density(), FluidTemp(), GelStrength10Min(), GelStrength10Sec(), SpecificGravity(), Viscosity(), pH(), AdditiveConcentration(), soap() { }
        virtual ~witsml2__StimFluid() { }
        /// Friend allocator used by soap_new_witsml2__StimFluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFluid * SOAP_FMAC2 soap_instantiate_witsml2__StimFluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep (-772)
/* complex XML schema type 'witsml2:StimPumpFlowBackTestStep': */
class SOAP_CMAC witsml2__StimPumpFlowBackTestStep {
      public:
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:FlowbackVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FlowbackVolume;
        /// Optional element 'witsml2:FlowbackVolumeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowbackVolumeRate;
        /// Required element 'witsml2:Number' of XML schema type 'xsd:unsignedLong'
        ULONG64 Number;
        /// Optional element 'witsml2:BottomholeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *BottomholeRate;
        /// Optional element 'witsml2:Pres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pres;
        /// Optional element 'witsml2:PipeFriction' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PipeFriction;
        /// Optional element 'witsml2:EntryFriction' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *EntryFriction;
        /// Optional element 'witsml2:PerfFriction' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PerfFriction;
        /// Optional element 'witsml2:NearWellboreFriction' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *NearWellboreFriction;
        /// Optional element 'witsml2:SurfaceRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *SurfaceRate;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPumpFlowBackTestStep, default initialized and not managed by a soap context
        virtual witsml2__StimPumpFlowBackTestStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPumpFlowBackTestStep); }
      public:
        /// Constructor with default initializations
        witsml2__StimPumpFlowBackTestStep() : DTim(), FlowbackVolume(), FlowbackVolumeRate(), Number(), BottomholeRate(), Pres(), PipeFriction(), EntryFriction(), PerfFriction(), NearWellboreFriction(), SurfaceRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimPumpFlowBackTestStep() { }
        /// Friend allocator used by soap_new_witsml2__StimPumpFlowBackTestStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPumpFlowBackTestStep * SOAP_FMAC2 soap_instantiate_witsml2__StimPumpFlowBackTestStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1775 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog (-773)
/* complex XML schema type 'witsml2:StimJobMaterialCatalog': */
class SOAP_CMAC witsml2__StimJobMaterialCatalog {
      public:
        /// Optional element 'witsml2:Additives' of XML schema type 'witsml2:StimAdditive'
        std::vector<witsml2__StimAdditive *> Additives;
        /// Optional element 'witsml2:ProppantAgents' of XML schema type 'witsml2:StimProppantAgent'
        std::vector<witsml2__StimProppantAgent *> ProppantAgents;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobMaterialCatalog, default initialized and not managed by a soap context
        virtual witsml2__StimJobMaterialCatalog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobMaterialCatalog); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobMaterialCatalog() : Additives(), ProppantAgents(), soap() { }
        virtual ~witsml2__StimJobMaterialCatalog() { }
        /// Friend allocator used by soap_new_witsml2__StimJobMaterialCatalog(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobMaterialCatalog * SOAP_FMAC2 soap_instantiate_witsml2__StimJobMaterialCatalog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1777 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point (-774)
/* complex XML schema type 'witsml2:StimISO13503_5Point': */
class SOAP_CMAC witsml2__StimISO13503_USCORE5Point {
      public:
        /// Required element 'witsml2:Conductivity' of XML schema type 'eml21:PermeabilityLengthMeasure'
        eml21__PermeabilityLengthMeasure *Conductivity;
        /// Required element 'witsml2:Temperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'witsml2:Permeability' of XML schema type 'eml21:PermeabilityRockMeasure'
        eml21__PermeabilityRockMeasure *Permeability;
        /// Required element 'witsml2:Stress' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Stress;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimISO13503_USCORE5Point, default initialized and not managed by a soap context
        virtual witsml2__StimISO13503_USCORE5Point *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimISO13503_USCORE5Point); }
      public:
        /// Constructor with default initializations
        witsml2__StimISO13503_USCORE5Point() : Conductivity(), Temperature(), Permeability(), Stress(), uid(), soap() { }
        virtual ~witsml2__StimISO13503_USCORE5Point() { }
        /// Friend allocator used by soap_new_witsml2__StimISO13503_USCORE5Point(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimISO13503_USCORE5Point * SOAP_FMAC2 soap_instantiate_witsml2__StimISO13503_USCORE5Point(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1781 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest (-776)
/* complex XML schema type 'witsml2:StimStepDownTest': */
class SOAP_CMAC witsml2__StimStepDownTest {
      public:
        /// Optional element 'witsml2:InitialShutinPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *InitialShutinPres;
        /// Optional element 'witsml2:BottomholeFluidDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *BottomholeFluidDensity;
        /// Optional element 'witsml2:DiameterEntryHole' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiameterEntryHole;
        /// Optional element 'witsml2:PerforationCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 *PerforationCount;
        /// Optional element 'witsml2:DischargeCoefficient' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *DischargeCoefficient;
        /// Optional element 'witsml2:EffectivePerfs' of XML schema type 'xsd:unsignedLong'
        ULONG64 *EffectivePerfs;
        /// Optional element 'witsml2:Step' of XML schema type 'witsml2:StimPumpFlowBackTestStep'
        std::vector<witsml2__StimPumpFlowBackTestStep *> Step;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimStepDownTest, default initialized and not managed by a soap context
        virtual witsml2__StimStepDownTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimStepDownTest); }
      public:
        /// Constructor with default initializations
        witsml2__StimStepDownTest() : InitialShutinPres(), BottomholeFluidDensity(), DiameterEntryHole(), PerforationCount(), DischargeCoefficient(), EffectivePerfs(), Step(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimStepDownTest() { }
        /// Friend allocator used by soap_new_witsml2__StimStepDownTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimStepDownTest * SOAP_FMAC2 soap_instantiate_witsml2__StimStepDownTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1783 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity (-777)
/* complex XML schema type 'witsml2:StimMaterialQuantity': */
class SOAP_CMAC witsml2__StimMaterialQuantity {
      public:
        /// Optional element 'witsml2:Density' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:Mass' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *Mass;
        /// Optional element 'witsml2:MassFlowRate' of XML schema type 'eml21:MassPerTimeMeasure'
        eml21__MassPerTimeMeasure *MassFlowRate;
        /// Optional element 'witsml2:StdVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *StdVolume;
        /// Optional element 'witsml2:Volume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Volume;
        /// Optional element 'witsml2:VolumeConcentration' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *VolumeConcentration;
        /// Optional element 'witsml2:VolumetricFlowRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *VolumetricFlowRate;
        /// Required element 'witsml2:MaterialReference' of XML schema type 'eml21:String64'
        std::string MaterialReference;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimMaterialQuantity, default initialized and not managed by a soap context
        virtual witsml2__StimMaterialQuantity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimMaterialQuantity); }
      public:
        /// Constructor with default initializations
        witsml2__StimMaterialQuantity() : Density(), Mass(), MassFlowRate(), StdVolume(), Volume(), VolumeConcentration(), VolumetricFlowRate(), MaterialReference(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimMaterialQuantity() { }
        /// Friend allocator used by soap_new_witsml2__StimMaterialQuantity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimMaterialQuantity * SOAP_FMAC2 soap_instantiate_witsml2__StimMaterialQuantity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1787 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties (-779)
/* complex XML schema type 'witsml2:StimISO13503_2Properties': */
class SOAP_CMAC witsml2__StimISO13503_USCORE2Properties {
      public:
        /// Optional element 'witsml2:AbsoluteDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AbsoluteDensity;
        /// Optional element 'witsml2:ClustersPercent' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *ClustersPercent;
        /// Optional element 'witsml2:KValue' of XML schema type 'xsd:double'
        double *KValue;
        /// Optional element 'witsml2:MeanParticleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MeanParticleDiameter;
        /// Optional element 'witsml2:MedianParticleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MedianParticleDiameter;
        /// Optional element 'witsml2:SpecificGravity' of XML schema type 'xsd:double'
        double *SpecificGravity;
        /// Optional element 'witsml2:Roundness' of XML schema type 'xsd:double'
        double *Roundness;
        /// Optional element 'witsml2:AcidSolubility' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *AcidSolubility;
        /// Optional element 'witsml2:ApparentDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *ApparentDensity;
        /// Optional element 'witsml2:BulkDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *BulkDensity;
        /// Optional element 'witsml2:LossOnIgnition' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *LossOnIgnition;
        /// Optional element 'witsml2:Sphericity' of XML schema type 'xsd:double'
        double *Sphericity;
        /// Optional element 'witsml2:Turbidity' of XML schema type 'xsd:double'
        double *Turbidity;
        /// Optional element 'witsml2:CrushTestData' of XML schema type 'witsml2:ISO13503_2CrushTestData'
        std::vector<witsml2__ISO13503_USCORE2CrushTestData *> CrushTestData;
        /// Optional element 'witsml2:SieveAnalysisData' of XML schema type 'witsml2:ISO13503_2SieveAnalysisData'
        std::vector<witsml2__ISO13503_USCORE2SieveAnalysisData *> SieveAnalysisData;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimISO13503_USCORE2Properties, default initialized and not managed by a soap context
        virtual witsml2__StimISO13503_USCORE2Properties *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimISO13503_USCORE2Properties); }
      public:
        /// Constructor with default initializations
        witsml2__StimISO13503_USCORE2Properties() : AbsoluteDensity(), ClustersPercent(), KValue(), MeanParticleDiameter(), MedianParticleDiameter(), SpecificGravity(), Roundness(), AcidSolubility(), ApparentDensity(), BulkDensity(), LossOnIgnition(), Sphericity(), Turbidity(), CrushTestData(), SieveAnalysisData(), uid(), soap() { }
        virtual ~witsml2__StimISO13503_USCORE2Properties() { }
        /// Friend allocator used by soap_new_witsml2__StimISO13503_USCORE2Properties(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimISO13503_USCORE2Properties * SOAP_FMAC2 soap_instantiate_witsml2__StimISO13503_USCORE2Properties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1789 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate (-780)
/* complex XML schema type 'witsml2:StimPressureFlowRate': */
class SOAP_CMAC witsml2__StimPressureFlowRate {
      public:
        /// Optional element 'witsml2:Pressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pressure;
        /// Optional element 'witsml2:BottomholeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *BottomholeRate;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPressureFlowRate, default initialized and not managed by a soap context
        virtual witsml2__StimPressureFlowRate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPressureFlowRate); }
      public:
        /// Constructor with default initializations
        witsml2__StimPressureFlowRate() : Pressure(), BottomholeRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimPressureFlowRate() { }
        /// Friend allocator used by soap_new_witsml2__StimPressureFlowRate(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPressureFlowRate * SOAP_FMAC2 soap_instantiate_witsml2__StimPressureFlowRate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1791 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep (-781)
/* complex XML schema type 'witsml2:StimJobStep': */
class SOAP_CMAC witsml2__StimJobStep {
      public:
        /// Optional element 'witsml2:StepName' of XML schema type 'eml21:String2000'
        std::string *StepName;
        /// Required element 'witsml2:StepNumber' of XML schema type 'xsd:unsignedLong'
        ULONG64 StepNumber;
        /// Optional element 'witsml2:Kind' of XML schema type 'eml21:String2000'
        std::string *Kind;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:AvgBaseFluidQuality' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *AvgBaseFluidQuality;
        /// Optional element 'witsml2:AvgCO2BaseFluidQuality' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *AvgCO2BaseFluidQuality;
        /// Optional element 'witsml2:AvgHydraulicPower' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *AvgHydraulicPower;
        /// Optional element 'witsml2:AvgInternalPhaseFraction' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *AvgInternalPhaseFraction;
        /// Optional element 'witsml2:AvgMaterialUsedRate' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AvgMaterialUsedRate;
        /// Optional element 'witsml2:AvgMaterialUseRateBottomhole' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AvgMaterialUseRateBottomhole;
        /// Optional element 'witsml2:AvgN2BaseFluidQuality' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *AvgN2BaseFluidQuality;
        /// Optional element 'witsml2:AvgPresBottomhole' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresBottomhole;
        /// Optional element 'witsml2:AvgPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresSurface;
        /// Optional element 'witsml2:AvgPropConc' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgPropConc;
        /// Optional element 'witsml2:AvgProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgProppantConcBottomhole;
        /// Optional element 'witsml2:AvgProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgProppantConcSurface;
        /// Optional element 'witsml2:AvgSlurryPropConc' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgSlurryPropConc;
        /// Optional element 'witsml2:AvgSlurryRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgSlurryRate;
        /// Optional element 'witsml2:AvgTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *AvgTemperature;
        /// Optional element 'witsml2:AvgVolumeRateWellhead' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgVolumeRateWellhead;
        /// Optional element 'witsml2:BallsRecovered' of XML schema type 'xsd:unsignedLong'
        ULONG64 *BallsRecovered;
        /// Optional element 'witsml2:BallsUsed' of XML schema type 'xsd:unsignedLong'
        ULONG64 *BallsUsed;
        /// Optional element 'witsml2:BaseFluidBypassVol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *BaseFluidBypassVol;
        /// Optional element 'witsml2:BaseFluidVol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *BaseFluidVol;
        /// Optional element 'witsml2:EndDirtyMaterialRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *EndDirtyMaterialRate;
        /// Optional element 'witsml2:EndMaterialUsedRate' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> EndMaterialUsedRate;
        /// Optional element 'witsml2:EndMaterialUsedRateBottomhole' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> EndMaterialUsedRateBottomhole;
        /// Optional element 'witsml2:EndPresBottomhole' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *EndPresBottomhole;
        /// Optional element 'witsml2:EndPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *EndPresSurface;
        /// Optional element 'witsml2:EndProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *EndProppantConcBottomhole;
        /// Optional element 'witsml2:EndProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *EndProppantConcSurface;
        /// Optional element 'witsml2:EndRateSurfaceCO2' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *EndRateSurfaceCO2;
        /// Optional element 'witsml2:EndStdRateSurfaceN2' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *EndStdRateSurfaceN2;
        /// Optional element 'witsml2:FluidVolBase' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolBase;
        /// Optional element 'witsml2:FluidVolCirculated' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolCirculated;
        /// Optional element 'witsml2:FluidVolPumped' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolPumped;
        /// Optional element 'witsml2:FluidVolReturned' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolReturned;
        /// Optional element 'witsml2:FluidVolSlurry' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolSlurry;
        /// Optional element 'witsml2:FluidVolSqueezed' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolSqueezed;
        /// Optional element 'witsml2:FluidVolWashed' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FluidVolWashed;
        /// Optional element 'witsml2:FractureGradientFinal' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradientFinal;
        /// Optional element 'witsml2:FractureGradientInitial' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradientInitial;
        /// Optional element 'witsml2:FrictionFactor' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *FrictionFactor;
        /// Optional element 'witsml2:MaxHydraulicPower' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *MaxHydraulicPower;
        /// Optional element 'witsml2:MaxPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPresSurface;
        /// Optional element 'witsml2:MaxProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MaxProppantConcBottomhole;
        /// Optional element 'witsml2:MaxProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MaxProppantConcSurface;
        /// Optional element 'witsml2:MaxSlurryPropConc' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MaxSlurryPropConc;
        /// Optional element 'witsml2:MaxVolumeRateWellhead' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *MaxVolumeRateWellhead;
        /// Optional element 'witsml2:PipeFrictionPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PipeFrictionPressure;
        /// Optional element 'witsml2:PumpTime' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *PumpTime;
        /// Optional element 'witsml2:StartDirtyMaterialRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *StartDirtyMaterialRate;
        /// Optional element 'witsml2:StartMaterialUsedRate' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> StartMaterialUsedRate;
        /// Optional element 'witsml2:StartMaterialUsedRateBottomHole' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> StartMaterialUsedRateBottomHole;
        /// Optional element 'witsml2:StartPresBottomhole' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *StartPresBottomhole;
        /// Optional element 'witsml2:StartPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *StartPresSurface;
        /// Optional element 'witsml2:StartProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *StartProppantConcBottomhole;
        /// Optional element 'witsml2:StartProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *StartProppantConcSurface;
        /// Optional element 'witsml2:WellheadVol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *WellheadVol;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:MaterialUsed' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Optional element 'witsml2:MaxMaterialUsedRate' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaxMaterialUsedRate;
        /// Optional element 'witsml2:Fluid' of XML schema type 'witsml2:StimFluid'
        witsml2__StimFluid *Fluid;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobStep, default initialized and not managed by a soap context
        virtual witsml2__StimJobStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobStep); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobStep() : StepName(), StepNumber(), Kind(), Description(), DTimStart(), DTimEnd(), AvgBaseFluidQuality(), AvgCO2BaseFluidQuality(), AvgHydraulicPower(), AvgInternalPhaseFraction(), AvgMaterialUsedRate(), AvgMaterialUseRateBottomhole(), AvgN2BaseFluidQuality(), AvgPresBottomhole(), AvgPresSurface(), AvgPropConc(), AvgProppantConcBottomhole(), AvgProppantConcSurface(), AvgSlurryPropConc(), AvgSlurryRate(), AvgTemperature(), AvgVolumeRateWellhead(), BallsRecovered(), BallsUsed(), BaseFluidBypassVol(), BaseFluidVol(), EndDirtyMaterialRate(), EndMaterialUsedRate(), EndMaterialUsedRateBottomhole(), EndPresBottomhole(), EndPresSurface(), EndProppantConcBottomhole(), EndProppantConcSurface(), EndRateSurfaceCO2(), EndStdRateSurfaceN2(), FluidVolBase(), FluidVolCirculated(), FluidVolPumped(), FluidVolReturned(), FluidVolSlurry(), FluidVolSqueezed(), FluidVolWashed(), FractureGradientFinal(), FractureGradientInitial(), FrictionFactor(), MaxHydraulicPower(), MaxPresSurface(), MaxProppantConcBottomhole(), MaxProppantConcSurface(), MaxSlurryPropConc(), MaxVolumeRateWellhead(), PipeFrictionPressure(), PumpTime(), StartDirtyMaterialRate(), StartMaterialUsedRate(), StartMaterialUsedRateBottomHole(), StartPresBottomhole(), StartPresSurface(), StartProppantConcBottomhole(), StartProppantConcSurface(), WellheadVol(), ExtensionNameValue(), MaterialUsed(), MaxMaterialUsedRate(), Fluid(), uid(), soap() { }
        virtual ~witsml2__StimJobStep() { }
        /// Friend allocator used by soap_new_witsml2__StimJobStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobStep * SOAP_FMAC2 soap_instantiate_witsml2__StimJobStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1793 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest (-782)
/* complex XML schema type 'witsml2:StimStepTest': */
class SOAP_CMAC witsml2__StimStepTest {
      public:
        /// Optional element 'witsml2:FractureExtensionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FractureExtensionPres;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:PresMeasurement' of XML schema type 'witsml2:StimPressureFlowRate'
        std::vector<witsml2__StimPressureFlowRate *> PresMeasurement;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimStepTest, default initialized and not managed by a soap context
        virtual witsml2__StimStepTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimStepTest); }
      public:
        /// Constructor with default initializations
        witsml2__StimStepTest() : FractureExtensionPres(), ExtensionNameValue(), PresMeasurement(), uid(), soap() { }
        virtual ~witsml2__StimStepTest() { }
        /// Friend allocator used by soap_new_witsml2__StimStepTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimStepTest * SOAP_FMAC2 soap_instantiate_witsml2__StimStepTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1795 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial (-783)
/* complex XML schema type 'witsml2:StimMaterial': */
class SOAP_CMAC witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:Kind' of XML schema type 'witsml2:StimMaterialKind'
        enum witsml2__StimMaterialKind *Kind;
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String2000'
        std::string *Name;
        /// Optional element 'witsml2:Supplier' of XML schema type 'eml21:String2000'
        std::string *Supplier;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimMaterial, default initialized and not managed by a soap context
        virtual witsml2__StimMaterial *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimMaterial); }
      public:
        /// Constructor with default initializations
        witsml2__StimMaterial() : Kind(), Name(), Supplier(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimMaterial() { }
        /// Friend allocator used by soap_new_witsml2__StimMaterial(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimMaterial * SOAP_FMAC2 soap_instantiate_witsml2__StimMaterial(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1799 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent (-785)
/* complex XML schema type 'witsml2:StimEvent': */
class SOAP_CMAC witsml2__StimEvent {
      public:
        /// Required element 'witsml2:Number' of XML schema type 'xsd:unsignedLong'
        ULONG64 Number;
        /// Optional element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:NumStep' of XML schema type 'xsd:unsignedLong'
        ULONG64 *NumStep;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimEvent, default initialized and not managed by a soap context
        virtual witsml2__StimEvent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimEvent); }
      public:
        /// Constructor with default initializations
        witsml2__StimEvent() : Number(), DTim(), Comment(), NumStep(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimEvent() { }
        /// Friend allocator used by soap_new_witsml2__StimEvent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimEvent * SOAP_FMAC2 soap_instantiate_witsml2__StimEvent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1801 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData (-786)
/* complex XML schema type 'witsml2:ISO13503_2CrushTestData': */
class SOAP_CMAC witsml2__ISO13503_USCORE2CrushTestData {
      public:
        /// Required element 'witsml2:Fines' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *Fines;
        /// Required element 'witsml2:Stress' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Stress;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ISO13503_USCORE2CrushTestData, default initialized and not managed by a soap context
        virtual witsml2__ISO13503_USCORE2CrushTestData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ISO13503_USCORE2CrushTestData); }
      public:
        /// Constructor with default initializations
        witsml2__ISO13503_USCORE2CrushTestData() : Fines(), Stress(), uid(), soap() { }
        virtual ~witsml2__ISO13503_USCORE2CrushTestData() { }
        /// Friend allocator used by soap_new_witsml2__ISO13503_USCORE2CrushTestData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ISO13503_USCORE2CrushTestData * SOAP_FMAC2 soap_instantiate_witsml2__ISO13503_USCORE2CrushTestData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1803 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest (-787)
/* complex XML schema type 'witsml2:StimFetTest': */
class SOAP_CMAC witsml2__StimFetTest {
      public:
        /// Optional element 'witsml2:AnalysisMethod' of XML schema type 'witsml2:StimFetTestAnalysisMethod'
        std::vector<enum witsml2__StimFetTestAnalysisMethod> AnalysisMethod;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:EndPdlDuration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *EndPdlDuration;
        /// Optional element 'witsml2:FluidEfficiency' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:FractureCloseDuration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *FractureCloseDuration;
        /// Optional element 'witsml2:FractureClosePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:FractureExtensionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FractureExtensionPres;
        /// Optional element 'witsml2:FractureGradient' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradient;
        /// Optional element 'witsml2:FractureLength' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FractureLength;
        /// Optional element 'witsml2:FractureWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FractureWidth;
        /// Optional element 'witsml2:NetPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *NetPres;
        /// Optional element 'witsml2:PdlCoef' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *PdlCoef;
        /// Optional element 'witsml2:PorePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PorePres;
        /// Optional element 'witsml2:PseudoRadialPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PseudoRadialPres;
        /// Optional element 'witsml2:ResidualPermeability' of XML schema type 'eml21:PermeabilityRockMeasure'
        eml21__PermeabilityRockMeasure *ResidualPermeability;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFetTest, default initialized and not managed by a soap context
        virtual witsml2__StimFetTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFetTest); }
      public:
        /// Constructor with default initializations
        witsml2__StimFetTest() : AnalysisMethod(), DTimStart(), DTimEnd(), EndPdlDuration(), FluidEfficiency(), FractureCloseDuration(), FractureClosePres(), FractureExtensionPres(), FractureGradient(), FractureLength(), FractureWidth(), NetPres(), PdlCoef(), PorePres(), PseudoRadialPres(), ResidualPermeability(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimFetTest() { }
        /// Friend allocator used by soap_new_witsml2__StimFetTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFetTest * SOAP_FMAC2 soap_instantiate_witsml2__StimFetTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1805 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure (-788)
/* complex XML schema type 'witsml2:StimShutInPressure': */
class SOAP_CMAC witsml2__StimShutInPressure {
      public:
        /// Required element 'witsml2:Pressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pressure;
        /// Required element 'witsml2:TimeAfterShutin' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *TimeAfterShutin;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimShutInPressure, default initialized and not managed by a soap context
        virtual witsml2__StimShutInPressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimShutInPressure); }
      public:
        /// Constructor with default initializations
        witsml2__StimShutInPressure() : Pressure(), TimeAfterShutin(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimShutInPressure() { }
        /// Friend allocator used by soap_new_witsml2__StimShutInPressure(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimShutInPressure * SOAP_FMAC2 soap_instantiate_witsml2__StimShutInPressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1809 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession (-790)
/* complex XML schema type 'witsml2:StimJobDiagnosticSession': */
class SOAP_CMAC witsml2__StimJobDiagnosticSession {
      public:
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml2:Number' of XML schema type 'xsd:unsignedLong'
        ULONG64 *Number;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ChokeSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ChokeSize;
        /// Optional element 'witsml2:DTimPumpOn' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPumpOn;
        /// Optional element 'witsml2:DTimPumpOff' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPumpOff;
        /// Optional element 'witsml2:PumpDuration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *PumpDuration;
        /// Optional element 'witsml2:DTimWellShutin' of XML schema type 'eml21:TimeStamp'
        std::string *DTimWellShutin;
        /// Optional element 'witsml2:DTimFractureClose' of XML schema type 'eml21:TimeStamp'
        std::string *DTimFractureClose;
        /// Optional element 'witsml2:AvgBottomholeTreatmentPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgBottomholeTreatmentPres;
        /// Optional element 'witsml2:AvgBottomholeTreatmentRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgBottomholeTreatmentRate;
        /// Optional element 'witsml2:BaseFluidVol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *BaseFluidVol;
        /// Optional element 'witsml2:BottomholeHydrostaticPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *BottomholeHydrostaticPres;
        /// Optional element 'witsml2:BubblePointPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *BubblePointPres;
        /// Optional element 'witsml2:FluidDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *FluidDensity;
        /// Optional element 'witsml2:FractureClosePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:FrictionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:InitialShutinPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *InitialShutinPres;
        /// Optional element 'witsml2:PorePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PorePres;
        /// Optional element 'witsml2:WellboreVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *WellboreVolume;
        /// Optional element 'witsml2:MdSurface' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdSurface;
        /// Optional element 'witsml2:MdBottomhole' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBottomhole;
        /// Optional element 'witsml2:MdMidPerforation' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdMidPerforation;
        /// Optional element 'witsml2:TvdMidPerforation' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdMidPerforation;
        /// Optional element 'witsml2:SurfaceTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *SurfaceTemperature;
        /// Optional element 'witsml2:BottomholeTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *BottomholeTemperature;
        /// Optional element 'witsml2:SurfaceFluidTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *SurfaceFluidTemperature;
        /// Optional element 'witsml2:FluidCompressibility' of XML schema type 'eml21:IsothermalCompressibilityMeasure'
        eml21__IsothermalCompressibilityMeasure *FluidCompressibility;
        /// Optional element 'witsml2:ReservoirTotalCompressibility' of XML schema type 'eml21:IsothermalCompressibilityMeasure'
        eml21__IsothermalCompressibilityMeasure *ReservoirTotalCompressibility;
        /// Optional element 'witsml2:FluidNprimeFactor' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *FluidNprimeFactor;
        /// Optional element 'witsml2:FluidKprimeFactor' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *FluidKprimeFactor;
        /// Optional element 'witsml2:FluidSpecificHeat' of XML schema type 'eml21:SpecificHeatCapacityMeasure'
        eml21__SpecificHeatCapacityMeasure *FluidSpecificHeat;
        /// Optional element 'witsml2:FluidThermalConductivity' of XML schema type 'eml21:ThermalConductivityMeasure'
        eml21__ThermalConductivityMeasure *FluidThermalConductivity;
        /// Optional element 'witsml2:FluidThermalExpansionCoefficient' of XML schema type 'eml21:VolumetricThermalExpansionMeasure'
        eml21__VolumetricThermalExpansionMeasure *FluidThermalExpansionCoefficient;
        /// Optional element 'witsml2:FluidEfficiency' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:FoamQuality' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *FoamQuality;
        /// Optional element 'witsml2:PercentPad' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PercentPad;
        /// Optional element 'witsml2:StageNumber' of XML schema type 'xsd:unsignedLong'
        ULONG64 *StageNumber;
        /// Optional element 'witsml2:TemperatureCorrectionApplied' of XML schema type 'xsd:boolean'
        bool *TemperatureCorrectionApplied;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:FluidEfficiencyTest' of XML schema type 'witsml2:StimFetTest'
        std::vector<witsml2__StimFetTest *> FluidEfficiencyTest;
        /// Optional element 'witsml2:StepDownTest' of XML schema type 'witsml2:StimStepDownTest'
        std::vector<witsml2__StimStepDownTest *> StepDownTest;
        /// Optional element 'witsml2:StepRateTest' of XML schema type 'witsml2:StimStepTest'
        std::vector<witsml2__StimStepTest *> StepRateTest;
        /// Optional element 'witsml2:PumpFlowBackTest' of XML schema type 'witsml2:StimPumpFlowBackTest'
        std::vector<witsml2__StimPumpFlowBackTest *> PumpFlowBackTest;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobDiagnosticSession, default initialized and not managed by a soap context
        virtual witsml2__StimJobDiagnosticSession *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobDiagnosticSession); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobDiagnosticSession() : Name(), Number(), Description(), ChokeSize(), DTimPumpOn(), DTimPumpOff(), PumpDuration(), DTimWellShutin(), DTimFractureClose(), AvgBottomholeTreatmentPres(), AvgBottomholeTreatmentRate(), BaseFluidVol(), BottomholeHydrostaticPres(), BubblePointPres(), FluidDensity(), FractureClosePres(), FrictionPres(), InitialShutinPres(), PorePres(), WellboreVolume(), MdSurface(), MdBottomhole(), MdMidPerforation(), TvdMidPerforation(), SurfaceTemperature(), BottomholeTemperature(), SurfaceFluidTemperature(), FluidCompressibility(), ReservoirTotalCompressibility(), FluidNprimeFactor(), FluidKprimeFactor(), FluidSpecificHeat(), FluidThermalConductivity(), FluidThermalExpansionCoefficient(), FluidEfficiency(), FoamQuality(), PercentPad(), StageNumber(), TemperatureCorrectionApplied(), ExtensionNameValue(), FluidEfficiencyTest(), StepDownTest(), StepRateTest(), PumpFlowBackTest(), uid(), soap() { }
        virtual ~witsml2__StimJobDiagnosticSession() { }
        /// Friend allocator used by soap_new_witsml2__StimJobDiagnosticSession(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobDiagnosticSession * SOAP_FMAC2 soap_instantiate_witsml2__StimJobDiagnosticSession(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1811 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet (-791)
/* complex XML schema type 'witsml2:StimPerforationClusterSet': */
class SOAP_CMAC witsml2__StimPerforationClusterSet {
      public:
        /// Required element 'witsml2:StimPerforationCluster' of XML schema type 'witsml2:StimPerforationCluster'
        std::vector<witsml2__StimPerforationCluster *> StimPerforationCluster;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPerforationClusterSet, default initialized and not managed by a soap context
        virtual witsml2__StimPerforationClusterSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPerforationClusterSet); }
      public:
        /// Constructor with default initializations
        witsml2__StimPerforationClusterSet() : StimPerforationCluster(), soap() { }
        virtual ~witsml2__StimPerforationClusterSet() { }
        /// Friend allocator used by soap_new_witsml2__StimPerforationClusterSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPerforationClusterSet * SOAP_FMAC2 soap_instantiate_witsml2__StimPerforationClusterSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1813 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog (-792)
/* complex XML schema type 'witsml2:StimJobLogCatalog': */
class SOAP_CMAC witsml2__StimJobLogCatalog {
      public:
        /// Required element 'witsml2:JobLog' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> JobLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobLogCatalog, default initialized and not managed by a soap context
        virtual witsml2__StimJobLogCatalog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobLogCatalog); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobLogCatalog() : JobLog(), soap() { }
        virtual ~witsml2__StimJobLogCatalog() { }
        /// Friend allocator used by soap_new_witsml2__StimJobLogCatalog(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobLogCatalog * SOAP_FMAC2 soap_instantiate_witsml2__StimJobLogCatalog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:39069 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__StimJobDiversion_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__StimJobDiversion_sequence (-1819)
/* Wrapper: */
class SOAP_CMAC __witsml2__StimJobDiversion_sequence {
      public:
        /// Optional element 'witsml2:Contractor' of XML schema type 'eml21:String2000'
        std::string *Contractor;
        /// Optional element 'witsml2:Method' of XML schema type 'witsml2:StimJobDiversionMethod'
        enum witsml2__StimJobDiversionMethod *Method;
        /// Optional element 'witsml2:ToolDescription' of XML schema type 'eml21:String2000'
        std::string *ToolDescription;
        /// Optional element 'witsml2:ElementSpacing' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ElementSpacing;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__StimJobDiversion_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__StimJobDiversion_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__StimJobDiversion_sequence, default initialized and not managed by a soap context
        virtual __witsml2__StimJobDiversion_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__StimJobDiversion_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__StimJobDiversion_sequence() : Contractor(), Method(), ToolDescription(), ElementSpacing() { }
        virtual ~__witsml2__StimJobDiversion_sequence() { }
        /// Friend allocator used by soap_new___witsml2__StimJobDiversion_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__StimJobDiversion_sequence * SOAP_FMAC2 soap_instantiate___witsml2__StimJobDiversion_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1815 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion (-793)
/* complex XML schema type 'witsml2:StimJobDiversion': */
class SOAP_CMAC witsml2__StimJobDiversion {
      public:
        __witsml2__StimJobDiversion_sequence *__StimJobDiversion_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobDiversion, default initialized and not managed by a soap context
        virtual witsml2__StimJobDiversion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobDiversion); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobDiversion() : __StimJobDiversion_sequence(), soap() { }
        virtual ~witsml2__StimJobDiversion() { }
        /// Friend allocator used by soap_new_witsml2__StimJobDiversion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobDiversion * SOAP_FMAC2 soap_instantiate_witsml2__StimJobDiversion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1817 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData (-794)
/* complex XML schema type 'witsml2:ISO13503_2SieveAnalysisData': */
class SOAP_CMAC witsml2__ISO13503_USCORE2SieveAnalysisData {
      public:
        /// Required element 'witsml2:PercentRetained' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *PercentRetained;
        /// Required element 'witsml2:SieveNumber' of XML schema type 'xsd:unsignedLong'
        ULONG64 SieveNumber;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ISO13503_USCORE2SieveAnalysisData, default initialized and not managed by a soap context
        virtual witsml2__ISO13503_USCORE2SieveAnalysisData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ISO13503_USCORE2SieveAnalysisData); }
      public:
        /// Constructor with default initializations
        witsml2__ISO13503_USCORE2SieveAnalysisData() : PercentRetained(), SieveNumber(), uid(), soap() { }
        virtual ~witsml2__ISO13503_USCORE2SieveAnalysisData() { }
        /// Friend allocator used by soap_new_witsml2__ISO13503_USCORE2SieveAnalysisData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ISO13503_USCORE2SieveAnalysisData * SOAP_FMAC2 soap_instantiate_witsml2__ISO13503_USCORE2SieveAnalysisData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1821 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection (-796)
/* complex XML schema type 'witsml2:SurveySection': */
class SOAP_CMAC witsml2__SurveySection {
      public:
        /// Required element 'witsml2:Sequence' of XML schema type 'xsd:unsignedLong'
        ULONG64 Sequence;
        /// Optional element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml2:NameSurveyCompany' of XML schema type 'eml21:String64'
        std::string NameSurveyCompany;
        /// Required element 'witsml2:NameTool' of XML schema type 'eml21:String64'
        std::string NameTool;
        /// Required element 'witsml2:TypeTool' of XML schema type 'eml21:String64'
        std::string TypeTool;
        /// Optional element 'witsml2:ModelError' of XML schema type 'eml21:String64'
        std::string *ModelError;
        /// Optional element 'witsml2:Overwrite' of XML schema type 'xsd:boolean'
        bool *Overwrite;
        /// Optional element 'witsml2:FrequencyMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FrequencyMx;
        /// Optional element 'witsml2:ItemState' of XML schema type 'eml21:ExistenceKind'
        enum eml21__ExistenceKind *ItemState;
        /// Optional element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurveySection, default initialized and not managed by a soap context
        virtual witsml2__SurveySection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurveySection); }
      public:
        /// Constructor with default initializations
        witsml2__SurveySection() : Sequence(), Name(), MdInterval(), NameSurveyCompany(), NameTool(), TypeTool(), ModelError(), Overwrite(), FrequencyMx(), ItemState(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__SurveySection() { }
        /// Friend allocator used by soap_new_witsml2__SurveySection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurveySection * SOAP_FMAC2 soap_instantiate_witsml2__SurveySection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1823 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient (-797)
/* complex XML schema type 'witsml2:AbstractIscwsaErrorCoefficient': */
class SOAP_CMAC witsml2__AbstractIscwsaErrorCoefficient {
      public:
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractIscwsaErrorCoefficient, default initialized and not managed by a soap context
        virtual witsml2__AbstractIscwsaErrorCoefficient *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractIscwsaErrorCoefficient); }
      public:
        /// Constructor with default initializations
        witsml2__AbstractIscwsaErrorCoefficient() : uid(), soap() { }
        virtual ~witsml2__AbstractIscwsaErrorCoefficient() { }
        /// Friend allocator used by soap_new_witsml2__AbstractIscwsaErrorCoefficient(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractIscwsaErrorCoefficient * SOAP_FMAC2 soap_instantiate_witsml2__AbstractIscwsaErrorCoefficient(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1831 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant (-801)
/* complex XML schema type 'witsml2:IscwsaNomenclatureConstant': */
class SOAP_CMAC witsml2__IscwsaNomenclatureConstant {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'witsml2:Unit' of XML schema type 'eml21:UomEnum'
        std::string Unit;
        /// Required element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaNomenclatureConstant, default initialized and not managed by a soap context
        virtual witsml2__IscwsaNomenclatureConstant *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaNomenclatureConstant); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaNomenclatureConstant() : Name(), Value(), Unit(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__IscwsaNomenclatureConstant() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaNomenclatureConstant(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaNomenclatureConstant * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaNomenclatureConstant(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1833 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm (-802)
/* complex XML schema type 'witsml2:IscwsaErrorTerm': */
class SOAP_CMAC witsml2__IscwsaErrorTerm {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml2:Type' of XML schema type 'witsml2:ErrorTermSource'
        enum witsml2__ErrorTermSource *Type;
        /// Optional element 'witsml2:MeasureClass' of XML schema type 'eml21:MeasureClass'
        enum eml21__MeasureClass *MeasureClass;
        /// Required element 'witsml2:Label' of XML schema type 'eml21:String64'
        std::string Label;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml2:OperatingMode' of XML schema type 'witsml2:SurveyToolOperatingMode'
        std::vector<enum witsml2__SurveyToolOperatingMode> OperatingMode;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml2:ErrorCoefficient' of XML schema type 'witsml2:IscwsaErrorCoefficient'
        std::vector<witsml2__IscwsaErrorCoefficient *> ErrorCoefficient;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaErrorTerm, default initialized and not managed by a soap context
        virtual witsml2__IscwsaErrorTerm *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaErrorTerm); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaErrorTerm() : Name(), Type(), MeasureClass(), Label(), Description(), OperatingMode(), ExtensionNameValue(), ErrorCoefficient(), uid(), soap() { }
        virtual ~witsml2__IscwsaErrorTerm() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaErrorTerm(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaErrorTerm * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaErrorTerm(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1835 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient (-803)
/* complex XML schema type 'witsml2:IscwsaErrorCoefficient': */
class SOAP_CMAC witsml2__IscwsaErrorCoefficient {
      public:
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml2:AbstractIscwsaErrorCoefficient' of XML schema type 'witsml2:AbstractIscwsaErrorCoefficient'
        std::vector<witsml2__AbstractIscwsaErrorCoefficient *> AbstractIscwsaErrorCoefficient;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaErrorCoefficient, default initialized and not managed by a soap context
        virtual witsml2__IscwsaErrorCoefficient *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaErrorCoefficient); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaErrorCoefficient() : ExtensionNameValue(), AbstractIscwsaErrorCoefficient(), uid(), soap() { }
        virtual ~witsml2__IscwsaErrorCoefficient() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaErrorCoefficient(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaErrorCoefficient * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaErrorCoefficient(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1839 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature (-805)
/* complex XML schema type 'witsml2:IscwsaNomenclature': */
class SOAP_CMAC witsml2__IscwsaNomenclature {
      public:
        /// Optional element 'witsml2:Parameter' of XML schema type 'witsml2:IscwsaNameAndDescription'
        std::vector<witsml2__IscwsaNameAndDescription *> Parameter;
        /// Optional element 'witsml2:Function' of XML schema type 'witsml2:IscwsaNameAndDescription'
        std::vector<witsml2__IscwsaNameAndDescription *> Function;
        /// Optional element 'witsml2:Constant' of XML schema type 'witsml2:IscwsaNomenclatureConstant'
        std::vector<witsml2__IscwsaNomenclatureConstant *> Constant;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaNomenclature, default initialized and not managed by a soap context
        virtual witsml2__IscwsaNomenclature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaNomenclature); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaNomenclature() : Parameter(), Function(), Constant(), soap() { }
        virtual ~witsml2__IscwsaNomenclature() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaNomenclature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaNomenclature * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaNomenclature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1841 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription (-806)
/* complex XML schema type 'witsml2:IscwsaNameAndDescription': */
class SOAP_CMAC witsml2__IscwsaNameAndDescription {
      public:
        /// Required element 'witsml2:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IscwsaNameAndDescription, default initialized and not managed by a soap context
        virtual witsml2__IscwsaNameAndDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IscwsaNameAndDescription); }
      public:
        /// Constructor with default initializations
        witsml2__IscwsaNameAndDescription() : Name(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__IscwsaNameAndDescription() { }
        /// Friend allocator used by soap_new_witsml2__IscwsaNameAndDescription(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IscwsaNameAndDescription * SOAP_FMAC2 soap_instantiate_witsml2__IscwsaNameAndDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1845 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow (-808)
/* complex XML schema type 'witsml2:CuttingsIntervalShow': */
class SOAP_CMAC witsml2__CuttingsIntervalShow {
      public:
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:ShowRating' of XML schema type 'witsml2:ShowRating'
        enum witsml2__ShowRating *ShowRating;
        /// Optional element 'witsml2:StainColor' of XML schema type 'eml21:String64'
        std::string *StainColor;
        /// Optional element 'witsml2:StainDistr' of XML schema type 'eml21:String64'
        std::string *StainDistr;
        /// Optional element 'witsml2:StainPc' of XML schema type 'eml21:AreaPerAreaMeasure'
        eml21__AreaPerAreaMeasure *StainPc;
        /// Optional element 'witsml2:CutSpeed' of XML schema type 'witsml2:ShowSpeed'
        enum witsml2__ShowSpeed *CutSpeed;
        /// Optional element 'witsml2:CutColor' of XML schema type 'eml21:String64'
        std::string *CutColor;
        /// Optional element 'witsml2:CutStrength' of XML schema type 'eml21:String64'
        std::string *CutStrength;
        /// Optional element 'witsml2:CutForm' of XML schema type 'witsml2:ShowLevel'
        enum witsml2__ShowLevel *CutForm;
        /// Optional element 'witsml2:CutLevel' of XML schema type 'eml21:String64'
        std::string *CutLevel;
        /// Optional element 'witsml2:CutFlorForm' of XML schema type 'witsml2:ShowLevel'
        enum witsml2__ShowLevel *CutFlorForm;
        /// Optional element 'witsml2:CutFlorColor' of XML schema type 'eml21:String64'
        std::string *CutFlorColor;
        /// Optional element 'witsml2:CutFlorStrength' of XML schema type 'eml21:String64'
        std::string *CutFlorStrength;
        /// Optional element 'witsml2:CutFlorSpeed' of XML schema type 'witsml2:ShowSpeed'
        enum witsml2__ShowSpeed *CutFlorSpeed;
        /// Optional element 'witsml2:CutFlorLevel' of XML schema type 'witsml2:ShowFluorescence'
        enum witsml2__ShowFluorescence *CutFlorLevel;
        /// Optional element 'witsml2:NatFlorColor' of XML schema type 'eml21:String64'
        std::string *NatFlorColor;
        /// Optional element 'witsml2:NatFlorPc' of XML schema type 'eml21:AreaPerAreaMeasure'
        eml21__AreaPerAreaMeasure *NatFlorPc;
        /// Optional element 'witsml2:NatFlorLevel' of XML schema type 'witsml2:ShowFluorescence'
        enum witsml2__ShowFluorescence *NatFlorLevel;
        /// Optional element 'witsml2:NatFlorDesc' of XML schema type 'eml21:String64'
        std::string *NatFlorDesc;
        /// Optional element 'witsml2:ResidueColor' of XML schema type 'eml21:String64'
        std::string *ResidueColor;
        /// Optional element 'witsml2:ImpregnatedLitho' of XML schema type 'eml21:String64'
        std::string *ImpregnatedLitho;
        /// Optional element 'witsml2:Odor' of XML schema type 'eml21:String64'
        std::string *Odor;
        /// Optional element 'witsml2:CuttingFluid' of XML schema type 'eml21:String64'
        std::string *CuttingFluid;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsIntervalShow, default initialized and not managed by a soap context
        virtual witsml2__CuttingsIntervalShow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsIntervalShow); }
      public:
        /// Constructor with default initializations
        witsml2__CuttingsIntervalShow() : Citation(), ShowRating(), StainColor(), StainDistr(), StainPc(), CutSpeed(), CutColor(), CutStrength(), CutForm(), CutLevel(), CutFlorForm(), CutFlorColor(), CutFlorStrength(), CutFlorSpeed(), CutFlorLevel(), NatFlorColor(), NatFlorPc(), NatFlorLevel(), NatFlorDesc(), ResidueColor(), ImpregnatedLitho(), Odor(), CuttingFluid(), uid(), soap() { }
        virtual ~witsml2__CuttingsIntervalShow() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsIntervalShow(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsIntervalShow * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsIntervalShow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1855 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier (-813)
/* complex XML schema type 'witsml2:LithologyQualifier': */
class SOAP_CMAC witsml2__LithologyQualifier {
      public:
        /// Required element 'witsml2:Kind' of XML schema type 'eml21:LithologyQualifierKindExt'
        std::string Kind;
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:Abundance' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Abundance;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LithologyQualifier, default initialized and not managed by a soap context
        virtual witsml2__LithologyQualifier *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LithologyQualifier); }
      public:
        /// Constructor with default initializations
        witsml2__LithologyQualifier() : Kind(), MdInterval(), Abundance(), Description(), uid(), soap() { }
        virtual ~witsml2__LithologyQualifier() { }
        /// Friend allocator used by soap_new_witsml2__LithologyQualifier(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LithologyQualifier * SOAP_FMAC2 soap_instantiate_witsml2__LithologyQualifier(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1857 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology (-814)
/* complex XML schema type 'witsml2:CuttingsIntervalLithology': */
class SOAP_CMAC witsml2__CuttingsIntervalLithology {
      public:
        /// Required element 'witsml2:Kind' of XML schema type 'eml21:LithologyKindExt'
        std::string Kind;
        /// Required element 'witsml2:LithPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *LithPc;
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:CodeLith' of XML schema type 'eml21:String64'
        std::string *CodeLith;
        /// Optional element 'witsml2:Color' of XML schema type 'eml21:String64'
        std::string *Color;
        /// Optional element 'witsml2:Texture' of XML schema type 'eml21:String64'
        std::string *Texture;
        /// Optional element 'witsml2:Hardness' of XML schema type 'eml21:String64'
        std::string *Hardness;
        /// Optional element 'witsml2:Compaction' of XML schema type 'eml21:String64'
        std::string *Compaction;
        /// Optional element 'witsml2:SizeGrain' of XML schema type 'eml21:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml2:Roundness' of XML schema type 'eml21:String64'
        std::string *Roundness;
        /// Optional element 'witsml2:Sphericity' of XML schema type 'eml21:String64'
        std::string *Sphericity;
        /// Optional element 'witsml2:Sorting' of XML schema type 'eml21:String64'
        std::string *Sorting;
        /// Optional element 'witsml2:MatrixCement' of XML schema type 'eml21:MatrixCementKind'
        enum eml21__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml2:PorosityVisible' of XML schema type 'eml21:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml2:PorosityFabric' of XML schema type 'eml21:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml2:Permeability' of XML schema type 'eml21:String64'
        std::string *Permeability;
        /// Optional element 'witsml2:Shows' of XML schema type 'witsml2:CuttingsIntervalShow'
        std::vector<witsml2__CuttingsIntervalShow *> Shows;
        /// Optional element 'witsml2:Qualifier' of XML schema type 'witsml2:LithologyQualifier'
        std::vector<witsml2__LithologyQualifier *> Qualifier;
        /// Optional attribute 'uid' of XML schema type 'eml21:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsIntervalLithology, default initialized and not managed by a soap context
        virtual witsml2__CuttingsIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsIntervalLithology); }
      public:
        /// Constructor with default initializations
        witsml2__CuttingsIntervalLithology() : Kind(), LithPc(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sphericity(), Sorting(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Shows(), Qualifier(), uid(), soap() { }
        virtual ~witsml2__CuttingsIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1861 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology (-816)
/* complex XML schema type 'witsml2:InterpretedIntervalLithology': */
class SOAP_CMAC witsml2__InterpretedIntervalLithology {
      public:
        /// Required element 'witsml2:Kind' of XML schema type 'eml21:LithologyKindExt'
        std::string Kind;
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:CodeLith' of XML schema type 'eml21:String64'
        std::string *CodeLith;
        /// Optional element 'witsml2:Color' of XML schema type 'eml21:String64'
        std::string *Color;
        /// Optional element 'witsml2:Texture' of XML schema type 'eml21:String64'
        std::string *Texture;
        /// Optional element 'witsml2:Hardness' of XML schema type 'eml21:String64'
        std::string *Hardness;
        /// Optional element 'witsml2:Compaction' of XML schema type 'eml21:String64'
        std::string *Compaction;
        /// Optional element 'witsml2:SizeGrain' of XML schema type 'eml21:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml2:Roundness' of XML schema type 'eml21:String64'
        std::string *Roundness;
        /// Optional element 'witsml2:Sorting' of XML schema type 'eml21:String64'
        std::string *Sorting;
        /// Optional element 'witsml2:Sphericity' of XML schema type 'eml21:String64'
        std::string *Sphericity;
        /// Optional element 'witsml2:MatrixCement' of XML schema type 'eml21:MatrixCementKind'
        enum eml21__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml2:PorosityVisible' of XML schema type 'eml21:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml2:PorosityFabric' of XML schema type 'eml21:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml2:Permeability' of XML schema type 'eml21:String64'
        std::string *Permeability;
        /// Optional element 'witsml2:Qualifier' of XML schema type 'witsml2:LithologyQualifier'
        std::vector<witsml2__LithologyQualifier *> Qualifier;
        /// Optional attribute 'uid' of XML schema type 'eml21:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedIntervalLithology, default initialized and not managed by a soap context
        virtual witsml2__InterpretedIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedIntervalLithology); }
      public:
        /// Constructor with default initializations
        witsml2__InterpretedIntervalLithology() : Kind(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sorting(), Sphericity(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Qualifier(), uid(), soap() { }
        virtual ~witsml2__InterpretedIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1871 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval (-821)
/* complex XML schema type 'witsml2:MudlogReportInterval': */
class SOAP_CMAC witsml2__MudlogReportInterval {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:CuttingsGeologyInterval' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *CuttingsGeologyInterval;
        /// Optional element 'witsml2:InterpretedGeologyInterval' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *InterpretedGeologyInterval;
        /// Optional element 'witsml2:ShowEvaluationInterval' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ShowEvaluationInterval;
        /// Optional element 'witsml2:Chromatograph' of XML schema type 'witsml2:Chromatograph'
        witsml2__Chromatograph *Chromatograph;
        /// Optional element 'witsml2:DrillingParameters' of XML schema type 'witsml2:DrillingParameters'
        std::vector<witsml2__DrillingParameters *> DrillingParameters;
        /// Optional element 'witsml2:MudGas' of XML schema type 'witsml2:MudGas'
        std::vector<witsml2__MudGas *> MudGas;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudlogReportInterval, default initialized and not managed by a soap context
        virtual witsml2__MudlogReportInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudlogReportInterval); }
      public:
        /// Constructor with default initializations
        witsml2__MudlogReportInterval() : MdInterval(), CuttingsGeologyInterval(), InterpretedGeologyInterval(), ShowEvaluationInterval(), Chromatograph(), DrillingParameters(), MudGas(), uid(), soap() { }
        virtual ~witsml2__MudlogReportInterval() { }
        /// Friend allocator used by soap_new_witsml2__MudlogReportInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudlogReportInterval * SOAP_FMAC2 soap_instantiate_witsml2__MudlogReportInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1873 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter (-822)
/* complex XML schema type 'witsml2:MudLogParameter': */
class SOAP_CMAC witsml2__MudLogParameter {
      public:
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Required element 'witsml2:Comments' of XML schema type 'eml21:String2000'
        std::string Comments;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogParameter() : MdInterval(), Citation(), Comments(), uid(), soap() { }
        virtual ~witsml2__MudLogParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40191 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueStatistics_sequence (-1846)
/* Wrapper: */
class SOAP_CMAC __witsml2__TorqueStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__TorqueStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__TorqueStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__TorqueStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__TorqueStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__TorqueStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__TorqueStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__TorqueStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__TorqueStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics (-823)
/* complex XML schema type 'witsml2:TorqueStatistics': */
class SOAP_CMAC witsml2__TorqueStatistics {
      public:
        __witsml2__TorqueStatistics_sequence *__TorqueStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TorqueStatistics, default initialized and not managed by a soap context
        virtual witsml2__TorqueStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TorqueStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__TorqueStatistics() : __TorqueStatistics_sequence(), soap() { }
        virtual ~witsml2__TorqueStatistics() { }
        /// Friend allocator used by soap_new_witsml2__TorqueStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TorqueStatistics * SOAP_FMAC2 soap_instantiate_witsml2__TorqueStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40231 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__DxcStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__DxcStatistics_sequence (-1848)
/* Wrapper: */
class SOAP_CMAC __witsml2__DxcStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__DxcStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__DxcStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__DxcStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__DxcStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__DxcStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__DxcStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__DxcStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__DxcStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__DxcStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__DxcStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1883 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics (-827)
/* complex XML schema type 'witsml2:DxcStatistics': */
class SOAP_CMAC witsml2__DxcStatistics {
      public:
        __witsml2__DxcStatistics_sequence *__DxcStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DxcStatistics, default initialized and not managed by a soap context
        virtual witsml2__DxcStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DxcStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__DxcStatistics() : __DxcStatistics_sequence(), soap() { }
        virtual ~witsml2__DxcStatistics() { }
        /// Friend allocator used by soap_new_witsml2__DxcStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DxcStatistics * SOAP_FMAC2 soap_instantiate_witsml2__DxcStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40271 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__MudDensityStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__MudDensityStatistics_sequence (-1850)
/* Wrapper: */
class SOAP_CMAC __witsml2__MudDensityStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__MudDensityStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__MudDensityStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__MudDensityStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__MudDensityStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__MudDensityStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__MudDensityStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__MudDensityStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__MudDensityStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__MudDensityStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__MudDensityStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1885 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics (-828)
/* complex XML schema type 'witsml2:MudDensityStatistics': */
class SOAP_CMAC witsml2__MudDensityStatistics {
      public:
        __witsml2__MudDensityStatistics_sequence *__MudDensityStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudDensityStatistics, default initialized and not managed by a soap context
        virtual witsml2__MudDensityStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudDensityStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__MudDensityStatistics() : __MudDensityStatistics_sequence(), soap() { }
        virtual ~witsml2__MudDensityStatistics() { }
        /// Friend allocator used by soap_new_witsml2__MudDensityStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudDensityStatistics * SOAP_FMAC2 soap_instantiate_witsml2__MudDensityStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40311 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__EcdStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__EcdStatistics_sequence (-1852)
/* Wrapper: */
class SOAP_CMAC __witsml2__EcdStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__EcdStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__EcdStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__EcdStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__EcdStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__EcdStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__EcdStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__EcdStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__EcdStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__EcdStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__EcdStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1887 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics (-829)
/* complex XML schema type 'witsml2:EcdStatistics': */
class SOAP_CMAC witsml2__EcdStatistics {
      public:
        __witsml2__EcdStatistics_sequence *__EcdStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EcdStatistics, default initialized and not managed by a soap context
        virtual witsml2__EcdStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EcdStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__EcdStatistics() : __EcdStatistics_sequence(), soap() { }
        virtual ~witsml2__EcdStatistics() { }
        /// Friend allocator used by soap_new_witsml2__EcdStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EcdStatistics * SOAP_FMAC2 soap_instantiate_witsml2__EcdStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40351 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__WobStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__WobStatistics_sequence (-1854)
/* Wrapper: */
class SOAP_CMAC __witsml2__WobStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__WobStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__WobStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__WobStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__WobStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__WobStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__WobStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__WobStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__WobStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__WobStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__WobStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1889 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics (-830)
/* complex XML schema type 'witsml2:WobStatistics': */
class SOAP_CMAC witsml2__WobStatistics {
      public:
        __witsml2__WobStatistics_sequence *__WobStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WobStatistics, default initialized and not managed by a soap context
        virtual witsml2__WobStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WobStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__WobStatistics() : __WobStatistics_sequence(), soap() { }
        virtual ~witsml2__WobStatistics() { }
        /// Friend allocator used by soap_new_witsml2__WobStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WobStatistics * SOAP_FMAC2 soap_instantiate_witsml2__WobStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40391 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__DrillingParameters_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__DrillingParameters_sequence (-1856)
/* Wrapper: */
class SOAP_CMAC __witsml2__DrillingParameters_sequence {
      public:
        /// Optional element 'witsml2:Rop' of XML schema type 'witsml2:RopStatistics'
        witsml2__RopStatistics *Rop;
        /// Optional element 'witsml2:AverageWeightOnBit' of XML schema type 'witsml2:WobStatistics'
        witsml2__WobStatistics *AverageWeightOnBit;
        /// Optional element 'witsml2:AverageTorque' of XML schema type 'witsml2:TorqueStatistics'
        witsml2__TorqueStatistics *AverageTorque;
        /// Optional element 'witsml2:AverageTorqueCurrent' of XML schema type 'witsml2:TorqueCurrentStatistics'
        witsml2__TorqueCurrentStatistics *AverageTorqueCurrent;
        /// Optional element 'witsml2:AverageTurnRate' of XML schema type 'witsml2:RpmStatistics'
        witsml2__RpmStatistics *AverageTurnRate;
        /// Optional element 'witsml2:AverageMudDensity' of XML schema type 'witsml2:MudDensityStatistics'
        witsml2__MudDensityStatistics *AverageMudDensity;
        /// Optional element 'witsml2:AverageEcdAtTd' of XML schema type 'witsml2:EcdStatistics'
        witsml2__EcdStatistics *AverageEcdAtTd;
        /// Optional element 'witsml2:AverageDrillingCoefficient' of XML schema type 'witsml2:DxcStatistics'
        witsml2__DxcStatistics *AverageDrillingCoefficient;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__DrillingParameters_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__DrillingParameters_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__DrillingParameters_sequence, default initialized and not managed by a soap context
        virtual __witsml2__DrillingParameters_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__DrillingParameters_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__DrillingParameters_sequence() : Rop(), AverageWeightOnBit(), AverageTorque(), AverageTorqueCurrent(), AverageTurnRate(), AverageMudDensity(), AverageEcdAtTd(), AverageDrillingCoefficient() { }
        virtual ~__witsml2__DrillingParameters_sequence() { }
        /// Friend allocator used by soap_new___witsml2__DrillingParameters_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__DrillingParameters_sequence * SOAP_FMAC2 soap_instantiate___witsml2__DrillingParameters_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1895 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters (-833)
/* complex XML schema type 'witsml2:DrillingParameters': */
class SOAP_CMAC witsml2__DrillingParameters {
      public:
        __witsml2__DrillingParameters_sequence *__DrillingParameters_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillingParameters, default initialized and not managed by a soap context
        virtual witsml2__DrillingParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillingParameters); }
      public:
        /// Constructor with default initializations
        witsml2__DrillingParameters() : __DrillingParameters_sequence(), soap() { }
        virtual ~witsml2__DrillingParameters() { }
        /// Friend allocator used by soap_new_witsml2__DrillingParameters(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillingParameters * SOAP_FMAC2 soap_instantiate_witsml2__DrillingParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40467 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__MudGas_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__MudGas_sequence (-1866)
/* Wrapper: */
class SOAP_CMAC __witsml2__MudGas_sequence {
      public:
        /// Optional element 'witsml2:GasInMud' of XML schema type 'witsml2:GasInMud'
        witsml2__GasInMud *GasInMud;
        /// Optional element 'witsml2:GasPeak' of XML schema type 'witsml2:GasPeak'
        std::vector<witsml2__GasPeak *> GasPeak;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__MudGas_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__MudGas_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__MudGas_sequence, default initialized and not managed by a soap context
        virtual __witsml2__MudGas_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__MudGas_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__MudGas_sequence() : GasInMud(), GasPeak() { }
        virtual ~__witsml2__MudGas_sequence() { }
        /// Friend allocator used by soap_new___witsml2__MudGas_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__MudGas_sequence * SOAP_FMAC2 soap_instantiate___witsml2__MudGas_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1897 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas (-834)
/* complex XML schema type 'witsml2:MudGas': */
class SOAP_CMAC witsml2__MudGas {
      public:
        __witsml2__MudGas_sequence *__MudGas_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudGas, default initialized and not managed by a soap context
        virtual witsml2__MudGas *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudGas); }
      public:
        /// Constructor with default initializations
        witsml2__MudGas() : __MudGas_sequence(), soap() { }
        virtual ~witsml2__MudGas() { }
        /// Friend allocator used by soap_new_witsml2__MudGas(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudGas * SOAP_FMAC2 soap_instantiate_witsml2__MudGas(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1899 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud (-835)
/* complex XML schema type 'witsml2:GasInMud': */
class SOAP_CMAC witsml2__GasInMud {
      public:
        /// Optional element 'witsml2:Average' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Average;
        /// Optional element 'witsml2:Maximum' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Maximum;
        /// Required element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GasInMud, default initialized and not managed by a soap context
        virtual witsml2__GasInMud *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GasInMud); }
      public:
        /// Constructor with default initializations
        witsml2__GasInMud() : Average(), Maximum(), Channel(), soap() { }
        virtual ~witsml2__GasInMud() { }
        /// Friend allocator used by soap_new_witsml2__GasInMud(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GasInMud * SOAP_FMAC2 soap_instantiate_witsml2__GasInMud(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1901 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak (-836)
/* complex XML schema type 'witsml2:GasPeak': */
class SOAP_CMAC witsml2__GasPeak {
      public:
        /// Required element 'witsml2:PeakType' of XML schema type 'witsml2:GasPeakType'
        enum witsml2__GasPeakType PeakType;
        /// Optional element 'witsml2:MdPeak' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdPeak;
        /// Optional element 'witsml2:AverageGas' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *AverageGas;
        /// Optional element 'witsml2:PeakGas' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PeakGas;
        /// Optional element 'witsml2:BackgroundGas' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *BackgroundGas;
        /// Required element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GasPeak, default initialized and not managed by a soap context
        virtual witsml2__GasPeak *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GasPeak); }
      public:
        /// Constructor with default initializations
        witsml2__GasPeak() : PeakType(), MdPeak(), AverageGas(), PeakGas(), BackgroundGas(), Channel(), soap() { }
        virtual ~witsml2__GasPeak() { }
        /// Friend allocator used by soap_new_witsml2__GasPeak(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GasPeak * SOAP_FMAC2 soap_instantiate_witsml2__GasPeak(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40591 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__RpmStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__RpmStatistics_sequence (-1871)
/* Wrapper: */
class SOAP_CMAC __witsml2__RpmStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__RpmStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__RpmStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__RpmStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__RpmStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__RpmStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__RpmStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__RpmStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__RpmStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__RpmStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__RpmStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1905 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics (-838)
/* complex XML schema type 'witsml2:RpmStatistics': */
class SOAP_CMAC witsml2__RpmStatistics {
      public:
        __witsml2__RpmStatistics_sequence *__RpmStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RpmStatistics, default initialized and not managed by a soap context
        virtual witsml2__RpmStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RpmStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__RpmStatistics() : __RpmStatistics_sequence(), soap() { }
        virtual ~witsml2__RpmStatistics() { }
        /// Friend allocator used by soap_new_witsml2__RpmStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RpmStatistics * SOAP_FMAC2 soap_instantiate_witsml2__RpmStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40631 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueCurrentStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueCurrentStatistics_sequence (-1873)
/* Wrapper: */
class SOAP_CMAC __witsml2__TorqueCurrentStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XML schema type 'eml21:ElectricCurrentMeasure'
        eml21__ElectricCurrentMeasure *Average;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueCurrentStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__TorqueCurrentStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__TorqueCurrentStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__TorqueCurrentStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__TorqueCurrentStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__TorqueCurrentStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__TorqueCurrentStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__TorqueCurrentStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__TorqueCurrentStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__TorqueCurrentStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1907 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics (-839)
/* complex XML schema type 'witsml2:TorqueCurrentStatistics': */
class SOAP_CMAC witsml2__TorqueCurrentStatistics {
      public:
        __witsml2__TorqueCurrentStatistics_sequence *__TorqueCurrentStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TorqueCurrentStatistics, default initialized and not managed by a soap context
        virtual witsml2__TorqueCurrentStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TorqueCurrentStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__TorqueCurrentStatistics() : __TorqueCurrentStatistics_sequence(), soap() { }
        virtual ~witsml2__TorqueCurrentStatistics() { }
        /// Friend allocator used by soap_new_witsml2__TorqueCurrentStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TorqueCurrentStatistics * SOAP_FMAC2 soap_instantiate_witsml2__TorqueCurrentStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:40671 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__RopStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__RopStatistics_sequence (-1876)
/* Wrapper: */
class SOAP_CMAC __witsml2__RopStatistics_sequence {
      public:
        /// Optional element 'witsml2:Average' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *Average;
        /// Optional element 'witsml2:Minimum' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *Minimum;
        /// Optional element 'witsml2:Maximum' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *Maximum;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__RopStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__RopStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__RopStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__RopStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__RopStatistics_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__RopStatistics_sequence() : Average(), Minimum(), Maximum(), Channel() { }
        virtual ~__witsml2__RopStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__RopStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__RopStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__RopStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1909 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics (-840)
/* complex XML schema type 'witsml2:RopStatistics': */
class SOAP_CMAC witsml2__RopStatistics {
      public:
        __witsml2__RopStatistics_sequence *__RopStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RopStatistics, default initialized and not managed by a soap context
        virtual witsml2__RopStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RopStatistics); }
      public:
        /// Constructor with default initializations
        witsml2__RopStatistics() : __RopStatistics_sequence(), soap() { }
        virtual ~witsml2__RopStatistics() { }
        /// Friend allocator used by soap_new_witsml2__RopStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RopStatistics * SOAP_FMAC2 soap_instantiate_witsml2__RopStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1911 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph (-841)
/* complex XML schema type 'witsml2:Chromatograph': */
class SOAP_CMAC witsml2__Chromatograph {
      public:
        /// Optional element 'witsml2:ChromatographMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ChromatographMdInterval;
        /// Optional element 'witsml2:DateTimeGasSampleProcessed' of XML schema type 'eml21:TimeStamp'
        std::string *DateTimeGasSampleProcessed;
        /// Optional element 'witsml2:ChromatographType' of XML schema type 'eml21:String64'
        std::string *ChromatographType;
        /// Optional element 'witsml2:ETimChromCycle' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimChromCycle;
        /// Optional element 'witsml2:ChromReportTime' of XML schema type 'eml21:TimeStamp'
        std::string *ChromReportTime;
        /// Optional element 'witsml2:MudWeightIn' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MudWeightIn;
        /// Optional element 'witsml2:MudWeightOut' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MudWeightOut;
        /// Optional element 'witsml2:MethAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *MethAv;
        /// Optional element 'witsml2:MethMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *MethMn;
        /// Optional element 'witsml2:MethMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *MethMx;
        /// Optional element 'witsml2:EthAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EthAv;
        /// Optional element 'witsml2:EthMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EthMn;
        /// Optional element 'witsml2:EthMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EthMx;
        /// Optional element 'witsml2:PropAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PropAv;
        /// Optional element 'witsml2:PropMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PropMn;
        /// Optional element 'witsml2:PropMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PropMx;
        /// Optional element 'witsml2:IbutAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IbutAv;
        /// Optional element 'witsml2:IbutMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IbutMn;
        /// Optional element 'witsml2:IbutMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IbutMx;
        /// Optional element 'witsml2:NbutAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NbutAv;
        /// Optional element 'witsml2:NbutMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NbutMn;
        /// Optional element 'witsml2:NbutMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NbutMx;
        /// Optional element 'witsml2:IpentAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IpentAv;
        /// Optional element 'witsml2:IpentMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IpentMn;
        /// Optional element 'witsml2:IpentMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IpentMx;
        /// Optional element 'witsml2:NpentAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NpentAv;
        /// Optional element 'witsml2:NpentMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NpentMn;
        /// Optional element 'witsml2:NpentMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NpentMx;
        /// Optional element 'witsml2:EpentAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EpentAv;
        /// Optional element 'witsml2:EpentMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EpentMn;
        /// Optional element 'witsml2:EpentMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *EpentMx;
        /// Optional element 'witsml2:IhexAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IhexAv;
        /// Optional element 'witsml2:IhexMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IhexMn;
        /// Optional element 'witsml2:IhexMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *IhexMx;
        /// Optional element 'witsml2:NhexAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NhexAv;
        /// Optional element 'witsml2:NhexMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NhexMn;
        /// Optional element 'witsml2:NhexMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *NhexMx;
        /// Optional element 'witsml2:Co2Av' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Co2Av;
        /// Optional element 'witsml2:Co2Mn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Co2Mn;
        /// Optional element 'witsml2:Co2Mx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Co2Mx;
        /// Optional element 'witsml2:H2sAv' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *H2sAv;
        /// Optional element 'witsml2:H2sMn' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *H2sMn;
        /// Optional element 'witsml2:H2sMx' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *H2sMx;
        /// Optional element 'witsml2:Acetylene' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Acetylene;
        /// Optional element 'witsml2:Channel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Chromatograph, default initialized and not managed by a soap context
        virtual witsml2__Chromatograph *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Chromatograph); }
      public:
        /// Constructor with default initializations
        witsml2__Chromatograph() : ChromatographMdInterval(), DateTimeGasSampleProcessed(), ChromatographType(), ETimChromCycle(), ChromReportTime(), MudWeightIn(), MudWeightOut(), MethAv(), MethMn(), MethMx(), EthAv(), EthMn(), EthMx(), PropAv(), PropMn(), PropMx(), IbutAv(), IbutMn(), IbutMx(), NbutAv(), NbutMn(), NbutMx(), IpentAv(), IpentMn(), IpentMx(), NpentAv(), NpentMn(), NpentMx(), EpentAv(), EpentMn(), EpentMx(), IhexAv(), IhexMn(), IhexMx(), NhexAv(), NhexMn(), NhexMx(), Co2Av(), Co2Mn(), Co2Mx(), H2sAv(), H2sMn(), H2sMx(), Acetylene(), Channel(), soap() { }
        virtual ~witsml2__Chromatograph() { }
        /// Friend allocator used by soap_new_witsml2__Chromatograph(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Chromatograph * SOAP_FMAC2 soap_instantiate_witsml2__Chromatograph(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory (-845)
/* complex XML schema type 'witsml2:CompletionStatusHistory': */
class SOAP_CMAC witsml2__CompletionStatusHistory {
      public:
        /// Optional element 'witsml2:Status' of XML schema type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *Status;
        /// Optional element 'witsml2:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml2:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml2:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CompletionStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__CompletionStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CompletionStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml2__CompletionStatusHistory() : Status(), StartDate(), EndDate(), PerforationMdInterval(), Comment(), uid(), soap() { }
        virtual ~witsml2__CompletionStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__CompletionStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CompletionStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__CompletionStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1923 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet (-847)
/* complex XML schema type 'witsml2:ContactIntervalSet': */
class SOAP_CMAC witsml2__ContactIntervalSet {
      public:
        /// Optional element 'witsml2:SlotsInterval' of XML schema type 'witsml2:SlotsInterval'
        std::vector<witsml2__SlotsInterval *> SlotsInterval;
        /// Optional element 'witsml2:OpenHoleInterval' of XML schema type 'witsml2:OpenHoleInterval'
        std::vector<witsml2__OpenHoleInterval *> OpenHoleInterval;
        /// Optional element 'witsml2:PerforationSetInterval' of XML schema type 'witsml2:PerforationSetInterval'
        std::vector<witsml2__PerforationSetInterval *> PerforationSetInterval;
        /// Optional element 'witsml2:GravelPackInterval' of XML schema type 'witsml2:GravelPackInterval'
        std::vector<witsml2__GravelPackInterval *> GravelPackInterval;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ContactIntervalSet, default initialized and not managed by a soap context
        virtual witsml2__ContactIntervalSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ContactIntervalSet); }
      public:
        /// Constructor with default initializations
        witsml2__ContactIntervalSet() : SlotsInterval(), OpenHoleInterval(), PerforationSetInterval(), GravelPackInterval(), soap() { }
        virtual ~witsml2__ContactIntervalSet() { }
        /// Friend allocator used by soap_new_witsml2__ContactIntervalSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ContactIntervalSet * SOAP_FMAC2 soap_instantiate_witsml2__ContactIntervalSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1925 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval (-848)
/* complex XML schema type 'witsml2:GravelPackInterval': */
class SOAP_CMAC witsml2__GravelPackInterval {
      public:
        /// Optional element 'witsml2:DownholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string *DownholeStringReferenceId;
        /// Optional element 'witsml2:GravelPackMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *GravelPackMdInterval;
        /// Optional element 'witsml2:GravelPackTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *GravelPackTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XML schema type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GravelPackInterval, default initialized and not managed by a soap context
        virtual witsml2__GravelPackInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GravelPackInterval); }
      public:
        /// Constructor with default initializations
        witsml2__GravelPackInterval() : DownholeStringReferenceId(), GravelPackMdInterval(), GravelPackTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__GravelPackInterval() { }
        /// Friend allocator used by soap_new_witsml2__GravelPackInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GravelPackInterval * SOAP_FMAC2 soap_instantiate_witsml2__GravelPackInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1927 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory (-849)
/* complex XML schema type 'witsml2:IntervalStatusHistory': */
class SOAP_CMAC witsml2__IntervalStatusHistory {
      public:
        /// Optional element 'witsml2:PhysicalStatus' of XML schema type 'witsml2:PhysicalStatus'
        enum witsml2__PhysicalStatus *PhysicalStatus;
        /// Optional element 'witsml2:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml2:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml2:StatusMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *StatusMdInterval;
        /// Optional element 'witsml2:AllocationFactor' of XML schema type 'witsml2:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IntervalStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__IntervalStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IntervalStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml2__IntervalStatusHistory() : PhysicalStatus(), StartDate(), EndDate(), StatusMdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml2__IntervalStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__IntervalStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IntervalStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__IntervalStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1929 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval (-850)
/* complex XML schema type 'witsml2:OpenHoleInterval': */
class SOAP_CMAC witsml2__OpenHoleInterval {
      public:
        /// Optional element 'witsml2:BoreholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string *BoreholeStringReferenceId;
        /// Optional element 'witsml2:OpenHoleMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *OpenHoleMdInterval;
        /// Optional element 'witsml2:OpenHoleTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *OpenHoleTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XML schema type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OpenHoleInterval, default initialized and not managed by a soap context
        virtual witsml2__OpenHoleInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OpenHoleInterval); }
      public:
        /// Constructor with default initializations
        witsml2__OpenHoleInterval() : BoreholeStringReferenceId(), OpenHoleMdInterval(), OpenHoleTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__OpenHoleInterval() { }
        /// Friend allocator used by soap_new_witsml2__OpenHoleInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OpenHoleInterval * SOAP_FMAC2 soap_instantiate_witsml2__OpenHoleInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1931 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval (-851)
/* complex XML schema type 'witsml2:PerforationSetInterval': */
class SOAP_CMAC witsml2__PerforationSetInterval {
      public:
        /// Optional element 'witsml2:PerforationSetReferenceId' of XML schema type 'eml21:String64'
        std::string *PerforationSetReferenceId;
        /// Optional element 'witsml2:PerforationSetMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationSetMdInterval;
        /// Optional element 'witsml2:PerforationSetTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationSetTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:PerforationStatusHistory' of XML schema type 'witsml2:PerforationStatusHistory'
        std::vector<witsml2__PerforationStatusHistory *> PerforationStatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSetInterval, default initialized and not managed by a soap context
        virtual witsml2__PerforationSetInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSetInterval); }
      public:
        /// Constructor with default initializations
        witsml2__PerforationSetInterval() : PerforationSetReferenceId(), PerforationSetMdInterval(), PerforationSetTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), PerforationStatusHistory(), uid(), soap() { }
        virtual ~witsml2__PerforationSetInterval() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSetInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSetInterval * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSetInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1933 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory (-852)
/* complex XML schema type 'witsml2:PerforationStatusHistory': */
class SOAP_CMAC witsml2__PerforationStatusHistory {
      public:
        /// Optional element 'witsml2:PerforationStatus' of XML schema type 'witsml2:PerforationStatus'
        enum witsml2__PerforationStatus *PerforationStatus;
        /// Optional element 'witsml2:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml2:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml2:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:PerforationTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml2:AllocationFactor' of XML schema type 'witsml2:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__PerforationStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml2__PerforationStatusHistory() : PerforationStatus(), StartDate(), EndDate(), PerforationMdInterval(), PerforationTvdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml2__PerforationStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__PerforationStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__PerforationStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1935 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval (-853)
/* complex XML schema type 'witsml2:SlotsInterval': */
class SOAP_CMAC witsml2__SlotsInterval {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string *StringEquipmentReferenceId;
        /// Optional element 'witsml2:SlottedMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *SlottedMdInterval;
        /// Optional element 'witsml2:SlottedTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *SlottedTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureRefID' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XML schema type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SlotsInterval, default initialized and not managed by a soap context
        virtual witsml2__SlotsInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SlotsInterval); }
      public:
        /// Constructor with default initializations
        witsml2__SlotsInterval() : StringEquipmentReferenceId(), SlottedMdInterval(), SlottedTvdInterval(), EventHistory(), GeologyFeatureRefID(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__SlotsInterval() { }
        /// Friend allocator used by soap_new_witsml2__SlotsInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SlotsInterval * SOAP_FMAC2 soap_instantiate_witsml2__SlotsInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:277 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray (-24)
/* complex XML schema type 'eml21:AbstractBooleanArray': */
class SOAP_CMAC eml21__AbstractBooleanArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractBooleanArray, default initialized and not managed by a soap context
        virtual eml21__AbstractBooleanArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractBooleanArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractBooleanArray() { }
        virtual ~eml21__AbstractBooleanArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractBooleanArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractBooleanArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractBooleanArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:283 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray (-27)
/* complex XML schema type 'eml21:AbstractNumericArray': */
class SOAP_CMAC eml21__AbstractNumericArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractNumericArray, default initialized and not managed by a soap context
        virtual eml21__AbstractNumericArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractNumericArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractNumericArray() { }
        virtual ~eml21__AbstractNumericArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractNumericArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractNumericArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractNumericArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:285 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray (-28)
/* complex XML schema type 'eml21:AbstractStringArray': */
class SOAP_CMAC eml21__AbstractStringArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractStringArray, default initialized and not managed by a soap context
        virtual eml21__AbstractStringArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractStringArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractStringArray() { }
        virtual ~eml21__AbstractStringArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractStringArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractStringArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractStringArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1067 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference (-419)
/* complex XML schema type 'eml21:EpcExternalPartReference': */
class SOAP_CMAC eml21__EpcExternalPartReference : public eml21__AbstractObject {
      public:
        /// Optional element 'eml21:Filename' of XML schema type 'eml21:String2000'
        std::string *Filename;
        /// Optional element 'eml21:MimeType' of XML schema type 'eml21:String2000'
        std::string *MimeType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EpcExternalPartReference, default initialized and not managed by a soap context
        virtual eml21__EpcExternalPartReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EpcExternalPartReference); }
      public:
        /// Constructor with default initializations
        eml21__EpcExternalPartReference() : Filename(), MimeType() { }
        virtual ~eml21__EpcExternalPartReference() { }
        /// Friend allocator used by soap_new_eml21__EpcExternalPartReference(struct soap*, int)
        friend SOAP_FMAC1 eml21__EpcExternalPartReference * SOAP_FMAC2 soap_instantiate_eml21__EpcExternalPartReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1077 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1_eml21__Activity (-424)
/* complex XML schema type 'eml21:Activity': */
class SOAP_CMAC eml21__Activity : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:ActivityDescriptor' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ActivityDescriptor;
        /// Optional element 'eml21:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
        /// Required element 'eml21:Parameter' of XML schema type 'eml21:AbstractActivityParameter'
        std::vector<eml21__AbstractActivityParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__Activity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__Activity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__Activity, default initialized and not managed by a soap context
        virtual eml21__Activity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__Activity); }
      public:
        /// Constructor with default initializations
        eml21__Activity() : ActivityDescriptor(), Parent(), Parameter() { }
        virtual ~eml21__Activity() { }
        /// Friend allocator used by soap_new_eml21__Activity(struct soap*, int)
        friend SOAP_FMAC1 eml21__Activity * SOAP_FMAC2 soap_instantiate_eml21__Activity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1079 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate (-425)
/* complex XML schema type 'eml21:ActivityTemplate': */
class SOAP_CMAC eml21__ActivityTemplate : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Parameter' of XML schema type 'eml21:ParameterTemplate'
        std::vector<eml21__ParameterTemplate *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityTemplate, default initialized and not managed by a soap context
        virtual eml21__ActivityTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityTemplate); }
      public:
        /// Constructor with default initializations
        eml21__ActivityTemplate() : Parameter() { }
        virtual ~eml21__ActivityTemplate() { }
        /// Friend allocator used by soap_new_eml21__ActivityTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityTemplate * SOAP_FMAC2 soap_instantiate_eml21__ActivityTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1081 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter (-426)
/* complex XML schema type 'eml21:DataObjectParameter': */
class SOAP_CMAC eml21__DataObjectParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:DataObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataObjectParameter, default initialized and not managed by a soap context
        virtual eml21__DataObjectParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataObjectParameter); }
      public:
        /// Constructor with default initializations
        eml21__DataObjectParameter() : DataObject() { }
        virtual ~eml21__DataObjectParameter() { }
        /// Friend allocator used by soap_new_eml21__DataObjectParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataObjectParameter * SOAP_FMAC2 soap_instantiate_eml21__DataObjectParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1083 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter (-427)
/* complex XML schema type 'eml21:DoubleQuantityParameter': */
class SOAP_CMAC eml21__DoubleQuantityParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml21:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Optional element 'eml21:CustomUnitDictionary' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoubleQuantityParameter, default initialized and not managed by a soap context
        virtual eml21__DoubleQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoubleQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml21__DoubleQuantityParameter() : Value(), Uom(), CustomUnitDictionary() { }
        virtual ~eml21__DoubleQuantityParameter() { }
        /// Friend allocator used by soap_new_eml21__DoubleQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoubleQuantityParameter * SOAP_FMAC2 soap_instantiate_eml21__DoubleQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1085 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter (-428)
/* complex XML schema type 'eml21:IntegerQuantityParameter': */
class SOAP_CMAC eml21__IntegerQuantityParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerQuantityParameter, default initialized and not managed by a soap context
        virtual eml21__IntegerQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml21__IntegerQuantityParameter() : Value() { }
        virtual ~eml21__IntegerQuantityParameter() { }
        /// Friend allocator used by soap_new_eml21__IntegerQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerQuantityParameter * SOAP_FMAC2 soap_instantiate_eml21__IntegerQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1087 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey (-429)
/* complex XML schema type 'eml21:ObjectParameterKey': */
class SOAP_CMAC eml21__ObjectParameterKey : public eml21__AbstractParameterKey {
      public:
        /// Required element 'eml21:DataObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ObjectParameterKey, default initialized and not managed by a soap context
        virtual eml21__ObjectParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ObjectParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__ObjectParameterKey() : DataObject() { }
        virtual ~eml21__ObjectParameterKey() { }
        /// Friend allocator used by soap_new_eml21__ObjectParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__ObjectParameterKey * SOAP_FMAC2 soap_instantiate_eml21__ObjectParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1091 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter (-431)
/* complex XML schema type 'eml21:StringParameter': */
class SOAP_CMAC eml21__StringParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'eml21:String2000'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringParameter, default initialized and not managed by a soap context
        virtual eml21__StringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringParameter); }
      public:
        /// Constructor with default initializations
        eml21__StringParameter() : Value() { }
        virtual ~eml21__StringParameter() { }
        /// Friend allocator used by soap_new_eml21__StringParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringParameter * SOAP_FMAC2 soap_instantiate_eml21__StringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1093 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter (-432)
/* complex XML schema type 'eml21:TimeIndexParameter': */
class SOAP_CMAC eml21__TimeIndexParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:TimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndexParameter, default initialized and not managed by a soap context
        virtual eml21__TimeIndexParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndexParameter); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndexParameter() : TimeIndex() { }
        virtual ~eml21__TimeIndexParameter() { }
        /// Friend allocator used by soap_new_eml21__TimeIndexParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndexParameter * SOAP_FMAC2 soap_instantiate_eml21__TimeIndexParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1095 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey (-433)
/* complex XML schema type 'eml21:TimeIndexParameterKey': */
class SOAP_CMAC eml21__TimeIndexParameterKey : public eml21__AbstractParameterKey {
      public:
        /// Required element 'eml21:TimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndexParameterKey, default initialized and not managed by a soap context
        virtual eml21__TimeIndexParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndexParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndexParameterKey() : TimeIndex() { }
        virtual ~eml21__TimeIndexParameterKey() { }
        /// Friend allocator used by soap_new_eml21__TimeIndexParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndexParameterKey * SOAP_FMAC2 soap_instantiate_eml21__TimeIndexParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1099 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind (-435)
/* complex XML schema type 'eml21:PropertyKind': */
class SOAP_CMAC eml21__PropertyKind : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:IsAbstract' of XML schema type 'xsd:boolean'
        bool IsAbstract;
        /// Optional element 'eml21:DeprecationDate' of XML schema type 'eml21:TimeStamp'
        std::string *DeprecationDate;
        /// Required element 'eml21:QuantityClass' of XML schema type 'eml21:QuantityClassKindExt'
        std::string QuantityClass;
        /// Optional element 'eml21:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PropertyKind, default initialized and not managed by a soap context
        virtual eml21__PropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PropertyKind); }
      public:
        /// Constructor with default initializations
        eml21__PropertyKind() : IsAbstract(), DeprecationDate(), QuantityClass(), Parent() { }
        virtual ~eml21__PropertyKind() { }
        /// Friend allocator used by soap_new_eml21__PropertyKind(struct soap*, int)
        friend SOAP_FMAC1 eml21__PropertyKind * SOAP_FMAC2 soap_instantiate_eml21__PropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1101 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary (-436)
/* complex XML schema type 'eml21:PropertyKindDictionary': */
class SOAP_CMAC eml21__PropertyKindDictionary : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:PropertyKind' of XML schema type 'eml21:PropertyKind'
        std::vector<eml21__PropertyKind *> PropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PropertyKindDictionary, default initialized and not managed by a soap context
        virtual eml21__PropertyKindDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PropertyKindDictionary); }
      public:
        /// Constructor with default initializations
        eml21__PropertyKindDictionary() : PropertyKind() { }
        virtual ~eml21__PropertyKindDictionary() { }
        /// Friend allocator used by soap_new_eml21__PropertyKindDictionary(struct soap*, int)
        friend SOAP_FMAC1 eml21__PropertyKindDictionary * SOAP_FMAC2 soap_instantiate_eml21__PropertyKindDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1107 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries (-439)
/* complex XML schema type 'eml21:TimeSeries': */
class SOAP_CMAC eml21__TimeSeries : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Time' of XML schema type 'eml21:GeologicTime'
        std::vector<eml21__GeologicTime *> Time;
        /// Optional element 'eml21:TimeSeriesParentage' of XML schema type 'eml21:TimeSeriesParentage'
        eml21__TimeSeriesParentage *TimeSeriesParentage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeSeries, default initialized and not managed by a soap context
        virtual eml21__TimeSeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeSeries); }
      public:
        /// Constructor with default initializations
        eml21__TimeSeries() : Time(), TimeSeriesParentage() { }
        virtual ~eml21__TimeSeries() { }
        /// Friend allocator used by soap_new_eml21__TimeSeries(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeSeries * SOAP_FMAC2 soap_instantiate_eml21__TimeSeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1111 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure (-441)
/* complex XML schema type 'eml21:AbsolutePressure': */
class SOAP_CMAC eml21__AbsolutePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:AbsolutePressure' of XML schema type 'eml21:PressureMeasureExt'
        eml21__PressureMeasureExt *AbsolutePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsolutePressure, default initialized and not managed by a soap context
        virtual eml21__AbsolutePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsolutePressure); }
      public:
        /// Constructor with default initializations
        eml21__AbsolutePressure() : AbsolutePressure() { }
        virtual ~eml21__AbsolutePressure() { }
        /// Friend allocator used by soap_new_eml21__AbsolutePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsolutePressure * SOAP_FMAC2 soap_instantiate_eml21__AbsolutePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1121 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure (-446)
/* complex XML schema type 'eml21:GaugePressure': */
class SOAP_CMAC eml21__GaugePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:GaugePressure' of XML schema type 'eml21:PressureMeasureExt'
        eml21__PressureMeasureExt *GaugePressure;
        /// Optional element 'eml21:ReferencePressure' of XML schema type 'eml21:ReferencePressure'
        eml21__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GaugePressure, default initialized and not managed by a soap context
        virtual eml21__GaugePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GaugePressure); }
      public:
        /// Constructor with default initializations
        eml21__GaugePressure() : GaugePressure(), ReferencePressure() { }
        virtual ~eml21__GaugePressure() { }
        /// Friend allocator used by soap_new_eml21__GaugePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__GaugePressure * SOAP_FMAC2 soap_instantiate_eml21__GaugePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:42227 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure_
#define SOAP_TYPE_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure_ (-1903)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml21__union_ReferenceTemperaturePressure_
{
        #define SOAP_UNION_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure__ReferenceTempPres	(1)	/**< union variant selector value for member ReferenceTempPres */
        std::string *ReferenceTempPres;
};
#endif

/* eml2_1ForGsoap.h:1127 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure (-449)
/* complex XML schema type 'eml21:ReferenceTemperaturePressure': */
class SOAP_CMAC eml21__ReferenceTemperaturePressure : public eml21__AbstractTemperaturePressure {
      public:
        /// Union with union _eml21__union_ReferenceTemperaturePressure_ variant selector __union_ReferenceTemperaturePressure_ set to one of: SOAP_UNION_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure__ReferenceTempPres
        int __union_ReferenceTemperaturePressure_;
        union _eml21__union_ReferenceTemperaturePressure_ union_ReferenceTemperaturePressure_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReferenceTemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__ReferenceTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReferenceTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__ReferenceTemperaturePressure() : __union_ReferenceTemperaturePressure_() { }
        virtual ~eml21__ReferenceTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__ReferenceTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReferenceTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__ReferenceTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1129 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure (-450)
/* complex XML schema type 'eml21:RelativePressure': */
class SOAP_CMAC eml21__RelativePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:RelativePressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *RelativePressure;
        /// Required element 'eml21:ReferencePressure' of XML schema type 'eml21:ReferencePressure'
        eml21__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RelativePressure, default initialized and not managed by a soap context
        virtual eml21__RelativePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RelativePressure); }
      public:
        /// Constructor with default initializations
        eml21__RelativePressure() : RelativePressure(), ReferencePressure() { }
        virtual ~eml21__RelativePressure() { }
        /// Friend allocator used by soap_new_eml21__RelativePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RelativePressure * SOAP_FMAC2 soap_instantiate_eml21__RelativePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1131 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure (-451)
/* complex XML schema type 'eml21:TemperaturePressure': */
class SOAP_CMAC eml21__TemperaturePressure : public eml21__AbstractTemperaturePressure {
      public:
        /// Required element 'eml21:Temperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'eml21:Pressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__TemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__TemperaturePressure() : Temperature(), Pressure() { }
        virtual ~eml21__TemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__TemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__TemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1141 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs (-456)
/* complex XML schema type 'eml21:GeodeticCrs': */
class SOAP_CMAC eml21__GeodeticCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:AbstractGeodeticCrs' of XML schema type 'eml21:AbstractGeodeticCrs'
        eml21__AbstractGeodeticCrs *AbstractGeodeticCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticCrs() : AbstractGeodeticCrs() { }
        virtual ~eml21__GeodeticCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1143 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs (-457)
/* complex XML schema type 'eml21:GeodeticEpsgCrs': */
class SOAP_CMAC eml21__GeodeticEpsgCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticEpsgCrs() : EpsgCode() { }
        virtual ~eml21__GeodeticEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1145 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs (-458)
/* complex XML schema type 'eml21:GeodeticGmlCrs': */
class SOAP_CMAC eml21__GeodeticGmlCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:GmlProjectedCrsDefinition' of XML schema type 'gml:GeodeticCRSType'
        gml__GeodeticCRSType *GmlProjectedCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticGmlCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticGmlCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticGmlCrs() : GmlProjectedCrsDefinition() { }
        virtual ~eml21__GeodeticGmlCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticGmlCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1147 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs (-459)
/* complex XML schema type 'eml21:GeodeticLocalAuthorityCrs': */
class SOAP_CMAC eml21__GeodeticLocalAuthorityCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__GeodeticLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1149 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs (-460)
/* complex XML schema type 'eml21:GeodeticUnknownCrs': */
class SOAP_CMAC eml21__GeodeticUnknownCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticUnknownCrs() : Unknown() { }
        virtual ~eml21__GeodeticUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1151 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs (-461)
/* complex XML schema type 'eml21:GeodeticWktCrs': */
class SOAP_CMAC eml21__GeodeticWktCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticWktCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticWktCrs() : WellKnownText() { }
        virtual ~eml21__GeodeticWktCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticWktCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1153 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs (-462)
/* complex XML schema type 'eml21:ProjectedCrs': */
class SOAP_CMAC eml21__ProjectedCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:AxisOrder' of XML schema type 'eml21:AxisOrder2d'
        enum eml21__AxisOrder2d AxisOrder;
        /// Required element 'eml21:AbstractProjectedCrs' of XML schema type 'eml21:AbstractProjectedCrs'
        eml21__AbstractProjectedCrs *AbstractProjectedCrs;
        /// Optional attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string *uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedCrs() : AxisOrder(), AbstractProjectedCrs(), uom() { }
        virtual ~eml21__ProjectedCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1155 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs (-463)
/* complex XML schema type 'eml21:ProjectedEpsgCrs': */
class SOAP_CMAC eml21__ProjectedEpsgCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedEpsgCrs() : EpsgCode() { }
        virtual ~eml21__ProjectedEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1157 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs (-464)
/* complex XML schema type 'eml21:ProjectedGmlCrs': */
class SOAP_CMAC eml21__ProjectedGmlCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:GmlProjectedCrsDefinition' of XML schema type 'gml:ProjectedCRSType'
        gml__ProjectedCRSType *GmlProjectedCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedGmlCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedGmlCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedGmlCrs() : GmlProjectedCrsDefinition() { }
        virtual ~eml21__ProjectedGmlCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedGmlCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1159 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs (-465)
/* complex XML schema type 'eml21:ProjectedLocalAuthorityCrs': */
class SOAP_CMAC eml21__ProjectedLocalAuthorityCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__ProjectedLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1161 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs (-466)
/* complex XML schema type 'eml21:ProjectedUnknownCrs': */
class SOAP_CMAC eml21__ProjectedUnknownCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedUnknownCrs() : Unknown() { }
        virtual ~eml21__ProjectedUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1163 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs (-467)
/* complex XML schema type 'eml21:ProjectedWktCrs': */
class SOAP_CMAC eml21__ProjectedWktCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedWktCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedWktCrs() : WellKnownText() { }
        virtual ~eml21__ProjectedWktCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedWktCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1165 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs (-468)
/* complex XML schema type 'eml21:VerticalCrs': */
class SOAP_CMAC eml21__VerticalCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Direction' of XML schema type 'eml21:VerticalDirection'
        enum eml21__VerticalDirection Direction;
        /// Required element 'eml21:AbstractVerticalCrs' of XML schema type 'eml21:AbstractVerticalCrs'
        eml21__AbstractVerticalCrs *AbstractVerticalCrs;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCrs() : Direction(), AbstractVerticalCrs(), uom() { }
        virtual ~eml21__VerticalCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1167 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs (-469)
/* complex XML schema type 'eml21:VerticalEpsgCrs': */
class SOAP_CMAC eml21__VerticalEpsgCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalEpsgCrs() : EpsgCode() { }
        virtual ~eml21__VerticalEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1169 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs (-470)
/* complex XML schema type 'eml21:VerticalGmlCrs': */
class SOAP_CMAC eml21__VerticalGmlCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:GmlVerticalCrsDefinition' of XML schema type 'gml:VerticalCRSType'
        gml__VerticalCRSType *GmlVerticalCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalGmlCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalGmlCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalGmlCrs() : GmlVerticalCrsDefinition() { }
        virtual ~eml21__VerticalGmlCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalGmlCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1171 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs (-471)
/* complex XML schema type 'eml21:VerticalLocalAuthorityCrs': */
class SOAP_CMAC eml21__VerticalLocalAuthorityCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__VerticalLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1173 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs (-472)
/* complex XML schema type 'eml21:VerticalUnknownCrs': */
class SOAP_CMAC eml21__VerticalUnknownCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalUnknownCrs() : Unknown() { }
        virtual ~eml21__VerticalUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1175 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs (-473)
/* complex XML schema type 'eml21:VerticalWktCrs': */
class SOAP_CMAC eml21__VerticalWktCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalWktCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalWktCrs() : WellKnownText() { }
        virtual ~eml21__VerticalWktCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalWktCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord (-474)
/* complex XML schema type 'eml21:DataAssuranceRecord': */
class SOAP_CMAC eml21__DataAssuranceRecord : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:PolicyId' of XML schema type 'eml21:String64'
        std::string PolicyId;
        /// Optional element 'eml21:PolicyName' of XML schema type 'eml21:String2000'
        std::string *PolicyName;
        /// Optional element 'eml21:ReferencedElementName' of XML schema type 'eml21:String64'
        std::string *ReferencedElementName;
        /// Optional element 'eml21:ReferencedElementUid' of XML schema type 'eml21:String64'
        std::string *ReferencedElementUid;
        /// Required element 'eml21:Origin' of XML schema type 'xsd:string'
        std::string Origin;
        /// Required element 'eml21:Conformance' of XML schema type 'xsd:boolean'
        bool Conformance;
        /// Required element 'eml21:Date' of XML schema type 'eml21:TimeStamp'
        std::string Date;
        /// Optional element 'eml21:Comment' of XML schema type 'xsd:string'
        std::string *Comment;
        /// Optional element 'eml21:FailingRules' of XML schema type 'eml21:FailingRule'
        std::vector<eml21__FailingRule *> FailingRules;
        /// Optional element 'eml21:IndexRange' of XML schema type 'eml21:IndexRange'
        eml21__IndexRange *IndexRange;
        /// Required element 'eml21:ReferencedData' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferencedData;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataAssuranceRecord, default initialized and not managed by a soap context
        virtual eml21__DataAssuranceRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataAssuranceRecord); }
      public:
        /// Constructor with default initializations
        eml21__DataAssuranceRecord() : PolicyId(), PolicyName(), ReferencedElementName(), ReferencedElementUid(), Origin(), Conformance(), Date(), Comment(), FailingRules(), IndexRange(), ReferencedData() { }
        virtual ~eml21__DataAssuranceRecord() { }
        /// Friend allocator used by soap_new_eml21__DataAssuranceRecord(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataAssuranceRecord * SOAP_FMAC2 soap_instantiate_eml21__DataAssuranceRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1185 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet (-478)
/* complex XML schema type 'eml21:GraphicalInformationSet': */
class SOAP_CMAC eml21__GraphicalInformationSet : public eml21__AbstractObject {
      public:
        /// Optional element 'eml21:GraphicalInformation' of XML schema type 'eml21:AbstractGraphicalInformation'
        std::vector<eml21__AbstractGraphicalInformation *> GraphicalInformation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GraphicalInformationSet, default initialized and not managed by a soap context
        virtual eml21__GraphicalInformationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GraphicalInformationSet); }
      public:
        /// Constructor with default initializations
        eml21__GraphicalInformationSet() : GraphicalInformation() { }
        virtual ~eml21__GraphicalInformationSet() { }
        /// Friend allocator used by soap_new_eml21__GraphicalInformationSet(struct soap*, int)
        friend SOAP_FMAC1 eml21__GraphicalInformationSet * SOAP_FMAC2 soap_instantiate_eml21__GraphicalInformationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1195 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType (-483)
/* complex XML schema type 'gml:DefinitionBaseType': */
class SOAP_CMAC gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionBaseType, default initialized and not managed by a soap context
        virtual gml__DefinitionBaseType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionBaseType); }
      public:
        /// Constructor with default initializations
        gml__DefinitionBaseType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__DefinitionBaseType() { }
        /// Friend allocator used by soap_new_gml__DefinitionBaseType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionBaseType * SOAP_FMAC2 soap_instantiate_gml__DefinitionBaseType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1199 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType (-485)
/* simple XML schema type 'gml:StringOrRefType': */
class SOAP_CMAC gml__StringOrRefType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__StringOrRefType, default initialized and not managed by a soap context
        virtual gml__StringOrRefType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__StringOrRefType); }
      public:
        /// Constructor with default initializations
        gml__StringOrRefType() : __item(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__StringOrRefType() { }
        /// Friend allocator used by soap_new_gml__StringOrRefType(struct soap*, int)
        friend SOAP_FMAC1 gml__StringOrRefType * SOAP_FMAC2 soap_instantiate_gml__StringOrRefType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1205 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_1_gml__CodeType (-488)
/* simple XML schema type 'gml:CodeType': */
class SOAP_CMAC gml__CodeType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Optional attribute 'codeSpace' of XML schema type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CodeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CodeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeType, default initialized and not managed by a soap context
        virtual gml__CodeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeType); }
      public:
        /// Constructor with default initializations
        gml__CodeType() : __item(), codeSpace(), soap() { }
        virtual ~gml__CodeType() { }
        /// Friend allocator used by soap_new_gml__CodeType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeType * SOAP_FMAC2 soap_instantiate_gml__CodeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1209 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType (-490)
/* complex XML schema type 'gml:AbstractTimeObjectType': */
class SOAP_CMAC gml__AbstractTimeObjectType : public gml__AbstractGMLType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimeObjectType, default initialized and not managed by a soap context
        virtual gml__AbstractTimeObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimeObjectType); }
      public:
        /// Constructor with default initializations
        gml__AbstractTimeObjectType() { }
        virtual ~gml__AbstractTimeObjectType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimeObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimeObjectType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimeObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1211 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType (-491)
/* complex XML schema type 'gml:RelatedTimeType': */
class SOAP_CMAC gml__RelatedTimeType : public gml__TimePrimitivePropertyType {
      public:
        /// Optional attribute 'relativePosition' of XML schema type 'gml:RelatedTimeType-relativePosition'
        enum _gml__RelatedTimeType_relativePosition *relativePosition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__RelatedTimeType, default initialized and not managed by a soap context
        virtual gml__RelatedTimeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__RelatedTimeType); }
      public:
        /// Constructor with default initializations
        gml__RelatedTimeType() : relativePosition() { }
        virtual ~gml__RelatedTimeType() { }
        /// Friend allocator used by soap_new_gml__RelatedTimeType(struct soap*, int)
        friend SOAP_FMAC1 gml__RelatedTimeType * SOAP_FMAC2 soap_instantiate_gml__RelatedTimeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1245 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_1_gml__MeasureType (-508)
/* simple XML schema type 'gml:MeasureType': */
class SOAP_CMAC gml__MeasureType {
      public:
        /// Simple content of XML schema type 'xsd:double' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__MeasureType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__MeasureType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__MeasureType, default initialized and not managed by a soap context
        virtual gml__MeasureType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__MeasureType); }
      public:
        /// Constructor with default initializations
        gml__MeasureType() : __item(), soap() { }
        virtual ~gml__MeasureType() { }
        /// Friend allocator used by soap_new_gml__MeasureType(struct soap*, int)
        friend SOAP_FMAC1 gml__MeasureType * SOAP_FMAC2 soap_instantiate_gml__MeasureType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1285 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType (-528)
/* complex XML schema type 'gmd:EX_Extent_Type': */
class SOAP_CMAC gmd__EX_USCOREExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:description' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:geographicElement' of XML schema type 'gmd:EX_GeographicExtent_PropertyType'
        std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *> geographicElement;
        /// Optional element 'gmd:temporalElement' of XML schema type 'gmd:EX_TemporalExtent_PropertyType'
        std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *> temporalElement;
        /// Optional element 'gmd:verticalElement' of XML schema type 'gmd:EX_VerticalExtent_PropertyType'
        std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *> verticalElement;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREExtent_USCOREType() : description(), geographicElement(), temporalElement(), verticalElement() { }
        virtual ~gmd__EX_USCOREExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1289 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-530)
/* complex XML schema type 'gmd:AbstractEX_GeographicExtent_Type': */
class SOAP_CMAC gmd__AbstractEX_USCOREGeographicExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:extentTypeCode' of XML schema type 'gco:Boolean_PropertyType'
        gco__Boolean_USCOREPropertyType *extentTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractEX_USCOREGeographicExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractEX_USCOREGeographicExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractEX_USCOREGeographicExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractEX_USCOREGeographicExtent_USCOREType() : extentTypeCode() { }
        virtual ~gmd__AbstractEX_USCOREGeographicExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractEX_USCOREGeographicExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1293 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType (-532)
/* complex XML schema type 'gmd:EX_TemporalExtent_Type': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:extent' of XML schema type 'gts:TM_Primitive_PropertyType'
        gts__TM_USCOREPrimitive_USCOREPropertyType *extent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCORETemporalExtent_USCOREType() : extent() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType (-534)
/* complex XML schema type 'gmd:EX_VerticalExtent_Type': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:minimumValue' of XML schema type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *minimumValue;
        /// Required element 'gmd:maximumValue' of XML schema type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *maximumValue;
        /// Required element 'gmd:verticalCRS' of XML schema type 'gsr:SC_CRS_PropertyType'
        gsr__SC_USCORECRS_USCOREPropertyType *verticalCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREVerticalExtent_USCOREType() : minimumValue(), maximumValue(), verticalCRS() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1301 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType (-536)
/* complex XML schema type 'gmd:AbstractDQ_Element_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREElement_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:nameOfMeasure' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> nameOfMeasure;
        /// Optional element 'gmd:measureIdentification' of XML schema type 'gmd:MD_Identifier_PropertyType'
        gmd__MD_USCOREIdentifier_USCOREPropertyType *measureIdentification;
        /// Optional element 'gmd:measureDescription' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *measureDescription;
        /// Optional element 'gmd:evaluationMethodType' of XML schema type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType'
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *evaluationMethodType;
        /// Optional element 'gmd:evaluationMethodDescription' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *evaluationMethodDescription;
        /// Optional element 'gmd:evaluationProcedure' of XML schema type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *evaluationProcedure;
        /// Optional element 'gmd:dateTime' of XML schema type 'gco:DateTime_PropertyType'
        std::vector<gco__DateTime_USCOREPropertyType *> dateTime;
        /// Sequence of 1 to 2 elements 'gmd:result' of XML schema type 'gmd:DQ_Result_PropertyType'
        std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *> result;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREElement_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREElement_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREElement_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREElement_USCOREType() : nameOfMeasure(), measureIdentification(), measureDescription(), evaluationMethodType(), evaluationMethodDescription(), evaluationProcedure(), dateTime(), result() { }
        virtual ~gmd__AbstractDQ_USCOREElement_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREElement_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1305 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType (-538)
/* complex XML schema type 'gmd:MD_Identifier_Type': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:authority' of XML schema type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *authority;
        /// Required element 'gmd:code' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *code;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__MD_USCOREIdentifier_USCOREType() : authority(), code() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1309 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType (-540)
/* complex XML schema type 'gmd:CI_Citation_Type': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:title' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *title;
        /// Optional element 'gmd:alternateTitle' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> alternateTitle;
        /// Required element 'gmd:date' of XML schema type 'gmd:CI_Date_PropertyType'
        std::vector<gmd__CI_USCOREDate_USCOREPropertyType *> date;
        /// Optional element 'gmd:edition' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *edition;
        /// Optional element 'gmd:editionDate' of XML schema type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *editionDate;
        /// Optional element 'gmd:identifier' of XML schema type 'gmd:MD_Identifier_PropertyType'
        std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *> identifier;
        /// Optional element 'gmd:citedResponsibleParty' of XML schema type 'gmd:CI_ResponsibleParty_PropertyType'
        std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *> citedResponsibleParty;
        /// Optional element 'gmd:presentationForm' of XML schema type 'gmd:CI_PresentationFormCode_PropertyType'
        std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *> presentationForm;
        /// Optional element 'gmd:series' of XML schema type 'gmd:CI_Series_PropertyType'
        gmd__CI_USCORESeries_USCOREPropertyType *series;
        /// Optional element 'gmd:otherCitationDetails' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *otherCitationDetails;
        /// Optional element 'gmd:collectiveTitle' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *collectiveTitle;
        /// Optional element 'gmd:ISBN' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISBN;
        /// Optional element 'gmd:ISSN' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISSN;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORECitation_USCOREType() : title(), alternateTitle(), date(), edition(), editionDate(), identifier(), citedResponsibleParty(), presentationForm(), series(), otherCitationDetails(), collectiveTitle(), ISBN(), ISSN() { }
        virtual ~gmd__CI_USCORECitation_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1313 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType (-542)
/* complex XML schema type 'gmd:CI_Date_Type': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:date' of XML schema type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *date;
        /// Required element 'gmd:dateType' of XML schema type 'gmd:CI_DateTypeCode_PropertyType'
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType *dateType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDate_USCOREType() : date(), dateType() { }
        virtual ~gmd__CI_USCOREDate_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1319 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType (-545)
/* complex XML schema type 'gmd:CI_ResponsibleParty_Type': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:individualName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *individualName;
        /// Optional element 'gmd:organisationName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *organisationName;
        /// Optional element 'gmd:positionName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *positionName;
        /// Optional element 'gmd:contactInfo' of XML schema type 'gmd:CI_Contact_PropertyType'
        gmd__CI_USCOREContact_USCOREPropertyType *contactInfo;
        /// Required element 'gmd:role' of XML schema type 'gmd:CI_RoleCode_PropertyType'
        gmd__CI_USCORERoleCode_USCOREPropertyType *role;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREResponsibleParty_USCOREType() : individualName(), organisationName(), positionName(), contactInfo(), role() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1323 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType (-547)
/* complex XML schema type 'gmd:CI_Contact_Type': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:phone' of XML schema type 'gmd:CI_Telephone_PropertyType'
        gmd__CI_USCORETelephone_USCOREPropertyType *phone;
        /// Optional element 'gmd:address' of XML schema type 'gmd:CI_Address_PropertyType'
        gmd__CI_USCOREAddress_USCOREPropertyType *address;
        /// Optional element 'gmd:onlineResource' of XML schema type 'gmd:CI_OnlineResource_PropertyType'
        gmd__CI_USCOREOnlineResource_USCOREPropertyType *onlineResource;
        /// Optional element 'gmd:hoursOfService' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *hoursOfService;
        /// Optional element 'gmd:contactInstructions' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *contactInstructions;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREContact_USCOREType() : phone(), address(), onlineResource(), hoursOfService(), contactInstructions() { }
        virtual ~gmd__CI_USCOREContact_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1327 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType (-549)
/* complex XML schema type 'gmd:CI_Telephone_Type': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:voice' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> voice;
        /// Optional element 'gmd:facsimile' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> facsimile;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORETelephone_USCOREType() : voice(), facsimile() { }
        virtual ~gmd__CI_USCORETelephone_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1331 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType (-551)
/* complex XML schema type 'gmd:CI_Address_Type': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:deliveryPoint' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> deliveryPoint;
        /// Optional element 'gmd:city' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *city;
        /// Optional element 'gmd:administrativeArea' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *administrativeArea;
        /// Optional element 'gmd:postalCode' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *postalCode;
        /// Optional element 'gmd:country' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *country;
        /// Optional element 'gmd:electronicMailAddress' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> electronicMailAddress;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREAddress_USCOREType() : deliveryPoint(), city(), administrativeArea(), postalCode(), country(), electronicMailAddress() { }
        virtual ~gmd__CI_USCOREAddress_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1335 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType (-553)
/* complex XML schema type 'gmd:CI_OnlineResource_Type': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:linkage' of XML schema type 'gmd:URL_PropertyType'
        gmd__URL_USCOREPropertyType *linkage;
        /// Optional element 'gmd:protocol' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *protocol;
        /// Optional element 'gmd:applicationProfile' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *applicationProfile;
        /// Optional element 'gmd:name' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:description' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:function' of XML schema type 'gmd:CI_OnLineFunctionCode_PropertyType'
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *function;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnlineResource_USCOREType() : linkage(), protocol(), applicationProfile(), name(), description(), function() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1347 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType (-559)
/* complex XML schema type 'gmd:CI_Series_Type': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:name' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:issueIdentification' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *issueIdentification;
        /// Optional element 'gmd:page' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *page;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORESeries_USCOREType() : name(), issueIdentification(), page() { }
        virtual ~gmd__CI_USCORESeries_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1353 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType (-562)
/* complex XML schema type 'gmd:AbstractDQ_Result_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREResult_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREResult_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREResult_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREResult_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREResult_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREResult_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREResult_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1367 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType (-569)
/* simple XML schema type 'gco:CodeListValue_Type': */
class SOAP_CMAC gco__CodeListValue_USCOREType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Required attribute 'codeList' of XML schema type 'xsd:anyURI'
        std::string codeList;
        /// Required attribute 'codeListValue' of XML schema type 'xsd:anyURI'
        std::string codeListValue;
        /// Optional attribute 'codeSpace' of XML schema type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CodeListValue_USCOREType, default initialized and not managed by a soap context
        virtual gco__CodeListValue_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CodeListValue_USCOREType); }
      public:
        /// Constructor with default initializations
        gco__CodeListValue_USCOREType() : __item(), codeList(), codeListValue(), codeSpace(), soap() { }
        virtual ~gco__CodeListValue_USCOREType() { }
        /// Friend allocator used by soap_new_gco__CodeListValue_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__CodeListValue_USCOREType * SOAP_FMAC2 soap_instantiate_gco__CodeListValue_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1373 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment (-572)
/* complex XML schema type 'witsml2:Attachment': */
class SOAP_CMAC witsml2__Attachment : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:Category' of XML schema type 'eml21:String64'
        std::string *Category;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Param' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> Param;
        /// Optional element 'witsml2:MdBit' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:FileName' of XML schema type 'eml21:String64'
        std::string *FileName;
        /// Optional element 'witsml2:FileType' of XML schema type 'eml21:String64'
        std::string *FileType;
        /// Required element 'witsml2:Content' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary Content;
        /// Optional element 'witsml2:ObjectReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ObjectReference;
        /// Optional element 'witsml2:SubObjectReference' of XML schema type 'eml21:String64'
        std::string *SubObjectReference;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Attachment, default initialized and not managed by a soap context
        virtual witsml2__Attachment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Attachment); }
      public:
        /// Constructor with default initializations
        witsml2__Attachment() : Category(), Md(), Param(), MdBit(), FileName(), FileType(), Content(), ObjectReference(), SubObjectReference(), Wellbore() { }
        virtual ~witsml2__Attachment() { }
        /// Friend allocator used by soap_new_witsml2__Attachment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Attachment * SOAP_FMAC2 soap_instantiate_witsml2__Attachment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1383 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore (-577)
/* complex XML schema type 'witsml2:Wellbore': */
class SOAP_CMAC witsml2__Wellbore : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:Number' of XML schema type 'eml21:String64'
        std::string *Number;
        /// Optional element 'witsml2:SuffixAPI' of XML schema type 'eml21:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml2:NumGovt' of XML schema type 'eml21:String64'
        std::string *NumGovt;
        /// Optional element 'witsml2:StatusWellbore' of XML schema type 'eml21:WellStatus'
        enum eml21__WellStatus *StatusWellbore;
        /// Optional element 'witsml2:IsActive' of XML schema type 'xsd:boolean'
        bool *IsActive;
        /// Optional element 'witsml2:PurposeWellbore' of XML schema type 'witsml2:WellPurpose'
        enum witsml2__WellPurpose *PurposeWellbore;
        /// Optional element 'witsml2:TypeWellbore' of XML schema type 'witsml2:WellboreType'
        enum witsml2__WellboreType *TypeWellbore;
        /// Optional element 'witsml2:Shape' of XML schema type 'witsml2:WellboreShape'
        enum witsml2__WellboreShape *Shape;
        /// Optional element 'witsml2:DTimKickoff' of XML schema type 'eml21:TimeStamp'
        std::string *DTimKickoff;
        /// Optional element 'witsml2:AchievedTD' of XML schema type 'xsd:boolean'
        bool *AchievedTD;
        /// Optional element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:MdBit' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:TvdBit' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdBit;
        /// Optional element 'witsml2:MdKickoff' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml2:TvdKickoff' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdKickoff;
        /// Optional element 'witsml2:MdPlanned' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:TvdPlanned' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdPlanned;
        /// Optional element 'witsml2:MdSubSeaPlanned' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdSubSeaPlanned;
        /// Optional element 'witsml2:TvdSubSeaPlanned' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdSubSeaPlanned;
        /// Optional element 'witsml2:DayTarget' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *DayTarget;
        /// Required element 'witsml2:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
        /// Optional element 'witsml2:ParentWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ParentWellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Wellbore, default initialized and not managed by a soap context
        virtual witsml2__Wellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Wellbore); }
      public:
        /// Constructor with default initializations
        witsml2__Wellbore() : Number(), SuffixAPI(), NumGovt(), StatusWellbore(), IsActive(), PurposeWellbore(), TypeWellbore(), Shape(), DTimKickoff(), AchievedTD(), Md(), Tvd(), MdBit(), TvdBit(), MdKickoff(), TvdKickoff(), MdPlanned(), TvdPlanned(), MdSubSeaPlanned(), TvdSubSeaPlanned(), DayTarget(), Well(), ParentWellbore() { }
        virtual ~witsml2__Wellbore() { }
        /// Friend allocator used by soap_new_witsml2__Wellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Wellbore * SOAP_FMAC2 soap_instantiate_witsml2__Wellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1391 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation (-581)
/* complex XML schema type 'witsml2:GeodeticWellLocation': */
class SOAP_CMAC witsml2__GeodeticWellLocation : public witsml2__AbstractWellLocation {
      public:
        /// Required element 'witsml2:Latitude' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Latitude;
        /// Required element 'witsml2:Longitude' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Longitude;
        /// Required element 'witsml2:Crs' of XML schema type 'eml21:AbstractGeodeticCrs'
        eml21__AbstractGeodeticCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeodeticWellLocation, default initialized and not managed by a soap context
        virtual witsml2__GeodeticWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeodeticWellLocation); }
      public:
        /// Constructor with default initializations
        witsml2__GeodeticWellLocation() : Latitude(), Longitude(), Crs() { }
        virtual ~witsml2__GeodeticWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__GeodeticWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeodeticWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__GeodeticWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1393 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation (-582)
/* complex XML schema type 'witsml2:ProjectedWellLocation': */
class SOAP_CMAC witsml2__ProjectedWellLocation : public witsml2__AbstractWellLocation {
      public:
        /// Required element 'witsml2:Coordinate1' of XML schema type 'xsd:double'
        double Coordinate1;
        /// Required element 'witsml2:Coordinate2' of XML schema type 'xsd:double'
        double Coordinate2;
        /// Required element 'witsml2:Crs' of XML schema type 'eml21:AbstractProjectedCrs'
        eml21__AbstractProjectedCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ProjectedWellLocation, default initialized and not managed by a soap context
        virtual witsml2__ProjectedWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ProjectedWellLocation); }
      public:
        /// Constructor with default initializations
        witsml2__ProjectedWellLocation() : Coordinate1(), Coordinate2(), Crs() { }
        virtual ~witsml2__ProjectedWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__ProjectedWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ProjectedWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__ProjectedWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1395 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Well
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Well (-583)
/* complex XML schema type 'witsml2:Well': */
class SOAP_CMAC witsml2__Well : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:NameLegal' of XML schema type 'eml21:String64'
        std::string *NameLegal;
        /// Optional element 'witsml2:NumLicense' of XML schema type 'eml21:String64'
        std::string *NumLicense;
        /// Optional element 'witsml2:NumGovt' of XML schema type 'eml21:String64'
        std::string *NumGovt;
        /// Optional element 'witsml2:DTimLicense' of XML schema type 'eml21:TimeStamp'
        std::string *DTimLicense;
        /// Optional element 'witsml2:Field' of XML schema type 'eml21:String64'
        std::string *Field;
        /// Optional element 'witsml2:Country' of XML schema type 'eml21:String64'
        std::string *Country;
        /// Optional element 'witsml2:State' of XML schema type 'eml21:String64'
        std::string *State;
        /// Optional element 'witsml2:County' of XML schema type 'eml21:String64'
        std::string *County;
        /// Optional element 'witsml2:Region' of XML schema type 'eml21:String64'
        std::string *Region;
        /// Optional element 'witsml2:District' of XML schema type 'eml21:String64'
        std::string *District;
        /// Optional element 'witsml2:Block' of XML schema type 'eml21:String64'
        std::string *Block;
        /// Optional element 'witsml2:TimeZone' of XML schema type 'eml21:TimeZone'
        std::string *TimeZone;
        /// Optional element 'witsml2:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml2:OperatorDiv' of XML schema type 'eml21:String64'
        std::string *OperatorDiv;
        /// Optional element 'witsml2:OriginalOperator' of XML schema type 'eml21:String64'
        std::string *OriginalOperator;
        /// Optional element 'witsml2:PcInterest' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *PcInterest;
        /// Optional element 'witsml2:NumAPI' of XML schema type 'eml21:String64'
        std::string *NumAPI;
        /// Optional element 'witsml2:StatusWell' of XML schema type 'eml21:WellStatus'
        enum eml21__WellStatus *StatusWell;
        /// Optional element 'witsml2:PurposeWell' of XML schema type 'witsml2:WellPurpose'
        enum witsml2__WellPurpose *PurposeWell;
        /// Optional element 'witsml2:FluidWell' of XML schema type 'witsml2:WellFluid'
        enum witsml2__WellFluid *FluidWell;
        /// Optional element 'witsml2:DirectionWell' of XML schema type 'witsml2:WellDirection'
        enum witsml2__WellDirection *DirectionWell;
        /// Optional element 'witsml2:DTimSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimSpud;
        /// Optional element 'witsml2:DTimPa' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPa;
        /// Optional element 'witsml2:WaterDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *WaterDepth;
        /// Optional element 'witsml2:GeographicLocationWGS84' of XML schema type 'witsml2:GeodeticWellLocation'
        witsml2__GeodeticWellLocation *GeographicLocationWGS84;
        /// Optional element 'witsml2:WellLocation' of XML schema type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> WellLocation;
        /// Optional element 'witsml2:WellPublicLandSurveySystemLocation' of XML schema type 'witsml2:PublicLandSurveySystem'
        witsml2__PublicLandSurveySystem *WellPublicLandSurveySystemLocation;
        /// Optional element 'witsml2:ReferencePoint' of XML schema type 'witsml2:ReferencePoint'
        std::vector<witsml2__ReferencePoint *> ReferencePoint;
        /// Optional element 'witsml2:WellheadElevation' of XML schema type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *WellheadElevation;
        /// Optional element 'witsml2:WellDatum' of XML schema type 'witsml2:WellDatum'
        std::vector<witsml2__WellDatum *> WellDatum;
        /// Optional element 'witsml2:GroundElevation' of XML schema type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *GroundElevation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Well
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Well; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Well, default initialized and not managed by a soap context
        virtual witsml2__Well *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Well); }
      public:
        /// Constructor with default initializations
        witsml2__Well() : NameLegal(), NumLicense(), NumGovt(), DTimLicense(), Field(), Country(), State(), County(), Region(), District(), Block(), TimeZone(), Operator(), OperatorDiv(), OriginalOperator(), PcInterest(), NumAPI(), StatusWell(), PurposeWell(), FluidWell(), DirectionWell(), DTimSpud(), DTimPa(), WaterDepth(), GeographicLocationWGS84(), WellLocation(), WellPublicLandSurveySystemLocation(), ReferencePoint(), WellheadElevation(), WellDatum(), GroundElevation() { }
        virtual ~witsml2__Well() { }
        /// Friend allocator used by soap_new_witsml2__Well(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Well * SOAP_FMAC2 soap_instantiate_witsml2__Well(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1409 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun (-590)
/* complex XML schema type 'witsml2:BhaRun': */
class SOAP_CMAC witsml2__BhaRun : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimStop' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStop;
        /// Optional element 'witsml2:DTimStartDrilling' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStartDrilling;
        /// Optional element 'witsml2:DTimStopDrilling' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStopDrilling;
        /// Optional element 'witsml2:PlanDogleg' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *PlanDogleg;
        /// Optional element 'witsml2:ActDogleg' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *ActDogleg;
        /// Optional element 'witsml2:ActDoglegMx' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *ActDoglegMx;
        /// Optional element 'witsml2:StatusBha' of XML schema type 'witsml2:BhaStatus'
        enum witsml2__BhaStatus *StatusBha;
        /// Optional element 'witsml2:NumBitRun' of XML schema type 'xsd:int'
        int *NumBitRun;
        /// Optional element 'witsml2:NumStringRun' of XML schema type 'xsd:int'
        int *NumStringRun;
        /// Optional element 'witsml2:ReasonTrip' of XML schema type 'eml21:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml2:ObjectiveBha' of XML schema type 'eml21:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml2:DrillingParams' of XML schema type 'witsml2:DrillingParams'
        std::vector<witsml2__DrillingParams *> DrillingParams;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:Tubular' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Tubular;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BhaRun, default initialized and not managed by a soap context
        virtual witsml2__BhaRun *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BhaRun); }
      public:
        /// Constructor with default initializations
        witsml2__BhaRun() : DTimStart(), DTimStop(), DTimStartDrilling(), DTimStopDrilling(), PlanDogleg(), ActDogleg(), ActDoglegMx(), StatusBha(), NumBitRun(), NumStringRun(), ReasonTrip(), ObjectiveBha(), DrillingParams(), Wellbore(), Tubular() { }
        virtual ~witsml2__BhaRun() { }
        /// Friend allocator used by soap_new_witsml2__BhaRun(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BhaRun * SOAP_FMAC2 soap_instantiate_witsml2__BhaRun(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1417 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport (-594)
/* complex XML schema type 'witsml2:FluidsReport': */
class SOAP_CMAC witsml2__FluidsReport : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Required element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:NumReport' of XML schema type 'xsd:int'
        int *NumReport;
        /// Optional element 'witsml2:Fluid' of XML schema type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidsReport, default initialized and not managed by a soap context
        virtual witsml2__FluidsReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidsReport); }
      public:
        /// Constructor with default initializations
        witsml2__FluidsReport() : DTim(), Md(), Tvd(), NumReport(), Fluid(), Wellbore() { }
        virtual ~witsml2__FluidsReport() { }
        /// Friend allocator used by soap_new_witsml2__FluidsReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidsReport * SOAP_FMAC2 soap_instantiate_witsml2__FluidsReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1419 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport (-595)
/* complex XML schema type 'witsml2:DrillReport': */
class SOAP_CMAC witsml2__DrillReport : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string DTimStart;
        /// Required element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string DTimEnd;
        /// Optional element 'witsml2:VersionKind' of XML schema type 'witsml2:OpsReportVersion'
        enum witsml2__OpsReportVersion *VersionKind;
        /// Optional element 'witsml2:CreateDate' of XML schema type 'eml21:TimeStamp'
        std::string *CreateDate;
        /// Optional element 'witsml2:WellDatum' of XML schema type 'witsml2:WellDatum'
        std::vector<witsml2__WellDatum *> WellDatum;
        /// Optional element 'witsml2:BitRecord' of XML schema type 'witsml2:BitRecord'
        std::vector<witsml2__BitRecord *> BitRecord;
        /// Optional element 'witsml2:DrillActivity' of XML schema type 'witsml2:DrillActivity'
        std::vector<witsml2__DrillActivity *> DrillActivity;
        /// Optional element 'witsml2:LogInfo' of XML schema type 'witsml2:DrillReportLogInfo'
        std::vector<witsml2__DrillReportLogInfo *> LogInfo;
        /// Optional element 'witsml2:CoreInfo' of XML schema type 'witsml2:DrillReportCoreInfo'
        std::vector<witsml2__DrillReportCoreInfo *> CoreInfo;
        /// Optional element 'witsml2:WellTestInfo' of XML schema type 'witsml2:DrillReportWellTestInfo'
        std::vector<witsml2__DrillReportWellTestInfo *> WellTestInfo;
        /// Optional element 'witsml2:FormTestInfo' of XML schema type 'witsml2:DrillReportFormTestInfo'
        std::vector<witsml2__DrillReportFormTestInfo *> FormTestInfo;
        /// Optional element 'witsml2:LithShowInfo' of XML schema type 'witsml2:DrillReportLithShowInfo'
        std::vector<witsml2__DrillReportLithShowInfo *> LithShowInfo;
        /// Optional element 'witsml2:EquipFailureInfo' of XML schema type 'witsml2:DrillReportEquipFailureInfo'
        std::vector<witsml2__DrillReportEquipFailureInfo *> EquipFailureInfo;
        /// Optional element 'witsml2:ControlIncidentInfo' of XML schema type 'witsml2:DrillReportControlIncidentInfo'
        std::vector<witsml2__DrillReportControlIncidentInfo *> ControlIncidentInfo;
        /// Optional element 'witsml2:StratInfo' of XML schema type 'witsml2:DrillReportStratInfo'
        std::vector<witsml2__DrillReportStratInfo *> StratInfo;
        /// Optional element 'witsml2:PerfInfo' of XML schema type 'witsml2:DrillReportPerfInfo'
        std::vector<witsml2__DrillReportPerfInfo *> PerfInfo;
        /// Optional element 'witsml2:GasReadingInfo' of XML schema type 'witsml2:DrillReportGasReadingInfo'
        std::vector<witsml2__DrillReportGasReadingInfo *> GasReadingInfo;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:WellAlias' of XML schema type 'eml21:ObjectAlias'
        eml21__ObjectAlias *WellAlias;
        /// Optional element 'witsml2:WellboreAlias' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> WellboreAlias;
        /// Optional element 'witsml2:WellboreInfo' of XML schema type 'witsml2:DrillReportWellboreInfo'
        witsml2__DrillReportWellboreInfo *WellboreInfo;
        /// Optional element 'witsml2:StatusInfo' of XML schema type 'witsml2:DrillReportStatusInfo'
        std::vector<witsml2__DrillReportStatusInfo *> StatusInfo;
        /// Optional element 'witsml2:Fluid' of XML schema type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Optional element 'witsml2:PorePressure' of XML schema type 'witsml2:DrillReportPorePressure'
        std::vector<witsml2__DrillReportPorePressure *> PorePressure;
        /// Optional element 'witsml2:ExtendedReport' of XML schema type 'witsml2:TimestampedCommentString'
        witsml2__TimestampedCommentString *ExtendedReport;
        /// Optional element 'witsml2:SurveyStation' of XML schema type 'witsml2:DrillReportSurveyStation'
        std::vector<witsml2__DrillReportSurveyStation *> SurveyStation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReport, default initialized and not managed by a soap context
        virtual witsml2__DrillReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReport); }
      public:
        /// Constructor with default initializations
        witsml2__DrillReport() : DTimStart(), DTimEnd(), VersionKind(), CreateDate(), WellDatum(), BitRecord(), DrillActivity(), LogInfo(), CoreInfo(), WellTestInfo(), FormTestInfo(), LithShowInfo(), EquipFailureInfo(), ControlIncidentInfo(), StratInfo(), PerfInfo(), GasReadingInfo(), Wellbore(), WellAlias(), WellboreAlias(), WellboreInfo(), StatusInfo(), Fluid(), PorePressure(), ExtendedReport(), SurveyStation() { }
        virtual ~witsml2__DrillReport() { }
        /// Friend allocator used by soap_new_witsml2__DrillReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReport * SOAP_FMAC2 soap_instantiate_witsml2__DrillReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:44789 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleCirculatingTemperature_sequence_ (-2003)
/* Wrapper: */
class SOAP_CMAC __witsml2__BottomHoleCirculatingTemperature_sequence_ {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleCirculatingTemperature_sequence_
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleCirculatingTemperature_sequence_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BottomHoleCirculatingTemperature_sequence_, default initialized and not managed by a soap context
        virtual __witsml2__BottomHoleCirculatingTemperature_sequence_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BottomHoleCirculatingTemperature_sequence_); }
      public:
        /// Constructor with default initializations
        __witsml2__BottomHoleCirculatingTemperature_sequence_() { }
        virtual ~__witsml2__BottomHoleCirculatingTemperature_sequence_() { }
        /// Friend allocator used by soap_new___witsml2__BottomHoleCirculatingTemperature_sequence_(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BottomHoleCirculatingTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml2__BottomHoleCirculatingTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1457 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature (-614)
/* complex XML schema type 'witsml2:BottomHoleCirculatingTemperature': */
class SOAP_CMAC witsml2__BottomHoleCirculatingTemperature : public witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__BottomHoleCirculatingTemperature_sequence_ *__BottomHoleCirculatingTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BottomHoleCirculatingTemperature, default initialized and not managed by a soap context
        virtual witsml2__BottomHoleCirculatingTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BottomHoleCirculatingTemperature); }
      public:
        /// Constructor with default initializations
        witsml2__BottomHoleCirculatingTemperature() : __BottomHoleCirculatingTemperature_sequence_() { }
        virtual ~witsml2__BottomHoleCirculatingTemperature() { }
        /// Friend allocator used by soap_new_witsml2__BottomHoleCirculatingTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BottomHoleCirculatingTemperature * SOAP_FMAC2 soap_instantiate_witsml2__BottomHoleCirculatingTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:44828 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleStaticTemperature_sequence_ (-2005)
/* Wrapper: */
class SOAP_CMAC __witsml2__BottomHoleStaticTemperature_sequence_ {
      public:
        /// Required element 'witsml2:eTimStatic' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *eTimStatic;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleStaticTemperature_sequence_
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__BottomHoleStaticTemperature_sequence_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BottomHoleStaticTemperature_sequence_, default initialized and not managed by a soap context
        virtual __witsml2__BottomHoleStaticTemperature_sequence_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BottomHoleStaticTemperature_sequence_); }
      public:
        /// Constructor with default initializations
        __witsml2__BottomHoleStaticTemperature_sequence_() : eTimStatic() { }
        virtual ~__witsml2__BottomHoleStaticTemperature_sequence_() { }
        /// Friend allocator used by soap_new___witsml2__BottomHoleStaticTemperature_sequence_(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BottomHoleStaticTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml2__BottomHoleStaticTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1459 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature (-615)
/* complex XML schema type 'witsml2:BottomHoleStaticTemperature': */
class SOAP_CMAC witsml2__BottomHoleStaticTemperature : public witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__BottomHoleStaticTemperature_sequence_ *__BottomHoleStaticTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BottomHoleStaticTemperature, default initialized and not managed by a soap context
        virtual witsml2__BottomHoleStaticTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BottomHoleStaticTemperature); }
      public:
        /// Constructor with default initializations
        witsml2__BottomHoleStaticTemperature() : __BottomHoleStaticTemperature_sequence_() { }
        virtual ~witsml2__BottomHoleStaticTemperature() { }
        /// Friend allocator used by soap_new_witsml2__BottomHoleStaticTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BottomHoleStaticTemperature * SOAP_FMAC2 soap_instantiate_witsml2__BottomHoleStaticTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1461 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular (-616)
/* complex XML schema type 'witsml2:Tubular': */
class SOAP_CMAC witsml2__Tubular : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:TypeTubularAssy' of XML schema type 'witsml2:TubularAssembly'
        enum witsml2__TubularAssembly TypeTubularAssy;
        /// Optional element 'witsml2:ValveFloat' of XML schema type 'xsd:boolean'
        bool *ValveFloat;
        /// Optional element 'witsml2:SourceNuclear' of XML schema type 'xsd:boolean'
        bool *SourceNuclear;
        /// Optional element 'witsml2:DiaHoleAssy' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHoleAssy;
        /// Optional element 'witsml2:TubularComponent' of XML schema type 'witsml2:TubularComponent'
        std::vector<witsml2__TubularComponent *> TubularComponent;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Tubular, default initialized and not managed by a soap context
        virtual witsml2__Tubular *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Tubular); }
      public:
        /// Constructor with default initializations
        witsml2__Tubular() : TypeTubularAssy(), ValveFloat(), SourceNuclear(), DiaHoleAssy(), TubularComponent(), Wellbore() { }
        virtual ~witsml2__Tubular() { }
        /// Friend allocator used by soap_new_witsml2__Tubular(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Tubular * SOAP_FMAC2 soap_instantiate_witsml2__Tubular(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:44933 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__BendAngle_sequence (-2009)
/* Wrapper: */
class SOAP_CMAC __witsml2__BendAngle_sequence {
      public:
        /// Optional element 'witsml2:BendAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BendAngle;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__BendAngle_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__BendAngle_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BendAngle_sequence, default initialized and not managed by a soap context
        virtual __witsml2__BendAngle_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BendAngle_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__BendAngle_sequence() : BendAngle() { }
        virtual ~__witsml2__BendAngle_sequence() { }
        /// Friend allocator used by soap_new___witsml2__BendAngle_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BendAngle_sequence * SOAP_FMAC2 soap_instantiate___witsml2__BendAngle_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1489 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle (-630)
/* complex XML schema type 'witsml2:BendAngle': */
class SOAP_CMAC witsml2__BendAngle : public witsml2__AbstractRotarySteerableTool {
      public:
        __witsml2__BendAngle_sequence *__BendAngle_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BendAngle, default initialized and not managed by a soap context
        virtual witsml2__BendAngle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BendAngle); }
      public:
        /// Constructor with default initializations
        witsml2__BendAngle() : __BendAngle_sequence() { }
        virtual ~witsml2__BendAngle() { }
        /// Friend allocator used by soap_new_witsml2__BendAngle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BendAngle * SOAP_FMAC2 soap_instantiate_witsml2__BendAngle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:44967 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml2__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml2__BendOffset_sequence (-2011)
/* Wrapper: */
class SOAP_CMAC __witsml2__BendOffset_sequence {
      public:
        /// Optional element 'witsml2:BendOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BendOffset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml2__BendOffset_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1___witsml2__BendOffset_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BendOffset_sequence, default initialized and not managed by a soap context
        virtual __witsml2__BendOffset_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BendOffset_sequence); }
      public:
        /// Constructor with default initializations
        __witsml2__BendOffset_sequence() : BendOffset() { }
        virtual ~__witsml2__BendOffset_sequence() { }
        /// Friend allocator used by soap_new___witsml2__BendOffset_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BendOffset_sequence * SOAP_FMAC2 soap_instantiate___witsml2__BendOffset_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1491 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset (-631)
/* complex XML schema type 'witsml2:BendOffset': */
class SOAP_CMAC witsml2__BendOffset : public witsml2__AbstractRotarySteerableTool {
      public:
        __witsml2__BendOffset_sequence *__BendOffset_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BendOffset, default initialized and not managed by a soap context
        virtual witsml2__BendOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BendOffset); }
      public:
        /// Constructor with default initializations
        witsml2__BendOffset() : __BendOffset_sequence() { }
        virtual ~witsml2__BendOffset() { }
        /// Friend allocator used by soap_new_witsml2__BendOffset(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BendOffset * SOAP_FMAC2 soap_instantiate_witsml2__BendOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1493 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign (-632)
/* complex XML schema type 'witsml2:CementStageDesign': */
class SOAP_CMAC witsml2__CementStageDesign : public witsml2__AbstractCementStage {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementStageDesign, default initialized and not managed by a soap context
        virtual witsml2__CementStageDesign *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementStageDesign); }
      public:
        /// Constructor with default initializations
        witsml2__CementStageDesign() { }
        virtual ~witsml2__CementStageDesign() { }
        /// Friend allocator used by soap_new_witsml2__CementStageDesign(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementStageDesign * SOAP_FMAC2 soap_instantiate_witsml2__CementStageDesign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1495 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation (-633)
/* complex XML schema type 'witsml2:CementJobEvaluation': */
class SOAP_CMAC witsml2__CementJobEvaluation : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:PresTest' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresTest;
        /// Optional element 'witsml2:ETimTest' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimTest;
        /// Optional element 'witsml2:CementShoeCollar' of XML schema type 'xsd:boolean'
        bool *CementShoeCollar;
        /// Optional element 'witsml2:CetRun' of XML schema type 'xsd:boolean'
        bool *CetRun;
        /// Optional element 'witsml2:CetBondQual' of XML schema type 'xsd:boolean'
        bool *CetBondQual;
        /// Optional element 'witsml2:CblRun' of XML schema type 'xsd:boolean'
        bool *CblRun;
        /// Optional element 'witsml2:CblBondQual' of XML schema type 'xsd:boolean'
        bool *CblBondQual;
        /// Optional element 'witsml2:CblPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *CblPres;
        /// Optional element 'witsml2:TempSurvey' of XML schema type 'xsd:boolean'
        bool *TempSurvey;
        /// Optional element 'witsml2:ETimCementLog' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimCementLog;
        /// Optional element 'witsml2:FormPit' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FormPit;
        /// Optional element 'witsml2:ToolCompanyPit' of XML schema type 'eml21:String64'
        std::string *ToolCompanyPit;
        /// Optional element 'witsml2:ETimPitStart' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimPitStart;
        /// Optional element 'witsml2:MdCementTop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCementTop;
        /// Optional element 'witsml2:TopCementMethod' of XML schema type 'eml21:String64'
        std::string *TopCementMethod;
        /// Optional element 'witsml2:TocOK' of XML schema type 'xsd:boolean'
        bool *TocOK;
        /// Optional element 'witsml2:JobRating' of XML schema type 'eml21:String64'
        std::string *JobRating;
        /// Optional element 'witsml2:RemedialCement' of XML schema type 'xsd:boolean'
        bool *RemedialCement;
        /// Optional element 'witsml2:NumRemedial' of XML schema type 'xsd:int'
        int *NumRemedial;
        /// Optional element 'witsml2:FailureMethod' of XML schema type 'eml21:String64'
        std::string *FailureMethod;
        /// Optional element 'witsml2:LinerTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LinerTop;
        /// Optional element 'witsml2:LinerLap' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LinerLap;
        /// Optional element 'witsml2:ETimBeforeTest' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimBeforeTest;
        /// Optional element 'witsml2:TestNegativeTool' of XML schema type 'eml21:String64'
        std::string *TestNegativeTool;
        /// Optional element 'witsml2:TestNegativeEmw' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *TestNegativeEmw;
        /// Optional element 'witsml2:TestPositiveTool' of XML schema type 'eml21:String64'
        std::string *TestPositiveTool;
        /// Optional element 'witsml2:TestPositiveEmw' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *TestPositiveEmw;
        /// Optional element 'witsml2:CementFoundOnTool' of XML schema type 'xsd:boolean'
        bool *CementFoundOnTool;
        /// Optional element 'witsml2:MdDVTool' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdDVTool;
        /// Required element 'witsml2:CementJob' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *CementJob;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobEvaluation, default initialized and not managed by a soap context
        virtual witsml2__CementJobEvaluation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobEvaluation); }
      public:
        /// Constructor with default initializations
        witsml2__CementJobEvaluation() : PresTest(), ETimTest(), CementShoeCollar(), CetRun(), CetBondQual(), CblRun(), CblBondQual(), CblPres(), TempSurvey(), ETimCementLog(), FormPit(), ToolCompanyPit(), ETimPitStart(), MdCementTop(), TopCementMethod(), TocOK(), JobRating(), RemedialCement(), NumRemedial(), FailureMethod(), LinerTop(), LinerLap(), ETimBeforeTest(), TestNegativeTool(), TestNegativeEmw(), TestPositiveTool(), TestPositiveEmw(), CementFoundOnTool(), MdDVTool(), CementJob() { }
        virtual ~witsml2__CementJobEvaluation() { }
        /// Friend allocator used by soap_new_witsml2__CementJobEvaluation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobEvaluation * SOAP_FMAC2 soap_instantiate_witsml2__CementJobEvaluation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1497 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport (-634)
/* complex XML schema type 'witsml2:CementJobReport': */
class SOAP_CMAC witsml2__CementJobReport : public witsml2__AbstractCementJob {
      public:
        /// Optional element 'witsml2:DTimJobEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimJobEnd;
        /// Optional element 'witsml2:DTimJobStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimJobStart;
        /// Optional element 'witsml2:DTimPlugSet' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPlugSet;
        /// Optional element 'witsml2:CementDrillOut' of XML schema type 'xsd:boolean'
        bool *CementDrillOut;
        /// Optional element 'witsml2:DTimCementDrillOut' of XML schema type 'eml21:TimeStamp'
        std::string *DTimCementDrillOut;
        /// Optional element 'witsml2:DTimSqueeze' of XML schema type 'eml21:TimeStamp'
        std::string *DTimSqueeze;
        /// Optional element 'witsml2:DTimPipeRotStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPipeRotStart;
        /// Optional element 'witsml2:DTimPipeRotEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPipeRotEnd;
        /// Optional element 'witsml2:DTimRecipStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRecipStart;
        /// Optional element 'witsml2:DTimRecipEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRecipEnd;
        /// Optional element 'witsml2:DensMeasBy' of XML schema type 'eml21:String64'
        std::string *DensMeasBy;
        /// Required element 'witsml2:CementReportStage' of XML schema type 'witsml2:CementStageReport'
        std::vector<witsml2__CementStageReport *> CementReportStage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobReport, default initialized and not managed by a soap context
        virtual witsml2__CementJobReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobReport); }
      public:
        /// Constructor with default initializations
        witsml2__CementJobReport() : DTimJobEnd(), DTimJobStart(), DTimPlugSet(), CementDrillOut(), DTimCementDrillOut(), DTimSqueeze(), DTimPipeRotStart(), DTimPipeRotEnd(), DTimRecipStart(), DTimRecipEnd(), DensMeasBy(), CementReportStage() { }
        virtual ~witsml2__CementJobReport() { }
        /// Friend allocator used by soap_new_witsml2__CementJobReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobReport * SOAP_FMAC2 soap_instantiate_witsml2__CementJobReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1499 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage (-635)
/* complex XML schema type 'witsml2:CementDesignStage': */
class SOAP_CMAC witsml2__CementDesignStage : public witsml2__AbstractCementStage {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementDesignStage, default initialized and not managed by a soap context
        virtual witsml2__CementDesignStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementDesignStage); }
      public:
        /// Constructor with default initializations
        witsml2__CementDesignStage() { }
        virtual ~witsml2__CementDesignStage() { }
        /// Friend allocator used by soap_new_witsml2__CementDesignStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementDesignStage * SOAP_FMAC2 soap_instantiate_witsml2__CementDesignStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1501 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign (-636)
/* complex XML schema type 'witsml2:CementJobDesign': */
class SOAP_CMAC witsml2__CementJobDesign : public witsml2__AbstractCementJob {
      public:
        /// Required element 'witsml2:CementDesignStage' of XML schema type 'witsml2:CementStageDesign'
        std::vector<witsml2__CementStageDesign *> CementDesignStage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobDesign, default initialized and not managed by a soap context
        virtual witsml2__CementJobDesign *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobDesign); }
      public:
        /// Constructor with default initializations
        witsml2__CementJobDesign() : CementDesignStage() { }
        virtual ~witsml2__CementJobDesign() { }
        /// Friend allocator used by soap_new_witsml2__CementJobDesign(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobDesign * SOAP_FMAC2 soap_instantiate_witsml2__CementJobDesign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1505 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob (-638)
/* complex XML schema type 'witsml2:CementJob': */
class SOAP_CMAC witsml2__CementJob : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:JobType' of XML schema type 'witsml2:CementJobType'
        enum witsml2__CementJobType *JobType;
        /// Optional element 'witsml2:JobConfig' of XML schema type 'eml21:String2000'
        std::string *JobConfig;
        /// Optional element 'witsml2:NameCementedString' of XML schema type 'eml21:String64'
        std::string *NameCementedString;
        /// Optional element 'witsml2:NameWorkString' of XML schema type 'eml21:String64'
        std::string *NameWorkString;
        /// Optional element 'witsml2:OffshoreJob' of XML schema type 'xsd:boolean'
        bool *OffshoreJob;
        /// Optional element 'witsml2:MdWater' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdWater;
        /// Optional element 'witsml2:ReturnsToSeabed' of XML schema type 'xsd:boolean'
        bool *ReturnsToSeabed;
        /// Optional element 'witsml2:MdPrevShoe' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdPrevShoe;
        /// Optional element 'witsml2:MdHole' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:TvdPrevShoe' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdPrevShoe;
        /// Optional element 'witsml2:MdStringSet' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdStringSet;
        /// Optional element 'witsml2:TvdStringSet' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdStringSet;
        /// Optional element 'witsml2:TypePlug' of XML schema type 'eml21:String64'
        std::string *TypePlug;
        /// Optional element 'witsml2:NameCementString' of XML schema type 'eml21:String64'
        std::string *NameCementString;
        /// Optional element 'witsml2:TypeSqueeze' of XML schema type 'eml21:String64'
        std::string *TypeSqueeze;
        /// Optional element 'witsml2:MdSqueeze' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdSqueeze;
        /// Optional element 'witsml2:ToolCompany' of XML schema type 'eml21:String64'
        std::string *ToolCompany;
        /// Optional element 'witsml2:TypeTool' of XML schema type 'eml21:String64'
        std::string *TypeTool;
        /// Optional element 'witsml2:CoilTubing' of XML schema type 'xsd:boolean'
        bool *CoilTubing;
        /// Optional element 'witsml2:JobReport' of XML schema type 'witsml2:CementJobReport'
        witsml2__CementJobReport *JobReport;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:HoleConfig' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *HoleConfig;
        /// Optional element 'witsml2:Design' of XML schema type 'witsml2:CementJobDesign'
        witsml2__CementJobDesign *Design;
        /// Optional element 'witsml2:CementingFluid' of XML schema type 'witsml2:CementingFluid'
        std::vector<witsml2__CementingFluid *> CementingFluid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJob, default initialized and not managed by a soap context
        virtual witsml2__CementJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJob); }
      public:
        /// Constructor with default initializations
        witsml2__CementJob() : JobType(), JobConfig(), NameCementedString(), NameWorkString(), OffshoreJob(), MdWater(), ReturnsToSeabed(), MdPrevShoe(), MdHole(), TvdPrevShoe(), MdStringSet(), TvdStringSet(), TypePlug(), NameCementString(), TypeSqueeze(), MdSqueeze(), ToolCompany(), TypeTool(), CoilTubing(), JobReport(), Wellbore(), HoleConfig(), Design(), CementingFluid() { }
        virtual ~witsml2__CementJob() { }
        /// Friend allocator used by soap_new_witsml2__CementJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJob * SOAP_FMAC2 soap_instantiate_witsml2__CementJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1517 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport (-644)
/* complex XML schema type 'witsml2:CementStageReport': */
class SOAP_CMAC witsml2__CementStageReport : public witsml2__AbstractCementStage {
      public:
        /// Optional element 'witsml2:DTimMixStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimMixStart;
        /// Optional element 'witsml2:DTimPumpStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPumpStart;
        /// Optional element 'witsml2:DTimPumpEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPumpEnd;
        /// Optional element 'witsml2:DTimDisplaceStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimDisplaceStart;
        /// Optional element 'witsml2:PresBreakDown' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBreakDown;
        /// Optional element 'witsml2:FlowrateBreakDown' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateBreakDown;
        /// Optional element 'witsml2:FlowrateDisplaceAv' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateDisplaceAv;
        /// Optional element 'witsml2:FlowrateDisplaceMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateDisplaceMx;
        /// Optional element 'witsml2:PresSqueezeAv' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresSqueezeAv;
        /// Optional element 'witsml2:PresSqueezeEnd' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresSqueezeEnd;
        /// Optional element 'witsml2:PresSqueezeHeld' of XML schema type 'xsd:boolean'
        bool *PresSqueezeHeld;
        /// Optional element 'witsml2:ETimMudCirculation' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimMudCirculation;
        /// Optional element 'witsml2:PresSqueeze' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresSqueeze;
        /// Optional element 'witsml2:FlowrateSqueezeAv' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateSqueezeAv;
        /// Optional element 'witsml2:FlowrateSqueezeMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateSqueezeMx;
        /// Optional element 'witsml2:FlowrateEnd' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateEnd;
        /// Optional element 'witsml2:FlowratePumpStart' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpStart;
        /// Optional element 'witsml2:FlowratePumpEnd' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpEnd;
        /// Optional element 'witsml2:VisFunnelMud' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *VisFunnelMud;
        /// Optional element 'witsml2:PlugBumped' of XML schema type 'xsd:boolean'
        bool *PlugBumped;
        /// Optional element 'witsml2:SqueezeObtained' of XML schema type 'xsd:boolean'
        bool *SqueezeObtained;
        /// Optional element 'witsml2:PresPriorBump' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresPriorBump;
        /// Optional element 'witsml2:FloatHeld' of XML schema type 'xsd:boolean'
        bool *FloatHeld;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementStageReport, default initialized and not managed by a soap context
        virtual witsml2__CementStageReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementStageReport); }
      public:
        /// Constructor with default initializations
        witsml2__CementStageReport() : DTimMixStart(), DTimPumpStart(), DTimPumpEnd(), DTimDisplaceStart(), PresBreakDown(), FlowrateBreakDown(), FlowrateDisplaceAv(), FlowrateDisplaceMx(), PresSqueezeAv(), PresSqueezeEnd(), PresSqueezeHeld(), ETimMudCirculation(), PresSqueeze(), FlowrateSqueezeAv(), FlowrateSqueezeMx(), FlowrateEnd(), FlowratePumpStart(), FlowratePumpEnd(), VisFunnelMud(), PlugBumped(), SqueezeObtained(), PresPriorBump(), FloatHeld(), uid() { }
        virtual ~witsml2__CementStageReport() { }
        /// Friend allocator used by soap_new_witsml2__CementStageReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementStageReport * SOAP_FMAC2 soap_instantiate_witsml2__CementStageReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1519 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry (-645)
/* complex XML schema type 'witsml2:WellboreGeometry': */
class SOAP_CMAC witsml2__WellboreGeometry : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:MdBase' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBase;
        /// Optional element 'witsml2:GapAir' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GapAir;
        /// Optional element 'witsml2:DepthWaterMean' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DepthWaterMean;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:WellboreGeometrySection' of XML schema type 'witsml2:WellboreGeometrySection'
        std::vector<witsml2__WellboreGeometrySection *> WellboreGeometrySection;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:BhaRun' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> BhaRun;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeometry, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeometry); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreGeometry() : MdBase(), GapAir(), DepthWaterMean(), GrowingStatus(), WellboreGeometrySection(), Wellbore(), BhaRun() { }
        virtual ~witsml2__WellboreGeometry() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeometry(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeometry * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1523 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet (-647)
/* complex XML schema type 'witsml2:ChannelSet': */
class SOAP_CMAC witsml2__ChannelSet : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:Index' of XML schema type 'witsml2:ChannelIndex'
        std::vector<witsml2__ChannelIndex *> Index;
        /// Required element 'witsml2:Channel' of XML schema type 'witsml2:Channel'
        std::vector<witsml2__Channel *> Channel;
        /// Optional element 'witsml2:Data' of XML schema type 'witsml2:ChannelData'
        witsml2__ChannelData *Data;
        /// Optional element 'witsml2:ChannelState' of XML schema type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Optional element 'witsml2:TimeDepth' of XML schema type 'eml21:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml2:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml2:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XML schema type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XML schema type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:DataContext' of XML schema type 'witsml2:AbstractLogDataContext'
        witsml2__AbstractLogDataContext *DataContext;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelSet, default initialized and not managed by a soap context
        virtual witsml2__ChannelSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelSet); }
      public:
        /// Constructor with default initializations
        witsml2__ChannelSet() : Index(), Channel(), Data(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), DataContext() { }
        virtual ~witsml2__ChannelSet() { }
        /// Friend allocator used by soap_new_witsml2__ChannelSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelSet * SOAP_FMAC2 soap_instantiate_witsml2__ChannelSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1529 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth (-650)
/* complex XML schema type 'witsml2:PassIndexedDepth': */
class SOAP_CMAC witsml2__PassIndexedDepth : public witsml2__AbstractIndexValue {
      public:
        /// Required element 'witsml2:Pass' of XML schema type 'xsd:int'
        int Pass;
        /// Required element 'witsml2:Direction' of XML schema type 'xsd:int'
        int Direction;
        /// Required element 'witsml2:Depth' of XML schema type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PassIndexedDepth, default initialized and not managed by a soap context
        virtual witsml2__PassIndexedDepth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PassIndexedDepth); }
      public:
        /// Constructor with default initializations
        witsml2__PassIndexedDepth() : Pass(), Direction(), Depth() { }
        virtual ~witsml2__PassIndexedDepth() { }
        /// Friend allocator used by soap_new_witsml2__PassIndexedDepth(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PassIndexedDepth * SOAP_FMAC2 soap_instantiate_witsml2__PassIndexedDepth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1533 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Log
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Log (-652)
/* complex XML schema type 'witsml2:Log': */
class SOAP_CMAC witsml2__Log : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:ChannelState' of XML schema type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Optional element 'witsml2:TimeDepth' of XML schema type 'eml21:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml2:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml2:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XML schema type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XML schema type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Required element 'witsml2:ChannelSet' of XML schema type 'witsml2:ChannelSet'
        std::vector<witsml2__ChannelSet *> ChannelSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Log
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Log; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Log, default initialized and not managed by a soap context
        virtual witsml2__Log *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Log); }
      public:
        /// Constructor with default initializations
        witsml2__Log() : ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), ChannelSet() { }
        virtual ~witsml2__Log() { }
        /// Friend allocator used by soap_new_witsml2__Log(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Log * SOAP_FMAC2 soap_instantiate_witsml2__Log(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1537 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue (-654)
/* complex XML schema type 'witsml2:TimeIndexValue': */
class SOAP_CMAC witsml2__TimeIndexValue : public witsml2__AbstractIndexValue {
      public:
        /// Required element 'witsml2:Time' of XML schema type 'eml21:TimeStamp'
        std::string Time;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TimeIndexValue, default initialized and not managed by a soap context
        virtual witsml2__TimeIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TimeIndexValue); }
      public:
        /// Constructor with default initializations
        witsml2__TimeIndexValue() : Time() { }
        virtual ~witsml2__TimeIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__TimeIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TimeIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__TimeIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1539 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue (-655)
/* complex XML schema type 'witsml2:DepthIndexValue': */
class SOAP_CMAC witsml2__DepthIndexValue : public witsml2__AbstractIndexValue {
      public:
        /// Required element 'witsml2:Depth' of XML schema type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthIndexValue, default initialized and not managed by a soap context
        virtual witsml2__DepthIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthIndexValue); }
      public:
        /// Constructor with default initializations
        witsml2__DepthIndexValue() : Depth() { }
        virtual ~witsml2__DepthIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__DepthIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__DepthIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1541 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Channel (-656)
/* complex XML schema type 'witsml2:Channel': */
class SOAP_CMAC witsml2__Channel : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:Mnemonic' of XML schema type 'eml21:String64'
        std::string Mnemonic;
        /// Required element 'witsml2:DataType' of XML schema type 'witsml2:EtpDataType'
        enum witsml2__EtpDataType DataType;
        /// Required element 'witsml2:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:Source' of XML schema type 'eml21:String64'
        std::string *Source;
        /// Optional element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:AxisDefinition' of XML schema type 'witsml2:LogChannelAxis'
        std::vector<witsml2__LogChannelAxis *> AxisDefinition;
        /// Optional element 'witsml2:ChannelState' of XML schema type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Required element 'witsml2:TimeDepth' of XML schema type 'eml21:String64'
        std::string TimeDepth;
        /// Required element 'witsml2:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Required element 'witsml2:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XML schema type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XML schema type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml2:PointMetadata' of XML schema type 'witsml2:PointMetadata'
        std::vector<witsml2__PointMetadata *> PointMetadata;
        /// Optional element 'witsml2:DerivedFrom' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> DerivedFrom;
        /// Required element 'witsml2:Index' of XML schema type 'witsml2:ChannelIndex'
        std::vector<witsml2__ChannelIndex *> Index;
        /// Optional element 'witsml2:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Channel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Channel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Channel, default initialized and not managed by a soap context
        virtual witsml2__Channel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Channel); }
      public:
        /// Constructor with default initializations
        witsml2__Channel() : Mnemonic(), DataType(), Uom(), GrowingStatus(), Source(), Wellbore(), AxisDefinition(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), PointMetadata(), DerivedFrom(), Index(), Parent() { }
        virtual ~witsml2__Channel() { }
        /// Friend allocator used by soap_new_witsml2__Channel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Channel * SOAP_FMAC2 soap_instantiate_witsml2__Channel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1545 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext (-658)
/* complex XML schema type 'witsml2:IndexRangeContext': */
class SOAP_CMAC witsml2__IndexRangeContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:StartIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Required element 'witsml2:EndIndex' of XML schema type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IndexRangeContext, default initialized and not managed by a soap context
        virtual witsml2__IndexRangeContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IndexRangeContext); }
      public:
        /// Constructor with default initializations
        witsml2__IndexRangeContext() : StartIndex(), EndIndex() { }
        virtual ~witsml2__IndexRangeContext() { }
        /// Friend allocator used by soap_new_witsml2__IndexRangeContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IndexRangeContext * SOAP_FMAC2 soap_instantiate_witsml2__IndexRangeContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1547 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext (-659)
/* complex XML schema type 'witsml2:ObjectContext': */
class SOAP_CMAC witsml2__ObjectContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:ObjectReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ObjectReference;
        /// Required element 'witsml2:SubObjectReference' of XML schema type 'eml21:String64'
        std::string SubObjectReference;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ObjectContext, default initialized and not managed by a soap context
        virtual witsml2__ObjectContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ObjectContext); }
      public:
        /// Constructor with default initializations
        witsml2__ObjectContext() : ObjectReference(), SubObjectReference() { }
        virtual ~witsml2__ObjectContext() { }
        /// Friend allocator used by soap_new_witsml2__ObjectContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ObjectContext * SOAP_FMAC2 soap_instantiate_witsml2__ObjectContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1551 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext (-661)
/* complex XML schema type 'witsml2:ChannelValueContext': */
class SOAP_CMAC witsml2__ChannelValueContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:ChannelReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelReference;
        /// Required element 'witsml2:DataValue' of XML schema type 'xsd:string'
        std::string DataValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelValueContext, default initialized and not managed by a soap context
        virtual witsml2__ChannelValueContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelValueContext); }
      public:
        /// Constructor with default initializations
        witsml2__ChannelValueContext() : ChannelReference(), DataValue() { }
        virtual ~witsml2__ChannelValueContext() { }
        /// Friend allocator used by soap_new_witsml2__ChannelValueContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelValueContext * SOAP_FMAC2 soap_instantiate_witsml2__ChannelValueContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1559 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage (-665)
/* complex XML schema type 'witsml2:DepthRegImage': */
class SOAP_CMAC witsml2__DepthRegImage : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:FileNameType' of XML schema type 'witsml2:FileNameType'
        enum witsml2__FileNameType *FileNameType;
        /// Optional element 'witsml2:Mimetype' of XML schema type 'witsml2:MimeType'
        enum witsml2__MimeType *Mimetype;
        /// Required element 'witsml2:FileName' of XML schema type 'eml21:String64'
        std::string FileName;
        /// Optional element 'witsml2:FileSize' of XML schema type 'eml21:DigitalStorageMeasure'
        eml21__DigitalStorageMeasure *FileSize;
        /// Optional element 'witsml2:Checksum' of XML schema type 'witsml2:MessageDigestType'
        enum witsml2__MessageDigestType *Checksum;
        /// Optional element 'witsml2:ImagePixelWidth' of XML schema type 'xsd:unsignedLong'
        ULONG64 *ImagePixelWidth;
        /// Optional element 'witsml2:ImagePixelHeight' of XML schema type 'xsd:unsignedLong'
        ULONG64 *ImagePixelHeight;
        /// Optional element 'witsml2:Version' of XML schema type 'eml21:String64'
        std::string *Version;
        /// Required element 'witsml2:ImageBoundary' of XML schema type 'witsml2:DepthRegRectangle'
        witsml2__DepthRegRectangle *ImageBoundary;
        /// Optional element 'witsml2:HeaderSection' of XML schema type 'witsml2:DepthRegLogRect'
        witsml2__DepthRegLogRect *HeaderSection;
        /// Optional element 'witsml2:LogSection' of XML schema type 'witsml2:DepthRegLogSection'
        std::vector<witsml2__DepthRegLogSection *> LogSection;
        /// Optional element 'witsml2:AlternateSection' of XML schema type 'witsml2:DepthRegLogRect'
        std::vector<witsml2__DepthRegLogRect *> AlternateSection;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegImage, default initialized and not managed by a soap context
        virtual witsml2__DepthRegImage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegImage); }
      public:
        /// Constructor with default initializations
        witsml2__DepthRegImage() : FileNameType(), Mimetype(), FileName(), FileSize(), Checksum(), ImagePixelWidth(), ImagePixelHeight(), Version(), ImageBoundary(), HeaderSection(), LogSection(), AlternateSection(), Wellbore(), uid() { }
        virtual ~witsml2__DepthRegImage() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegImage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegImage * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegImage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1571 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger (-671)
/* complex XML schema type 'witsml2:WellCMLedger': */
class SOAP_CMAC witsml2__WellCMLedger : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:ParentEventID' of XML schema type 'eml21:String64'
        std::string *ParentEventID;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:Duration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *Duration;
        /// Optional element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:EventOrder' of XML schema type 'xsd:int'
        int *EventOrder;
        /// Optional element 'witsml2:RigID' of XML schema type 'eml21:String64'
        std::vector<std::string> RigID;
        /// Optional element 'witsml2:ActivityCode' of XML schema type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:Type' of XML schema type 'witsml2:EventType'
        witsml2__EventType *Type;
        /// Optional element 'witsml2:IsPlan' of XML schema type 'xsd:boolean'
        bool *IsPlan;
        /// Optional element 'witsml2:WorkOrderID' of XML schema type 'eml21:String64'
        std::string *WorkOrderID;
        /// Optional element 'witsml2:BusinessAssociate' of XML schema type 'eml21:String64'
        std::string *BusinessAssociate;
        /// Optional element 'witsml2:ResponsiblePerson' of XML schema type 'eml21:String64'
        std::string *ResponsiblePerson;
        /// Optional element 'witsml2:Contact' of XML schema type 'eml21:String64'
        std::string *Contact;
        /// Optional element 'witsml2:Nonproductive' of XML schema type 'xsd:boolean'
        bool *Nonproductive;
        /// Optional element 'witsml2:Trouble' of XML schema type 'xsd:boolean'
        bool *Trouble;
        /// Optional element 'witsml2:PreventiveMaintenance' of XML schema type 'xsd:boolean'
        bool *PreventiveMaintenance;
        /// Optional element 'witsml2:Unplanned' of XML schema type 'xsd:boolean'
        bool *Unplanned;
        /// Optional element 'witsml2:Phase' of XML schema type 'eml21:String64'
        std::string *Phase;
        /// Optional element 'witsml2:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:EventExtension' of XML schema type 'witsml2:AbstractEventExtension'
        std::vector<witsml2__AbstractEventExtension *> EventExtension;
        /// Optional element 'witsml2:Cost' of XML schema type 'witsml2:DayCost'
        std::vector<witsml2__DayCost *> Cost;
        /// Optional element 'witsml2:EventType' of XML schema type 'witsml2:EventType'
        witsml2__EventType *EventType;
        /// Optional element 'witsml2:DownholeComponentReference' of XML schema type 'witsml2:DownholeComponentReference'
        witsml2__DownholeComponentReference *DownholeComponentReference;
        /// Optional element 'witsml2:Participant' of XML schema type 'witsml2:Participant'
        witsml2__Participant *Participant;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellCMLedger, default initialized and not managed by a soap context
        virtual witsml2__WellCMLedger *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellCMLedger); }
      public:
        /// Constructor with default initializations
        witsml2__WellCMLedger() : ParentEventID(), DTimStart(), DTimEnd(), Duration(), MdInterval(), EventOrder(), RigID(), ActivityCode(), Type(), IsPlan(), WorkOrderID(), BusinessAssociate(), ResponsiblePerson(), Contact(), Nonproductive(), Trouble(), PreventiveMaintenance(), Unplanned(), Phase(), Comment(), Description(), Wellbore(), EventExtension(), Cost(), EventType(), DownholeComponentReference(), Participant() { }
        virtual ~witsml2__WellCMLedger() { }
        /// Friend allocator used by soap_new_witsml2__WellCMLedger(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellCMLedger * SOAP_FMAC2 soap_instantiate_witsml2__WellCMLedger(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1583 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension (-677)
/* complex XML schema type 'witsml2:CementExtension': */
class SOAP_CMAC witsml2__CementExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:CementJobRefID' of XML schema type 'eml21:String64'
        std::string *CementJobRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementExtension, default initialized and not managed by a soap context
        virtual witsml2__CementExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementExtension); }
      public:
        /// Constructor with default initializations
        witsml2__CementExtension() : CementJobRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__CementExtension() { }
        /// Friend allocator used by soap_new_witsml2__CementExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementExtension * SOAP_FMAC2 soap_instantiate_witsml2__CementExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1585 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension (-678)
/* complex XML schema type 'witsml2:CleanFillExtension': */
class SOAP_CMAC witsml2__CleanFillExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:FillCleaningMethod' of XML schema type 'eml21:String64'
        std::string *FillCleaningMethod;
        /// Optional element 'witsml2:ToolSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ToolSize;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CleanFillExtension, default initialized and not managed by a soap context
        virtual witsml2__CleanFillExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CleanFillExtension); }
      public:
        /// Constructor with default initializations
        witsml2__CleanFillExtension() : FillCleaningMethod(), ToolSize(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__CleanFillExtension() { }
        /// Friend allocator used by soap_new_witsml2__CleanFillExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CleanFillExtension * SOAP_FMAC2 soap_instantiate_witsml2__CleanFillExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension (-679)
/* complex XML schema type 'witsml2:DirectionalSurveyExtension': */
class SOAP_CMAC witsml2__DirectionalSurveyExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:TrajectoryRefID' of XML schema type 'eml21:String64'
        std::string *TrajectoryRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DirectionalSurveyExtension, default initialized and not managed by a soap context
        virtual witsml2__DirectionalSurveyExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DirectionalSurveyExtension); }
      public:
        /// Constructor with default initializations
        witsml2__DirectionalSurveyExtension() : TrajectoryRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__DirectionalSurveyExtension() { }
        /// Friend allocator used by soap_new_witsml2__DirectionalSurveyExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DirectionalSurveyExtension * SOAP_FMAC2 soap_instantiate_witsml2__DirectionalSurveyExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1589 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension (-680)
/* complex XML schema type 'witsml2:LostCirculationExtension': */
class SOAP_CMAC witsml2__LostCirculationExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:VolumeLost' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeLost;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LostCirculationExtension, default initialized and not managed by a soap context
        virtual witsml2__LostCirculationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LostCirculationExtension); }
      public:
        /// Constructor with default initializations
        witsml2__LostCirculationExtension() : VolumeLost(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__LostCirculationExtension() { }
        /// Friend allocator used by soap_new_witsml2__LostCirculationExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LostCirculationExtension * SOAP_FMAC2 soap_instantiate_witsml2__LostCirculationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1591 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension (-681)
/* complex XML schema type 'witsml2:BHPExtension': */
class SOAP_CMAC witsml2__BHPExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:BHPRefID' of XML schema type 'eml21:String64'
        std::string *BHPRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BHPExtension, default initialized and not managed by a soap context
        virtual witsml2__BHPExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BHPExtension); }
      public:
        /// Constructor with default initializations
        witsml2__BHPExtension() : BHPRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__BHPExtension() { }
        /// Friend allocator used by soap_new_witsml2__BHPExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BHPExtension * SOAP_FMAC2 soap_instantiate_witsml2__BHPExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1593 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension (-682)
/* complex XML schema type 'witsml2:AcidizefracExtension': */
class SOAP_CMAC witsml2__AcidizefracExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:StimJobID' of XML schema type 'eml21:String64'
        std::string *StimJobID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AcidizefracExtension, default initialized and not managed by a soap context
        virtual witsml2__AcidizefracExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AcidizefracExtension); }
      public:
        /// Constructor with default initializations
        witsml2__AcidizefracExtension() : StimJobID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__AcidizefracExtension() { }
        /// Friend allocator used by soap_new_witsml2__AcidizefracExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AcidizefracExtension * SOAP_FMAC2 soap_instantiate_witsml2__AcidizefracExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1595 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension (-683)
/* complex XML schema type 'witsml2:JobExtension': */
class SOAP_CMAC witsml2__JobExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:JobReason' of XML schema type 'eml21:String2000'
        std::string *JobReason;
        /// Optional element 'witsml2:JobStatus' of XML schema type 'eml21:String64'
        std::string *JobStatus;
        /// Optional element 'witsml2:PrimaryMotivationForJob' of XML schema type 'eml21:String64'
        std::string *PrimaryMotivationForJob;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__JobExtension, default initialized and not managed by a soap context
        virtual witsml2__JobExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__JobExtension); }
      public:
        /// Constructor with default initializations
        witsml2__JobExtension() : JobReason(), JobStatus(), PrimaryMotivationForJob(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__JobExtension() { }
        /// Friend allocator used by soap_new_witsml2__JobExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__JobExtension * SOAP_FMAC2 soap_instantiate_witsml2__JobExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1597 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension (-684)
/* complex XML schema type 'witsml2:PressureTestExtension': */
class SOAP_CMAC witsml2__PressureTestExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:DiaOrificeSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaOrificeSize;
        /// Optional element 'witsml2:DTimeNextTestDate' of XML schema type 'eml21:TimeStamp'
        std::string *DTimeNextTestDate;
        /// Optional element 'witsml2:FlowrateRateBled' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateRateBled;
        /// Optional element 'witsml2:IdentifierJob' of XML schema type 'eml21:String64'
        std::string *IdentifierJob;
        /// Optional element 'witsml2:IsSuccess' of XML schema type 'xsd:boolean'
        bool *IsSuccess;
        /// Optional element 'witsml2:MaxPressureDuration' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPressureDuration;
        /// Optional element 'witsml2:CirculatingPosition' of XML schema type 'eml21:String64'
        std::string *CirculatingPosition;
        /// Optional element 'witsml2:FluidBledType' of XML schema type 'eml21:String64'
        std::string *FluidBledType;
        /// Optional element 'witsml2:OrientationMethod' of XML schema type 'eml21:String64'
        std::string *OrientationMethod;
        /// Optional element 'witsml2:TestFluidType' of XML schema type 'eml21:String64'
        std::string *TestFluidType;
        /// Optional element 'witsml2:TestSubType' of XML schema type 'eml21:String64'
        std::string *TestSubType;
        /// Optional element 'witsml2:TestType' of XML schema type 'eml21:String64'
        std::string *TestType;
        /// Optional element 'witsml2:AnnulusPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AnnulusPressure;
        /// Optional element 'witsml2:WellPressureUsed' of XML schema type 'eml21:String64'
        std::string *WellPressureUsed;
        /// Optional element 'witsml2:Str10Reference' of XML schema type 'eml21:String64'
        std::string *Str10Reference;
        /// Optional element 'witsml2:UidAssembly' of XML schema type 'eml21:String64'
        std::string *UidAssembly;
        /// Optional element 'witsml2:VolumeBled' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeBled;
        /// Optional element 'witsml2:VolumeLost' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeLost;
        /// Optional element 'witsml2:VolumePumped' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumePumped;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PressureTestExtension, default initialized and not managed by a soap context
        virtual witsml2__PressureTestExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PressureTestExtension); }
      public:
        /// Constructor with default initializations
        witsml2__PressureTestExtension() : DiaOrificeSize(), DTimeNextTestDate(), FlowrateRateBled(), IdentifierJob(), IsSuccess(), MaxPressureDuration(), CirculatingPosition(), FluidBledType(), OrientationMethod(), TestFluidType(), TestSubType(), TestType(), AnnulusPressure(), WellPressureUsed(), Str10Reference(), UidAssembly(), VolumeBled(), VolumeLost(), VolumePumped(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__PressureTestExtension() { }
        /// Friend allocator used by soap_new_witsml2__PressureTestExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PressureTestExtension * SOAP_FMAC2 soap_instantiate_witsml2__PressureTestExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1599 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension (-685)
/* complex XML schema type 'witsml2:WaitingOnExtension': */
class SOAP_CMAC witsml2__WaitingOnExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:SubCategory' of XML schema type 'eml21:String64'
        std::string *SubCategory;
        /// Optional element 'witsml2:ChargeTypeCode' of XML schema type 'eml21:String64'
        std::string *ChargeTypeCode;
        /// Optional element 'witsml2:BusinessOrgWaitingOn' of XML schema type 'eml21:String64'
        std::string *BusinessOrgWaitingOn;
        /// Optional element 'witsml2:IsNoChargeToProducer' of XML schema type 'xsd:boolean'
        bool *IsNoChargeToProducer;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WaitingOnExtension, default initialized and not managed by a soap context
        virtual witsml2__WaitingOnExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WaitingOnExtension); }
      public:
        /// Constructor with default initializations
        witsml2__WaitingOnExtension() : SubCategory(), ChargeTypeCode(), BusinessOrgWaitingOn(), IsNoChargeToProducer(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__WaitingOnExtension() { }
        /// Friend allocator used by soap_new_witsml2__WaitingOnExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WaitingOnExtension * SOAP_FMAC2 soap_instantiate_witsml2__WaitingOnExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1601 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension (-686)
/* complex XML schema type 'witsml2:PerforatingExtension': */
class SOAP_CMAC witsml2__PerforatingExtension : public witsml2__AbstractEventExtension {
      public:
        /// Required element 'witsml2:PerforationSetRefID' of XML schema type 'eml21:String64'
        std::string PerforationSetRefID;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Perforating' of XML schema type 'witsml2:Perforating'
        std::vector<witsml2__Perforating *> Perforating;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforatingExtension, default initialized and not managed by a soap context
        virtual witsml2__PerforatingExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforatingExtension); }
      public:
        /// Constructor with default initializations
        witsml2__PerforatingExtension() : PerforationSetRefID(), ExtensionAny(), Perforating() { }
        virtual ~witsml2__PerforatingExtension() { }
        /// Friend allocator used by soap_new_witsml2__PerforatingExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforatingExtension * SOAP_FMAC2 soap_instantiate_witsml2__PerforatingExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1605 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension (-688)
/* complex XML schema type 'witsml2:FluidReportExtension': */
class SOAP_CMAC witsml2__FluidReportExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:FluidReportRefID' of XML schema type 'eml21:String64'
        std::string *FluidReportRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidReportExtension, default initialized and not managed by a soap context
        virtual witsml2__FluidReportExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidReportExtension); }
      public:
        /// Constructor with default initializations
        witsml2__FluidReportExtension() : FluidReportRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__FluidReportExtension() { }
        /// Friend allocator used by soap_new_witsml2__FluidReportExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidReportExtension * SOAP_FMAC2 soap_instantiate_witsml2__FluidReportExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1607 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension (-689)
/* complex XML schema type 'witsml2:DownholeExtension': */
class SOAP_CMAC witsml2__DownholeExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:DownholeComponentRefID' of XML schema type 'eml21:String64'
        std::string *DownholeComponentRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeExtension, default initialized and not managed by a soap context
        virtual witsml2__DownholeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeExtension); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeExtension() : DownholeComponentRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__DownholeExtension() { }
        /// Friend allocator used by soap_new_witsml2__DownholeExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeExtension * SOAP_FMAC2 soap_instantiate_witsml2__DownholeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1613 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent (-692)
/* complex XML schema type 'witsml2:DownholeComponent': */
class SOAP_CMAC witsml2__DownholeComponent : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml2:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml2:DownholeStringSet' of XML schema type 'witsml2:DownholeStringSet'
        witsml2__DownholeStringSet *DownholeStringSet;
        /// Optional element 'witsml2:PerforationSets' of XML schema type 'witsml2:PerforationSets'
        witsml2__PerforationSets *PerforationSets;
        /// Optional element 'witsml2:EquipmentSet' of XML schema type 'witsml2:EquipmentSet'
        witsml2__EquipmentSet *EquipmentSet;
        /// Required element 'witsml2:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
        /// Optional element 'witsml2:WellHead' of XML schema type 'witsml2:DownholeString'
        witsml2__DownholeString *WellHead;
        /// Optional element 'witsml2:BoreholeStringSet' of XML schema type 'witsml2:BoreholeStringSet'
        witsml2__BoreholeStringSet *BoreholeStringSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeComponent, default initialized and not managed by a soap context
        virtual witsml2__DownholeComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeComponent); }
      public:
        /// Constructor with default initializations
        witsml2__DownholeComponent() : StartDate(), EndDate(), DownholeStringSet(), PerforationSets(), EquipmentSet(), Well(), WellHead(), BoreholeStringSet() { }
        virtual ~witsml2__DownholeComponent() { }
        /// Friend allocator used by soap_new_witsml2__DownholeComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeComponent * SOAP_FMAC2 soap_instantiate_witsml2__DownholeComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection (-700)
/* complex XML schema type 'witsml2:EquipmentConnection': */
class SOAP_CMAC witsml2__EquipmentConnection : public witsml2__Connection {
      public:
        /// Optional element 'witsml2:RadialOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RadialOffset;
        /// Optional element 'witsml2:ConnectionForm' of XML schema type 'witsml2:ConnectionFormType'
        enum witsml2__ConnectionFormType *ConnectionForm;
        /// Optional element 'witsml2:ConnectionUpset' of XML schema type 'eml21:String64'
        std::string *ConnectionUpset;
        /// Optional element 'witsml2:ConnectionType' of XML schema type 'witsml2:AbstractConnectionType'
        witsml2__AbstractConnectionType *ConnectionType;
        /// Required attribute 'stringEquipmentReferenceUid' of XML schema type 'eml21:String64'
        std::string stringEquipmentReferenceUid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EquipmentConnection, default initialized and not managed by a soap context
        virtual witsml2__EquipmentConnection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EquipmentConnection); }
      public:
        /// Constructor with default initializations
        witsml2__EquipmentConnection() : RadialOffset(), ConnectionForm(), ConnectionUpset(), ConnectionType(), stringEquipmentReferenceUid() { }
        virtual ~witsml2__EquipmentConnection() { }
        /// Friend allocator used by soap_new_witsml2__EquipmentConnection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EquipmentConnection * SOAP_FMAC2 soap_instantiate_witsml2__EquipmentConnection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1661 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType (-716)
/* complex XML schema type 'witsml2:CasingConnectionType': */
class SOAP_CMAC witsml2__CasingConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:CasingConnectionType' of XML schema type 'witsml2:CasingConnectionTypes'
        enum witsml2__CasingConnectionTypes CasingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CasingConnectionType, default initialized and not managed by a soap context
        virtual witsml2__CasingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CasingConnectionType); }
      public:
        /// Constructor with default initializations
        witsml2__CasingConnectionType() : CasingConnectionType() { }
        virtual ~witsml2__CasingConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__CasingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CasingConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__CasingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1663 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType (-717)
/* complex XML schema type 'witsml2:TubingConnectionType': */
class SOAP_CMAC witsml2__TubingConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:TubingConnectionType' of XML schema type 'witsml2:TubingConnectionTypes'
        enum witsml2__TubingConnectionTypes TubingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TubingConnectionType, default initialized and not managed by a soap context
        virtual witsml2__TubingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TubingConnectionType); }
      public:
        /// Constructor with default initializations
        witsml2__TubingConnectionType() : TubingConnectionType() { }
        virtual ~witsml2__TubingConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__TubingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TubingConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__TubingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1665 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType (-718)
/* complex XML schema type 'witsml2:RodConnectionType': */
class SOAP_CMAC witsml2__RodConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:RodConnectionType' of XML schema type 'witsml2:RodConnectionTypes'
        enum witsml2__RodConnectionTypes RodConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RodConnectionType, default initialized and not managed by a soap context
        virtual witsml2__RodConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RodConnectionType); }
      public:
        /// Constructor with default initializations
        witsml2__RodConnectionType() : RodConnectionType() { }
        virtual ~witsml2__RodConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__RodConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RodConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__RodConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1667 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType (-719)
/* complex XML schema type 'witsml2:OtherConnectionType': */
class SOAP_CMAC witsml2__OtherConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:OtherConnectionType' of XML schema type 'witsml2:OtherConnectionTypes'
        enum witsml2__OtherConnectionTypes OtherConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OtherConnectionType, default initialized and not managed by a soap context
        virtual witsml2__OtherConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OtherConnectionType); }
      public:
        /// Constructor with default initializations
        witsml2__OtherConnectionType() : OtherConnectionType() { }
        virtual ~witsml2__OtherConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__OtherConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OtherConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__OtherConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1683 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit (-727)
/* complex XML schema type 'witsml2:ItemVolPerUnit': */
class SOAP_CMAC witsml2__ItemVolPerUnit : public witsml2__AbstractItemWtOrVolPerUnit {
      public:
        /// Required element 'witsml2:ItemVolPerUnit' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *ItemVolPerUnit;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ItemVolPerUnit, default initialized and not managed by a soap context
        virtual witsml2__ItemVolPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ItemVolPerUnit); }
      public:
        /// Constructor with default initializations
        witsml2__ItemVolPerUnit() : ItemVolPerUnit() { }
        virtual ~witsml2__ItemVolPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__ItemVolPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ItemVolPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__ItemVolPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1685 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit (-728)
/* complex XML schema type 'witsml2:ItemWtPerUnit': */
class SOAP_CMAC witsml2__ItemWtPerUnit : public witsml2__AbstractItemWtOrVolPerUnit {
      public:
        /// Required element 'witsml2:ItemWtPerUnit' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *ItemWtPerUnit;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ItemWtPerUnit, default initialized and not managed by a soap context
        virtual witsml2__ItemWtPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ItemWtPerUnit); }
      public:
        /// Constructor with default initializations
        witsml2__ItemWtPerUnit() : ItemWtPerUnit() { }
        virtual ~witsml2__ItemWtPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__ItemWtPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ItemWtPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__ItemWtPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1689 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport (-730)
/* complex XML schema type 'witsml2:OpsReport': */
class SOAP_CMAC witsml2__OpsReport : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:ConditionHole' of XML schema type 'eml21:String64'
        std::string *ConditionHole;
        /// Optional element 'witsml2:CostDay' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostDay;
        /// Optional element 'witsml2:CostDayMud' of XML schema type 'witsml2:Cost'
        witsml2__Cost *CostDayMud;
        /// Optional element 'witsml2:DiaCsgLast' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:DiaHole' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:DistDrill' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrill;
        /// Optional element 'witsml2:DistDrillRot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistHold' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistReam' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistSteering' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistSteering;
        /// Required element 'witsml2:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Optional element 'witsml2:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:ETimCirc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimCirc;
        /// Optional element 'witsml2:ETimDrill' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrill;
        /// Optional element 'witsml2:ETimDrillRot' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillRot;
        /// Optional element 'witsml2:ETimDrillSlid' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillSlid;
        /// Optional element 'witsml2:ETimHold' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimHold;
        /// Optional element 'witsml2:ETimLoc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLoc;
        /// Optional element 'witsml2:ETimReam' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimReam;
        /// Optional element 'witsml2:ETimSpud' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSpud;
        /// Optional element 'witsml2:ETimStart' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimStart;
        /// Optional element 'witsml2:ETimSteering' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSteering;
        /// Optional element 'witsml2:Forecast24Hr' of XML schema type 'eml21:String2000'
        std::string *Forecast24Hr;
        /// Optional element 'witsml2:Geologist' of XML schema type 'eml21:String64'
        std::string *Geologist;
        /// Optional element 'witsml2:Lithology' of XML schema type 'eml21:String64'
        std::string *Lithology;
        /// Optional element 'witsml2:Maasp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Maasp;
        /// Optional element 'witsml2:MdCsgLast' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:MdPlanned' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:MdReport' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdReport;
        /// Optional element 'witsml2:NameFormation' of XML schema type 'eml21:String64'
        std::string *NameFormation;
        /// Optional element 'witsml2:NumAFE' of XML schema type 'eml21:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:NumContract' of XML schema type 'xsd:int'
        int *NumContract;
        /// Optional element 'witsml2:NumOperator' of XML schema type 'xsd:int'
        int *NumOperator;
        /// Optional element 'witsml2:NumPob' of XML schema type 'xsd:int'
        int *NumPob;
        /// Optional element 'witsml2:NumService' of XML schema type 'xsd:int'
        int *NumService;
        /// Optional element 'witsml2:PresKickTol' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresKickTol;
        /// Optional element 'witsml2:PresLotEmw' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PresLotEmw;
        /// Optional element 'witsml2:Rig' of XML schema type 'eml21:String64'
        std::string *Rig;
        /// Optional element 'witsml2:RopAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:RopCurrent' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopCurrent;
        /// Optional element 'witsml2:StatusCurrent' of XML schema type 'eml21:String2000'
        std::string *StatusCurrent;
        /// Optional element 'witsml2:Sum24Hr' of XML schema type 'eml21:String2000'
        std::string *Sum24Hr;
        /// Optional element 'witsml2:Supervisor' of XML schema type 'eml21:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:TvdCsgLast' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdCsgLast;
        /// Optional element 'witsml2:TvdLot' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdLot;
        /// Optional element 'witsml2:TvdReport' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdReport;
        /// Optional element 'witsml2:VolKickTol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolKickTol;
        /// Optional element 'witsml2:RigResponse' of XML schema type 'witsml2:RigResponse'
        witsml2__RigResponse *RigResponse;
        /// Optional element 'witsml2:ShakerOp' of XML schema type 'witsml2:ShakerOp'
        std::vector<witsml2__ShakerOp *> ShakerOp;
        /// Optional element 'witsml2:Hse' of XML schema type 'witsml2:Hse'
        witsml2__Hse *Hse;
        /// Optional element 'witsml2:SupportCraft' of XML schema type 'witsml2:SupportCraft'
        std::vector<witsml2__SupportCraft *> SupportCraft;
        /// Optional element 'witsml2:Weather' of XML schema type 'witsml2:Weather'
        std::vector<witsml2__Weather *> Weather;
        /// Optional element 'witsml2:MudInventory' of XML schema type 'witsml2:Inventory'
        std::vector<witsml2__Inventory *> MudInventory;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:MudVolume' of XML schema type 'witsml2:MudVolume'
        witsml2__MudVolume *MudVolume;
        /// Optional element 'witsml2:Personnel' of XML schema type 'witsml2:Personnel'
        std::vector<witsml2__Personnel *> Personnel;
        /// Optional element 'witsml2:Activity' of XML schema type 'witsml2:DrillActivity'
        std::vector<witsml2__DrillActivity *> Activity;
        /// Optional element 'witsml2:DrillingParams' of XML schema type 'witsml2:DrillingParams'
        std::vector<witsml2__DrillingParams *> DrillingParams;
        /// Optional element 'witsml2:WbGeometry' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *WbGeometry;
        /// Optional element 'witsml2:DayCost' of XML schema type 'witsml2:DayCost'
        std::vector<witsml2__DayCost *> DayCost;
        /// Optional element 'witsml2:TrajectoryStation' of XML schema type 'witsml2:TrajectoryStation'
        std::vector<witsml2__TrajectoryStation *> TrajectoryStation;
        /// Optional element 'witsml2:Fluid' of XML schema type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Optional element 'witsml2:Scr' of XML schema type 'witsml2:Scr'
        std::vector<witsml2__Scr *> Scr;
        /// Optional element 'witsml2:BulkInventory' of XML schema type 'witsml2:Inventory'
        std::vector<witsml2__Inventory *> BulkInventory;
        /// Optional element 'witsml2:PitVolume' of XML schema type 'witsml2:PitVolume'
        std::vector<witsml2__PitVolume *> PitVolume;
        /// Optional element 'witsml2:PumpOp' of XML schema type 'witsml2:PumpOp'
        std::vector<witsml2__PumpOp *> PumpOp;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OpsReport, default initialized and not managed by a soap context
        virtual witsml2__OpsReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OpsReport); }
      public:
        /// Constructor with default initializations
        witsml2__OpsReport() : ConditionHole(), CostDay(), CostDayMud(), DiaCsgLast(), DiaHole(), DistDrill(), DistDrillRot(), DistDrillSlid(), DistHold(), DistReam(), DistSteering(), DTim(), Engineer(), ETimCirc(), ETimDrill(), ETimDrillRot(), ETimDrillSlid(), ETimHold(), ETimLoc(), ETimReam(), ETimSpud(), ETimStart(), ETimSteering(), Forecast24Hr(), Geologist(), Lithology(), Maasp(), MdCsgLast(), MdPlanned(), MdReport(), NameFormation(), NumAFE(), NumContract(), NumOperator(), NumPob(), NumService(), PresKickTol(), PresLotEmw(), Rig(), RopAv(), RopCurrent(), StatusCurrent(), Sum24Hr(), Supervisor(), Tubular(), TvdCsgLast(), TvdLot(), TvdReport(), VolKickTol(), RigResponse(), ShakerOp(), Hse(), SupportCraft(), Weather(), MudInventory(), Wellbore(), MudVolume(), Personnel(), Activity(), DrillingParams(), WbGeometry(), DayCost(), TrajectoryStation(), Fluid(), Scr(), BulkInventory(), PitVolume(), PumpOp() { }
        virtual ~witsml2__OpsReport() { }
        /// Friend allocator used by soap_new_witsml2__OpsReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OpsReport * SOAP_FMAC2 soap_instantiate_witsml2__OpsReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1709 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory (-740)
/* complex XML schema type 'witsml2:Trajectory': */
class SOAP_CMAC witsml2__Trajectory : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:DTimTrajStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimTrajStart;
        /// Optional element 'witsml2:DTimTrajEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimTrajEnd;
        /// Optional element 'witsml2:MdMn' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdMn;
        /// Optional element 'witsml2:MdMx' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdMx;
        /// Optional element 'witsml2:ServiceCompany' of XML schema type 'eml21:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml2:MagDeclUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDeclUsed;
        /// Optional element 'witsml2:GridConUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *GridConUsed;
        /// Optional element 'witsml2:AziVertSect' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziVertSect;
        /// Optional element 'witsml2:DispNsVertSectOrig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispNsVertSectOrig;
        /// Optional element 'witsml2:DispEwVertSectOrig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispEwVertSectOrig;
        /// Optional element 'witsml2:Definitive' of XML schema type 'xsd:boolean'
        bool *Definitive;
        /// Optional element 'witsml2:Memory' of XML schema type 'xsd:boolean'
        bool *Memory;
        /// Optional element 'witsml2:FinalTraj' of XML schema type 'xsd:boolean'
        bool *FinalTraj;
        /// Optional element 'witsml2:AziRef' of XML schema type 'witsml2:AziRef'
        enum witsml2__AziRef *AziRef;
        /// Optional element 'witsml2:TrajectoryStation' of XML schema type 'witsml2:TrajectoryStation'
        std::vector<witsml2__TrajectoryStation *> TrajectoryStation;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:ParentTrajectory' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ParentTrajectory;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Trajectory, default initialized and not managed by a soap context
        virtual witsml2__Trajectory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Trajectory); }
      public:
        /// Constructor with default initializations
        witsml2__Trajectory() : GrowingStatus(), DTimTrajStart(), DTimTrajEnd(), MdMn(), MdMx(), ServiceCompany(), MagDeclUsed(), GridConUsed(), AziVertSect(), DispNsVertSectOrig(), DispEwVertSectOrig(), Definitive(), Memory(), FinalTraj(), AziRef(), TrajectoryStation(), Wellbore(), ParentTrajectory() { }
        virtual ~witsml2__Trajectory() { }
        /// Friend allocator used by soap_new_witsml2__Trajectory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Trajectory * SOAP_FMAC2 soap_instantiate_witsml2__Trajectory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1733 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel (-752)
/* complex XML schema type 'witsml2:ToolErrorModel': */
class SOAP_CMAC witsml2__ToolErrorModel : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:TypeSurveyTool' of XML schema type 'witsml2:TypeSurveyTool'
        enum witsml2__TypeSurveyTool *TypeSurveyTool;
        /// Optional element 'witsml2:UseErrorTermSet' of XML schema type 'eml21:String64'
        std::string *UseErrorTermSet;
        /// Optional element 'witsml2:Authorization' of XML schema type 'witsml2:IscwsaAuthorizationData'
        witsml2__IscwsaAuthorizationData *Authorization;
        /// Optional element 'witsml2:OperatingCondition' of XML schema type 'witsml2:IscwsaSurveyToolOperatingCondition'
        std::vector<witsml2__IscwsaSurveyToolOperatingCondition *> OperatingCondition;
        /// Optional element 'witsml2:OperatingInterval' of XML schema type 'witsml2:IscwsaSurveyToolOperatingInterval'
        std::vector<witsml2__IscwsaSurveyToolOperatingInterval *> OperatingInterval;
        /// Optional element 'witsml2:ModelParameters' of XML schema type 'witsml2:IscwsaModelParameters'
        witsml2__IscwsaModelParameters *ModelParameters;
        /// Required element 'witsml2:ErrorTermValue' of XML schema type 'witsml2:IscwsaErrorTermValue'
        std::vector<witsml2__IscwsaErrorTermValue *> ErrorTermValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ToolErrorModel, default initialized and not managed by a soap context
        virtual witsml2__ToolErrorModel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ToolErrorModel); }
      public:
        /// Constructor with default initializations
        witsml2__ToolErrorModel() : TypeSurveyTool(), UseErrorTermSet(), Authorization(), OperatingCondition(), OperatingInterval(), ModelParameters(), ErrorTermValue() { }
        virtual ~witsml2__ToolErrorModel() { }
        /// Friend allocator used by soap_new_witsml2__ToolErrorModel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ToolErrorModel * SOAP_FMAC2 soap_instantiate_witsml2__ToolErrorModel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1737 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization (-754)
/* complex XML schema type 'witsml2:RigUtilization': */
class SOAP_CMAC witsml2__RigUtilization : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:StartOperationTime' of XML schema type 'eml21:TimeStamp'
        std::string *StartOperationTime;
        /// Optional element 'witsml2:EndOperationTime' of XML schema type 'eml21:TimeStamp'
        std::string *EndOperationTime;
        /// Optional element 'witsml2:StartHoleDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *StartHoleDepth;
        /// Optional element 'witsml2:EndHoleDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *EndHoleDepth;
        /// Optional element 'witsml2:Datum' of XML schema type 'eml21:String64'
        std::string *Datum;
        /// Optional element 'witsml2:AirGap' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AirGap;
        /// Optional element 'witsml2:WtBlock' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WtBlock;
        /// Optional element 'witsml2:RatingBlock' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingBlock;
        /// Optional element 'witsml2:NumBlockLines' of XML schema type 'xsd:int'
        int *NumBlockLines;
        /// Optional element 'witsml2:TypeHook' of XML schema type 'eml21:String64'
        std::string *TypeHook;
        /// Optional element 'witsml2:RatingHkld' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingHkld;
        /// Optional element 'witsml2:SizeDrillLine' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeDrillLine;
        /// Optional element 'witsml2:TypeDrawWorks' of XML schema type 'witsml2:DrawWorksType'
        enum witsml2__DrawWorksType *TypeDrawWorks;
        /// Optional element 'witsml2:PowerDrawWorks' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *PowerDrawWorks;
        /// Optional element 'witsml2:RatingDrawWorks' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingDrawWorks;
        /// Optional element 'witsml2:MotorDrawWorks' of XML schema type 'eml21:String64'
        std::string *MotorDrawWorks;
        /// Optional element 'witsml2:DescBrake' of XML schema type 'eml21:String64'
        std::string *DescBrake;
        /// Optional element 'witsml2:TypeSwivel' of XML schema type 'eml21:String64'
        std::string *TypeSwivel;
        /// Optional element 'witsml2:RatingSwivel' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingSwivel;
        /// Optional element 'witsml2:RotSystem' of XML schema type 'witsml2:DriveType'
        enum witsml2__DriveType *RotSystem;
        /// Optional element 'witsml2:DescRotSystem' of XML schema type 'eml21:String64'
        std::string *DescRotSystem;
        /// Optional element 'witsml2:RatingTqRotSys' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *RatingTqRotSys;
        /// Optional element 'witsml2:RotSizeOpening' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RotSizeOpening;
        /// Optional element 'witsml2:RatingRotSystem' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingRotSystem;
        /// Optional element 'witsml2:ScrSystem' of XML schema type 'eml21:String64'
        std::string *ScrSystem;
        /// Optional element 'witsml2:PipeHandlingSystem' of XML schema type 'eml21:String64'
        std::string *PipeHandlingSystem;
        /// Optional element 'witsml2:CapBulkMud' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapBulkMud;
        /// Optional element 'witsml2:CapLiquidMud' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapLiquidMud;
        /// Optional element 'witsml2:CapDrillWater' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapDrillWater;
        /// Optional element 'witsml2:CapPotableWater' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapPotableWater;
        /// Optional element 'witsml2:CapFuel' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapFuel;
        /// Optional element 'witsml2:CapBulkCement' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *CapBulkCement;
        /// Optional element 'witsml2:MainEngine' of XML schema type 'eml21:String64'
        std::string *MainEngine;
        /// Optional element 'witsml2:Generator' of XML schema type 'eml21:String64'
        std::string *Generator;
        /// Optional element 'witsml2:CementUnit' of XML schema type 'eml21:String64'
        std::string *CementUnit;
        /// Optional element 'witsml2:NumBunks' of XML schema type 'xsd:int'
        int *NumBunks;
        /// Optional element 'witsml2:BunksPerRoom' of XML schema type 'xsd:int'
        int *BunksPerRoom;
        /// Optional element 'witsml2:NumAnch' of XML schema type 'xsd:int'
        int *NumAnch;
        /// Optional element 'witsml2:MoorType' of XML schema type 'eml21:String64'
        std::string *MoorType;
        /// Optional element 'witsml2:NumGuideTens' of XML schema type 'xsd:int'
        int *NumGuideTens;
        /// Optional element 'witsml2:NumRiserTens' of XML schema type 'xsd:int'
        int *NumRiserTens;
        /// Optional element 'witsml2:VarDeckLdMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *VarDeckLdMx;
        /// Optional element 'witsml2:VdlStorm' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *VdlStorm;
        /// Optional element 'witsml2:NumThrusters' of XML schema type 'xsd:int'
        int *NumThrusters;
        /// Optional element 'witsml2:Azimuthing' of XML schema type 'xsd:boolean'
        bool *Azimuthing;
        /// Optional element 'witsml2:MotionCompensationMn' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *MotionCompensationMn;
        /// Optional element 'witsml2:MotionCompensationMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *MotionCompensationMx;
        /// Optional element 'witsml2:StrokeMotionCompensation' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *StrokeMotionCompensation;
        /// Optional element 'witsml2:RiserAngleLimit' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *RiserAngleLimit;
        /// Optional element 'witsml2:HeaveMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HeaveMx;
        /// Optional element 'witsml2:Gantry' of XML schema type 'eml21:String64'
        std::string *Gantry;
        /// Optional element 'witsml2:Flares' of XML schema type 'eml21:String64'
        std::string *Flares;
        /// Optional element 'witsml2:Shaker' of XML schema type 'witsml2:Shaker'
        std::vector<witsml2__Shaker *> Shaker;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:Bop' of XML schema type 'witsml2:Bop'
        witsml2__Bop *Bop;
        /// Optional element 'witsml2:Pit' of XML schema type 'witsml2:Pit'
        std::vector<witsml2__Pit *> Pit;
        /// Optional element 'witsml2:Pump' of XML schema type 'witsml2:MudPump'
        std::vector<witsml2__MudPump *> Pump;
        /// Optional element 'witsml2:Centrifuge' of XML schema type 'witsml2:Centrifuge'
        std::vector<witsml2__Centrifuge *> Centrifuge;
        /// Optional element 'witsml2:Hydrocyclone' of XML schema type 'witsml2:Hydrocyclone'
        std::vector<witsml2__Hydrocyclone *> Hydrocyclone;
        /// Optional element 'witsml2:Degasser' of XML schema type 'witsml2:Degasser'
        std::vector<witsml2__Degasser *> Degasser;
        /// Optional element 'witsml2:SurfaceEquipment' of XML schema type 'witsml2:SurfaceEquipment'
        witsml2__SurfaceEquipment *SurfaceEquipment;
        /// Optional element 'witsml2:BhaRun' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> BhaRun;
        /// Required element 'witsml2:Rig' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Rig;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RigUtilization, default initialized and not managed by a soap context
        virtual witsml2__RigUtilization *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RigUtilization); }
      public:
        /// Constructor with default initializations
        witsml2__RigUtilization() : StartOperationTime(), EndOperationTime(), StartHoleDepth(), EndHoleDepth(), Datum(), AirGap(), WtBlock(), RatingBlock(), NumBlockLines(), TypeHook(), RatingHkld(), SizeDrillLine(), TypeDrawWorks(), PowerDrawWorks(), RatingDrawWorks(), MotorDrawWorks(), DescBrake(), TypeSwivel(), RatingSwivel(), RotSystem(), DescRotSystem(), RatingTqRotSys(), RotSizeOpening(), RatingRotSystem(), ScrSystem(), PipeHandlingSystem(), CapBulkMud(), CapLiquidMud(), CapDrillWater(), CapPotableWater(), CapFuel(), CapBulkCement(), MainEngine(), Generator(), CementUnit(), NumBunks(), BunksPerRoom(), NumAnch(), MoorType(), NumGuideTens(), NumRiserTens(), VarDeckLdMx(), VdlStorm(), NumThrusters(), Azimuthing(), MotionCompensationMn(), MotionCompensationMx(), StrokeMotionCompensation(), RiserAngleLimit(), HeaveMx(), Gantry(), Flares(), Shaker(), Wellbore(), Bop(), Pit(), Pump(), Centrifuge(), Hydrocyclone(), Degasser(), SurfaceEquipment(), BhaRun(), Rig() { }
        virtual ~witsml2__RigUtilization() { }
        /// Friend allocator used by soap_new_witsml2__RigUtilization(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RigUtilization * SOAP_FMAC2 soap_instantiate_witsml2__RigUtilization(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1757 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Rig (-764)
/* complex XML schema type 'witsml2:Rig': */
class SOAP_CMAC witsml2__Rig : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:Owner' of XML schema type 'eml21:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypeRig' of XML schema type 'witsml2:RigType'
        enum witsml2__RigType *TypeRig;
        /// Optional element 'witsml2:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:YearEntService' of XML schema type 'xsd:gYear'
        std::string *YearEntService;
        /// Optional element 'witsml2:ClassRig' of XML schema type 'eml21:String64'
        std::string *ClassRig;
        /// Optional element 'witsml2:Approvals' of XML schema type 'eml21:String64'
        std::string *Approvals;
        /// Optional element 'witsml2:Registration' of XML schema type 'eml21:String64'
        std::string *Registration;
        /// Optional element 'witsml2:TelNumber' of XML schema type 'eml21:String64'
        std::string *TelNumber;
        /// Optional element 'witsml2:FaxNumber' of XML schema type 'eml21:String64'
        std::string *FaxNumber;
        /// Optional element 'witsml2:EmailAddress' of XML schema type 'eml21:String64'
        std::string *EmailAddress;
        /// Optional element 'witsml2:NameContact' of XML schema type 'eml21:String64'
        std::string *NameContact;
        /// Optional element 'witsml2:RatingDrillDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RatingDrillDepth;
        /// Optional element 'witsml2:RatingWaterDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RatingWaterDepth;
        /// Optional element 'witsml2:IsOffshore' of XML schema type 'xsd:boolean'
        bool *IsOffshore;
        /// Optional element 'witsml2:TypeDerrick' of XML schema type 'witsml2:DerrickType'
        enum witsml2__DerrickType *TypeDerrick;
        /// Optional element 'witsml2:RatingDerrick' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *RatingDerrick;
        /// Optional element 'witsml2:HtDerrick' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HtDerrick;
        /// Optional element 'witsml2:CapWindDerrick' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *CapWindDerrick;
        /// Optional element 'witsml2:NumCranes' of XML schema type 'xsd:int'
        int *NumCranes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Rig
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Rig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Rig, default initialized and not managed by a soap context
        virtual witsml2__Rig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Rig); }
      public:
        /// Constructor with default initializations
        witsml2__Rig() : Owner(), TypeRig(), Manufacturer(), YearEntService(), ClassRig(), Approvals(), Registration(), TelNumber(), FaxNumber(), EmailAddress(), NameContact(), RatingDrillDepth(), RatingWaterDepth(), IsOffshore(), TypeDerrick(), RatingDerrick(), HtDerrick(), CapWindDerrick(), NumCranes() { }
        virtual ~witsml2__Rig() { }
        /// Friend allocator used by soap_new_witsml2__Rig(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Rig * SOAP_FMAC2 soap_instantiate_witsml2__Rig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1759 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Risk (-765)
/* complex XML schema type 'witsml2:Risk': */
class SOAP_CMAC witsml2__Risk : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:Type' of XML schema type 'witsml2:RiskType'
        enum witsml2__RiskType Type;
        /// Required element 'witsml2:Category' of XML schema type 'witsml2:RiskCategory'
        enum witsml2__RiskCategory Category;
        /// Optional element 'witsml2:SubCategory' of XML schema type 'witsml2:RiskSubCategory'
        enum witsml2__RiskSubCategory *SubCategory;
        /// Optional element 'witsml2:ExtendCategory' of XML schema type 'eml21:String64'
        std::string *ExtendCategory;
        /// Optional element 'witsml2:AffectedPersonnel' of XML schema type 'witsml2:RiskAffectedPersonnel'
        std::vector<enum witsml2__RiskAffectedPersonnel> AffectedPersonnel;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:MdHoleStart' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHoleStart;
        /// Optional element 'witsml2:MdHoleEnd' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdHoleEnd;
        /// Optional element 'witsml2:TvdHoleStart' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdHoleStart;
        /// Optional element 'witsml2:TvdHoleEnd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdHoleEnd;
        /// Optional element 'witsml2:MdBitStart' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBitStart;
        /// Optional element 'witsml2:MdBitEnd' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdBitEnd;
        /// Optional element 'witsml2:DiaHole' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:SeverityLevel' of XML schema type 'witsml2:LevelIntegerCode'
        short *SeverityLevel;
        /// Optional element 'witsml2:ProbabilityLevel' of XML schema type 'witsml2:LevelIntegerCode'
        short *ProbabilityLevel;
        /// Optional element 'witsml2:Summary' of XML schema type 'eml21:String2000'
        std::string *Summary;
        /// Optional element 'witsml2:Details' of XML schema type 'eml21:String2000'
        std::string *Details;
        /// Optional element 'witsml2:Identification' of XML schema type 'eml21:String2000'
        std::string *Identification;
        /// Optional element 'witsml2:Contingency' of XML schema type 'eml21:String2000'
        std::string *Contingency;
        /// Optional element 'witsml2:Mitigation' of XML schema type 'eml21:String2000'
        std::vector<std::string> Mitigation;
        /// Optional element 'witsml2:ObjectReference' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> ObjectReference;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Risk
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Risk; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Risk, default initialized and not managed by a soap context
        virtual witsml2__Risk *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Risk); }
      public:
        /// Constructor with default initializations
        witsml2__Risk() : Type(), Category(), SubCategory(), ExtendCategory(), AffectedPersonnel(), DTimStart(), DTimEnd(), MdHoleStart(), MdHoleEnd(), TvdHoleStart(), TvdHoleEnd(), MdBitStart(), MdBitEnd(), DiaHole(), SeverityLevel(), ProbabilityLevel(), Summary(), Details(), Identification(), Contingency(), Mitigation(), ObjectReference(), Wellbore() { }
        virtual ~witsml2__Risk() { }
        /// Friend allocator used by soap_new_witsml2__Risk(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Risk * SOAP_FMAC2 soap_instantiate_witsml2__Risk(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1767 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster (-769)
/* complex XML schema type 'witsml2:StimPerforationCluster': */
class SOAP_CMAC witsml2__StimPerforationCluster : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:MdPerforatedInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdPerforatedInterval;
        /// Optional element 'witsml2:TvdPerforatedInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdPerforatedInterval;
        /// Optional element 'witsml2:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml2:PerforationCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 *PerforationCount;
        /// Optional element 'witsml2:Size' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Size;
        /// Optional element 'witsml2:DensityPerforation' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *DensityPerforation;
        /// Optional element 'witsml2:PhasingPerforation' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *PhasingPerforation;
        /// Optional element 'witsml2:FrictionFactor' of XML schema type 'xsd:double'
        double *FrictionFactor;
        /// Optional element 'witsml2:FrictionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:DischargeCoefficient' of XML schema type 'xsd:double'
        double *DischargeCoefficient;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPerforationCluster, default initialized and not managed by a soap context
        virtual witsml2__StimPerforationCluster *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPerforationCluster); }
      public:
        /// Constructor with default initializations
        witsml2__StimPerforationCluster() : MdPerforatedInterval(), TvdPerforatedInterval(), Type(), PerforationCount(), Size(), DensityPerforation(), PhasingPerforation(), FrictionFactor(), FrictionPres(), DischargeCoefficient() { }
        virtual ~witsml2__StimPerforationCluster() { }
        /// Friend allocator used by soap_new_witsml2__StimPerforationCluster(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPerforationCluster * SOAP_FMAC2 soap_instantiate_witsml2__StimPerforationCluster(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1779 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent (-775)
/* complex XML schema type 'witsml2:StimProppantAgent': */
class SOAP_CMAC witsml2__StimProppantAgent : public witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:FrictionCoefficientLaminar' of XML schema type 'xsd:double'
        double *FrictionCoefficientLaminar;
        /// Optional element 'witsml2:FrictionCoefficientTurbulent' of XML schema type 'xsd:double'
        double *FrictionCoefficientTurbulent;
        /// Optional element 'witsml2:MassAbsorptionCoefficient' of XML schema type 'eml21:AreaPerMassMeasure'
        eml21__AreaPerMassMeasure *MassAbsorptionCoefficient;
        /// Optional element 'witsml2:MeshSizeHigh' of XML schema type 'xsd:unsignedLong'
        ULONG64 *MeshSizeHigh;
        /// Optional element 'witsml2:MeshSizeLow' of XML schema type 'xsd:unsignedLong'
        ULONG64 *MeshSizeLow;
        /// Optional element 'witsml2:UnconfinedCompressiveStrength' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *UnconfinedCompressiveStrength;
        /// Optional element 'witsml2:ProppantAgentKind' of XML schema type 'witsml2:ProppantAgentKind'
        enum witsml2__ProppantAgentKind *ProppantAgentKind;
        /// Optional element 'witsml2:ISO13503_2Properties' of XML schema type 'witsml2:StimISO13503_2Properties'
        std::vector<witsml2__StimISO13503_USCORE2Properties *> ISO13503_USCORE2Properties;
        /// Optional element 'witsml2:ISO13503_5Point' of XML schema type 'witsml2:StimISO13503_5Point'
        std::vector<witsml2__StimISO13503_USCORE5Point *> ISO13503_USCORE5Point;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimProppantAgent, default initialized and not managed by a soap context
        virtual witsml2__StimProppantAgent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimProppantAgent); }
      public:
        /// Constructor with default initializations
        witsml2__StimProppantAgent() : FrictionCoefficientLaminar(), FrictionCoefficientTurbulent(), MassAbsorptionCoefficient(), MeshSizeHigh(), MeshSizeLow(), UnconfinedCompressiveStrength(), ProppantAgentKind(), ISO13503_USCORE2Properties(), ISO13503_USCORE5Point() { }
        virtual ~witsml2__StimProppantAgent() { }
        /// Friend allocator used by soap_new_witsml2__StimProppantAgent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimProppantAgent * SOAP_FMAC2 soap_instantiate_witsml2__StimProppantAgent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1785 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive (-778)
/* complex XML schema type 'witsml2:StimAdditive': */
class SOAP_CMAC witsml2__StimAdditive : public witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:AdditiveKind' of XML schema type 'witsml2:StimAdditiveKind'
        enum witsml2__StimAdditiveKind *AdditiveKind;
        /// Required element 'witsml2:Type' of XML schema type 'eml21:String2000'
        std::string Type;
        /// Required element 'witsml2:SupplierCode' of XML schema type 'eml21:String2000'
        std::string SupplierCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimAdditive, default initialized and not managed by a soap context
        virtual witsml2__StimAdditive *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimAdditive); }
      public:
        /// Constructor with default initializations
        witsml2__StimAdditive() : AdditiveKind(), Type(), SupplierCode() { }
        virtual ~witsml2__StimAdditive() { }
        /// Friend allocator used by soap_new_witsml2__StimAdditive(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimAdditive * SOAP_FMAC2 soap_instantiate_witsml2__StimAdditive(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1797 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob (-784)
/* complex XML schema type 'witsml2:StimJob': */
class SOAP_CMAC witsml2__StimJob : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:AvgJobPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgJobPres;
        /// Optional element 'witsml2:BottomholeStaticTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *BottomholeStaticTemperature;
        /// Required element 'witsml2:CustomerName' of XML schema type 'eml21:String2000'
        std::string CustomerName;
        /// Optional element 'witsml2:DTimArrival' of XML schema type 'eml21:TimeStamp'
        std::string *DTimArrival;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:FlowBackPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FlowBackPres;
        /// Optional element 'witsml2:FlowBackRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowBackRate;
        /// Optional element 'witsml2:FlowBackVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FlowBackVolume;
        /// Optional element 'witsml2:FluidEfficiency' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:HhpOrdered' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpOrdered;
        /// Optional element 'witsml2:HhpUsed' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpUsed;
        /// Optional element 'witsml2:JobPerforationClusters' of XML schema type 'witsml2:StimPerforationClusterSet'
        witsml2__StimPerforationClusterSet *JobPerforationClusters;
        /// Required element 'witsml2:Kind' of XML schema type 'eml21:String2000'
        std::string Kind;
        /// Optional element 'witsml2:MaxFluidRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *MaxFluidRate;
        /// Optional element 'witsml2:MaxJobPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxJobPres;
        /// Optional element 'witsml2:PIDXCommodityCode' of XML schema type 'witsml2:PIDXCommodityCode'
        enum witsml2__PIDXCommodityCode *PIDXCommodityCode;
        /// Required element 'witsml2:ServiceCompany' of XML schema type 'eml21:String2000'
        std::string ServiceCompany;
        /// Optional element 'witsml2:StageCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 *StageCount;
        /// Optional element 'witsml2:Supervisor' of XML schema type 'eml21:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:TotalJobVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *TotalJobVolume;
        /// Optional element 'witsml2:TotalProppantInFormation' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *TotalProppantInFormation;
        /// Optional element 'witsml2:TotalProppantUsed' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *TotalProppantUsed;
        /// Optional element 'witsml2:TotalPumpTime' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *TotalPumpTime;
        /// Optional element 'witsml2:TreatingBottomholeTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TreatingBottomholeTemperature;
        /// Optional element 'witsml2:JobStage' of XML schema type 'witsml2:StimJobStage'
        std::vector<witsml2__StimJobStage *> JobStage;
        /// Optional element 'witsml2:MaterialUsed' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Required element 'witsml2:MaterialCatalog' of XML schema type 'witsml2:StimJobMaterialCatalog'
        witsml2__StimJobMaterialCatalog *MaterialCatalog;
        /// Optional element 'witsml2:LogCatalog' of XML schema type 'witsml2:StimJobLogCatalog'
        std::vector<witsml2__StimJobLogCatalog *> LogCatalog;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJob, default initialized and not managed by a soap context
        virtual witsml2__StimJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJob); }
      public:
        /// Constructor with default initializations
        witsml2__StimJob() : AvgJobPres(), BottomholeStaticTemperature(), CustomerName(), DTimArrival(), DTimEnd(), DTimStart(), FlowBackPres(), FlowBackRate(), FlowBackVolume(), FluidEfficiency(), HhpOrdered(), HhpUsed(), JobPerforationClusters(), Kind(), MaxFluidRate(), MaxJobPres(), PIDXCommodityCode(), ServiceCompany(), StageCount(), Supervisor(), TotalJobVolume(), TotalProppantInFormation(), TotalProppantUsed(), TotalPumpTime(), TreatingBottomholeTemperature(), JobStage(), MaterialUsed(), Wellbore(), MaterialCatalog(), LogCatalog() { }
        virtual ~witsml2__StimJob() { }
        /// Friend allocator used by soap_new_witsml2__StimJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJob * SOAP_FMAC2 soap_instantiate_witsml2__StimJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1807 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage (-789)
/* complex XML schema type 'witsml2:StimJobStage': */
class SOAP_CMAC witsml2__StimJobStage : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:Number' of XML schema type 'xsd:unsignedLong'
        ULONG64 *Number;
        /// Optional element 'witsml2:FractureHeight' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FractureHeight;
        /// Optional element 'witsml2:PercentPad' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PercentPad;
        /// Optional element 'witsml2:StagePerforationClusters' of XML schema type 'witsml2:StimPerforationClusterSet'
        witsml2__StimPerforationClusterSet *StagePerforationClusters;
        /// Optional element 'witsml2:AvgBaseFluidReturnVolumeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgBaseFluidReturnVolumeRate;
        /// Optional element 'witsml2:AvgBHStaticTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *AvgBHStaticTemperature;
        /// Optional element 'witsml2:AvgBHTreatingTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *AvgBHTreatingTemperature;
        /// Optional element 'witsml2:AvgBottomholePumpedVolumeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgBottomholePumpedVolumeRate;
        /// Optional element 'witsml2:AvgConductivity' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *AvgConductivity;
        /// Optional element 'witsml2:AvgFractureWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AvgFractureWidth;
        /// Optional element 'witsml2:AvgHydraulicPower' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *AvgHydraulicPower;
        /// Optional element 'witsml2:AvgPresAnnulus' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresAnnulus;
        /// Optional element 'witsml2:AvgPresCasing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresCasing;
        /// Optional element 'witsml2:AvgPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresSurface;
        /// Optional element 'witsml2:AvgPresTubing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *AvgPresTubing;
        /// Optional element 'witsml2:AvgProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgProppantConcBottomhole;
        /// Optional element 'witsml2:AvgProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *AvgProppantConcSurface;
        /// Optional element 'witsml2:AvgSlurryReturnVolumeRate' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *AvgSlurryReturnVolumeRate;
        /// Optional element 'witsml2:BreakDownPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *BreakDownPres;
        /// Optional element 'witsml2:ClosureDuration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ClosureDuration;
        /// Optional element 'witsml2:ClosurePres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *ClosurePres;
        /// Optional element 'witsml2:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml2:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml2:FormationBreakLengthPerDay' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FormationBreakLengthPerDay;
        /// Optional element 'witsml2:FormationName' of XML schema type 'eml21:String2000'
        std::string *FormationName;
        /// Optional element 'witsml2:FormationProppantMass' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *FormationProppantMass;
        /// Optional element 'witsml2:FractureGradientFinal' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradientFinal;
        /// Optional element 'witsml2:FractureGradientInitial' of XML schema type 'eml21:ForcePerVolumeMeasure'
        eml21__ForcePerVolumeMeasure *FractureGradientInitial;
        /// Optional element 'witsml2:FractureLength' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FractureLength;
        /// Optional element 'witsml2:FrictionPressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FrictionPressure;
        /// Optional element 'witsml2:HhpOrderedCO2' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpOrderedCO2;
        /// Optional element 'witsml2:HhpOrderedFluid' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpOrderedFluid;
        /// Optional element 'witsml2:HhpUsedCO2' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpUsedCO2;
        /// Optional element 'witsml2:HhpUsedFluid' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *HhpUsedFluid;
        /// Optional element 'witsml2:InitialShutinPres' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *InitialShutinPres;
        /// Optional element 'witsml2:MaxFluidVolumeRateAnnulus' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *MaxFluidVolumeRateAnnulus;
        /// Optional element 'witsml2:MaxFluidVolumeRateCasing' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *MaxFluidVolumeRateCasing;
        /// Optional element 'witsml2:MaxFluidVolumeRateTubing' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *MaxFluidVolumeRateTubing;
        /// Optional element 'witsml2:MaxHydraulicPower' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *MaxHydraulicPower;
        /// Optional element 'witsml2:MaxPresAnnulus' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPresAnnulus;
        /// Optional element 'witsml2:MaxPresCasing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPresCasing;
        /// Optional element 'witsml2:MaxPresSurface' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPresSurface;
        /// Optional element 'witsml2:MaxPresTubing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *MaxPresTubing;
        /// Optional element 'witsml2:MaxProppantConcBottomhole' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MaxProppantConcBottomhole;
        /// Optional element 'witsml2:MaxProppantConcSurface' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *MaxProppantConcSurface;
        /// Optional element 'witsml2:MdFormationBottom' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdFormationBottom;
        /// Optional element 'witsml2:MdFormationTop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdFormationTop;
        /// Optional element 'witsml2:MdOpenHoleBottom' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdOpenHoleBottom;
        /// Optional element 'witsml2:MdOpenHoleTop' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *MdOpenHoleTop;
        /// Optional element 'witsml2:NetPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *NetPres;
        /// Optional element 'witsml2:OpenHoleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OpenHoleDiameter;
        /// Optional element 'witsml2:OpenHoleName' of XML schema type 'eml21:String2000'
        std::string *OpenHoleName;
        /// Optional element 'witsml2:PercentProppantPumped' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *PercentProppantPumped;
        /// Optional element 'witsml2:PerfBallCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 *PerfBallCount;
        /// Optional element 'witsml2:PerfBallSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PerfBallSize;
        /// Optional element 'witsml2:PerfProppantConc' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PerfProppantConc;
        /// Optional element 'witsml2:ProppantHeight' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ProppantHeight;
        /// Optional element 'witsml2:ScreenedOut' of XML schema type 'xsd:boolean'
        bool *ScreenedOut;
        /// Optional element 'witsml2:ScreenOutPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *ScreenOutPres;
        /// Optional element 'witsml2:TechnologyType' of XML schema type 'eml21:String64'
        std::string *TechnologyType;
        /// Optional element 'witsml2:TotalProppantInFormation' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *TotalProppantInFormation;
        /// Optional element 'witsml2:TotalPumpTime' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *TotalPumpTime;
        /// Optional element 'witsml2:TotalVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *TotalVolume;
        /// Optional element 'witsml2:TvdFormationBottom' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdFormationBottom;
        /// Optional element 'witsml2:TvdFormationTop' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdFormationTop;
        /// Optional element 'witsml2:TvdOpenHoleBottom' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdOpenHoleBottom;
        /// Optional element 'witsml2:TvdOpenHoleTop' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *TvdOpenHoleTop;
        /// Optional element 'witsml2:VolumeBody' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeBody;
        /// Optional element 'witsml2:VolumeFlush' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeFlush;
        /// Optional element 'witsml2:VolumePad' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumePad;
        /// Optional element 'witsml2:WaterSource' of XML schema type 'eml21:String2000'
        std::string *WaterSource;
        /// Optional element 'witsml2:WellboreProppantMass' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *WellboreProppantMass;
        /// Optional element 'witsml2:PdatSession' of XML schema type 'witsml2:StimJobDiagnosticSession'
        std::vector<witsml2__StimJobDiagnosticSession *> PdatSession;
        /// Optional element 'witsml2:ShutInPres' of XML schema type 'witsml2:StimShutInPressure'
        std::vector<witsml2__StimShutInPressure *> ShutInPres;
        /// Optional element 'witsml2:JobEvent' of XML schema type 'witsml2:StimEvent'
        std::vector<witsml2__StimEvent *> JobEvent;
        /// Optional element 'witsml2:JobStep' of XML schema type 'witsml2:StimJobStep'
        std::vector<witsml2__StimJobStep *> JobStep;
        /// Optional element 'witsml2:MaxMaterialUsageRate' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaxMaterialUsageRate;
        /// Optional element 'witsml2:MaterialUsed' of XML schema type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Optional element 'witsml2:FlowPath' of XML schema type 'witsml2:StimFlowPath'
        witsml2__StimFlowPath *FlowPath;
        /// Optional element 'witsml2:StimStageLog' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> StimStageLog;
        /// Optional element 'witsml2:ReservoirInterval' of XML schema type 'witsml2:StimReservoirInterval'
        std::vector<witsml2__StimReservoirInterval *> ReservoirInterval;
        /// Optional element 'witsml2:Diversion' of XML schema type 'witsml2:StimJobDiversion'
        witsml2__StimJobDiversion *Diversion;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobStage, default initialized and not managed by a soap context
        virtual witsml2__StimJobStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobStage); }
      public:
        /// Constructor with default initializations
        witsml2__StimJobStage() : Number(), FractureHeight(), PercentPad(), StagePerforationClusters(), AvgBaseFluidReturnVolumeRate(), AvgBHStaticTemperature(), AvgBHTreatingTemperature(), AvgBottomholePumpedVolumeRate(), AvgConductivity(), AvgFractureWidth(), AvgHydraulicPower(), AvgPresAnnulus(), AvgPresCasing(), AvgPresSurface(), AvgPresTubing(), AvgProppantConcBottomhole(), AvgProppantConcSurface(), AvgSlurryReturnVolumeRate(), BreakDownPres(), ClosureDuration(), ClosurePres(), DTimEnd(), DTimStart(), FormationBreakLengthPerDay(), FormationName(), FormationProppantMass(), FractureGradientFinal(), FractureGradientInitial(), FractureLength(), FrictionPressure(), HhpOrderedCO2(), HhpOrderedFluid(), HhpUsedCO2(), HhpUsedFluid(), InitialShutinPres(), MaxFluidVolumeRateAnnulus(), MaxFluidVolumeRateCasing(), MaxFluidVolumeRateTubing(), MaxHydraulicPower(), MaxPresAnnulus(), MaxPresCasing(), MaxPresSurface(), MaxPresTubing(), MaxProppantConcBottomhole(), MaxProppantConcSurface(), MdFormationBottom(), MdFormationTop(), MdOpenHoleBottom(), MdOpenHoleTop(), NetPres(), OpenHoleDiameter(), OpenHoleName(), PercentProppantPumped(), PerfBallCount(), PerfBallSize(), PerfProppantConc(), ProppantHeight(), ScreenedOut(), ScreenOutPres(), TechnologyType(), TotalProppantInFormation(), TotalPumpTime(), TotalVolume(), TvdFormationBottom(), TvdFormationTop(), TvdOpenHoleBottom(), TvdOpenHoleTop(), VolumeBody(), VolumeFlush(), VolumePad(), WaterSource(), WellboreProppantMass(), PdatSession(), ShutInPres(), JobEvent(), JobStep(), MaxMaterialUsageRate(), MaterialUsed(), FlowPath(), StimStageLog(), ReservoirInterval(), Diversion(), uid() { }
        virtual ~witsml2__StimJobStage() { }
        /// Friend allocator used by soap_new_witsml2__StimJobStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobStage * SOAP_FMAC2 soap_instantiate_witsml2__StimJobStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1819 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram (-795)
/* complex XML schema type 'witsml2:SurveyProgram': */
class SOAP_CMAC witsml2__SurveyProgram : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:SurveyVer' of XML schema type 'xsd:unsignedLong'
        ULONG64 SurveyVer;
        /// Optional element 'witsml2:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Final' of XML schema type 'eml21:String64'
        std::string *Final;
        /// Optional element 'witsml2:SurveySection' of XML schema type 'witsml2:SurveySection'
        std::vector<witsml2__SurveySection *> SurveySection;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurveyProgram, default initialized and not managed by a soap context
        virtual witsml2__SurveyProgram *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurveyProgram); }
      public:
        /// Constructor with default initializations
        witsml2__SurveyProgram() : SurveyVer(), Engineer(), Final(), SurveySection(), Wellbore() { }
        virtual ~witsml2__SurveyProgram() { }
        /// Friend allocator used by soap_new_witsml2__SurveyProgram(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurveyProgram * SOAP_FMAC2 soap_instantiate_witsml2__SurveyProgram(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1825 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Azi
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Azi (-798)
/* complex XML schema type 'witsml2:Azi': */
class SOAP_CMAC witsml2__Azi : public witsml2__AbstractIscwsaErrorCoefficient {
      public:
        /// Required element 'witsml2:Azi' of XML schema type 'eml21:String2000'
        std::string Azi;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Azi
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Azi; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Azi, default initialized and not managed by a soap context
        virtual witsml2__Azi *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Azi); }
      public:
        /// Constructor with default initializations
        witsml2__Azi() : Azi() { }
        virtual ~witsml2__Azi() { }
        /// Friend allocator used by soap_new_witsml2__Azi(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Azi * SOAP_FMAC2 soap_instantiate_witsml2__Azi(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1827 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Inc
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Inc (-799)
/* complex XML schema type 'witsml2:Inc': */
class SOAP_CMAC witsml2__Inc : public witsml2__AbstractIscwsaErrorCoefficient {
      public:
        /// Required element 'witsml2:Inc' of XML schema type 'eml21:String2000'
        std::string Inc;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Inc
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Inc; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Inc, default initialized and not managed by a soap context
        virtual witsml2__Inc *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Inc); }
      public:
        /// Constructor with default initializations
        witsml2__Inc() : Inc() { }
        virtual ~witsml2__Inc() { }
        /// Friend allocator used by soap_new_witsml2__Inc(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Inc * SOAP_FMAC2 soap_instantiate_witsml2__Inc(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1829 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Depth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Depth (-800)
/* complex XML schema type 'witsml2:Depth': */
class SOAP_CMAC witsml2__Depth : public witsml2__AbstractIscwsaErrorCoefficient {
      public:
        /// Required element 'witsml2:Depth' of XML schema type 'eml21:String2000'
        std::string Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Depth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Depth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Depth, default initialized and not managed by a soap context
        virtual witsml2__Depth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Depth); }
      public:
        /// Constructor with default initializations
        witsml2__Depth() : Depth() { }
        virtual ~witsml2__Depth() { }
        /// Friend allocator used by soap_new_witsml2__Depth(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Depth * SOAP_FMAC2 soap_instantiate_witsml2__Depth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1837 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet (-804)
/* complex XML schema type 'witsml2:ToolErrorTermSet': */
class SOAP_CMAC witsml2__ToolErrorTermSet : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:Authorization' of XML schema type 'witsml2:IscwsaAuthorizationData'
        witsml2__IscwsaAuthorizationData *Authorization;
        /// Optional element 'witsml2:Nomenclature' of XML schema type 'witsml2:IscwsaNomenclature'
        witsml2__IscwsaNomenclature *Nomenclature;
        /// Optional element 'witsml2:ErrorTerm' of XML schema type 'witsml2:IscwsaErrorTerm'
        std::vector<witsml2__IscwsaErrorTerm *> ErrorTerm;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ToolErrorTermSet, default initialized and not managed by a soap context
        virtual witsml2__ToolErrorTermSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ToolErrorTermSet); }
      public:
        /// Constructor with default initializations
        witsml2__ToolErrorTermSet() : Authorization(), Nomenclature(), ErrorTerm() { }
        virtual ~witsml2__ToolErrorTermSet() { }
        /// Friend allocator used by soap_new_witsml2__ToolErrorTermSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ToolErrorTermSet * SOAP_FMAC2 soap_instantiate_witsml2__ToolErrorTermSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1843 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd (-807)
/* complex XML schema type 'witsml2:Tvd': */
class SOAP_CMAC witsml2__Tvd : public witsml2__AbstractIscwsaErrorCoefficient {
      public:
        /// Required element 'witsml2:Tvd' of XML schema type 'eml21:String2000'
        std::string Tvd;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Tvd, default initialized and not managed by a soap context
        virtual witsml2__Tvd *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Tvd); }
      public:
        /// Constructor with default initializations
        witsml2__Tvd() : Tvd() { }
        virtual ~witsml2__Tvd() { }
        /// Friend allocator used by soap_new_witsml2__Tvd(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Tvd * SOAP_FMAC2 soap_instantiate_witsml2__Tvd(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1847 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology (-809)
/* complex XML schema type 'witsml2:WellboreGeology': */
class SOAP_CMAC witsml2__WellboreGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:ShowIntervalSet' of XML schema type 'witsml2:ShowEvaluation'
        witsml2__ShowEvaluation *ShowIntervalSet;
        /// Optional element 'witsml2:InterpretedGeologyIntervalSet' of XML schema type 'witsml2:InterpretedGeology'
        witsml2__InterpretedGeology *InterpretedGeologyIntervalSet;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:CuttingsIntervalSet' of XML schema type 'witsml2:CuttingsGeology'
        witsml2__CuttingsGeology *CuttingsIntervalSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeology, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeology); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreGeology() : MdInterval(), ShowIntervalSet(), InterpretedGeologyIntervalSet(), Wellbore(), CuttingsIntervalSet() { }
        virtual ~witsml2__WellboreGeology() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeology * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation (-810)
/* complex XML schema type 'witsml2:ShowEvaluation': */
class SOAP_CMAC witsml2__ShowEvaluation : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:EvaluatedIntervalShow' of XML schema type 'witsml2:ShowEvaluationInterval'
        std::vector<witsml2__ShowEvaluationInterval *> EvaluatedIntervalShow;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShowEvaluation, default initialized and not managed by a soap context
        virtual witsml2__ShowEvaluation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShowEvaluation); }
      public:
        /// Constructor with default initializations
        witsml2__ShowEvaluation() : MdInterval(), GrowingStatus(), EvaluatedIntervalShow(), Wellbore() { }
        virtual ~witsml2__ShowEvaluation() { }
        /// Friend allocator used by soap_new_witsml2__ShowEvaluation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShowEvaluation * SOAP_FMAC2 soap_instantiate_witsml2__ShowEvaluation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology (-811)
/* complex XML schema type 'witsml2:InterpretedGeology': */
class SOAP_CMAC witsml2__InterpretedGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:GeologicIntervalInterpreted' of XML schema type 'witsml2:InterpretedGeologyInterval'
        std::vector<witsml2__InterpretedGeologyInterval *> GeologicIntervalInterpreted;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedGeology, default initialized and not managed by a soap context
        virtual witsml2__InterpretedGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedGeology); }
      public:
        /// Constructor with default initializations
        witsml2__InterpretedGeology() : MdInterval(), GrowingStatus(), GeologicIntervalInterpreted(), Wellbore() { }
        virtual ~witsml2__InterpretedGeology() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedGeology * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1859 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval (-815)
/* complex XML schema type 'witsml2:ShowEvaluationInterval': */
class SOAP_CMAC witsml2__ShowEvaluationInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Required element 'witsml2:ShowFluid' of XML schema type 'witsml2:ShowFluid'
        enum witsml2__ShowFluid ShowFluid;
        /// Optional element 'witsml2:ShowRating' of XML schema type 'witsml2:ShowRating'
        enum witsml2__ShowRating *ShowRating;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShowEvaluationInterval, default initialized and not managed by a soap context
        virtual witsml2__ShowEvaluationInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShowEvaluationInterval); }
      public:
        /// Constructor with default initializations
        witsml2__ShowEvaluationInterval() : MdInterval(), Citation(), ShowFluid(), ShowRating(), uid() { }
        virtual ~witsml2__ShowEvaluationInterval() { }
        /// Friend allocator used by soap_new_witsml2__ShowEvaluationInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShowEvaluationInterval * SOAP_FMAC2 soap_instantiate_witsml2__ShowEvaluationInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval (-817)
/* complex XML schema type 'witsml2:CuttingsGeologyInterval': */
class SOAP_CMAC witsml2__CuttingsGeologyInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:DensBulk' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensBulk;
        /// Optional element 'witsml2:DensShale' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensShale;
        /// Optional element 'witsml2:Calcite' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Calcite;
        /// Optional element 'witsml2:CalcStab' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *CalcStab;
        /// Optional element 'witsml2:Cec' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *Cec;
        /// Optional element 'witsml2:Dolomite' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Dolomite;
        /// Optional element 'witsml2:SizeMin' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeMin;
        /// Optional element 'witsml2:SizeMax' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeMax;
        /// Optional element 'witsml2:Qft' of XML schema type 'eml21:IlluminanceMeasure'
        eml21__IlluminanceMeasure *Qft;
        /// Optional element 'witsml2:CleaningMethod' of XML schema type 'eml21:String64'
        std::string *CleaningMethod;
        /// Optional element 'witsml2:DryingMethod' of XML schema type 'eml21:String64'
        std::string *DryingMethod;
        /// Optional element 'witsml2:CuttingsIntervalLithology' of XML schema type 'witsml2:CuttingsIntervalLithology'
        std::vector<witsml2__CuttingsIntervalLithology *> CuttingsIntervalLithology;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsGeologyInterval, default initialized and not managed by a soap context
        virtual witsml2__CuttingsGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsGeologyInterval); }
      public:
        /// Constructor with default initializations
        witsml2__CuttingsGeologyInterval() : MdInterval(), Citation(), DensBulk(), DensShale(), Calcite(), CalcStab(), Cec(), Dolomite(), SizeMin(), SizeMax(), Qft(), CleaningMethod(), DryingMethod(), CuttingsIntervalLithology(), uid() { }
        virtual ~witsml2__CuttingsGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1865 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology (-818)
/* complex XML schema type 'witsml2:CuttingsGeology': */
class SOAP_CMAC witsml2__CuttingsGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:CuttingsInterval' of XML schema type 'witsml2:CuttingsGeologyInterval'
        std::vector<witsml2__CuttingsGeologyInterval *> CuttingsInterval;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsGeology, default initialized and not managed by a soap context
        virtual witsml2__CuttingsGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsGeology); }
      public:
        /// Constructor with default initializations
        witsml2__CuttingsGeology() : MdInterval(), GrowingStatus(), CuttingsInterval(), Wellbore() { }
        virtual ~witsml2__CuttingsGeology() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsGeology * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1869 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval (-820)
/* complex XML schema type 'witsml2:InterpretedGeologyInterval': */
class SOAP_CMAC witsml2__InterpretedGeologyInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml2:GeochronologicalUnit' of XML schema type 'witsml2:GeochronologicalUnit'
        std::vector<witsml2__GeochronologicalUnit *> GeochronologicalUnit;
        /// Optional element 'witsml2:LithostratigraphicUnit' of XML schema type 'witsml2:LithostratigraphicUnit'
        std::vector<witsml2__LithostratigraphicUnit *> LithostratigraphicUnit;
        /// Optional element 'witsml2:InterpretedLithology' of XML schema type 'witsml2:InterpretedIntervalLithology'
        witsml2__InterpretedIntervalLithology *InterpretedLithology;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedGeologyInterval, default initialized and not managed by a soap context
        virtual witsml2__InterpretedGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedGeologyInterval); }
      public:
        /// Constructor with default initializations
        witsml2__InterpretedGeologyInterval() : MdInterval(), Citation(), GeochronologicalUnit(), LithostratigraphicUnit(), InterpretedLithology(), uid() { }
        virtual ~witsml2__InterpretedGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1877 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter (-824)
/* complex XML schema type 'witsml2:MudLogForceParameter': */
class SOAP_CMAC witsml2__MudLogForceParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XML schema type 'eml21:ForceMeasureExt'
        eml21__ForceMeasureExt *Value;
        /// Required element 'witsml2:ForceParameterKind' of XML schema type 'witsml2:ForceParameterKind'
        enum witsml2__ForceParameterKind ForceParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogForceParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogForceParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogForceParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogForceParameter() : Value(), ForceParameterKind() { }
        virtual ~witsml2__MudLogForceParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogForceParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogForceParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogForceParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1879 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter (-825)
/* complex XML schema type 'witsml2:MudLogPressureParameter': */
class SOAP_CMAC witsml2__MudLogPressureParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XML schema type 'eml21:PressureMeasureExt'
        eml21__PressureMeasureExt *Value;
        /// Required element 'witsml2:PressureParameterKind' of XML schema type 'witsml2:PressureParameterKind'
        enum witsml2__PressureParameterKind PressureParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogPressureParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogPressureParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogPressureParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogPressureParameter() : Value(), PressureParameterKind() { }
        virtual ~witsml2__MudLogPressureParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogPressureParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogPressureParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogPressureParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1881 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter (-826)
/* complex XML schema type 'witsml2:MudLogPressureGradientParameter': */
class SOAP_CMAC witsml2__MudLogPressureGradientParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XML schema type 'eml21:ForcePerVolumeMeasureExt'
        eml21__ForcePerVolumeMeasureExt *Value;
        /// Required element 'witsml2:PressureGradientParameterKind' of XML schema type 'witsml2:PressureGradientParameterKind'
        enum witsml2__PressureGradientParameterKind PressureGradientParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogPressureGradientParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogPressureGradientParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogPressureGradientParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogPressureGradientParameter() : Value(), PressureGradientParameterKind() { }
        virtual ~witsml2__MudLogPressureGradientParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogPressureGradientParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogPressureGradientParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogPressureGradientParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1891 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter (-831)
/* complex XML schema type 'witsml2:MudLogStringParameter': */
class SOAP_CMAC witsml2__MudLogStringParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XML schema type 'eml21:String64'
        std::string Value;
        /// Required element 'witsml2:MudLogStringParameterKind' of XML schema type 'witsml2:MudLogStringParameterKind'
        enum witsml2__MudLogStringParameterKind MudLogStringParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogStringParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogStringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogStringParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogStringParameter() : Value(), MudLogStringParameterKind() { }
        virtual ~witsml2__MudLogStringParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogStringParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogStringParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogStringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1893 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport (-832)
/* complex XML schema type 'witsml2:MudLogReport': */
class SOAP_CMAC witsml2__MudLogReport : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:MudLogCompany' of XML schema type 'eml21:String64'
        std::string *MudLogCompany;
        /// Optional element 'witsml2:MudLogEngineers' of XML schema type 'eml21:String2000'
        std::string *MudLogEngineers;
        /// Optional element 'witsml2:MudLogGeologists' of XML schema type 'eml21:String2000'
        std::string *MudLogGeologists;
        /// Optional element 'witsml2:ReportMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ReportMdInterval;
        /// Required element 'witsml2:GrowingStatus' of XML schema type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Required element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:WellboreGeology' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *WellboreGeology;
        /// Optional element 'witsml2:MudlogIntervals' of XML schema type 'witsml2:MudlogReportInterval'
        std::vector<witsml2__MudlogReportInterval *> MudlogIntervals;
        /// Optional element 'witsml2:RelatedLogs' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> RelatedLogs;
        /// Optional element 'witsml2:Parameter' of XML schema type 'witsml2:MudLogParameter'
        std::vector<witsml2__MudLogParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogReport, default initialized and not managed by a soap context
        virtual witsml2__MudLogReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogReport); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogReport() : MudLogCompany(), MudLogEngineers(), MudLogGeologists(), ReportMdInterval(), GrowingStatus(), Wellbore(), WellboreGeology(), MudlogIntervals(), RelatedLogs(), Parameter() { }
        virtual ~witsml2__MudLogReport() { }
        /// Friend allocator used by soap_new_witsml2__MudLogReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogReport * SOAP_FMAC2 soap_instantiate_witsml2__MudLogReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1903 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter (-837)
/* complex XML schema type 'witsml2:MudLogConcentrationParameter': */
class SOAP_CMAC witsml2__MudLogConcentrationParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XML schema type 'eml21:VolumePerVolumeMeasureExt'
        eml21__VolumePerVolumeMeasureExt *Value;
        /// Required element 'witsml2:ConcentrationParameterKind' of XML schema type 'witsml2:ConcentrationParameterKind'
        enum witsml2__ConcentrationParameterKind ConcentrationParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogConcentrationParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogConcentrationParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogConcentrationParameter); }
      public:
        /// Constructor with default initializations
        witsml2__MudLogConcentrationParameter() : Value(), ConcentrationParameterKind() { }
        virtual ~witsml2__MudLogConcentrationParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogConcentrationParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogConcentrationParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogConcentrationParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1913 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker (-842)
/* complex XML schema type 'witsml2:WellboreMarker': */
class SOAP_CMAC witsml2__WellboreMarker : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:ChronostratigraphicTop' of XML schema type 'witsml2:GeochronologicalUnit'
        witsml2__GeochronologicalUnit *ChronostratigraphicTop;
        /// Optional element 'witsml2:LithostratigraphicTop' of XML schema type 'witsml2:LithostratigraphicUnit'
        witsml2__LithostratigraphicUnit *LithostratigraphicTop;
        /// Required element 'witsml2:Md' of XML schema type 'witsml2:MeasuredDepthCoord'
        witsml2__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XML schema type 'witsml2:WellVerticalDepthCoord'
        witsml2__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:DipAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipAngle;
        /// Optional element 'witsml2:DipDirection' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipDirection;
        /// Optional element 'witsml2:Trajectory' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Trajectory;
        /// Optional element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreMarker, default initialized and not managed by a soap context
        virtual witsml2__WellboreMarker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreMarker); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreMarker() : ChronostratigraphicTop(), LithostratigraphicTop(), Md(), Tvd(), DipAngle(), DipDirection(), Trajectory(), Wellbore() { }
        virtual ~witsml2__WellboreMarker() { }
        /// Friend allocator used by soap_new_witsml2__WellboreMarker(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreMarker * SOAP_FMAC2 soap_instantiate_witsml2__WellboreMarker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1915 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet (-843)
/* complex XML schema type 'witsml2:WellboreMarkerSet': */
class SOAP_CMAC witsml2__WellboreMarkerSet : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:MarkerSetInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MarkerSetInterval;
        /// Optional element 'witsml2:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:FormationMarker' of XML schema type 'witsml2:WellboreMarker'
        std::vector<witsml2__WellboreMarker *> FormationMarker;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreMarkerSet, default initialized and not managed by a soap context
        virtual witsml2__WellboreMarkerSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreMarkerSet); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreMarkerSet() : MarkerSetInterval(), Wellbore(), FormationMarker() { }
        virtual ~witsml2__WellboreMarkerSet() { }
        /// Friend allocator used by soap_new_witsml2__WellboreMarkerSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreMarkerSet * SOAP_FMAC2 soap_instantiate_witsml2__WellboreMarkerSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1917 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion (-844)
/* complex XML schema type 'witsml2:WellCompletion': */
class SOAP_CMAC witsml2__WellCompletion : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml2:FieldID' of XML schema type 'eml21:String64'
        std::string *FieldID;
        /// Optional element 'witsml2:FieldCode' of XML schema type 'eml21:String64'
        std::string *FieldCode;
        /// Optional element 'witsml2:FieldType' of XML schema type 'eml21:String64'
        std::string *FieldType;
        /// Optional element 'witsml2:EffectiveDate' of XML schema type 'eml21:TimeStamp'
        std::string *EffectiveDate;
        /// Optional element 'witsml2:ExpiredDate' of XML schema type 'eml21:TimeStamp'
        std::string *ExpiredDate;
        /// Optional element 'witsml2:E_P_RightsID' of XML schema type 'eml21:String64'
        std::string *E_USCOREP_USCORERightsID;
        /// Optional element 'witsml2:CurrentStatus' of XML schema type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml2:StatusDate' of XML schema type 'eml21:TimeStamp'
        std::string *StatusDate;
        /// Optional element 'witsml2:StatusHistory' of XML schema type 'witsml2:CompletionStatusHistory'
        std::vector<witsml2__CompletionStatusHistory *> StatusHistory;
        /// Required element 'witsml2:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellCompletion, default initialized and not managed by a soap context
        virtual witsml2__WellCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellCompletion); }
      public:
        /// Constructor with default initializations
        witsml2__WellCompletion() : FieldID(), FieldCode(), FieldType(), EffectiveDate(), ExpiredDate(), E_USCOREP_USCORERightsID(), CurrentStatus(), StatusDate(), StatusHistory(), Well() { }
        virtual ~witsml2__WellCompletion() { }
        /// Friend allocator used by soap_new_witsml2__WellCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellCompletion * SOAP_FMAC2 soap_instantiate_witsml2__WellCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1921 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion (-846)
/* complex XML schema type 'witsml2:WellboreCompletion': */
class SOAP_CMAC witsml2__WellboreCompletion : public eml21__AbstractObject {
      public:
        /// Required element 'witsml2:NameWellCompletion' of XML schema type 'eml21:String64'
        std::string NameWellCompletion;
        /// Optional element 'witsml2:WellboreCompletionNo' of XML schema type 'eml21:String64'
        std::string *WellboreCompletionNo;
        /// Optional element 'witsml2:WellboreCompletionAlias' of XML schema type 'eml21:String64'
        std::string *WellboreCompletionAlias;
        /// Optional element 'witsml2:EventHistory' of XML schema type 'witsml2:EventInfo'
        std::vector<witsml2__EventInfo *> EventHistory;
        /// Optional element 'witsml2:WellboreCompletionDate' of XML schema type 'eml21:TimeStamp'
        std::string *WellboreCompletionDate;
        /// Optional element 'witsml2:SuffixAPI' of XML schema type 'eml21:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml2:CompletionMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *CompletionMdInterval;
        /// Optional element 'witsml2:CompletionTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *CompletionTvdInterval;
        /// Optional element 'witsml2:CurrentStatus' of XML schema type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml2:StatusDate' of XML schema type 'eml21:TimeStamp'
        std::string *StatusDate;
        /// Optional element 'witsml2:StatusHistory' of XML schema type 'witsml2:CompletionStatusHistory'
        std::vector<witsml2__CompletionStatusHistory *> StatusHistory;
        /// Optional element 'witsml2:ContactIntervalSet' of XML schema type 'witsml2:ContactIntervalSet'
        witsml2__ContactIntervalSet *ContactIntervalSet;
        /// Required element 'witsml2:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Required element 'witsml2:WellCompletion' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *WellCompletion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreCompletion, default initialized and not managed by a soap context
        virtual witsml2__WellboreCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreCompletion); }
      public:
        /// Constructor with default initializations
        witsml2__WellboreCompletion() : NameWellCompletion(), WellboreCompletionNo(), WellboreCompletionAlias(), EventHistory(), WellboreCompletionDate(), SuffixAPI(), CompletionMdInterval(), CompletionTvdInterval(), CurrentStatus(), StatusDate(), StatusHistory(), ContactIntervalSet(), ReferenceWellbore(), WellCompletion() { }
        virtual ~witsml2__WellboreCompletion() { }
        /// Friend allocator used by soap_new_witsml2__WellboreCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreCompletion * SOAP_FMAC2 soap_instantiate_witsml2__WellboreCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:279 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray (-25)
/* complex XML schema type 'eml21:AbstractFloatingPointArray': */
class SOAP_CMAC eml21__AbstractFloatingPointArray : public eml21__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractFloatingPointArray, default initialized and not managed by a soap context
        virtual eml21__AbstractFloatingPointArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractFloatingPointArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractFloatingPointArray() { }
        virtual ~eml21__AbstractFloatingPointArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractFloatingPointArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractFloatingPointArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractFloatingPointArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:281 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray (-26)
/* complex XML schema type 'eml21:AbstractIntegerArray': */
class SOAP_CMAC eml21__AbstractIntegerArray : public eml21__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractIntegerArray, default initialized and not managed by a soap context
        virtual eml21__AbstractIntegerArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractIntegerArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractIntegerArray() { }
        virtual ~eml21__AbstractIntegerArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractIntegerArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractIntegerArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractIntegerArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:291 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray (-31)
/* complex XML schema type 'eml21:BooleanArrayFromIndexArray': */
class SOAP_CMAC eml21__BooleanArrayFromIndexArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:Indices' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *Indices;
        /// Required element 'eml21:IndexIsTrue' of XML schema type 'xsd:boolean'
        bool IndexIsTrue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanArrayFromIndexArray, default initialized and not managed by a soap context
        virtual eml21__BooleanArrayFromIndexArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanArrayFromIndexArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanArrayFromIndexArray() : Count(), Indices(), IndexIsTrue() { }
        virtual ~eml21__BooleanArrayFromIndexArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanArrayFromIndexArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanArrayFromIndexArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanArrayFromIndexArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:293 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray (-32)
/* complex XML schema type 'eml21:BooleanConstantArray': */
class SOAP_CMAC eml21__BooleanConstantArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:boolean'
        bool Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanConstantArray, default initialized and not managed by a soap context
        virtual eml21__BooleanConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanConstantArray() : Value(), Count() { }
        virtual ~eml21__BooleanConstantArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanConstantArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:295 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray (-33)
/* complex XML schema type 'eml21:BooleanExternalArray': */
class SOAP_CMAC eml21__BooleanExternalArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanExternalArray, default initialized and not managed by a soap context
        virtual eml21__BooleanExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanExternalArray() : Values() { }
        virtual ~eml21__BooleanExternalArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanExternalArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:307 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure (-39)
/* simple XML schema type 'eml21:GenericMeasure': */
class SOAP_CMAC eml21__GenericMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GenericMeasure, default initialized and not managed by a soap context
        virtual eml21__GenericMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GenericMeasure); }
      public:
        /// Constructor with default initializations
        eml21__GenericMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__GenericMeasure() { }
        /// Friend allocator used by soap_new_eml21__GenericMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__GenericMeasure * SOAP_FMAC2 soap_instantiate_eml21__GenericMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:323 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray (-47)
/* complex XML schema type 'eml21:StringConstantArray': */
class SOAP_CMAC eml21__StringConstantArray : public eml21__AbstractStringArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'eml21:String2000'
        std::string Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringConstantArray, default initialized and not managed by a soap context
        virtual eml21__StringConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__StringConstantArray() : Value(), Count() { }
        virtual ~eml21__StringConstantArray() { }
        /// Friend allocator used by soap_new_eml21__StringConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringConstantArray * SOAP_FMAC2 soap_instantiate_eml21__StringConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:325 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray (-48)
/* complex XML schema type 'eml21:StringExternalArray': */
class SOAP_CMAC eml21__StringExternalArray : public eml21__AbstractStringArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringExternalArray, default initialized and not managed by a soap context
        virtual eml21__StringExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__StringExternalArray() : Values() { }
        virtual ~eml21__StringExternalArray() { }
        /// Friend allocator used by soap_new_eml21__StringExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringExternalArray * SOAP_FMAC2 soap_instantiate_eml21__StringExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:331 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure (-51)
/* simple XML schema type 'eml21:AbsorbedDoseMeasure': */
class SOAP_CMAC eml21__AbsorbedDoseMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AbsorbedDoseUom'
        enum eml21__AbsorbedDoseUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsorbedDoseMeasure, default initialized and not managed by a soap context
        virtual eml21__AbsorbedDoseMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsorbedDoseMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AbsorbedDoseMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AbsorbedDoseMeasure() { }
        /// Friend allocator used by soap_new_eml21__AbsorbedDoseMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsorbedDoseMeasure * SOAP_FMAC2 soap_instantiate_eml21__AbsorbedDoseMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:333 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt (-52)
/* simple XML schema type 'eml21:AbsorbedDoseMeasureExt': */
class SOAP_CMAC eml21__AbsorbedDoseMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AbsorbedDoseUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsorbedDoseMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AbsorbedDoseMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsorbedDoseMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AbsorbedDoseMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AbsorbedDoseMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AbsorbedDoseMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsorbedDoseMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AbsorbedDoseMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:335 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure (-53)
/* simple XML schema type 'eml21:ActivityOfRadioactivityMeasure': */
class SOAP_CMAC eml21__ActivityOfRadioactivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ActivityOfRadioactivityUom'
        enum eml21__ActivityOfRadioactivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityOfRadioactivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ActivityOfRadioactivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityOfRadioactivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ActivityOfRadioactivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ActivityOfRadioactivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ActivityOfRadioactivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityOfRadioactivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ActivityOfRadioactivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:337 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt (-54)
/* simple XML schema type 'eml21:ActivityOfRadioactivityMeasureExt': */
class SOAP_CMAC eml21__ActivityOfRadioactivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ActivityOfRadioactivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityOfRadioactivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ActivityOfRadioactivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityOfRadioactivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ActivityOfRadioactivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ActivityOfRadioactivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ActivityOfRadioactivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityOfRadioactivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ActivityOfRadioactivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure (-55)
/* simple XML schema type 'eml21:AmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstanceUom'
        enum eml21__AmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:341 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt (-56)
/* simple XML schema type 'eml21:AmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:343 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure (-57)
/* simple XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceUom'
        enum eml21__AmountOfSubstancePerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-58)
/* simple XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:347 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure (-59)
/* simple XML schema type 'eml21:AmountOfSubstancePerAreaMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAreaUom'
        enum eml21__AmountOfSubstancePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:349 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt (-60)
/* simple XML schema type 'eml21:AmountOfSubstancePerAreaMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:351 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure (-61)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimeMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimeUom'
        enum eml21__AmountOfSubstancePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:353 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt (-62)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimeMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:355 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure (-63)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimePerAreaMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimePerAreaUom'
        enum eml21__AmountOfSubstancePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:357 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt (-64)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:359 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure (-65)
/* simple XML schema type 'eml21:AmountOfSubstancePerVolumeMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerVolumeUom'
        enum eml21__AmountOfSubstancePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:361 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt (-66)
/* simple XML schema type 'eml21:AmountOfSubstancePerVolumeMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:363 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure (-67)
/* simple XML schema type 'eml21:AnglePerLengthMeasure': */
class SOAP_CMAC eml21__AnglePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerLengthUom'
        enum eml21__AnglePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__AnglePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__AnglePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__AnglePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:365 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt (-68)
/* simple XML schema type 'eml21:AnglePerLengthMeasureExt': */
class SOAP_CMAC eml21__AnglePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AnglePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AnglePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AnglePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:367 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure (-69)
/* simple XML schema type 'eml21:AnglePerVolumeMeasure': */
class SOAP_CMAC eml21__AnglePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerVolumeUom'
        enum eml21__AnglePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AnglePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AnglePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AnglePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:369 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt (-70)
/* simple XML schema type 'eml21:AnglePerVolumeMeasureExt': */
class SOAP_CMAC eml21__AnglePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AnglePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AnglePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AnglePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:371 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure (-71)
/* simple XML schema type 'eml21:AngularAccelerationMeasure': */
class SOAP_CMAC eml21__AngularAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularAccelerationUom'
        enum eml21__AngularAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml21__AngularAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AngularAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AngularAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml21__AngularAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml21__AngularAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:373 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt (-72)
/* simple XML schema type 'eml21:AngularAccelerationMeasureExt': */
class SOAP_CMAC eml21__AngularAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AngularAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AngularAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AngularAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AngularAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AngularAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:375 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure (-73)
/* simple XML schema type 'eml21:AngularVelocityMeasure': */
class SOAP_CMAC eml21__AngularVelocityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularVelocityUom'
        enum eml21__AngularVelocityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularVelocityMeasure, default initialized and not managed by a soap context
        virtual eml21__AngularVelocityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularVelocityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AngularVelocityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AngularVelocityMeasure() { }
        /// Friend allocator used by soap_new_eml21__AngularVelocityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularVelocityMeasure * SOAP_FMAC2 soap_instantiate_eml21__AngularVelocityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:377 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt (-74)
/* simple XML schema type 'eml21:AngularVelocityMeasureExt': */
class SOAP_CMAC eml21__AngularVelocityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularVelocityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularVelocityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AngularVelocityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularVelocityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AngularVelocityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AngularVelocityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AngularVelocityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularVelocityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AngularVelocityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:379 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure (-75)
/* simple XML schema type 'eml21:APIGammaRayMeasure': */
class SOAP_CMAC eml21__APIGammaRayMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGammaRayUom'
        enum eml21__APIGammaRayUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGammaRayMeasure, default initialized and not managed by a soap context
        virtual eml21__APIGammaRayMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGammaRayMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APIGammaRayMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APIGammaRayMeasure() { }
        /// Friend allocator used by soap_new_eml21__APIGammaRayMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGammaRayMeasure * SOAP_FMAC2 soap_instantiate_eml21__APIGammaRayMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:381 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt (-76)
/* simple XML schema type 'eml21:APIGammaRayMeasureExt': */
class SOAP_CMAC eml21__APIGammaRayMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGammaRayUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGammaRayMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APIGammaRayMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGammaRayMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APIGammaRayMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APIGammaRayMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APIGammaRayMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGammaRayMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APIGammaRayMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:383 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure (-77)
/* simple XML schema type 'eml21:APIGravityMeasure': */
class SOAP_CMAC eml21__APIGravityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGravityUom'
        enum eml21__APIGravityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGravityMeasure, default initialized and not managed by a soap context
        virtual eml21__APIGravityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGravityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APIGravityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APIGravityMeasure() { }
        /// Friend allocator used by soap_new_eml21__APIGravityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGravityMeasure * SOAP_FMAC2 soap_instantiate_eml21__APIGravityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:385 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt (-78)
/* simple XML schema type 'eml21:APIGravityMeasureExt': */
class SOAP_CMAC eml21__APIGravityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGravityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGravityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APIGravityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGravityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APIGravityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APIGravityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APIGravityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGravityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APIGravityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:387 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure (-79)
/* simple XML schema type 'eml21:APINeutronMeasure': */
class SOAP_CMAC eml21__APINeutronMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APINeutronUom'
        enum eml21__APINeutronUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APINeutronMeasure, default initialized and not managed by a soap context
        virtual eml21__APINeutronMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APINeutronMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APINeutronMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APINeutronMeasure() { }
        /// Friend allocator used by soap_new_eml21__APINeutronMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APINeutronMeasure * SOAP_FMAC2 soap_instantiate_eml21__APINeutronMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:389 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt (-80)
/* simple XML schema type 'eml21:APINeutronMeasureExt': */
class SOAP_CMAC eml21__APINeutronMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APINeutronUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APINeutronMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APINeutronMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APINeutronMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APINeutronMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APINeutronMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APINeutronMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APINeutronMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APINeutronMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:391 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure (-81)
/* simple XML schema type 'eml21:AreaMeasure': */
class SOAP_CMAC eml21__AreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaUom'
        enum eml21__AreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:393 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt (-82)
/* simple XML schema type 'eml21:AreaMeasureExt': */
class SOAP_CMAC eml21__AreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:395 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure (-83)
/* simple XML schema type 'eml21:AreaPerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AreaPerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAmountOfSubstanceUom'
        enum eml21__AreaPerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:397 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt (-84)
/* simple XML schema type 'eml21:AreaPerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AreaPerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure (-85)
/* simple XML schema type 'eml21:AreaPerAreaMeasure': */
class SOAP_CMAC eml21__AreaPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAreaUom'
        enum eml21__AreaPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:401 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt (-86)
/* simple XML schema type 'eml21:AreaPerAreaMeasureExt': */
class SOAP_CMAC eml21__AreaPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:403 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure (-87)
/* simple XML schema type 'eml21:AreaPerCountMeasure': */
class SOAP_CMAC eml21__AreaPerCountMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerCountUom'
        enum eml21__AreaPerCountUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerCountMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerCountMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerCountMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerCountMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerCountMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerCountMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerCountMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerCountMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:405 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt (-88)
/* simple XML schema type 'eml21:AreaPerCountMeasureExt': */
class SOAP_CMAC eml21__AreaPerCountMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerCountUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerCountMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerCountMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerCountMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerCountMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerCountMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerCountMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerCountMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerCountMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:407 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure (-89)
/* simple XML schema type 'eml21:AreaPerMassMeasure': */
class SOAP_CMAC eml21__AreaPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerMassUom'
        enum eml21__AreaPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:409 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt (-90)
/* simple XML schema type 'eml21:AreaPerMassMeasureExt': */
class SOAP_CMAC eml21__AreaPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:411 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure (-91)
/* simple XML schema type 'eml21:AreaPerTimeMeasure': */
class SOAP_CMAC eml21__AreaPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerTimeUom'
        enum eml21__AreaPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:413 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt (-92)
/* simple XML schema type 'eml21:AreaPerTimeMeasureExt': */
class SOAP_CMAC eml21__AreaPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:415 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure (-93)
/* simple XML schema type 'eml21:AreaPerVolumeMeasure': */
class SOAP_CMAC eml21__AreaPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerVolumeUom'
        enum eml21__AreaPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:417 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt (-94)
/* simple XML schema type 'eml21:AreaPerVolumeMeasureExt': */
class SOAP_CMAC eml21__AreaPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:419 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure (-95)
/* simple XML schema type 'eml21:AttenuationPerFrequencyIntervalMeasure': */
class SOAP_CMAC eml21__AttenuationPerFrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AttenuationPerFrequencyIntervalUom'
        enum eml21__AttenuationPerFrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AttenuationPerFrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__AttenuationPerFrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AttenuationPerFrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AttenuationPerFrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AttenuationPerFrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__AttenuationPerFrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AttenuationPerFrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__AttenuationPerFrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:421 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt (-96)
/* simple XML schema type 'eml21:AttenuationPerFrequencyIntervalMeasureExt': */
class SOAP_CMAC eml21__AttenuationPerFrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AttenuationPerFrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AttenuationPerFrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AttenuationPerFrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AttenuationPerFrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AttenuationPerFrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AttenuationPerFrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AttenuationPerFrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure (-97)
/* simple XML schema type 'eml21:CapacitanceMeasure': */
class SOAP_CMAC eml21__CapacitanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CapacitanceUom'
        enum eml21__CapacitanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CapacitanceMeasure, default initialized and not managed by a soap context
        virtual eml21__CapacitanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CapacitanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__CapacitanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__CapacitanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__CapacitanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__CapacitanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__CapacitanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:425 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt (-98)
/* simple XML schema type 'eml21:CapacitanceMeasureExt': */
class SOAP_CMAC eml21__CapacitanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CapacitanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CapacitanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__CapacitanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CapacitanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__CapacitanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__CapacitanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__CapacitanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__CapacitanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__CapacitanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:427 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure (-99)
/* simple XML schema type 'eml21:CationExchangeCapacityMeasure': */
class SOAP_CMAC eml21__CationExchangeCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CationExchangeCapacityUom'
        enum eml21__CationExchangeCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CationExchangeCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__CationExchangeCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CationExchangeCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__CationExchangeCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__CationExchangeCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__CationExchangeCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__CationExchangeCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__CationExchangeCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:429 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt (-100)
/* simple XML schema type 'eml21:CationExchangeCapacityMeasureExt': */
class SOAP_CMAC eml21__CationExchangeCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CationExchangeCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CationExchangeCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__CationExchangeCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CationExchangeCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__CationExchangeCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__CationExchangeCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__CationExchangeCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__CationExchangeCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__CationExchangeCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:431 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure (-101)
/* simple XML schema type 'eml21:DataTransferSpeedMeasure': */
class SOAP_CMAC eml21__DataTransferSpeedMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DataTransferSpeedUom'
        enum eml21__DataTransferSpeedUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataTransferSpeedMeasure, default initialized and not managed by a soap context
        virtual eml21__DataTransferSpeedMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataTransferSpeedMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DataTransferSpeedMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DataTransferSpeedMeasure() { }
        /// Friend allocator used by soap_new_eml21__DataTransferSpeedMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataTransferSpeedMeasure * SOAP_FMAC2 soap_instantiate_eml21__DataTransferSpeedMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:433 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt (-102)
/* simple XML schema type 'eml21:DataTransferSpeedMeasureExt': */
class SOAP_CMAC eml21__DataTransferSpeedMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DataTransferSpeedUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataTransferSpeedMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DataTransferSpeedMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataTransferSpeedMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DataTransferSpeedMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DataTransferSpeedMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DataTransferSpeedMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataTransferSpeedMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DataTransferSpeedMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:435 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure (-103)
/* simple XML schema type 'eml21:DiffusionCoefficientMeasure': */
class SOAP_CMAC eml21__DiffusionCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusionCoefficientUom'
        enum eml21__DiffusionCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusionCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__DiffusionCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusionCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DiffusionCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusionCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__DiffusionCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusionCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__DiffusionCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:437 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt (-104)
/* simple XML schema type 'eml21:DiffusionCoefficientMeasureExt': */
class SOAP_CMAC eml21__DiffusionCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusionCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusionCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DiffusionCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusionCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DiffusionCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusionCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DiffusionCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusionCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DiffusionCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:439 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure (-105)
/* simple XML schema type 'eml21:DiffusiveTimeOfFlightMeasure': */
class SOAP_CMAC eml21__DiffusiveTimeOfFlightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusiveTimeOfFlightUom'
        enum eml21__DiffusiveTimeOfFlightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusiveTimeOfFlightMeasure, default initialized and not managed by a soap context
        virtual eml21__DiffusiveTimeOfFlightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusiveTimeOfFlightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DiffusiveTimeOfFlightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusiveTimeOfFlightMeasure() { }
        /// Friend allocator used by soap_new_eml21__DiffusiveTimeOfFlightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusiveTimeOfFlightMeasure * SOAP_FMAC2 soap_instantiate_eml21__DiffusiveTimeOfFlightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:441 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt (-106)
/* simple XML schema type 'eml21:DiffusiveTimeOfFlightMeasureExt': */
class SOAP_CMAC eml21__DiffusiveTimeOfFlightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusiveTimeOfFlightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusiveTimeOfFlightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DiffusiveTimeOfFlightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusiveTimeOfFlightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DiffusiveTimeOfFlightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusiveTimeOfFlightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DiffusiveTimeOfFlightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusiveTimeOfFlightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DiffusiveTimeOfFlightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:443 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure (-107)
/* simple XML schema type 'eml21:DigitalStorageMeasure': */
class SOAP_CMAC eml21__DigitalStorageMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DigitalStorageUom'
        enum eml21__DigitalStorageUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DigitalStorageMeasure, default initialized and not managed by a soap context
        virtual eml21__DigitalStorageMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DigitalStorageMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DigitalStorageMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DigitalStorageMeasure() { }
        /// Friend allocator used by soap_new_eml21__DigitalStorageMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DigitalStorageMeasure * SOAP_FMAC2 soap_instantiate_eml21__DigitalStorageMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:445 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt (-108)
/* simple XML schema type 'eml21:DigitalStorageMeasureExt': */
class SOAP_CMAC eml21__DigitalStorageMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DigitalStorageUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DigitalStorageMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DigitalStorageMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DigitalStorageMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DigitalStorageMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DigitalStorageMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DigitalStorageMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DigitalStorageMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DigitalStorageMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:447 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure (-109)
/* simple XML schema type 'eml21:DimensionlessMeasure': */
class SOAP_CMAC eml21__DimensionlessMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DimensionlessUom'
        enum eml21__DimensionlessUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DimensionlessMeasure, default initialized and not managed by a soap context
        virtual eml21__DimensionlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DimensionlessMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DimensionlessMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DimensionlessMeasure() { }
        /// Friend allocator used by soap_new_eml21__DimensionlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DimensionlessMeasure * SOAP_FMAC2 soap_instantiate_eml21__DimensionlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:449 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt (-110)
/* simple XML schema type 'eml21:DimensionlessMeasureExt': */
class SOAP_CMAC eml21__DimensionlessMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DimensionlessUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DimensionlessMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DimensionlessMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DimensionlessMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DimensionlessMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DimensionlessMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DimensionlessMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DimensionlessMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DimensionlessMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:451 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure (-111)
/* simple XML schema type 'eml21:DipoleMomentMeasure': */
class SOAP_CMAC eml21__DipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DipoleMomentUom'
        enum eml21__DipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__DipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__DipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__DipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:453 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt (-112)
/* simple XML schema type 'eml21:DipoleMomentMeasureExt': */
class SOAP_CMAC eml21__DipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:455 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure (-113)
/* simple XML schema type 'eml21:DoseEquivalentMeasure': */
class SOAP_CMAC eml21__DoseEquivalentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DoseEquivalentUom'
        enum eml21__DoseEquivalentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoseEquivalentMeasure, default initialized and not managed by a soap context
        virtual eml21__DoseEquivalentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoseEquivalentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DoseEquivalentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DoseEquivalentMeasure() { }
        /// Friend allocator used by soap_new_eml21__DoseEquivalentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoseEquivalentMeasure * SOAP_FMAC2 soap_instantiate_eml21__DoseEquivalentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:457 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt (-114)
/* simple XML schema type 'eml21:DoseEquivalentMeasureExt': */
class SOAP_CMAC eml21__DoseEquivalentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DoseEquivalentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoseEquivalentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DoseEquivalentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoseEquivalentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DoseEquivalentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DoseEquivalentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DoseEquivalentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoseEquivalentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DoseEquivalentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:459 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure (-115)
/* simple XML schema type 'eml21:DynamicViscosityMeasure': */
class SOAP_CMAC eml21__DynamicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DynamicViscosityUom'
        enum eml21__DynamicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DynamicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml21__DynamicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DynamicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DynamicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DynamicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml21__DynamicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml21__DynamicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:461 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt (-116)
/* simple XML schema type 'eml21:DynamicViscosityMeasureExt': */
class SOAP_CMAC eml21__DynamicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DynamicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DynamicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DynamicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DynamicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DynamicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DynamicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DynamicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DynamicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DynamicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:463 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure (-117)
/* simple XML schema type 'eml21:ElectricalResistivityMeasure': */
class SOAP_CMAC eml21__ElectricalResistivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricalResistivityUom'
        enum eml21__ElectricalResistivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricalResistivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricalResistivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricalResistivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricalResistivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricalResistivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricalResistivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricalResistivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricalResistivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:465 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt (-118)
/* simple XML schema type 'eml21:ElectricalResistivityMeasureExt': */
class SOAP_CMAC eml21__ElectricalResistivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricalResistivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricalResistivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricalResistivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricalResistivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricalResistivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricalResistivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricalResistivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricalResistivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricalResistivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:467 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure (-119)
/* simple XML schema type 'eml21:ElectricChargeMeasure': */
class SOAP_CMAC eml21__ElectricChargeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargeUom'
        enum eml21__ElectricChargeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargeMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:469 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt (-120)
/* simple XML schema type 'eml21:ElectricChargeMeasureExt': */
class SOAP_CMAC eml21__ElectricChargeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:471 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure (-121)
/* simple XML schema type 'eml21:ElectricChargePerAreaMeasure': */
class SOAP_CMAC eml21__ElectricChargePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerAreaUom'
        enum eml21__ElectricChargePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:473 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt (-122)
/* simple XML schema type 'eml21:ElectricChargePerAreaMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:475 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure (-123)
/* simple XML schema type 'eml21:ElectricChargePerMassMeasure': */
class SOAP_CMAC eml21__ElectricChargePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerMassUom'
        enum eml21__ElectricChargePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:477 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt (-124)
/* simple XML schema type 'eml21:ElectricChargePerMassMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:479 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure (-125)
/* simple XML schema type 'eml21:ElectricChargePerVolumeMeasure': */
class SOAP_CMAC eml21__ElectricChargePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerVolumeUom'
        enum eml21__ElectricChargePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:481 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt (-126)
/* simple XML schema type 'eml21:ElectricChargePerVolumeMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:483 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure (-127)
/* simple XML schema type 'eml21:ElectricConductanceMeasure': */
class SOAP_CMAC eml21__ElectricConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductanceUom'
        enum eml21__ElectricConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:485 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt (-128)
/* simple XML schema type 'eml21:ElectricConductanceMeasureExt': */
class SOAP_CMAC eml21__ElectricConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:487 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure (-129)
/* simple XML schema type 'eml21:ElectricConductivityMeasure': */
class SOAP_CMAC eml21__ElectricConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductivityUom'
        enum eml21__ElectricConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:489 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt (-130)
/* simple XML schema type 'eml21:ElectricConductivityMeasureExt': */
class SOAP_CMAC eml21__ElectricConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:491 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure (-131)
/* simple XML schema type 'eml21:ElectricCurrentDensityMeasure': */
class SOAP_CMAC eml21__ElectricCurrentDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentDensityUom'
        enum eml21__ElectricCurrentDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentDensityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentDensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentDensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:493 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt (-132)
/* simple XML schema type 'eml21:ElectricCurrentDensityMeasureExt': */
class SOAP_CMAC eml21__ElectricCurrentDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:495 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure (-133)
/* simple XML schema type 'eml21:ElectricCurrentMeasure': */
class SOAP_CMAC eml21__ElectricCurrentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentUom'
        enum eml21__ElectricCurrentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:497 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt (-134)
/* simple XML schema type 'eml21:ElectricCurrentMeasureExt': */
class SOAP_CMAC eml21__ElectricCurrentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:499 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure (-135)
/* simple XML schema type 'eml21:ElectricFieldStrengthMeasure': */
class SOAP_CMAC eml21__ElectricFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricFieldStrengthUom'
        enum eml21__ElectricFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:501 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt (-136)
/* simple XML schema type 'eml21:ElectricFieldStrengthMeasureExt': */
class SOAP_CMAC eml21__ElectricFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:503 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure (-137)
/* simple XML schema type 'eml21:ElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml21__ElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricPotentialDifferenceUom'
        enum eml21__ElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:505 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt (-138)
/* simple XML schema type 'eml21:ElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml21__ElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:507 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure (-139)
/* simple XML schema type 'eml21:ElectricResistanceMeasure': */
class SOAP_CMAC eml21__ElectricResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistanceUom'
        enum eml21__ElectricResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:509 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt (-140)
/* simple XML schema type 'eml21:ElectricResistanceMeasureExt': */
class SOAP_CMAC eml21__ElectricResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:511 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure (-141)
/* simple XML schema type 'eml21:ElectricResistancePerLengthMeasure': */
class SOAP_CMAC eml21__ElectricResistancePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistancePerLengthUom'
        enum eml21__ElectricResistancePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistancePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricResistancePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistancePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistancePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistancePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistancePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistancePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistancePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:513 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt (-142)
/* simple XML schema type 'eml21:ElectricResistancePerLengthMeasureExt': */
class SOAP_CMAC eml21__ElectricResistancePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistancePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistancePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricResistancePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistancePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistancePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistancePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistancePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistancePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistancePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:515 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure (-143)
/* simple XML schema type 'eml21:ElectromagneticMomentMeasure': */
class SOAP_CMAC eml21__ElectromagneticMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectromagneticMomentUom'
        enum eml21__ElectromagneticMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectromagneticMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectromagneticMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectromagneticMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectromagneticMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectromagneticMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectromagneticMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectromagneticMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectromagneticMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:517 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt (-144)
/* simple XML schema type 'eml21:ElectromagneticMomentMeasureExt': */
class SOAP_CMAC eml21__ElectromagneticMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectromagneticMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectromagneticMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectromagneticMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectromagneticMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectromagneticMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectromagneticMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectromagneticMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectromagneticMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectromagneticMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:519 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure (-145)
/* simple XML schema type 'eml21:EnergyLengthPerAreaMeasure': */
class SOAP_CMAC eml21__EnergyLengthPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerAreaUom'
        enum eml21__EnergyLengthPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:521 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt (-146)
/* simple XML schema type 'eml21:EnergyLengthPerAreaMeasureExt': */
class SOAP_CMAC eml21__EnergyLengthPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:523 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure (-147)
/* simple XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasure': */
class SOAP_CMAC eml21__EnergyLengthPerTimeAreaTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureUom'
        enum eml21__EnergyLengthPerTimeAreaTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerTimeAreaTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerTimeAreaTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerTimeAreaTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerTimeAreaTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerTimeAreaTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerTimeAreaTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:525 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt (-148)
/* simple XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasureExt': */
class SOAP_CMAC eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:527 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure (-149)
/* simple XML schema type 'eml21:EnergyMeasure': */
class SOAP_CMAC eml21__EnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyUom'
        enum eml21__EnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:529 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt (-150)
/* simple XML schema type 'eml21:EnergyMeasureExt': */
class SOAP_CMAC eml21__EnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure (-151)
/* simple XML schema type 'eml21:EnergyPerAreaMeasure': */
class SOAP_CMAC eml21__EnergyPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerAreaUom'
        enum eml21__EnergyPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:533 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt (-152)
/* simple XML schema type 'eml21:EnergyPerAreaMeasureExt': */
class SOAP_CMAC eml21__EnergyPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:535 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure (-153)
/* simple XML schema type 'eml21:EnergyPerLengthMeasure': */
class SOAP_CMAC eml21__EnergyPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerLengthUom'
        enum eml21__EnergyPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:537 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt (-154)
/* simple XML schema type 'eml21:EnergyPerLengthMeasureExt': */
class SOAP_CMAC eml21__EnergyPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:539 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure (-155)
/* simple XML schema type 'eml21:EnergyPerMassMeasure': */
class SOAP_CMAC eml21__EnergyPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassUom'
        enum eml21__EnergyPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:541 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt (-156)
/* simple XML schema type 'eml21:EnergyPerMassMeasureExt': */
class SOAP_CMAC eml21__EnergyPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:543 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure (-157)
/* simple XML schema type 'eml21:EnergyPerMassPerTimeMeasure': */
class SOAP_CMAC eml21__EnergyPerMassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassPerTimeUom'
        enum eml21__EnergyPerMassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:545 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt (-158)
/* simple XML schema type 'eml21:EnergyPerMassPerTimeMeasureExt': */
class SOAP_CMAC eml21__EnergyPerMassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:547 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure (-159)
/* simple XML schema type 'eml21:EnergyPerVolumeMeasure': */
class SOAP_CMAC eml21__EnergyPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerVolumeUom'
        enum eml21__EnergyPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:549 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt (-160)
/* simple XML schema type 'eml21:EnergyPerVolumeMeasureExt': */
class SOAP_CMAC eml21__EnergyPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:551 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure (-161)
/* simple XML schema type 'eml21:ForceAreaMeasure': */
class SOAP_CMAC eml21__ForceAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceAreaUom'
        enum eml21__ForceAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:553 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt (-162)
/* simple XML schema type 'eml21:ForceAreaMeasureExt': */
class SOAP_CMAC eml21__ForceAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:555 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure (-163)
/* simple XML schema type 'eml21:ForceLengthPerLengthMeasure': */
class SOAP_CMAC eml21__ForceLengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceLengthPerLengthUom'
        enum eml21__ForceLengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceLengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceLengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceLengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceLengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceLengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceLengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceLengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceLengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:557 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt (-164)
/* simple XML schema type 'eml21:ForceLengthPerLengthMeasureExt': */
class SOAP_CMAC eml21__ForceLengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceLengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceLengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceLengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceLengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceLengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceLengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceLengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceLengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceLengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:559 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure (-165)
/* simple XML schema type 'eml21:ForceMeasure': */
class SOAP_CMAC eml21__ForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceUom'
        enum eml21__ForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:561 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt (-166)
/* simple XML schema type 'eml21:ForceMeasureExt': */
class SOAP_CMAC eml21__ForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure (-167)
/* simple XML schema type 'eml21:ForcePerForceMeasure': */
class SOAP_CMAC eml21__ForcePerForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerForceUom'
        enum eml21__ForcePerForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:565 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt (-168)
/* simple XML schema type 'eml21:ForcePerForceMeasureExt': */
class SOAP_CMAC eml21__ForcePerForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:567 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure (-169)
/* simple XML schema type 'eml21:ForcePerLengthMeasure': */
class SOAP_CMAC eml21__ForcePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerLengthUom'
        enum eml21__ForcePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:569 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt (-170)
/* simple XML schema type 'eml21:ForcePerLengthMeasureExt': */
class SOAP_CMAC eml21__ForcePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:571 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure (-171)
/* simple XML schema type 'eml21:ForcePerVolumeMeasure': */
class SOAP_CMAC eml21__ForcePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerVolumeUom'
        enum eml21__ForcePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:573 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt (-172)
/* simple XML schema type 'eml21:ForcePerVolumeMeasureExt': */
class SOAP_CMAC eml21__ForcePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:575 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure (-173)
/* simple XML schema type 'eml21:FrequencyIntervalMeasure': */
class SOAP_CMAC eml21__FrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyIntervalUom'
        enum eml21__FrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__FrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__FrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__FrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:577 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt (-174)
/* simple XML schema type 'eml21:FrequencyIntervalMeasureExt': */
class SOAP_CMAC eml21__FrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__FrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__FrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__FrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:579 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure (-175)
/* simple XML schema type 'eml21:FrequencyMeasure': */
class SOAP_CMAC eml21__FrequencyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyUom'
        enum eml21__FrequencyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyMeasure, default initialized and not managed by a soap context
        virtual eml21__FrequencyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyMeasure() { }
        /// Friend allocator used by soap_new_eml21__FrequencyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyMeasure * SOAP_FMAC2 soap_instantiate_eml21__FrequencyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:581 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt (-176)
/* simple XML schema type 'eml21:FrequencyMeasureExt': */
class SOAP_CMAC eml21__FrequencyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__FrequencyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__FrequencyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__FrequencyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:583 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure (-177)
/* simple XML schema type 'eml21:HeatCapacityMeasure': */
class SOAP_CMAC eml21__HeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatCapacityUom'
        enum eml21__HeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:585 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt (-178)
/* simple XML schema type 'eml21:HeatCapacityMeasureExt': */
class SOAP_CMAC eml21__HeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure (-179)
/* simple XML schema type 'eml21:HeatFlowRateMeasure': */
class SOAP_CMAC eml21__HeatFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatFlowRateUom'
        enum eml21__HeatFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:589 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt (-180)
/* simple XML schema type 'eml21:HeatFlowRateMeasureExt': */
class SOAP_CMAC eml21__HeatFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:591 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure (-181)
/* simple XML schema type 'eml21:HeatTransferCoefficientMeasure': */
class SOAP_CMAC eml21__HeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatTransferCoefficientUom'
        enum eml21__HeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:593 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt (-182)
/* simple XML schema type 'eml21:HeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml21__HeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:595 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure (-183)
/* simple XML schema type 'eml21:IlluminanceMeasure': */
class SOAP_CMAC eml21__IlluminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IlluminanceUom'
        enum eml21__IlluminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IlluminanceMeasure, default initialized and not managed by a soap context
        virtual eml21__IlluminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IlluminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__IlluminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__IlluminanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__IlluminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__IlluminanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__IlluminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:597 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt (-184)
/* simple XML schema type 'eml21:IlluminanceMeasureExt': */
class SOAP_CMAC eml21__IlluminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IlluminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IlluminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__IlluminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IlluminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__IlluminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__IlluminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__IlluminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__IlluminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__IlluminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:599 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure (-185)
/* simple XML schema type 'eml21:InductanceMeasure': */
class SOAP_CMAC eml21__InductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:InductanceUom'
        enum eml21__InductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__InductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__InductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__InductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__InductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__InductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__InductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__InductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__InductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:601 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt (-186)
/* simple XML schema type 'eml21:InductanceMeasureExt': */
class SOAP_CMAC eml21__InductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:InductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__InductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__InductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__InductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__InductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__InductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__InductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__InductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__InductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:603 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure (-187)
/* simple XML schema type 'eml21:IsothermalCompressibilityMeasure': */
class SOAP_CMAC eml21__IsothermalCompressibilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IsothermalCompressibilityUom'
        enum eml21__IsothermalCompressibilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IsothermalCompressibilityMeasure, default initialized and not managed by a soap context
        virtual eml21__IsothermalCompressibilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IsothermalCompressibilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__IsothermalCompressibilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__IsothermalCompressibilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__IsothermalCompressibilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__IsothermalCompressibilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__IsothermalCompressibilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:605 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt (-188)
/* simple XML schema type 'eml21:IsothermalCompressibilityMeasureExt': */
class SOAP_CMAC eml21__IsothermalCompressibilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IsothermalCompressibilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IsothermalCompressibilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__IsothermalCompressibilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IsothermalCompressibilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__IsothermalCompressibilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__IsothermalCompressibilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__IsothermalCompressibilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__IsothermalCompressibilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__IsothermalCompressibilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:607 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure (-189)
/* simple XML schema type 'eml21:KinematicViscosityMeasure': */
class SOAP_CMAC eml21__KinematicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:KinematicViscosityUom'
        enum eml21__KinematicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__KinematicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml21__KinematicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__KinematicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__KinematicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__KinematicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml21__KinematicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__KinematicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml21__KinematicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:609 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt (-190)
/* simple XML schema type 'eml21:KinematicViscosityMeasureExt': */
class SOAP_CMAC eml21__KinematicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:KinematicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__KinematicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__KinematicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__KinematicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__KinematicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__KinematicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__KinematicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__KinematicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__KinematicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:611 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure (-191)
/* simple XML schema type 'eml21:LengthMeasure': */
class SOAP_CMAC eml21__LengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:613 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt (-192)
/* simple XML schema type 'eml21:LengthMeasureExt': */
class SOAP_CMAC eml21__LengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:615 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure (-193)
/* simple XML schema type 'eml21:LengthPerLengthMeasure': */
class SOAP_CMAC eml21__LengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerLengthUom'
        enum eml21__LengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:617 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt (-194)
/* simple XML schema type 'eml21:LengthPerLengthMeasureExt': */
class SOAP_CMAC eml21__LengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:619 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure (-195)
/* simple XML schema type 'eml21:LengthPerMassMeasure': */
class SOAP_CMAC eml21__LengthPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerMassUom'
        enum eml21__LengthPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:621 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt (-196)
/* simple XML schema type 'eml21:LengthPerMassMeasureExt': */
class SOAP_CMAC eml21__LengthPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:623 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure (-197)
/* simple XML schema type 'eml21:LengthPerPressureMeasure': */
class SOAP_CMAC eml21__LengthPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerPressureUom'
        enum eml21__LengthPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt (-198)
/* simple XML schema type 'eml21:LengthPerPressureMeasureExt': */
class SOAP_CMAC eml21__LengthPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:627 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure (-199)
/* simple XML schema type 'eml21:LengthPerTemperatureMeasure': */
class SOAP_CMAC eml21__LengthPerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTemperatureUom'
        enum eml21__LengthPerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt (-200)
/* simple XML schema type 'eml21:LengthPerTemperatureMeasureExt': */
class SOAP_CMAC eml21__LengthPerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:631 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure (-201)
/* simple XML schema type 'eml21:LengthPerTimeMeasure': */
class SOAP_CMAC eml21__LengthPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTimeUom'
        enum eml21__LengthPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt (-202)
/* simple XML schema type 'eml21:LengthPerTimeMeasureExt': */
class SOAP_CMAC eml21__LengthPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:635 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure (-203)
/* simple XML schema type 'eml21:LengthPerVolumeMeasure': */
class SOAP_CMAC eml21__LengthPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerVolumeUom'
        enum eml21__LengthPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:637 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt (-204)
/* simple XML schema type 'eml21:LengthPerVolumeMeasureExt': */
class SOAP_CMAC eml21__LengthPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:639 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure (-205)
/* simple XML schema type 'eml21:LightExposureMeasure': */
class SOAP_CMAC eml21__LightExposureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LightExposureUom'
        enum eml21__LightExposureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LightExposureMeasure, default initialized and not managed by a soap context
        virtual eml21__LightExposureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LightExposureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LightExposureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LightExposureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LightExposureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LightExposureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LightExposureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:641 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt (-206)
/* simple XML schema type 'eml21:LightExposureMeasureExt': */
class SOAP_CMAC eml21__LightExposureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LightExposureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LightExposureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LightExposureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LightExposureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LightExposureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LightExposureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LightExposureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LightExposureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LightExposureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:643 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure (-207)
/* simple XML schema type 'eml21:LinearAccelerationMeasure': */
class SOAP_CMAC eml21__LinearAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearAccelerationUom'
        enum eml21__LinearAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml21__LinearAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LinearAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LinearAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml21__LinearAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml21__LinearAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:645 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt (-208)
/* simple XML schema type 'eml21:LinearAccelerationMeasureExt': */
class SOAP_CMAC eml21__LinearAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LinearAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LinearAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LinearAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LinearAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LinearAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:647 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure (-209)
/* simple XML schema type 'eml21:LinearThermalExpansionMeasure': */
class SOAP_CMAC eml21__LinearThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearThermalExpansionUom'
        enum eml21__LinearThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml21__LinearThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LinearThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LinearThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml21__LinearThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml21__LinearThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:649 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt (-210)
/* simple XML schema type 'eml21:LinearThermalExpansionMeasureExt': */
class SOAP_CMAC eml21__LinearThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LinearThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LinearThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LinearThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LinearThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LinearThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:651 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure (-211)
/* simple XML schema type 'eml21:LogarithmicPowerRatioMeasure': */
class SOAP_CMAC eml21__LogarithmicPowerRatioMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioUom'
        enum eml21__LogarithmicPowerRatioUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioMeasure, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioMeasure() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioMeasure * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:653 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt (-212)
/* simple XML schema type 'eml21:LogarithmicPowerRatioMeasureExt': */
class SOAP_CMAC eml21__LogarithmicPowerRatioMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:655 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure (-213)
/* simple XML schema type 'eml21:LogarithmicPowerRatioPerLengthMeasure': */
class SOAP_CMAC eml21__LogarithmicPowerRatioPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioPerLengthUom'
        enum eml21__LogarithmicPowerRatioPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:657 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt (-214)
/* simple XML schema type 'eml21:LogarithmicPowerRatioPerLengthMeasureExt': */
class SOAP_CMAC eml21__LogarithmicPowerRatioPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure (-215)
/* simple XML schema type 'eml21:LuminanceMeasure': */
class SOAP_CMAC eml21__LuminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminanceUom'
        enum eml21__LuminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminanceMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:661 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt (-216)
/* simple XML schema type 'eml21:LuminanceMeasureExt': */
class SOAP_CMAC eml21__LuminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:663 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure (-217)
/* simple XML schema type 'eml21:LuminousEfficacyMeasure': */
class SOAP_CMAC eml21__LuminousEfficacyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousEfficacyUom'
        enum eml21__LuminousEfficacyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousEfficacyMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousEfficacyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousEfficacyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousEfficacyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousEfficacyMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousEfficacyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousEfficacyMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousEfficacyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:665 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt (-218)
/* simple XML schema type 'eml21:LuminousEfficacyMeasureExt': */
class SOAP_CMAC eml21__LuminousEfficacyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousEfficacyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousEfficacyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousEfficacyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousEfficacyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousEfficacyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousEfficacyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousEfficacyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousEfficacyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousEfficacyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:667 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure (-219)
/* simple XML schema type 'eml21:LuminousFluxMeasure': */
class SOAP_CMAC eml21__LuminousFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousFluxUom'
        enum eml21__LuminousFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousFluxMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousFluxMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousFluxMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:669 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt (-220)
/* simple XML schema type 'eml21:LuminousFluxMeasureExt': */
class SOAP_CMAC eml21__LuminousFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:671 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure (-221)
/* simple XML schema type 'eml21:LuminousIntensityMeasure': */
class SOAP_CMAC eml21__LuminousIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousIntensityUom'
        enum eml21__LuminousIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousIntensityMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:673 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt (-222)
/* simple XML schema type 'eml21:LuminousIntensityMeasureExt': */
class SOAP_CMAC eml21__LuminousIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:675 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure (-223)
/* simple XML schema type 'eml21:MagneticDipoleMomentMeasure': */
class SOAP_CMAC eml21__MagneticDipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticDipoleMomentUom'
        enum eml21__MagneticDipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticDipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticDipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticDipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticDipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticDipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticDipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticDipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticDipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:677 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt (-224)
/* simple XML schema type 'eml21:MagneticDipoleMomentMeasureExt': */
class SOAP_CMAC eml21__MagneticDipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticDipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticDipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticDipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticDipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticDipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticDipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticDipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticDipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticDipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:679 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure (-225)
/* simple XML schema type 'eml21:MagneticFieldStrengthMeasure': */
class SOAP_CMAC eml21__MagneticFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFieldStrengthUom'
        enum eml21__MagneticFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:681 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt (-226)
/* simple XML schema type 'eml21:MagneticFieldStrengthMeasureExt': */
class SOAP_CMAC eml21__MagneticFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:683 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure (-227)
/* simple XML schema type 'eml21:MagneticFluxDensityMeasure': */
class SOAP_CMAC eml21__MagneticFluxDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityUom'
        enum eml21__MagneticFluxDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:685 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt (-228)
/* simple XML schema type 'eml21:MagneticFluxDensityMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:687 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure (-229)
/* simple XML schema type 'eml21:MagneticFluxDensityPerLengthMeasure': */
class SOAP_CMAC eml21__MagneticFluxDensityPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityPerLengthUom'
        enum eml21__MagneticFluxDensityPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:689 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt (-230)
/* simple XML schema type 'eml21:MagneticFluxDensityPerLengthMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxDensityPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:691 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure (-231)
/* simple XML schema type 'eml21:MagneticFluxMeasure': */
class SOAP_CMAC eml21__MagneticFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxUom'
        enum eml21__MagneticFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:693 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt (-232)
/* simple XML schema type 'eml21:MagneticFluxMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure (-233)
/* simple XML schema type 'eml21:MagneticPermeabilityMeasure': */
class SOAP_CMAC eml21__MagneticPermeabilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticPermeabilityUom'
        enum eml21__MagneticPermeabilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticPermeabilityMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticPermeabilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticPermeabilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticPermeabilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticPermeabilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticPermeabilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticPermeabilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticPermeabilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:697 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt (-234)
/* simple XML schema type 'eml21:MagneticPermeabilityMeasureExt': */
class SOAP_CMAC eml21__MagneticPermeabilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticPermeabilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticPermeabilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticPermeabilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticPermeabilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticPermeabilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticPermeabilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticPermeabilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticPermeabilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticPermeabilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:699 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure (-235)
/* simple XML schema type 'eml21:MagneticVectorPotentialMeasure': */
class SOAP_CMAC eml21__MagneticVectorPotentialMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticVectorPotentialUom'
        enum eml21__MagneticVectorPotentialUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticVectorPotentialMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticVectorPotentialMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticVectorPotentialMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticVectorPotentialMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticVectorPotentialMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticVectorPotentialMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticVectorPotentialMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticVectorPotentialMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:701 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt (-236)
/* simple XML schema type 'eml21:MagneticVectorPotentialMeasureExt': */
class SOAP_CMAC eml21__MagneticVectorPotentialMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticVectorPotentialUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticVectorPotentialMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticVectorPotentialMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticVectorPotentialMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticVectorPotentialMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticVectorPotentialMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticVectorPotentialMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticVectorPotentialMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticVectorPotentialMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:703 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure (-237)
/* simple XML schema type 'eml21:MassLengthMeasure': */
class SOAP_CMAC eml21__MassLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassLengthUom'
        enum eml21__MassLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:705 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt (-238)
/* simple XML schema type 'eml21:MassLengthMeasureExt': */
class SOAP_CMAC eml21__MassLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:707 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure (-239)
/* simple XML schema type 'eml21:MassMeasure': */
class SOAP_CMAC eml21__MassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassUom'
        enum eml21__MassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassMeasure, default initialized and not managed by a soap context
        virtual eml21__MassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:709 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt (-240)
/* simple XML schema type 'eml21:MassMeasureExt': */
class SOAP_CMAC eml21__MassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:711 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure (-241)
/* simple XML schema type 'eml21:MassPerAreaMeasure': */
class SOAP_CMAC eml21__MassPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerAreaUom'
        enum eml21__MassPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:713 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt (-242)
/* simple XML schema type 'eml21:MassPerAreaMeasureExt': */
class SOAP_CMAC eml21__MassPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:715 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure (-243)
/* simple XML schema type 'eml21:MassPerEnergyMeasure': */
class SOAP_CMAC eml21__MassPerEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerEnergyUom'
        enum eml21__MassPerEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerEnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:717 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt (-244)
/* simple XML schema type 'eml21:MassPerEnergyMeasureExt': */
class SOAP_CMAC eml21__MassPerEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:719 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure (-245)
/* simple XML schema type 'eml21:MassPerLengthMeasure': */
class SOAP_CMAC eml21__MassPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerLengthUom'
        enum eml21__MassPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt (-246)
/* simple XML schema type 'eml21:MassPerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:723 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure (-247)
/* simple XML schema type 'eml21:MassPerMassMeasure': */
class SOAP_CMAC eml21__MassPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerMassUom'
        enum eml21__MassPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:725 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt (-248)
/* simple XML schema type 'eml21:MassPerMassMeasureExt': */
class SOAP_CMAC eml21__MassPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:727 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure (-249)
/* simple XML schema type 'eml21:MassPerTimeMeasure': */
class SOAP_CMAC eml21__MassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimeUom'
        enum eml21__MassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:729 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt (-250)
/* simple XML schema type 'eml21:MassPerTimeMeasureExt': */
class SOAP_CMAC eml21__MassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:731 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure (-251)
/* simple XML schema type 'eml21:MassPerTimePerAreaMeasure': */
class SOAP_CMAC eml21__MassPerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerAreaUom'
        enum eml21__MassPerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:733 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt (-252)
/* simple XML schema type 'eml21:MassPerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__MassPerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:735 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure (-253)
/* simple XML schema type 'eml21:MassPerTimePerLengthMeasure': */
class SOAP_CMAC eml21__MassPerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerLengthUom'
        enum eml21__MassPerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:737 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt (-254)
/* simple XML schema type 'eml21:MassPerTimePerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:739 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure (-255)
/* simple XML schema type 'eml21:MassPerVolumeMeasure': */
class SOAP_CMAC eml21__MassPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumeUom'
        enum eml21__MassPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:741 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt (-256)
/* simple XML schema type 'eml21:MassPerVolumeMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:743 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure (-257)
/* simple XML schema type 'eml21:MassPerVolumePerLengthMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerLengthUom'
        enum eml21__MassPerVolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:745 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt (-258)
/* simple XML schema type 'eml21:MassPerVolumePerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:747 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure (-259)
/* simple XML schema type 'eml21:MassPerVolumePerPressureMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerPressureUom'
        enum eml21__MassPerVolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:749 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt (-260)
/* simple XML schema type 'eml21:MassPerVolumePerPressureMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:751 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure (-261)
/* simple XML schema type 'eml21:MassPerVolumePerTemperatureMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerTemperatureUom'
        enum eml21__MassPerVolumePerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:753 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt (-262)
/* simple XML schema type 'eml21:MassPerVolumePerTemperatureMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:755 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure (-263)
/* simple XML schema type 'eml21:MobilityMeasure': */
class SOAP_CMAC eml21__MobilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MobilityUom'
        enum eml21__MobilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MobilityMeasure, default initialized and not managed by a soap context
        virtual eml21__MobilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MobilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MobilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MobilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MobilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MobilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MobilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:757 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt (-264)
/* simple XML schema type 'eml21:MobilityMeasureExt': */
class SOAP_CMAC eml21__MobilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MobilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MobilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MobilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MobilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MobilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MobilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MobilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MobilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MobilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:759 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure (-265)
/* simple XML schema type 'eml21:MolarEnergyMeasure': */
class SOAP_CMAC eml21__MolarEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarEnergyUom'
        enum eml21__MolarEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarEnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:761 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt (-266)
/* simple XML schema type 'eml21:MolarEnergyMeasureExt': */
class SOAP_CMAC eml21__MolarEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:763 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure (-267)
/* simple XML schema type 'eml21:MolarHeatCapacityMeasure': */
class SOAP_CMAC eml21__MolarHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarHeatCapacityUom'
        enum eml21__MolarHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:765 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt (-268)
/* simple XML schema type 'eml21:MolarHeatCapacityMeasureExt': */
class SOAP_CMAC eml21__MolarHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:767 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure (-269)
/* simple XML schema type 'eml21:MolarVolumeMeasure': */
class SOAP_CMAC eml21__MolarVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarVolumeUom'
        enum eml21__MolarVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:769 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt (-270)
/* simple XML schema type 'eml21:MolarVolumeMeasureExt': */
class SOAP_CMAC eml21__MolarVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:771 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure (-271)
/* simple XML schema type 'eml21:MolecularWeightMeasure': */
class SOAP_CMAC eml21__MolecularWeightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolecularWeightUom'
        enum eml21__MolecularWeightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolecularWeightMeasure, default initialized and not managed by a soap context
        virtual eml21__MolecularWeightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolecularWeightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolecularWeightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolecularWeightMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolecularWeightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolecularWeightMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolecularWeightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt (-272)
/* simple XML schema type 'eml21:MolecularWeightMeasureExt': */
class SOAP_CMAC eml21__MolecularWeightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolecularWeightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolecularWeightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolecularWeightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolecularWeightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolecularWeightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolecularWeightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolecularWeightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolecularWeightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolecularWeightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:775 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure (-273)
/* simple XML schema type 'eml21:MomentOfForceMeasure': */
class SOAP_CMAC eml21__MomentOfForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfForceUom'
        enum eml21__MomentOfForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfForceMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentOfForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentOfForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentOfForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:777 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt (-274)
/* simple XML schema type 'eml21:MomentOfForceMeasureExt': */
class SOAP_CMAC eml21__MomentOfForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentOfForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentOfForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentOfForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:779 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure (-275)
/* simple XML schema type 'eml21:MomentOfInertiaMeasure': */
class SOAP_CMAC eml21__MomentOfInertiaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfInertiaUom'
        enum eml21__MomentOfInertiaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfInertiaMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentOfInertiaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfInertiaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfInertiaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfInertiaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentOfInertiaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfInertiaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentOfInertiaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:781 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt (-276)
/* simple XML schema type 'eml21:MomentOfInertiaMeasureExt': */
class SOAP_CMAC eml21__MomentOfInertiaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfInertiaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfInertiaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentOfInertiaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfInertiaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfInertiaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfInertiaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentOfInertiaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfInertiaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentOfInertiaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:783 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure (-277)
/* simple XML schema type 'eml21:MomentumMeasure': */
class SOAP_CMAC eml21__MomentumMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentumUom'
        enum eml21__MomentumUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentumMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentumMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentumMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentumMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentumMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentumMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentumMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentumMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:785 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt (-278)
/* simple XML schema type 'eml21:MomentumMeasureExt': */
class SOAP_CMAC eml21__MomentumMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentumUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentumMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentumMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentumMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentumMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentumMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentumMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentumMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentumMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:787 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure (-279)
/* simple XML schema type 'eml21:NormalizedPowerMeasure': */
class SOAP_CMAC eml21__NormalizedPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:NormalizedPowerUom'
        enum eml21__NormalizedPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__NormalizedPowerMeasure, default initialized and not managed by a soap context
        virtual eml21__NormalizedPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__NormalizedPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__NormalizedPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__NormalizedPowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__NormalizedPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__NormalizedPowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__NormalizedPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:789 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt (-280)
/* simple XML schema type 'eml21:NormalizedPowerMeasureExt': */
class SOAP_CMAC eml21__NormalizedPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:NormalizedPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__NormalizedPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__NormalizedPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__NormalizedPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__NormalizedPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__NormalizedPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__NormalizedPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__NormalizedPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__NormalizedPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:791 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure (-281)
/* simple XML schema type 'eml21:PermeabilityLengthMeasure': */
class SOAP_CMAC eml21__PermeabilityLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityLengthUom'
        enum eml21__PermeabilityLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__PermeabilityLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:793 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt (-282)
/* simple XML schema type 'eml21:PermeabilityLengthMeasureExt': */
class SOAP_CMAC eml21__PermeabilityLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermeabilityLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:795 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure (-283)
/* simple XML schema type 'eml21:PermeabilityRockMeasure': */
class SOAP_CMAC eml21__PermeabilityRockMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityRockUom'
        enum eml21__PermeabilityRockUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityRockMeasure, default initialized and not managed by a soap context
        virtual eml21__PermeabilityRockMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityRockMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityRockMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityRockMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityRockMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityRockMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:797 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt (-284)
/* simple XML schema type 'eml21:PermeabilityRockMeasureExt': */
class SOAP_CMAC eml21__PermeabilityRockMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityRockUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityRockMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermeabilityRockMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityRockMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityRockMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityRockMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityRockMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityRockMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityRockMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:799 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure (-285)
/* simple XML schema type 'eml21:PermittivityMeasure': */
class SOAP_CMAC eml21__PermittivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermittivityUom'
        enum eml21__PermittivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermittivityMeasure, default initialized and not managed by a soap context
        virtual eml21__PermittivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermittivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermittivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermittivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermittivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermittivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermittivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:801 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt (-286)
/* simple XML schema type 'eml21:PermittivityMeasureExt': */
class SOAP_CMAC eml21__PermittivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermittivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermittivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermittivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermittivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermittivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermittivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermittivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermittivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermittivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:803 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure (-287)
/* simple XML schema type 'eml21:PlaneAngleMeasure': */
class SOAP_CMAC eml21__PlaneAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PlaneAngleUom'
        enum eml21__PlaneAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PlaneAngleMeasure, default initialized and not managed by a soap context
        virtual eml21__PlaneAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PlaneAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PlaneAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PlaneAngleMeasure() { }
        /// Friend allocator used by soap_new_eml21__PlaneAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PlaneAngleMeasure * SOAP_FMAC2 soap_instantiate_eml21__PlaneAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:805 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt (-288)
/* simple XML schema type 'eml21:PlaneAngleMeasureExt': */
class SOAP_CMAC eml21__PlaneAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PlaneAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PlaneAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PlaneAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PlaneAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PlaneAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PlaneAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PlaneAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PlaneAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PlaneAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:807 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure (-289)
/* simple XML schema type 'eml21:PotentialDifferencePerPowerDropMeasure': */
class SOAP_CMAC eml21__PotentialDifferencePerPowerDropMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PotentialDifferencePerPowerDropUom'
        enum eml21__PotentialDifferencePerPowerDropUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PotentialDifferencePerPowerDropMeasure, default initialized and not managed by a soap context
        virtual eml21__PotentialDifferencePerPowerDropMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PotentialDifferencePerPowerDropMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PotentialDifferencePerPowerDropMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PotentialDifferencePerPowerDropMeasure() { }
        /// Friend allocator used by soap_new_eml21__PotentialDifferencePerPowerDropMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PotentialDifferencePerPowerDropMeasure * SOAP_FMAC2 soap_instantiate_eml21__PotentialDifferencePerPowerDropMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:809 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt (-290)
/* simple XML schema type 'eml21:PotentialDifferencePerPowerDropMeasureExt': */
class SOAP_CMAC eml21__PotentialDifferencePerPowerDropMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PotentialDifferencePerPowerDropUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PotentialDifferencePerPowerDropMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PotentialDifferencePerPowerDropMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PotentialDifferencePerPowerDropMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PotentialDifferencePerPowerDropMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PotentialDifferencePerPowerDropMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PotentialDifferencePerPowerDropMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:811 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure (-291)
/* simple XML schema type 'eml21:PowerMeasure': */
class SOAP_CMAC eml21__PowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerUom'
        enum eml21__PowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:813 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt (-292)
/* simple XML schema type 'eml21:PowerMeasureExt': */
class SOAP_CMAC eml21__PowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:815 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure (-293)
/* simple XML schema type 'eml21:PowerPerAreaMeasure': */
class SOAP_CMAC eml21__PowerPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerAreaUom'
        enum eml21__PowerPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:817 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt (-294)
/* simple XML schema type 'eml21:PowerPerAreaMeasureExt': */
class SOAP_CMAC eml21__PowerPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:819 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure (-295)
/* simple XML schema type 'eml21:PowerPerPowerMeasure': */
class SOAP_CMAC eml21__PowerPerPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerPowerUom'
        enum eml21__PowerPerPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerPowerMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerPowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerPowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:821 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt (-296)
/* simple XML schema type 'eml21:PowerPerPowerMeasureExt': */
class SOAP_CMAC eml21__PowerPerPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:823 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure (-297)
/* simple XML schema type 'eml21:PowerPerVolumeMeasure': */
class SOAP_CMAC eml21__PowerPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerVolumeUom'
        enum eml21__PowerPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:825 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt (-298)
/* simple XML schema type 'eml21:PowerPerVolumeMeasureExt': */
class SOAP_CMAC eml21__PowerPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:827 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure (-299)
/* simple XML schema type 'eml21:PressureMeasure': */
class SOAP_CMAC eml21__PressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUom'
        enum eml21__PressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:829 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt (-300)
/* simple XML schema type 'eml21:PressureMeasureExt': */
class SOAP_CMAC eml21__PressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:831 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure (-301)
/* simple XML schema type 'eml21:PressurePerPressureMeasure': */
class SOAP_CMAC eml21__PressurePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerPressureUom'
        enum eml21__PressurePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:833 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt (-302)
/* simple XML schema type 'eml21:PressurePerPressureMeasureExt': */
class SOAP_CMAC eml21__PressurePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:835 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure (-303)
/* simple XML schema type 'eml21:PressurePerTimeMeasure': */
class SOAP_CMAC eml21__PressurePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerTimeUom'
        enum eml21__PressurePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:837 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt (-304)
/* simple XML schema type 'eml21:PressurePerTimeMeasureExt': */
class SOAP_CMAC eml21__PressurePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:839 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure (-305)
/* simple XML schema type 'eml21:PressurePerVolumeMeasure': */
class SOAP_CMAC eml21__PressurePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerVolumeUom'
        enum eml21__PressurePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:841 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt (-306)
/* simple XML schema type 'eml21:PressurePerVolumeMeasureExt': */
class SOAP_CMAC eml21__PressurePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:843 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure (-307)
/* simple XML schema type 'eml21:PressureSquaredMeasure': */
class SOAP_CMAC eml21__PressureSquaredMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredUom'
        enum eml21__PressureSquaredUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:845 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt (-308)
/* simple XML schema type 'eml21:PressureSquaredMeasureExt': */
class SOAP_CMAC eml21__PressureSquaredMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:847 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure (-309)
/* simple XML schema type 'eml21:PressureSquaredPerForceTimePerAreaMeasure': */
class SOAP_CMAC eml21__PressureSquaredPerForceTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredPerForceTimePerAreaUom'
        enum eml21__PressureSquaredPerForceTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredPerForceTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredPerForceTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredPerForceTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredPerForceTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredPerForceTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredPerForceTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt (-310)
/* simple XML schema type 'eml21:PressureSquaredPerForceTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__PressureSquaredPerForceTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredPerForceTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredPerForceTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredPerForceTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredPerForceTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredPerForceTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredPerForceTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredPerForceTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure (-311)
/* simple XML schema type 'eml21:PressureTimePerVolumeMeasure': */
class SOAP_CMAC eml21__PressureTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureTimePerVolumeUom'
        enum eml21__PressureTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:853 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt (-312)
/* simple XML schema type 'eml21:PressureTimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__PressureTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:855 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure (-313)
/* simple XML schema type 'eml21:QuantityOfLightMeasure': */
class SOAP_CMAC eml21__QuantityOfLightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:QuantityOfLightUom'
        enum eml21__QuantityOfLightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__QuantityOfLightMeasure, default initialized and not managed by a soap context
        virtual eml21__QuantityOfLightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__QuantityOfLightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__QuantityOfLightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__QuantityOfLightMeasure() { }
        /// Friend allocator used by soap_new_eml21__QuantityOfLightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__QuantityOfLightMeasure * SOAP_FMAC2 soap_instantiate_eml21__QuantityOfLightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:857 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt (-314)
/* simple XML schema type 'eml21:QuantityOfLightMeasureExt': */
class SOAP_CMAC eml21__QuantityOfLightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:QuantityOfLightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__QuantityOfLightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__QuantityOfLightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__QuantityOfLightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__QuantityOfLightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__QuantityOfLightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__QuantityOfLightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__QuantityOfLightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__QuantityOfLightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:859 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure (-315)
/* simple XML schema type 'eml21:RadianceMeasure': */
class SOAP_CMAC eml21__RadianceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadianceUom'
        enum eml21__RadianceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadianceMeasure, default initialized and not managed by a soap context
        virtual eml21__RadianceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadianceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__RadianceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__RadianceMeasure() { }
        /// Friend allocator used by soap_new_eml21__RadianceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadianceMeasure * SOAP_FMAC2 soap_instantiate_eml21__RadianceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:861 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt (-316)
/* simple XML schema type 'eml21:RadianceMeasureExt': */
class SOAP_CMAC eml21__RadianceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadianceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadianceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__RadianceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadianceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__RadianceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__RadianceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__RadianceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadianceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__RadianceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure (-317)
/* simple XML schema type 'eml21:RadiantIntensityMeasure': */
class SOAP_CMAC eml21__RadiantIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadiantIntensityUom'
        enum eml21__RadiantIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadiantIntensityMeasure, default initialized and not managed by a soap context
        virtual eml21__RadiantIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadiantIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__RadiantIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__RadiantIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__RadiantIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadiantIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__RadiantIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:865 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt (-318)
/* simple XML schema type 'eml21:RadiantIntensityMeasureExt': */
class SOAP_CMAC eml21__RadiantIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadiantIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadiantIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__RadiantIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadiantIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__RadiantIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__RadiantIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__RadiantIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadiantIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__RadiantIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:867 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure (-319)
/* simple XML schema type 'eml21:ReciprocalAreaMeasure': */
class SOAP_CMAC eml21__ReciprocalAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalAreaUom'
        enum eml21__ReciprocalAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:869 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt (-320)
/* simple XML schema type 'eml21:ReciprocalAreaMeasureExt': */
class SOAP_CMAC eml21__ReciprocalAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:871 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure (-321)
/* simple XML schema type 'eml21:ReciprocalElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml21__ReciprocalElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalElectricPotentialDifferenceUom'
        enum eml21__ReciprocalElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:873 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt (-322)
/* simple XML schema type 'eml21:ReciprocalElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml21__ReciprocalElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure (-323)
/* simple XML schema type 'eml21:ReciprocalForceMeasure': */
class SOAP_CMAC eml21__ReciprocalForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalForceUom'
        enum eml21__ReciprocalForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:877 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt (-324)
/* simple XML schema type 'eml21:ReciprocalForceMeasureExt': */
class SOAP_CMAC eml21__ReciprocalForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:879 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure (-325)
/* simple XML schema type 'eml21:ReciprocalLengthMeasure': */
class SOAP_CMAC eml21__ReciprocalLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalLengthUom'
        enum eml21__ReciprocalLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:881 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt (-326)
/* simple XML schema type 'eml21:ReciprocalLengthMeasureExt': */
class SOAP_CMAC eml21__ReciprocalLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:883 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure (-327)
/* simple XML schema type 'eml21:ReciprocalMassMeasure': */
class SOAP_CMAC eml21__ReciprocalMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassUom'
        enum eml21__ReciprocalMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:885 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt (-328)
/* simple XML schema type 'eml21:ReciprocalMassMeasureExt': */
class SOAP_CMAC eml21__ReciprocalMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:887 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure (-329)
/* simple XML schema type 'eml21:ReciprocalMassTimeMeasure': */
class SOAP_CMAC eml21__ReciprocalMassTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassTimeUom'
        enum eml21__ReciprocalMassTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:889 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt (-330)
/* simple XML schema type 'eml21:ReciprocalMassTimeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalMassTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:891 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure (-331)
/* simple XML schema type 'eml21:ReciprocalPressureMeasure': */
class SOAP_CMAC eml21__ReciprocalPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalPressureUom'
        enum eml21__ReciprocalPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:893 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt (-332)
/* simple XML schema type 'eml21:ReciprocalPressureMeasureExt': */
class SOAP_CMAC eml21__ReciprocalPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:895 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure (-333)
/* simple XML schema type 'eml21:ReciprocalTimeMeasure': */
class SOAP_CMAC eml21__ReciprocalTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalTimeUom'
        enum eml21__ReciprocalTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:897 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt (-334)
/* simple XML schema type 'eml21:ReciprocalTimeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:899 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure (-335)
/* simple XML schema type 'eml21:ReciprocalVolumeMeasure': */
class SOAP_CMAC eml21__ReciprocalVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalVolumeUom'
        enum eml21__ReciprocalVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:901 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt (-336)
/* simple XML schema type 'eml21:ReciprocalVolumeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:903 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure (-337)
/* simple XML schema type 'eml21:ReluctanceMeasure': */
class SOAP_CMAC eml21__ReluctanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReluctanceUom'
        enum eml21__ReluctanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReluctanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReluctanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReluctanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReluctanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReluctanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReluctanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReluctanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReluctanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:905 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt (-338)
/* simple XML schema type 'eml21:ReluctanceMeasureExt': */
class SOAP_CMAC eml21__ReluctanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReluctanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReluctanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReluctanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReluctanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReluctanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReluctanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReluctanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReluctanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReluctanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:907 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure (-339)
/* simple XML schema type 'eml21:SecondMomentOfAreaMeasure': */
class SOAP_CMAC eml21__SecondMomentOfAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SecondMomentOfAreaUom'
        enum eml21__SecondMomentOfAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SecondMomentOfAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__SecondMomentOfAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SecondMomentOfAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SecondMomentOfAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SecondMomentOfAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__SecondMomentOfAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SecondMomentOfAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__SecondMomentOfAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:909 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt (-340)
/* simple XML schema type 'eml21:SecondMomentOfAreaMeasureExt': */
class SOAP_CMAC eml21__SecondMomentOfAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SecondMomentOfAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SecondMomentOfAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SecondMomentOfAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SecondMomentOfAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SecondMomentOfAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SecondMomentOfAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SecondMomentOfAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SecondMomentOfAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SecondMomentOfAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:911 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure (-341)
/* simple XML schema type 'eml21:SignalingEventPerTimeMeasure': */
class SOAP_CMAC eml21__SignalingEventPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SignalingEventPerTimeUom'
        enum eml21__SignalingEventPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SignalingEventPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__SignalingEventPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SignalingEventPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SignalingEventPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SignalingEventPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__SignalingEventPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SignalingEventPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__SignalingEventPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:913 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt (-342)
/* simple XML schema type 'eml21:SignalingEventPerTimeMeasureExt': */
class SOAP_CMAC eml21__SignalingEventPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SignalingEventPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SignalingEventPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SignalingEventPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SignalingEventPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SignalingEventPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SignalingEventPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SignalingEventPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SignalingEventPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SignalingEventPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:915 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure (-343)
/* simple XML schema type 'eml21:SolidAngleMeasure': */
class SOAP_CMAC eml21__SolidAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SolidAngleUom'
        enum eml21__SolidAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SolidAngleMeasure, default initialized and not managed by a soap context
        virtual eml21__SolidAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SolidAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SolidAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SolidAngleMeasure() { }
        /// Friend allocator used by soap_new_eml21__SolidAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SolidAngleMeasure * SOAP_FMAC2 soap_instantiate_eml21__SolidAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:917 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt (-344)
/* simple XML schema type 'eml21:SolidAngleMeasureExt': */
class SOAP_CMAC eml21__SolidAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SolidAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SolidAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SolidAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SolidAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SolidAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SolidAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SolidAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SolidAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SolidAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure (-345)
/* simple XML schema type 'eml21:SpecificHeatCapacityMeasure': */
class SOAP_CMAC eml21__SpecificHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SpecificHeatCapacityUom'
        enum eml21__SpecificHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SpecificHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__SpecificHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SpecificHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SpecificHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SpecificHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__SpecificHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SpecificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__SpecificHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:921 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt (-346)
/* simple XML schema type 'eml21:SpecificHeatCapacityMeasureExt': */
class SOAP_CMAC eml21__SpecificHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SpecificHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SpecificHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SpecificHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SpecificHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SpecificHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SpecificHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SpecificHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SpecificHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SpecificHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:923 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure (-347)
/* simple XML schema type 'eml21:TemperatureIntervalMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalUom'
        enum eml21__TemperatureIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:925 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt (-348)
/* simple XML schema type 'eml21:TemperatureIntervalMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:927 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure (-349)
/* simple XML schema type 'eml21:TemperatureIntervalPerLengthMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerLengthUom'
        enum eml21__TemperatureIntervalPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:929 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt (-350)
/* simple XML schema type 'eml21:TemperatureIntervalPerLengthMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:931 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure (-351)
/* simple XML schema type 'eml21:TemperatureIntervalPerPressureMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerPressureUom'
        enum eml21__TemperatureIntervalPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:933 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt (-352)
/* simple XML schema type 'eml21:TemperatureIntervalPerPressureMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:935 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure (-353)
/* simple XML schema type 'eml21:TemperatureIntervalPerTimeMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerTimeUom'
        enum eml21__TemperatureIntervalPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:937 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt (-354)
/* simple XML schema type 'eml21:TemperatureIntervalPerTimeMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:939 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure (-355)
/* simple XML schema type 'eml21:ThermalConductanceMeasure': */
class SOAP_CMAC eml21__ThermalConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductanceUom'
        enum eml21__ThermalConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:941 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt (-356)
/* simple XML schema type 'eml21:ThermalConductanceMeasureExt': */
class SOAP_CMAC eml21__ThermalConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:943 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure (-357)
/* simple XML schema type 'eml21:ThermalConductivityMeasure': */
class SOAP_CMAC eml21__ThermalConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductivityUom'
        enum eml21__ThermalConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:945 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt (-358)
/* simple XML schema type 'eml21:ThermalConductivityMeasureExt': */
class SOAP_CMAC eml21__ThermalConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:947 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure (-359)
/* simple XML schema type 'eml21:ThermalDiffusivityMeasure': */
class SOAP_CMAC eml21__ThermalDiffusivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalDiffusivityUom'
        enum eml21__ThermalDiffusivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalDiffusivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalDiffusivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalDiffusivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalDiffusivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalDiffusivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalDiffusivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalDiffusivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalDiffusivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:949 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt (-360)
/* simple XML schema type 'eml21:ThermalDiffusivityMeasureExt': */
class SOAP_CMAC eml21__ThermalDiffusivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalDiffusivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalDiffusivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalDiffusivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalDiffusivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalDiffusivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalDiffusivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalDiffusivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalDiffusivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalDiffusivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:951 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure (-361)
/* simple XML schema type 'eml21:ThermalInsulanceMeasure': */
class SOAP_CMAC eml21__ThermalInsulanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalInsulanceUom'
        enum eml21__ThermalInsulanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalInsulanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalInsulanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalInsulanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalInsulanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalInsulanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalInsulanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalInsulanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalInsulanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:953 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt (-362)
/* simple XML schema type 'eml21:ThermalInsulanceMeasureExt': */
class SOAP_CMAC eml21__ThermalInsulanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalInsulanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalInsulanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalInsulanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalInsulanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalInsulanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalInsulanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalInsulanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalInsulanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalInsulanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:955 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure (-363)
/* simple XML schema type 'eml21:ThermalResistanceMeasure': */
class SOAP_CMAC eml21__ThermalResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalResistanceUom'
        enum eml21__ThermalResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalResistanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:957 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt (-364)
/* simple XML schema type 'eml21:ThermalResistanceMeasureExt': */
class SOAP_CMAC eml21__ThermalResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:959 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure (-365)
/* simple XML schema type 'eml21:ThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml21__ThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperatureUom'
        enum eml21__ThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:961 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt (-366)
/* simple XML schema type 'eml21:ThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml21__ThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-367)
/* simple XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom'
        enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:965 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-368)
/* simple XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:967 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure (-369)
/* simple XML schema type 'eml21:TimeMeasure': */
class SOAP_CMAC eml21__TimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimeUom'
        enum eml21__TimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:969 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt (-370)
/* simple XML schema type 'eml21:TimeMeasureExt': */
class SOAP_CMAC eml21__TimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:971 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure (-371)
/* simple XML schema type 'eml21:TimePerLengthMeasure': */
class SOAP_CMAC eml21__TimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerLengthUom'
        enum eml21__TimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:973 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt (-372)
/* simple XML schema type 'eml21:TimePerLengthMeasureExt': */
class SOAP_CMAC eml21__TimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:975 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure (-373)
/* simple XML schema type 'eml21:TimePerMassMeasure': */
class SOAP_CMAC eml21__TimePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerMassUom'
        enum eml21__TimePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:977 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt (-374)
/* simple XML schema type 'eml21:TimePerMassMeasureExt': */
class SOAP_CMAC eml21__TimePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:979 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure (-375)
/* simple XML schema type 'eml21:TimePerTimeMeasure': */
class SOAP_CMAC eml21__TimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerTimeUom'
        enum eml21__TimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:981 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt (-376)
/* simple XML schema type 'eml21:TimePerTimeMeasureExt': */
class SOAP_CMAC eml21__TimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:983 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure (-377)
/* simple XML schema type 'eml21:TimePerVolumeMeasure': */
class SOAP_CMAC eml21__TimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerVolumeUom'
        enum eml21__TimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:985 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt (-378)
/* simple XML schema type 'eml21:TimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__TimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:987 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure (-379)
/* simple XML schema type 'eml21:UnitlessMeasure': */
class SOAP_CMAC eml21__UnitlessMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__UnitlessMeasure, default initialized and not managed by a soap context
        virtual eml21__UnitlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__UnitlessMeasure); }
      public:
        /// Constructor with default initializations
        eml21__UnitlessMeasure() : __item(), soap() { }
        virtual ~eml21__UnitlessMeasure() { }
        /// Friend allocator used by soap_new_eml21__UnitlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__UnitlessMeasure * SOAP_FMAC2 soap_instantiate_eml21__UnitlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:989 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure (-380)
/* simple XML schema type 'eml21:VerticalCoordinateMeasure': */
class SOAP_CMAC eml21__VerticalCoordinateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VerticalCoordinateUom'
        enum eml21__VerticalCoordinateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCoordinateMeasure, default initialized and not managed by a soap context
        virtual eml21__VerticalCoordinateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCoordinateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCoordinateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VerticalCoordinateMeasure() { }
        /// Friend allocator used by soap_new_eml21__VerticalCoordinateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCoordinateMeasure * SOAP_FMAC2 soap_instantiate_eml21__VerticalCoordinateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:991 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt (-381)
/* simple XML schema type 'eml21:VerticalCoordinateMeasureExt': */
class SOAP_CMAC eml21__VerticalCoordinateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VerticalCoordinateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCoordinateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VerticalCoordinateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCoordinateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCoordinateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VerticalCoordinateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VerticalCoordinateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCoordinateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VerticalCoordinateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:993 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure (-382)
/* simple XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasure': */
class SOAP_CMAC eml21__VolumeFlowRatePerVolumeFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateUom'
        enum eml21__VolumeFlowRatePerVolumeFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeFlowRatePerVolumeFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumeFlowRatePerVolumeFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeFlowRatePerVolumeFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumeFlowRatePerVolumeFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeFlowRatePerVolumeFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeFlowRatePerVolumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:995 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt (-383)
/* simple XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasureExt': */
class SOAP_CMAC eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:997 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure (-384)
/* simple XML schema type 'eml21:VolumeMeasure': */
class SOAP_CMAC eml21__VolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeUom'
        enum eml21__VolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:999 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt (-385)
/* simple XML schema type 'eml21:VolumeMeasureExt': */
class SOAP_CMAC eml21__VolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1001 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure (-386)
/* simple XML schema type 'eml21:VolumePerAreaMeasure': */
class SOAP_CMAC eml21__VolumePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerAreaUom'
        enum eml21__VolumePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1003 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt (-387)
/* simple XML schema type 'eml21:VolumePerAreaMeasureExt': */
class SOAP_CMAC eml21__VolumePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1005 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure (-388)
/* simple XML schema type 'eml21:VolumePerLengthMeasure': */
class SOAP_CMAC eml21__VolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerLengthUom'
        enum eml21__VolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1007 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt (-389)
/* simple XML schema type 'eml21:VolumePerLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1009 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure (-390)
/* simple XML schema type 'eml21:VolumePerMassMeasure': */
class SOAP_CMAC eml21__VolumePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerMassUom'
        enum eml21__VolumePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1011 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt (-391)
/* simple XML schema type 'eml21:VolumePerMassMeasureExt': */
class SOAP_CMAC eml21__VolumePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1013 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure (-392)
/* simple XML schema type 'eml21:VolumePerPressureMeasure': */
class SOAP_CMAC eml21__VolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerPressureUom'
        enum eml21__VolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1015 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt (-393)
/* simple XML schema type 'eml21:VolumePerPressureMeasureExt': */
class SOAP_CMAC eml21__VolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1017 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure (-394)
/* simple XML schema type 'eml21:VolumePerRotationMeasure': */
class SOAP_CMAC eml21__VolumePerRotationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerRotationUom'
        enum eml21__VolumePerRotationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerRotationMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerRotationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerRotationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerRotationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerRotationMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerRotationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerRotationMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerRotationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1019 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt (-395)
/* simple XML schema type 'eml21:VolumePerRotationMeasureExt': */
class SOAP_CMAC eml21__VolumePerRotationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerRotationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerRotationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerRotationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerRotationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerRotationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerRotationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerRotationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerRotationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerRotationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1021 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure (-396)
/* simple XML schema type 'eml21:VolumePerTimeLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimeLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeLengthUom'
        enum eml21__VolumePerTimeLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1023 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt (-397)
/* simple XML schema type 'eml21:VolumePerTimeLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimeLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1025 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure (-398)
/* simple XML schema type 'eml21:VolumePerTimeMeasure': */
class SOAP_CMAC eml21__VolumePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeUom'
        enum eml21__VolumePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1027 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt (-399)
/* simple XML schema type 'eml21:VolumePerTimeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1029 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure (-400)
/* simple XML schema type 'eml21:VolumePerTimePerAreaMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerAreaUom'
        enum eml21__VolumePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1031 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt (-401)
/* simple XML schema type 'eml21:VolumePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1033 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure (-402)
/* simple XML schema type 'eml21:VolumePerTimePerLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerLengthUom'
        enum eml21__VolumePerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1035 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt (-403)
/* simple XML schema type 'eml21:VolumePerTimePerLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1037 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure (-404)
/* simple XML schema type 'eml21:VolumePerTimePerPressureLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerPressureLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureLengthUom'
        enum eml21__VolumePerTimePerPressureLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1039 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt (-405)
/* simple XML schema type 'eml21:VolumePerTimePerPressureLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerPressureLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1041 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure (-406)
/* simple XML schema type 'eml21:VolumePerTimePerPressureMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureUom'
        enum eml21__VolumePerTimePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1043 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt (-407)
/* simple XML schema type 'eml21:VolumePerTimePerPressureMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1045 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure (-408)
/* simple XML schema type 'eml21:VolumePerTimePerTimeMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerTimeUom'
        enum eml21__VolumePerTimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1047 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt (-409)
/* simple XML schema type 'eml21:VolumePerTimePerTimeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1049 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure (-410)
/* simple XML schema type 'eml21:VolumePerTimePerVolumeMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerVolumeUom'
        enum eml21__VolumePerTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1051 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt (-411)
/* simple XML schema type 'eml21:VolumePerTimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1053 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure (-412)
/* simple XML schema type 'eml21:VolumePerVolumeMeasure': */
class SOAP_CMAC eml21__VolumePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerVolumeUom'
        enum eml21__VolumePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1055 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt (-413)
/* simple XML schema type 'eml21:VolumePerVolumeMeasureExt': */
class SOAP_CMAC eml21__VolumePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1057 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure (-414)
/* simple XML schema type 'eml21:VolumetricHeatTransferCoefficientMeasure': */
class SOAP_CMAC eml21__VolumetricHeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricHeatTransferCoefficientUom'
        enum eml21__VolumetricHeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricHeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumetricHeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricHeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricHeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricHeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumetricHeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricHeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumetricHeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1059 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt (-415)
/* simple XML schema type 'eml21:VolumetricHeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml21__VolumetricHeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricHeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricHeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumetricHeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricHeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricHeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricHeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricHeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1061 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure (-416)
/* simple XML schema type 'eml21:VolumetricThermalExpansionMeasure': */
class SOAP_CMAC eml21__VolumetricThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricThermalExpansionUom'
        enum eml21__VolumetricThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumetricThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumetricThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumetricThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1063 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt (-417)
/* simple XML schema type 'eml21:VolumetricThermalExpansionMeasureExt': */
class SOAP_CMAC eml21__VolumetricThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumetricThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumetricThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumetricThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1125 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure (-448)
/* simple XML schema type 'eml21:ReferencePressure': */
class SOAP_CMAC eml21__ReferencePressure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUom'
        enum eml21__PressureUom uom;
        /// Optional attribute 'referencePressureKind' of XML schema type 'eml21:ReferencePressureKind'
        enum eml21__ReferencePressureKind *referencePressureKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReferencePressure, default initialized and not managed by a soap context
        virtual eml21__ReferencePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReferencePressure); }
      public:
        /// Constructor with default initializations
        eml21__ReferencePressure() : __item(), uom(), referencePressureKind(), soap() { }
        virtual ~eml21__ReferencePressure() { }
        /// Friend allocator used by soap_new_eml21__ReferencePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReferencePressure * SOAP_FMAC2 soap_instantiate_eml21__ReferencePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1193 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType (-482)
/* complex XML schema type 'gml:DefinitionType': */
class SOAP_CMAC gml__DefinitionType : public gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:remarks' of XML schema type 'xsd:string'
        std::string *remarks;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionType, default initialized and not managed by a soap context
        virtual gml__DefinitionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionType); }
      public:
        /// Constructor with default initializations
        gml__DefinitionType() : remarks() { }
        virtual ~gml__DefinitionType() { }
        /// Friend allocator used by soap_new_gml__DefinitionType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionType * SOAP_FMAC2 soap_instantiate_gml__DefinitionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1203 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType (-487)
/* simple XML schema type 'gml:CodeWithAuthorityType': */
class SOAP_CMAC gml__CodeWithAuthorityType : public gml__CodeType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeWithAuthorityType, default initialized and not managed by a soap context
        virtual gml__CodeWithAuthorityType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeWithAuthorityType); }
      public:
        /// Constructor with default initializations
        gml__CodeWithAuthorityType() { }
        virtual ~gml__CodeWithAuthorityType() { }
        /// Friend allocator used by soap_new_gml__CodeWithAuthorityType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeWithAuthorityType * SOAP_FMAC2 soap_instantiate_gml__CodeWithAuthorityType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1207 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType (-489)
/* complex XML schema type 'gml:AbstractTimePrimitiveType': */
class SOAP_CMAC gml__AbstractTimePrimitiveType : public gml__AbstractTimeObjectType {
      public:
        /// Optional element 'gml:relatedTime' of XML schema type 'gml:RelatedTimeType'
        std::vector<gml__RelatedTimeType *> relatedTime;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimePrimitiveType, default initialized and not managed by a soap context
        virtual gml__AbstractTimePrimitiveType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimePrimitiveType); }
      public:
        /// Constructor with default initializations
        gml__AbstractTimePrimitiveType() : relatedTime() { }
        virtual ~gml__AbstractTimePrimitiveType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimePrimitiveType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimePrimitiveType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimePrimitiveType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_1_gml__AngleType (-507)
/* simple XML schema type 'gml:AngleType': */
class SOAP_CMAC gml__AngleType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AngleType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AngleType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AngleType, default initialized and not managed by a soap context
        virtual gml__AngleType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AngleType); }
      public:
        /// Constructor with default initializations
        gml__AngleType() { }
        virtual ~gml__AngleType() { }
        /// Friend allocator used by soap_new_gml__AngleType(struct soap*, int)
        friend SOAP_FMAC1 gml__AngleType * SOAP_FMAC2 soap_instantiate_gml__AngleType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1251 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_1_gml__LengthType (-511)
/* simple XML schema type 'gml:LengthType': */
class SOAP_CMAC gml__LengthType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__LengthType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__LengthType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__LengthType, default initialized and not managed by a soap context
        virtual gml__LengthType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__LengthType); }
      public:
        /// Constructor with default initializations
        gml__LengthType() { }
        virtual ~gml__LengthType() { }
        /// Friend allocator used by soap_new_gml__LengthType(struct soap*, int)
        friend SOAP_FMAC1 gml__LengthType * SOAP_FMAC2 soap_instantiate_gml__LengthType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1299 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-535)
/* complex XML schema type 'gmd:AbstractDQ_PositionalAccuracy_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType : public gmd__AbstractDQ_USCOREElement_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1375 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord (-573)
/* simple XML schema type 'witsml2:WellVerticalDepthCoord': */
class SOAP_CMAC witsml2__WellVerticalDepthCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellVerticalDepthCoord, default initialized and not managed by a soap context
        virtual witsml2__WellVerticalDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellVerticalDepthCoord); }
      public:
        /// Constructor with default initializations
        witsml2__WellVerticalDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml2__WellVerticalDepthCoord() { }
        /// Friend allocator used by soap_new_witsml2__WellVerticalDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellVerticalDepthCoord * SOAP_FMAC2 soap_instantiate_witsml2__WellVerticalDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1381 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord (-576)
/* simple XML schema type 'witsml2:MeasuredDepthCoord': */
class SOAP_CMAC witsml2__MeasuredDepthCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MeasuredDepthCoord, default initialized and not managed by a soap context
        virtual witsml2__MeasuredDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MeasuredDepthCoord); }
      public:
        /// Constructor with default initializations
        witsml2__MeasuredDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml2__MeasuredDepthCoord() { }
        /// Friend allocator used by soap_new_witsml2__MeasuredDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MeasuredDepthCoord * SOAP_FMAC2 soap_instantiate_witsml2__MeasuredDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1385 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth (-578)
/* simple XML schema type 'witsml2:DistanceNorthSouth': */
class SOAP_CMAC witsml2__DistanceNorthSouth {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'reference' of XML schema type 'witsml2:NorthOrSouth'
        enum witsml2__NorthOrSouth reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DistanceNorthSouth, default initialized and not managed by a soap context
        virtual witsml2__DistanceNorthSouth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DistanceNorthSouth); }
      public:
        /// Constructor with default initializations
        witsml2__DistanceNorthSouth() : __item(), uom(), reference(), soap() { }
        virtual ~witsml2__DistanceNorthSouth() { }
        /// Friend allocator used by soap_new_witsml2__DistanceNorthSouth(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DistanceNorthSouth * SOAP_FMAC2 soap_instantiate_witsml2__DistanceNorthSouth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1387 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest (-579)
/* simple XML schema type 'witsml2:DistanceEastWest': */
class SOAP_CMAC witsml2__DistanceEastWest {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'reference' of XML schema type 'witsml2:EastOrWest'
        enum witsml2__EastOrWest reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DistanceEastWest, default initialized and not managed by a soap context
        virtual witsml2__DistanceEastWest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DistanceEastWest); }
      public:
        /// Constructor with default initializations
        witsml2__DistanceEastWest() : __item(), uom(), reference(), soap() { }
        virtual ~witsml2__DistanceEastWest() { }
        /// Friend allocator used by soap_new_witsml2__DistanceEastWest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DistanceEastWest * SOAP_FMAC2 soap_instantiate_witsml2__DistanceEastWest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1397 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord (-584)
/* simple XML schema type 'witsml2:WellElevationCoord': */
class SOAP_CMAC witsml2__WellElevationCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellElevationCoord, default initialized and not managed by a soap context
        virtual witsml2__WellElevationCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellElevationCoord); }
      public:
        /// Constructor with default initializations
        witsml2__WellElevationCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml2__WellElevationCoord() { }
        /// Friend allocator used by soap_new_witsml2__WellElevationCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellElevationCoord * SOAP_FMAC2 soap_instantiate_witsml2__WellElevationCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1731 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity (-751)
/* simple XML schema type 'witsml2:MeasureOrQuantity': */
class SOAP_CMAC witsml2__MeasureOrQuantity {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MeasureOrQuantity, default initialized and not managed by a soap context
        virtual witsml2__MeasureOrQuantity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MeasureOrQuantity); }
      public:
        /// Constructor with default initializations
        witsml2__MeasureOrQuantity() : __item(), uom(), soap() { }
        virtual ~witsml2__MeasureOrQuantity() { }
        /// Friend allocator used by soap_new_witsml2__MeasureOrQuantity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MeasureOrQuantity * SOAP_FMAC2 soap_instantiate_witsml2__MeasureOrQuantity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:289 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName (-30)
/* simple XML schema type 'eml21:AuthorityQualifiedName': */
class SOAP_CMAC eml21__AuthorityQualifiedName {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Optional attribute 'code' of XML schema type 'eml21:String64'
        std::string *code;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AuthorityQualifiedName, default initialized and not managed by a soap context
        virtual eml21__AuthorityQualifiedName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AuthorityQualifiedName); }
      public:
        /// Constructor with default initializations
        eml21__AuthorityQualifiedName() : __item(), authority(), code(), soap() { }
        virtual ~eml21__AuthorityQualifiedName() { }
        /// Friend allocator used by soap_new_eml21__AuthorityQualifiedName(struct soap*, int)
        friend SOAP_FMAC1 eml21__AuthorityQualifiedName * SOAP_FMAC2 soap_instantiate_eml21__AuthorityQualifiedName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:301 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray (-36)
/* complex XML schema type 'eml21:FloatingPointConstantArray': */
class SOAP_CMAC eml21__FloatingPointConstantArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointConstantArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointConstantArray() : Value(), Count() { }
        virtual ~eml21__FloatingPointConstantArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointConstantArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:303 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray (-37)
/* complex XML schema type 'eml21:FloatingPointExternalArray': */
class SOAP_CMAC eml21__FloatingPointExternalArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointExternalArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointExternalArray() : Values() { }
        virtual ~eml21__FloatingPointExternalArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointExternalArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:305 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray (-38)
/* complex XML schema type 'eml21:FloatingPointLatticeArray': */
class SOAP_CMAC eml21__FloatingPointLatticeArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:StartValue' of XML schema type 'xsd:double'
        double StartValue;
        /// Required element 'eml21:Offset' of XML schema type 'eml21:FloatingPointConstantArray'
        std::vector<eml21__FloatingPointConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointLatticeArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointLatticeArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointLatticeArray() : StartValue(), Offset() { }
        virtual ~eml21__FloatingPointLatticeArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointLatticeArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:309 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray (-40)
/* complex XML schema type 'eml21:IntegerArrayFromBooleanMaskArray': */
class SOAP_CMAC eml21__IntegerArrayFromBooleanMaskArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:TotalIndexCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 TotalIndexCount;
        /// Required element 'eml21:Mask' of XML schema type 'eml21:AbstractBooleanArray'
        eml21__AbstractBooleanArray *Mask;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerArrayFromBooleanMaskArray, default initialized and not managed by a soap context
        virtual eml21__IntegerArrayFromBooleanMaskArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerArrayFromBooleanMaskArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerArrayFromBooleanMaskArray() : TotalIndexCount(), Mask() { }
        virtual ~eml21__IntegerArrayFromBooleanMaskArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerArrayFromBooleanMaskArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerArrayFromBooleanMaskArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerArrayFromBooleanMaskArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:311 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray (-41)
/* complex XML schema type 'eml21:IntegerConstantArray': */
class SOAP_CMAC eml21__IntegerConstantArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerConstantArray, default initialized and not managed by a soap context
        virtual eml21__IntegerConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerConstantArray() : Value(), Count() { }
        virtual ~eml21__IntegerConstantArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerConstantArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:313 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray (-42)
/* complex XML schema type 'eml21:IntegerExternalArray': */
class SOAP_CMAC eml21__IntegerExternalArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:NullValue' of XML schema type 'xsd:long'
        LONG64 NullValue;
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerExternalArray, default initialized and not managed by a soap context
        virtual eml21__IntegerExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerExternalArray() : NullValue(), Values() { }
        virtual ~eml21__IntegerExternalArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerExternalArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray (-43)
/* complex XML schema type 'eml21:IntegerLatticeArray': */
class SOAP_CMAC eml21__IntegerLatticeArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:StartValue' of XML schema type 'xsd:long'
        LONG64 StartValue;
        /// Required element 'eml21:Offset' of XML schema type 'eml21:IntegerConstantArray'
        std::vector<eml21__IntegerConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerLatticeArray, default initialized and not managed by a soap context
        virtual eml21__IntegerLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerLatticeArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerLatticeArray() : StartValue(), Offset() { }
        virtual ~eml21__IntegerLatticeArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerLatticeArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:317 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray (-44)
/* complex XML schema type 'eml21:IntegerRangeArray': */
class SOAP_CMAC eml21__IntegerRangeArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerRangeArray, default initialized and not managed by a soap context
        virtual eml21__IntegerRangeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerRangeArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerRangeArray() : Count(), Value() { }
        virtual ~eml21__IntegerRangeArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerRangeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerRangeArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerRangeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:327 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure (-49)
/* simple XML schema type 'eml21:StringMeasure': */
class SOAP_CMAC eml21__StringMeasure {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Optional attribute 'uom' of XML schema type 'eml21:UnitOfMeasure'
        enum eml21__UnitOfMeasure *uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringMeasure, default initialized and not managed by a soap context
        virtual eml21__StringMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringMeasure); }
      public:
        /// Constructor with default initializations
        eml21__StringMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__StringMeasure() { }
        /// Friend allocator used by soap_new_eml21__StringMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringMeasure * SOAP_FMAC2 soap_instantiate_eml21__StringMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1191 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType (-481)
/* complex XML schema type 'gml:IdentifiedObjectType': */
class SOAP_CMAC gml__IdentifiedObjectType : public gml__DefinitionType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__IdentifiedObjectType, default initialized and not managed by a soap context
        virtual gml__IdentifiedObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__IdentifiedObjectType); }
      public:
        /// Constructor with default initializations
        gml__IdentifiedObjectType() { }
        virtual ~gml__IdentifiedObjectType() { }
        /// Friend allocator used by soap_new_gml__IdentifiedObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__IdentifiedObjectType * SOAP_FMAC2 soap_instantiate_gml__IdentifiedObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1429 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString (-600)
/* simple XML schema type 'witsml2:TimestampedCommentString': */
class SOAP_CMAC witsml2__TimestampedCommentString {
      public:
        /// Simple content of XML schema type 'eml21:String2000' wrapped by this struct
        std::string __item;
        /// Required attribute 'dTim' of XML schema type 'eml21:TimeStamp'
        std::string dTim;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TimestampedCommentString, default initialized and not managed by a soap context
        virtual witsml2__TimestampedCommentString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TimestampedCommentString); }
      public:
        /// Constructor with default initializations
        witsml2__TimestampedCommentString() : __item(), dTim(), soap() { }
        virtual ~witsml2__TimestampedCommentString() { }
        /// Friend allocator used by soap_new_witsml2__TimestampedCommentString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TimestampedCommentString * SOAP_FMAC2 soap_instantiate_witsml2__TimestampedCommentString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1573 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventType (-672)
/* simple XML schema type 'witsml2:EventType': */
class SOAP_CMAC witsml2__EventType {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'Class' of XML schema type 'witsml2:EventClassType'
        enum witsml2__EventClassType Class;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__EventType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__EventType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventType, default initialized and not managed by a soap context
        virtual witsml2__EventType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventType); }
      public:
        /// Constructor with default initializations
        witsml2__EventType() : __item(), Class(), soap() { }
        virtual ~witsml2__EventType() { }
        /// Friend allocator used by soap_new_witsml2__EventType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventType * SOAP_FMAC2 soap_instantiate_witsml2__EventType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1853 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit (-812)
/* simple XML schema type 'witsml2:LithostratigraphicUnit': */
class SOAP_CMAC witsml2__LithostratigraphicUnit {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Required attribute 'kind' of XML schema type 'eml21:LithostratigraphicRank'
        enum eml21__LithostratigraphicRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LithostratigraphicUnit, default initialized and not managed by a soap context
        virtual witsml2__LithostratigraphicUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LithostratigraphicUnit); }
      public:
        /// Constructor with default initializations
        witsml2__LithostratigraphicUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml2__LithostratigraphicUnit() { }
        /// Friend allocator used by soap_new_witsml2__LithostratigraphicUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LithostratigraphicUnit * SOAP_FMAC2 soap_instantiate_witsml2__LithostratigraphicUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1867 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit (-819)
/* simple XML schema type 'witsml2:GeochronologicalUnit': */
class SOAP_CMAC witsml2__GeochronologicalUnit {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Optional attribute 'authority' of XML schema type 'eml21:String64'
        std::string *authority;
        /// Required attribute 'kind' of XML schema type 'eml21:GeochronologicalRank'
        enum eml21__GeochronologicalRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeochronologicalUnit, default initialized and not managed by a soap context
        virtual witsml2__GeochronologicalUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeochronologicalUnit); }
      public:
        /// Constructor with default initializations
        witsml2__GeochronologicalUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml2__GeochronologicalUnit() { }
        /// Friend allocator used by soap_new_witsml2__GeochronologicalUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeochronologicalUnit * SOAP_FMAC2 soap_instantiate_witsml2__GeochronologicalUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray (-34)
/* complex XML schema type 'eml21:DoubleExternalArray': */
class SOAP_CMAC eml21__DoubleExternalArray : public eml21__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoubleExternalArray, default initialized and not managed by a soap context
        virtual eml21__DoubleExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoubleExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__DoubleExternalArray() { }
        virtual ~eml21__DoubleExternalArray() { }
        /// Friend allocator used by soap_new_eml21__DoubleExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoubleExternalArray * SOAP_FMAC2 soap_instantiate_eml21__DoubleExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:299 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray (-35)
/* complex XML schema type 'eml21:FloatExternalArray': */
class SOAP_CMAC eml21__FloatExternalArray : public eml21__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatExternalArray, default initialized and not managed by a soap context
        virtual eml21__FloatExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatExternalArray() { }
        virtual ~eml21__FloatExternalArray() { }
        /// Friend allocator used by soap_new_eml21__FloatExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatExternalArray * SOAP_FMAC2 soap_instantiate_eml21__FloatExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1189 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType (-480)
/* complex XML schema type 'gml:AbstractCRSType': */
class SOAP_CMAC gml__AbstractCRSType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        std::vector<_gml__domainOfValidity *> domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCRSType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCRSType() : domainOfValidity(), scope() { }
        virtual ~gml__AbstractCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1219 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType (-495)
/* complex XML schema type 'gml:AbstractCoordinateSystemType': */
class SOAP_CMAC gml__AbstractCoordinateSystemType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axis' of XML schema type 'gml:CoordinateSystemAxisPropertyType'
        std::vector<gml__CoordinateSystemAxisPropertyType *> axis;
        /// Optional attribute 'aggregationType' of XML schema type 'gml:AggregationType'
        enum gml__AggregationType *aggregationType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateSystemType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateSystemType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateSystemType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCoordinateSystemType() : axis(), aggregationType() { }
        virtual ~gml__AbstractCoordinateSystemType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateSystemType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateSystemType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateSystemType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1223 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType (-497)
/* complex XML schema type 'gml:CoordinateSystemAxisType': */
class SOAP_CMAC gml__CoordinateSystemAxisType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axisAbbrev' of XML schema type 'gml:CodeType'
        gml__CodeType *axisAbbrev;
        /// Required element 'gml:axisDirection' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *axisDirection;
        /// Optional element 'gml:minimumValue' of XML schema type 'xsd:double'
        double *minimumValue;
        /// Optional element 'gml:maximumValue' of XML schema type 'xsd:double'
        double *maximumValue;
        /// Optional element 'gml:rangeMeaning' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *rangeMeaning;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisType); }
      public:
        /// Constructor with default initializations
        gml__CoordinateSystemAxisType() : axisAbbrev(), axisDirection(), minimumValue(), maximumValue(), rangeMeaning() { }
        virtual ~gml__CoordinateSystemAxisType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1237 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType (-504)
/* complex XML schema type 'gml:AbstractDatumType': */
class SOAP_CMAC gml__AbstractDatumType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:anchorDefinition' of XML schema type 'gml:CodeType'
        gml__CodeType *anchorDefinition;
        /// Optional element 'gml:realizationEpoch' of XML schema type 'xsd:date'
        std::string *realizationEpoch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractDatumType, default initialized and not managed by a soap context
        virtual gml__AbstractDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractDatumType); }
      public:
        /// Constructor with default initializations
        gml__AbstractDatumType() : domainOfValidity(), scope(), anchorDefinition(), realizationEpoch() { }
        virtual ~gml__AbstractDatumType() { }
        /// Friend allocator used by soap_new_gml__AbstractDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractDatumType * SOAP_FMAC2 soap_instantiate_gml__AbstractDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1241 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType (-506)
/* complex XML schema type 'gml:PrimeMeridianType': */
class SOAP_CMAC gml__PrimeMeridianType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:greenwichLongitude' of XML schema type 'gml:AngleType'
        gml__AngleType *greenwichLongitude;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianType); }
      public:
        /// Constructor with default initializations
        gml__PrimeMeridianType() : greenwichLongitude() { }
        virtual ~gml__PrimeMeridianType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1249 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType (-510)
/* complex XML schema type 'gml:EllipsoidType': */
class SOAP_CMAC gml__EllipsoidType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:semiMajorAxis' of XML schema type 'gml:MeasureType'
        gml__MeasureType *semiMajorAxis;
        /// Required element 'gml:secondDefiningParameter' of XML schema type 'gml:secondDefiningParameter'
        _gml__secondDefiningParameter *secondDefiningParameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidType, default initialized and not managed by a soap context
        virtual gml__EllipsoidType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidType() : semiMajorAxis(), secondDefiningParameter() { }
        virtual ~gml__EllipsoidType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1261 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType (-516)
/* complex XML schema type 'gml:AbstractCoordinateOperationType': */
class SOAP_CMAC gml__AbstractCoordinateOperationType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:operationVersion' of XML schema type 'xsd:string'
        std::string *operationVersion;
        /// Optional element 'gml:coordinateOperationAccuracy' of XML schema type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// Optional element 'gml:sourceCRS' of XML schema type 'gml:CRSPropertyType'
        gml__CRSPropertyType *sourceCRS;
        /// Optional element 'gml:targetCRS' of XML schema type 'gml:CRSPropertyType'
        gml__CRSPropertyType *targetCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateOperationType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateOperationType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateOperationType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCoordinateOperationType() : domainOfValidity(), scope(), operationVersion(), coordinateOperationAccuracy(), sourceCRS(), targetCRS() { }
        virtual ~gml__AbstractCoordinateOperationType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateOperationType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateOperationType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateOperationType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:62611 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_1__gml__union_GeodeticCRSType (-2198)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeodeticCRSType
{
        #define SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_ellipsoidalCS	(1)	/**< union variant selector value for member ellipsoidalCS */
        gml__EllipsoidalCSPropertyType *ellipsoidalCS;
        #define SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_cartesianCS	(2)	/**< union variant selector value for member cartesianCS */
        gml__CartesianCSPropertyType *cartesianCS;
        #define SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_sphericalCS	(3)	/**< union variant selector value for member sphericalCS */
        gml__SphericalCSPropertyType *sphericalCS;
};
#endif

/* eml2_1ForGsoap.h:1187 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType (-479)
/* complex XML schema type 'gml:GeodeticCRSType': */
class SOAP_CMAC gml__GeodeticCRSType : public gml__AbstractCRSType {
      public:
        /// Union with union _gml__union_GeodeticCRSType variant selector __union_GeodeticCRSType set to one of: SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_ellipsoidalCS SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_cartesianCS SOAP_UNION_gsoap_eml2_1__gml__union_GeodeticCRSType_sphericalCS
        int __union_GeodeticCRSType;
        union _gml__union_GeodeticCRSType union_GeodeticCRSType;
        /// Required element 'gml:geodeticDatum' of XML schema type 'gml:GeodeticDatumPropertyType'
        gml__GeodeticDatumPropertyType *geodeticDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticCRSType() : __union_GeodeticCRSType(), geodeticDatum() { }
        virtual ~gml__GeodeticCRSType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1217 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType (-494)
/* complex XML schema type 'gml:EllipsoidalCSType': */
class SOAP_CMAC gml__EllipsoidalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidalCSType() { }
        virtual ~gml__EllipsoidalCSType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1227 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType (-499)
/* complex XML schema type 'gml:CartesianCSType': */
class SOAP_CMAC gml__CartesianCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSType, default initialized and not managed by a soap context
        virtual gml__CartesianCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSType); }
      public:
        /// Constructor with default initializations
        gml__CartesianCSType() { }
        virtual ~gml__CartesianCSType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1231 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType (-501)
/* complex XML schema type 'gml:SphericalCSType': */
class SOAP_CMAC gml__SphericalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSType, default initialized and not managed by a soap context
        virtual gml__SphericalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSType); }
      public:
        /// Constructor with default initializations
        gml__SphericalCSType() { }
        virtual ~gml__SphericalCSType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1235 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType (-503)
/* complex XML schema type 'gml:GeodeticDatumType': */
class SOAP_CMAC gml__GeodeticDatumType : public gml__AbstractDatumType {
      public:
        /// Required element 'gml:primeMeridian' of XML schema type 'gml:PrimeMeridianPropertyType'
        gml__PrimeMeridianPropertyType *primeMeridian;
        /// Required element 'gml:ellipsoid' of XML schema type 'gml:EllipsoidPropertyType'
        gml__EllipsoidPropertyType *ellipsoid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticDatumType() : primeMeridian(), ellipsoid() { }
        virtual ~gml__GeodeticDatumType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1255 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType (-513)
/* complex XML schema type 'gml:AbstractGeneralDerivedCRSType': */
class SOAP_CMAC gml__AbstractGeneralDerivedCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:conversion' of XML schema type 'gml:GeneralConversionPropertyType'
        gml__GeneralConversionPropertyType *conversion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralDerivedCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralDerivedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralDerivedCRSType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGeneralDerivedCRSType() : conversion() { }
        virtual ~gml__AbstractGeneralDerivedCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralDerivedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralDerivedCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralDerivedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1259 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType (-515)
/* complex XML schema type 'gml:AbstractGeneralConversionType': */
class SOAP_CMAC gml__AbstractGeneralConversionType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Optional element 'gml:remarks' of XML schema type 'xsd:string'
        std::string *remarks;
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:coordinateOperationAccuracy' of XML schema type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralConversionType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralConversionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralConversionType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGeneralConversionType() : description(), descriptionReference(), identifier(), name(), remarks(), domainOfValidity(), scope(), coordinateOperationAccuracy(), gml__id(), soap() { }
        virtual ~gml__AbstractGeneralConversionType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralConversionType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralConversionType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralConversionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType (-519)
/* complex XML schema type 'gml:VerticalCRSType': */
class SOAP_CMAC gml__VerticalCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:verticalCS' of XML schema type 'gml:VerticalCSPropertyType'
        gml__VerticalCSPropertyType *verticalCS;
        /// Required element 'gml:verticalDatum' of XML schema type 'gml:VerticalDatumPropertyType'
        gml__VerticalDatumPropertyType *verticalDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCRSType, default initialized and not managed by a soap context
        virtual gml__VerticalCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCRSType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCRSType() : verticalCS(), verticalDatum() { }
        virtual ~gml__VerticalCRSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCRSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType (-521)
/* complex XML schema type 'gml:VerticalCSType': */
class SOAP_CMAC gml__VerticalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSType, default initialized and not managed by a soap context
        virtual gml__VerticalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCSType() { }
        virtual ~gml__VerticalCSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1275 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType (-523)
/* complex XML schema type 'gml:VerticalDatumType': */
class SOAP_CMAC gml__VerticalDatumType : public gml__AbstractDatumType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumType); }
      public:
        /// Constructor with default initializations
        gml__VerticalDatumType() { }
        virtual ~gml__VerticalDatumType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:63145 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__union_ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_1__gml__union_ProjectedCRSType (-2208)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_ProjectedCRSType
{
        #define SOAP_UNION_gsoap_eml2_1__gml__union_ProjectedCRSType_baseGeodeticCRS	(1)	/**< union variant selector value for member baseGeodeticCRS */
        gml__GeodeticCRSPropertyType *baseGeodeticCRS;
};
#endif

/* eml2_1ForGsoap.h:1253 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType (-512)
/* complex XML schema type 'gml:ProjectedCRSType': */
class SOAP_CMAC gml__ProjectedCRSType : public gml__AbstractGeneralDerivedCRSType {
      public:
        /// Union with union _gml__union_ProjectedCRSType variant selector __union_ProjectedCRSType set to one of: SOAP_UNION_gsoap_eml2_1__gml__union_ProjectedCRSType_baseGeodeticCRS
        int __union_ProjectedCRSType;
        union _gml__union_ProjectedCRSType union_ProjectedCRSType;
        /// Required element 'gml:cartesianCS' of XML schema type 'gml:CartesianCSPropertyType'
        gml__CartesianCSPropertyType *cartesianCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ProjectedCRSType, default initialized and not managed by a soap context
        virtual gml__ProjectedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ProjectedCRSType); }
      public:
        /// Constructor with default initializations
        gml__ProjectedCRSType() : __union_ProjectedCRSType(), cartesianCS() { }
        virtual ~gml__ProjectedCRSType() { }
        /// Friend allocator used by soap_new_gml__ProjectedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__ProjectedCRSType * SOAP_FMAC2 soap_instantiate_gml__ProjectedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:65763 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header (-845623296)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:65763 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code (-845623297)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:65763 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail (-845623299)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:65763 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason (-845623302)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:65763 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault (-845623303)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_1__XML
#define SOAP_TYPE_gsoap_eml2_1__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_1__QName
#define SOAP_TYPE_gsoap_eml2_1__QName (-6)

typedef char *_QName;
#endif

/* eml2_1ForGsoap.h:248 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__ID
#define SOAP_TYPE_gsoap_eml2_1_xsd__ID (-15)

typedef std::string xsd__ID;
#endif

/* eml2_1ForGsoap.h:251 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_xsd__anyURI (-16)

typedef std::string xsd__anyURI;
#endif

/* eml2_1ForGsoap.h:254 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__date
#define SOAP_TYPE_gsoap_eml2_1_xsd__date (-17)

typedef std::string xsd__date;
#endif

/* eml2_1ForGsoap.h:257 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__gYear
#define SOAP_TYPE_gsoap_eml2_1_xsd__gYear (-18)

typedef std::string xsd__gYear;
#endif

/* eml2_1ForGsoap.h:1946 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt (-854)

typedef std::string eml21__LithologyKindExt;
#endif

/* eml2_1ForGsoap.h:1949 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt (-855)

typedef std::string eml21__LithologyQualifierKindExt;
#endif

/* eml2_1ForGsoap.h:1952 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt (-856)

typedef std::string eml21__QuantityClassKindExt;
#endif

/* eml2_1ForGsoap.h:1955 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt (-857)

typedef std::string eml21__ReferenceConditionExt;
#endif

/* eml2_1ForGsoap.h:1958 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt (-858)

typedef std::string eml21__UnitOfMeasureExt;
#endif

/* eml2_1ForGsoap.h:1961 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt (-859)

typedef std::string eml21__AbsorbedDoseUomExt;
#endif

/* eml2_1ForGsoap.h:1964 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt (-860)

typedef std::string eml21__ActivityOfRadioactivityUomExt;
#endif

/* eml2_1ForGsoap.h:1967 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt (-861)

typedef std::string eml21__AmountOfSubstancePerAmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:1970 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt (-862)

typedef std::string eml21__AmountOfSubstancePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1973 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt (-863)

typedef std::string eml21__AmountOfSubstancePerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1976 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt (-864)

typedef std::string eml21__AmountOfSubstancePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1979 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt (-865)

typedef std::string eml21__AmountOfSubstancePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1982 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt (-866)

typedef std::string eml21__AmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:1985 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt (-867)

typedef std::string eml21__AnglePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1988 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt (-868)

typedef std::string eml21__AnglePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1991 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt (-869)

typedef std::string eml21__AngularAccelerationUomExt;
#endif

/* eml2_1ForGsoap.h:1994 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt (-870)

typedef std::string eml21__AngularVelocityUomExt;
#endif

/* eml2_1ForGsoap.h:1997 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt (-871)

typedef std::string eml21__APIGammaRayUomExt;
#endif

/* eml2_1ForGsoap.h:2000 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt (-872)

typedef std::string eml21__APIGravityUomExt;
#endif

/* eml2_1ForGsoap.h:2003 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt (-873)

typedef std::string eml21__APINeutronUomExt;
#endif

/* eml2_1ForGsoap.h:2006 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt (-874)

typedef std::string eml21__AreaPerAmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:2009 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt (-875)

typedef std::string eml21__AreaPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2012 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt (-876)

typedef std::string eml21__AreaPerCountUomExt;
#endif

/* eml2_1ForGsoap.h:2015 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt (-877)

typedef std::string eml21__AreaPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2018 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt (-878)

typedef std::string eml21__AreaPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2021 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt (-879)

typedef std::string eml21__AreaPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2024 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt (-880)

typedef std::string eml21__AreaUomExt;
#endif

/* eml2_1ForGsoap.h:2027 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt (-881)

typedef std::string eml21__AttenuationPerFrequencyIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:2030 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt (-882)

typedef std::string eml21__CapacitanceUomExt;
#endif

/* eml2_1ForGsoap.h:2033 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt (-883)

typedef std::string eml21__CationExchangeCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:2036 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt (-884)

typedef std::string eml21__DataTransferSpeedUomExt;
#endif

/* eml2_1ForGsoap.h:2039 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt (-885)

typedef std::string eml21__DiffusionCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:2042 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt (-886)

typedef std::string eml21__DiffusiveTimeOfFlightUomExt;
#endif

/* eml2_1ForGsoap.h:2045 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt (-887)

typedef std::string eml21__DigitalStorageUomExt;
#endif

/* eml2_1ForGsoap.h:2048 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt (-888)

typedef std::string eml21__DimensionlessUomExt;
#endif

/* eml2_1ForGsoap.h:2051 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt (-889)

typedef std::string eml21__DipoleMomentUomExt;
#endif

/* eml2_1ForGsoap.h:2054 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt (-890)

typedef std::string eml21__DoseEquivalentUomExt;
#endif

/* eml2_1ForGsoap.h:2057 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt (-891)

typedef std::string eml21__DynamicViscosityUomExt;
#endif

/* eml2_1ForGsoap.h:2060 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt (-892)

typedef std::string eml21__ElectricalResistivityUomExt;
#endif

/* eml2_1ForGsoap.h:2063 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt (-893)

typedef std::string eml21__ElectricChargePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2066 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt (-894)

typedef std::string eml21__ElectricChargePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2069 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt (-895)

typedef std::string eml21__ElectricChargePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2072 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt (-896)

typedef std::string eml21__ElectricChargeUomExt;
#endif

/* eml2_1ForGsoap.h:2075 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt (-897)

typedef std::string eml21__ElectricConductanceUomExt;
#endif

/* eml2_1ForGsoap.h:2078 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt (-898)

typedef std::string eml21__ElectricConductivityUomExt;
#endif

/* eml2_1ForGsoap.h:2081 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt (-899)

typedef std::string eml21__ElectricCurrentDensityUomExt;
#endif

/* eml2_1ForGsoap.h:2084 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt (-900)

typedef std::string eml21__ElectricCurrentUomExt;
#endif

/* eml2_1ForGsoap.h:2087 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt (-901)

typedef std::string eml21__ElectricFieldStrengthUomExt;
#endif

/* eml2_1ForGsoap.h:2090 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt (-902)

typedef std::string eml21__ElectricPotentialDifferenceUomExt;
#endif

/* eml2_1ForGsoap.h:2093 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt (-903)

typedef std::string eml21__ElectricResistancePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2096 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt (-904)

typedef std::string eml21__ElectricResistanceUomExt;
#endif

/* eml2_1ForGsoap.h:2099 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt (-905)

typedef std::string eml21__ElectromagneticMomentUomExt;
#endif

/* eml2_1ForGsoap.h:2102 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt (-906)

typedef std::string eml21__EnergyLengthPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2105 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt (-907)

typedef std::string eml21__EnergyLengthPerTimeAreaTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:2108 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt (-908)

typedef std::string eml21__EnergyPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2111 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt (-909)

typedef std::string eml21__EnergyPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2114 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt (-910)

typedef std::string eml21__EnergyPerMassPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2117 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt (-911)

typedef std::string eml21__EnergyPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2120 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt (-912)

typedef std::string eml21__EnergyPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2123 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt (-913)

typedef std::string eml21__EnergyUomExt;
#endif

/* eml2_1ForGsoap.h:2126 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt (-914)

typedef std::string eml21__ForceAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2129 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt (-915)

typedef std::string eml21__ForceLengthPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2132 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt (-916)

typedef std::string eml21__ForcePerForceUomExt;
#endif

/* eml2_1ForGsoap.h:2135 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt (-917)

typedef std::string eml21__ForcePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2138 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt (-918)

typedef std::string eml21__ForcePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2141 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt (-919)

typedef std::string eml21__ForceUomExt;
#endif

/* eml2_1ForGsoap.h:2144 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt (-920)

typedef std::string eml21__FrequencyIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:2147 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt (-921)

typedef std::string eml21__FrequencyUomExt;
#endif

/* eml2_1ForGsoap.h:2150 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt (-922)

typedef std::string eml21__HeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:2153 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt (-923)

typedef std::string eml21__HeatFlowRateUomExt;
#endif

/* eml2_1ForGsoap.h:2156 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt (-924)

typedef std::string eml21__HeatTransferCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:2159 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt (-925)

typedef std::string eml21__IlluminanceUomExt;
#endif

/* eml2_1ForGsoap.h:2162 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt (-926)

typedef std::string eml21__InductanceUomExt;
#endif

/* eml2_1ForGsoap.h:2165 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt (-927)

typedef std::string eml21__IsothermalCompressibilityUomExt;
#endif

/* eml2_1ForGsoap.h:2168 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt (-928)

typedef std::string eml21__KinematicViscosityUomExt;
#endif

/* eml2_1ForGsoap.h:2171 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt (-929)

typedef std::string eml21__LengthPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2174 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt (-930)

typedef std::string eml21__LengthPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt (-931)

typedef std::string eml21__LengthPerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2180 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt (-932)

typedef std::string eml21__LengthPerTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:2183 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt (-933)

typedef std::string eml21__LengthPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2186 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt (-934)

typedef std::string eml21__LengthPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2189 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt (-935)

typedef std::string eml21__LengthUomExt;
#endif

/* eml2_1ForGsoap.h:2192 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt (-936)

typedef std::string eml21__LightExposureUomExt;
#endif

/* eml2_1ForGsoap.h:2195 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt (-937)

typedef std::string eml21__LinearAccelerationUomExt;
#endif

/* eml2_1ForGsoap.h:2198 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt (-938)

typedef std::string eml21__LinearThermalExpansionUomExt;
#endif

/* eml2_1ForGsoap.h:2201 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt (-939)

typedef std::string eml21__LogarithmicPowerRatioPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2204 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt (-940)

typedef std::string eml21__LogarithmicPowerRatioUomExt;
#endif

/* eml2_1ForGsoap.h:2207 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt (-941)

typedef std::string eml21__LuminanceUomExt;
#endif

/* eml2_1ForGsoap.h:2210 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt (-942)

typedef std::string eml21__LuminousEfficacyUomExt;
#endif

/* eml2_1ForGsoap.h:2213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt (-943)

typedef std::string eml21__LuminousFluxUomExt;
#endif

/* eml2_1ForGsoap.h:2216 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt (-944)

typedef std::string eml21__LuminousIntensityUomExt;
#endif

/* eml2_1ForGsoap.h:2219 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt (-945)

typedef std::string eml21__MagneticDipoleMomentUomExt;
#endif

/* eml2_1ForGsoap.h:2222 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt (-946)

typedef std::string eml21__MagneticFieldStrengthUomExt;
#endif

/* eml2_1ForGsoap.h:2225 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt (-947)

typedef std::string eml21__MagneticFluxDensityPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2228 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt (-948)

typedef std::string eml21__MagneticFluxDensityUomExt;
#endif

/* eml2_1ForGsoap.h:2231 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt (-949)

typedef std::string eml21__MagneticFluxUomExt;
#endif

/* eml2_1ForGsoap.h:2234 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt (-950)

typedef std::string eml21__MagneticPermeabilityUomExt;
#endif

/* eml2_1ForGsoap.h:2237 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt (-951)

typedef std::string eml21__MagneticVectorPotentialUomExt;
#endif

/* eml2_1ForGsoap.h:2240 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt (-952)

typedef std::string eml21__MassLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt (-953)

typedef std::string eml21__MassPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2246 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt (-954)

typedef std::string eml21__MassPerEnergyUomExt;
#endif

/* eml2_1ForGsoap.h:2249 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt (-955)

typedef std::string eml21__MassPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2252 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt (-956)

typedef std::string eml21__MassPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2255 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt (-957)

typedef std::string eml21__MassPerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2258 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt (-958)

typedef std::string eml21__MassPerTimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2261 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt (-959)

typedef std::string eml21__MassPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2264 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt (-960)

typedef std::string eml21__MassPerVolumePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt (-961)

typedef std::string eml21__MassPerVolumePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2270 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt (-962)

typedef std::string eml21__MassPerVolumePerTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:2273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt (-963)

typedef std::string eml21__MassPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2276 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt (-964)

typedef std::string eml21__MassUomExt;
#endif

/* eml2_1ForGsoap.h:2279 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt (-965)

typedef std::string eml21__MobilityUomExt;
#endif

/* eml2_1ForGsoap.h:2282 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt (-966)

typedef std::string eml21__MolarEnergyUomExt;
#endif

/* eml2_1ForGsoap.h:2285 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt (-967)

typedef std::string eml21__MolarHeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:2288 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt (-968)

typedef std::string eml21__MolarVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2291 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt (-969)

typedef std::string eml21__MolecularWeightUomExt;
#endif

/* eml2_1ForGsoap.h:2294 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt (-970)

typedef std::string eml21__MomentOfForceUomExt;
#endif

/* eml2_1ForGsoap.h:2297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt (-971)

typedef std::string eml21__MomentOfInertiaUomExt;
#endif

/* eml2_1ForGsoap.h:2300 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt (-972)

typedef std::string eml21__MomentumUomExt;
#endif

/* eml2_1ForGsoap.h:2303 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt (-973)

typedef std::string eml21__NormalizedPowerUomExt;
#endif

/* eml2_1ForGsoap.h:2306 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt (-974)

typedef std::string eml21__PermeabilityLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2309 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt (-975)

typedef std::string eml21__PermeabilityRockUomExt;
#endif

/* eml2_1ForGsoap.h:2312 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt (-976)

typedef std::string eml21__PermittivityUomExt;
#endif

/* eml2_1ForGsoap.h:2315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt (-977)

typedef std::string eml21__PlaneAngleUomExt;
#endif

/* eml2_1ForGsoap.h:2318 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt (-978)

typedef std::string eml21__PotentialDifferencePerPowerDropUomExt;
#endif

/* eml2_1ForGsoap.h:2321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt (-979)

typedef std::string eml21__PowerPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2324 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt (-980)

typedef std::string eml21__PowerPerPowerUomExt;
#endif

/* eml2_1ForGsoap.h:2327 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt (-981)

typedef std::string eml21__PowerPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2330 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt (-982)

typedef std::string eml21__PowerUomExt;
#endif

/* eml2_1ForGsoap.h:2333 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt (-983)

typedef std::string eml21__PressurePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2336 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt (-984)

typedef std::string eml21__PressurePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt (-985)

typedef std::string eml21__PressurePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2342 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt (-986)

typedef std::string eml21__PressureSquaredPerForceTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt (-987)

typedef std::string eml21__PressureSquaredUomExt;
#endif

/* eml2_1ForGsoap.h:2348 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt (-988)

typedef std::string eml21__PressureTimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2351 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt (-989)

typedef std::string eml21__PressureUomExt;
#endif

/* eml2_1ForGsoap.h:2354 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt (-990)

typedef std::string eml21__QuantityOfLightUomExt;
#endif

/* eml2_1ForGsoap.h:2357 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt (-991)

typedef std::string eml21__RadianceUomExt;
#endif

/* eml2_1ForGsoap.h:2360 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt (-992)

typedef std::string eml21__RadiantIntensityUomExt;
#endif

/* eml2_1ForGsoap.h:2363 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt (-993)

typedef std::string eml21__ReciprocalAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2366 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt (-994)

typedef std::string eml21__ReciprocalElectricPotentialDifferenceUomExt;
#endif

/* eml2_1ForGsoap.h:2369 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt (-995)

typedef std::string eml21__ReciprocalForceUomExt;
#endif

/* eml2_1ForGsoap.h:2372 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt (-996)

typedef std::string eml21__ReciprocalLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2375 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt (-997)

typedef std::string eml21__ReciprocalMassTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2378 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt (-998)

typedef std::string eml21__ReciprocalMassUomExt;
#endif

/* eml2_1ForGsoap.h:2381 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt (-999)

typedef std::string eml21__ReciprocalPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2384 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt (-1000)

typedef std::string eml21__ReciprocalTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2387 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt (-1001)

typedef std::string eml21__ReciprocalVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2390 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt (-1002)

typedef std::string eml21__ReluctanceUomExt;
#endif

/* eml2_1ForGsoap.h:2393 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt (-1003)

typedef std::string eml21__SecondMomentOfAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2396 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt (-1004)

typedef std::string eml21__SignalingEventPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt (-1005)

typedef std::string eml21__SolidAngleUomExt;
#endif

/* eml2_1ForGsoap.h:2402 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt (-1006)

typedef std::string eml21__SpecificHeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:2405 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt (-1007)

typedef std::string eml21__TemperatureIntervalPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2408 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt (-1008)

typedef std::string eml21__TemperatureIntervalPerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2411 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt (-1009)

typedef std::string eml21__TemperatureIntervalPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2414 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt (-1010)

typedef std::string eml21__TemperatureIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:2417 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt (-1011)

typedef std::string eml21__ThermalConductanceUomExt;
#endif

/* eml2_1ForGsoap.h:2420 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt (-1012)

typedef std::string eml21__ThermalConductivityUomExt;
#endif

/* eml2_1ForGsoap.h:2423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt (-1013)

typedef std::string eml21__ThermalDiffusivityUomExt;
#endif

/* eml2_1ForGsoap.h:2426 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt (-1014)

typedef std::string eml21__ThermalInsulanceUomExt;
#endif

/* eml2_1ForGsoap.h:2429 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt (-1015)

typedef std::string eml21__ThermalResistanceUomExt;
#endif

/* eml2_1ForGsoap.h:2432 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-1016)

typedef std::string eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:2435 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt (-1017)

typedef std::string eml21__ThermodynamicTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:2438 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt (-1018)

typedef std::string eml21__TimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2441 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt (-1019)

typedef std::string eml21__TimePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2444 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt (-1020)

typedef std::string eml21__TimePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2447 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt (-1021)

typedef std::string eml21__TimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2450 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt (-1022)

typedef std::string eml21__TimeUomExt;
#endif

/* eml2_1ForGsoap.h:2453 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt (-1023)

typedef std::string eml21__VerticalCoordinateUomExt;
#endif

/* eml2_1ForGsoap.h:2456 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt (-1024)

typedef std::string eml21__VolumeFlowRatePerVolumeFlowRateUomExt;
#endif

/* eml2_1ForGsoap.h:2459 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt (-1025)

typedef std::string eml21__VolumePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2462 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt (-1026)

typedef std::string eml21__VolumePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2465 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt (-1027)

typedef std::string eml21__VolumePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:2468 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt (-1028)

typedef std::string eml21__VolumePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2471 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt (-1029)

typedef std::string eml21__VolumePerRotationUomExt;
#endif

/* eml2_1ForGsoap.h:2474 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt (-1030)

typedef std::string eml21__VolumePerTimeLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2477 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt (-1031)

typedef std::string eml21__VolumePerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:2480 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt (-1032)

typedef std::string eml21__VolumePerTimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2483 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt (-1033)

typedef std::string eml21__VolumePerTimePerPressureLengthUomExt;
#endif

/* eml2_1ForGsoap.h:2486 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt (-1034)

typedef std::string eml21__VolumePerTimePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:2489 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt (-1035)

typedef std::string eml21__VolumePerTimePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2492 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt (-1036)

typedef std::string eml21__VolumePerTimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2495 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt (-1037)

typedef std::string eml21__VolumePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:2498 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt (-1038)

typedef std::string eml21__VolumePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2501 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt (-1039)

typedef std::string eml21__VolumetricHeatTransferCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:2504 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt (-1040)

typedef std::string eml21__VolumetricThermalExpansionUomExt;
#endif

/* eml2_1ForGsoap.h:2507 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt (-1041)

typedef std::string eml21__VolumeUomExt;
#endif

/* eml2_1ForGsoap.h:2518 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_1_gml__NilReasonType (-1042)

typedef std::string gml__NilReasonType;
#endif

/* eml2_1ForGsoap.h:2522 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_1_gml__NilReasonEnumeration (-1043)

typedef std::string gml__NilReasonEnumeration;
#endif

/* eml2_1ForGsoap.h:2525 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_1_gml__UomIdentifier (-1044)

typedef std::string gml__UomIdentifier;
#endif

/* eml2_1ForGsoap.h:2560 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREType (-1045)

typedef std::string gco__Date_USCOREType;
#endif

/* eml2_1ForGsoap.h:2579 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentTypeExt (-1046)

typedef std::string witsml2__EquipmentTypeExt;
#endif

/* eml2_1ForGsoap.h:2587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure (-1048)

typedef double eml21__AbstractMeasure;
#endif

/* eml2_1ForGsoap.h:2595 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString (-1049)

typedef std::string eml21__AbstractString;
#endif

/* eml2_1ForGsoap.h:2598 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger (-1051)

typedef ULONG64 eml21__NonNegativeInteger;
#endif

/* eml2_1ForGsoap.h:2600 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger (-1052)

typedef ULONG64 eml21__PositiveInteger;
#endif

/* eml2_1ForGsoap.h:2687 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_1_gml__UomSymbol (-1056)

typedef std::string gml__UomSymbol;
#endif

/* eml2_1ForGsoap.h:2698 */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_1_gml__UomURI (-1057)

typedef std::string gml__UomURI;
#endif

/* eml2_1ForGsoap.h:2803 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BeaufortScaleIntegerCode (-1062)

typedef short witsml2__BeaufortScaleIntegerCode;
#endif

/* eml2_1ForGsoap.h:2812 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpActionIntegerCode (-1063)

typedef short witsml2__PumpActionIntegerCode;
#endif

/* eml2_1ForGsoap.h:2822 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LevelIntegerCode (-1064)

typedef short witsml2__LevelIntegerCode;
#endif

/* eml2_1ForGsoap.h:2831 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NonNegativeFraction (-1065)

typedef double witsml2__NonNegativeFraction;
#endif

/* eml2_1ForGsoap.h:2836 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern (-1066)

typedef std::string eml21__EnumExtensionPattern;
#endif

/* eml2_1ForGsoap.h:2841 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_eml21__String2000 (-1067)

typedef std::string eml21__String2000;
#endif

/* eml2_1ForGsoap.h:2846 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String64
#define SOAP_TYPE_gsoap_eml2_1_eml21__String64 (-1068)

typedef std::string eml21__String64;
#endif

/* eml2_1ForGsoap.h:2851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp (-1069)

typedef std::string eml21__TimeStamp;
#endif

/* eml2_1ForGsoap.h:2861 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum (-1070)

typedef std::string eml21__UomEnum;
#endif

/* eml2_1ForGsoap.h:2866 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UuidString
#define SOAP_TYPE_gsoap_eml2_1_eml21__UuidString (-1071)

typedef std::string eml21__UuidString;
#endif

/* eml2_1ForGsoap.h:4380 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone (-1073)

typedef std::string eml21__TimeZone;
#endif

/* eml2_1ForGsoap.h:4388 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum (-1074)

typedef eml21__String64 eml21__TypeEnum;
#endif

/* eml2_1ForGsoap.h:13316 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SectionNumber (-1258)

typedef std::string witsml2__SectionNumber;
#endif

/* eml2_1ForGsoap.h:13325 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterSection (-1259)

typedef std::string witsml2__PublicLandSurveySystemQuarterSection;
#endif

/* eml2_1ForGsoap.h:13334 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterTownship (-1260)

typedef std::string witsml2__PublicLandSurveySystemQuarterTownship;
#endif

/* eml2_1ForGsoap.h:13339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractUidString (-1261)

typedef std::string witsml2__AbstractUidString;
#endif

/* eml2_1ForGsoap.h:63175 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject (-2210)

typedef eml21__AbstractObject _eml21__AbstractContextualObject;
#endif

/* eml2_1ForGsoap.h:63182 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject (-2211)

typedef eml21__AbstractObject _eml21__AbstractDataObject;
#endif

/* eml2_1ForGsoap.h:63185 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference (-2212)

typedef eml21__EpcExternalPartReference _eml21__EpcExternalPartReference;
#endif

/* eml2_1ForGsoap.h:63188 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1__eml21__Activity (-2213)

typedef eml21__Activity _eml21__Activity;
#endif

/* eml2_1ForGsoap.h:63191 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate (-2214)

typedef eml21__ActivityTemplate _eml21__ActivityTemplate;
#endif

/* eml2_1ForGsoap.h:63194 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind (-2215)

typedef eml21__PropertyKind _eml21__PropertyKind;
#endif

/* eml2_1ForGsoap.h:63197 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary (-2216)

typedef eml21__PropertyKindDictionary _eml21__PropertyKindDictionary;
#endif

/* eml2_1ForGsoap.h:63200 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries (-2217)

typedef eml21__TimeSeries _eml21__TimeSeries;
#endif

/* eml2_1ForGsoap.h:63203 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord (-2218)

typedef eml21__DataAssuranceRecord _eml21__DataAssuranceRecord;
#endif

/* eml2_1ForGsoap.h:63206 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet (-2219)

typedef eml21__GraphicalInformationSet _eml21__GraphicalInformationSet;
#endif

/* eml2_1ForGsoap.h:63225 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__GeodeticCRS (-2220)

typedef gml__GeodeticCRSType _gml__GeodeticCRS;
#endif

/* eml2_1ForGsoap.h:63232 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__description
#define SOAP_TYPE_gsoap_eml2_1__gml__description (-2221)

typedef gml__StringOrRefType _gml__description;
#endif

/* eml2_1ForGsoap.h:63239 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_1__gml__descriptionReference (-2222)

typedef gml__ReferenceType _gml__descriptionReference;
#endif

/* eml2_1ForGsoap.h:63246 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__identifier
#define SOAP_TYPE_gsoap_eml2_1__gml__identifier (-2223)

typedef gml__CodeWithAuthorityType _gml__identifier;
#endif

/* eml2_1ForGsoap.h:63253 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__name
#define SOAP_TYPE_gsoap_eml2_1__gml__name (-2224)

typedef gml__CodeType _gml__name;
#endif

/* eml2_1ForGsoap.h:63256 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__remarks
#define SOAP_TYPE_gsoap_eml2_1__gml__remarks (-2225)

typedef std::string _gml__remarks;
#endif

/* eml2_1ForGsoap.h:63265 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__Definition
#define SOAP_TYPE_gsoap_eml2_1__gml__Definition (-2226)

typedef gml__DefinitionType _gml__Definition;
#endif

/* eml2_1ForGsoap.h:63272 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__scope
#define SOAP_TYPE_gsoap_eml2_1__gml__scope (-2227)

typedef std::string _gml__scope;
#endif

/* eml2_1ForGsoap.h:63279 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__ellipsoidalCS (-2228)

typedef gml__EllipsoidalCSPropertyType _gml__ellipsoidalCS;
#endif

/* eml2_1ForGsoap.h:63286 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__EllipsoidalCS (-2229)

typedef gml__EllipsoidalCSType _gml__EllipsoidalCS;
#endif

/* eml2_1ForGsoap.h:63293 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axis
#define SOAP_TYPE_gsoap_eml2_1__gml__axis (-2230)

typedef gml__CoordinateSystemAxisPropertyType _gml__axis;
#endif

/* eml2_1ForGsoap.h:63300 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_1__gml__CoordinateSystemAxis (-2231)

typedef gml__CoordinateSystemAxisType _gml__CoordinateSystemAxis;
#endif

/* eml2_1ForGsoap.h:63307 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_1__gml__axisAbbrev (-2232)

typedef gml__CodeType _gml__axisAbbrev;
#endif

/* eml2_1ForGsoap.h:63316 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_1__gml__axisDirection (-2233)

typedef gml__CodeWithAuthorityType _gml__axisDirection;
#endif

/* eml2_1ForGsoap.h:63323 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_1__gml__minimumValue (-2234)

typedef double _gml__minimumValue;
#endif

/* eml2_1ForGsoap.h:63330 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_1__gml__maximumValue (-2235)

typedef double _gml__maximumValue;
#endif

/* eml2_1ForGsoap.h:63337 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_1__gml__rangeMeaning (-2236)

typedef gml__CodeWithAuthorityType _gml__rangeMeaning;
#endif

/* eml2_1ForGsoap.h:63344 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_1__gml__cartesianCS (-2237)

typedef gml__CartesianCSPropertyType _gml__cartesianCS;
#endif

/* eml2_1ForGsoap.h:63351 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_1__gml__CartesianCS (-2238)

typedef gml__CartesianCSType _gml__CartesianCS;
#endif

/* eml2_1ForGsoap.h:63358 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__sphericalCS (-2239)

typedef gml__SphericalCSPropertyType _gml__sphericalCS;
#endif

/* eml2_1ForGsoap.h:63365 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__SphericalCS (-2240)

typedef gml__SphericalCSType _gml__SphericalCS;
#endif

/* eml2_1ForGsoap.h:63372 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__geodeticDatum (-2241)

typedef gml__GeodeticDatumPropertyType _gml__geodeticDatum;
#endif

/* eml2_1ForGsoap.h:63379 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__GeodeticDatum (-2242)

typedef gml__GeodeticDatumType _gml__GeodeticDatum;
#endif

/* eml2_1ForGsoap.h:63390 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_1__gml__anchorDefinition (-2243)

typedef gml__CodeType _gml__anchorDefinition;
#endif

/* eml2_1ForGsoap.h:63397 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_1__gml__realizationEpoch (-2244)

typedef xsd__date _gml__realizationEpoch;
#endif

/* eml2_1ForGsoap.h:63404 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_1__gml__primeMeridian (-2245)

typedef gml__PrimeMeridianPropertyType _gml__primeMeridian;
#endif

/* eml2_1ForGsoap.h:63411 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_1__gml__PrimeMeridian (-2246)

typedef gml__PrimeMeridianType _gml__PrimeMeridian;
#endif

/* eml2_1ForGsoap.h:63418 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_1__gml__greenwichLongitude (-2247)

typedef gml__AngleType _gml__greenwichLongitude;
#endif

/* eml2_1ForGsoap.h:63425 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_1__gml__ellipsoid (-2248)

typedef gml__EllipsoidPropertyType _gml__ellipsoid;
#endif

/* eml2_1ForGsoap.h:63432 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_1__gml__Ellipsoid (-2249)

typedef gml__EllipsoidType _gml__Ellipsoid;
#endif

/* eml2_1ForGsoap.h:63439 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_1__gml__semiMajorAxis (-2250)

typedef gml__MeasureType _gml__semiMajorAxis;
#endif

/* eml2_1ForGsoap.h:63446 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__ProjectedCRS (-2251)

typedef gml__ProjectedCRSType _gml__ProjectedCRS;
#endif

/* eml2_1ForGsoap.h:63453 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__conversion
#define SOAP_TYPE_gsoap_eml2_1__gml__conversion (-2252)

typedef gml__GeneralConversionPropertyType _gml__conversion;
#endif

/* eml2_1ForGsoap.h:63460 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_1__gml__operationVersion (-2253)

typedef std::string _gml__operationVersion;
#endif

/* eml2_1ForGsoap.h:63467 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__sourceCRS (-2254)

typedef gml__CRSPropertyType _gml__sourceCRS;
#endif

/* eml2_1ForGsoap.h:63474 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__targetCRS (-2255)

typedef gml__CRSPropertyType _gml__targetCRS;
#endif

/* eml2_1ForGsoap.h:63481 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__baseGeodeticCRS (-2256)

typedef gml__GeodeticCRSPropertyType _gml__baseGeodeticCRS;
#endif

/* eml2_1ForGsoap.h:63488 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalCRS (-2257)

typedef gml__VerticalCRSType _gml__VerticalCRS;
#endif

/* eml2_1ForGsoap.h:63495 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__verticalCS (-2258)

typedef gml__VerticalCSPropertyType _gml__verticalCS;
#endif

/* eml2_1ForGsoap.h:63502 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalCS (-2259)

typedef gml__VerticalCSType _gml__VerticalCS;
#endif

/* eml2_1ForGsoap.h:63509 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__verticalDatum (-2260)

typedef gml__VerticalDatumPropertyType _gml__verticalDatum;
#endif

/* eml2_1ForGsoap.h:63516 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalDatum (-2261)

typedef gml__VerticalDatumType _gml__VerticalDatum;
#endif

/* eml2_1ForGsoap.h:63531 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__id
#define SOAP_TYPE_gsoap_eml2_1__gml__id (-2262)

typedef xsd__ID _gml__id;
#endif

/* eml2_1ForGsoap.h:63550 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__href
#define SOAP_TYPE_gsoap_eml2_1__xlink__href (-2263)

typedef xsd__anyURI _xlink__href;
#endif

/* eml2_1ForGsoap.h:63553 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__role
#define SOAP_TYPE_gsoap_eml2_1__xlink__role (-2264)

typedef xsd__anyURI _xlink__role;
#endif

/* eml2_1ForGsoap.h:63556 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_1__xlink__arcrole (-2265)

typedef xsd__anyURI _xlink__arcrole;
#endif

/* eml2_1ForGsoap.h:63559 */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__title
#define SOAP_TYPE_gsoap_eml2_1__xlink__title (-2266)

typedef std::string _xlink__title;
#endif

/* eml2_1ForGsoap.h:63570 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREExtent (-2267)

typedef gmd__EX_USCOREExtent_USCOREType _gmd__EX_USCOREExtent;
#endif

/* eml2_1ForGsoap.h:63573 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCORETemporalExtent (-2268)

typedef gmd__EX_USCORETemporalExtent_USCOREType _gmd__EX_USCORETemporalExtent;
#endif

/* eml2_1ForGsoap.h:63576 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREVerticalExtent (-2269)

typedef gmd__EX_USCOREVerticalExtent_USCOREType _gmd__EX_USCOREVerticalExtent;
#endif

/* eml2_1ForGsoap.h:63579 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_1__gmd__MD_USCOREIdentifier (-2270)

typedef gmd__MD_USCOREIdentifier_USCOREType _gmd__MD_USCOREIdentifier;
#endif

/* eml2_1ForGsoap.h:63582 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORECitation (-2271)

typedef gmd__CI_USCORECitation_USCOREType _gmd__CI_USCORECitation;
#endif

/* eml2_1ForGsoap.h:63585 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDate (-2272)

typedef gmd__CI_USCOREDate_USCOREType _gmd__CI_USCOREDate;
#endif

/* eml2_1ForGsoap.h:63588 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDateTypeCode (-2273)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREDateTypeCode;
#endif

/* eml2_1ForGsoap.h:63591 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREResponsibleParty (-2274)

typedef gmd__CI_USCOREResponsibleParty_USCOREType _gmd__CI_USCOREResponsibleParty;
#endif

/* eml2_1ForGsoap.h:63594 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREContact (-2275)

typedef gmd__CI_USCOREContact_USCOREType _gmd__CI_USCOREContact;
#endif

/* eml2_1ForGsoap.h:63597 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORETelephone (-2276)

typedef gmd__CI_USCORETelephone_USCOREType _gmd__CI_USCORETelephone;
#endif

/* eml2_1ForGsoap.h:63600 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREAddress (-2277)

typedef gmd__CI_USCOREAddress_USCOREType _gmd__CI_USCOREAddress;
#endif

/* eml2_1ForGsoap.h:63603 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnlineResource (-2278)

typedef gmd__CI_USCOREOnlineResource_USCOREType _gmd__CI_USCOREOnlineResource;
#endif

/* eml2_1ForGsoap.h:63606 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__URL
#define SOAP_TYPE_gsoap_eml2_1__gmd__URL (-2279)

typedef xsd__anyURI _gmd__URL;
#endif

/* eml2_1ForGsoap.h:63609 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnLineFunctionCode (-2280)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREOnLineFunctionCode;
#endif

/* eml2_1ForGsoap.h:63612 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORERoleCode (-2281)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCORERoleCode;
#endif

/* eml2_1ForGsoap.h:63615 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREPresentationFormCode (-2282)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREPresentationFormCode;
#endif

/* eml2_1ForGsoap.h:63618 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORESeries (-2283)

typedef gmd__CI_USCORESeries_USCOREType _gmd__CI_USCORESeries;
#endif

/* eml2_1ForGsoap.h:63621 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__DQ_USCOREEvaluationMethodTypeCode (-2284)

typedef gco__CodeListValue_USCOREType _gmd__DQ_USCOREEvaluationMethodTypeCode;
#endif

/* eml2_1ForGsoap.h:63656 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_1__gco__CharacterString (-2285)

typedef std::string _gco__CharacterString;
#endif

/* eml2_1ForGsoap.h:63659 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_1__gco__Boolean (-2286)

typedef bool _gco__Boolean;
#endif

/* eml2_1ForGsoap.h:63662 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Real
#define SOAP_TYPE_gsoap_eml2_1__gco__Real (-2287)

typedef double _gco__Real;
#endif

/* eml2_1ForGsoap.h:63665 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Date
#define SOAP_TYPE_gsoap_eml2_1__gco__Date (-2288)

typedef gco__Date_USCOREType _gco__Date;
#endif

/* eml2_1ForGsoap.h:63668 */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-2289)

typedef xsd__dateTime _gco__DateTime;
#endif

/* eml2_1ForGsoap.h:63679 */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_1__gco__nilReason (-2290)

typedef gml__NilReasonType _gco__nilReason;
#endif

/* eml2_1ForGsoap.h:63706 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Attachment (-2291)

typedef witsml2__Attachment _witsml2__Attachment;
#endif

/* eml2_1ForGsoap.h:63709 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Wellbore (-2292)

typedef witsml2__Wellbore _witsml2__Wellbore;
#endif

/* eml2_1ForGsoap.h:63712 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Well
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Well (-2293)

typedef witsml2__Well _witsml2__Well;
#endif

/* eml2_1ForGsoap.h:63715 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_1__witsml2__BhaRun (-2294)

typedef witsml2__BhaRun _witsml2__BhaRun;
#endif

/* eml2_1ForGsoap.h:63718 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__FluidsReport (-2295)

typedef witsml2__FluidsReport _witsml2__FluidsReport;
#endif

/* eml2_1ForGsoap.h:63721 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DrillReport (-2296)

typedef witsml2__DrillReport _witsml2__DrillReport;
#endif

/* eml2_1ForGsoap.h:63724 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Tubular (-2297)

typedef witsml2__Tubular _witsml2__Tubular;
#endif

/* eml2_1ForGsoap.h:63727 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CementJobEvaluation (-2298)

typedef witsml2__CementJobEvaluation _witsml2__CementJobEvaluation;
#endif

/* eml2_1ForGsoap.h:63730 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CementJob (-2299)

typedef witsml2__CementJob _witsml2__CementJob;
#endif

/* eml2_1ForGsoap.h:63737 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREWellboreGeometrySection (-2300)

typedef witsml2__WellboreGeometrySection _witsml2__part_USCOREWellboreGeometrySection;
#endif

/* eml2_1ForGsoap.h:63740 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeometry (-2301)

typedef witsml2__WellboreGeometry _witsml2__WellboreGeometry;
#endif

/* eml2_1ForGsoap.h:63743 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ChannelSet (-2302)

typedef witsml2__ChannelSet _witsml2__ChannelSet;
#endif

/* eml2_1ForGsoap.h:63746 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Log
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Log (-2303)

typedef witsml2__Log _witsml2__Log;
#endif

/* eml2_1ForGsoap.h:63749 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Channel (-2304)

typedef witsml2__Channel _witsml2__Channel;
#endif

/* eml2_1ForGsoap.h:63752 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DepthRegImage (-2305)

typedef witsml2__DepthRegImage _witsml2__DepthRegImage;
#endif

/* eml2_1ForGsoap.h:63755 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellCMLedger (-2306)

typedef witsml2__WellCMLedger _witsml2__WellCMLedger;
#endif

/* eml2_1ForGsoap.h:63758 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DownholeComponent (-2307)

typedef witsml2__DownholeComponent _witsml2__DownholeComponent;
#endif

/* eml2_1ForGsoap.h:63761 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__OpsReport (-2308)

typedef witsml2__OpsReport _witsml2__OpsReport;
#endif

/* eml2_1ForGsoap.h:63764 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Trajectory (-2309)

typedef witsml2__Trajectory _witsml2__Trajectory;
#endif

/* eml2_1ForGsoap.h:63771 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCORETrajectoryStation (-2310)

typedef witsml2__TrajectoryStation _witsml2__part_USCORETrajectoryStation;
#endif

/* eml2_1ForGsoap.h:63774 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorModel (-2311)

typedef witsml2__ToolErrorModel _witsml2__ToolErrorModel;
#endif

/* eml2_1ForGsoap.h:63777 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_1__witsml2__RigUtilization (-2312)

typedef witsml2__RigUtilization _witsml2__RigUtilization;
#endif

/* eml2_1ForGsoap.h:63780 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Rig (-2313)

typedef witsml2__Rig _witsml2__Rig;
#endif

/* eml2_1ForGsoap.h:63783 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Risk (-2314)

typedef witsml2__Risk _witsml2__Risk;
#endif

/* eml2_1ForGsoap.h:63786 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimPerforationCluster (-2315)

typedef witsml2__StimPerforationCluster _witsml2__StimPerforationCluster;
#endif

/* eml2_1ForGsoap.h:63789 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimJob (-2316)

typedef witsml2__StimJob _witsml2__StimJob;
#endif

/* eml2_1ForGsoap.h:63792 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimJobStage (-2317)

typedef witsml2__StimJobStage _witsml2__StimJobStage;
#endif

/* eml2_1ForGsoap.h:63795 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_1__witsml2__SurveyProgram (-2318)

typedef witsml2__SurveyProgram _witsml2__SurveyProgram;
#endif

/* eml2_1ForGsoap.h:63798 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorTermSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorTermSet (-2319)

typedef witsml2__ToolErrorTermSet _witsml2__ToolErrorTermSet;
#endif

/* eml2_1ForGsoap.h:63801 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeology (-2320)

typedef witsml2__WellboreGeology _witsml2__WellboreGeology;
#endif

/* eml2_1ForGsoap.h:63804 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluation (-2321)

typedef witsml2__ShowEvaluation _witsml2__ShowEvaluation;
#endif

/* eml2_1ForGsoap.h:63807 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeology (-2322)

typedef witsml2__InterpretedGeology _witsml2__InterpretedGeology;
#endif

/* eml2_1ForGsoap.h:63810 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluationInterval (-2323)

typedef witsml2__ShowEvaluationInterval _witsml2__ShowEvaluationInterval;
#endif

/* eml2_1ForGsoap.h:63813 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeologyInterval (-2324)

typedef witsml2__CuttingsGeologyInterval _witsml2__CuttingsGeologyInterval;
#endif

/* eml2_1ForGsoap.h:63816 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeology (-2325)

typedef witsml2__CuttingsGeology _witsml2__CuttingsGeology;
#endif

/* eml2_1ForGsoap.h:63819 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeologyInterval (-2326)

typedef witsml2__InterpretedGeologyInterval _witsml2__InterpretedGeologyInterval;
#endif

/* eml2_1ForGsoap.h:63822 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__MudLogReport (-2327)

typedef witsml2__MudLogReport _witsml2__MudLogReport;
#endif

/* eml2_1ForGsoap.h:63829 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREMudLogReportInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREMudLogReportInterval (-2328)

typedef witsml2__MudlogReportInterval _witsml2__part_USCOREMudLogReportInterval;
#endif

/* eml2_1ForGsoap.h:63832 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarker (-2329)

typedef witsml2__WellboreMarker _witsml2__WellboreMarker;
#endif

/* eml2_1ForGsoap.h:63835 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarkerSet (-2330)

typedef witsml2__WellboreMarkerSet _witsml2__WellboreMarkerSet;
#endif

/* eml2_1ForGsoap.h:63838 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellCompletion (-2331)

typedef witsml2__WellCompletion _witsml2__WellCompletion;
#endif

/* eml2_1ForGsoap.h:63841 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreCompletion (-2332)

typedef witsml2__WellboreCompletion _witsml2__WellboreCompletion;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_gsoap_eml2_1_byte
#define SOAP_TYPE_gsoap_eml2_1_byte (-3)

#endif

/* witsml2__LevelIntegerCode has binding name 'witsml2__LevelIntegerCode' for type 'witsml2:LevelIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LevelIntegerCode (-1064)

#endif

/* witsml2__PumpActionIntegerCode has binding name 'witsml2__PumpActionIntegerCode' for type 'witsml2:PumpActionIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpActionIntegerCode (-1063)

#endif

/* witsml2__BeaufortScaleIntegerCode has binding name 'witsml2__BeaufortScaleIntegerCode' for type 'witsml2:BeaufortScaleIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BeaufortScaleIntegerCode (-1062)

#endif

/* short has binding name 'short' for type 'xsd:short' */
#ifndef SOAP_TYPE_gsoap_eml2_1_short
#define SOAP_TYPE_gsoap_eml2_1_short (-1061)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_1_int
#define SOAP_TYPE_gsoap_eml2_1_int (-1)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_1_LONG64
#define SOAP_TYPE_gsoap_eml2_1_LONG64 (-1426)

#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_gsoap_eml2_1_float
#define SOAP_TYPE_gsoap_eml2_1_float (-2035)

#endif

/* _gco__Real has binding name '_gco__Real' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Real
#define SOAP_TYPE_gsoap_eml2_1__gco__Real (-2287)

#endif

/* _gml__maximumValue has binding name '_gml__maximumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_1__gml__maximumValue (-2235)

#endif

/* _gml__minimumValue has binding name '_gml__minimumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_1__gml__minimumValue (-2234)

#endif

/* witsml2__NonNegativeFraction has binding name 'witsml2__NonNegativeFraction' for type 'witsml2:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NonNegativeFraction (-1065)

#endif

/* eml21__AbstractMeasure has binding name 'eml21__AbstractMeasure' for type 'eml21:AbstractMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure (-1048)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_1_double
#define SOAP_TYPE_gsoap_eml2_1_double (-1047)

#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_gsoap_eml2_1_unsignedByte
#define SOAP_TYPE_gsoap_eml2_1_unsignedByte (-10)

#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_unsignedInt
#define SOAP_TYPE_gsoap_eml2_1_unsignedInt (-9)

#endif

/* eml21__PositiveInteger has binding name 'eml21__PositiveInteger' for type 'eml21:PositiveInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger (-1052)

#endif

/* eml21__NonNegativeInteger has binding name 'eml21__NonNegativeInteger' for type 'eml21:NonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger (-1051)

#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_1_ULONG64
#define SOAP_TYPE_gsoap_eml2_1_ULONG64 (-1050)

#endif

/* _gco__Boolean has binding name '_gco__Boolean' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_1__gco__Boolean (-2286)

#endif

/* enum _gml__RelatedTimeType_relativePosition has binding name '_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_1__gml__RelatedTimeType_relativePosition (-1916)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_1_bool
#define SOAP_TYPE_gsoap_eml2_1_bool (-1431)

#endif

/* enum witsml2__PerforationStatus has binding name 'witsml2__PerforationStatus' for type 'witsml2:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatus (-1402)

#endif

/* enum witsml2__PhysicalStatus has binding name 'witsml2__PhysicalStatus' for type 'witsml2:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PhysicalStatus (-1401)

#endif

/* enum witsml2__CompletionStatus has binding name 'witsml2__CompletionStatus' for type 'witsml2:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatus (-1400)

#endif

/* enum witsml2__ForceParameterKind has binding name 'witsml2__ForceParameterKind' for type 'witsml2:ForceParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ForceParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ForceParameterKind (-1399)

#endif

/* enum witsml2__ConcentrationParameterKind has binding name 'witsml2__ConcentrationParameterKind' for type 'witsml2:ConcentrationParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConcentrationParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConcentrationParameterKind (-1398)

#endif

/* enum witsml2__PressureGradientParameterKind has binding name 'witsml2__PressureGradientParameterKind' for type 'witsml2:PressureGradientParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureGradientParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureGradientParameterKind (-1397)

#endif

/* enum witsml2__MudLogStringParameterKind has binding name 'witsml2__MudLogStringParameterKind' for type 'witsml2:MudLogStringParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameterKind (-1396)

#endif

/* enum witsml2__PressureParameterKind has binding name 'witsml2__PressureParameterKind' for type 'witsml2:PressureParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureParameterKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureParameterKind (-1395)

#endif

/* enum witsml2__ShowFluid has binding name 'witsml2__ShowFluid' for type 'witsml2:ShowFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluid (-1394)

#endif

/* enum witsml2__ShowRating has binding name 'witsml2__ShowRating' for type 'witsml2:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowRating (-1393)

#endif

/* enum witsml2__ShowLevel has binding name 'witsml2__ShowLevel' for type 'witsml2:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowLevel (-1392)

#endif

/* enum witsml2__ShowSpeed has binding name 'witsml2__ShowSpeed' for type 'witsml2:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowSpeed (-1391)

#endif

/* enum witsml2__ShowFluorescence has binding name 'witsml2__ShowFluorescence' for type 'witsml2:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowFluorescence (-1390)

#endif

/* enum witsml2__ErrorTermSource has binding name 'witsml2__ErrorTermSource' for type 'witsml2:ErrorTermSource' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorTermSource
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorTermSource (-1389)

#endif

/* enum witsml2__StimFlowPathType has binding name 'witsml2__StimFlowPathType' for type 'witsml2:StimFlowPathType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPathType (-1388)

#endif

/* enum witsml2__StimFluidKind has binding name 'witsml2__StimFluidKind' for type 'witsml2:StimFluidKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidKind (-1387)

#endif

/* enum witsml2__StimJobDiversionMethod has binding name 'witsml2__StimJobDiversionMethod' for type 'witsml2:StimJobDiversionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversionMethod (-1386)

#endif

/* enum witsml2__StimFluidSubtype has binding name 'witsml2__StimFluidSubtype' for type 'witsml2:StimFluidSubtype' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluidSubtype (-1385)

#endif

/* enum witsml2__PIDXCommodityCode has binding name 'witsml2__PIDXCommodityCode' for type 'witsml2:PIDXCommodityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PIDXCommodityCode (-1384)

#endif

/* enum witsml2__StimFetTestAnalysisMethod has binding name 'witsml2__StimFetTestAnalysisMethod' for type 'witsml2:StimFetTestAnalysisMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTestAnalysisMethod (-1383)

#endif

/* enum witsml2__ProppantAgentKind has binding name 'witsml2__ProppantAgentKind' for type 'witsml2:ProppantAgentKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ProppantAgentKind (-1382)

#endif

/* enum witsml2__StimAdditiveKind has binding name 'witsml2__StimAdditiveKind' for type 'witsml2:StimAdditiveKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditiveKind (-1381)

#endif

/* enum witsml2__StimMaterialKind has binding name 'witsml2__StimMaterialKind' for type 'witsml2:StimMaterialKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialKind (-1380)

#endif

/* enum witsml2__RiskAffectedPersonnel has binding name 'witsml2__RiskAffectedPersonnel' for type 'witsml2:RiskAffectedPersonnel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskAffectedPersonnel (-1379)

#endif

/* enum witsml2__RiskSubCategory has binding name 'witsml2__RiskSubCategory' for type 'witsml2:RiskSubCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskSubCategory (-1378)

#endif

/* enum witsml2__RiskCategory has binding name 'witsml2__RiskCategory' for type 'witsml2:RiskCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskCategory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskCategory (-1377)

#endif

/* enum witsml2__RiskType has binding name 'witsml2__RiskType' for type 'witsml2:RiskType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RiskType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RiskType (-1376)

#endif

/* enum witsml2__DriveType has binding name 'witsml2__DriveType' for type 'witsml2:DriveType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DriveType (-1375)

#endif

/* enum witsml2__DrawWorksType has binding name 'witsml2__DrawWorksType' for type 'witsml2:DrawWorksType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrawWorksType (-1374)

#endif

/* enum witsml2__DerrickType has binding name 'witsml2__DerrickType' for type 'witsml2:DerrickType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DerrickType (-1373)

#endif

/* enum witsml2__SurfEquipType has binding name 'witsml2__SurfEquipType' for type 'witsml2:SurfEquipType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurfEquipType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurfEquipType (-1372)

#endif

/* enum witsml2__PumpType has binding name 'witsml2__PumpType' for type 'witsml2:PumpType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpType (-1371)

#endif

/* enum witsml2__PitType has binding name 'witsml2__PitType' for type 'witsml2:PitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PitType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PitType (-1370)

#endif

/* enum witsml2__BopType has binding name 'witsml2__BopType' for type 'witsml2:BopType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BopType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BopType (-1369)

#endif

/* enum witsml2__RigType has binding name 'witsml2__RigType' for type 'witsml2:RigType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigType (-1368)

#endif

/* enum witsml2__AuthorizationStatus has binding name 'witsml2__AuthorizationStatus' for type 'witsml2:AuthorizationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AuthorizationStatus (-1367)

#endif

/* enum witsml2__ErrorPropagationMode has binding name 'witsml2__ErrorPropagationMode' for type 'witsml2:ErrorPropagationMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorPropagationMode (-1366)

#endif

/* enum witsml2__ErrorModelMisalignmentMode has binding name 'witsml2__ErrorModelMisalignmentMode' for type 'witsml2:ErrorModelMisalignmentMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorModelMisalignmentMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ErrorModelMisalignmentMode (-1365)

#endif

/* enum witsml2__SurveyToolOperatingMode has binding name 'witsml2__SurveyToolOperatingMode' for type 'witsml2:SurveyToolOperatingMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyToolOperatingMode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyToolOperatingMode (-1364)

#endif

/* enum witsml2__TrajStationStatus has binding name 'witsml2__TrajStationStatus' for type 'witsml2:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationStatus (-1363)

#endif

/* enum witsml2__TrajStnCalcAlgorithm has binding name 'witsml2__TrajStnCalcAlgorithm' for type 'witsml2:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStnCalcAlgorithm (-1362)

#endif

/* enum witsml2__TypeSurveyTool has binding name 'witsml2__TypeSurveyTool' for type 'witsml2:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TypeSurveyTool (-1361)

#endif

/* enum witsml2__TrajStationType has binding name 'witsml2__TrajStationType' for type 'witsml2:TrajStationType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajStationType (-1360)

#endif

/* enum witsml2__AziRef has binding name 'witsml2__AziRef' for type 'witsml2:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AziRef (-1359)

#endif

/* enum witsml2__PumpOpType has binding name 'witsml2__PumpOpType' for type 'witsml2:PumpOpType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOpType (-1358)

#endif

/* enum witsml2__ScrType has binding name 'witsml2__ScrType' for type 'witsml2:ScrType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ScrType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ScrType (-1357)

#endif

/* enum witsml2__SupportCraftType has binding name 'witsml2__SupportCraftType' for type 'witsml2:SupportCraftType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraftType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraftType (-1356)

#endif

/* enum witsml2__PerforationToolType has binding name 'witsml2__PerforationToolType' for type 'witsml2:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationToolType (-1355)

#endif

/* enum witsml2__GeologyType has binding name 'witsml2__GeologyType' for type 'witsml2:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyType (-1354)

#endif

/* enum witsml2__SubStringType has binding name 'witsml2__SubStringType' for type 'witsml2:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SubStringType (-1353)

#endif

/* enum witsml2__DownholeStringType has binding name 'witsml2__DownholeStringType' for type 'witsml2:DownholeStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringType (-1352)

#endif

/* enum witsml2__Coating has binding name 'witsml2__Coating' for type 'witsml2:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Coating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Coating (-1351)

#endif

/* enum witsml2__BoreholeType has binding name 'witsml2__BoreholeType' for type 'witsml2:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeType (-1350)

#endif

/* enum witsml2__GradeType has binding name 'witsml2__GradeType' for type 'witsml2:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GradeType (-1349)

#endif

/* enum witsml2__EquipmentType has binding name 'witsml2__EquipmentType' for type 'witsml2:EquipmentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentType (-1348)

#endif

/* enum witsml2__ConnectionFormType has binding name 'witsml2__ConnectionFormType' for type 'witsml2:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionFormType (-1347)

#endif

/* enum witsml2__OtherConnectionTypes has binding name 'witsml2__OtherConnectionTypes' for type 'witsml2:OtherConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionTypes (-1346)

#endif

/* enum witsml2__RodConnectionTypes has binding name 'witsml2__RodConnectionTypes' for type 'witsml2:RodConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionTypes (-1345)

#endif

/* enum witsml2__TubingConnectionTypes has binding name 'witsml2__TubingConnectionTypes' for type 'witsml2:TubingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionTypes (-1344)

#endif

/* enum witsml2__CasingConnectionTypes has binding name 'witsml2__CasingConnectionTypes' for type 'witsml2:CasingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionTypes (-1343)

#endif

/* enum witsml2__EventClassType has binding name 'witsml2__EventClassType' for type 'witsml2:EventClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventClassType (-1342)

#endif

/* enum witsml2__PerfConveyanceMethod has binding name 'witsml2__PerfConveyanceMethod' for type 'witsml2:PerfConveyanceMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfConveyanceMethod (-1341)

#endif

/* enum witsml2__LogIndexType has binding name 'witsml2__LogIndexType' for type 'witsml2:LogIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogIndexType (-1340)

#endif

/* enum witsml2__ScaleType has binding name 'witsml2__ScaleType' for type 'witsml2:ScaleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ScaleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ScaleType (-1339)

#endif

/* enum witsml2__LineStyle has binding name 'witsml2__LineStyle' for type 'witsml2:LineStyle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LineStyle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LineStyle (-1338)

#endif

/* enum witsml2__LogTrackType has binding name 'witsml2__LogTrackType' for type 'witsml2:LogTrackType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogTrackType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogTrackType (-1337)

#endif

/* enum witsml2__LogRectangleType has binding name 'witsml2__LogRectangleType' for type 'witsml2:LogRectangleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogRectangleType (-1336)

#endif

/* enum witsml2__MimeType has binding name 'witsml2__MimeType' for type 'witsml2:MimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MimeType (-1335)

#endif

/* enum witsml2__MessageDigestType has binding name 'witsml2__MessageDigestType' for type 'witsml2:MessageDigestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MessageDigestType (-1334)

#endif

/* enum witsml2__LogSectionType has binding name 'witsml2__LogSectionType' for type 'witsml2:LogSectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogSectionType (-1333)

#endif

/* enum witsml2__FileNameType has binding name 'witsml2__FileNameType' for type 'witsml2:FileNameType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FileNameType (-1332)

#endif

/* enum witsml2__CalibrationPointRole has binding name 'witsml2__CalibrationPointRole' for type 'witsml2:CalibrationPointRole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CalibrationPointRole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CalibrationPointRole (-1331)

#endif

/* enum witsml2__BackupScaleType has binding name 'witsml2__BackupScaleType' for type 'witsml2:BackupScaleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BackupScaleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BackupScaleType (-1330)

#endif

/* enum witsml2__ChannelDerivation has binding name 'witsml2__ChannelDerivation' for type 'witsml2:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelDerivation (-1329)

#endif

/* enum witsml2__ChannelStatus has binding name 'witsml2__ChannelStatus' for type 'witsml2:ChannelStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelStatus (-1328)

#endif

/* enum witsml2__EtpDataType has binding name 'witsml2__EtpDataType' for type 'witsml2:EtpDataType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EtpDataType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EtpDataType (-1327)

#endif

/* enum witsml2__ChannelState has binding name 'witsml2__ChannelState' for type 'witsml2:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelState (-1326)

#endif

/* enum witsml2__ChannelIndexType has binding name 'witsml2__ChannelIndexType' for type 'witsml2:ChannelIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndexType (-1325)

#endif

/* enum witsml2__LoggingMethod has binding name 'witsml2__LoggingMethod' for type 'witsml2:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LoggingMethod (-1324)

#endif

/* enum witsml2__IndexDirection has binding name 'witsml2__IndexDirection' for type 'witsml2:IndexDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IndexDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IndexDirection (-1323)

#endif

/* enum witsml2__HoleCasingType has binding name 'witsml2__HoleCasingType' for type 'witsml2:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleCasingType (-1322)

#endif

/* enum witsml2__CementJobType has binding name 'witsml2__CementJobType' for type 'witsml2:CementJobType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobType (-1321)

#endif

/* enum witsml2__WellboreFluidLocation has binding name 'witsml2__WellboreFluidLocation' for type 'witsml2:WellboreFluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreFluidLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreFluidLocation (-1320)

#endif

/* enum witsml2__IadcIntegerCode has binding name 'witsml2__IadcIntegerCode' for type 'witsml2:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IadcIntegerCode (-1319)

#endif

/* enum witsml2__IadcBearingWearCode has binding name 'witsml2__IadcBearingWearCode' for type 'witsml2:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IadcBearingWearCode (-1318)

#endif

/* enum witsml2__TubularComponentType has binding name 'witsml2__TubularComponentType' for type 'witsml2:TubularComponentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponentType (-1317)

#endif

/* enum witsml2__DeflectionMethod has binding name 'witsml2__DeflectionMethod' for type 'witsml2:DeflectionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DeflectionMethod (-1316)

#endif

/* enum witsml2__HoleOpenerType has binding name 'witsml2__HoleOpenerType' for type 'witsml2:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpenerType (-1315)

#endif

/* enum witsml2__BladeType has binding name 'witsml2__BladeType' for type 'witsml2:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BladeType (-1314)

#endif

/* enum witsml2__BladeShapeType has binding name 'witsml2__BladeShapeType' for type 'witsml2:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BladeShapeType (-1313)

#endif

/* enum witsml2__BearingType has binding name 'witsml2__BearingType' for type 'witsml2:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BearingType (-1312)

#endif

/* enum witsml2__MeasurementType has binding name 'witsml2__MeasurementType' for type 'witsml2:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasurementType (-1311)

#endif

/* enum witsml2__JarAction has binding name 'witsml2__JarAction' for type 'witsml2:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JarAction (-1310)

#endif

/* enum witsml2__JarType has binding name 'witsml2__JarType' for type 'witsml2:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JarType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JarType (-1309)

#endif

/* enum witsml2__ConnectionPosition has binding name 'witsml2__ConnectionPosition' for type 'witsml2:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ConnectionPosition (-1308)

#endif

/* enum witsml2__NozzleType has binding name 'witsml2__NozzleType' for type 'witsml2:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NozzleType (-1307)

#endif

/* enum witsml2__BitReasonPulled has binding name 'witsml2__BitReasonPulled' for type 'witsml2:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitReasonPulled (-1306)

#endif

/* enum witsml2__BitDullCode has binding name 'witsml2__BitDullCode' for type 'witsml2:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitDullCode (-1305)

#endif

/* enum witsml2__BitType has binding name 'witsml2__BitType' for type 'witsml2:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitType (-1304)

#endif

/* enum witsml2__MaterialType has binding name 'witsml2__MaterialType' for type 'witsml2:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MaterialType (-1303)

#endif

/* enum witsml2__BoxPinConfig has binding name 'witsml2__BoxPinConfig' for type 'witsml2:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoxPinConfig (-1302)

#endif

/* enum witsml2__TubularAssembly has binding name 'witsml2__TubularAssembly' for type 'witsml2:TubularAssembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularAssembly (-1301)

#endif

/* enum witsml2__WellKillingProcedureType has binding name 'witsml2__WellKillingProcedureType' for type 'witsml2:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellKillingProcedureType (-1300)

#endif

/* enum witsml2__WellControlIncidentType has binding name 'witsml2__WellControlIncidentType' for type 'witsml2:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellControlIncidentType (-1299)

#endif

/* enum witsml2__WellTestType has binding name 'witsml2__WellTestType' for type 'witsml2:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellTestType (-1298)

#endif

/* enum witsml2__InnerBarrelType has binding name 'witsml2__InnerBarrelType' for type 'witsml2:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InnerBarrelType (-1297)

#endif

/* enum witsml2__ItemState has binding name 'witsml2__ItemState' for type 'witsml2:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemState (-1296)

#endif

/* enum witsml2__StateDetailActivity has binding name 'witsml2__StateDetailActivity' for type 'witsml2:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StateDetailActivity (-1295)

#endif

/* enum witsml2__DrillActivityClassType has binding name 'witsml2__DrillActivityClassType' for type 'witsml2:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityClassType (-1294)

#endif

/* enum witsml2__DrillActivityCode has binding name 'witsml2__DrillActivityCode' for type 'witsml2:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivityCode (-1293)

#endif

/* enum witsml2__ReadingKind has binding name 'witsml2__ReadingKind' for type 'witsml2:ReadingKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReadingKind
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReadingKind (-1292)

#endif

/* enum witsml2__PresTestType has binding name 'witsml2__PresTestType' for type 'witsml2:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PresTestType (-1291)

#endif

/* enum witsml2__OpsReportVersion has binding name 'witsml2__OpsReportVersion' for type 'witsml2:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReportVersion (-1290)

#endif

/* enum witsml2__GasPeakType has binding name 'witsml2__GasPeakType' for type 'witsml2:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeakType (-1289)

#endif

/* enum witsml2__MudClass has binding name 'witsml2__MudClass' for type 'witsml2:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudClass (-1288)

#endif

/* enum witsml2__MudSubClass has binding name 'witsml2__MudSubClass' for type 'witsml2:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudSubClass (-1287)

#endif

/* enum witsml2__BhaStatus has binding name 'witsml2__BhaStatus' for type 'witsml2:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BhaStatus (-1286)

#endif

/* enum witsml2__ElevCodeEnum has binding name 'witsml2__ElevCodeEnum' for type 'witsml2:ElevCodeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ElevCodeEnum (-1285)

#endif

/* enum witsml2__WellDirection has binding name 'witsml2__WellDirection' for type 'witsml2:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellDirection (-1284)

#endif

/* enum witsml2__WellFluid has binding name 'witsml2__WellFluid' for type 'witsml2:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellFluid (-1283)

#endif

/* enum witsml2__WellPurpose has binding name 'witsml2__WellPurpose' for type 'witsml2:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellPurpose (-1282)

#endif

/* enum witsml2__NorthOrSouth has binding name 'witsml2__NorthOrSouth' for type 'witsml2:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NorthOrSouth (-1281)

#endif

/* enum witsml2__EastOrWest has binding name 'witsml2__EastOrWest' for type 'witsml2:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EastOrWest (-1280)

#endif

/* enum witsml2__PrincipalMeridian has binding name 'witsml2__PrincipalMeridian' for type 'witsml2:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PrincipalMeridian (-1279)

#endif

/* enum witsml2__WellboreShape has binding name 'witsml2__WellboreShape' for type 'witsml2:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreShape (-1278)

#endif

/* enum witsml2__WellboreType has binding name 'witsml2__WellboreType' for type 'witsml2:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreType (-1277)

#endif

/* enum witsml2__NameTagLocation has binding name 'witsml2__NameTagLocation' for type 'witsml2:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagLocation (-1276)

#endif

/* enum witsml2__NameTagTechnology has binding name 'witsml2__NameTagTechnology' for type 'witsml2:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagTechnology (-1275)

#endif

/* enum witsml2__NameTagNumberingScheme has binding name 'witsml2__NameTagNumberingScheme' for type 'witsml2:NameTagNumberingScheme' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTagNumberingScheme (-1274)

#endif

/* enum eml21__ReferencePressureKind has binding name 'eml21__ReferencePressureKind' for type 'eml21:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind (-1273)

#endif

/* enum eml21__WellStatus has binding name 'eml21__WellStatus' for type 'eml21:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus (-1272)

#endif

/* enum eml21__WellboreDatumReference has binding name 'eml21__WellboreDatumReference' for type 'eml21:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference (-1271)

#endif

/* enum eml21__ReferenceCondition has binding name 'eml21__ReferenceCondition' for type 'eml21:ReferenceCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition (-1270)

#endif

/* enum eml21__QuantityClassKind has binding name 'eml21__QuantityClassKind' for type 'eml21:QuantityClassKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind (-1269)

#endif

/* enum eml21__MeasureClass has binding name 'eml21__MeasureClass' for type 'eml21:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass (-1268)

#endif

/* enum eml21__MatrixCementKind has binding name 'eml21__MatrixCementKind' for type 'eml21:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind (-1267)

#endif

/* enum eml21__LithostratigraphicRank has binding name 'eml21__LithostratigraphicRank' for type 'eml21:LithostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank (-1266)

#endif

/* enum eml21__LithologyQualifierKind has binding name 'eml21__LithologyQualifierKind' for type 'eml21:LithologyQualifierKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind (-1265)

#endif

/* enum eml21__LithologyKind has binding name 'eml21__LithologyKind' for type 'eml21:LithologyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind (-1264)

#endif

/* enum eml21__GeochronologicalRank has binding name 'eml21__GeochronologicalRank' for type 'eml21:GeochronologicalRank' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank (-1263)

#endif

/* enum eml21__ExistenceKind has binding name 'eml21__ExistenceKind' for type 'eml21:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind (-1262)

#endif

/* enum eml21__VolumeUom has binding name 'eml21__VolumeUom' for type 'eml21:VolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom (-1257)

#endif

/* enum eml21__VolumetricThermalExpansionUom has binding name 'eml21__VolumetricThermalExpansionUom' for type 'eml21:VolumetricThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom (-1256)

#endif

/* enum eml21__VolumetricHeatTransferCoefficientUom has binding name 'eml21__VolumetricHeatTransferCoefficientUom' for type 'eml21:VolumetricHeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom (-1255)

#endif

/* enum eml21__VolumePerVolumeUom has binding name 'eml21__VolumePerVolumeUom' for type 'eml21:VolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom (-1254)

#endif

/* enum eml21__VolumePerTimeUom has binding name 'eml21__VolumePerTimeUom' for type 'eml21:VolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom (-1253)

#endif

/* enum eml21__VolumePerTimePerVolumeUom has binding name 'eml21__VolumePerTimePerVolumeUom' for type 'eml21:VolumePerTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom (-1252)

#endif

/* enum eml21__VolumePerTimePerTimeUom has binding name 'eml21__VolumePerTimePerTimeUom' for type 'eml21:VolumePerTimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom (-1251)

#endif

/* enum eml21__VolumePerTimePerPressureUom has binding name 'eml21__VolumePerTimePerPressureUom' for type 'eml21:VolumePerTimePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom (-1250)

#endif

/* enum eml21__VolumePerTimePerPressureLengthUom has binding name 'eml21__VolumePerTimePerPressureLengthUom' for type 'eml21:VolumePerTimePerPressureLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom (-1249)

#endif

/* enum eml21__VolumePerTimePerLengthUom has binding name 'eml21__VolumePerTimePerLengthUom' for type 'eml21:VolumePerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom (-1248)

#endif

/* enum eml21__VolumePerTimePerAreaUom has binding name 'eml21__VolumePerTimePerAreaUom' for type 'eml21:VolumePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom (-1247)

#endif

/* enum eml21__VolumePerTimeLengthUom has binding name 'eml21__VolumePerTimeLengthUom' for type 'eml21:VolumePerTimeLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom (-1246)

#endif

/* enum eml21__VolumePerRotationUom has binding name 'eml21__VolumePerRotationUom' for type 'eml21:VolumePerRotationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom (-1245)

#endif

/* enum eml21__VolumePerPressureUom has binding name 'eml21__VolumePerPressureUom' for type 'eml21:VolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom (-1244)

#endif

/* enum eml21__VolumePerMassUom has binding name 'eml21__VolumePerMassUom' for type 'eml21:VolumePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom (-1243)

#endif

/* enum eml21__VolumePerLengthUom has binding name 'eml21__VolumePerLengthUom' for type 'eml21:VolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom (-1242)

#endif

/* enum eml21__VolumePerAreaUom has binding name 'eml21__VolumePerAreaUom' for type 'eml21:VolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom (-1241)

#endif

/* enum eml21__VolumeFlowRatePerVolumeFlowRateUom has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateUom' for type 'eml21:VolumeFlowRatePerVolumeFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom (-1240)

#endif

/* enum eml21__VerticalCoordinateUom has binding name 'eml21__VerticalCoordinateUom' for type 'eml21:VerticalCoordinateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom (-1239)

#endif

/* enum eml21__TimeUom has binding name 'eml21__TimeUom' for type 'eml21:TimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom (-1238)

#endif

/* enum eml21__TimePerVolumeUom has binding name 'eml21__TimePerVolumeUom' for type 'eml21:TimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom (-1237)

#endif

/* enum eml21__TimePerTimeUom has binding name 'eml21__TimePerTimeUom' for type 'eml21:TimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom (-1236)

#endif

/* enum eml21__TimePerMassUom has binding name 'eml21__TimePerMassUom' for type 'eml21:TimePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom (-1235)

#endif

/* enum eml21__TimePerLengthUom has binding name 'eml21__TimePerLengthUom' for type 'eml21:TimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom (-1234)

#endif

/* enum eml21__ThermodynamicTemperatureUom has binding name 'eml21__ThermodynamicTemperatureUom' for type 'eml21:ThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom (-1233)

#endif

/* enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1232)

#endif

/* enum eml21__ThermalResistanceUom has binding name 'eml21__ThermalResistanceUom' for type 'eml21:ThermalResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom (-1231)

#endif

/* enum eml21__ThermalInsulanceUom has binding name 'eml21__ThermalInsulanceUom' for type 'eml21:ThermalInsulanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom (-1230)

#endif

/* enum eml21__ThermalDiffusivityUom has binding name 'eml21__ThermalDiffusivityUom' for type 'eml21:ThermalDiffusivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom (-1229)

#endif

/* enum eml21__ThermalConductivityUom has binding name 'eml21__ThermalConductivityUom' for type 'eml21:ThermalConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom (-1228)

#endif

/* enum eml21__ThermalConductanceUom has binding name 'eml21__ThermalConductanceUom' for type 'eml21:ThermalConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom (-1227)

#endif

/* enum eml21__TemperatureIntervalUom has binding name 'eml21__TemperatureIntervalUom' for type 'eml21:TemperatureIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom (-1226)

#endif

/* enum eml21__TemperatureIntervalPerTimeUom has binding name 'eml21__TemperatureIntervalPerTimeUom' for type 'eml21:TemperatureIntervalPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom (-1225)

#endif

/* enum eml21__TemperatureIntervalPerPressureUom has binding name 'eml21__TemperatureIntervalPerPressureUom' for type 'eml21:TemperatureIntervalPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom (-1224)

#endif

/* enum eml21__TemperatureIntervalPerLengthUom has binding name 'eml21__TemperatureIntervalPerLengthUom' for type 'eml21:TemperatureIntervalPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom (-1223)

#endif

/* enum eml21__SpecificHeatCapacityUom has binding name 'eml21__SpecificHeatCapacityUom' for type 'eml21:SpecificHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom (-1222)

#endif

/* enum eml21__SolidAngleUom has binding name 'eml21__SolidAngleUom' for type 'eml21:SolidAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom (-1221)

#endif

/* enum eml21__SignalingEventPerTimeUom has binding name 'eml21__SignalingEventPerTimeUom' for type 'eml21:SignalingEventPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom (-1220)

#endif

/* enum eml21__SecondMomentOfAreaUom has binding name 'eml21__SecondMomentOfAreaUom' for type 'eml21:SecondMomentOfAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom (-1219)

#endif

/* enum eml21__ReluctanceUom has binding name 'eml21__ReluctanceUom' for type 'eml21:ReluctanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom (-1218)

#endif

/* enum eml21__ReciprocalVolumeUom has binding name 'eml21__ReciprocalVolumeUom' for type 'eml21:ReciprocalVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom (-1217)

#endif

/* enum eml21__ReciprocalTimeUom has binding name 'eml21__ReciprocalTimeUom' for type 'eml21:ReciprocalTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom (-1216)

#endif

/* enum eml21__ReciprocalPressureUom has binding name 'eml21__ReciprocalPressureUom' for type 'eml21:ReciprocalPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom (-1215)

#endif

/* enum eml21__ReciprocalMassUom has binding name 'eml21__ReciprocalMassUom' for type 'eml21:ReciprocalMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom (-1214)

#endif

/* enum eml21__ReciprocalMassTimeUom has binding name 'eml21__ReciprocalMassTimeUom' for type 'eml21:ReciprocalMassTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom (-1213)

#endif

/* enum eml21__ReciprocalLengthUom has binding name 'eml21__ReciprocalLengthUom' for type 'eml21:ReciprocalLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom (-1212)

#endif

/* enum eml21__ReciprocalForceUom has binding name 'eml21__ReciprocalForceUom' for type 'eml21:ReciprocalForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom (-1211)

#endif

/* enum eml21__ReciprocalElectricPotentialDifferenceUom has binding name 'eml21__ReciprocalElectricPotentialDifferenceUom' for type 'eml21:ReciprocalElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom (-1210)

#endif

/* enum eml21__ReciprocalAreaUom has binding name 'eml21__ReciprocalAreaUom' for type 'eml21:ReciprocalAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom (-1209)

#endif

/* enum eml21__RadiantIntensityUom has binding name 'eml21__RadiantIntensityUom' for type 'eml21:RadiantIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom (-1208)

#endif

/* enum eml21__RadianceUom has binding name 'eml21__RadianceUom' for type 'eml21:RadianceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom (-1207)

#endif

/* enum eml21__QuantityOfLightUom has binding name 'eml21__QuantityOfLightUom' for type 'eml21:QuantityOfLightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom (-1206)

#endif

/* enum eml21__PressureUom has binding name 'eml21__PressureUom' for type 'eml21:PressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom (-1205)

#endif

/* enum eml21__PressureTimePerVolumeUom has binding name 'eml21__PressureTimePerVolumeUom' for type 'eml21:PressureTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom (-1204)

#endif

/* enum eml21__PressureSquaredUom has binding name 'eml21__PressureSquaredUom' for type 'eml21:PressureSquaredUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom (-1203)

#endif

/* enum eml21__PressureSquaredPerForceTimePerAreaUom has binding name 'eml21__PressureSquaredPerForceTimePerAreaUom' for type 'eml21:PressureSquaredPerForceTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom (-1202)

#endif

/* enum eml21__PressurePerVolumeUom has binding name 'eml21__PressurePerVolumeUom' for type 'eml21:PressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom (-1201)

#endif

/* enum eml21__PressurePerTimeUom has binding name 'eml21__PressurePerTimeUom' for type 'eml21:PressurePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom (-1200)

#endif

/* enum eml21__PressurePerPressureUom has binding name 'eml21__PressurePerPressureUom' for type 'eml21:PressurePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom (-1199)

#endif

/* enum eml21__PowerUom has binding name 'eml21__PowerUom' for type 'eml21:PowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom (-1198)

#endif

/* enum eml21__PowerPerVolumeUom has binding name 'eml21__PowerPerVolumeUom' for type 'eml21:PowerPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom (-1197)

#endif

/* enum eml21__PowerPerPowerUom has binding name 'eml21__PowerPerPowerUom' for type 'eml21:PowerPerPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom (-1196)

#endif

/* enum eml21__PowerPerAreaUom has binding name 'eml21__PowerPerAreaUom' for type 'eml21:PowerPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom (-1195)

#endif

/* enum eml21__PotentialDifferencePerPowerDropUom has binding name 'eml21__PotentialDifferencePerPowerDropUom' for type 'eml21:PotentialDifferencePerPowerDropUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom (-1194)

#endif

/* enum eml21__PlaneAngleUom has binding name 'eml21__PlaneAngleUom' for type 'eml21:PlaneAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom (-1193)

#endif

/* enum eml21__PermittivityUom has binding name 'eml21__PermittivityUom' for type 'eml21:PermittivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom (-1192)

#endif

/* enum eml21__PermeabilityRockUom has binding name 'eml21__PermeabilityRockUom' for type 'eml21:PermeabilityRockUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom (-1191)

#endif

/* enum eml21__PermeabilityLengthUom has binding name 'eml21__PermeabilityLengthUom' for type 'eml21:PermeabilityLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom (-1190)

#endif

/* enum eml21__NormalizedPowerUom has binding name 'eml21__NormalizedPowerUom' for type 'eml21:NormalizedPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom (-1189)

#endif

/* enum eml21__MomentumUom has binding name 'eml21__MomentumUom' for type 'eml21:MomentumUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom (-1188)

#endif

/* enum eml21__MomentOfInertiaUom has binding name 'eml21__MomentOfInertiaUom' for type 'eml21:MomentOfInertiaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom (-1187)

#endif

/* enum eml21__MomentOfForceUom has binding name 'eml21__MomentOfForceUom' for type 'eml21:MomentOfForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom (-1186)

#endif

/* enum eml21__MolecularWeightUom has binding name 'eml21__MolecularWeightUom' for type 'eml21:MolecularWeightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom (-1185)

#endif

/* enum eml21__MolarVolumeUom has binding name 'eml21__MolarVolumeUom' for type 'eml21:MolarVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom (-1184)

#endif

/* enum eml21__MolarHeatCapacityUom has binding name 'eml21__MolarHeatCapacityUom' for type 'eml21:MolarHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom (-1183)

#endif

/* enum eml21__MolarEnergyUom has binding name 'eml21__MolarEnergyUom' for type 'eml21:MolarEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom (-1182)

#endif

/* enum eml21__MobilityUom has binding name 'eml21__MobilityUom' for type 'eml21:MobilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom (-1181)

#endif

/* enum eml21__MassUom has binding name 'eml21__MassUom' for type 'eml21:MassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUom (-1180)

#endif

/* enum eml21__MassPerVolumeUom has binding name 'eml21__MassPerVolumeUom' for type 'eml21:MassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom (-1179)

#endif

/* enum eml21__MassPerVolumePerTemperatureUom has binding name 'eml21__MassPerVolumePerTemperatureUom' for type 'eml21:MassPerVolumePerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom (-1178)

#endif

/* enum eml21__MassPerVolumePerPressureUom has binding name 'eml21__MassPerVolumePerPressureUom' for type 'eml21:MassPerVolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom (-1177)

#endif

/* enum eml21__MassPerVolumePerLengthUom has binding name 'eml21__MassPerVolumePerLengthUom' for type 'eml21:MassPerVolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom (-1176)

#endif

/* enum eml21__MassPerTimeUom has binding name 'eml21__MassPerTimeUom' for type 'eml21:MassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom (-1175)

#endif

/* enum eml21__MassPerTimePerLengthUom has binding name 'eml21__MassPerTimePerLengthUom' for type 'eml21:MassPerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom (-1174)

#endif

/* enum eml21__MassPerTimePerAreaUom has binding name 'eml21__MassPerTimePerAreaUom' for type 'eml21:MassPerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom (-1173)

#endif

/* enum eml21__MassPerMassUom has binding name 'eml21__MassPerMassUom' for type 'eml21:MassPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom (-1172)

#endif

/* enum eml21__MassPerLengthUom has binding name 'eml21__MassPerLengthUom' for type 'eml21:MassPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom (-1171)

#endif

/* enum eml21__MassPerEnergyUom has binding name 'eml21__MassPerEnergyUom' for type 'eml21:MassPerEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom (-1170)

#endif

/* enum eml21__MassPerAreaUom has binding name 'eml21__MassPerAreaUom' for type 'eml21:MassPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom (-1169)

#endif

/* enum eml21__MassLengthUom has binding name 'eml21__MassLengthUom' for type 'eml21:MassLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom (-1168)

#endif

/* enum eml21__MagneticVectorPotentialUom has binding name 'eml21__MagneticVectorPotentialUom' for type 'eml21:MagneticVectorPotentialUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom (-1167)

#endif

/* enum eml21__MagneticPermeabilityUom has binding name 'eml21__MagneticPermeabilityUom' for type 'eml21:MagneticPermeabilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom (-1166)

#endif

/* enum eml21__MagneticFluxUom has binding name 'eml21__MagneticFluxUom' for type 'eml21:MagneticFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom (-1165)

#endif

/* enum eml21__MagneticFluxDensityUom has binding name 'eml21__MagneticFluxDensityUom' for type 'eml21:MagneticFluxDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom (-1164)

#endif

/* enum eml21__MagneticFluxDensityPerLengthUom has binding name 'eml21__MagneticFluxDensityPerLengthUom' for type 'eml21:MagneticFluxDensityPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom (-1163)

#endif

/* enum eml21__MagneticFieldStrengthUom has binding name 'eml21__MagneticFieldStrengthUom' for type 'eml21:MagneticFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom (-1162)

#endif

/* enum eml21__MagneticDipoleMomentUom has binding name 'eml21__MagneticDipoleMomentUom' for type 'eml21:MagneticDipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom (-1161)

#endif

/* enum eml21__LuminousIntensityUom has binding name 'eml21__LuminousIntensityUom' for type 'eml21:LuminousIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom (-1160)

#endif

/* enum eml21__LuminousFluxUom has binding name 'eml21__LuminousFluxUom' for type 'eml21:LuminousFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom (-1159)

#endif

/* enum eml21__LuminousEfficacyUom has binding name 'eml21__LuminousEfficacyUom' for type 'eml21:LuminousEfficacyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom (-1158)

#endif

/* enum eml21__LuminanceUom has binding name 'eml21__LuminanceUom' for type 'eml21:LuminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom (-1157)

#endif

/* enum eml21__LogarithmicPowerRatioUom has binding name 'eml21__LogarithmicPowerRatioUom' for type 'eml21:LogarithmicPowerRatioUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom (-1156)

#endif

/* enum eml21__LogarithmicPowerRatioPerLengthUom has binding name 'eml21__LogarithmicPowerRatioPerLengthUom' for type 'eml21:LogarithmicPowerRatioPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom (-1155)

#endif

/* enum eml21__LinearThermalExpansionUom has binding name 'eml21__LinearThermalExpansionUom' for type 'eml21:LinearThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom (-1154)

#endif

/* enum eml21__LinearAccelerationUom has binding name 'eml21__LinearAccelerationUom' for type 'eml21:LinearAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom (-1153)

#endif

/* enum eml21__LightExposureUom has binding name 'eml21__LightExposureUom' for type 'eml21:LightExposureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom (-1152)

#endif

/* enum eml21__LengthUom has binding name 'eml21__LengthUom' for type 'eml21:LengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom (-1151)

#endif

/* enum eml21__LengthPerVolumeUom has binding name 'eml21__LengthPerVolumeUom' for type 'eml21:LengthPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom (-1150)

#endif

/* enum eml21__LengthPerTimeUom has binding name 'eml21__LengthPerTimeUom' for type 'eml21:LengthPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom (-1149)

#endif

/* enum eml21__LengthPerTemperatureUom has binding name 'eml21__LengthPerTemperatureUom' for type 'eml21:LengthPerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom (-1148)

#endif

/* enum eml21__LengthPerPressureUom has binding name 'eml21__LengthPerPressureUom' for type 'eml21:LengthPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom (-1147)

#endif

/* enum eml21__LengthPerMassUom has binding name 'eml21__LengthPerMassUom' for type 'eml21:LengthPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom (-1146)

#endif

/* enum eml21__LengthPerLengthUom has binding name 'eml21__LengthPerLengthUom' for type 'eml21:LengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom (-1145)

#endif

/* enum eml21__KinematicViscosityUom has binding name 'eml21__KinematicViscosityUom' for type 'eml21:KinematicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom (-1144)

#endif

/* enum eml21__IsothermalCompressibilityUom has binding name 'eml21__IsothermalCompressibilityUom' for type 'eml21:IsothermalCompressibilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom (-1143)

#endif

/* enum eml21__InductanceUom has binding name 'eml21__InductanceUom' for type 'eml21:InductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom (-1142)

#endif

/* enum eml21__IlluminanceUom has binding name 'eml21__IlluminanceUom' for type 'eml21:IlluminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom (-1141)

#endif

/* enum eml21__HeatTransferCoefficientUom has binding name 'eml21__HeatTransferCoefficientUom' for type 'eml21:HeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom (-1140)

#endif

/* enum eml21__HeatFlowRateUom has binding name 'eml21__HeatFlowRateUom' for type 'eml21:HeatFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom (-1139)

#endif

/* enum eml21__HeatCapacityUom has binding name 'eml21__HeatCapacityUom' for type 'eml21:HeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom (-1138)

#endif

/* enum eml21__FrequencyUom has binding name 'eml21__FrequencyUom' for type 'eml21:FrequencyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom (-1137)

#endif

/* enum eml21__FrequencyIntervalUom has binding name 'eml21__FrequencyIntervalUom' for type 'eml21:FrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom (-1136)

#endif

/* enum eml21__ForceUom has binding name 'eml21__ForceUom' for type 'eml21:ForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom (-1135)

#endif

/* enum eml21__ForcePerVolumeUom has binding name 'eml21__ForcePerVolumeUom' for type 'eml21:ForcePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom (-1134)

#endif

/* enum eml21__ForcePerLengthUom has binding name 'eml21__ForcePerLengthUom' for type 'eml21:ForcePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom (-1133)

#endif

/* enum eml21__ForcePerForceUom has binding name 'eml21__ForcePerForceUom' for type 'eml21:ForcePerForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom (-1132)

#endif

/* enum eml21__ForceLengthPerLengthUom has binding name 'eml21__ForceLengthPerLengthUom' for type 'eml21:ForceLengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom (-1131)

#endif

/* enum eml21__ForceAreaUom has binding name 'eml21__ForceAreaUom' for type 'eml21:ForceAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom (-1130)

#endif

/* enum eml21__EnergyUom has binding name 'eml21__EnergyUom' for type 'eml21:EnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom (-1129)

#endif

/* enum eml21__EnergyPerVolumeUom has binding name 'eml21__EnergyPerVolumeUom' for type 'eml21:EnergyPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom (-1128)

#endif

/* enum eml21__EnergyPerMassUom has binding name 'eml21__EnergyPerMassUom' for type 'eml21:EnergyPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom (-1127)

#endif

/* enum eml21__EnergyPerMassPerTimeUom has binding name 'eml21__EnergyPerMassPerTimeUom' for type 'eml21:EnergyPerMassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom (-1126)

#endif

/* enum eml21__EnergyPerLengthUom has binding name 'eml21__EnergyPerLengthUom' for type 'eml21:EnergyPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom (-1125)

#endif

/* enum eml21__EnergyPerAreaUom has binding name 'eml21__EnergyPerAreaUom' for type 'eml21:EnergyPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom (-1124)

#endif

/* enum eml21__EnergyLengthPerTimeAreaTemperatureUom has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureUom' for type 'eml21:EnergyLengthPerTimeAreaTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom (-1123)

#endif

/* enum eml21__EnergyLengthPerAreaUom has binding name 'eml21__EnergyLengthPerAreaUom' for type 'eml21:EnergyLengthPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom (-1122)

#endif

/* enum eml21__ElectromagneticMomentUom has binding name 'eml21__ElectromagneticMomentUom' for type 'eml21:ElectromagneticMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom (-1121)

#endif

/* enum eml21__ElectricResistanceUom has binding name 'eml21__ElectricResistanceUom' for type 'eml21:ElectricResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom (-1120)

#endif

/* enum eml21__ElectricResistancePerLengthUom has binding name 'eml21__ElectricResistancePerLengthUom' for type 'eml21:ElectricResistancePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom (-1119)

#endif

/* enum eml21__ElectricPotentialDifferenceUom has binding name 'eml21__ElectricPotentialDifferenceUom' for type 'eml21:ElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom (-1118)

#endif

/* enum eml21__ElectricFieldStrengthUom has binding name 'eml21__ElectricFieldStrengthUom' for type 'eml21:ElectricFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom (-1117)

#endif

/* enum eml21__ElectricCurrentUom has binding name 'eml21__ElectricCurrentUom' for type 'eml21:ElectricCurrentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom (-1116)

#endif

/* enum eml21__ElectricCurrentDensityUom has binding name 'eml21__ElectricCurrentDensityUom' for type 'eml21:ElectricCurrentDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom (-1115)

#endif

/* enum eml21__ElectricConductivityUom has binding name 'eml21__ElectricConductivityUom' for type 'eml21:ElectricConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom (-1114)

#endif

/* enum eml21__ElectricConductanceUom has binding name 'eml21__ElectricConductanceUom' for type 'eml21:ElectricConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom (-1113)

#endif

/* enum eml21__ElectricChargeUom has binding name 'eml21__ElectricChargeUom' for type 'eml21:ElectricChargeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom (-1112)

#endif

/* enum eml21__ElectricChargePerVolumeUom has binding name 'eml21__ElectricChargePerVolumeUom' for type 'eml21:ElectricChargePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom (-1111)

#endif

/* enum eml21__ElectricChargePerMassUom has binding name 'eml21__ElectricChargePerMassUom' for type 'eml21:ElectricChargePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom (-1110)

#endif

/* enum eml21__ElectricChargePerAreaUom has binding name 'eml21__ElectricChargePerAreaUom' for type 'eml21:ElectricChargePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom (-1109)

#endif

/* enum eml21__ElectricalResistivityUom has binding name 'eml21__ElectricalResistivityUom' for type 'eml21:ElectricalResistivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom (-1108)

#endif

/* enum eml21__DynamicViscosityUom has binding name 'eml21__DynamicViscosityUom' for type 'eml21:DynamicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom (-1107)

#endif

/* enum eml21__DoseEquivalentUom has binding name 'eml21__DoseEquivalentUom' for type 'eml21:DoseEquivalentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom (-1106)

#endif

/* enum eml21__DipoleMomentUom has binding name 'eml21__DipoleMomentUom' for type 'eml21:DipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom (-1105)

#endif

/* enum eml21__DimensionlessUom has binding name 'eml21__DimensionlessUom' for type 'eml21:DimensionlessUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom (-1104)

#endif

/* enum eml21__DigitalStorageUom has binding name 'eml21__DigitalStorageUom' for type 'eml21:DigitalStorageUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom (-1103)

#endif

/* enum eml21__DiffusiveTimeOfFlightUom has binding name 'eml21__DiffusiveTimeOfFlightUom' for type 'eml21:DiffusiveTimeOfFlightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom (-1102)

#endif

/* enum eml21__DiffusionCoefficientUom has binding name 'eml21__DiffusionCoefficientUom' for type 'eml21:DiffusionCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom (-1101)

#endif

/* enum eml21__DataTransferSpeedUom has binding name 'eml21__DataTransferSpeedUom' for type 'eml21:DataTransferSpeedUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom (-1100)

#endif

/* enum eml21__CationExchangeCapacityUom has binding name 'eml21__CationExchangeCapacityUom' for type 'eml21:CationExchangeCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom (-1099)

#endif

/* enum eml21__CapacitanceUom has binding name 'eml21__CapacitanceUom' for type 'eml21:CapacitanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom (-1098)

#endif

/* enum eml21__AttenuationPerFrequencyIntervalUom has binding name 'eml21__AttenuationPerFrequencyIntervalUom' for type 'eml21:AttenuationPerFrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom (-1097)

#endif

/* enum eml21__AreaUom has binding name 'eml21__AreaUom' for type 'eml21:AreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom (-1096)

#endif

/* enum eml21__AreaPerVolumeUom has binding name 'eml21__AreaPerVolumeUom' for type 'eml21:AreaPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom (-1095)

#endif

/* enum eml21__AreaPerTimeUom has binding name 'eml21__AreaPerTimeUom' for type 'eml21:AreaPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom (-1094)

#endif

/* enum eml21__AreaPerMassUom has binding name 'eml21__AreaPerMassUom' for type 'eml21:AreaPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom (-1093)

#endif

/* enum eml21__AreaPerCountUom has binding name 'eml21__AreaPerCountUom' for type 'eml21:AreaPerCountUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom (-1092)

#endif

/* enum eml21__AreaPerAreaUom has binding name 'eml21__AreaPerAreaUom' for type 'eml21:AreaPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom (-1091)

#endif

/* enum eml21__AreaPerAmountOfSubstanceUom has binding name 'eml21__AreaPerAmountOfSubstanceUom' for type 'eml21:AreaPerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom (-1090)

#endif

/* enum eml21__APINeutronUom has binding name 'eml21__APINeutronUom' for type 'eml21:APINeutronUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom (-1089)

#endif

/* enum eml21__APIGravityUom has binding name 'eml21__APIGravityUom' for type 'eml21:APIGravityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom (-1088)

#endif

/* enum eml21__APIGammaRayUom has binding name 'eml21__APIGammaRayUom' for type 'eml21:APIGammaRayUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom (-1087)

#endif

/* enum eml21__AngularVelocityUom has binding name 'eml21__AngularVelocityUom' for type 'eml21:AngularVelocityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom (-1086)

#endif

/* enum eml21__AngularAccelerationUom has binding name 'eml21__AngularAccelerationUom' for type 'eml21:AngularAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom (-1085)

#endif

/* enum eml21__AnglePerVolumeUom has binding name 'eml21__AnglePerVolumeUom' for type 'eml21:AnglePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom (-1084)

#endif

/* enum eml21__AnglePerLengthUom has binding name 'eml21__AnglePerLengthUom' for type 'eml21:AnglePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom (-1083)

#endif

/* enum eml21__AmountOfSubstanceUom has binding name 'eml21__AmountOfSubstanceUom' for type 'eml21:AmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom (-1082)

#endif

/* enum eml21__AmountOfSubstancePerVolumeUom has binding name 'eml21__AmountOfSubstancePerVolumeUom' for type 'eml21:AmountOfSubstancePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom (-1081)

#endif

/* enum eml21__AmountOfSubstancePerTimeUom has binding name 'eml21__AmountOfSubstancePerTimeUom' for type 'eml21:AmountOfSubstancePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom (-1080)

#endif

/* enum eml21__AmountOfSubstancePerTimePerAreaUom has binding name 'eml21__AmountOfSubstancePerTimePerAreaUom' for type 'eml21:AmountOfSubstancePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom (-1079)

#endif

/* enum eml21__AmountOfSubstancePerAreaUom has binding name 'eml21__AmountOfSubstancePerAreaUom' for type 'eml21:AmountOfSubstancePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom (-1078)

#endif

/* enum eml21__AmountOfSubstancePerAmountOfSubstanceUom has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceUom' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom (-1077)

#endif

/* enum eml21__ActivityOfRadioactivityUom has binding name 'eml21__ActivityOfRadioactivityUom' for type 'eml21:ActivityOfRadioactivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom (-1076)

#endif

/* enum eml21__AbsorbedDoseUom has binding name 'eml21__AbsorbedDoseUom' for type 'eml21:AbsorbedDoseUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom (-1075)

#endif

/* enum eml21__UnitOfMeasure has binding name 'eml21__UnitOfMeasure' for type 'eml21:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure (-1072)

#endif

/* enum _xlink__actuate has binding name '_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_1__xlink__actuate (-1060)

#endif

/* enum _xlink__show has binding name '_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__show
#define SOAP_TYPE_gsoap_eml2_1__xlink__show (-1059)

#endif

/* enum gml__AggregationType has binding name 'gml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_1_gml__AggregationType (-1058)

#endif

/* enum eml21__VerticalDirection has binding name 'eml21__VerticalDirection' for type 'eml21:VerticalDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection (-1055)

#endif

/* enum eml21__AxisOrder2d has binding name 'eml21__AxisOrder2d' for type 'eml21:AxisOrder2d' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d (-1054)

#endif

/* enum eml21__ParameterKind has binding name 'eml21__ParameterKind' for type 'eml21:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind (-1053)

#endif

/* _witsml2__WellboreCompletion has binding name '_witsml2__WellboreCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreCompletion (-2332)

#endif

/* _witsml2__WellCompletion has binding name '_witsml2__WellCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellCompletion (-2331)

#endif

/* _witsml2__WellboreMarkerSet has binding name '_witsml2__WellboreMarkerSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarkerSet (-2330)

#endif

/* _witsml2__WellboreMarker has binding name '_witsml2__WellboreMarker' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreMarker (-2329)

#endif

/* _witsml2__part_USCOREMudLogReportInterval has binding name '_witsml2__part_USCOREMudLogReportInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREMudLogReportInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREMudLogReportInterval (-2328)

#endif

/* _witsml2__MudLogReport has binding name '_witsml2__MudLogReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__MudLogReport (-2327)

#endif

/* _witsml2__InterpretedGeologyInterval has binding name '_witsml2__InterpretedGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeologyInterval (-2326)

#endif

/* _witsml2__CuttingsGeology has binding name '_witsml2__CuttingsGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeology (-2325)

#endif

/* _witsml2__CuttingsGeologyInterval has binding name '_witsml2__CuttingsGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CuttingsGeologyInterval (-2324)

#endif

/* _witsml2__ShowEvaluationInterval has binding name '_witsml2__ShowEvaluationInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluationInterval (-2323)

#endif

/* _witsml2__InterpretedGeology has binding name '_witsml2__InterpretedGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__InterpretedGeology (-2322)

#endif

/* _witsml2__ShowEvaluation has binding name '_witsml2__ShowEvaluation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ShowEvaluation (-2321)

#endif

/* _witsml2__WellboreGeology has binding name '_witsml2__WellboreGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeology (-2320)

#endif

/* _witsml2__ToolErrorTermSet has binding name '_witsml2__ToolErrorTermSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorTermSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorTermSet (-2319)

#endif

/* _witsml2__SurveyProgram has binding name '_witsml2__SurveyProgram' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_1__witsml2__SurveyProgram (-2318)

#endif

/* _witsml2__StimJobStage has binding name '_witsml2__StimJobStage' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimJobStage (-2317)

#endif

/* _witsml2__StimJob has binding name '_witsml2__StimJob' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimJob (-2316)

#endif

/* _witsml2__StimPerforationCluster has binding name '_witsml2__StimPerforationCluster' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1__witsml2__StimPerforationCluster (-2315)

#endif

/* _witsml2__Risk has binding name '_witsml2__Risk' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Risk (-2314)

#endif

/* _witsml2__Rig has binding name '_witsml2__Rig' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Rig (-2313)

#endif

/* _witsml2__RigUtilization has binding name '_witsml2__RigUtilization' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_1__witsml2__RigUtilization (-2312)

#endif

/* _witsml2__ToolErrorModel has binding name '_witsml2__ToolErrorModel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ToolErrorModel (-2311)

#endif

/* _witsml2__part_USCORETrajectoryStation has binding name '_witsml2__part_USCORETrajectoryStation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCORETrajectoryStation (-2310)

#endif

/* _witsml2__Trajectory has binding name '_witsml2__Trajectory' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Trajectory (-2309)

#endif

/* _witsml2__OpsReport has binding name '_witsml2__OpsReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__OpsReport (-2308)

#endif

/* _witsml2__DownholeComponent has binding name '_witsml2__DownholeComponent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DownholeComponent (-2307)

#endif

/* _witsml2__WellCMLedger has binding name '_witsml2__WellCMLedger' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellCMLedger (-2306)

#endif

/* _witsml2__DepthRegImage has binding name '_witsml2__DepthRegImage' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DepthRegImage (-2305)

#endif

/* _witsml2__Channel has binding name '_witsml2__Channel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Channel (-2304)

#endif

/* _witsml2__Log has binding name '_witsml2__Log' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Log
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Log (-2303)

#endif

/* _witsml2__ChannelSet has binding name '_witsml2__ChannelSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1__witsml2__ChannelSet (-2302)

#endif

/* _witsml2__WellboreGeometry has binding name '_witsml2__WellboreGeometry' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1__witsml2__WellboreGeometry (-2301)

#endif

/* _witsml2__part_USCOREWellboreGeometrySection has binding name '_witsml2__part_USCOREWellboreGeometrySection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1__witsml2__part_USCOREWellboreGeometrySection (-2300)

#endif

/* _witsml2__CementJob has binding name '_witsml2__CementJob' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CementJob (-2299)

#endif

/* _witsml2__CementJobEvaluation has binding name '_witsml2__CementJobEvaluation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml2__CementJobEvaluation (-2298)

#endif

/* _witsml2__Tubular has binding name '_witsml2__Tubular' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Tubular (-2297)

#endif

/* _witsml2__DrillReport has binding name '_witsml2__DrillReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__DrillReport (-2296)

#endif

/* _witsml2__FluidsReport has binding name '_witsml2__FluidsReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml2__FluidsReport (-2295)

#endif

/* _witsml2__BhaRun has binding name '_witsml2__BhaRun' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_1__witsml2__BhaRun (-2294)

#endif

/* _witsml2__Well has binding name '_witsml2__Well' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Well
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Well (-2293)

#endif

/* _witsml2__Wellbore has binding name '_witsml2__Wellbore' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Wellbore (-2292)

#endif

/* _witsml2__Attachment has binding name '_witsml2__Attachment' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_1__witsml2__Attachment (-2291)

#endif

/* _gco__nilReason has binding name '_gco__nilReason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_1__gco__nilReason (-2290)

#endif

/* _gco__Date has binding name '_gco__Date' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__Date
#define SOAP_TYPE_gsoap_eml2_1__gco__Date (-2288)

#endif

/* _gco__CharacterString has binding name '_gco__CharacterString' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_1__gco__CharacterString (-2285)

#endif

/* _gmd__DQ_USCOREEvaluationMethodTypeCode has binding name '_gmd__DQ_USCOREEvaluationMethodTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__DQ_USCOREEvaluationMethodTypeCode (-2284)

#endif

/* _gmd__CI_USCORESeries has binding name '_gmd__CI_USCORESeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORESeries (-2283)

#endif

/* _gmd__CI_USCOREPresentationFormCode has binding name '_gmd__CI_USCOREPresentationFormCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREPresentationFormCode (-2282)

#endif

/* _gmd__CI_USCORERoleCode has binding name '_gmd__CI_USCORERoleCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORERoleCode (-2281)

#endif

/* _gmd__CI_USCOREOnLineFunctionCode has binding name '_gmd__CI_USCOREOnLineFunctionCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnLineFunctionCode (-2280)

#endif

/* _gmd__URL has binding name '_gmd__URL' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__URL
#define SOAP_TYPE_gsoap_eml2_1__gmd__URL (-2279)

#endif

/* _gmd__CI_USCOREOnlineResource has binding name '_gmd__CI_USCOREOnlineResource' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREOnlineResource (-2278)

#endif

/* _gmd__CI_USCOREAddress has binding name '_gmd__CI_USCOREAddress' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREAddress (-2277)

#endif

/* _gmd__CI_USCORETelephone has binding name '_gmd__CI_USCORETelephone' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORETelephone (-2276)

#endif

/* _gmd__CI_USCOREContact has binding name '_gmd__CI_USCOREContact' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREContact (-2275)

#endif

/* _gmd__CI_USCOREResponsibleParty has binding name '_gmd__CI_USCOREResponsibleParty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREResponsibleParty (-2274)

#endif

/* _gmd__CI_USCOREDateTypeCode has binding name '_gmd__CI_USCOREDateTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDateTypeCode (-2273)

#endif

/* _gmd__CI_USCOREDate has binding name '_gmd__CI_USCOREDate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCOREDate (-2272)

#endif

/* _gmd__CI_USCORECitation has binding name '_gmd__CI_USCORECitation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_1__gmd__CI_USCORECitation (-2271)

#endif

/* _gmd__MD_USCOREIdentifier has binding name '_gmd__MD_USCOREIdentifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_1__gmd__MD_USCOREIdentifier (-2270)

#endif

/* _gmd__EX_USCOREVerticalExtent has binding name '_gmd__EX_USCOREVerticalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREVerticalExtent (-2269)

#endif

/* _gmd__EX_USCORETemporalExtent has binding name '_gmd__EX_USCORETemporalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCORETemporalExtent (-2268)

#endif

/* _gmd__EX_USCOREExtent has binding name '_gmd__EX_USCOREExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_1__gmd__EX_USCOREExtent (-2267)

#endif

/* _xlink__title has binding name '_xlink__title' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__title
#define SOAP_TYPE_gsoap_eml2_1__xlink__title (-2266)

#endif

/* _xlink__arcrole has binding name '_xlink__arcrole' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_1__xlink__arcrole (-2265)

#endif

/* _xlink__role has binding name '_xlink__role' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__role
#define SOAP_TYPE_gsoap_eml2_1__xlink__role (-2264)

#endif

/* _xlink__href has binding name '_xlink__href' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__xlink__href
#define SOAP_TYPE_gsoap_eml2_1__xlink__href (-2263)

#endif

/* _gml__id has binding name '_gml__id' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__id
#define SOAP_TYPE_gsoap_eml2_1__gml__id (-2262)

#endif

/* _gml__VerticalDatum has binding name '_gml__VerticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalDatum (-2261)

#endif

/* _gml__verticalDatum has binding name '_gml__verticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__verticalDatum (-2260)

#endif

/* _gml__VerticalCS has binding name '_gml__VerticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalCS (-2259)

#endif

/* _gml__verticalCS has binding name '_gml__verticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__verticalCS (-2258)

#endif

/* _gml__VerticalCRS has binding name '_gml__VerticalCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__VerticalCRS (-2257)

#endif

/* _gml__baseGeodeticCRS has binding name '_gml__baseGeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__baseGeodeticCRS (-2256)

#endif

/* _gml__targetCRS has binding name '_gml__targetCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__targetCRS (-2255)

#endif

/* _gml__sourceCRS has binding name '_gml__sourceCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__sourceCRS (-2254)

#endif

/* _gml__operationVersion has binding name '_gml__operationVersion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_1__gml__operationVersion (-2253)

#endif

/* _gml__conversion has binding name '_gml__conversion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__conversion
#define SOAP_TYPE_gsoap_eml2_1__gml__conversion (-2252)

#endif

/* _gml__ProjectedCRS has binding name '_gml__ProjectedCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__ProjectedCRS (-2251)

#endif

/* _gml__semiMajorAxis has binding name '_gml__semiMajorAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_1__gml__semiMajorAxis (-2250)

#endif

/* _gml__Ellipsoid has binding name '_gml__Ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_1__gml__Ellipsoid (-2249)

#endif

/* _gml__ellipsoid has binding name '_gml__ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_1__gml__ellipsoid (-2248)

#endif

/* _gml__greenwichLongitude has binding name '_gml__greenwichLongitude' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_1__gml__greenwichLongitude (-2247)

#endif

/* _gml__PrimeMeridian has binding name '_gml__PrimeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_1__gml__PrimeMeridian (-2246)

#endif

/* _gml__primeMeridian has binding name '_gml__primeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_1__gml__primeMeridian (-2245)

#endif

/* _gml__realizationEpoch has binding name '_gml__realizationEpoch' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_1__gml__realizationEpoch (-2244)

#endif

/* _gml__anchorDefinition has binding name '_gml__anchorDefinition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_1__gml__anchorDefinition (-2243)

#endif

/* _gml__GeodeticDatum has binding name '_gml__GeodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__GeodeticDatum (-2242)

#endif

/* _gml__geodeticDatum has binding name '_gml__geodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_1__gml__geodeticDatum (-2241)

#endif

/* _gml__SphericalCS has binding name '_gml__SphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__SphericalCS (-2240)

#endif

/* _gml__sphericalCS has binding name '_gml__sphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__sphericalCS (-2239)

#endif

/* _gml__CartesianCS has binding name '_gml__CartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_1__gml__CartesianCS (-2238)

#endif

/* _gml__cartesianCS has binding name '_gml__cartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_1__gml__cartesianCS (-2237)

#endif

/* _gml__rangeMeaning has binding name '_gml__rangeMeaning' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_1__gml__rangeMeaning (-2236)

#endif

/* _gml__axisDirection has binding name '_gml__axisDirection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_1__gml__axisDirection (-2233)

#endif

/* _gml__axisAbbrev has binding name '_gml__axisAbbrev' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_1__gml__axisAbbrev (-2232)

#endif

/* _gml__CoordinateSystemAxis has binding name '_gml__CoordinateSystemAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_1__gml__CoordinateSystemAxis (-2231)

#endif

/* _gml__axis has binding name '_gml__axis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__axis
#define SOAP_TYPE_gsoap_eml2_1__gml__axis (-2230)

#endif

/* _gml__EllipsoidalCS has binding name '_gml__EllipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__EllipsoidalCS (-2229)

#endif

/* _gml__ellipsoidalCS has binding name '_gml__ellipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_1__gml__ellipsoidalCS (-2228)

#endif

/* _gml__scope has binding name '_gml__scope' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__scope
#define SOAP_TYPE_gsoap_eml2_1__gml__scope (-2227)

#endif

/* _gml__Definition has binding name '_gml__Definition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__Definition
#define SOAP_TYPE_gsoap_eml2_1__gml__Definition (-2226)

#endif

/* _gml__remarks has binding name '_gml__remarks' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__remarks
#define SOAP_TYPE_gsoap_eml2_1__gml__remarks (-2225)

#endif

/* _gml__name has binding name '_gml__name' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__name
#define SOAP_TYPE_gsoap_eml2_1__gml__name (-2224)

#endif

/* _gml__identifier has binding name '_gml__identifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__identifier
#define SOAP_TYPE_gsoap_eml2_1__gml__identifier (-2223)

#endif

/* _gml__descriptionReference has binding name '_gml__descriptionReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_1__gml__descriptionReference (-2222)

#endif

/* _gml__description has binding name '_gml__description' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__description
#define SOAP_TYPE_gsoap_eml2_1__gml__description (-2221)

#endif

/* _gml__GeodeticCRS has binding name '_gml__GeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_1__gml__GeodeticCRS (-2220)

#endif

/* _eml21__GraphicalInformationSet has binding name '_eml21__GraphicalInformationSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet (-2219)

#endif

/* _eml21__DataAssuranceRecord has binding name '_eml21__DataAssuranceRecord' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord (-2218)

#endif

/* _eml21__TimeSeries has binding name '_eml21__TimeSeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries (-2217)

#endif

/* _eml21__PropertyKindDictionary has binding name '_eml21__PropertyKindDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary (-2216)

#endif

/* _eml21__PropertyKind has binding name '_eml21__PropertyKind' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind (-2215)

#endif

/* _eml21__ActivityTemplate has binding name '_eml21__ActivityTemplate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate (-2214)

#endif

/* _eml21__Activity has binding name '_eml21__Activity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1__eml21__Activity (-2213)

#endif

/* _eml21__EpcExternalPartReference has binding name '_eml21__EpcExternalPartReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference (-2212)

#endif

/* _eml21__AbstractDataObject has binding name '_eml21__AbstractDataObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject (-2211)

#endif

/* _eml21__AbstractContextualObject has binding name '_eml21__AbstractContextualObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject (-2210)

#endif

/* witsml2__AbstractUidString has binding name 'witsml2__AbstractUidString' for type 'witsml2:AbstractUidString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractUidString (-1261)

#endif

/* witsml2__PublicLandSurveySystemQuarterTownship has binding name 'witsml2__PublicLandSurveySystemQuarterTownship' for type 'witsml2:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterTownship (-1260)

#endif

/* witsml2__PublicLandSurveySystemQuarterSection has binding name 'witsml2__PublicLandSurveySystemQuarterSection' for type 'witsml2:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystemQuarterSection (-1259)

#endif

/* witsml2__SectionNumber has binding name 'witsml2__SectionNumber' for type 'witsml2:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SectionNumber (-1258)

#endif

/* eml21__TypeEnum has binding name 'eml21__TypeEnum' for type 'eml21:TypeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum (-1074)

#endif

/* eml21__TimeZone has binding name 'eml21__TimeZone' for type 'eml21:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone (-1073)

#endif

/* eml21__UuidString has binding name 'eml21__UuidString' for type 'eml21:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UuidString
#define SOAP_TYPE_gsoap_eml2_1_eml21__UuidString (-1071)

#endif

/* eml21__UomEnum has binding name 'eml21__UomEnum' for type 'eml21:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum (-1070)

#endif

/* eml21__TimeStamp has binding name 'eml21__TimeStamp' for type 'eml21:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp (-1069)

#endif

/* eml21__String64 has binding name 'eml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String64
#define SOAP_TYPE_gsoap_eml2_1_eml21__String64 (-1068)

#endif

/* eml21__String2000 has binding name 'eml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_eml21__String2000 (-1067)

#endif

/* eml21__EnumExtensionPattern has binding name 'eml21__EnumExtensionPattern' for type 'eml21:EnumExtensionPattern' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern (-1066)

#endif

/* gml__UomURI has binding name 'gml__UomURI' for type 'gml:UomURI' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_1_gml__UomURI (-1057)

#endif

/* gml__UomSymbol has binding name 'gml__UomSymbol' for type 'gml:UomSymbol' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_1_gml__UomSymbol (-1056)

#endif

/* eml21__AbstractString has binding name 'eml21__AbstractString' for type 'eml21:AbstractString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString (-1049)

#endif

/* witsml2__EquipmentTypeExt has binding name 'witsml2__EquipmentTypeExt' for type 'witsml2:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentTypeExt (-1046)

#endif

/* gco__Date_USCOREType has binding name 'gco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREType (-1045)

#endif

/* gml__UomIdentifier has binding name 'gml__UomIdentifier' for type 'gml:UomIdentifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_1_gml__UomIdentifier (-1044)

#endif

/* gml__NilReasonEnumeration has binding name 'gml__NilReasonEnumeration' for type 'gml:NilReasonEnumeration' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_1_gml__NilReasonEnumeration (-1043)

#endif

/* gml__NilReasonType has binding name 'gml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_1_gml__NilReasonType (-1042)

#endif

/* eml21__VolumeUomExt has binding name 'eml21__VolumeUomExt' for type 'eml21:VolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt (-1041)

#endif

/* eml21__VolumetricThermalExpansionUomExt has binding name 'eml21__VolumetricThermalExpansionUomExt' for type 'eml21:VolumetricThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt (-1040)

#endif

/* eml21__VolumetricHeatTransferCoefficientUomExt has binding name 'eml21__VolumetricHeatTransferCoefficientUomExt' for type 'eml21:VolumetricHeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt (-1039)

#endif

/* eml21__VolumePerVolumeUomExt has binding name 'eml21__VolumePerVolumeUomExt' for type 'eml21:VolumePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt (-1038)

#endif

/* eml21__VolumePerTimeUomExt has binding name 'eml21__VolumePerTimeUomExt' for type 'eml21:VolumePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt (-1037)

#endif

/* eml21__VolumePerTimePerVolumeUomExt has binding name 'eml21__VolumePerTimePerVolumeUomExt' for type 'eml21:VolumePerTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt (-1036)

#endif

/* eml21__VolumePerTimePerTimeUomExt has binding name 'eml21__VolumePerTimePerTimeUomExt' for type 'eml21:VolumePerTimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt (-1035)

#endif

/* eml21__VolumePerTimePerPressureUomExt has binding name 'eml21__VolumePerTimePerPressureUomExt' for type 'eml21:VolumePerTimePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt (-1034)

#endif

/* eml21__VolumePerTimePerPressureLengthUomExt has binding name 'eml21__VolumePerTimePerPressureLengthUomExt' for type 'eml21:VolumePerTimePerPressureLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt (-1033)

#endif

/* eml21__VolumePerTimePerLengthUomExt has binding name 'eml21__VolumePerTimePerLengthUomExt' for type 'eml21:VolumePerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt (-1032)

#endif

/* eml21__VolumePerTimePerAreaUomExt has binding name 'eml21__VolumePerTimePerAreaUomExt' for type 'eml21:VolumePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt (-1031)

#endif

/* eml21__VolumePerTimeLengthUomExt has binding name 'eml21__VolumePerTimeLengthUomExt' for type 'eml21:VolumePerTimeLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt (-1030)

#endif

/* eml21__VolumePerRotationUomExt has binding name 'eml21__VolumePerRotationUomExt' for type 'eml21:VolumePerRotationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt (-1029)

#endif

/* eml21__VolumePerPressureUomExt has binding name 'eml21__VolumePerPressureUomExt' for type 'eml21:VolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt (-1028)

#endif

/* eml21__VolumePerMassUomExt has binding name 'eml21__VolumePerMassUomExt' for type 'eml21:VolumePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt (-1027)

#endif

/* eml21__VolumePerLengthUomExt has binding name 'eml21__VolumePerLengthUomExt' for type 'eml21:VolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt (-1026)

#endif

/* eml21__VolumePerAreaUomExt has binding name 'eml21__VolumePerAreaUomExt' for type 'eml21:VolumePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt (-1025)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateUomExt has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateUomExt' for type 'eml21:VolumeFlowRatePerVolumeFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt (-1024)

#endif

/* eml21__VerticalCoordinateUomExt has binding name 'eml21__VerticalCoordinateUomExt' for type 'eml21:VerticalCoordinateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt (-1023)

#endif

/* eml21__TimeUomExt has binding name 'eml21__TimeUomExt' for type 'eml21:TimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt (-1022)

#endif

/* eml21__TimePerVolumeUomExt has binding name 'eml21__TimePerVolumeUomExt' for type 'eml21:TimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt (-1021)

#endif

/* eml21__TimePerTimeUomExt has binding name 'eml21__TimePerTimeUomExt' for type 'eml21:TimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt (-1020)

#endif

/* eml21__TimePerMassUomExt has binding name 'eml21__TimePerMassUomExt' for type 'eml21:TimePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt (-1019)

#endif

/* eml21__TimePerLengthUomExt has binding name 'eml21__TimePerLengthUomExt' for type 'eml21:TimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt (-1018)

#endif

/* eml21__ThermodynamicTemperatureUomExt has binding name 'eml21__ThermodynamicTemperatureUomExt' for type 'eml21:ThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt (-1017)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-1016)

#endif

/* eml21__ThermalResistanceUomExt has binding name 'eml21__ThermalResistanceUomExt' for type 'eml21:ThermalResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt (-1015)

#endif

/* eml21__ThermalInsulanceUomExt has binding name 'eml21__ThermalInsulanceUomExt' for type 'eml21:ThermalInsulanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt (-1014)

#endif

/* eml21__ThermalDiffusivityUomExt has binding name 'eml21__ThermalDiffusivityUomExt' for type 'eml21:ThermalDiffusivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt (-1013)

#endif

/* eml21__ThermalConductivityUomExt has binding name 'eml21__ThermalConductivityUomExt' for type 'eml21:ThermalConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt (-1012)

#endif

/* eml21__ThermalConductanceUomExt has binding name 'eml21__ThermalConductanceUomExt' for type 'eml21:ThermalConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt (-1011)

#endif

/* eml21__TemperatureIntervalUomExt has binding name 'eml21__TemperatureIntervalUomExt' for type 'eml21:TemperatureIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt (-1010)

#endif

/* eml21__TemperatureIntervalPerTimeUomExt has binding name 'eml21__TemperatureIntervalPerTimeUomExt' for type 'eml21:TemperatureIntervalPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt (-1009)

#endif

/* eml21__TemperatureIntervalPerPressureUomExt has binding name 'eml21__TemperatureIntervalPerPressureUomExt' for type 'eml21:TemperatureIntervalPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt (-1008)

#endif

/* eml21__TemperatureIntervalPerLengthUomExt has binding name 'eml21__TemperatureIntervalPerLengthUomExt' for type 'eml21:TemperatureIntervalPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt (-1007)

#endif

/* eml21__SpecificHeatCapacityUomExt has binding name 'eml21__SpecificHeatCapacityUomExt' for type 'eml21:SpecificHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt (-1006)

#endif

/* eml21__SolidAngleUomExt has binding name 'eml21__SolidAngleUomExt' for type 'eml21:SolidAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt (-1005)

#endif

/* eml21__SignalingEventPerTimeUomExt has binding name 'eml21__SignalingEventPerTimeUomExt' for type 'eml21:SignalingEventPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt (-1004)

#endif

/* eml21__SecondMomentOfAreaUomExt has binding name 'eml21__SecondMomentOfAreaUomExt' for type 'eml21:SecondMomentOfAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt (-1003)

#endif

/* eml21__ReluctanceUomExt has binding name 'eml21__ReluctanceUomExt' for type 'eml21:ReluctanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt (-1002)

#endif

/* eml21__ReciprocalVolumeUomExt has binding name 'eml21__ReciprocalVolumeUomExt' for type 'eml21:ReciprocalVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt (-1001)

#endif

/* eml21__ReciprocalTimeUomExt has binding name 'eml21__ReciprocalTimeUomExt' for type 'eml21:ReciprocalTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt (-1000)

#endif

/* eml21__ReciprocalPressureUomExt has binding name 'eml21__ReciprocalPressureUomExt' for type 'eml21:ReciprocalPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt (-999)

#endif

/* eml21__ReciprocalMassUomExt has binding name 'eml21__ReciprocalMassUomExt' for type 'eml21:ReciprocalMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt (-998)

#endif

/* eml21__ReciprocalMassTimeUomExt has binding name 'eml21__ReciprocalMassTimeUomExt' for type 'eml21:ReciprocalMassTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt (-997)

#endif

/* eml21__ReciprocalLengthUomExt has binding name 'eml21__ReciprocalLengthUomExt' for type 'eml21:ReciprocalLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt (-996)

#endif

/* eml21__ReciprocalForceUomExt has binding name 'eml21__ReciprocalForceUomExt' for type 'eml21:ReciprocalForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt (-995)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceUomExt has binding name 'eml21__ReciprocalElectricPotentialDifferenceUomExt' for type 'eml21:ReciprocalElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt (-994)

#endif

/* eml21__ReciprocalAreaUomExt has binding name 'eml21__ReciprocalAreaUomExt' for type 'eml21:ReciprocalAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt (-993)

#endif

/* eml21__RadiantIntensityUomExt has binding name 'eml21__RadiantIntensityUomExt' for type 'eml21:RadiantIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt (-992)

#endif

/* eml21__RadianceUomExt has binding name 'eml21__RadianceUomExt' for type 'eml21:RadianceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt (-991)

#endif

/* eml21__QuantityOfLightUomExt has binding name 'eml21__QuantityOfLightUomExt' for type 'eml21:QuantityOfLightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt (-990)

#endif

/* eml21__PressureUomExt has binding name 'eml21__PressureUomExt' for type 'eml21:PressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt (-989)

#endif

/* eml21__PressureTimePerVolumeUomExt has binding name 'eml21__PressureTimePerVolumeUomExt' for type 'eml21:PressureTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt (-988)

#endif

/* eml21__PressureSquaredUomExt has binding name 'eml21__PressureSquaredUomExt' for type 'eml21:PressureSquaredUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt (-987)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaUomExt has binding name 'eml21__PressureSquaredPerForceTimePerAreaUomExt' for type 'eml21:PressureSquaredPerForceTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt (-986)

#endif

/* eml21__PressurePerVolumeUomExt has binding name 'eml21__PressurePerVolumeUomExt' for type 'eml21:PressurePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt (-985)

#endif

/* eml21__PressurePerTimeUomExt has binding name 'eml21__PressurePerTimeUomExt' for type 'eml21:PressurePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt (-984)

#endif

/* eml21__PressurePerPressureUomExt has binding name 'eml21__PressurePerPressureUomExt' for type 'eml21:PressurePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt (-983)

#endif

/* eml21__PowerUomExt has binding name 'eml21__PowerUomExt' for type 'eml21:PowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt (-982)

#endif

/* eml21__PowerPerVolumeUomExt has binding name 'eml21__PowerPerVolumeUomExt' for type 'eml21:PowerPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt (-981)

#endif

/* eml21__PowerPerPowerUomExt has binding name 'eml21__PowerPerPowerUomExt' for type 'eml21:PowerPerPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt (-980)

#endif

/* eml21__PowerPerAreaUomExt has binding name 'eml21__PowerPerAreaUomExt' for type 'eml21:PowerPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt (-979)

#endif

/* eml21__PotentialDifferencePerPowerDropUomExt has binding name 'eml21__PotentialDifferencePerPowerDropUomExt' for type 'eml21:PotentialDifferencePerPowerDropUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt (-978)

#endif

/* eml21__PlaneAngleUomExt has binding name 'eml21__PlaneAngleUomExt' for type 'eml21:PlaneAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt (-977)

#endif

/* eml21__PermittivityUomExt has binding name 'eml21__PermittivityUomExt' for type 'eml21:PermittivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt (-976)

#endif

/* eml21__PermeabilityRockUomExt has binding name 'eml21__PermeabilityRockUomExt' for type 'eml21:PermeabilityRockUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt (-975)

#endif

/* eml21__PermeabilityLengthUomExt has binding name 'eml21__PermeabilityLengthUomExt' for type 'eml21:PermeabilityLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt (-974)

#endif

/* eml21__NormalizedPowerUomExt has binding name 'eml21__NormalizedPowerUomExt' for type 'eml21:NormalizedPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt (-973)

#endif

/* eml21__MomentumUomExt has binding name 'eml21__MomentumUomExt' for type 'eml21:MomentumUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt (-972)

#endif

/* eml21__MomentOfInertiaUomExt has binding name 'eml21__MomentOfInertiaUomExt' for type 'eml21:MomentOfInertiaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt (-971)

#endif

/* eml21__MomentOfForceUomExt has binding name 'eml21__MomentOfForceUomExt' for type 'eml21:MomentOfForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt (-970)

#endif

/* eml21__MolecularWeightUomExt has binding name 'eml21__MolecularWeightUomExt' for type 'eml21:MolecularWeightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt (-969)

#endif

/* eml21__MolarVolumeUomExt has binding name 'eml21__MolarVolumeUomExt' for type 'eml21:MolarVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt (-968)

#endif

/* eml21__MolarHeatCapacityUomExt has binding name 'eml21__MolarHeatCapacityUomExt' for type 'eml21:MolarHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt (-967)

#endif

/* eml21__MolarEnergyUomExt has binding name 'eml21__MolarEnergyUomExt' for type 'eml21:MolarEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt (-966)

#endif

/* eml21__MobilityUomExt has binding name 'eml21__MobilityUomExt' for type 'eml21:MobilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt (-965)

#endif

/* eml21__MassUomExt has binding name 'eml21__MassUomExt' for type 'eml21:MassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt (-964)

#endif

/* eml21__MassPerVolumeUomExt has binding name 'eml21__MassPerVolumeUomExt' for type 'eml21:MassPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt (-963)

#endif

/* eml21__MassPerVolumePerTemperatureUomExt has binding name 'eml21__MassPerVolumePerTemperatureUomExt' for type 'eml21:MassPerVolumePerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt (-962)

#endif

/* eml21__MassPerVolumePerPressureUomExt has binding name 'eml21__MassPerVolumePerPressureUomExt' for type 'eml21:MassPerVolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt (-961)

#endif

/* eml21__MassPerVolumePerLengthUomExt has binding name 'eml21__MassPerVolumePerLengthUomExt' for type 'eml21:MassPerVolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt (-960)

#endif

/* eml21__MassPerTimeUomExt has binding name 'eml21__MassPerTimeUomExt' for type 'eml21:MassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt (-959)

#endif

/* eml21__MassPerTimePerLengthUomExt has binding name 'eml21__MassPerTimePerLengthUomExt' for type 'eml21:MassPerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt (-958)

#endif

/* eml21__MassPerTimePerAreaUomExt has binding name 'eml21__MassPerTimePerAreaUomExt' for type 'eml21:MassPerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt (-957)

#endif

/* eml21__MassPerMassUomExt has binding name 'eml21__MassPerMassUomExt' for type 'eml21:MassPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt (-956)

#endif

/* eml21__MassPerLengthUomExt has binding name 'eml21__MassPerLengthUomExt' for type 'eml21:MassPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt (-955)

#endif

/* eml21__MassPerEnergyUomExt has binding name 'eml21__MassPerEnergyUomExt' for type 'eml21:MassPerEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt (-954)

#endif

/* eml21__MassPerAreaUomExt has binding name 'eml21__MassPerAreaUomExt' for type 'eml21:MassPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt (-953)

#endif

/* eml21__MassLengthUomExt has binding name 'eml21__MassLengthUomExt' for type 'eml21:MassLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt (-952)

#endif

/* eml21__MagneticVectorPotentialUomExt has binding name 'eml21__MagneticVectorPotentialUomExt' for type 'eml21:MagneticVectorPotentialUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt (-951)

#endif

/* eml21__MagneticPermeabilityUomExt has binding name 'eml21__MagneticPermeabilityUomExt' for type 'eml21:MagneticPermeabilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt (-950)

#endif

/* eml21__MagneticFluxUomExt has binding name 'eml21__MagneticFluxUomExt' for type 'eml21:MagneticFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt (-949)

#endif

/* eml21__MagneticFluxDensityUomExt has binding name 'eml21__MagneticFluxDensityUomExt' for type 'eml21:MagneticFluxDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt (-948)

#endif

/* eml21__MagneticFluxDensityPerLengthUomExt has binding name 'eml21__MagneticFluxDensityPerLengthUomExt' for type 'eml21:MagneticFluxDensityPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt (-947)

#endif

/* eml21__MagneticFieldStrengthUomExt has binding name 'eml21__MagneticFieldStrengthUomExt' for type 'eml21:MagneticFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt (-946)

#endif

/* eml21__MagneticDipoleMomentUomExt has binding name 'eml21__MagneticDipoleMomentUomExt' for type 'eml21:MagneticDipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt (-945)

#endif

/* eml21__LuminousIntensityUomExt has binding name 'eml21__LuminousIntensityUomExt' for type 'eml21:LuminousIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt (-944)

#endif

/* eml21__LuminousFluxUomExt has binding name 'eml21__LuminousFluxUomExt' for type 'eml21:LuminousFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt (-943)

#endif

/* eml21__LuminousEfficacyUomExt has binding name 'eml21__LuminousEfficacyUomExt' for type 'eml21:LuminousEfficacyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt (-942)

#endif

/* eml21__LuminanceUomExt has binding name 'eml21__LuminanceUomExt' for type 'eml21:LuminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt (-941)

#endif

/* eml21__LogarithmicPowerRatioUomExt has binding name 'eml21__LogarithmicPowerRatioUomExt' for type 'eml21:LogarithmicPowerRatioUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt (-940)

#endif

/* eml21__LogarithmicPowerRatioPerLengthUomExt has binding name 'eml21__LogarithmicPowerRatioPerLengthUomExt' for type 'eml21:LogarithmicPowerRatioPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt (-939)

#endif

/* eml21__LinearThermalExpansionUomExt has binding name 'eml21__LinearThermalExpansionUomExt' for type 'eml21:LinearThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt (-938)

#endif

/* eml21__LinearAccelerationUomExt has binding name 'eml21__LinearAccelerationUomExt' for type 'eml21:LinearAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt (-937)

#endif

/* eml21__LightExposureUomExt has binding name 'eml21__LightExposureUomExt' for type 'eml21:LightExposureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt (-936)

#endif

/* eml21__LengthUomExt has binding name 'eml21__LengthUomExt' for type 'eml21:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt (-935)

#endif

/* eml21__LengthPerVolumeUomExt has binding name 'eml21__LengthPerVolumeUomExt' for type 'eml21:LengthPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt (-934)

#endif

/* eml21__LengthPerTimeUomExt has binding name 'eml21__LengthPerTimeUomExt' for type 'eml21:LengthPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt (-933)

#endif

/* eml21__LengthPerTemperatureUomExt has binding name 'eml21__LengthPerTemperatureUomExt' for type 'eml21:LengthPerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt (-932)

#endif

/* eml21__LengthPerPressureUomExt has binding name 'eml21__LengthPerPressureUomExt' for type 'eml21:LengthPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt (-931)

#endif

/* eml21__LengthPerMassUomExt has binding name 'eml21__LengthPerMassUomExt' for type 'eml21:LengthPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt (-930)

#endif

/* eml21__LengthPerLengthUomExt has binding name 'eml21__LengthPerLengthUomExt' for type 'eml21:LengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt (-929)

#endif

/* eml21__KinematicViscosityUomExt has binding name 'eml21__KinematicViscosityUomExt' for type 'eml21:KinematicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt (-928)

#endif

/* eml21__IsothermalCompressibilityUomExt has binding name 'eml21__IsothermalCompressibilityUomExt' for type 'eml21:IsothermalCompressibilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt (-927)

#endif

/* eml21__InductanceUomExt has binding name 'eml21__InductanceUomExt' for type 'eml21:InductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt (-926)

#endif

/* eml21__IlluminanceUomExt has binding name 'eml21__IlluminanceUomExt' for type 'eml21:IlluminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt (-925)

#endif

/* eml21__HeatTransferCoefficientUomExt has binding name 'eml21__HeatTransferCoefficientUomExt' for type 'eml21:HeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt (-924)

#endif

/* eml21__HeatFlowRateUomExt has binding name 'eml21__HeatFlowRateUomExt' for type 'eml21:HeatFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt (-923)

#endif

/* eml21__HeatCapacityUomExt has binding name 'eml21__HeatCapacityUomExt' for type 'eml21:HeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt (-922)

#endif

/* eml21__FrequencyUomExt has binding name 'eml21__FrequencyUomExt' for type 'eml21:FrequencyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt (-921)

#endif

/* eml21__FrequencyIntervalUomExt has binding name 'eml21__FrequencyIntervalUomExt' for type 'eml21:FrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt (-920)

#endif

/* eml21__ForceUomExt has binding name 'eml21__ForceUomExt' for type 'eml21:ForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt (-919)

#endif

/* eml21__ForcePerVolumeUomExt has binding name 'eml21__ForcePerVolumeUomExt' for type 'eml21:ForcePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt (-918)

#endif

/* eml21__ForcePerLengthUomExt has binding name 'eml21__ForcePerLengthUomExt' for type 'eml21:ForcePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt (-917)

#endif

/* eml21__ForcePerForceUomExt has binding name 'eml21__ForcePerForceUomExt' for type 'eml21:ForcePerForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt (-916)

#endif

/* eml21__ForceLengthPerLengthUomExt has binding name 'eml21__ForceLengthPerLengthUomExt' for type 'eml21:ForceLengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt (-915)

#endif

/* eml21__ForceAreaUomExt has binding name 'eml21__ForceAreaUomExt' for type 'eml21:ForceAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt (-914)

#endif

/* eml21__EnergyUomExt has binding name 'eml21__EnergyUomExt' for type 'eml21:EnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt (-913)

#endif

/* eml21__EnergyPerVolumeUomExt has binding name 'eml21__EnergyPerVolumeUomExt' for type 'eml21:EnergyPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt (-912)

#endif

/* eml21__EnergyPerMassUomExt has binding name 'eml21__EnergyPerMassUomExt' for type 'eml21:EnergyPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt (-911)

#endif

/* eml21__EnergyPerMassPerTimeUomExt has binding name 'eml21__EnergyPerMassPerTimeUomExt' for type 'eml21:EnergyPerMassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt (-910)

#endif

/* eml21__EnergyPerLengthUomExt has binding name 'eml21__EnergyPerLengthUomExt' for type 'eml21:EnergyPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt (-909)

#endif

/* eml21__EnergyPerAreaUomExt has binding name 'eml21__EnergyPerAreaUomExt' for type 'eml21:EnergyPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt (-908)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureUomExt has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureUomExt' for type 'eml21:EnergyLengthPerTimeAreaTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt (-907)

#endif

/* eml21__EnergyLengthPerAreaUomExt has binding name 'eml21__EnergyLengthPerAreaUomExt' for type 'eml21:EnergyLengthPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt (-906)

#endif

/* eml21__ElectromagneticMomentUomExt has binding name 'eml21__ElectromagneticMomentUomExt' for type 'eml21:ElectromagneticMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt (-905)

#endif

/* eml21__ElectricResistanceUomExt has binding name 'eml21__ElectricResistanceUomExt' for type 'eml21:ElectricResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt (-904)

#endif

/* eml21__ElectricResistancePerLengthUomExt has binding name 'eml21__ElectricResistancePerLengthUomExt' for type 'eml21:ElectricResistancePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt (-903)

#endif

/* eml21__ElectricPotentialDifferenceUomExt has binding name 'eml21__ElectricPotentialDifferenceUomExt' for type 'eml21:ElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt (-902)

#endif

/* eml21__ElectricFieldStrengthUomExt has binding name 'eml21__ElectricFieldStrengthUomExt' for type 'eml21:ElectricFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt (-901)

#endif

/* eml21__ElectricCurrentUomExt has binding name 'eml21__ElectricCurrentUomExt' for type 'eml21:ElectricCurrentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt (-900)

#endif

/* eml21__ElectricCurrentDensityUomExt has binding name 'eml21__ElectricCurrentDensityUomExt' for type 'eml21:ElectricCurrentDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt (-899)

#endif

/* eml21__ElectricConductivityUomExt has binding name 'eml21__ElectricConductivityUomExt' for type 'eml21:ElectricConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt (-898)

#endif

/* eml21__ElectricConductanceUomExt has binding name 'eml21__ElectricConductanceUomExt' for type 'eml21:ElectricConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt (-897)

#endif

/* eml21__ElectricChargeUomExt has binding name 'eml21__ElectricChargeUomExt' for type 'eml21:ElectricChargeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt (-896)

#endif

/* eml21__ElectricChargePerVolumeUomExt has binding name 'eml21__ElectricChargePerVolumeUomExt' for type 'eml21:ElectricChargePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt (-895)

#endif

/* eml21__ElectricChargePerMassUomExt has binding name 'eml21__ElectricChargePerMassUomExt' for type 'eml21:ElectricChargePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt (-894)

#endif

/* eml21__ElectricChargePerAreaUomExt has binding name 'eml21__ElectricChargePerAreaUomExt' for type 'eml21:ElectricChargePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt (-893)

#endif

/* eml21__ElectricalResistivityUomExt has binding name 'eml21__ElectricalResistivityUomExt' for type 'eml21:ElectricalResistivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt (-892)

#endif

/* eml21__DynamicViscosityUomExt has binding name 'eml21__DynamicViscosityUomExt' for type 'eml21:DynamicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt (-891)

#endif

/* eml21__DoseEquivalentUomExt has binding name 'eml21__DoseEquivalentUomExt' for type 'eml21:DoseEquivalentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt (-890)

#endif

/* eml21__DipoleMomentUomExt has binding name 'eml21__DipoleMomentUomExt' for type 'eml21:DipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt (-889)

#endif

/* eml21__DimensionlessUomExt has binding name 'eml21__DimensionlessUomExt' for type 'eml21:DimensionlessUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt (-888)

#endif

/* eml21__DigitalStorageUomExt has binding name 'eml21__DigitalStorageUomExt' for type 'eml21:DigitalStorageUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt (-887)

#endif

/* eml21__DiffusiveTimeOfFlightUomExt has binding name 'eml21__DiffusiveTimeOfFlightUomExt' for type 'eml21:DiffusiveTimeOfFlightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt (-886)

#endif

/* eml21__DiffusionCoefficientUomExt has binding name 'eml21__DiffusionCoefficientUomExt' for type 'eml21:DiffusionCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt (-885)

#endif

/* eml21__DataTransferSpeedUomExt has binding name 'eml21__DataTransferSpeedUomExt' for type 'eml21:DataTransferSpeedUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt (-884)

#endif

/* eml21__CationExchangeCapacityUomExt has binding name 'eml21__CationExchangeCapacityUomExt' for type 'eml21:CationExchangeCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt (-883)

#endif

/* eml21__CapacitanceUomExt has binding name 'eml21__CapacitanceUomExt' for type 'eml21:CapacitanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt (-882)

#endif

/* eml21__AttenuationPerFrequencyIntervalUomExt has binding name 'eml21__AttenuationPerFrequencyIntervalUomExt' for type 'eml21:AttenuationPerFrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt (-881)

#endif

/* eml21__AreaUomExt has binding name 'eml21__AreaUomExt' for type 'eml21:AreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt (-880)

#endif

/* eml21__AreaPerVolumeUomExt has binding name 'eml21__AreaPerVolumeUomExt' for type 'eml21:AreaPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt (-879)

#endif

/* eml21__AreaPerTimeUomExt has binding name 'eml21__AreaPerTimeUomExt' for type 'eml21:AreaPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt (-878)

#endif

/* eml21__AreaPerMassUomExt has binding name 'eml21__AreaPerMassUomExt' for type 'eml21:AreaPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt (-877)

#endif

/* eml21__AreaPerCountUomExt has binding name 'eml21__AreaPerCountUomExt' for type 'eml21:AreaPerCountUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt (-876)

#endif

/* eml21__AreaPerAreaUomExt has binding name 'eml21__AreaPerAreaUomExt' for type 'eml21:AreaPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt (-875)

#endif

/* eml21__AreaPerAmountOfSubstanceUomExt has binding name 'eml21__AreaPerAmountOfSubstanceUomExt' for type 'eml21:AreaPerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt (-874)

#endif

/* eml21__APINeutronUomExt has binding name 'eml21__APINeutronUomExt' for type 'eml21:APINeutronUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt (-873)

#endif

/* eml21__APIGravityUomExt has binding name 'eml21__APIGravityUomExt' for type 'eml21:APIGravityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt (-872)

#endif

/* eml21__APIGammaRayUomExt has binding name 'eml21__APIGammaRayUomExt' for type 'eml21:APIGammaRayUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt (-871)

#endif

/* eml21__AngularVelocityUomExt has binding name 'eml21__AngularVelocityUomExt' for type 'eml21:AngularVelocityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt (-870)

#endif

/* eml21__AngularAccelerationUomExt has binding name 'eml21__AngularAccelerationUomExt' for type 'eml21:AngularAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt (-869)

#endif

/* eml21__AnglePerVolumeUomExt has binding name 'eml21__AnglePerVolumeUomExt' for type 'eml21:AnglePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt (-868)

#endif

/* eml21__AnglePerLengthUomExt has binding name 'eml21__AnglePerLengthUomExt' for type 'eml21:AnglePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt (-867)

#endif

/* eml21__AmountOfSubstanceUomExt has binding name 'eml21__AmountOfSubstanceUomExt' for type 'eml21:AmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt (-866)

#endif

/* eml21__AmountOfSubstancePerVolumeUomExt has binding name 'eml21__AmountOfSubstancePerVolumeUomExt' for type 'eml21:AmountOfSubstancePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt (-865)

#endif

/* eml21__AmountOfSubstancePerTimeUomExt has binding name 'eml21__AmountOfSubstancePerTimeUomExt' for type 'eml21:AmountOfSubstancePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt (-864)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaUomExt has binding name 'eml21__AmountOfSubstancePerTimePerAreaUomExt' for type 'eml21:AmountOfSubstancePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt (-863)

#endif

/* eml21__AmountOfSubstancePerAreaUomExt has binding name 'eml21__AmountOfSubstancePerAreaUomExt' for type 'eml21:AmountOfSubstancePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt (-862)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceUomExt has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceUomExt' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt (-861)

#endif

/* eml21__ActivityOfRadioactivityUomExt has binding name 'eml21__ActivityOfRadioactivityUomExt' for type 'eml21:ActivityOfRadioactivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt (-860)

#endif

/* eml21__AbsorbedDoseUomExt has binding name 'eml21__AbsorbedDoseUomExt' for type 'eml21:AbsorbedDoseUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt (-859)

#endif

/* eml21__UnitOfMeasureExt has binding name 'eml21__UnitOfMeasureExt' for type 'eml21:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt (-858)

#endif

/* eml21__ReferenceConditionExt has binding name 'eml21__ReferenceConditionExt' for type 'eml21:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt (-857)

#endif

/* eml21__QuantityClassKindExt has binding name 'eml21__QuantityClassKindExt' for type 'eml21:QuantityClassKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt (-856)

#endif

/* eml21__LithologyQualifierKindExt has binding name 'eml21__LithologyQualifierKindExt' for type 'eml21:LithologyQualifierKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt (-855)

#endif

/* eml21__LithologyKindExt has binding name 'eml21__LithologyKindExt' for type 'eml21:LithologyKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt (-854)

#endif

/* witsml2__SlotsInterval has binding name 'witsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SlotsInterval (-853)

#endif

/* witsml2__PerforationStatusHistory has binding name 'witsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationStatusHistory (-852)

#endif

/* witsml2__PerforationSetInterval has binding name 'witsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSetInterval (-851)

#endif

/* witsml2__OpenHoleInterval has binding name 'witsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpenHoleInterval (-850)

#endif

/* witsml2__IntervalStatusHistory has binding name 'witsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IntervalStatusHistory (-849)

#endif

/* witsml2__GravelPackInterval has binding name 'witsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GravelPackInterval (-848)

#endif

/* witsml2__ContactIntervalSet has binding name 'witsml2__ContactIntervalSet' for type 'witsml2:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ContactIntervalSet (-847)

#endif

/* witsml2__WellboreCompletion has binding name 'witsml2__WellboreCompletion' for type 'witsml2:WellboreCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreCompletion (-846)

#endif

/* witsml2__CompletionStatusHistory has binding name 'witsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CompletionStatusHistory (-845)

#endif

/* witsml2__WellCompletion has binding name 'witsml2__WellCompletion' for type 'witsml2:WellCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellCompletion (-844)

#endif

/* witsml2__WellboreMarkerSet has binding name 'witsml2__WellboreMarkerSet' for type 'witsml2:WellboreMarkerSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarkerSet (-843)

#endif

/* witsml2__WellboreMarker has binding name 'witsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreMarker (-842)

#endif

/* witsml2__Chromatograph has binding name 'witsml2__Chromatograph' for type 'witsml2:Chromatograph' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Chromatograph (-841)

#endif

/* witsml2__RopStatistics has binding name 'witsml2__RopStatistics' for type 'witsml2:RopStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RopStatistics (-840)

#endif

/* witsml2__TorqueCurrentStatistics has binding name 'witsml2__TorqueCurrentStatistics' for type 'witsml2:TorqueCurrentStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueCurrentStatistics (-839)

#endif

/* witsml2__RpmStatistics has binding name 'witsml2__RpmStatistics' for type 'witsml2:RpmStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RpmStatistics (-838)

#endif

/* witsml2__MudLogConcentrationParameter has binding name 'witsml2__MudLogConcentrationParameter' for type 'witsml2:MudLogConcentrationParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogConcentrationParameter (-837)

#endif

/* witsml2__GasPeak has binding name 'witsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasPeak (-836)

#endif

/* witsml2__GasInMud has binding name 'witsml2__GasInMud' for type 'witsml2:GasInMud' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GasInMud (-835)

#endif

/* witsml2__MudGas has binding name 'witsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudGas (-834)

#endif

/* witsml2__DrillingParameters has binding name 'witsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParameters (-833)

#endif

/* witsml2__MudLogReport has binding name 'witsml2__MudLogReport' for type 'witsml2:MudLogReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogReport (-832)

#endif

/* witsml2__MudLogStringParameter has binding name 'witsml2__MudLogStringParameter' for type 'witsml2:MudLogStringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogStringParameter (-831)

#endif

/* witsml2__WobStatistics has binding name 'witsml2__WobStatistics' for type 'witsml2:WobStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WobStatistics (-830)

#endif

/* witsml2__EcdStatistics has binding name 'witsml2__EcdStatistics' for type 'witsml2:EcdStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EcdStatistics (-829)

#endif

/* witsml2__MudDensityStatistics has binding name 'witsml2__MudDensityStatistics' for type 'witsml2:MudDensityStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudDensityStatistics (-828)

#endif

/* witsml2__DxcStatistics has binding name 'witsml2__DxcStatistics' for type 'witsml2:DxcStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DxcStatistics (-827)

#endif

/* witsml2__MudLogPressureGradientParameter has binding name 'witsml2__MudLogPressureGradientParameter' for type 'witsml2:MudLogPressureGradientParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureGradientParameter (-826)

#endif

/* witsml2__MudLogPressureParameter has binding name 'witsml2__MudLogPressureParameter' for type 'witsml2:MudLogPressureParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogPressureParameter (-825)

#endif

/* witsml2__MudLogForceParameter has binding name 'witsml2__MudLogForceParameter' for type 'witsml2:MudLogForceParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogForceParameter (-824)

#endif

/* witsml2__TorqueStatistics has binding name 'witsml2__TorqueStatistics' for type 'witsml2:TorqueStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TorqueStatistics (-823)

#endif

/* witsml2__MudLogParameter has binding name 'witsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLogParameter (-822)

#endif

/* witsml2__MudlogReportInterval has binding name 'witsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudlogReportInterval (-821)

#endif

/* witsml2__InterpretedGeologyInterval has binding name 'witsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeologyInterval (-820)

#endif

/* witsml2__GeochronologicalUnit has binding name 'witsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeochronologicalUnit (-819)

#endif

/* witsml2__CuttingsGeology has binding name 'witsml2__CuttingsGeology' for type 'witsml2:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeology (-818)

#endif

/* witsml2__CuttingsGeologyInterval has binding name 'witsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsGeologyInterval (-817)

#endif

/* witsml2__InterpretedIntervalLithology has binding name 'witsml2__InterpretedIntervalLithology' for type 'witsml2:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedIntervalLithology (-816)

#endif

/* witsml2__ShowEvaluationInterval has binding name 'witsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluationInterval (-815)

#endif

/* witsml2__CuttingsIntervalLithology has binding name 'witsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalLithology (-814)

#endif

/* witsml2__LithologyQualifier has binding name 'witsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LithologyQualifier (-813)

#endif

/* witsml2__LithostratigraphicUnit has binding name 'witsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LithostratigraphicUnit (-812)

#endif

/* witsml2__InterpretedGeology has binding name 'witsml2__InterpretedGeology' for type 'witsml2:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__InterpretedGeology (-811)

#endif

/* witsml2__ShowEvaluation has binding name 'witsml2__ShowEvaluation' for type 'witsml2:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShowEvaluation (-810)

#endif

/* witsml2__WellboreGeology has binding name 'witsml2__WellboreGeology' for type 'witsml2:WellboreGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeology (-809)

#endif

/* witsml2__CuttingsIntervalShow has binding name 'witsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CuttingsIntervalShow (-808)

#endif

/* witsml2__Tvd has binding name 'witsml2__Tvd' for type 'witsml2:Tvd' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Tvd (-807)

#endif

/* witsml2__IscwsaNameAndDescription has binding name 'witsml2__IscwsaNameAndDescription' for type 'witsml2:IscwsaNameAndDescription' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNameAndDescription (-806)

#endif

/* witsml2__IscwsaNomenclature has binding name 'witsml2__IscwsaNomenclature' for type 'witsml2:IscwsaNomenclature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclature (-805)

#endif

/* witsml2__ToolErrorTermSet has binding name 'witsml2__ToolErrorTermSet' for type 'witsml2:ToolErrorTermSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorTermSet (-804)

#endif

/* witsml2__IscwsaErrorCoefficient has binding name 'witsml2__IscwsaErrorCoefficient' for type 'witsml2:IscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorCoefficient (-803)

#endif

/* witsml2__IscwsaErrorTerm has binding name 'witsml2__IscwsaErrorTerm' for type 'witsml2:IscwsaErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTerm (-802)

#endif

/* witsml2__IscwsaNomenclatureConstant has binding name 'witsml2__IscwsaNomenclatureConstant' for type 'witsml2:IscwsaNomenclatureConstant' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaNomenclatureConstant (-801)

#endif

/* witsml2__Depth has binding name 'witsml2__Depth' for type 'witsml2:Depth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Depth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Depth (-800)

#endif

/* witsml2__Inc has binding name 'witsml2__Inc' for type 'witsml2:Inc' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Inc
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Inc (-799)

#endif

/* witsml2__Azi has binding name 'witsml2__Azi' for type 'witsml2:Azi' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Azi
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Azi (-798)

#endif

/* witsml2__AbstractIscwsaErrorCoefficient has binding name 'witsml2__AbstractIscwsaErrorCoefficient' for type 'witsml2:AbstractIscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIscwsaErrorCoefficient (-797)

#endif

/* witsml2__SurveySection has binding name 'witsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveySection (-796)

#endif

/* witsml2__SurveyProgram has binding name 'witsml2__SurveyProgram' for type 'witsml2:SurveyProgram' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurveyProgram (-795)

#endif

/* witsml2__ISO13503_USCORE2SieveAnalysisData has binding name 'witsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2SieveAnalysisData (-794)

#endif

/* witsml2__StimJobDiversion has binding name 'witsml2__StimJobDiversion' for type 'witsml2:StimJobDiversion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiversion (-793)

#endif

/* witsml2__StimJobLogCatalog has binding name 'witsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobLogCatalog (-792)

#endif

/* witsml2__StimPerforationClusterSet has binding name 'witsml2__StimPerforationClusterSet' for type 'witsml2:StimPerforationClusterSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationClusterSet (-791)

#endif

/* witsml2__StimJobDiagnosticSession has binding name 'witsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobDiagnosticSession (-790)

#endif

/* witsml2__StimJobStage has binding name 'witsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStage (-789)

#endif

/* witsml2__StimShutInPressure has binding name 'witsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimShutInPressure (-788)

#endif

/* witsml2__StimFetTest has binding name 'witsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFetTest (-787)

#endif

/* witsml2__ISO13503_USCORE2CrushTestData has binding name 'witsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ISO13503_USCORE2CrushTestData (-786)

#endif

/* witsml2__StimEvent has binding name 'witsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimEvent (-785)

#endif

/* witsml2__StimJob has binding name 'witsml2__StimJob' for type 'witsml2:StimJob' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJob (-784)

#endif

/* witsml2__StimMaterial has binding name 'witsml2__StimMaterial' for type 'witsml2:StimMaterial' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterial (-783)

#endif

/* witsml2__StimStepTest has binding name 'witsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepTest (-782)

#endif

/* witsml2__StimJobStep has binding name 'witsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobStep (-781)

#endif

/* witsml2__StimPressureFlowRate has binding name 'witsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPressureFlowRate (-780)

#endif

/* witsml2__StimISO13503_USCORE2Properties has binding name 'witsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE2Properties (-779)

#endif

/* witsml2__StimAdditive has binding name 'witsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimAdditive (-778)

#endif

/* witsml2__StimMaterialQuantity has binding name 'witsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimMaterialQuantity (-777)

#endif

/* witsml2__StimStepDownTest has binding name 'witsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimStepDownTest (-776)

#endif

/* witsml2__StimProppantAgent has binding name 'witsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimProppantAgent (-775)

#endif

/* witsml2__StimISO13503_USCORE5Point has binding name 'witsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimISO13503_USCORE5Point (-774)

#endif

/* witsml2__StimJobMaterialCatalog has binding name 'witsml2__StimJobMaterialCatalog' for type 'witsml2:StimJobMaterialCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimJobMaterialCatalog (-773)

#endif

/* witsml2__StimPumpFlowBackTestStep has binding name 'witsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTestStep (-772)

#endif

/* witsml2__StimFluid has binding name 'witsml2__StimFluid' for type 'witsml2:StimFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFluid (-771)

#endif

/* witsml2__StimFlowPath has binding name 'witsml2__StimFlowPath' for type 'witsml2:StimFlowPath' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimFlowPath (-770)

#endif

/* witsml2__StimPerforationCluster has binding name 'witsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPerforationCluster (-769)

#endif

/* witsml2__StimPumpFlowBackTest has binding name 'witsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimPumpFlowBackTest (-768)

#endif

/* witsml2__StimReservoirInterval has binding name 'witsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimReservoirInterval (-767)

#endif

/* witsml2__StimTubular has binding name 'witsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StimTubular (-766)

#endif

/* witsml2__Risk has binding name 'witsml2__Risk' for type 'witsml2:Risk' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Risk (-765)

#endif

/* witsml2__Rig has binding name 'witsml2__Rig' for type 'witsml2:Rig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Rig (-764)

#endif

/* witsml2__SurfaceEquipment has binding name 'witsml2__SurfaceEquipment' for type 'witsml2:SurfaceEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SurfaceEquipment (-763)

#endif

/* witsml2__Degasser has binding name 'witsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Degasser (-762)

#endif

/* witsml2__Hydrocyclone has binding name 'witsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Hydrocyclone (-761)

#endif

/* witsml2__Centrifuge has binding name 'witsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Centrifuge (-760)

#endif

/* witsml2__Shaker has binding name 'witsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Shaker (-759)

#endif

/* witsml2__MudPump has binding name 'witsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudPump (-758)

#endif

/* witsml2__Pit has binding name 'witsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Pit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Pit (-757)

#endif

/* witsml2__BopComponent has binding name 'witsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BopComponent (-756)

#endif

/* witsml2__Bop has binding name 'witsml2__Bop' for type 'witsml2:Bop' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Bop
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Bop (-755)

#endif

/* witsml2__RigUtilization has binding name 'witsml2__RigUtilization' for type 'witsml2:RigUtilization' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigUtilization (-754)

#endif

/* witsml2__IscwsaAuthorizationData has binding name 'witsml2__IscwsaAuthorizationData' for type 'witsml2:IscwsaAuthorizationData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaAuthorizationData (-753)

#endif

/* witsml2__ToolErrorModel has binding name 'witsml2__ToolErrorModel' for type 'witsml2:ToolErrorModel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ToolErrorModel (-752)

#endif

/* witsml2__MeasureOrQuantity has binding name 'witsml2__MeasureOrQuantity' for type 'witsml2:MeasureOrQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasureOrQuantity (-751)

#endif

/* witsml2__IscwsaErrorTermValue has binding name 'witsml2__IscwsaErrorTermValue' for type 'witsml2:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaErrorTermValue (-750)

#endif

/* witsml2__IscwsaModelParameters has binding name 'witsml2__IscwsaModelParameters' for type 'witsml2:IscwsaModelParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaModelParameters (-749)

#endif

/* witsml2__IscwsaSurveyToolOperatingInterval has binding name 'witsml2__IscwsaSurveyToolOperatingInterval' for type 'witsml2:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingInterval (-748)

#endif

/* witsml2__IscwsaSurveyToolOperatingCondition has binding name 'witsml2__IscwsaSurveyToolOperatingCondition' for type 'witsml2:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IscwsaSurveyToolOperatingCondition (-747)

#endif

/* witsml2__RefWellboreTrajectoryStation has binding name 'witsml2__RefWellboreTrajectoryStation' for type 'witsml2:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreTrajectoryStation (-746)

#endif

/* witsml2__StnTrajMatrixCov has binding name 'witsml2__StnTrajMatrixCov' for type 'witsml2:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajMatrixCov (-745)

#endif

/* witsml2__StnTrajValid has binding name 'witsml2__StnTrajValid' for type 'witsml2:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajValid (-744)

#endif

/* witsml2__StnTrajCorUsed has binding name 'witsml2__StnTrajCorUsed' for type 'witsml2:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajCorUsed (-743)

#endif

/* witsml2__StnTrajRawData has binding name 'witsml2__StnTrajRawData' for type 'witsml2:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StnTrajRawData (-742)

#endif

/* witsml2__TrajectoryStation has binding name 'witsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TrajectoryStation (-741)

#endif

/* witsml2__Trajectory has binding name 'witsml2__Trajectory' for type 'witsml2:Trajectory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Trajectory (-740)

#endif

/* witsml2__ShakerOp has binding name 'witsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerOp (-739)

#endif

/* witsml2__PumpOp has binding name 'witsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PumpOp (-738)

#endif

/* witsml2__RigResponse has binding name 'witsml2__RigResponse' for type 'witsml2:RigResponse' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RigResponse (-737)

#endif

/* witsml2__Inventory has binding name 'witsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Inventory (-736)

#endif

/* witsml2__MudLosses has binding name 'witsml2__MudLosses' for type 'witsml2:MudLosses' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudLosses (-735)

#endif

/* witsml2__MudVolume has binding name 'witsml2__MudVolume' for type 'witsml2:MudVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MudVolume (-734)

#endif

/* witsml2__PitVolume has binding name 'witsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PitVolume (-733)

#endif

/* witsml2__Scr has binding name 'witsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Scr
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Scr (-732)

#endif

/* witsml2__DayCost has binding name 'witsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DayCost (-731)

#endif

/* witsml2__OpsReport has binding name 'witsml2__OpsReport' for type 'witsml2:OpsReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OpsReport (-730)

#endif

/* witsml2__AnchorState has binding name 'witsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AnchorState (-729)

#endif

/* witsml2__ItemWtPerUnit has binding name 'witsml2__ItemWtPerUnit' for type 'witsml2:ItemWtPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemWtPerUnit (-728)

#endif

/* witsml2__ItemVolPerUnit has binding name 'witsml2__ItemVolPerUnit' for type 'witsml2:ItemVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ItemVolPerUnit (-727)

#endif

/* witsml2__AbstractItemWtOrVolPerUnit has binding name 'witsml2__AbstractItemWtOrVolPerUnit' for type 'witsml2:AbstractItemWtOrVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractItemWtOrVolPerUnit (-726)

#endif

/* witsml2__Weather has binding name 'witsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Weather
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Weather (-725)

#endif

/* witsml2__SupportCraft has binding name 'witsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_1_witsml2__SupportCraft (-724)

#endif

/* witsml2__Personnel has binding name 'witsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Personnel (-723)

#endif

/* witsml2__Incident has binding name 'witsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Incident
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Incident (-722)

#endif

/* witsml2__Hse has binding name 'witsml2__Hse' for type 'witsml2:Hse' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Hse
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Hse (-721)

#endif

/* witsml2__ShakerScreen has binding name 'witsml2__ShakerScreen' for type 'witsml2:ShakerScreen' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ShakerScreen (-720)

#endif

/* witsml2__OtherConnectionType has binding name 'witsml2__OtherConnectionType' for type 'witsml2:OtherConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__OtherConnectionType (-719)

#endif

/* witsml2__RodConnectionType has binding name 'witsml2__RodConnectionType' for type 'witsml2:RodConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RodConnectionType (-718)

#endif

/* witsml2__TubingConnectionType has binding name 'witsml2__TubingConnectionType' for type 'witsml2:TubingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubingConnectionType (-717)

#endif

/* witsml2__CasingConnectionType has binding name 'witsml2__CasingConnectionType' for type 'witsml2:CasingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CasingConnectionType (-716)

#endif

/* witsml2__AbstractConnectionType has binding name 'witsml2__AbstractConnectionType' for type 'witsml2:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractConnectionType (-715)

#endif

/* witsml2__PerforationSet has binding name 'witsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSet (-714)

#endif

/* witsml2__PerforationSets has binding name 'witsml2__PerforationSets' for type 'witsml2:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforationSets (-713)

#endif

/* witsml2__PerfHole has binding name 'witsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfHole (-712)

#endif

/* witsml2__PerfSlot has binding name 'witsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerfSlot (-711)

#endif

/* witsml2__ExtPropNameValue has binding name 'witsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ExtPropNameValue (-710)

#endif

/* witsml2__Equipment has binding name 'witsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Equipment (-709)

#endif

/* witsml2__EquipmentSet has binding name 'witsml2__EquipmentSet' for type 'witsml2:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentSet (-708)

#endif

/* witsml2__DownholeStringSet has binding name 'witsml2__DownholeStringSet' for type 'witsml2:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringSet (-707)

#endif

/* witsml2__GeologyFeature has binding name 'witsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeologyFeature (-706)

#endif

/* witsml2__Borehole has binding name 'witsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Borehole (-705)

#endif

/* witsml2__BoreholeString has binding name 'witsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeString (-704)

#endif

/* witsml2__BoreholeStringSet has binding name 'witsml2__BoreholeStringSet' for type 'witsml2:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringSet (-703)

#endif

/* witsml2__StringAccessory has binding name 'witsml2__StringAccessory' for type 'witsml2:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringAccessory (-702)

#endif

/* witsml2__Assembly has binding name 'witsml2__Assembly' for type 'witsml2:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Assembly (-701)

#endif

/* witsml2__EquipmentConnection has binding name 'witsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EquipmentConnection (-700)

#endif

/* witsml2__ReferenceContainer has binding name 'witsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReferenceContainer (-699)

#endif

/* witsml2__ObjectSequence has binding name 'witsml2__ObjectSequence' for type 'witsml2:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectSequence (-698)

#endif

/* witsml2__EventRefInfo has binding name 'witsml2__EventRefInfo' for type 'witsml2:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventRefInfo (-697)

#endif

/* witsml2__EventInfo has binding name 'witsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventInfo (-696)

#endif

/* witsml2__StringEquipment has binding name 'witsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipment (-695)

#endif

/* witsml2__StringEquipmentSet has binding name 'witsml2__StringEquipmentSet' for type 'witsml2:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__StringEquipmentSet (-694)

#endif

/* witsml2__DownholeString has binding name 'witsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeString (-693)

#endif

/* witsml2__DownholeComponent has binding name 'witsml2__DownholeComponent' for type 'witsml2:DownholeComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponent (-692)

#endif

/* witsml2__Participant has binding name 'witsml2__Participant' for type 'witsml2:Participant' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Participant
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Participant (-691)

#endif

/* witsml2__MemberObject has binding name 'witsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MemberObject (-690)

#endif

/* witsml2__DownholeExtension has binding name 'witsml2__DownholeExtension' for type 'witsml2:DownholeExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeExtension (-689)

#endif

/* witsml2__FluidReportExtension has binding name 'witsml2__FluidReportExtension' for type 'witsml2:FluidReportExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidReportExtension (-688)

#endif

/* witsml2__Perforating has binding name 'witsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Perforating (-687)

#endif

/* witsml2__PerforatingExtension has binding name 'witsml2__PerforatingExtension' for type 'witsml2:PerforatingExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PerforatingExtension (-686)

#endif

/* witsml2__WaitingOnExtension has binding name 'witsml2__WaitingOnExtension' for type 'witsml2:WaitingOnExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WaitingOnExtension (-685)

#endif

/* witsml2__PressureTestExtension has binding name 'witsml2__PressureTestExtension' for type 'witsml2:PressureTestExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PressureTestExtension (-684)

#endif

/* witsml2__JobExtension has binding name 'witsml2__JobExtension' for type 'witsml2:JobExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__JobExtension (-683)

#endif

/* witsml2__AcidizefracExtension has binding name 'witsml2__AcidizefracExtension' for type 'witsml2:AcidizefracExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AcidizefracExtension (-682)

#endif

/* witsml2__BHPExtension has binding name 'witsml2__BHPExtension' for type 'witsml2:BHPExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BHPExtension (-681)

#endif

/* witsml2__LostCirculationExtension has binding name 'witsml2__LostCirculationExtension' for type 'witsml2:LostCirculationExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LostCirculationExtension (-680)

#endif

/* witsml2__DirectionalSurveyExtension has binding name 'witsml2__DirectionalSurveyExtension' for type 'witsml2:DirectionalSurveyExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DirectionalSurveyExtension (-679)

#endif

/* witsml2__CleanFillExtension has binding name 'witsml2__CleanFillExtension' for type 'witsml2:CleanFillExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CleanFillExtension (-678)

#endif

/* witsml2__CementExtension has binding name 'witsml2__CementExtension' for type 'witsml2:CementExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementExtension (-677)

#endif

/* witsml2__AbstractEventExtension has binding name 'witsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractEventExtension (-676)

#endif

/* witsml2__DownholeStringReference has binding name 'witsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeStringReference (-675)

#endif

/* witsml2__BoreholeStringReference has binding name 'witsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BoreholeStringReference (-674)

#endif

/* witsml2__DownholeComponentReference has binding name 'witsml2__DownholeComponentReference' for type 'witsml2:DownholeComponentReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DownholeComponentReference (-673)

#endif

/* witsml2__EventType has binding name 'witsml2__EventType' for type 'witsml2:EventType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__EventType
#define SOAP_TYPE_gsoap_eml2_1_witsml2__EventType (-672)

#endif

/* witsml2__WellCMLedger has binding name 'witsml2__WellCMLedger' for type 'witsml2:WellCMLedger' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellCMLedger (-671)

#endif

/* witsml2__DepthRegRectangle has binding name 'witsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegRectangle (-670)

#endif

/* witsml2__DepthRegParameter has binding name 'witsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegParameter (-669)

#endif

/* witsml2__DepthRegPoint has binding name 'witsml2__DepthRegPoint' for type 'witsml2:DepthRegPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegPoint (-668)

#endif

/* witsml2__DepthRegCalibrationPoint has binding name 'witsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegCalibrationPoint (-667)

#endif

/* witsml2__DepthRegLogSection has binding name 'witsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogSection (-666)

#endif

/* witsml2__DepthRegImage has binding name 'witsml2__DepthRegImage' for type 'witsml2:DepthRegImage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegImage (-665)

#endif

/* witsml2__DepthRegTrackCurve has binding name 'witsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrackCurve (-664)

#endif

/* witsml2__DepthRegLogRect has binding name 'witsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegLogRect (-663)

#endif

/* witsml2__DepthRegTrack has binding name 'witsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthRegTrack (-662)

#endif

/* witsml2__ChannelValueContext has binding name 'witsml2__ChannelValueContext' for type 'witsml2:ChannelValueContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelValueContext (-661)

#endif

/* witsml2__LogChannelAxis has binding name 'witsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_witsml2__LogChannelAxis (-660)

#endif

/* witsml2__ObjectContext has binding name 'witsml2__ObjectContext' for type 'witsml2:ObjectContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ObjectContext (-659)

#endif

/* witsml2__IndexRangeContext has binding name 'witsml2__IndexRangeContext' for type 'witsml2:IndexRangeContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__IndexRangeContext (-658)

#endif

/* witsml2__AbstractLogDataContext has binding name 'witsml2__AbstractLogDataContext' for type 'witsml2:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractLogDataContext (-657)

#endif

/* witsml2__Channel has binding name 'witsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Channel (-656)

#endif

/* witsml2__DepthIndexValue has binding name 'witsml2__DepthIndexValue' for type 'witsml2:DepthIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DepthIndexValue (-655)

#endif

/* witsml2__TimeIndexValue has binding name 'witsml2__TimeIndexValue' for type 'witsml2:TimeIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TimeIndexValue (-654)

#endif

/* witsml2__AbstractIndexValue has binding name 'witsml2__AbstractIndexValue' for type 'witsml2:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractIndexValue (-653)

#endif

/* witsml2__Log has binding name 'witsml2__Log' for type 'witsml2:Log' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Log
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Log (-652)

#endif

/* witsml2__ChannelIndex has binding name 'witsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelIndex (-651)

#endif

/* witsml2__PassIndexedDepth has binding name 'witsml2__PassIndexedDepth' for type 'witsml2:PassIndexedDepth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PassIndexedDepth (-650)

#endif

/* witsml2__PointMetadata has binding name 'witsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PointMetadata (-649)

#endif

/* witsml2__ChannelData has binding name 'witsml2__ChannelData' for type 'witsml2:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelData (-648)

#endif

/* witsml2__ChannelSet has binding name 'witsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ChannelSet (-647)

#endif

/* witsml2__WellboreGeometrySection has binding name 'witsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometrySection (-646)

#endif

/* witsml2__WellboreGeometry has binding name 'witsml2__WellboreGeometry' for type 'witsml2:WellboreGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellboreGeometry (-645)

#endif

/* witsml2__CementStageReport has binding name 'witsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageReport (-644)

#endif

/* witsml2__FluidLocation has binding name 'witsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidLocation (-643)

#endif

/* witsml2__CementAdditive has binding name 'witsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementAdditive (-642)

#endif

/* witsml2__CementPumpScheduleStep has binding name 'witsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementPumpScheduleStep (-641)

#endif

/* witsml2__CementingFluid has binding name 'witsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementingFluid (-640)

#endif

/* witsml2__AbstractCementStage has binding name 'witsml2__AbstractCementStage' for type 'witsml2:AbstractCementStage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementStage (-639)

#endif

/* witsml2__CementJob has binding name 'witsml2__CementJob' for type 'witsml2:CementJob' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJob (-638)

#endif

/* witsml2__AbstractCementJob has binding name 'witsml2__AbstractCementJob' for type 'witsml2:AbstractCementJob' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractCementJob (-637)

#endif

/* witsml2__CementJobDesign has binding name 'witsml2__CementJobDesign' for type 'witsml2:CementJobDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobDesign (-636)

#endif

/* witsml2__CementDesignStage has binding name 'witsml2__CementDesignStage' for type 'witsml2:CementDesignStage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementDesignStage (-635)

#endif

/* witsml2__CementJobReport has binding name 'witsml2__CementJobReport' for type 'witsml2:CementJobReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobReport (-634)

#endif

/* witsml2__CementJobEvaluation has binding name 'witsml2__CementJobEvaluation' for type 'witsml2:CementJobEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementJobEvaluation (-633)

#endif

/* witsml2__CementStageDesign has binding name 'witsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_1_witsml2__CementStageDesign (-632)

#endif

/* witsml2__BendOffset has binding name 'witsml2__BendOffset' for type 'witsml2:BendOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BendOffset (-631)

#endif

/* witsml2__BendAngle has binding name 'witsml2__BendAngle' for type 'witsml2:BendAngle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BendAngle (-630)

#endif

/* witsml2__AbstractRotarySteerableTool has binding name 'witsml2__AbstractRotarySteerableTool' for type 'witsml2:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractRotarySteerableTool (-629)

#endif

/* witsml2__RotarySteerableTool has binding name 'witsml2__RotarySteerableTool' for type 'witsml2:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RotarySteerableTool (-628)

#endif

/* witsml2__HoleOpener has binding name 'witsml2__HoleOpener' for type 'witsml2:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_witsml2__HoleOpener (-627)

#endif

/* witsml2__Bend has binding name 'witsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Bend
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Bend (-626)

#endif

/* witsml2__Stabilizer has binding name 'witsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Stabilizer (-625)

#endif

/* witsml2__Motor has binding name 'witsml2__Motor' for type 'witsml2:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Motor
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Motor (-624)

#endif

/* witsml2__Sensor has binding name 'witsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Sensor (-623)

#endif

/* witsml2__MwdTool has binding name 'witsml2__MwdTool' for type 'witsml2:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MwdTool (-622)

#endif

/* witsml2__Jar has binding name 'witsml2__Jar' for type 'witsml2:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Jar
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Jar (-621)

#endif

/* witsml2__Connection has binding name 'witsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Connection
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Connection (-620)

#endif

/* witsml2__Nozzle has binding name 'witsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Nozzle (-619)

#endif

/* witsml2__BitRecord has binding name 'witsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BitRecord (-618)

#endif

/* witsml2__TubularComponent has binding name 'witsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TubularComponent (-617)

#endif

/* witsml2__Tubular has binding name 'witsml2__Tubular' for type 'witsml2:Tubular' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Tubular (-616)

#endif

/* witsml2__BottomHoleStaticTemperature has binding name 'witsml2__BottomHoleStaticTemperature' for type 'witsml2:BottomHoleStaticTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleStaticTemperature (-615)

#endif

/* witsml2__BottomHoleCirculatingTemperature has binding name 'witsml2__BottomHoleCirculatingTemperature' for type 'witsml2:BottomHoleCirculatingTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BottomHoleCirculatingTemperature (-614)

#endif

/* witsml2__AbstractBottomHoleTemperature has binding name 'witsml2__AbstractBottomHoleTemperature' for type 'witsml2:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractBottomHoleTemperature (-613)

#endif

/* witsml2__DrillReportGasReadingInfo has binding name 'witsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportGasReadingInfo (-612)

#endif

/* witsml2__DrillReportPerfInfo has binding name 'witsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPerfInfo (-611)

#endif

/* witsml2__DrillReportStratInfo has binding name 'witsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStratInfo (-610)

#endif

/* witsml2__DrillReportControlIncidentInfo has binding name 'witsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportControlIncidentInfo (-609)

#endif

/* witsml2__DrillReportEquipFailureInfo has binding name 'witsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportEquipFailureInfo (-608)

#endif

/* witsml2__DrillReportLithShowInfo has binding name 'witsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLithShowInfo (-607)

#endif

/* witsml2__DrillReportFormTestInfo has binding name 'witsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportFormTestInfo (-606)

#endif

/* witsml2__DrillReportWellTestInfo has binding name 'witsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellTestInfo (-605)

#endif

/* witsml2__DrillReportCoreInfo has binding name 'witsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportCoreInfo (-604)

#endif

/* witsml2__DrillReportLogInfo has binding name 'witsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportLogInfo (-603)

#endif

/* witsml2__DrillActivity has binding name 'witsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillActivity (-602)

#endif

/* witsml2__DrillReportSurveyStation has binding name 'witsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportSurveyStation (-601)

#endif

/* witsml2__TimestampedCommentString has binding name 'witsml2__TimestampedCommentString' for type 'witsml2:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_witsml2__TimestampedCommentString (-600)

#endif

/* witsml2__DrillReportPorePressure has binding name 'witsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportPorePressure (-599)

#endif

/* witsml2__Rheometer has binding name 'witsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Rheometer (-598)

#endif

/* witsml2__DrillReportStatusInfo has binding name 'witsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportStatusInfo (-597)

#endif

/* witsml2__DrillReportWellboreInfo has binding name 'witsml2__DrillReportWellboreInfo' for type 'witsml2:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReportWellboreInfo (-596)

#endif

/* witsml2__DrillReport has binding name 'witsml2__DrillReport' for type 'witsml2:DrillReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillReport (-595)

#endif

/* witsml2__FluidsReport has binding name 'witsml2__FluidsReport' for type 'witsml2:FluidsReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml2__FluidsReport (-594)

#endif

/* witsml2__RheometerViscosity has binding name 'witsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RheometerViscosity (-593)

#endif

/* witsml2__Fluid has binding name 'witsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Fluid (-592)

#endif

/* witsml2__DrillingParams has binding name 'witsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DrillingParams (-591)

#endif

/* witsml2__BhaRun has binding name 'witsml2__BhaRun' for type 'witsml2:BhaRun' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_1_witsml2__BhaRun (-590)

#endif

/* witsml2__PublicLandSurveySystem has binding name 'witsml2__PublicLandSurveySystem' for type 'witsml2:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_witsml2__PublicLandSurveySystem (-589)

#endif

/* witsml2__AbstractWellLocation has binding name 'witsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__AbstractWellLocation (-588)

#endif

/* witsml2__RefWellboreRig has binding name 'witsml2__RefWellboreRig' for type 'witsml2:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellboreRig (-587)

#endif

/* witsml2__RefWellbore has binding name 'witsml2__RefWellbore' for type 'witsml2:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml2__RefWellbore (-586)

#endif

/* witsml2__WellDatum has binding name 'witsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellDatum (-585)

#endif

/* witsml2__WellElevationCoord has binding name 'witsml2__WellElevationCoord' for type 'witsml2:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellElevationCoord (-584)

#endif

/* witsml2__Well has binding name 'witsml2__Well' for type 'witsml2:Well' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Well
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Well (-583)

#endif

/* witsml2__ProjectedWellLocation has binding name 'witsml2__ProjectedWellLocation' for type 'witsml2:ProjectedWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ProjectedWellLocation (-582)

#endif

/* witsml2__GeodeticWellLocation has binding name 'witsml2__GeodeticWellLocation' for type 'witsml2:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml2__GeodeticWellLocation (-581)

#endif

/* witsml2__ReferencePoint has binding name 'witsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_witsml2__ReferencePoint (-580)

#endif

/* witsml2__DistanceEastWest has binding name 'witsml2__DistanceEastWest' for type 'witsml2:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceEastWest (-579)

#endif

/* witsml2__DistanceNorthSouth has binding name 'witsml2__DistanceNorthSouth' for type 'witsml2:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml2__DistanceNorthSouth (-578)

#endif

/* witsml2__Wellbore has binding name 'witsml2__Wellbore' for type 'witsml2:Wellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Wellbore (-577)

#endif

/* witsml2__MeasuredDepthCoord has binding name 'witsml2__MeasuredDepthCoord' for type 'witsml2:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__MeasuredDepthCoord (-576)

#endif

/* witsml2__Cost has binding name 'witsml2__Cost' for type 'witsml2:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Cost
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Cost (-575)

#endif

/* witsml2__NameTag has binding name 'witsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_1_witsml2__NameTag (-574)

#endif

/* witsml2__WellVerticalDepthCoord has binding name 'witsml2__WellVerticalDepthCoord' for type 'witsml2:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml2__WellVerticalDepthCoord (-573)

#endif

/* witsml2__Attachment has binding name 'witsml2__Attachment' for type 'witsml2:Attachment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_1_witsml2__Attachment (-572)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType has binding name 'gsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gsr__SC_USCORECRS_USCOREPropertyType (-571)

#endif

/* gco__DateTime_USCOREPropertyType has binding name 'gco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__DateTime_USCOREPropertyType (-570)

#endif

/* gco__CodeListValue_USCOREType has binding name 'gco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__CodeListValue_USCOREType (-569)

#endif

/* gco__Date_USCOREPropertyType has binding name 'gco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Date_USCOREPropertyType (-568)

#endif

/* gco__Real_USCOREPropertyType has binding name 'gco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Real_USCOREPropertyType (-567)

#endif

/* gco__Boolean_USCOREPropertyType has binding name 'gco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__Boolean_USCOREPropertyType (-566)

#endif

/* gco__CharacterString_USCOREPropertyType has binding name 'gco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gco__CharacterString_USCOREPropertyType (-565)

#endif

/* gco__AbstractObject_USCOREType has binding name 'gco__AbstractObject_USCOREType' for type 'gco:AbstractObject_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gco__AbstractObject_USCOREType (-564)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType has binding name 'gts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gts__TM_USCOREPrimitive_USCOREPropertyType (-563)

#endif

/* gmd__AbstractDQ_USCOREResult_USCOREType has binding name 'gmd__AbstractDQ_USCOREResult_USCOREType' for type 'gmd:AbstractDQ_Result_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREResult_USCOREType (-562)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType has binding name 'gmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREResult_USCOREPropertyType (-561)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType has binding name 'gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-560)

#endif

/* gmd__CI_USCORESeries_USCOREType has binding name 'gmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREType (-559)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType has binding name 'gmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORESeries_USCOREPropertyType (-558)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType has binding name 'gmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-557)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType has binding name 'gmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORERoleCode_USCOREPropertyType (-556)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType has binding name 'gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-555)

#endif

/* gmd__URL_USCOREPropertyType has binding name 'gmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__URL_USCOREPropertyType (-554)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType has binding name 'gmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREType (-553)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType has binding name 'gmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-552)

#endif

/* gmd__CI_USCOREAddress_USCOREType has binding name 'gmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREType (-551)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType has binding name 'gmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREAddress_USCOREPropertyType (-550)

#endif

/* gmd__CI_USCORETelephone_USCOREType has binding name 'gmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREType (-549)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType has binding name 'gmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORETelephone_USCOREPropertyType (-548)

#endif

/* gmd__CI_USCOREContact_USCOREType has binding name 'gmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREType (-547)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType has binding name 'gmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREContact_USCOREPropertyType (-546)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREType (-545)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-544)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType has binding name 'gmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-543)

#endif

/* gmd__CI_USCOREDate_USCOREType has binding name 'gmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREType (-542)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType has binding name 'gmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCOREDate_USCOREPropertyType (-541)

#endif

/* gmd__CI_USCORECitation_USCOREType has binding name 'gmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREType (-540)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType has binding name 'gmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__CI_USCORECitation_USCOREPropertyType (-539)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType has binding name 'gmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREType (-538)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType has binding name 'gmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__MD_USCOREIdentifier_USCOREPropertyType (-537)

#endif

/* gmd__AbstractDQ_USCOREElement_USCOREType has binding name 'gmd__AbstractDQ_USCOREElement_USCOREType' for type 'gmd:AbstractDQ_Element_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREElement_USCOREType (-536)

#endif

/* gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType has binding name 'gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType' for type 'gmd:AbstractDQ_PositionalAccuracy_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-535)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREType (-534)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-533)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType has binding name 'gmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREType (-532)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType has binding name 'gmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-531)

#endif

/* gmd__AbstractEX_USCOREGeographicExtent_USCOREType has binding name 'gmd__AbstractEX_USCOREGeographicExtent_USCOREType' for type 'gmd:AbstractEX_GeographicExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-530)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-529)

#endif

/* gmd__EX_USCOREExtent_USCOREType has binding name 'gmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_gmd__EX_USCOREExtent_USCOREType (-528)

#endif

/* _gml__coordinateOperationAccuracy has binding name '_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_1__gml__coordinateOperationAccuracy (-527)

#endif

/* _gml__SecondDefiningParameter has binding name '_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1__gml__SecondDefiningParameter (-526)

#endif

/* _gml__secondDefiningParameter has binding name '_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1__gml__secondDefiningParameter (-525)

#endif

/* _gml__domainOfValidity has binding name '_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_1__gml__domainOfValidity (-524)

#endif

/* gml__VerticalDatumType has binding name 'gml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumType (-523)

#endif

/* gml__VerticalDatumPropertyType has binding name 'gml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalDatumPropertyType (-522)

#endif

/* gml__VerticalCSType has binding name 'gml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSType (-521)

#endif

/* gml__VerticalCSPropertyType has binding name 'gml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCSPropertyType (-520)

#endif

/* gml__VerticalCRSType has binding name 'gml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__VerticalCRSType (-519)

#endif

/* gml__GeodeticCRSPropertyType has binding name 'gml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSPropertyType (-518)

#endif

/* gml__CRSPropertyType has binding name 'gml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CRSPropertyType (-517)

#endif

/* gml__AbstractCoordinateOperationType has binding name 'gml__AbstractCoordinateOperationType' for type 'gml:AbstractCoordinateOperationType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateOperationType (-516)

#endif

/* gml__AbstractGeneralConversionType has binding name 'gml__AbstractGeneralConversionType' for type 'gml:AbstractGeneralConversionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralConversionType (-515)

#endif

/* gml__GeneralConversionPropertyType has binding name 'gml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeneralConversionPropertyType (-514)

#endif

/* gml__AbstractGeneralDerivedCRSType has binding name 'gml__AbstractGeneralDerivedCRSType' for type 'gml:AbstractGeneralDerivedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGeneralDerivedCRSType (-513)

#endif

/* gml__ProjectedCRSType has binding name 'gml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__ProjectedCRSType (-512)

#endif

/* gml__LengthType has binding name 'gml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_1_gml__LengthType (-511)

#endif

/* gml__EllipsoidType has binding name 'gml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidType (-510)

#endif

/* gml__EllipsoidPropertyType has binding name 'gml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidPropertyType (-509)

#endif

/* gml__MeasureType has binding name 'gml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_1_gml__MeasureType (-508)

#endif

/* gml__AngleType has binding name 'gml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_1_gml__AngleType (-507)

#endif

/* gml__PrimeMeridianType has binding name 'gml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianType (-506)

#endif

/* gml__PrimeMeridianPropertyType has binding name 'gml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__PrimeMeridianPropertyType (-505)

#endif

/* gml__AbstractDatumType has binding name 'gml__AbstractDatumType' for type 'gml:AbstractDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractDatumType (-504)

#endif

/* gml__GeodeticDatumType has binding name 'gml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumType (-503)

#endif

/* gml__GeodeticDatumPropertyType has binding name 'gml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticDatumPropertyType (-502)

#endif

/* gml__SphericalCSType has binding name 'gml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSType (-501)

#endif

/* gml__SphericalCSPropertyType has binding name 'gml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__SphericalCSPropertyType (-500)

#endif

/* gml__CartesianCSType has binding name 'gml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSType (-499)

#endif

/* gml__CartesianCSPropertyType has binding name 'gml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CartesianCSPropertyType (-498)

#endif

/* gml__CoordinateSystemAxisType has binding name 'gml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisType (-497)

#endif

/* gml__CoordinateSystemAxisPropertyType has binding name 'gml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__CoordinateSystemAxisPropertyType (-496)

#endif

/* gml__AbstractCoordinateSystemType has binding name 'gml__AbstractCoordinateSystemType' for type 'gml:AbstractCoordinateSystemType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCoordinateSystemType (-495)

#endif

/* gml__EllipsoidalCSType has binding name 'gml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSType (-494)

#endif

/* gml__EllipsoidalCSPropertyType has binding name 'gml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__EllipsoidalCSPropertyType (-493)

#endif

/* gml__TimePrimitivePropertyType has binding name 'gml__TimePrimitivePropertyType' for type 'gml:TimePrimitivePropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_1_gml__TimePrimitivePropertyType (-492)

#endif

/* gml__RelatedTimeType has binding name 'gml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_1_gml__RelatedTimeType (-491)

#endif

/* gml__AbstractTimeObjectType has binding name 'gml__AbstractTimeObjectType' for type 'gml:AbstractTimeObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimeObjectType (-490)

#endif

/* gml__AbstractTimePrimitiveType has binding name 'gml__AbstractTimePrimitiveType' for type 'gml:AbstractTimePrimitiveType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractTimePrimitiveType (-489)

#endif

/* gml__CodeType has binding name 'gml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_1_gml__CodeType (-488)

#endif

/* gml__CodeWithAuthorityType has binding name 'gml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_1_gml__CodeWithAuthorityType (-487)

#endif

/* gml__ReferenceType has binding name 'gml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_1_gml__ReferenceType (-486)

#endif

/* gml__StringOrRefType has binding name 'gml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_1_gml__StringOrRefType (-485)

#endif

/* gml__AbstractGMLType has binding name 'gml__AbstractGMLType' for type 'gml:AbstractGMLType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractGMLType (-484)

#endif

/* gml__DefinitionBaseType has binding name 'gml__DefinitionBaseType' for type 'gml:DefinitionBaseType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_1_gml__DefinitionBaseType (-483)

#endif

/* gml__DefinitionType has binding name 'gml__DefinitionType' for type 'gml:DefinitionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_1_gml__DefinitionType (-482)

#endif

/* gml__IdentifiedObjectType has binding name 'gml__IdentifiedObjectType' for type 'gml:IdentifiedObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_1_gml__IdentifiedObjectType (-481)

#endif

/* gml__AbstractCRSType has binding name 'gml__AbstractCRSType' for type 'gml:AbstractCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__AbstractCRSType (-480)

#endif

/* gml__GeodeticCRSType has binding name 'gml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_1_gml__GeodeticCRSType (-479)

#endif

/* eml21__GraphicalInformationSet has binding name 'eml21__GraphicalInformationSet' for type 'eml21:GraphicalInformationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet (-478)

#endif

/* eml21__AbstractGraphicalInformation has binding name 'eml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation (-477)

#endif

/* eml21__IndexRange has binding name 'eml21__IndexRange' for type 'eml21:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange (-476)

#endif

/* eml21__FailingRule has binding name 'eml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule (-475)

#endif

/* eml21__DataAssuranceRecord has binding name 'eml21__DataAssuranceRecord' for type 'eml21:DataAssuranceRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord (-474)

#endif

/* eml21__VerticalWktCrs has binding name 'eml21__VerticalWktCrs' for type 'eml21:VerticalWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs (-473)

#endif

/* eml21__VerticalUnknownCrs has binding name 'eml21__VerticalUnknownCrs' for type 'eml21:VerticalUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs (-472)

#endif

/* eml21__VerticalLocalAuthorityCrs has binding name 'eml21__VerticalLocalAuthorityCrs' for type 'eml21:VerticalLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs (-471)

#endif

/* eml21__VerticalGmlCrs has binding name 'eml21__VerticalGmlCrs' for type 'eml21:VerticalGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalGmlCrs (-470)

#endif

/* eml21__VerticalEpsgCrs has binding name 'eml21__VerticalEpsgCrs' for type 'eml21:VerticalEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs (-469)

#endif

/* eml21__VerticalCrs has binding name 'eml21__VerticalCrs' for type 'eml21:VerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs (-468)

#endif

/* eml21__ProjectedWktCrs has binding name 'eml21__ProjectedWktCrs' for type 'eml21:ProjectedWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs (-467)

#endif

/* eml21__ProjectedUnknownCrs has binding name 'eml21__ProjectedUnknownCrs' for type 'eml21:ProjectedUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs (-466)

#endif

/* eml21__ProjectedLocalAuthorityCrs has binding name 'eml21__ProjectedLocalAuthorityCrs' for type 'eml21:ProjectedLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs (-465)

#endif

/* eml21__ProjectedGmlCrs has binding name 'eml21__ProjectedGmlCrs' for type 'eml21:ProjectedGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedGmlCrs (-464)

#endif

/* eml21__ProjectedEpsgCrs has binding name 'eml21__ProjectedEpsgCrs' for type 'eml21:ProjectedEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs (-463)

#endif

/* eml21__ProjectedCrs has binding name 'eml21__ProjectedCrs' for type 'eml21:ProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs (-462)

#endif

/* eml21__GeodeticWktCrs has binding name 'eml21__GeodeticWktCrs' for type 'eml21:GeodeticWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs (-461)

#endif

/* eml21__GeodeticUnknownCrs has binding name 'eml21__GeodeticUnknownCrs' for type 'eml21:GeodeticUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs (-460)

#endif

/* eml21__GeodeticLocalAuthorityCrs has binding name 'eml21__GeodeticLocalAuthorityCrs' for type 'eml21:GeodeticLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs (-459)

#endif

/* eml21__GeodeticGmlCrs has binding name 'eml21__GeodeticGmlCrs' for type 'eml21:GeodeticGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticGmlCrs (-458)

#endif

/* eml21__GeodeticEpsgCrs has binding name 'eml21__GeodeticEpsgCrs' for type 'eml21:GeodeticEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs (-457)

#endif

/* eml21__GeodeticCrs has binding name 'eml21__GeodeticCrs' for type 'eml21:GeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs (-456)

#endif

/* eml21__AbstractVerticalCrs has binding name 'eml21__AbstractVerticalCrs' for type 'eml21:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs (-455)

#endif

/* eml21__AbstractProjectedCrs has binding name 'eml21__AbstractProjectedCrs' for type 'eml21:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs (-454)

#endif

/* eml21__AbstractGeodeticCrs has binding name 'eml21__AbstractGeodeticCrs' for type 'eml21:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs (-453)

#endif

/* eml21__VolumeValue has binding name 'eml21__VolumeValue' for type 'eml21:VolumeValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue (-452)

#endif

/* eml21__TemperaturePressure has binding name 'eml21__TemperaturePressure' for type 'eml21:TemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure (-451)

#endif

/* eml21__RelativePressure has binding name 'eml21__RelativePressure' for type 'eml21:RelativePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure (-450)

#endif

/* eml21__ReferenceTemperaturePressure has binding name 'eml21__ReferenceTemperaturePressure' for type 'eml21:ReferenceTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure (-449)

#endif

/* eml21__ReferencePressure has binding name 'eml21__ReferencePressure' for type 'eml21:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure (-448)

#endif

/* eml21__PressureValue has binding name 'eml21__PressureValue' for type 'eml21:PressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue (-447)

#endif

/* eml21__GaugePressure has binding name 'eml21__GaugePressure' for type 'eml21:GaugePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure (-446)

#endif

/* eml21__FlowRateValue has binding name 'eml21__FlowRateValue' for type 'eml21:FlowRateValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue (-445)

#endif

/* eml21__DensityValue has binding name 'eml21__DensityValue' for type 'eml21:DensityValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue (-444)

#endif

/* eml21__AbstractTemperaturePressure has binding name 'eml21__AbstractTemperaturePressure' for type 'eml21:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure (-443)

#endif

/* eml21__AbstractPressureValue has binding name 'eml21__AbstractPressureValue' for type 'eml21:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue (-442)

#endif

/* eml21__AbsolutePressure has binding name 'eml21__AbsolutePressure' for type 'eml21:AbsolutePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure (-441)

#endif

/* eml21__TimeSeriesParentage has binding name 'eml21__TimeSeriesParentage' for type 'eml21:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage (-440)

#endif

/* eml21__TimeSeries has binding name 'eml21__TimeSeries' for type 'eml21:TimeSeries' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries (-439)

#endif

/* eml21__TimeIndices has binding name 'eml21__TimeIndices' for type 'eml21:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices (-438)

#endif

/* eml21__TimeIndex has binding name 'eml21__TimeIndex' for type 'eml21:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex (-437)

#endif

/* eml21__PropertyKindDictionary has binding name 'eml21__PropertyKindDictionary' for type 'eml21:PropertyKindDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary (-436)

#endif

/* eml21__PropertyKind has binding name 'eml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind (-435)

#endif

/* eml21__GeologicTime has binding name 'eml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime (-434)

#endif

/* eml21__TimeIndexParameterKey has binding name 'eml21__TimeIndexParameterKey' for type 'eml21:TimeIndexParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey (-433)

#endif

/* eml21__TimeIndexParameter has binding name 'eml21__TimeIndexParameter' for type 'eml21:TimeIndexParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter (-432)

#endif

/* eml21__StringParameter has binding name 'eml21__StringParameter' for type 'eml21:StringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter (-431)

#endif

/* eml21__ParameterTemplate has binding name 'eml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate (-430)

#endif

/* eml21__ObjectParameterKey has binding name 'eml21__ObjectParameterKey' for type 'eml21:ObjectParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey (-429)

#endif

/* eml21__IntegerQuantityParameter has binding name 'eml21__IntegerQuantityParameter' for type 'eml21:IntegerQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter (-428)

#endif

/* eml21__DoubleQuantityParameter has binding name 'eml21__DoubleQuantityParameter' for type 'eml21:DoubleQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter (-427)

#endif

/* eml21__DataObjectParameter has binding name 'eml21__DataObjectParameter' for type 'eml21:DataObjectParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter (-426)

#endif

/* eml21__ActivityTemplate has binding name 'eml21__ActivityTemplate' for type 'eml21:ActivityTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate (-425)

#endif

/* eml21__Activity has binding name 'eml21__Activity' for type 'eml21:Activity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1_eml21__Activity (-424)

#endif

/* eml21__AbstractParameterKey has binding name 'eml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey (-423)

#endif

/* eml21__AbstractActivityParameter has binding name 'eml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter (-422)

#endif

/* eml21__ExternalDatasetPart has binding name 'eml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart (-421)

#endif

/* eml21__ExternalDataset has binding name 'eml21__ExternalDataset' for type 'eml21:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset (-420)

#endif

/* eml21__EpcExternalPartReference has binding name 'eml21__EpcExternalPartReference' for type 'eml21:EpcExternalPartReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference (-419)

#endif

/* eml21__DataObjectReference has binding name 'eml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference (-418)

#endif

/* eml21__VolumetricThermalExpansionMeasureExt has binding name 'eml21__VolumetricThermalExpansionMeasureExt' for type 'eml21:VolumetricThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt (-417)

#endif

/* eml21__VolumetricThermalExpansionMeasure has binding name 'eml21__VolumetricThermalExpansionMeasure' for type 'eml21:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure (-416)

#endif

/* eml21__VolumetricHeatTransferCoefficientMeasureExt has binding name 'eml21__VolumetricHeatTransferCoefficientMeasureExt' for type 'eml21:VolumetricHeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt (-415)

#endif

/* eml21__VolumetricHeatTransferCoefficientMeasure has binding name 'eml21__VolumetricHeatTransferCoefficientMeasure' for type 'eml21:VolumetricHeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure (-414)

#endif

/* eml21__VolumePerVolumeMeasureExt has binding name 'eml21__VolumePerVolumeMeasureExt' for type 'eml21:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt (-413)

#endif

/* eml21__VolumePerVolumeMeasure has binding name 'eml21__VolumePerVolumeMeasure' for type 'eml21:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure (-412)

#endif

/* eml21__VolumePerTimePerVolumeMeasureExt has binding name 'eml21__VolumePerTimePerVolumeMeasureExt' for type 'eml21:VolumePerTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt (-411)

#endif

/* eml21__VolumePerTimePerVolumeMeasure has binding name 'eml21__VolumePerTimePerVolumeMeasure' for type 'eml21:VolumePerTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure (-410)

#endif

/* eml21__VolumePerTimePerTimeMeasureExt has binding name 'eml21__VolumePerTimePerTimeMeasureExt' for type 'eml21:VolumePerTimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt (-409)

#endif

/* eml21__VolumePerTimePerTimeMeasure has binding name 'eml21__VolumePerTimePerTimeMeasure' for type 'eml21:VolumePerTimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure (-408)

#endif

/* eml21__VolumePerTimePerPressureMeasureExt has binding name 'eml21__VolumePerTimePerPressureMeasureExt' for type 'eml21:VolumePerTimePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt (-407)

#endif

/* eml21__VolumePerTimePerPressureMeasure has binding name 'eml21__VolumePerTimePerPressureMeasure' for type 'eml21:VolumePerTimePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure (-406)

#endif

/* eml21__VolumePerTimePerPressureLengthMeasureExt has binding name 'eml21__VolumePerTimePerPressureLengthMeasureExt' for type 'eml21:VolumePerTimePerPressureLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt (-405)

#endif

/* eml21__VolumePerTimePerPressureLengthMeasure has binding name 'eml21__VolumePerTimePerPressureLengthMeasure' for type 'eml21:VolumePerTimePerPressureLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure (-404)

#endif

/* eml21__VolumePerTimePerLengthMeasureExt has binding name 'eml21__VolumePerTimePerLengthMeasureExt' for type 'eml21:VolumePerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt (-403)

#endif

/* eml21__VolumePerTimePerLengthMeasure has binding name 'eml21__VolumePerTimePerLengthMeasure' for type 'eml21:VolumePerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure (-402)

#endif

/* eml21__VolumePerTimePerAreaMeasureExt has binding name 'eml21__VolumePerTimePerAreaMeasureExt' for type 'eml21:VolumePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt (-401)

#endif

/* eml21__VolumePerTimePerAreaMeasure has binding name 'eml21__VolumePerTimePerAreaMeasure' for type 'eml21:VolumePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure (-400)

#endif

/* eml21__VolumePerTimeMeasureExt has binding name 'eml21__VolumePerTimeMeasureExt' for type 'eml21:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt (-399)

#endif

/* eml21__VolumePerTimeMeasure has binding name 'eml21__VolumePerTimeMeasure' for type 'eml21:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure (-398)

#endif

/* eml21__VolumePerTimeLengthMeasureExt has binding name 'eml21__VolumePerTimeLengthMeasureExt' for type 'eml21:VolumePerTimeLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt (-397)

#endif

/* eml21__VolumePerTimeLengthMeasure has binding name 'eml21__VolumePerTimeLengthMeasure' for type 'eml21:VolumePerTimeLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure (-396)

#endif

/* eml21__VolumePerRotationMeasureExt has binding name 'eml21__VolumePerRotationMeasureExt' for type 'eml21:VolumePerRotationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt (-395)

#endif

/* eml21__VolumePerRotationMeasure has binding name 'eml21__VolumePerRotationMeasure' for type 'eml21:VolumePerRotationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure (-394)

#endif

/* eml21__VolumePerPressureMeasureExt has binding name 'eml21__VolumePerPressureMeasureExt' for type 'eml21:VolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt (-393)

#endif

/* eml21__VolumePerPressureMeasure has binding name 'eml21__VolumePerPressureMeasure' for type 'eml21:VolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure (-392)

#endif

/* eml21__VolumePerMassMeasureExt has binding name 'eml21__VolumePerMassMeasureExt' for type 'eml21:VolumePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt (-391)

#endif

/* eml21__VolumePerMassMeasure has binding name 'eml21__VolumePerMassMeasure' for type 'eml21:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure (-390)

#endif

/* eml21__VolumePerLengthMeasureExt has binding name 'eml21__VolumePerLengthMeasureExt' for type 'eml21:VolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt (-389)

#endif

/* eml21__VolumePerLengthMeasure has binding name 'eml21__VolumePerLengthMeasure' for type 'eml21:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure (-388)

#endif

/* eml21__VolumePerAreaMeasureExt has binding name 'eml21__VolumePerAreaMeasureExt' for type 'eml21:VolumePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt (-387)

#endif

/* eml21__VolumePerAreaMeasure has binding name 'eml21__VolumePerAreaMeasure' for type 'eml21:VolumePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure (-386)

#endif

/* eml21__VolumeMeasureExt has binding name 'eml21__VolumeMeasureExt' for type 'eml21:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt (-385)

#endif

/* eml21__VolumeMeasure has binding name 'eml21__VolumeMeasure' for type 'eml21:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure (-384)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt' for type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt (-383)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateMeasure has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateMeasure' for type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure (-382)

#endif

/* eml21__VerticalCoordinateMeasureExt has binding name 'eml21__VerticalCoordinateMeasureExt' for type 'eml21:VerticalCoordinateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt (-381)

#endif

/* eml21__VerticalCoordinateMeasure has binding name 'eml21__VerticalCoordinateMeasure' for type 'eml21:VerticalCoordinateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure (-380)

#endif

/* eml21__UnitlessMeasure has binding name 'eml21__UnitlessMeasure' for type 'eml21:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure (-379)

#endif

/* eml21__TimePerVolumeMeasureExt has binding name 'eml21__TimePerVolumeMeasureExt' for type 'eml21:TimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt (-378)

#endif

/* eml21__TimePerVolumeMeasure has binding name 'eml21__TimePerVolumeMeasure' for type 'eml21:TimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure (-377)

#endif

/* eml21__TimePerTimeMeasureExt has binding name 'eml21__TimePerTimeMeasureExt' for type 'eml21:TimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt (-376)

#endif

/* eml21__TimePerTimeMeasure has binding name 'eml21__TimePerTimeMeasure' for type 'eml21:TimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure (-375)

#endif

/* eml21__TimePerMassMeasureExt has binding name 'eml21__TimePerMassMeasureExt' for type 'eml21:TimePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt (-374)

#endif

/* eml21__TimePerMassMeasure has binding name 'eml21__TimePerMassMeasure' for type 'eml21:TimePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure (-373)

#endif

/* eml21__TimePerLengthMeasureExt has binding name 'eml21__TimePerLengthMeasureExt' for type 'eml21:TimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt (-372)

#endif

/* eml21__TimePerLengthMeasure has binding name 'eml21__TimePerLengthMeasure' for type 'eml21:TimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure (-371)

#endif

/* eml21__TimeMeasureExt has binding name 'eml21__TimeMeasureExt' for type 'eml21:TimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt (-370)

#endif

/* eml21__TimeMeasure has binding name 'eml21__TimeMeasure' for type 'eml21:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure (-369)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-368)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-367)

#endif

/* eml21__ThermodynamicTemperatureMeasureExt has binding name 'eml21__ThermodynamicTemperatureMeasureExt' for type 'eml21:ThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt (-366)

#endif

/* eml21__ThermodynamicTemperatureMeasure has binding name 'eml21__ThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure (-365)

#endif

/* eml21__ThermalResistanceMeasureExt has binding name 'eml21__ThermalResistanceMeasureExt' for type 'eml21:ThermalResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt (-364)

#endif

/* eml21__ThermalResistanceMeasure has binding name 'eml21__ThermalResistanceMeasure' for type 'eml21:ThermalResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure (-363)

#endif

/* eml21__ThermalInsulanceMeasureExt has binding name 'eml21__ThermalInsulanceMeasureExt' for type 'eml21:ThermalInsulanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt (-362)

#endif

/* eml21__ThermalInsulanceMeasure has binding name 'eml21__ThermalInsulanceMeasure' for type 'eml21:ThermalInsulanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure (-361)

#endif

/* eml21__ThermalDiffusivityMeasureExt has binding name 'eml21__ThermalDiffusivityMeasureExt' for type 'eml21:ThermalDiffusivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt (-360)

#endif

/* eml21__ThermalDiffusivityMeasure has binding name 'eml21__ThermalDiffusivityMeasure' for type 'eml21:ThermalDiffusivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure (-359)

#endif

/* eml21__ThermalConductivityMeasureExt has binding name 'eml21__ThermalConductivityMeasureExt' for type 'eml21:ThermalConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt (-358)

#endif

/* eml21__ThermalConductivityMeasure has binding name 'eml21__ThermalConductivityMeasure' for type 'eml21:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure (-357)

#endif

/* eml21__ThermalConductanceMeasureExt has binding name 'eml21__ThermalConductanceMeasureExt' for type 'eml21:ThermalConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt (-356)

#endif

/* eml21__ThermalConductanceMeasure has binding name 'eml21__ThermalConductanceMeasure' for type 'eml21:ThermalConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure (-355)

#endif

/* eml21__TemperatureIntervalPerTimeMeasureExt has binding name 'eml21__TemperatureIntervalPerTimeMeasureExt' for type 'eml21:TemperatureIntervalPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt (-354)

#endif

/* eml21__TemperatureIntervalPerTimeMeasure has binding name 'eml21__TemperatureIntervalPerTimeMeasure' for type 'eml21:TemperatureIntervalPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure (-353)

#endif

/* eml21__TemperatureIntervalPerPressureMeasureExt has binding name 'eml21__TemperatureIntervalPerPressureMeasureExt' for type 'eml21:TemperatureIntervalPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt (-352)

#endif

/* eml21__TemperatureIntervalPerPressureMeasure has binding name 'eml21__TemperatureIntervalPerPressureMeasure' for type 'eml21:TemperatureIntervalPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure (-351)

#endif

/* eml21__TemperatureIntervalPerLengthMeasureExt has binding name 'eml21__TemperatureIntervalPerLengthMeasureExt' for type 'eml21:TemperatureIntervalPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt (-350)

#endif

/* eml21__TemperatureIntervalPerLengthMeasure has binding name 'eml21__TemperatureIntervalPerLengthMeasure' for type 'eml21:TemperatureIntervalPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure (-349)

#endif

/* eml21__TemperatureIntervalMeasureExt has binding name 'eml21__TemperatureIntervalMeasureExt' for type 'eml21:TemperatureIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt (-348)

#endif

/* eml21__TemperatureIntervalMeasure has binding name 'eml21__TemperatureIntervalMeasure' for type 'eml21:TemperatureIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure (-347)

#endif

/* eml21__SpecificHeatCapacityMeasureExt has binding name 'eml21__SpecificHeatCapacityMeasureExt' for type 'eml21:SpecificHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt (-346)

#endif

/* eml21__SpecificHeatCapacityMeasure has binding name 'eml21__SpecificHeatCapacityMeasure' for type 'eml21:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure (-345)

#endif

/* eml21__SolidAngleMeasureExt has binding name 'eml21__SolidAngleMeasureExt' for type 'eml21:SolidAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt (-344)

#endif

/* eml21__SolidAngleMeasure has binding name 'eml21__SolidAngleMeasure' for type 'eml21:SolidAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure (-343)

#endif

/* eml21__SignalingEventPerTimeMeasureExt has binding name 'eml21__SignalingEventPerTimeMeasureExt' for type 'eml21:SignalingEventPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt (-342)

#endif

/* eml21__SignalingEventPerTimeMeasure has binding name 'eml21__SignalingEventPerTimeMeasure' for type 'eml21:SignalingEventPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure (-341)

#endif

/* eml21__SecondMomentOfAreaMeasureExt has binding name 'eml21__SecondMomentOfAreaMeasureExt' for type 'eml21:SecondMomentOfAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt (-340)

#endif

/* eml21__SecondMomentOfAreaMeasure has binding name 'eml21__SecondMomentOfAreaMeasure' for type 'eml21:SecondMomentOfAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure (-339)

#endif

/* eml21__ReluctanceMeasureExt has binding name 'eml21__ReluctanceMeasureExt' for type 'eml21:ReluctanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt (-338)

#endif

/* eml21__ReluctanceMeasure has binding name 'eml21__ReluctanceMeasure' for type 'eml21:ReluctanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure (-337)

#endif

/* eml21__ReciprocalVolumeMeasureExt has binding name 'eml21__ReciprocalVolumeMeasureExt' for type 'eml21:ReciprocalVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt (-336)

#endif

/* eml21__ReciprocalVolumeMeasure has binding name 'eml21__ReciprocalVolumeMeasure' for type 'eml21:ReciprocalVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure (-335)

#endif

/* eml21__ReciprocalTimeMeasureExt has binding name 'eml21__ReciprocalTimeMeasureExt' for type 'eml21:ReciprocalTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt (-334)

#endif

/* eml21__ReciprocalTimeMeasure has binding name 'eml21__ReciprocalTimeMeasure' for type 'eml21:ReciprocalTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure (-333)

#endif

/* eml21__ReciprocalPressureMeasureExt has binding name 'eml21__ReciprocalPressureMeasureExt' for type 'eml21:ReciprocalPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt (-332)

#endif

/* eml21__ReciprocalPressureMeasure has binding name 'eml21__ReciprocalPressureMeasure' for type 'eml21:ReciprocalPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure (-331)

#endif

/* eml21__ReciprocalMassTimeMeasureExt has binding name 'eml21__ReciprocalMassTimeMeasureExt' for type 'eml21:ReciprocalMassTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt (-330)

#endif

/* eml21__ReciprocalMassTimeMeasure has binding name 'eml21__ReciprocalMassTimeMeasure' for type 'eml21:ReciprocalMassTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure (-329)

#endif

/* eml21__ReciprocalMassMeasureExt has binding name 'eml21__ReciprocalMassMeasureExt' for type 'eml21:ReciprocalMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt (-328)

#endif

/* eml21__ReciprocalMassMeasure has binding name 'eml21__ReciprocalMassMeasure' for type 'eml21:ReciprocalMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure (-327)

#endif

/* eml21__ReciprocalLengthMeasureExt has binding name 'eml21__ReciprocalLengthMeasureExt' for type 'eml21:ReciprocalLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt (-326)

#endif

/* eml21__ReciprocalLengthMeasure has binding name 'eml21__ReciprocalLengthMeasure' for type 'eml21:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure (-325)

#endif

/* eml21__ReciprocalForceMeasureExt has binding name 'eml21__ReciprocalForceMeasureExt' for type 'eml21:ReciprocalForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt (-324)

#endif

/* eml21__ReciprocalForceMeasure has binding name 'eml21__ReciprocalForceMeasure' for type 'eml21:ReciprocalForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure (-323)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceMeasureExt has binding name 'eml21__ReciprocalElectricPotentialDifferenceMeasureExt' for type 'eml21:ReciprocalElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt (-322)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceMeasure has binding name 'eml21__ReciprocalElectricPotentialDifferenceMeasure' for type 'eml21:ReciprocalElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure (-321)

#endif

/* eml21__ReciprocalAreaMeasureExt has binding name 'eml21__ReciprocalAreaMeasureExt' for type 'eml21:ReciprocalAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt (-320)

#endif

/* eml21__ReciprocalAreaMeasure has binding name 'eml21__ReciprocalAreaMeasure' for type 'eml21:ReciprocalAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure (-319)

#endif

/* eml21__RadiantIntensityMeasureExt has binding name 'eml21__RadiantIntensityMeasureExt' for type 'eml21:RadiantIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt (-318)

#endif

/* eml21__RadiantIntensityMeasure has binding name 'eml21__RadiantIntensityMeasure' for type 'eml21:RadiantIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure (-317)

#endif

/* eml21__RadianceMeasureExt has binding name 'eml21__RadianceMeasureExt' for type 'eml21:RadianceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt (-316)

#endif

/* eml21__RadianceMeasure has binding name 'eml21__RadianceMeasure' for type 'eml21:RadianceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure (-315)

#endif

/* eml21__QuantityOfLightMeasureExt has binding name 'eml21__QuantityOfLightMeasureExt' for type 'eml21:QuantityOfLightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt (-314)

#endif

/* eml21__QuantityOfLightMeasure has binding name 'eml21__QuantityOfLightMeasure' for type 'eml21:QuantityOfLightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure (-313)

#endif

/* eml21__PressureTimePerVolumeMeasureExt has binding name 'eml21__PressureTimePerVolumeMeasureExt' for type 'eml21:PressureTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt (-312)

#endif

/* eml21__PressureTimePerVolumeMeasure has binding name 'eml21__PressureTimePerVolumeMeasure' for type 'eml21:PressureTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure (-311)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaMeasureExt has binding name 'eml21__PressureSquaredPerForceTimePerAreaMeasureExt' for type 'eml21:PressureSquaredPerForceTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt (-310)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaMeasure has binding name 'eml21__PressureSquaredPerForceTimePerAreaMeasure' for type 'eml21:PressureSquaredPerForceTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure (-309)

#endif

/* eml21__PressureSquaredMeasureExt has binding name 'eml21__PressureSquaredMeasureExt' for type 'eml21:PressureSquaredMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt (-308)

#endif

/* eml21__PressureSquaredMeasure has binding name 'eml21__PressureSquaredMeasure' for type 'eml21:PressureSquaredMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure (-307)

#endif

/* eml21__PressurePerVolumeMeasureExt has binding name 'eml21__PressurePerVolumeMeasureExt' for type 'eml21:PressurePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt (-306)

#endif

/* eml21__PressurePerVolumeMeasure has binding name 'eml21__PressurePerVolumeMeasure' for type 'eml21:PressurePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure (-305)

#endif

/* eml21__PressurePerTimeMeasureExt has binding name 'eml21__PressurePerTimeMeasureExt' for type 'eml21:PressurePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt (-304)

#endif

/* eml21__PressurePerTimeMeasure has binding name 'eml21__PressurePerTimeMeasure' for type 'eml21:PressurePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure (-303)

#endif

/* eml21__PressurePerPressureMeasureExt has binding name 'eml21__PressurePerPressureMeasureExt' for type 'eml21:PressurePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt (-302)

#endif

/* eml21__PressurePerPressureMeasure has binding name 'eml21__PressurePerPressureMeasure' for type 'eml21:PressurePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure (-301)

#endif

/* eml21__PressureMeasureExt has binding name 'eml21__PressureMeasureExt' for type 'eml21:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt (-300)

#endif

/* eml21__PressureMeasure has binding name 'eml21__PressureMeasure' for type 'eml21:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure (-299)

#endif

/* eml21__PowerPerVolumeMeasureExt has binding name 'eml21__PowerPerVolumeMeasureExt' for type 'eml21:PowerPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt (-298)

#endif

/* eml21__PowerPerVolumeMeasure has binding name 'eml21__PowerPerVolumeMeasure' for type 'eml21:PowerPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure (-297)

#endif

/* eml21__PowerPerPowerMeasureExt has binding name 'eml21__PowerPerPowerMeasureExt' for type 'eml21:PowerPerPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt (-296)

#endif

/* eml21__PowerPerPowerMeasure has binding name 'eml21__PowerPerPowerMeasure' for type 'eml21:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure (-295)

#endif

/* eml21__PowerPerAreaMeasureExt has binding name 'eml21__PowerPerAreaMeasureExt' for type 'eml21:PowerPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt (-294)

#endif

/* eml21__PowerPerAreaMeasure has binding name 'eml21__PowerPerAreaMeasure' for type 'eml21:PowerPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure (-293)

#endif

/* eml21__PowerMeasureExt has binding name 'eml21__PowerMeasureExt' for type 'eml21:PowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt (-292)

#endif

/* eml21__PowerMeasure has binding name 'eml21__PowerMeasure' for type 'eml21:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure (-291)

#endif

/* eml21__PotentialDifferencePerPowerDropMeasureExt has binding name 'eml21__PotentialDifferencePerPowerDropMeasureExt' for type 'eml21:PotentialDifferencePerPowerDropMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt (-290)

#endif

/* eml21__PotentialDifferencePerPowerDropMeasure has binding name 'eml21__PotentialDifferencePerPowerDropMeasure' for type 'eml21:PotentialDifferencePerPowerDropMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure (-289)

#endif

/* eml21__PlaneAngleMeasureExt has binding name 'eml21__PlaneAngleMeasureExt' for type 'eml21:PlaneAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt (-288)

#endif

/* eml21__PlaneAngleMeasure has binding name 'eml21__PlaneAngleMeasure' for type 'eml21:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure (-287)

#endif

/* eml21__PermittivityMeasureExt has binding name 'eml21__PermittivityMeasureExt' for type 'eml21:PermittivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt (-286)

#endif

/* eml21__PermittivityMeasure has binding name 'eml21__PermittivityMeasure' for type 'eml21:PermittivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure (-285)

#endif

/* eml21__PermeabilityRockMeasureExt has binding name 'eml21__PermeabilityRockMeasureExt' for type 'eml21:PermeabilityRockMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt (-284)

#endif

/* eml21__PermeabilityRockMeasure has binding name 'eml21__PermeabilityRockMeasure' for type 'eml21:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure (-283)

#endif

/* eml21__PermeabilityLengthMeasureExt has binding name 'eml21__PermeabilityLengthMeasureExt' for type 'eml21:PermeabilityLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt (-282)

#endif

/* eml21__PermeabilityLengthMeasure has binding name 'eml21__PermeabilityLengthMeasure' for type 'eml21:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure (-281)

#endif

/* eml21__NormalizedPowerMeasureExt has binding name 'eml21__NormalizedPowerMeasureExt' for type 'eml21:NormalizedPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt (-280)

#endif

/* eml21__NormalizedPowerMeasure has binding name 'eml21__NormalizedPowerMeasure' for type 'eml21:NormalizedPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure (-279)

#endif

/* eml21__MomentumMeasureExt has binding name 'eml21__MomentumMeasureExt' for type 'eml21:MomentumMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt (-278)

#endif

/* eml21__MomentumMeasure has binding name 'eml21__MomentumMeasure' for type 'eml21:MomentumMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure (-277)

#endif

/* eml21__MomentOfInertiaMeasureExt has binding name 'eml21__MomentOfInertiaMeasureExt' for type 'eml21:MomentOfInertiaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt (-276)

#endif

/* eml21__MomentOfInertiaMeasure has binding name 'eml21__MomentOfInertiaMeasure' for type 'eml21:MomentOfInertiaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure (-275)

#endif

/* eml21__MomentOfForceMeasureExt has binding name 'eml21__MomentOfForceMeasureExt' for type 'eml21:MomentOfForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt (-274)

#endif

/* eml21__MomentOfForceMeasure has binding name 'eml21__MomentOfForceMeasure' for type 'eml21:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure (-273)

#endif

/* eml21__MolecularWeightMeasureExt has binding name 'eml21__MolecularWeightMeasureExt' for type 'eml21:MolecularWeightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt (-272)

#endif

/* eml21__MolecularWeightMeasure has binding name 'eml21__MolecularWeightMeasure' for type 'eml21:MolecularWeightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure (-271)

#endif

/* eml21__MolarVolumeMeasureExt has binding name 'eml21__MolarVolumeMeasureExt' for type 'eml21:MolarVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt (-270)

#endif

/* eml21__MolarVolumeMeasure has binding name 'eml21__MolarVolumeMeasure' for type 'eml21:MolarVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure (-269)

#endif

/* eml21__MolarHeatCapacityMeasureExt has binding name 'eml21__MolarHeatCapacityMeasureExt' for type 'eml21:MolarHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt (-268)

#endif

/* eml21__MolarHeatCapacityMeasure has binding name 'eml21__MolarHeatCapacityMeasure' for type 'eml21:MolarHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure (-267)

#endif

/* eml21__MolarEnergyMeasureExt has binding name 'eml21__MolarEnergyMeasureExt' for type 'eml21:MolarEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt (-266)

#endif

/* eml21__MolarEnergyMeasure has binding name 'eml21__MolarEnergyMeasure' for type 'eml21:MolarEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure (-265)

#endif

/* eml21__MobilityMeasureExt has binding name 'eml21__MobilityMeasureExt' for type 'eml21:MobilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt (-264)

#endif

/* eml21__MobilityMeasure has binding name 'eml21__MobilityMeasure' for type 'eml21:MobilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure (-263)

#endif

/* eml21__MassPerVolumePerTemperatureMeasureExt has binding name 'eml21__MassPerVolumePerTemperatureMeasureExt' for type 'eml21:MassPerVolumePerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt (-262)

#endif

/* eml21__MassPerVolumePerTemperatureMeasure has binding name 'eml21__MassPerVolumePerTemperatureMeasure' for type 'eml21:MassPerVolumePerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure (-261)

#endif

/* eml21__MassPerVolumePerPressureMeasureExt has binding name 'eml21__MassPerVolumePerPressureMeasureExt' for type 'eml21:MassPerVolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt (-260)

#endif

/* eml21__MassPerVolumePerPressureMeasure has binding name 'eml21__MassPerVolumePerPressureMeasure' for type 'eml21:MassPerVolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure (-259)

#endif

/* eml21__MassPerVolumePerLengthMeasureExt has binding name 'eml21__MassPerVolumePerLengthMeasureExt' for type 'eml21:MassPerVolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt (-258)

#endif

/* eml21__MassPerVolumePerLengthMeasure has binding name 'eml21__MassPerVolumePerLengthMeasure' for type 'eml21:MassPerVolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure (-257)

#endif

/* eml21__MassPerVolumeMeasureExt has binding name 'eml21__MassPerVolumeMeasureExt' for type 'eml21:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt (-256)

#endif

/* eml21__MassPerVolumeMeasure has binding name 'eml21__MassPerVolumeMeasure' for type 'eml21:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure (-255)

#endif

/* eml21__MassPerTimePerLengthMeasureExt has binding name 'eml21__MassPerTimePerLengthMeasureExt' for type 'eml21:MassPerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt (-254)

#endif

/* eml21__MassPerTimePerLengthMeasure has binding name 'eml21__MassPerTimePerLengthMeasure' for type 'eml21:MassPerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure (-253)

#endif

/* eml21__MassPerTimePerAreaMeasureExt has binding name 'eml21__MassPerTimePerAreaMeasureExt' for type 'eml21:MassPerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt (-252)

#endif

/* eml21__MassPerTimePerAreaMeasure has binding name 'eml21__MassPerTimePerAreaMeasure' for type 'eml21:MassPerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure (-251)

#endif

/* eml21__MassPerTimeMeasureExt has binding name 'eml21__MassPerTimeMeasureExt' for type 'eml21:MassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt (-250)

#endif

/* eml21__MassPerTimeMeasure has binding name 'eml21__MassPerTimeMeasure' for type 'eml21:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure (-249)

#endif

/* eml21__MassPerMassMeasureExt has binding name 'eml21__MassPerMassMeasureExt' for type 'eml21:MassPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt (-248)

#endif

/* eml21__MassPerMassMeasure has binding name 'eml21__MassPerMassMeasure' for type 'eml21:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure (-247)

#endif

/* eml21__MassPerLengthMeasureExt has binding name 'eml21__MassPerLengthMeasureExt' for type 'eml21:MassPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt (-246)

#endif

/* eml21__MassPerLengthMeasure has binding name 'eml21__MassPerLengthMeasure' for type 'eml21:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure (-245)

#endif

/* eml21__MassPerEnergyMeasureExt has binding name 'eml21__MassPerEnergyMeasureExt' for type 'eml21:MassPerEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt (-244)

#endif

/* eml21__MassPerEnergyMeasure has binding name 'eml21__MassPerEnergyMeasure' for type 'eml21:MassPerEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure (-243)

#endif

/* eml21__MassPerAreaMeasureExt has binding name 'eml21__MassPerAreaMeasureExt' for type 'eml21:MassPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt (-242)

#endif

/* eml21__MassPerAreaMeasure has binding name 'eml21__MassPerAreaMeasure' for type 'eml21:MassPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure (-241)

#endif

/* eml21__MassMeasureExt has binding name 'eml21__MassMeasureExt' for type 'eml21:MassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt (-240)

#endif

/* eml21__MassMeasure has binding name 'eml21__MassMeasure' for type 'eml21:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure (-239)

#endif

/* eml21__MassLengthMeasureExt has binding name 'eml21__MassLengthMeasureExt' for type 'eml21:MassLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt (-238)

#endif

/* eml21__MassLengthMeasure has binding name 'eml21__MassLengthMeasure' for type 'eml21:MassLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure (-237)

#endif

/* eml21__MagneticVectorPotentialMeasureExt has binding name 'eml21__MagneticVectorPotentialMeasureExt' for type 'eml21:MagneticVectorPotentialMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt (-236)

#endif

/* eml21__MagneticVectorPotentialMeasure has binding name 'eml21__MagneticVectorPotentialMeasure' for type 'eml21:MagneticVectorPotentialMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure (-235)

#endif

/* eml21__MagneticPermeabilityMeasureExt has binding name 'eml21__MagneticPermeabilityMeasureExt' for type 'eml21:MagneticPermeabilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt (-234)

#endif

/* eml21__MagneticPermeabilityMeasure has binding name 'eml21__MagneticPermeabilityMeasure' for type 'eml21:MagneticPermeabilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure (-233)

#endif

/* eml21__MagneticFluxMeasureExt has binding name 'eml21__MagneticFluxMeasureExt' for type 'eml21:MagneticFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt (-232)

#endif

/* eml21__MagneticFluxMeasure has binding name 'eml21__MagneticFluxMeasure' for type 'eml21:MagneticFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure (-231)

#endif

/* eml21__MagneticFluxDensityPerLengthMeasureExt has binding name 'eml21__MagneticFluxDensityPerLengthMeasureExt' for type 'eml21:MagneticFluxDensityPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt (-230)

#endif

/* eml21__MagneticFluxDensityPerLengthMeasure has binding name 'eml21__MagneticFluxDensityPerLengthMeasure' for type 'eml21:MagneticFluxDensityPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure (-229)

#endif

/* eml21__MagneticFluxDensityMeasureExt has binding name 'eml21__MagneticFluxDensityMeasureExt' for type 'eml21:MagneticFluxDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt (-228)

#endif

/* eml21__MagneticFluxDensityMeasure has binding name 'eml21__MagneticFluxDensityMeasure' for type 'eml21:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure (-227)

#endif

/* eml21__MagneticFieldStrengthMeasureExt has binding name 'eml21__MagneticFieldStrengthMeasureExt' for type 'eml21:MagneticFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt (-226)

#endif

/* eml21__MagneticFieldStrengthMeasure has binding name 'eml21__MagneticFieldStrengthMeasure' for type 'eml21:MagneticFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure (-225)

#endif

/* eml21__MagneticDipoleMomentMeasureExt has binding name 'eml21__MagneticDipoleMomentMeasureExt' for type 'eml21:MagneticDipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt (-224)

#endif

/* eml21__MagneticDipoleMomentMeasure has binding name 'eml21__MagneticDipoleMomentMeasure' for type 'eml21:MagneticDipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure (-223)

#endif

/* eml21__LuminousIntensityMeasureExt has binding name 'eml21__LuminousIntensityMeasureExt' for type 'eml21:LuminousIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt (-222)

#endif

/* eml21__LuminousIntensityMeasure has binding name 'eml21__LuminousIntensityMeasure' for type 'eml21:LuminousIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure (-221)

#endif

/* eml21__LuminousFluxMeasureExt has binding name 'eml21__LuminousFluxMeasureExt' for type 'eml21:LuminousFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt (-220)

#endif

/* eml21__LuminousFluxMeasure has binding name 'eml21__LuminousFluxMeasure' for type 'eml21:LuminousFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure (-219)

#endif

/* eml21__LuminousEfficacyMeasureExt has binding name 'eml21__LuminousEfficacyMeasureExt' for type 'eml21:LuminousEfficacyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt (-218)

#endif

/* eml21__LuminousEfficacyMeasure has binding name 'eml21__LuminousEfficacyMeasure' for type 'eml21:LuminousEfficacyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure (-217)

#endif

/* eml21__LuminanceMeasureExt has binding name 'eml21__LuminanceMeasureExt' for type 'eml21:LuminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt (-216)

#endif

/* eml21__LuminanceMeasure has binding name 'eml21__LuminanceMeasure' for type 'eml21:LuminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure (-215)

#endif

/* eml21__LogarithmicPowerRatioPerLengthMeasureExt has binding name 'eml21__LogarithmicPowerRatioPerLengthMeasureExt' for type 'eml21:LogarithmicPowerRatioPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt (-214)

#endif

/* eml21__LogarithmicPowerRatioPerLengthMeasure has binding name 'eml21__LogarithmicPowerRatioPerLengthMeasure' for type 'eml21:LogarithmicPowerRatioPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure (-213)

#endif

/* eml21__LogarithmicPowerRatioMeasureExt has binding name 'eml21__LogarithmicPowerRatioMeasureExt' for type 'eml21:LogarithmicPowerRatioMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt (-212)

#endif

/* eml21__LogarithmicPowerRatioMeasure has binding name 'eml21__LogarithmicPowerRatioMeasure' for type 'eml21:LogarithmicPowerRatioMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure (-211)

#endif

/* eml21__LinearThermalExpansionMeasureExt has binding name 'eml21__LinearThermalExpansionMeasureExt' for type 'eml21:LinearThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt (-210)

#endif

/* eml21__LinearThermalExpansionMeasure has binding name 'eml21__LinearThermalExpansionMeasure' for type 'eml21:LinearThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure (-209)

#endif

/* eml21__LinearAccelerationMeasureExt has binding name 'eml21__LinearAccelerationMeasureExt' for type 'eml21:LinearAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt (-208)

#endif

/* eml21__LinearAccelerationMeasure has binding name 'eml21__LinearAccelerationMeasure' for type 'eml21:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure (-207)

#endif

/* eml21__LightExposureMeasureExt has binding name 'eml21__LightExposureMeasureExt' for type 'eml21:LightExposureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt (-206)

#endif

/* eml21__LightExposureMeasure has binding name 'eml21__LightExposureMeasure' for type 'eml21:LightExposureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure (-205)

#endif

/* eml21__LengthPerVolumeMeasureExt has binding name 'eml21__LengthPerVolumeMeasureExt' for type 'eml21:LengthPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt (-204)

#endif

/* eml21__LengthPerVolumeMeasure has binding name 'eml21__LengthPerVolumeMeasure' for type 'eml21:LengthPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure (-203)

#endif

/* eml21__LengthPerTimeMeasureExt has binding name 'eml21__LengthPerTimeMeasureExt' for type 'eml21:LengthPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt (-202)

#endif

/* eml21__LengthPerTimeMeasure has binding name 'eml21__LengthPerTimeMeasure' for type 'eml21:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure (-201)

#endif

/* eml21__LengthPerTemperatureMeasureExt has binding name 'eml21__LengthPerTemperatureMeasureExt' for type 'eml21:LengthPerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt (-200)

#endif

/* eml21__LengthPerTemperatureMeasure has binding name 'eml21__LengthPerTemperatureMeasure' for type 'eml21:LengthPerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure (-199)

#endif

/* eml21__LengthPerPressureMeasureExt has binding name 'eml21__LengthPerPressureMeasureExt' for type 'eml21:LengthPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt (-198)

#endif

/* eml21__LengthPerPressureMeasure has binding name 'eml21__LengthPerPressureMeasure' for type 'eml21:LengthPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure (-197)

#endif

/* eml21__LengthPerMassMeasureExt has binding name 'eml21__LengthPerMassMeasureExt' for type 'eml21:LengthPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt (-196)

#endif

/* eml21__LengthPerMassMeasure has binding name 'eml21__LengthPerMassMeasure' for type 'eml21:LengthPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure (-195)

#endif

/* eml21__LengthPerLengthMeasureExt has binding name 'eml21__LengthPerLengthMeasureExt' for type 'eml21:LengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt (-194)

#endif

/* eml21__LengthPerLengthMeasure has binding name 'eml21__LengthPerLengthMeasure' for type 'eml21:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure (-193)

#endif

/* eml21__LengthMeasureExt has binding name 'eml21__LengthMeasureExt' for type 'eml21:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt (-192)

#endif

/* eml21__LengthMeasure has binding name 'eml21__LengthMeasure' for type 'eml21:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure (-191)

#endif

/* eml21__KinematicViscosityMeasureExt has binding name 'eml21__KinematicViscosityMeasureExt' for type 'eml21:KinematicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt (-190)

#endif

/* eml21__KinematicViscosityMeasure has binding name 'eml21__KinematicViscosityMeasure' for type 'eml21:KinematicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure (-189)

#endif

/* eml21__IsothermalCompressibilityMeasureExt has binding name 'eml21__IsothermalCompressibilityMeasureExt' for type 'eml21:IsothermalCompressibilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt (-188)

#endif

/* eml21__IsothermalCompressibilityMeasure has binding name 'eml21__IsothermalCompressibilityMeasure' for type 'eml21:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure (-187)

#endif

/* eml21__InductanceMeasureExt has binding name 'eml21__InductanceMeasureExt' for type 'eml21:InductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt (-186)

#endif

/* eml21__InductanceMeasure has binding name 'eml21__InductanceMeasure' for type 'eml21:InductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure (-185)

#endif

/* eml21__IlluminanceMeasureExt has binding name 'eml21__IlluminanceMeasureExt' for type 'eml21:IlluminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt (-184)

#endif

/* eml21__IlluminanceMeasure has binding name 'eml21__IlluminanceMeasure' for type 'eml21:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure (-183)

#endif

/* eml21__HeatTransferCoefficientMeasureExt has binding name 'eml21__HeatTransferCoefficientMeasureExt' for type 'eml21:HeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt (-182)

#endif

/* eml21__HeatTransferCoefficientMeasure has binding name 'eml21__HeatTransferCoefficientMeasure' for type 'eml21:HeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure (-181)

#endif

/* eml21__HeatFlowRateMeasureExt has binding name 'eml21__HeatFlowRateMeasureExt' for type 'eml21:HeatFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt (-180)

#endif

/* eml21__HeatFlowRateMeasure has binding name 'eml21__HeatFlowRateMeasure' for type 'eml21:HeatFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure (-179)

#endif

/* eml21__HeatCapacityMeasureExt has binding name 'eml21__HeatCapacityMeasureExt' for type 'eml21:HeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt (-178)

#endif

/* eml21__HeatCapacityMeasure has binding name 'eml21__HeatCapacityMeasure' for type 'eml21:HeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure (-177)

#endif

/* eml21__FrequencyMeasureExt has binding name 'eml21__FrequencyMeasureExt' for type 'eml21:FrequencyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt (-176)

#endif

/* eml21__FrequencyMeasure has binding name 'eml21__FrequencyMeasure' for type 'eml21:FrequencyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure (-175)

#endif

/* eml21__FrequencyIntervalMeasureExt has binding name 'eml21__FrequencyIntervalMeasureExt' for type 'eml21:FrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt (-174)

#endif

/* eml21__FrequencyIntervalMeasure has binding name 'eml21__FrequencyIntervalMeasure' for type 'eml21:FrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure (-173)

#endif

/* eml21__ForcePerVolumeMeasureExt has binding name 'eml21__ForcePerVolumeMeasureExt' for type 'eml21:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt (-172)

#endif

/* eml21__ForcePerVolumeMeasure has binding name 'eml21__ForcePerVolumeMeasure' for type 'eml21:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure (-171)

#endif

/* eml21__ForcePerLengthMeasureExt has binding name 'eml21__ForcePerLengthMeasureExt' for type 'eml21:ForcePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt (-170)

#endif

/* eml21__ForcePerLengthMeasure has binding name 'eml21__ForcePerLengthMeasure' for type 'eml21:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure (-169)

#endif

/* eml21__ForcePerForceMeasureExt has binding name 'eml21__ForcePerForceMeasureExt' for type 'eml21:ForcePerForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt (-168)

#endif

/* eml21__ForcePerForceMeasure has binding name 'eml21__ForcePerForceMeasure' for type 'eml21:ForcePerForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure (-167)

#endif

/* eml21__ForceMeasureExt has binding name 'eml21__ForceMeasureExt' for type 'eml21:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt (-166)

#endif

/* eml21__ForceMeasure has binding name 'eml21__ForceMeasure' for type 'eml21:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure (-165)

#endif

/* eml21__ForceLengthPerLengthMeasureExt has binding name 'eml21__ForceLengthPerLengthMeasureExt' for type 'eml21:ForceLengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt (-164)

#endif

/* eml21__ForceLengthPerLengthMeasure has binding name 'eml21__ForceLengthPerLengthMeasure' for type 'eml21:ForceLengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure (-163)

#endif

/* eml21__ForceAreaMeasureExt has binding name 'eml21__ForceAreaMeasureExt' for type 'eml21:ForceAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt (-162)

#endif

/* eml21__ForceAreaMeasure has binding name 'eml21__ForceAreaMeasure' for type 'eml21:ForceAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure (-161)

#endif

/* eml21__EnergyPerVolumeMeasureExt has binding name 'eml21__EnergyPerVolumeMeasureExt' for type 'eml21:EnergyPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt (-160)

#endif

/* eml21__EnergyPerVolumeMeasure has binding name 'eml21__EnergyPerVolumeMeasure' for type 'eml21:EnergyPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure (-159)

#endif

/* eml21__EnergyPerMassPerTimeMeasureExt has binding name 'eml21__EnergyPerMassPerTimeMeasureExt' for type 'eml21:EnergyPerMassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt (-158)

#endif

/* eml21__EnergyPerMassPerTimeMeasure has binding name 'eml21__EnergyPerMassPerTimeMeasure' for type 'eml21:EnergyPerMassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure (-157)

#endif

/* eml21__EnergyPerMassMeasureExt has binding name 'eml21__EnergyPerMassMeasureExt' for type 'eml21:EnergyPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt (-156)

#endif

/* eml21__EnergyPerMassMeasure has binding name 'eml21__EnergyPerMassMeasure' for type 'eml21:EnergyPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure (-155)

#endif

/* eml21__EnergyPerLengthMeasureExt has binding name 'eml21__EnergyPerLengthMeasureExt' for type 'eml21:EnergyPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt (-154)

#endif

/* eml21__EnergyPerLengthMeasure has binding name 'eml21__EnergyPerLengthMeasure' for type 'eml21:EnergyPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure (-153)

#endif

/* eml21__EnergyPerAreaMeasureExt has binding name 'eml21__EnergyPerAreaMeasureExt' for type 'eml21:EnergyPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt (-152)

#endif

/* eml21__EnergyPerAreaMeasure has binding name 'eml21__EnergyPerAreaMeasure' for type 'eml21:EnergyPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure (-151)

#endif

/* eml21__EnergyMeasureExt has binding name 'eml21__EnergyMeasureExt' for type 'eml21:EnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt (-150)

#endif

/* eml21__EnergyMeasure has binding name 'eml21__EnergyMeasure' for type 'eml21:EnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure (-149)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt' for type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt (-148)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureMeasure has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureMeasure' for type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure (-147)

#endif

/* eml21__EnergyLengthPerAreaMeasureExt has binding name 'eml21__EnergyLengthPerAreaMeasureExt' for type 'eml21:EnergyLengthPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt (-146)

#endif

/* eml21__EnergyLengthPerAreaMeasure has binding name 'eml21__EnergyLengthPerAreaMeasure' for type 'eml21:EnergyLengthPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure (-145)

#endif

/* eml21__ElectromagneticMomentMeasureExt has binding name 'eml21__ElectromagneticMomentMeasureExt' for type 'eml21:ElectromagneticMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt (-144)

#endif

/* eml21__ElectromagneticMomentMeasure has binding name 'eml21__ElectromagneticMomentMeasure' for type 'eml21:ElectromagneticMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure (-143)

#endif

/* eml21__ElectricResistancePerLengthMeasureExt has binding name 'eml21__ElectricResistancePerLengthMeasureExt' for type 'eml21:ElectricResistancePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt (-142)

#endif

/* eml21__ElectricResistancePerLengthMeasure has binding name 'eml21__ElectricResistancePerLengthMeasure' for type 'eml21:ElectricResistancePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure (-141)

#endif

/* eml21__ElectricResistanceMeasureExt has binding name 'eml21__ElectricResistanceMeasureExt' for type 'eml21:ElectricResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt (-140)

#endif

/* eml21__ElectricResistanceMeasure has binding name 'eml21__ElectricResistanceMeasure' for type 'eml21:ElectricResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure (-139)

#endif

/* eml21__ElectricPotentialDifferenceMeasureExt has binding name 'eml21__ElectricPotentialDifferenceMeasureExt' for type 'eml21:ElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt (-138)

#endif

/* eml21__ElectricPotentialDifferenceMeasure has binding name 'eml21__ElectricPotentialDifferenceMeasure' for type 'eml21:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure (-137)

#endif

/* eml21__ElectricFieldStrengthMeasureExt has binding name 'eml21__ElectricFieldStrengthMeasureExt' for type 'eml21:ElectricFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt (-136)

#endif

/* eml21__ElectricFieldStrengthMeasure has binding name 'eml21__ElectricFieldStrengthMeasure' for type 'eml21:ElectricFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure (-135)

#endif

/* eml21__ElectricCurrentMeasureExt has binding name 'eml21__ElectricCurrentMeasureExt' for type 'eml21:ElectricCurrentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt (-134)

#endif

/* eml21__ElectricCurrentMeasure has binding name 'eml21__ElectricCurrentMeasure' for type 'eml21:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure (-133)

#endif

/* eml21__ElectricCurrentDensityMeasureExt has binding name 'eml21__ElectricCurrentDensityMeasureExt' for type 'eml21:ElectricCurrentDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt (-132)

#endif

/* eml21__ElectricCurrentDensityMeasure has binding name 'eml21__ElectricCurrentDensityMeasure' for type 'eml21:ElectricCurrentDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure (-131)

#endif

/* eml21__ElectricConductivityMeasureExt has binding name 'eml21__ElectricConductivityMeasureExt' for type 'eml21:ElectricConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt (-130)

#endif

/* eml21__ElectricConductivityMeasure has binding name 'eml21__ElectricConductivityMeasure' for type 'eml21:ElectricConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure (-129)

#endif

/* eml21__ElectricConductanceMeasureExt has binding name 'eml21__ElectricConductanceMeasureExt' for type 'eml21:ElectricConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt (-128)

#endif

/* eml21__ElectricConductanceMeasure has binding name 'eml21__ElectricConductanceMeasure' for type 'eml21:ElectricConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure (-127)

#endif

/* eml21__ElectricChargePerVolumeMeasureExt has binding name 'eml21__ElectricChargePerVolumeMeasureExt' for type 'eml21:ElectricChargePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt (-126)

#endif

/* eml21__ElectricChargePerVolumeMeasure has binding name 'eml21__ElectricChargePerVolumeMeasure' for type 'eml21:ElectricChargePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure (-125)

#endif

/* eml21__ElectricChargePerMassMeasureExt has binding name 'eml21__ElectricChargePerMassMeasureExt' for type 'eml21:ElectricChargePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt (-124)

#endif

/* eml21__ElectricChargePerMassMeasure has binding name 'eml21__ElectricChargePerMassMeasure' for type 'eml21:ElectricChargePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure (-123)

#endif

/* eml21__ElectricChargePerAreaMeasureExt has binding name 'eml21__ElectricChargePerAreaMeasureExt' for type 'eml21:ElectricChargePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt (-122)

#endif

/* eml21__ElectricChargePerAreaMeasure has binding name 'eml21__ElectricChargePerAreaMeasure' for type 'eml21:ElectricChargePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure (-121)

#endif

/* eml21__ElectricChargeMeasureExt has binding name 'eml21__ElectricChargeMeasureExt' for type 'eml21:ElectricChargeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt (-120)

#endif

/* eml21__ElectricChargeMeasure has binding name 'eml21__ElectricChargeMeasure' for type 'eml21:ElectricChargeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure (-119)

#endif

/* eml21__ElectricalResistivityMeasureExt has binding name 'eml21__ElectricalResistivityMeasureExt' for type 'eml21:ElectricalResistivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt (-118)

#endif

/* eml21__ElectricalResistivityMeasure has binding name 'eml21__ElectricalResistivityMeasure' for type 'eml21:ElectricalResistivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure (-117)

#endif

/* eml21__DynamicViscosityMeasureExt has binding name 'eml21__DynamicViscosityMeasureExt' for type 'eml21:DynamicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt (-116)

#endif

/* eml21__DynamicViscosityMeasure has binding name 'eml21__DynamicViscosityMeasure' for type 'eml21:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure (-115)

#endif

/* eml21__DoseEquivalentMeasureExt has binding name 'eml21__DoseEquivalentMeasureExt' for type 'eml21:DoseEquivalentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt (-114)

#endif

/* eml21__DoseEquivalentMeasure has binding name 'eml21__DoseEquivalentMeasure' for type 'eml21:DoseEquivalentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure (-113)

#endif

/* eml21__DipoleMomentMeasureExt has binding name 'eml21__DipoleMomentMeasureExt' for type 'eml21:DipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt (-112)

#endif

/* eml21__DipoleMomentMeasure has binding name 'eml21__DipoleMomentMeasure' for type 'eml21:DipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure (-111)

#endif

/* eml21__DimensionlessMeasureExt has binding name 'eml21__DimensionlessMeasureExt' for type 'eml21:DimensionlessMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt (-110)

#endif

/* eml21__DimensionlessMeasure has binding name 'eml21__DimensionlessMeasure' for type 'eml21:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure (-109)

#endif

/* eml21__DigitalStorageMeasureExt has binding name 'eml21__DigitalStorageMeasureExt' for type 'eml21:DigitalStorageMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt (-108)

#endif

/* eml21__DigitalStorageMeasure has binding name 'eml21__DigitalStorageMeasure' for type 'eml21:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure (-107)

#endif

/* eml21__DiffusiveTimeOfFlightMeasureExt has binding name 'eml21__DiffusiveTimeOfFlightMeasureExt' for type 'eml21:DiffusiveTimeOfFlightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt (-106)

#endif

/* eml21__DiffusiveTimeOfFlightMeasure has binding name 'eml21__DiffusiveTimeOfFlightMeasure' for type 'eml21:DiffusiveTimeOfFlightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure (-105)

#endif

/* eml21__DiffusionCoefficientMeasureExt has binding name 'eml21__DiffusionCoefficientMeasureExt' for type 'eml21:DiffusionCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt (-104)

#endif

/* eml21__DiffusionCoefficientMeasure has binding name 'eml21__DiffusionCoefficientMeasure' for type 'eml21:DiffusionCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure (-103)

#endif

/* eml21__DataTransferSpeedMeasureExt has binding name 'eml21__DataTransferSpeedMeasureExt' for type 'eml21:DataTransferSpeedMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt (-102)

#endif

/* eml21__DataTransferSpeedMeasure has binding name 'eml21__DataTransferSpeedMeasure' for type 'eml21:DataTransferSpeedMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure (-101)

#endif

/* eml21__CationExchangeCapacityMeasureExt has binding name 'eml21__CationExchangeCapacityMeasureExt' for type 'eml21:CationExchangeCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt (-100)

#endif

/* eml21__CationExchangeCapacityMeasure has binding name 'eml21__CationExchangeCapacityMeasure' for type 'eml21:CationExchangeCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure (-99)

#endif

/* eml21__CapacitanceMeasureExt has binding name 'eml21__CapacitanceMeasureExt' for type 'eml21:CapacitanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt (-98)

#endif

/* eml21__CapacitanceMeasure has binding name 'eml21__CapacitanceMeasure' for type 'eml21:CapacitanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure (-97)

#endif

/* eml21__AttenuationPerFrequencyIntervalMeasureExt has binding name 'eml21__AttenuationPerFrequencyIntervalMeasureExt' for type 'eml21:AttenuationPerFrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt (-96)

#endif

/* eml21__AttenuationPerFrequencyIntervalMeasure has binding name 'eml21__AttenuationPerFrequencyIntervalMeasure' for type 'eml21:AttenuationPerFrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure (-95)

#endif

/* eml21__AreaPerVolumeMeasureExt has binding name 'eml21__AreaPerVolumeMeasureExt' for type 'eml21:AreaPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt (-94)

#endif

/* eml21__AreaPerVolumeMeasure has binding name 'eml21__AreaPerVolumeMeasure' for type 'eml21:AreaPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure (-93)

#endif

/* eml21__AreaPerTimeMeasureExt has binding name 'eml21__AreaPerTimeMeasureExt' for type 'eml21:AreaPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt (-92)

#endif

/* eml21__AreaPerTimeMeasure has binding name 'eml21__AreaPerTimeMeasure' for type 'eml21:AreaPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure (-91)

#endif

/* eml21__AreaPerMassMeasureExt has binding name 'eml21__AreaPerMassMeasureExt' for type 'eml21:AreaPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt (-90)

#endif

/* eml21__AreaPerMassMeasure has binding name 'eml21__AreaPerMassMeasure' for type 'eml21:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure (-89)

#endif

/* eml21__AreaPerCountMeasureExt has binding name 'eml21__AreaPerCountMeasureExt' for type 'eml21:AreaPerCountMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt (-88)

#endif

/* eml21__AreaPerCountMeasure has binding name 'eml21__AreaPerCountMeasure' for type 'eml21:AreaPerCountMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure (-87)

#endif

/* eml21__AreaPerAreaMeasureExt has binding name 'eml21__AreaPerAreaMeasureExt' for type 'eml21:AreaPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt (-86)

#endif

/* eml21__AreaPerAreaMeasure has binding name 'eml21__AreaPerAreaMeasure' for type 'eml21:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure (-85)

#endif

/* eml21__AreaPerAmountOfSubstanceMeasureExt has binding name 'eml21__AreaPerAmountOfSubstanceMeasureExt' for type 'eml21:AreaPerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt (-84)

#endif

/* eml21__AreaPerAmountOfSubstanceMeasure has binding name 'eml21__AreaPerAmountOfSubstanceMeasure' for type 'eml21:AreaPerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure (-83)

#endif

/* eml21__AreaMeasureExt has binding name 'eml21__AreaMeasureExt' for type 'eml21:AreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt (-82)

#endif

/* eml21__AreaMeasure has binding name 'eml21__AreaMeasure' for type 'eml21:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure (-81)

#endif

/* eml21__APINeutronMeasureExt has binding name 'eml21__APINeutronMeasureExt' for type 'eml21:APINeutronMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt (-80)

#endif

/* eml21__APINeutronMeasure has binding name 'eml21__APINeutronMeasure' for type 'eml21:APINeutronMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure (-79)

#endif

/* eml21__APIGravityMeasureExt has binding name 'eml21__APIGravityMeasureExt' for type 'eml21:APIGravityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt (-78)

#endif

/* eml21__APIGravityMeasure has binding name 'eml21__APIGravityMeasure' for type 'eml21:APIGravityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure (-77)

#endif

/* eml21__APIGammaRayMeasureExt has binding name 'eml21__APIGammaRayMeasureExt' for type 'eml21:APIGammaRayMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt (-76)

#endif

/* eml21__APIGammaRayMeasure has binding name 'eml21__APIGammaRayMeasure' for type 'eml21:APIGammaRayMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure (-75)

#endif

/* eml21__AngularVelocityMeasureExt has binding name 'eml21__AngularVelocityMeasureExt' for type 'eml21:AngularVelocityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt (-74)

#endif

/* eml21__AngularVelocityMeasure has binding name 'eml21__AngularVelocityMeasure' for type 'eml21:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure (-73)

#endif

/* eml21__AngularAccelerationMeasureExt has binding name 'eml21__AngularAccelerationMeasureExt' for type 'eml21:AngularAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt (-72)

#endif

/* eml21__AngularAccelerationMeasure has binding name 'eml21__AngularAccelerationMeasure' for type 'eml21:AngularAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure (-71)

#endif

/* eml21__AnglePerVolumeMeasureExt has binding name 'eml21__AnglePerVolumeMeasureExt' for type 'eml21:AnglePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt (-70)

#endif

/* eml21__AnglePerVolumeMeasure has binding name 'eml21__AnglePerVolumeMeasure' for type 'eml21:AnglePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure (-69)

#endif

/* eml21__AnglePerLengthMeasureExt has binding name 'eml21__AnglePerLengthMeasureExt' for type 'eml21:AnglePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt (-68)

#endif

/* eml21__AnglePerLengthMeasure has binding name 'eml21__AnglePerLengthMeasure' for type 'eml21:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure (-67)

#endif

/* eml21__AmountOfSubstancePerVolumeMeasureExt has binding name 'eml21__AmountOfSubstancePerVolumeMeasureExt' for type 'eml21:AmountOfSubstancePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt (-66)

#endif

/* eml21__AmountOfSubstancePerVolumeMeasure has binding name 'eml21__AmountOfSubstancePerVolumeMeasure' for type 'eml21:AmountOfSubstancePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure (-65)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaMeasureExt has binding name 'eml21__AmountOfSubstancePerTimePerAreaMeasureExt' for type 'eml21:AmountOfSubstancePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt (-64)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaMeasure has binding name 'eml21__AmountOfSubstancePerTimePerAreaMeasure' for type 'eml21:AmountOfSubstancePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure (-63)

#endif

/* eml21__AmountOfSubstancePerTimeMeasureExt has binding name 'eml21__AmountOfSubstancePerTimeMeasureExt' for type 'eml21:AmountOfSubstancePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt (-62)

#endif

/* eml21__AmountOfSubstancePerTimeMeasure has binding name 'eml21__AmountOfSubstancePerTimeMeasure' for type 'eml21:AmountOfSubstancePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure (-61)

#endif

/* eml21__AmountOfSubstancePerAreaMeasureExt has binding name 'eml21__AmountOfSubstancePerAreaMeasureExt' for type 'eml21:AmountOfSubstancePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt (-60)

#endif

/* eml21__AmountOfSubstancePerAreaMeasure has binding name 'eml21__AmountOfSubstancePerAreaMeasure' for type 'eml21:AmountOfSubstancePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure (-59)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-58)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceMeasure has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceMeasure' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure (-57)

#endif

/* eml21__AmountOfSubstanceMeasureExt has binding name 'eml21__AmountOfSubstanceMeasureExt' for type 'eml21:AmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt (-56)

#endif

/* eml21__AmountOfSubstanceMeasure has binding name 'eml21__AmountOfSubstanceMeasure' for type 'eml21:AmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure (-55)

#endif

/* eml21__ActivityOfRadioactivityMeasureExt has binding name 'eml21__ActivityOfRadioactivityMeasureExt' for type 'eml21:ActivityOfRadioactivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt (-54)

#endif

/* eml21__ActivityOfRadioactivityMeasure has binding name 'eml21__ActivityOfRadioactivityMeasure' for type 'eml21:ActivityOfRadioactivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure (-53)

#endif

/* eml21__AbsorbedDoseMeasureExt has binding name 'eml21__AbsorbedDoseMeasureExt' for type 'eml21:AbsorbedDoseMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt (-52)

#endif

/* eml21__AbsorbedDoseMeasure has binding name 'eml21__AbsorbedDoseMeasure' for type 'eml21:AbsorbedDoseMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure (-51)

#endif

/* eml21__TvdInterval has binding name 'eml21__TvdInterval' for type 'eml21:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval (-50)

#endif

/* eml21__StringMeasure has binding name 'eml21__StringMeasure' for type 'eml21:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure (-49)

#endif

/* eml21__StringExternalArray has binding name 'eml21__StringExternalArray' for type 'eml21:StringExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray (-48)

#endif

/* eml21__StringConstantArray has binding name 'eml21__StringConstantArray' for type 'eml21:StringConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray (-47)

#endif

/* eml21__MdInterval has binding name 'eml21__MdInterval' for type 'eml21:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval (-46)

#endif

/* eml21__JaggedArray has binding name 'eml21__JaggedArray' for type 'eml21:JaggedArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray (-45)

#endif

/* eml21__IntegerRangeArray has binding name 'eml21__IntegerRangeArray' for type 'eml21:IntegerRangeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray (-44)

#endif

/* eml21__IntegerLatticeArray has binding name 'eml21__IntegerLatticeArray' for type 'eml21:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray (-43)

#endif

/* eml21__IntegerExternalArray has binding name 'eml21__IntegerExternalArray' for type 'eml21:IntegerExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray (-42)

#endif

/* eml21__IntegerConstantArray has binding name 'eml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray (-41)

#endif

/* eml21__IntegerArrayFromBooleanMaskArray has binding name 'eml21__IntegerArrayFromBooleanMaskArray' for type 'eml21:IntegerArrayFromBooleanMaskArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray (-40)

#endif

/* eml21__GenericMeasure has binding name 'eml21__GenericMeasure' for type 'eml21:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure (-39)

#endif

/* eml21__FloatingPointLatticeArray has binding name 'eml21__FloatingPointLatticeArray' for type 'eml21:FloatingPointLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray (-38)

#endif

/* eml21__FloatingPointExternalArray has binding name 'eml21__FloatingPointExternalArray' for type 'eml21:FloatingPointExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray (-37)

#endif

/* eml21__FloatingPointConstantArray has binding name 'eml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray (-36)

#endif

/* eml21__FloatExternalArray has binding name 'eml21__FloatExternalArray' for type 'eml21:FloatExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray (-35)

#endif

/* eml21__DoubleExternalArray has binding name 'eml21__DoubleExternalArray' for type 'eml21:DoubleExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray (-34)

#endif

/* eml21__BooleanExternalArray has binding name 'eml21__BooleanExternalArray' for type 'eml21:BooleanExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray (-33)

#endif

/* eml21__BooleanConstantArray has binding name 'eml21__BooleanConstantArray' for type 'eml21:BooleanConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray (-32)

#endif

/* eml21__BooleanArrayFromIndexArray has binding name 'eml21__BooleanArrayFromIndexArray' for type 'eml21:BooleanArrayFromIndexArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray (-31)

#endif

/* eml21__AuthorityQualifiedName has binding name 'eml21__AuthorityQualifiedName' for type 'eml21:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName (-30)

#endif

/* eml21__AbstractValueArray has binding name 'eml21__AbstractValueArray' for type 'eml21:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray (-29)

#endif

/* eml21__AbstractStringArray has binding name 'eml21__AbstractStringArray' for type 'eml21:AbstractStringArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray (-28)

#endif

/* eml21__AbstractNumericArray has binding name 'eml21__AbstractNumericArray' for type 'eml21:AbstractNumericArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray (-27)

#endif

/* eml21__AbstractIntegerArray has binding name 'eml21__AbstractIntegerArray' for type 'eml21:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray (-26)

#endif

/* eml21__AbstractFloatingPointArray has binding name 'eml21__AbstractFloatingPointArray' for type 'eml21:AbstractFloatingPointArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray (-25)

#endif

/* eml21__AbstractBooleanArray has binding name 'eml21__AbstractBooleanArray' for type 'eml21:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray (-24)

#endif

/* eml21__ObjectAlias has binding name 'eml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias (-23)

#endif

/* eml21__ExtensionNameValue has binding name 'eml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue (-22)

#endif

/* eml21__CustomData has binding name 'eml21__CustomData' for type 'eml21:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_eml21__CustomData (-21)

#endif

/* eml21__Citation has binding name 'eml21__Citation' for type 'eml21:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_eml21__Citation (-20)

#endif

/* eml21__AbstractObject has binding name 'eml21__AbstractObject' for type 'eml21:AbstractObject' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject (-19)

#endif

/* xsd__gYear has binding name 'xsd__gYear' for type 'xsd:gYear' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__gYear
#define SOAP_TYPE_gsoap_eml2_1_xsd__gYear (-18)

#endif

/* xsd__date has binding name 'xsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__date
#define SOAP_TYPE_gsoap_eml2_1_xsd__date (-17)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_xsd__anyURI (-16)

#endif

/* xsd__ID has binding name 'xsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__ID
#define SOAP_TYPE_gsoap_eml2_1_xsd__ID (-15)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__string
#define SOAP_TYPE_gsoap_eml2_1_std__string (-14)

#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary
#define SOAP_TYPE_gsoap_eml2_1_xsd__base64Binary (-8)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault (-845623303)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason (-845623302)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail (-845623299)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code (-845623297)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header (-845623296)

#endif

/* _gco__DateTime has binding name '_gco__DateTime' for type '' */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-2289)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-13)

#endif

/* struct tm has binding name 'tm' for type 'tm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_tm
#define SOAP_TYPE_gsoap_eml2_1_tm (-12)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Reason (-845623305)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Detail (-845623304)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Code (-845623298)

#endif

/* gml__GeodeticCRSPropertyType * has binding name 'PointerTogml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticCRSPropertyType (-2209)

#endif

/* gml__VerticalDatumPropertyType * has binding name 'PointerTogml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalDatumPropertyType (-2207)

#endif

/* gml__VerticalCSPropertyType * has binding name 'PointerTogml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCSPropertyType (-2206)

#endif

/* gml__GeneralConversionPropertyType * has binding name 'PointerTogml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeneralConversionPropertyType (-2205)

#endif

/* gml__EllipsoidPropertyType * has binding name 'PointerTogml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidPropertyType (-2204)

#endif

/* gml__PrimeMeridianPropertyType * has binding name 'PointerTogml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__PrimeMeridianPropertyType (-2203)

#endif

/* gml__GeodeticDatumPropertyType * has binding name 'PointerTogml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticDatumPropertyType (-2202)

#endif

/* gml__SphericalCSPropertyType * has binding name 'PointerTogml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__SphericalCSPropertyType (-2201)

#endif

/* gml__CartesianCSPropertyType * has binding name 'PointerTogml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CartesianCSPropertyType (-2200)

#endif

/* gml__EllipsoidalCSPropertyType * has binding name 'PointerTogml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidalCSPropertyType (-2199)

#endif

/* gml__CRSPropertyType * has binding name 'PointerTogml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CRSPropertyType (-2197)

#endif

/* _gml__coordinateOperationAccuracy * has binding name 'PointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__coordinateOperationAccuracy (-2195)

#endif

/* _gml__secondDefiningParameter * has binding name 'PointerTo_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__secondDefiningParameter (-2194)

#endif

/* gml__AngleType * has binding name 'PointerTogml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__AngleType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__AngleType (-2193)

#endif

/* enum gml__AggregationType * has binding name 'PointerTogml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__AggregationType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__AggregationType (-2192)

#endif

/* gml__CoordinateSystemAxisPropertyType * has binding name 'PointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CoordinateSystemAxisPropertyType (-2190)

#endif

/* _gml__domainOfValidity * has binding name 'PointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__domainOfValidity (-2187)

#endif

/* enum eml21__UnitOfMeasure * has binding name 'PointerToeml21__UnitOfMeasure' for type 'eml21:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitOfMeasure (-2186)

#endif

/* eml21__IntegerConstantArray * has binding name 'PointerToeml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IntegerConstantArray (-2184)

#endif

/* eml21__AbstractBooleanArray * has binding name 'PointerToeml21__AbstractBooleanArray' for type 'eml21:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractBooleanArray (-2183)

#endif

/* eml21__FloatingPointConstantArray * has binding name 'PointerToeml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FloatingPointConstantArray (-2181)

#endif

/* gml__RelatedTimeType * has binding name 'PointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__RelatedTimeType (-2179)

#endif

/* enum eml21__ReferencePressureKind * has binding name 'PointerToeml21__ReferencePressureKind' for type 'eml21:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressureKind (-2178)

#endif

/* eml21__ExternalDataset * has binding name 'PointerToeml21__ExternalDataset' for type 'eml21:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDataset (-2177)

#endif

/* witsml2__ContactIntervalSet * has binding name 'PointerTowitsml2__ContactIntervalSet' for type 'witsml2:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ContactIntervalSet (-2176)

#endif

/* witsml2__CompletionStatusHistory * has binding name 'PointerTowitsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CompletionStatusHistory (-2174)

#endif

/* witsml2__WellboreMarker * has binding name 'PointerTowitsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreMarker (-2172)

#endif

/* eml21__VolumePerVolumeMeasureExt * has binding name 'PointerToeml21__VolumePerVolumeMeasureExt' for type 'eml21:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasureExt (-2171)

#endif

/* witsml2__MudLogParameter * has binding name 'PointerTowitsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudLogParameter (-2169)

#endif

/* witsml2__MudlogReportInterval * has binding name 'PointerTowitsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudlogReportInterval (-2167)

#endif

/* eml21__ForcePerVolumeMeasureExt * has binding name 'PointerToeml21__ForcePerVolumeMeasureExt' for type 'eml21:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerVolumeMeasureExt (-2166)

#endif

/* eml21__ForceMeasureExt * has binding name 'PointerToeml21__ForceMeasureExt' for type 'eml21:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasureExt (-2165)

#endif

/* witsml2__InterpretedIntervalLithology * has binding name 'PointerTowitsml2__InterpretedIntervalLithology' for type 'witsml2:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedIntervalLithology (-2164)

#endif

/* witsml2__LithostratigraphicUnit * has binding name 'PointerTowitsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LithostratigraphicUnit (-2162)

#endif

/* witsml2__GeochronologicalUnit * has binding name 'PointerTowitsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeochronologicalUnit (-2160)

#endif

/* witsml2__CuttingsGeologyInterval * has binding name 'PointerTowitsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsGeologyInterval (-2158)

#endif

/* witsml2__CuttingsIntervalLithology * has binding name 'PointerTowitsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsIntervalLithology (-2156)

#endif

/* eml21__IlluminanceMeasure * has binding name 'PointerToeml21__IlluminanceMeasure' for type 'eml21:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IlluminanceMeasure (-2155)

#endif

/* witsml2__InterpretedGeologyInterval * has binding name 'PointerTowitsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedGeologyInterval (-2153)

#endif

/* witsml2__ShowEvaluationInterval * has binding name 'PointerTowitsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowEvaluationInterval (-2151)

#endif

/* witsml2__CuttingsGeology * has binding name 'PointerTowitsml2__CuttingsGeology' for type 'witsml2:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsGeology (-2150)

#endif

/* witsml2__InterpretedGeology * has binding name 'PointerTowitsml2__InterpretedGeology' for type 'witsml2:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InterpretedGeology (-2149)

#endif

/* witsml2__ShowEvaluation * has binding name 'PointerTowitsml2__ShowEvaluation' for type 'witsml2:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowEvaluation (-2148)

#endif

/* witsml2__IscwsaErrorTerm * has binding name 'PointerTowitsml2__IscwsaErrorTerm' for type 'witsml2:IscwsaErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorTerm
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorTerm (-2146)

#endif

/* witsml2__IscwsaNomenclature * has binding name 'PointerTowitsml2__IscwsaNomenclature' for type 'witsml2:IscwsaNomenclature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNomenclature
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNomenclature (-2145)

#endif

/* witsml2__SurveySection * has binding name 'PointerTowitsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SurveySection (-2143)

#endif

/* witsml2__StimJobDiversion * has binding name 'PointerTowitsml2__StimJobDiversion' for type 'witsml2:StimJobDiversion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiversion (-2142)

#endif

/* witsml2__StimReservoirInterval * has binding name 'PointerTowitsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimReservoirInterval (-2140)

#endif

/* witsml2__StimFlowPath * has binding name 'PointerTowitsml2__StimFlowPath' for type 'witsml2:StimFlowPath' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFlowPath (-2139)

#endif

/* witsml2__StimJobStep * has binding name 'PointerTowitsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobStep (-2137)

#endif

/* witsml2__StimEvent * has binding name 'PointerTowitsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimEvent (-2135)

#endif

/* witsml2__StimShutInPressure * has binding name 'PointerTowitsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimShutInPressure (-2133)

#endif

/* witsml2__StimJobDiagnosticSession * has binding name 'PointerTowitsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiagnosticSession (-2131)

#endif

/* witsml2__StimJobLogCatalog * has binding name 'PointerTowitsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobLogCatalog (-2129)

#endif

/* witsml2__StimJobMaterialCatalog * has binding name 'PointerTowitsml2__StimJobMaterialCatalog' for type 'witsml2:StimJobMaterialCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobMaterialCatalog (-2128)

#endif

/* witsml2__StimJobStage * has binding name 'PointerTowitsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobStage (-2126)

#endif

/* enum witsml2__PIDXCommodityCode * has binding name 'PointerTowitsml2__PIDXCommodityCode' for type 'witsml2:PIDXCommodityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PIDXCommodityCode (-2125)

#endif

/* witsml2__StimPerforationClusterSet * has binding name 'PointerTowitsml2__StimPerforationClusterSet' for type 'witsml2:StimPerforationClusterSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPerforationClusterSet (-2124)

#endif

/* enum witsml2__StimAdditiveKind * has binding name 'PointerTowitsml2__StimAdditiveKind' for type 'witsml2:StimAdditiveKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimAdditiveKind (-2123)

#endif

/* witsml2__StimISO13503_USCORE5Point * has binding name 'PointerTowitsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimISO13503_USCORE5Point (-2121)

#endif

/* witsml2__StimISO13503_USCORE2Properties * has binding name 'PointerTowitsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimISO13503_USCORE2Properties (-2119)

#endif

/* enum witsml2__ProppantAgentKind * has binding name 'PointerTowitsml2__ProppantAgentKind' for type 'witsml2:ProppantAgentKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ProppantAgentKind (-2118)

#endif

/* eml21__AreaPerMassMeasure * has binding name 'PointerToeml21__AreaPerMassMeasure' for type 'eml21:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerMassMeasure (-2117)

#endif

/* short * has binding name 'PointerTowitsml2__LevelIntegerCode' for type 'witsml2:LevelIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LevelIntegerCode (-2116)

#endif

/* enum witsml2__RiskSubCategory * has binding name 'PointerTowitsml2__RiskSubCategory' for type 'witsml2:RiskSubCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RiskSubCategory (-2114)

#endif

/* enum witsml2__DerrickType * has binding name 'PointerTowitsml2__DerrickType' for type 'witsml2:DerrickType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DerrickType (-2113)

#endif

/* std::string * has binding name 'PointerToxsd__gYear' for type 'xsd:gYear' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__gYear
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__gYear (-2112)

#endif

/* enum witsml2__RigType * has binding name 'PointerTowitsml2__RigType' for type 'witsml2:RigType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RigType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RigType (-2111)

#endif

/* witsml2__SurfaceEquipment * has binding name 'PointerTowitsml2__SurfaceEquipment' for type 'witsml2:SurfaceEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SurfaceEquipment (-2110)

#endif

/* witsml2__Degasser * has binding name 'PointerTowitsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Degasser (-2108)

#endif

/* witsml2__Hydrocyclone * has binding name 'PointerTowitsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Hydrocyclone (-2106)

#endif

/* witsml2__Centrifuge * has binding name 'PointerTowitsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Centrifuge (-2104)

#endif

/* witsml2__MudPump * has binding name 'PointerTowitsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudPump (-2102)

#endif

/* witsml2__Pit * has binding name 'PointerTowitsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Pit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Pit (-2100)

#endif

/* witsml2__Bop * has binding name 'PointerTowitsml2__Bop' for type 'witsml2:Bop' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Bop
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Bop (-2099)

#endif

/* witsml2__Shaker * has binding name 'PointerTowitsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Shaker (-2097)

#endif

/* enum witsml2__DriveType * has binding name 'PointerTowitsml2__DriveType' for type 'witsml2:DriveType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DriveType (-2096)

#endif

/* enum witsml2__DrawWorksType * has binding name 'PointerTowitsml2__DrawWorksType' for type 'witsml2:DrawWorksType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrawWorksType (-2095)

#endif

/* witsml2__IscwsaErrorTermValue * has binding name 'PointerTowitsml2__IscwsaErrorTermValue' for type 'witsml2:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorTermValue (-2093)

#endif

/* witsml2__IscwsaModelParameters * has binding name 'PointerTowitsml2__IscwsaModelParameters' for type 'witsml2:IscwsaModelParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaModelParameters (-2092)

#endif

/* witsml2__IscwsaSurveyToolOperatingInterval * has binding name 'PointerTowitsml2__IscwsaSurveyToolOperatingInterval' for type 'witsml2:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaSurveyToolOperatingInterval (-2090)

#endif

/* witsml2__IscwsaSurveyToolOperatingCondition * has binding name 'PointerTowitsml2__IscwsaSurveyToolOperatingCondition' for type 'witsml2:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaSurveyToolOperatingCondition (-2088)

#endif

/* witsml2__IscwsaAuthorizationData * has binding name 'PointerTowitsml2__IscwsaAuthorizationData' for type 'witsml2:IscwsaAuthorizationData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaAuthorizationData (-2087)

#endif

/* enum witsml2__AziRef * has binding name 'PointerTowitsml2__AziRef' for type 'witsml2:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AziRef (-2086)

#endif

/* witsml2__PumpOp * has binding name 'PointerTowitsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpOp (-2084)

#endif

/* witsml2__PitVolume * has binding name 'PointerTowitsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PitVolume (-2082)

#endif

/* witsml2__Scr * has binding name 'PointerTowitsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Scr
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Scr (-2080)

#endif

/* witsml2__TrajectoryStation * has binding name 'PointerTowitsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajectoryStation (-2078)

#endif

/* witsml2__Personnel * has binding name 'PointerTowitsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Personnel (-2076)

#endif

/* witsml2__MudVolume * has binding name 'PointerTowitsml2__MudVolume' for type 'witsml2:MudVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudVolume (-2075)

#endif

/* witsml2__Inventory * has binding name 'PointerTowitsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Inventory (-2073)

#endif

/* witsml2__Weather * has binding name 'PointerTowitsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Weather
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Weather (-2071)

#endif

/* witsml2__SupportCraft * has binding name 'PointerTowitsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SupportCraft (-2069)

#endif

/* witsml2__Hse * has binding name 'PointerTowitsml2__Hse' for type 'witsml2:Hse' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Hse
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Hse (-2068)

#endif

/* witsml2__ShakerOp * has binding name 'PointerTowitsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShakerOp (-2066)

#endif

/* witsml2__RigResponse * has binding name 'PointerTowitsml2__RigResponse' for type 'witsml2:RigResponse' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RigResponse (-2065)

#endif

/* witsml2__AbstractConnectionType * has binding name 'PointerTowitsml2__AbstractConnectionType' for type 'witsml2:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractConnectionType (-2064)

#endif

/* enum witsml2__ConnectionFormType * has binding name 'PointerTowitsml2__ConnectionFormType' for type 'witsml2:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ConnectionFormType (-2063)

#endif

/* witsml2__BoreholeStringSet * has binding name 'PointerTowitsml2__BoreholeStringSet' for type 'witsml2:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeStringSet (-2062)

#endif

/* witsml2__EquipmentSet * has binding name 'PointerTowitsml2__EquipmentSet' for type 'witsml2:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentSet (-2061)

#endif

/* witsml2__PerforationSets * has binding name 'PointerTowitsml2__PerforationSets' for type 'witsml2:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSets (-2060)

#endif

/* witsml2__DownholeStringSet * has binding name 'PointerTowitsml2__DownholeStringSet' for type 'witsml2:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeStringSet (-2059)

#endif

/* witsml2__Perforating * has binding name 'PointerTowitsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Perforating (-2057)

#endif

/* witsml2__Participant * has binding name 'PointerTowitsml2__Participant' for type 'witsml2:Participant' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Participant
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Participant (-2056)

#endif

/* witsml2__DownholeComponentReference * has binding name 'PointerTowitsml2__DownholeComponentReference' for type 'witsml2:DownholeComponentReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeComponentReference (-2055)

#endif

/* witsml2__DayCost * has binding name 'PointerTowitsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DayCost (-2053)

#endif

/* witsml2__AbstractEventExtension * has binding name 'PointerTowitsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractEventExtension (-2051)

#endif

/* witsml2__EventType * has binding name 'PointerTowitsml2__EventType' for type 'witsml2:EventType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventType (-2050)

#endif

/* witsml2__DepthRegLogSection * has binding name 'PointerTowitsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegLogSection (-2047)

#endif

/* witsml2__DepthRegLogRect * has binding name 'PointerTowitsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegLogRect (-2046)

#endif

/* enum witsml2__MessageDigestType * has binding name 'PointerTowitsml2__MessageDigestType' for type 'witsml2:MessageDigestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MessageDigestType (-2045)

#endif

/* eml21__DigitalStorageMeasure * has binding name 'PointerToeml21__DigitalStorageMeasure' for type 'eml21:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DigitalStorageMeasure (-2044)

#endif

/* enum witsml2__MimeType * has binding name 'PointerTowitsml2__MimeType' for type 'witsml2:MimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MimeType (-2043)

#endif

/* enum witsml2__FileNameType * has binding name 'PointerTowitsml2__FileNameType' for type 'witsml2:FileNameType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__FileNameType (-2042)

#endif

/* witsml2__PointMetadata * has binding name 'PointerTowitsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PointMetadata (-2040)

#endif

/* witsml2__LogChannelAxis * has binding name 'PointerTowitsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogChannelAxis (-2038)

#endif

/* witsml2__ChannelSet * has binding name 'PointerTowitsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelSet (-2036)

#endif

/* witsml2__AbstractLogDataContext * has binding name 'PointerTowitsml2__AbstractLogDataContext' for type 'witsml2:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractLogDataContext (-2034)

#endif

/* eml21__LengthMeasureExt * has binding name 'PointerToeml21__LengthMeasureExt' for type 'eml21:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasureExt (-2033)

#endif

/* enum witsml2__LoggingMethod * has binding name 'PointerTowitsml2__LoggingMethod' for type 'witsml2:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LoggingMethod (-2032)

#endif

/* enum witsml2__ChannelDerivation * has binding name 'PointerTowitsml2__ChannelDerivation' for type 'witsml2:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelDerivation (-2031)

#endif

/* witsml2__AbstractIndexValue * has binding name 'PointerTowitsml2__AbstractIndexValue' for type 'witsml2:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractIndexValue (-2030)

#endif

/* enum witsml2__ChannelState * has binding name 'PointerTowitsml2__ChannelState' for type 'witsml2:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelState (-2029)

#endif

/* witsml2__ChannelData * has binding name 'PointerTowitsml2__ChannelData' for type 'witsml2:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelData (-2028)

#endif

/* witsml2__Channel * has binding name 'PointerTowitsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Channel (-2026)

#endif

/* witsml2__ChannelIndex * has binding name 'PointerTowitsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ChannelIndex (-2024)

#endif

/* witsml2__WellboreGeometrySection * has binding name 'PointerTowitsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreGeometrySection (-2022)

#endif

/* witsml2__CementingFluid * has binding name 'PointerTowitsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementingFluid (-2020)

#endif

/* witsml2__CementJobDesign * has binding name 'PointerTowitsml2__CementJobDesign' for type 'witsml2:CementJobDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobDesign (-2019)

#endif

/* witsml2__CementJobReport * has binding name 'PointerTowitsml2__CementJobReport' for type 'witsml2:CementJobReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobReport (-2018)

#endif

/* enum witsml2__CementJobType * has binding name 'PointerTowitsml2__CementJobType' for type 'witsml2:CementJobType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementJobType (-2017)

#endif

/* witsml2__CementStageDesign * has binding name 'PointerTowitsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementStageDesign (-2015)

#endif

/* witsml2__CementStageReport * has binding name 'PointerTowitsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementStageReport (-2013)

#endif

/* __witsml2__BendOffset_sequence * has binding name 'PointerTo__witsml2__BendOffset_sequence' for type '-witsml2:BendOffset-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BendOffset_sequence (-2012)

#endif

/* __witsml2__BendAngle_sequence * has binding name 'PointerTo__witsml2__BendAngle_sequence' for type '-witsml2:BendAngle-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BendAngle_sequence (-2010)

#endif

/* witsml2__TubularComponent * has binding name 'PointerTowitsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TubularComponent (-2007)

#endif

/* __witsml2__BottomHoleStaticTemperature_sequence_ * has binding name 'PointerTo__witsml2__BottomHoleStaticTemperature_sequence_' for type '-witsml2:BottomHoleStaticTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BottomHoleStaticTemperature_sequence_ (-2006)

#endif

/* __witsml2__BottomHoleCirculatingTemperature_sequence_ * has binding name 'PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_' for type '-witsml2:BottomHoleCirculatingTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_ (-2004)

#endif

/* witsml2__DrillReportSurveyStation * has binding name 'PointerTowitsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportSurveyStation (-2001)

#endif

/* witsml2__TimestampedCommentString * has binding name 'PointerTowitsml2__TimestampedCommentString' for type 'witsml2:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TimestampedCommentString (-2000)

#endif

/* witsml2__DrillReportPorePressure * has binding name 'PointerTowitsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportPorePressure (-1998)

#endif

/* witsml2__DrillReportStatusInfo * has binding name 'PointerTowitsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportStatusInfo (-1996)

#endif

/* witsml2__DrillReportWellboreInfo * has binding name 'PointerTowitsml2__DrillReportWellboreInfo' for type 'witsml2:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportWellboreInfo (-1995)

#endif

/* witsml2__DrillReportGasReadingInfo * has binding name 'PointerTowitsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportGasReadingInfo (-1993)

#endif

/* witsml2__DrillReportPerfInfo * has binding name 'PointerTowitsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportPerfInfo (-1991)

#endif

/* witsml2__DrillReportStratInfo * has binding name 'PointerTowitsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportStratInfo (-1989)

#endif

/* witsml2__DrillReportControlIncidentInfo * has binding name 'PointerTowitsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportControlIncidentInfo (-1987)

#endif

/* witsml2__DrillReportEquipFailureInfo * has binding name 'PointerTowitsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportEquipFailureInfo (-1985)

#endif

/* witsml2__DrillReportLithShowInfo * has binding name 'PointerTowitsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportLithShowInfo (-1983)

#endif

/* witsml2__DrillReportFormTestInfo * has binding name 'PointerTowitsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportFormTestInfo (-1981)

#endif

/* witsml2__DrillReportWellTestInfo * has binding name 'PointerTowitsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportWellTestInfo (-1979)

#endif

/* witsml2__DrillReportCoreInfo * has binding name 'PointerTowitsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportCoreInfo (-1977)

#endif

/* witsml2__DrillReportLogInfo * has binding name 'PointerTowitsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillReportLogInfo (-1975)

#endif

/* witsml2__DrillActivity * has binding name 'PointerTowitsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivity (-1973)

#endif

/* enum witsml2__OpsReportVersion * has binding name 'PointerTowitsml2__OpsReportVersion' for type 'witsml2:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__OpsReportVersion (-1971)

#endif

/* witsml2__Fluid * has binding name 'PointerTowitsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Fluid (-1969)

#endif

/* witsml2__DrillingParams * has binding name 'PointerTowitsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillingParams (-1967)

#endif

/* enum witsml2__BhaStatus * has binding name 'PointerTowitsml2__BhaStatus' for type 'witsml2:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BhaStatus (-1966)

#endif

/* witsml2__WellDatum * has binding name 'PointerTowitsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellDatum (-1964)

#endif

/* witsml2__ReferencePoint * has binding name 'PointerTowitsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ReferencePoint (-1962)

#endif

/* witsml2__PublicLandSurveySystem * has binding name 'PointerTowitsml2__PublicLandSurveySystem' for type 'witsml2:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystem (-1961)

#endif

/* witsml2__GeodeticWellLocation * has binding name 'PointerTowitsml2__GeodeticWellLocation' for type 'witsml2:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeodeticWellLocation (-1960)

#endif

/* enum witsml2__WellDirection * has binding name 'PointerTowitsml2__WellDirection' for type 'witsml2:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellDirection (-1959)

#endif

/* enum witsml2__WellFluid * has binding name 'PointerTowitsml2__WellFluid' for type 'witsml2:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellFluid (-1958)

#endif

/* std::string * has binding name 'PointerToeml21__TimeZone' for type 'eml21:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeZone (-1957)

#endif

/* enum witsml2__WellboreShape * has binding name 'PointerTowitsml2__WellboreShape' for type 'witsml2:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreShape (-1956)

#endif

/* enum witsml2__WellPurpose * has binding name 'PointerTowitsml2__WellPurpose' for type 'witsml2:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellPurpose (-1955)

#endif

/* enum eml21__WellStatus * has binding name 'PointerToeml21__WellStatus' for type 'eml21:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellStatus (-1954)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-1953)

#endif

/* gmd__URL_USCOREPropertyType * has binding name 'PointerTogmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__URL_USCOREPropertyType (-1952)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType (-1951)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREAddress_USCOREPropertyType (-1950)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORETelephone_USCOREPropertyType (-1949)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType (-1948)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREContact_USCOREPropertyType (-1947)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType (-1946)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORESeries_USCOREPropertyType (-1945)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-1943)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-1941)

#endif

/* gco__Date_USCOREPropertyType * has binding name 'PointerTogco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__Date_USCOREPropertyType (-1939)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDate_USCOREPropertyType (-1937)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__DQ_USCOREResult_USCOREPropertyType (-1935)

#endif

/* gco__DateTime_USCOREPropertyType * has binding name 'PointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__DateTime_USCOREPropertyType (-1933)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORECitation_USCOREPropertyType (-1932)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-1931)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-1930)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType * has binding name 'PointerTogsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogsr__SC_USCORECRS_USCOREPropertyType (-1928)

#endif

/* gco__Real_USCOREPropertyType * has binding name 'PointerTogco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__Real_USCOREPropertyType (-1927)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType * has binding name 'PointerTogts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType (-1926)

#endif

/* gco__Boolean_USCOREPropertyType * has binding name 'PointerTogco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__Boolean_USCOREPropertyType (-1925)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-1923)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-1921)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-1919)

#endif

/* gco__CharacterString_USCOREPropertyType * has binding name 'PointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__CharacterString_USCOREPropertyType (-1918)

#endif

/* enum _gml__RelatedTimeType_relativePosition * has binding name 'PointerTo_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__RelatedTimeType_relativePosition (-1917)

#endif

/* eml21__AbstractGraphicalInformation * has binding name 'PointerToeml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGraphicalInformation (-1914)

#endif

/* eml21__IndexRange * has binding name 'PointerToeml21__IndexRange' for type 'eml21:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IndexRange (-1913)

#endif

/* eml21__FailingRule * has binding name 'PointerToeml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FailingRule (-1911)

#endif

/* gml__VerticalCRSType * has binding name 'PointerTogml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCRSType (-1910)

#endif

/* gml__ProjectedCRSType * has binding name 'PointerTogml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__ProjectedCRSType (-1909)

#endif

/* std::string * has binding name 'PointerToeml21__LengthUomExt' for type 'eml21:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthUomExt (-1908)

#endif

/* eml21__AbstractProjectedCrs * has binding name 'PointerToeml21__AbstractProjectedCrs' for type 'eml21:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractProjectedCrs (-1907)

#endif

/* eml21__AuthorityQualifiedName * has binding name 'PointerToeml21__AuthorityQualifiedName' for type 'eml21:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AuthorityQualifiedName (-1906)

#endif

/* eml21__AbstractGeodeticCrs * has binding name 'PointerToeml21__AbstractGeodeticCrs' for type 'eml21:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGeodeticCrs (-1905)

#endif

/* std::string * has binding name 'PointerToeml21__ReferenceConditionExt' for type 'eml21:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferenceConditionExt (-1904)

#endif

/* eml21__ReferencePressure * has binding name 'PointerToeml21__ReferencePressure' for type 'eml21:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressure (-1902)

#endif

/* eml21__PressureMeasureExt * has binding name 'PointerToeml21__PressureMeasureExt' for type 'eml21:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasureExt (-1901)

#endif

/* eml21__TimeSeriesParentage * has binding name 'PointerToeml21__TimeSeriesParentage' for type 'eml21:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeSeriesParentage (-1900)

#endif

/* eml21__GeologicTime * has binding name 'PointerToeml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GeologicTime (-1898)

#endif

/* eml21__PropertyKind * has binding name 'PointerToeml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PropertyKind (-1896)

#endif

/* eml21__ParameterTemplate * has binding name 'PointerToeml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ParameterTemplate (-1894)

#endif

/* enum witsml2__PerforationStatus * has binding name 'PointerTowitsml2__PerforationStatus' for type 'witsml2:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationStatus (-1893)

#endif

/* witsml2__PerforationStatusHistory * has binding name 'PointerTowitsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationStatusHistory (-1891)

#endif

/* double * has binding name 'PointerTowitsml2__NonNegativeFraction' for type 'witsml2:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NonNegativeFraction (-1890)

#endif

/* enum witsml2__PhysicalStatus * has binding name 'PointerTowitsml2__PhysicalStatus' for type 'witsml2:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PhysicalStatus (-1889)

#endif

/* witsml2__IntervalStatusHistory * has binding name 'PointerTowitsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IntervalStatusHistory (-1887)

#endif

/* witsml2__GravelPackInterval * has binding name 'PointerTowitsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GravelPackInterval (-1885)

#endif

/* witsml2__PerforationSetInterval * has binding name 'PointerTowitsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSetInterval (-1883)

#endif

/* witsml2__OpenHoleInterval * has binding name 'PointerTowitsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__OpenHoleInterval (-1881)

#endif

/* witsml2__SlotsInterval * has binding name 'PointerTowitsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SlotsInterval (-1879)

#endif

/* enum witsml2__CompletionStatus * has binding name 'PointerTowitsml2__CompletionStatus' for type 'witsml2:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CompletionStatus (-1878)

#endif

/* __witsml2__RopStatistics_sequence * has binding name 'PointerTo__witsml2__RopStatistics_sequence' for type '-witsml2:RopStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__RopStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__RopStatistics_sequence (-1877)

#endif

/* __witsml2__TorqueCurrentStatistics_sequence * has binding name 'PointerTo__witsml2__TorqueCurrentStatistics_sequence' for type '-witsml2:TorqueCurrentStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__TorqueCurrentStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__TorqueCurrentStatistics_sequence (-1875)

#endif

/* eml21__ElectricCurrentMeasure * has binding name 'PointerToeml21__ElectricCurrentMeasure' for type 'eml21:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricCurrentMeasure (-1874)

#endif

/* __witsml2__RpmStatistics_sequence * has binding name 'PointerTo__witsml2__RpmStatistics_sequence' for type '-witsml2:RpmStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__RpmStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__RpmStatistics_sequence (-1872)

#endif

/* __witsml2__MudGas_sequence * has binding name 'PointerTo__witsml2__MudGas_sequence' for type '-witsml2:MudGas-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__MudGas_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__MudGas_sequence (-1870)

#endif

/* witsml2__GasPeak * has binding name 'PointerTowitsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasPeak (-1868)

#endif

/* witsml2__GasInMud * has binding name 'PointerTowitsml2__GasInMud' for type 'witsml2:GasInMud' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasInMud (-1867)

#endif

/* __witsml2__DrillingParameters_sequence * has binding name 'PointerTo__witsml2__DrillingParameters_sequence' for type '-witsml2:DrillingParameters-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__DrillingParameters_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__DrillingParameters_sequence (-1865)

#endif

/* witsml2__DxcStatistics * has binding name 'PointerTowitsml2__DxcStatistics' for type 'witsml2:DxcStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DxcStatistics (-1864)

#endif

/* witsml2__EcdStatistics * has binding name 'PointerTowitsml2__EcdStatistics' for type 'witsml2:EcdStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EcdStatistics (-1863)

#endif

/* witsml2__MudDensityStatistics * has binding name 'PointerTowitsml2__MudDensityStatistics' for type 'witsml2:MudDensityStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudDensityStatistics (-1862)

#endif

/* witsml2__RpmStatistics * has binding name 'PointerTowitsml2__RpmStatistics' for type 'witsml2:RpmStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RpmStatistics (-1861)

#endif

/* witsml2__TorqueCurrentStatistics * has binding name 'PointerTowitsml2__TorqueCurrentStatistics' for type 'witsml2:TorqueCurrentStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TorqueCurrentStatistics (-1860)

#endif

/* witsml2__TorqueStatistics * has binding name 'PointerTowitsml2__TorqueStatistics' for type 'witsml2:TorqueStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TorqueStatistics (-1859)

#endif

/* witsml2__WobStatistics * has binding name 'PointerTowitsml2__WobStatistics' for type 'witsml2:WobStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WobStatistics (-1858)

#endif

/* witsml2__RopStatistics * has binding name 'PointerTowitsml2__RopStatistics' for type 'witsml2:RopStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RopStatistics (-1857)

#endif

/* __witsml2__WobStatistics_sequence * has binding name 'PointerTo__witsml2__WobStatistics_sequence' for type '-witsml2:WobStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__WobStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__WobStatistics_sequence (-1855)

#endif

/* __witsml2__EcdStatistics_sequence * has binding name 'PointerTo__witsml2__EcdStatistics_sequence' for type '-witsml2:EcdStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__EcdStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__EcdStatistics_sequence (-1853)

#endif

/* __witsml2__MudDensityStatistics_sequence * has binding name 'PointerTo__witsml2__MudDensityStatistics_sequence' for type '-witsml2:MudDensityStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__MudDensityStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__MudDensityStatistics_sequence (-1851)

#endif

/* __witsml2__DxcStatistics_sequence * has binding name 'PointerTo__witsml2__DxcStatistics_sequence' for type '-witsml2:DxcStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__DxcStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__DxcStatistics_sequence (-1849)

#endif

/* __witsml2__TorqueStatistics_sequence * has binding name 'PointerTo__witsml2__TorqueStatistics_sequence' for type '-witsml2:TorqueStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__TorqueStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__TorqueStatistics_sequence (-1847)

#endif

/* witsml2__MudGas * has binding name 'PointerTowitsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudGas (-1844)

#endif

/* witsml2__DrillingParameters * has binding name 'PointerTowitsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillingParameters (-1842)

#endif

/* witsml2__Chromatograph * has binding name 'PointerTowitsml2__Chromatograph' for type 'witsml2:Chromatograph' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Chromatograph (-1841)

#endif

/* witsml2__LithologyQualifier * has binding name 'PointerTowitsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LithologyQualifier (-1839)

#endif

/* witsml2__CuttingsIntervalShow * has binding name 'PointerTowitsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CuttingsIntervalShow (-1837)

#endif

/* enum eml21__MatrixCementKind * has binding name 'PointerToeml21__MatrixCementKind' for type 'eml21:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MatrixCementKind (-1836)

#endif

/* enum witsml2__ShowFluorescence * has binding name 'PointerTowitsml2__ShowFluorescence' for type 'witsml2:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowFluorescence (-1835)

#endif

/* enum witsml2__ShowLevel * has binding name 'PointerTowitsml2__ShowLevel' for type 'witsml2:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowLevel (-1834)

#endif

/* enum witsml2__ShowSpeed * has binding name 'PointerTowitsml2__ShowSpeed' for type 'witsml2:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowSpeed (-1833)

#endif

/* enum witsml2__ShowRating * has binding name 'PointerTowitsml2__ShowRating' for type 'witsml2:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShowRating (-1832)

#endif

/* witsml2__IscwsaNomenclatureConstant * has binding name 'PointerTowitsml2__IscwsaNomenclatureConstant' for type 'witsml2:IscwsaNomenclatureConstant' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNomenclatureConstant
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNomenclatureConstant (-1830)

#endif

/* witsml2__IscwsaNameAndDescription * has binding name 'PointerTowitsml2__IscwsaNameAndDescription' for type 'witsml2:IscwsaNameAndDescription' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNameAndDescription
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaNameAndDescription (-1828)

#endif

/* witsml2__AbstractIscwsaErrorCoefficient * has binding name 'PointerTowitsml2__AbstractIscwsaErrorCoefficient' for type 'witsml2:AbstractIscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractIscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractIscwsaErrorCoefficient (-1826)

#endif

/* witsml2__IscwsaErrorCoefficient * has binding name 'PointerTowitsml2__IscwsaErrorCoefficient' for type 'witsml2:IscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IscwsaErrorCoefficient (-1824)

#endif

/* enum witsml2__ErrorTermSource * has binding name 'PointerTowitsml2__ErrorTermSource' for type 'witsml2:ErrorTermSource' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ErrorTermSource
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ErrorTermSource (-1822)

#endif

/* __witsml2__StimJobDiversion_sequence * has binding name 'PointerTo__witsml2__StimJobDiversion_sequence' for type '-witsml2:StimJobDiversion-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__StimJobDiversion_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__StimJobDiversion_sequence (-1821)

#endif

/* enum witsml2__StimJobDiversionMethod * has binding name 'PointerTowitsml2__StimJobDiversionMethod' for type 'witsml2:StimJobDiversionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimJobDiversionMethod (-1820)

#endif

/* witsml2__StimPerforationCluster * has binding name 'PointerTowitsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPerforationCluster (-1817)

#endif

/* witsml2__StimPumpFlowBackTest * has binding name 'PointerTowitsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPumpFlowBackTest (-1815)

#endif

/* witsml2__StimStepTest * has binding name 'PointerTowitsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimStepTest (-1813)

#endif

/* witsml2__StimStepDownTest * has binding name 'PointerTowitsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimStepDownTest (-1811)

#endif

/* witsml2__StimFetTest * has binding name 'PointerTowitsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFetTest (-1809)

#endif

/* eml21__VolumetricThermalExpansionMeasure * has binding name 'PointerToeml21__VolumetricThermalExpansionMeasure' for type 'eml21:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumetricThermalExpansionMeasure (-1808)

#endif

/* eml21__ThermalConductivityMeasure * has binding name 'PointerToeml21__ThermalConductivityMeasure' for type 'eml21:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermalConductivityMeasure (-1807)

#endif

/* eml21__SpecificHeatCapacityMeasure * has binding name 'PointerToeml21__SpecificHeatCapacityMeasure' for type 'eml21:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__SpecificHeatCapacityMeasure (-1806)

#endif

/* enum witsml2__StimMaterialKind * has binding name 'PointerTowitsml2__StimMaterialKind' for type 'witsml2:StimMaterialKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimMaterialKind (-1804)

#endif

/* witsml2__StimPressureFlowRate * has binding name 'PointerTowitsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPressureFlowRate (-1802)

#endif

/* witsml2__StimFluid * has binding name 'PointerTowitsml2__StimFluid' for type 'witsml2:StimFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluid (-1801)

#endif

/* witsml2__ISO13503_USCORE2SieveAnalysisData * has binding name 'PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData (-1799)

#endif

/* witsml2__ISO13503_USCORE2CrushTestData * has binding name 'PointerTowitsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ISO13503_USCORE2CrushTestData (-1797)

#endif

/* eml21__MassPerTimeMeasure * has binding name 'PointerToeml21__MassPerTimeMeasure' for type 'eml21:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerTimeMeasure (-1796)

#endif

/* eml21__PermeabilityLengthMeasure * has binding name 'PointerToeml21__PermeabilityLengthMeasure' for type 'eml21:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PermeabilityLengthMeasure (-1795)

#endif

/* witsml2__StimProppantAgent * has binding name 'PointerTowitsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimProppantAgent (-1793)

#endif

/* witsml2__StimAdditive * has binding name 'PointerTowitsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimAdditive (-1791)

#endif

/* witsml2__StimMaterialQuantity * has binding name 'PointerTowitsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimMaterialQuantity (-1789)

#endif

/* eml21__UnitlessMeasure * has binding name 'PointerToeml21__UnitlessMeasure' for type 'eml21:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitlessMeasure (-1788)

#endif

/* enum witsml2__StimFluidSubtype * has binding name 'PointerTowitsml2__StimFluidSubtype' for type 'witsml2:StimFluidSubtype' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluidSubtype (-1787)

#endif

/* enum witsml2__StimFluidKind * has binding name 'PointerTowitsml2__StimFluidKind' for type 'witsml2:StimFluidKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFluidKind (-1786)

#endif

/* witsml2__StimTubular * has binding name 'PointerTowitsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimTubular (-1784)

#endif

/* enum witsml2__StimFlowPathType * has binding name 'PointerTowitsml2__StimFlowPathType' for type 'witsml2:StimFlowPathType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimFlowPathType (-1783)

#endif

/* eml21__ForcePerVolumeMeasure * has binding name 'PointerToeml21__ForcePerVolumeMeasure' for type 'eml21:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerVolumeMeasure (-1782)

#endif

/* witsml2__StimPumpFlowBackTestStep * has binding name 'PointerTowitsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StimPumpFlowBackTestStep (-1780)

#endif

/* eml21__IsothermalCompressibilityMeasure * has binding name 'PointerToeml21__IsothermalCompressibilityMeasure' for type 'eml21:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IsothermalCompressibilityMeasure (-1779)

#endif

/* eml21__PermeabilityRockMeasure * has binding name 'PointerToeml21__PermeabilityRockMeasure' for type 'eml21:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PermeabilityRockMeasure (-1778)

#endif

/* eml21__VolumePerLengthMeasure * has binding name 'PointerToeml21__VolumePerLengthMeasure' for type 'eml21:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerLengthMeasure (-1777)

#endif

/* short * has binding name 'PointerTowitsml2__PumpActionIntegerCode' for type 'witsml2:PumpActionIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpActionIntegerCode (-1776)

#endif

/* enum witsml2__PumpType * has binding name 'PointerTowitsml2__PumpType' for type 'witsml2:PumpType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpType (-1775)

#endif

/* enum witsml2__PitType * has binding name 'PointerTowitsml2__PitType' for type 'witsml2:PitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PitType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PitType (-1774)

#endif

/* enum witsml2__BopType * has binding name 'PointerTowitsml2__BopType' for type 'witsml2:BopType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BopType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BopType (-1773)

#endif

/* witsml2__BopComponent * has binding name 'PointerTowitsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BopComponent (-1771)

#endif

/* witsml2__MeasureOrQuantity * has binding name 'PointerTowitsml2__MeasureOrQuantity' for type 'witsml2:MeasureOrQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasureOrQuantity (-1770)

#endif

/* witsml2__StnTrajCorUsed * has binding name 'PointerTowitsml2__StnTrajCorUsed' for type 'witsml2:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajCorUsed (-1769)

#endif

/* witsml2__StnTrajRawData * has binding name 'PointerTowitsml2__StnTrajRawData' for type 'witsml2:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajRawData (-1768)

#endif

/* witsml2__RefWellboreTrajectoryStation * has binding name 'PointerTowitsml2__RefWellboreTrajectoryStation' for type 'witsml2:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellboreTrajectoryStation (-1767)

#endif

/* witsml2__StnTrajMatrixCov * has binding name 'PointerTowitsml2__StnTrajMatrixCov' for type 'witsml2:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajMatrixCov (-1766)

#endif

/* witsml2__StnTrajValid * has binding name 'PointerTowitsml2__StnTrajValid' for type 'witsml2:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StnTrajValid (-1765)

#endif

/* enum witsml2__TrajStationStatus * has binding name 'PointerTowitsml2__TrajStationStatus' for type 'witsml2:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajStationStatus (-1764)

#endif

/* eml21__MagneticFluxDensityMeasure * has binding name 'PointerToeml21__MagneticFluxDensityMeasure' for type 'eml21:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MagneticFluxDensityMeasure (-1763)

#endif

/* eml21__LinearAccelerationMeasure * has binding name 'PointerToeml21__LinearAccelerationMeasure' for type 'eml21:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LinearAccelerationMeasure (-1762)

#endif

/* enum witsml2__TrajStnCalcAlgorithm * has binding name 'PointerTowitsml2__TrajStnCalcAlgorithm' for type 'witsml2:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TrajStnCalcAlgorithm (-1761)

#endif

/* enum witsml2__TypeSurveyTool * has binding name 'PointerTowitsml2__TypeSurveyTool' for type 'witsml2:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__TypeSurveyTool (-1760)

#endif

/* witsml2__ShakerScreen * has binding name 'PointerTowitsml2__ShakerScreen' for type 'witsml2:ShakerScreen' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ShakerScreen (-1759)

#endif

/* eml21__AreaPerAreaMeasure * has binding name 'PointerToeml21__AreaPerAreaMeasure' for type 'eml21:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerAreaMeasure (-1758)

#endif

/* eml21__PowerPerPowerMeasure * has binding name 'PointerToeml21__PowerPerPowerMeasure' for type 'eml21:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerPerPowerMeasure (-1757)

#endif

/* enum witsml2__PumpOpType * has binding name 'PointerTowitsml2__PumpOpType' for type 'witsml2:PumpOpType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PumpOpType (-1756)

#endif

/* witsml2__AnchorState * has binding name 'PointerTowitsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AnchorState (-1754)

#endif

/* witsml2__AbstractItemWtOrVolPerUnit * has binding name 'PointerTowitsml2__AbstractItemWtOrVolPerUnit' for type 'witsml2:AbstractItemWtOrVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractItemWtOrVolPerUnit (-1753)

#endif

/* witsml2__MudLosses * has binding name 'PointerTowitsml2__MudLosses' for type 'witsml2:MudLosses' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudLosses (-1752)

#endif

/* std::string * has binding name 'PointerToeml21__UomEnum' for type 'eml21:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UomEnum
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UomEnum (-1751)

#endif

/* __witsml2__AbstractItemWtOrVolPerUnit_sequence * has binding name 'PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence' for type '-witsml2:AbstractItemWtOrVolPerUnit-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence (-1750)

#endif

/* short * has binding name 'PointerTowitsml2__BeaufortScaleIntegerCode' for type 'witsml2:BeaufortScaleIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BeaufortScaleIntegerCode (-1748)

#endif

/* witsml2__Incident * has binding name 'PointerTowitsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Incident
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Incident (-1746)

#endif

/* enum witsml2__PerforationToolType * has binding name 'PointerTowitsml2__PerforationToolType' for type 'witsml2:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationToolType (-1745)

#endif

/* witsml2__PerforationSet * has binding name 'PointerTowitsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerforationSet (-1743)

#endif

/* witsml2__PerfHole * has binding name 'PointerTowitsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfHole (-1741)

#endif

/* witsml2__PerfSlot * has binding name 'PointerTowitsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfSlot (-1739)

#endif

/* witsml2__ExtPropNameValue * has binding name 'PointerTowitsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ExtPropNameValue (-1737)

#endif

/* enum witsml2__Coating * has binding name 'PointerTowitsml2__Coating' for type 'witsml2:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Coating
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Coating (-1736)

#endif

/* enum witsml2__GradeType * has binding name 'PointerTowitsml2__GradeType' for type 'witsml2:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GradeType (-1735)

#endif

/* witsml2__Equipment * has binding name 'PointerTowitsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Equipment (-1733)

#endif

/* enum witsml2__GeologyType * has binding name 'PointerTowitsml2__GeologyType' for type 'witsml2:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeologyType (-1731)

#endif

/* enum witsml2__BoreholeType * has binding name 'PointerTowitsml2__BoreholeType' for type 'witsml2:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeType (-1730)

#endif

/* witsml2__GeologyFeature * has binding name 'PointerTowitsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GeologyFeature (-1728)

#endif

/* witsml2__Borehole * has binding name 'PointerTowitsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Borehole (-1726)

#endif

/* witsml2__BoreholeString * has binding name 'PointerTowitsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeString (-1724)

#endif

/* witsml2__EventRefInfo * has binding name 'PointerTowitsml2__EventRefInfo' for type 'witsml2:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventRefInfo (-1723)

#endif

/* witsml2__EquipmentConnection * has binding name 'PointerTowitsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentConnection (-1721)

#endif

/* witsml2__ReferenceContainer * has binding name 'PointerTowitsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ReferenceContainer (-1719)

#endif

/* witsml2__Assembly * has binding name 'PointerTowitsml2__Assembly' for type 'witsml2:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Assembly (-1718)

#endif

/* witsml2__EventInfo * has binding name 'PointerTowitsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EventInfo (-1716)

#endif

/* std::string * has binding name 'PointerTowitsml2__EquipmentTypeExt' for type 'witsml2:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EquipmentTypeExt (-1715)

#endif

/* witsml2__StringEquipment * has binding name 'PointerTowitsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringEquipment (-1713)

#endif

/* witsml2__DownholeString * has binding name 'PointerTowitsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeString (-1712)

#endif

/* witsml2__StringEquipmentSet * has binding name 'PointerTowitsml2__StringEquipmentSet' for type 'witsml2:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringEquipmentSet (-1711)

#endif

/* witsml2__StringAccessory * has binding name 'PointerTowitsml2__StringAccessory' for type 'witsml2:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StringAccessory (-1710)

#endif

/* enum witsml2__SubStringType * has binding name 'PointerTowitsml2__SubStringType' for type 'witsml2:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SubStringType (-1709)

#endif

/* witsml2__MemberObject * has binding name 'PointerTowitsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MemberObject (-1707)

#endif

/* witsml2__ObjectSequence * has binding name 'PointerTowitsml2__ObjectSequence' for type 'witsml2:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ObjectSequence (-1706)

#endif

/* enum witsml2__LogIndexType * has binding name 'PointerTowitsml2__LogIndexType' for type 'witsml2:LogIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogIndexType (-1705)

#endif

/* eml21__ReciprocalLengthMeasure * has binding name 'PointerToeml21__ReciprocalLengthMeasure' for type 'eml21:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReciprocalLengthMeasure (-1704)

#endif

/* enum witsml2__PerfConveyanceMethod * has binding name 'PointerTowitsml2__PerfConveyanceMethod' for type 'witsml2:PerfConveyanceMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PerfConveyanceMethod (-1703)

#endif

/* witsml2__DownholeStringReference * has binding name 'PointerTowitsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DownholeStringReference (-1701)

#endif

/* witsml2__BoreholeStringReference * has binding name 'PointerTowitsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoreholeStringReference (-1699)

#endif

/* witsml2__DepthRegPoint * has binding name 'PointerTowitsml2__DepthRegPoint' for type 'witsml2:DepthRegPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegPoint (-1698)

#endif

/* witsml2__DepthRegTrack * has binding name 'PointerTowitsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegTrack (-1696)

#endif

/* witsml2__DepthRegParameter * has binding name 'PointerTowitsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegParameter (-1694)

#endif

/* witsml2__DepthRegCalibrationPoint * has binding name 'PointerTowitsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegCalibrationPoint (-1692)

#endif

/* enum witsml2__LogSectionType * has binding name 'PointerTowitsml2__LogSectionType' for type 'witsml2:LogSectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogSectionType (-1691)

#endif

/* enum witsml2__LogRectangleType * has binding name 'PointerTowitsml2__LogRectangleType' for type 'witsml2:LogRectangleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__LogRectangleType (-1690)

#endif

/* witsml2__DepthRegTrackCurve * has binding name 'PointerTowitsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegTrackCurve (-1688)

#endif

/* witsml2__DepthRegRectangle * has binding name 'PointerTowitsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DepthRegRectangle (-1686)

#endif

/* enum witsml2__HoleCasingType * has binding name 'PointerTowitsml2__HoleCasingType' for type 'witsml2:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleCasingType (-1684)

#endif

/* witsml2__CementAdditive * has binding name 'PointerTowitsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementAdditive (-1682)

#endif

/* eml21__DimensionlessMeasure * has binding name 'PointerToeml21__DimensionlessMeasure' for type 'eml21:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DimensionlessMeasure (-1681)

#endif

/* eml21__VolumePerMassMeasure * has binding name 'PointerToeml21__VolumePerMassMeasure' for type 'eml21:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerMassMeasure (-1680)

#endif

/* witsml2__CementPumpScheduleStep * has binding name 'PointerTowitsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__CementPumpScheduleStep (-1678)

#endif

/* witsml2__FluidLocation * has binding name 'PointerTowitsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__FluidLocation (-1676)

#endif

/* std::string * has binding name 'PointerToeml21__UuidString' for type 'eml21:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UuidString
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UuidString (-1675)

#endif

/* witsml2__AbstractRotarySteerableTool * has binding name 'PointerTowitsml2__AbstractRotarySteerableTool' for type 'witsml2:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractRotarySteerableTool (-1674)

#endif

/* enum witsml2__HoleOpenerType * has binding name 'PointerTowitsml2__HoleOpenerType' for type 'witsml2:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleOpenerType (-1673)

#endif

/* enum witsml2__BladeType * has binding name 'PointerTowitsml2__BladeType' for type 'witsml2:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BladeType (-1672)

#endif

/* enum witsml2__BladeShapeType * has binding name 'PointerTowitsml2__BladeShapeType' for type 'witsml2:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BladeShapeType (-1671)

#endif

/* enum witsml2__BearingType * has binding name 'PointerTowitsml2__BearingType' for type 'witsml2:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BearingType (-1670)

#endif

/* enum witsml2__MeasurementType * has binding name 'PointerTowitsml2__MeasurementType' for type 'witsml2:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasurementType (-1669)

#endif

/* witsml2__Sensor * has binding name 'PointerTowitsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Sensor (-1667)

#endif

/* enum witsml2__JarAction * has binding name 'PointerTowitsml2__JarAction' for type 'witsml2:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__JarAction (-1666)

#endif

/* enum witsml2__JarType * has binding name 'PointerTowitsml2__JarType' for type 'witsml2:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__JarType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__JarType (-1665)

#endif

/* enum witsml2__ConnectionPosition * has binding name 'PointerTowitsml2__ConnectionPosition' for type 'witsml2:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ConnectionPosition (-1664)

#endif

/* enum witsml2__NozzleType * has binding name 'PointerTowitsml2__NozzleType' for type 'witsml2:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NozzleType (-1663)

#endif

/* enum witsml2__BitReasonPulled * has binding name 'PointerTowitsml2__BitReasonPulled' for type 'witsml2:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitReasonPulled (-1662)

#endif

/* enum witsml2__IadcBearingWearCode * has binding name 'PointerTowitsml2__IadcBearingWearCode' for type 'witsml2:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IadcBearingWearCode (-1661)

#endif

/* enum witsml2__BitDullCode * has binding name 'PointerTowitsml2__BitDullCode' for type 'witsml2:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitDullCode (-1660)

#endif

/* enum witsml2__IadcIntegerCode * has binding name 'PointerTowitsml2__IadcIntegerCode' for type 'witsml2:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__IadcIntegerCode (-1659)

#endif

/* enum witsml2__BitType * has binding name 'PointerTowitsml2__BitType' for type 'witsml2:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitType (-1658)

#endif

/* witsml2__Nozzle * has binding name 'PointerTowitsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Nozzle (-1656)

#endif

/* witsml2__RotarySteerableTool * has binding name 'PointerTowitsml2__RotarySteerableTool' for type 'witsml2:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RotarySteerableTool (-1655)

#endif

/* witsml2__HoleOpener * has binding name 'PointerTowitsml2__HoleOpener' for type 'witsml2:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__HoleOpener (-1654)

#endif

/* witsml2__Bend * has binding name 'PointerTowitsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Bend
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Bend (-1652)

#endif

/* witsml2__Stabilizer * has binding name 'PointerTowitsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Stabilizer (-1650)

#endif

/* witsml2__Motor * has binding name 'PointerTowitsml2__Motor' for type 'witsml2:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Motor
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Motor (-1649)

#endif

/* witsml2__BitRecord * has binding name 'PointerTowitsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BitRecord (-1648)

#endif

/* witsml2__MwdTool * has binding name 'PointerTowitsml2__MwdTool' for type 'witsml2:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MwdTool (-1647)

#endif

/* witsml2__Jar * has binding name 'PointerTowitsml2__Jar' for type 'witsml2:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Jar
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Jar (-1646)

#endif

/* witsml2__Connection * has binding name 'PointerTowitsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Connection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Connection (-1644)

#endif

/* eml21__AreaMeasure * has binding name 'PointerToeml21__AreaMeasure' for type 'eml21:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaMeasure (-1643)

#endif

/* witsml2__NameTag * has binding name 'PointerTowitsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTag (-1641)

#endif

/* enum witsml2__MaterialType * has binding name 'PointerTowitsml2__MaterialType' for type 'witsml2:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MaterialType (-1640)

#endif

/* eml21__ForcePerLengthMeasure * has binding name 'PointerToeml21__ForcePerLengthMeasure' for type 'eml21:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerLengthMeasure (-1639)

#endif

/* enum witsml2__BoxPinConfig * has binding name 'PointerTowitsml2__BoxPinConfig' for type 'witsml2:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__BoxPinConfig (-1638)

#endif

/* eml21__LengthPerLengthMeasure * has binding name 'PointerToeml21__LengthPerLengthMeasure' for type 'eml21:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerLengthMeasure (-1637)

#endif

/* eml21__MassPerLengthMeasure * has binding name 'PointerToeml21__MassPerLengthMeasure' for type 'eml21:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerLengthMeasure (-1636)

#endif

/* __witsml2__AbstractBottomHoleTemperature_sequence * has binding name 'PointerTo__witsml2__AbstractBottomHoleTemperature_sequence' for type '-witsml2:AbstractBottomHoleTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml2__AbstractBottomHoleTemperature_sequence (-1635)

#endif

/* enum witsml2__GasPeakType * has binding name 'PointerTowitsml2__GasPeakType' for type 'witsml2:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__GasPeakType (-1633)

#endif

/* enum witsml2__WellKillingProcedureType * has binding name 'PointerTowitsml2__WellKillingProcedureType' for type 'witsml2:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellKillingProcedureType (-1632)

#endif

/* enum witsml2__WellControlIncidentType * has binding name 'PointerTowitsml2__WellControlIncidentType' for type 'witsml2:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellControlIncidentType (-1631)

#endif

/* enum witsml2__WellTestType * has binding name 'PointerTowitsml2__WellTestType' for type 'witsml2:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellTestType (-1630)

#endif

/* enum witsml2__InnerBarrelType * has binding name 'PointerTowitsml2__InnerBarrelType' for type 'witsml2:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__InnerBarrelType (-1629)

#endif

/* witsml2__AbstractBottomHoleTemperature * has binding name 'PointerTowitsml2__AbstractBottomHoleTemperature' for type 'witsml2:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractBottomHoleTemperature (-1628)

#endif

/* enum witsml2__ItemState * has binding name 'PointerTowitsml2__ItemState' for type 'witsml2:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__ItemState (-1627)

#endif

/* enum witsml2__StateDetailActivity * has binding name 'PointerTowitsml2__StateDetailActivity' for type 'witsml2:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__StateDetailActivity (-1626)

#endif

/* eml21__TvdInterval * has binding name 'PointerToeml21__TvdInterval' for type 'eml21:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TvdInterval (-1625)

#endif

/* eml21__MdInterval * has binding name 'PointerToeml21__MdInterval' for type 'eml21:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MdInterval (-1624)

#endif

/* enum witsml2__DrillActivityClassType * has binding name 'PointerTowitsml2__DrillActivityClassType' for type 'witsml2:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivityClassType (-1623)

#endif

/* enum witsml2__DrillActivityCode * has binding name 'PointerTowitsml2__DrillActivityCode' for type 'witsml2:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DrillActivityCode (-1622)

#endif

/* eml21__AnglePerLengthMeasure * has binding name 'PointerToeml21__AnglePerLengthMeasure' for type 'eml21:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AnglePerLengthMeasure (-1621)

#endif

/* witsml2__RheometerViscosity * has binding name 'PointerTowitsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RheometerViscosity (-1619)

#endif

/* witsml2__Cost * has binding name 'PointerTowitsml2__Cost' for type 'witsml2:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Cost
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Cost (-1618)

#endif

/* enum witsml2__PresTestType * has binding name 'PointerTowitsml2__PresTestType' for type 'witsml2:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PresTestType (-1617)

#endif

/* enum witsml2__WellboreType * has binding name 'PointerTowitsml2__WellboreType' for type 'witsml2:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellboreType (-1616)

#endif

/* std::string * has binding name 'PointerToxsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__date
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__date (-1615)

#endif

/* witsml2__Rheometer * has binding name 'PointerTowitsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__Rheometer (-1613)

#endif

/* eml21__MassMeasure * has binding name 'PointerToeml21__MassMeasure' for type 'eml21:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassMeasure (-1612)

#endif

/* eml21__MassPerMassMeasure * has binding name 'PointerToeml21__MassPerMassMeasure' for type 'eml21:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerMassMeasure (-1611)

#endif

/* eml21__ElectricPotentialDifferenceMeasure * has binding name 'PointerToeml21__ElectricPotentialDifferenceMeasure' for type 'eml21:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricPotentialDifferenceMeasure (-1610)

#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTodouble
#define SOAP_TYPE_gsoap_eml2_1_PointerTodouble (-1609)

#endif

/* eml21__GenericMeasure * has binding name 'PointerToeml21__GenericMeasure' for type 'eml21:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GenericMeasure (-1608)

#endif

/* eml21__VolumePerVolumeMeasure * has binding name 'PointerToeml21__VolumePerVolumeMeasure' for type 'eml21:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasure (-1607)

#endif

/* eml21__DynamicViscosityMeasure * has binding name 'PointerToeml21__DynamicViscosityMeasure' for type 'eml21:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DynamicViscosityMeasure (-1606)

#endif

/* eml21__VolumeMeasure * has binding name 'PointerToeml21__VolumeMeasure' for type 'eml21:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasure (-1605)

#endif

/* witsml2__WellVerticalDepthCoord * has binding name 'PointerTowitsml2__WellVerticalDepthCoord' for type 'witsml2:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellVerticalDepthCoord (-1604)

#endif

/* enum witsml2__MudSubClass * has binding name 'PointerTowitsml2__MudSubClass' for type 'witsml2:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudSubClass (-1603)

#endif

/* enum witsml2__MudClass * has binding name 'PointerTowitsml2__MudClass' for type 'witsml2:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MudClass (-1602)

#endif

/* eml21__ThermodynamicTemperatureMeasure * has binding name 'PointerToeml21__ThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermodynamicTemperatureMeasure (-1601)

#endif

/* eml21__PlaneAngleMeasure * has binding name 'PointerToeml21__PlaneAngleMeasure' for type 'eml21:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PlaneAngleMeasure (-1600)

#endif

/* eml21__AngularVelocityMeasure * has binding name 'PointerToeml21__AngularVelocityMeasure' for type 'eml21:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AngularVelocityMeasure (-1599)

#endif

/* eml21__PressureMeasure * has binding name 'PointerToeml21__PressureMeasure' for type 'eml21:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasure (-1598)

#endif

/* eml21__PowerMeasure * has binding name 'PointerToeml21__PowerMeasure' for type 'eml21:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerMeasure (-1597)

#endif

/* eml21__LengthPerTimeMeasure * has binding name 'PointerToeml21__LengthPerTimeMeasure' for type 'eml21:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerTimeMeasure (-1596)

#endif

/* eml21__VolumePerTimeMeasure * has binding name 'PointerToeml21__VolumePerTimeMeasure' for type 'eml21:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasure (-1595)

#endif

/* eml21__MassPerVolumeMeasure * has binding name 'PointerToeml21__MassPerVolumeMeasure' for type 'eml21:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasure (-1594)

#endif

/* eml21__MomentOfForceMeasure * has binding name 'PointerToeml21__MomentOfForceMeasure' for type 'eml21:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MomentOfForceMeasure (-1593)

#endif

/* eml21__ForceMeasure * has binding name 'PointerToeml21__ForceMeasure' for type 'eml21:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasure (-1592)

#endif

/* eml21__TimeMeasure * has binding name 'PointerToeml21__TimeMeasure' for type 'eml21:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeMeasure (-1591)

#endif

/* witsml2__DistanceEastWest * has binding name 'PointerTowitsml2__DistanceEastWest' for type 'witsml2:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DistanceEastWest (-1590)

#endif

/* witsml2__DistanceNorthSouth * has binding name 'PointerTowitsml2__DistanceNorthSouth' for type 'witsml2:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__DistanceNorthSouth (-1589)

#endif

/* std::string * has binding name 'PointerTowitsml2__PublicLandSurveySystemQuarterTownship' for type 'witsml2:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystemQuarterTownship (-1588)

#endif

/* std::string * has binding name 'PointerTowitsml2__PublicLandSurveySystemQuarterSection' for type 'witsml2:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PublicLandSurveySystemQuarterSection (-1587)

#endif

/* std::string * has binding name 'PointerTowitsml2__SectionNumber' for type 'witsml2:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__SectionNumber (-1586)

#endif

/* enum witsml2__NorthOrSouth * has binding name 'PointerTowitsml2__NorthOrSouth' for type 'witsml2:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NorthOrSouth (-1585)

#endif

/* enum witsml2__EastOrWest * has binding name 'PointerTowitsml2__EastOrWest' for type 'witsml2:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__EastOrWest (-1584)

#endif

/* enum witsml2__PrincipalMeridian * has binding name 'PointerTowitsml2__PrincipalMeridian' for type 'witsml2:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__PrincipalMeridian (-1583)

#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTobool
#define SOAP_TYPE_gsoap_eml2_1_PointerTobool (-1582)

#endif

/* eml21__AbstractVerticalCrs * has binding name 'PointerToeml21__AbstractVerticalCrs' for type 'eml21:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractVerticalCrs (-1581)

#endif

/* witsml2__RefWellboreRig * has binding name 'PointerTowitsml2__RefWellboreRig' for type 'witsml2:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellboreRig (-1580)

#endif

/* witsml2__RefWellbore * has binding name 'PointerTowitsml2__RefWellbore' for type 'witsml2:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__RefWellbore (-1579)

#endif

/* enum eml21__WellboreDatumReference * has binding name 'PointerToeml21__WellboreDatumReference' for type 'eml21:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellboreDatumReference (-1577)

#endif

/* witsml2__AbstractWellLocation * has binding name 'PointerTowitsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__AbstractWellLocation (-1575)

#endif

/* witsml2__WellElevationCoord * has binding name 'PointerTowitsml2__WellElevationCoord' for type 'witsml2:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__WellElevationCoord (-1574)

#endif

/* witsml2__MeasuredDepthCoord * has binding name 'PointerTowitsml2__MeasuredDepthCoord' for type 'witsml2:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__MeasuredDepthCoord (-1573)

#endif

/* enum witsml2__NameTagLocation * has binding name 'PointerTowitsml2__NameTagLocation' for type 'witsml2:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTagLocation (-1572)

#endif

/* enum witsml2__NameTagTechnology * has binding name 'PointerTowitsml2__NameTagTechnology' for type 'witsml2:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml2__NameTagTechnology (-1571)

#endif

/* __gsr__SC_USCORECRS_USCOREPropertyType_sequence * has binding name 'PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence' for type '-gsr:SC_CRS_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1570)

#endif

/* __gco__DateTime_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__DateTime_USCOREPropertyType_sequence' for type '-gco:DateTime_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__DateTime_USCOREPropertyType_sequence (-1567)

#endif

/* std::string * has binding name 'PointerTogco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__Date_USCOREType (-1565)

#endif

/* __gco__Real_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Real_USCOREPropertyType_sequence' for type '-gco:Real_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__Real_USCOREPropertyType_sequence (-1563)

#endif

/* __gco__Boolean_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Boolean_USCOREPropertyType_sequence' for type '-gco:Boolean_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__Boolean_USCOREPropertyType_sequence (-1561)

#endif

/* __gco__CharacterString_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__CharacterString_USCOREPropertyType_sequence' for type '-gco:CharacterString_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gco__CharacterString_USCOREPropertyType_sequence (-1559)

#endif

/* std::string * has binding name 'PointerToxsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__ID
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__ID (-1556)

#endif

/* __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * has binding name 'PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence' for type '-gts:TM_Primitive_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1555)

#endif

/* __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence' for type '-gmd:DQ_Result_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1552)

#endif

/* __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence' for type '-gmd:DQ_EvaluationMethodTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1549)

#endif

/* __gmd__CI_USCORESeries_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence' for type '-gmd:CI_Series_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1547)

#endif

/* gmd__CI_USCORESeries_USCOREType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORESeries_USCOREType (-1546)

#endif

/* __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence' for type '-gmd:CI_PresentationFormCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1544)

#endif

/* __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence' for type '-gmd:CI_RoleCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1542)

#endif

/* __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence' for type '-gmd:CI_OnLineFunctionCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1540)

#endif

/* __gmd__URL_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__URL_USCOREPropertyType_sequence' for type '-gmd:URL_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__URL_USCOREPropertyType_sequence (-1538)

#endif

/* __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence' for type '-gmd:CI_OnlineResource_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1536)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREOnlineResource_USCOREType (-1535)

#endif

/* __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence' for type '-gmd:CI_Address_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1533)

#endif

/* gmd__CI_USCOREAddress_USCOREType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREAddress_USCOREType (-1532)

#endif

/* __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence' for type '-gmd:CI_Telephone_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1530)

#endif

/* gmd__CI_USCORETelephone_USCOREType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORETelephone_USCOREType (-1529)

#endif

/* __gmd__CI_USCOREContact_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence' for type '-gmd:CI_Contact_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1527)

#endif

/* gmd__CI_USCOREContact_USCOREType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREContact_USCOREType (-1526)

#endif

/* __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence' for type '-gmd:CI_ResponsibleParty_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1524)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREResponsibleParty_USCOREType (-1523)

#endif

/* __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence' for type '-gmd:CI_DateTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1521)

#endif

/* gco__CodeListValue_USCOREType * has binding name 'PointerTogco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogco__CodeListValue_USCOREType (-1520)

#endif

/* __gmd__CI_USCOREDate_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence' for type '-gmd:CI_Date_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1518)

#endif

/* gmd__CI_USCOREDate_USCOREType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCOREDate_USCOREType (-1517)

#endif

/* __gmd__CI_USCORECitation_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence' for type '-gmd:CI_Citation_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1515)

#endif

/* gmd__CI_USCORECitation_USCOREType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__CI_USCORECitation_USCOREType (-1514)

#endif

/* __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence' for type '-gmd:MD_Identifier_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1512)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__MD_USCOREIdentifier_USCOREType (-1511)

#endif

/* __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_VerticalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1509)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREVerticalExtent_USCOREType (-1508)

#endif

/* __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_TemporalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1506)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCORETemporalExtent_USCOREType (-1505)

#endif

/* __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence' for type '-gmd:EX_GeographicExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1503)

#endif

/* __gml__coordinateOperationAccuracy_sequence * has binding name 'PointerTo__gml__coordinateOperationAccuracy_sequence' for type '-gml:coordinateOperationAccuracy-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__coordinateOperationAccuracy_sequence (-1500)

#endif

/* gml__LengthType * has binding name 'PointerTogml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__LengthType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__LengthType (-1497)

#endif

/* gml__MeasureType * has binding name 'PointerTogml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__MeasureType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__MeasureType (-1496)

#endif

/* _gml__SecondDefiningParameter * has binding name 'PointerTo_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_gml__SecondDefiningParameter (-1494)

#endif

/* __gml__domainOfValidity_sequence * has binding name 'PointerTo__gml__domainOfValidity_sequence' for type '-gml:domainOfValidity-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__domainOfValidity_sequence (-1493)

#endif

/* gmd__EX_USCOREExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogmd__EX_USCOREExtent_USCOREType (-1492)

#endif

/* __gml__VerticalDatumPropertyType_sequence * has binding name 'PointerTo__gml__VerticalDatumPropertyType_sequence' for type '-gml:VerticalDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__VerticalDatumPropertyType_sequence (-1490)

#endif

/* gml__VerticalDatumType * has binding name 'PointerTogml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalDatumType (-1489)

#endif

/* __gml__VerticalCSPropertyType_sequence * has binding name 'PointerTo__gml__VerticalCSPropertyType_sequence' for type '-gml:VerticalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__VerticalCSPropertyType_sequence (-1487)

#endif

/* gml__VerticalCSType * has binding name 'PointerTogml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__VerticalCSType (-1486)

#endif

/* __gml__GeodeticCRSPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticCRSPropertyType_sequence' for type '-gml:GeodeticCRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeodeticCRSPropertyType_sequence (-1484)

#endif

/* gml__GeodeticCRSType * has binding name 'PointerTogml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticCRSType (-1483)

#endif

/* __gml__CRSPropertyType_sequence * has binding name 'PointerTo__gml__CRSPropertyType_sequence' for type '-gml:CRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CRSPropertyType_sequence (-1481)

#endif

/* __gml__GeneralConversionPropertyType_sequence * has binding name 'PointerTo__gml__GeneralConversionPropertyType_sequence' for type '-gml:GeneralConversionPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeneralConversionPropertyType_sequence (-1478)

#endif

/* __gml__EllipsoidPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidPropertyType_sequence' for type '-gml:EllipsoidPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__EllipsoidPropertyType_sequence (-1475)

#endif

/* gml__EllipsoidType * has binding name 'PointerTogml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidType (-1474)

#endif

/* __gml__PrimeMeridianPropertyType_sequence * has binding name 'PointerTo__gml__PrimeMeridianPropertyType_sequence' for type '-gml:PrimeMeridianPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__PrimeMeridianPropertyType_sequence (-1472)

#endif

/* gml__PrimeMeridianType * has binding name 'PointerTogml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__PrimeMeridianType (-1471)

#endif

/* __gml__GeodeticDatumPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticDatumPropertyType_sequence' for type '-gml:GeodeticDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__GeodeticDatumPropertyType_sequence (-1469)

#endif

/* gml__GeodeticDatumType * has binding name 'PointerTogml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__GeodeticDatumType (-1468)

#endif

/* __gml__SphericalCSPropertyType_sequence * has binding name 'PointerTo__gml__SphericalCSPropertyType_sequence' for type '-gml:SphericalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__SphericalCSPropertyType_sequence (-1466)

#endif

/* gml__SphericalCSType * has binding name 'PointerTogml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__SphericalCSType (-1465)

#endif

/* __gml__CartesianCSPropertyType_sequence * has binding name 'PointerTo__gml__CartesianCSPropertyType_sequence' for type '-gml:CartesianCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CartesianCSPropertyType_sequence (-1463)

#endif

/* gml__CartesianCSType * has binding name 'PointerTogml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CartesianCSType (-1462)

#endif

/* __gml__CoordinateSystemAxisPropertyType_sequence * has binding name 'PointerTo__gml__CoordinateSystemAxisPropertyType_sequence' for type '-gml:CoordinateSystemAxisPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence (-1460)

#endif

/* gml__CoordinateSystemAxisType * has binding name 'PointerTogml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CoordinateSystemAxisType (-1459)

#endif

/* __gml__EllipsoidalCSPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidalCSPropertyType_sequence' for type '-gml:EllipsoidalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__EllipsoidalCSPropertyType_sequence (-1457)

#endif

/* gml__EllipsoidalCSType * has binding name 'PointerTogml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__EllipsoidalCSType (-1456)

#endif

/* __gml__TimePrimitivePropertyType_sequence * has binding name 'PointerTo__gml__TimePrimitivePropertyType_sequence' for type '-gml:TimePrimitivePropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__gml__TimePrimitivePropertyType_sequence (-1454)

#endif

/* enum _xlink__actuate * has binding name 'PointerTo_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_xlink__actuate
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_xlink__actuate (-1451)

#endif

/* enum _xlink__show * has binding name 'PointerTo_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo_xlink__show
#define SOAP_TYPE_gsoap_eml2_1_PointerTo_xlink__show (-1450)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTostd__string
#define SOAP_TYPE_gsoap_eml2_1_PointerTostd__string (-1449)

#endif

/* std::string * has binding name 'PointerTogml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__NilReasonType (-1448)

#endif

/* gml__CodeType * has binding name 'PointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CodeType (-1446)

#endif

/* gml__CodeWithAuthorityType * has binding name 'PointerTogml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__CodeWithAuthorityType (-1445)

#endif

/* gml__ReferenceType * has binding name 'PointerTogml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__ReferenceType (-1444)

#endif

/* gml__StringOrRefType * has binding name 'PointerTogml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTogml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_1_PointerTogml__StringOrRefType (-1443)

#endif

/* eml21__VolumeMeasureExt * has binding name 'PointerToeml21__VolumeMeasureExt' for type 'eml21:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasureExt (-1442)

#endif

/* eml21__AbstractPressureValue * has binding name 'PointerToeml21__AbstractPressureValue' for type 'eml21:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractPressureValue (-1441)

#endif

/* eml21__VolumePerTimeMeasureExt * has binding name 'PointerToeml21__VolumePerTimeMeasureExt' for type 'eml21:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasureExt (-1440)

#endif

/* eml21__AbstractTemperaturePressure * has binding name 'PointerToeml21__AbstractTemperaturePressure' for type 'eml21:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractTemperaturePressure (-1439)

#endif

/* eml21__MassPerVolumeMeasureExt * has binding name 'PointerToeml21__MassPerVolumeMeasureExt' for type 'eml21:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasureExt (-1438)

#endif

/* eml21__TimeIndex * has binding name 'PointerToeml21__TimeIndex' for type 'eml21:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeIndex (-1436)

#endif

/* ULONG64 * has binding name 'PointerToULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToULONG64
#define SOAP_TYPE_gsoap_eml2_1_PointerToULONG64 (-1435)

#endif

/* eml21__AbstractActivityParameter * has binding name 'PointerToeml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractActivityParameter (-1433)

#endif

/* eml21__AbstractParameterKey * has binding name 'PointerToeml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractParameterKey (-1428)

#endif

/* LONG64 * has binding name 'PointerToLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToLONG64
#define SOAP_TYPE_gsoap_eml2_1_PointerToLONG64 (-1427)

#endif

/* eml21__DataObjectReference * has binding name 'PointerToeml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DataObjectReference (-1425)

#endif

/* eml21__ExternalDatasetPart * has binding name 'PointerToeml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDatasetPart (-1423)

#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__anyURI (-1422)

#endif

/* eml21__LengthMeasure * has binding name 'PointerToeml21__LengthMeasure' for type 'eml21:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasure (-1421)

#endif

/* eml21__AbstractIntegerArray * has binding name 'PointerToeml21__AbstractIntegerArray' for type 'eml21:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractIntegerArray (-1420)

#endif

/* eml21__AbstractValueArray * has binding name 'PointerToeml21__AbstractValueArray' for type 'eml21:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractValueArray (-1419)

#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToint
#define SOAP_TYPE_gsoap_eml2_1_PointerToint (-1418)

#endif

/* std::string * has binding name 'PointerToeml21__TimeStamp' for type 'eml21:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeStamp (-1417)

#endif

/* enum eml21__MeasureClass * has binding name 'PointerToeml21__MeasureClass' for type 'eml21:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MeasureClass (-1416)

#endif

/* eml21__StringMeasure * has binding name 'PointerToeml21__StringMeasure' for type 'eml21:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__StringMeasure (-1415)

#endif

/* std::string * has binding name 'PointerToeml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String2000 (-1413)

#endif

/* struct tm * has binding name 'PointerToxsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__dateTime
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__dateTime (-1412)

#endif

/* enum eml21__ExistenceKind * has binding name 'PointerToeml21__ExistenceKind' for type 'eml21:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExistenceKind (-1410)

#endif

/* std::string * has binding name 'PointerToeml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String64
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String64 (-1409)

#endif

/* eml21__ExtensionNameValue * has binding name 'PointerToeml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExtensionNameValue (-1407)

#endif

/* eml21__CustomData * has binding name 'PointerToeml21__CustomData' for type 'eml21:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__CustomData (-1406)

#endif

/* eml21__Citation * has binding name 'PointerToeml21__Citation' for type 'eml21:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__Citation (-1405)

#endif

/* eml21__ObjectAlias * has binding name 'PointerToeml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ObjectAlias (-1403)

#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTounsignedByte
#define SOAP_TYPE_gsoap_eml2_1_PointerTounsignedByte (-11)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_gsoap_eml2_1__QName
#define SOAP_TYPE_gsoap_eml2_1__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__XML
#define SOAP_TYPE_gsoap_eml2_1__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_string
#define SOAP_TYPE_gsoap_eml2_1_string (-4)

#endif

/* std::vector<_gml__coordinateOperationAccuracy *>  has binding name 'std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy (-2196)

#endif

/* std::vector<gml__CoordinateSystemAxisPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType (-2191)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfstd__string
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfstd__string (-2189)

#endif

/* std::vector<_gml__domainOfValidity *>  has binding name 'std__vectorTemplateOfPointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTo_gml__domainOfValidity (-2188)

#endif

/* std::vector<eml21__IntegerConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__IntegerConstantArray (-2185)

#endif

/* std::vector<eml21__FloatingPointConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray (-2182)

#endif

/* std::vector<gml__RelatedTimeType *>  has binding name 'std__vectorTemplateOfPointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__RelatedTimeType (-2180)

#endif

/* std::vector<witsml2__CompletionStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory (-2175)

#endif

/* std::vector<witsml2__WellboreMarker *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellboreMarker (-2173)

#endif

/* std::vector<witsml2__MudLogParameter *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudLogParameter (-2170)

#endif

/* std::vector<witsml2__MudlogReportInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval (-2168)

#endif

/* std::vector<witsml2__LithostratigraphicUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit (-2163)

#endif

/* std::vector<witsml2__GeochronologicalUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit (-2161)

#endif

/* std::vector<witsml2__CuttingsGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval (-2159)

#endif

/* std::vector<witsml2__CuttingsIntervalLithology *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology (-2157)

#endif

/* std::vector<witsml2__InterpretedGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval (-2154)

#endif

/* std::vector<witsml2__ShowEvaluationInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval (-2152)

#endif

/* std::vector<witsml2__IscwsaErrorTerm *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTerm' for type 'witsml2:IscwsaErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTerm
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTerm (-2147)

#endif

/* std::vector<witsml2__SurveySection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SurveySection (-2144)

#endif

/* std::vector<witsml2__StimReservoirInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval (-2141)

#endif

/* std::vector<witsml2__StimJobStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobStep (-2138)

#endif

/* std::vector<witsml2__StimEvent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimEvent (-2136)

#endif

/* std::vector<witsml2__StimShutInPressure *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimShutInPressure (-2134)

#endif

/* std::vector<witsml2__StimJobDiagnosticSession *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession (-2132)

#endif

/* std::vector<witsml2__StimJobLogCatalog *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog (-2130)

#endif

/* std::vector<witsml2__StimJobStage *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimJobStage (-2127)

#endif

/* std::vector<witsml2__StimISO13503_USCORE5Point *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point (-2122)

#endif

/* std::vector<witsml2__StimISO13503_USCORE2Properties *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties (-2120)

#endif

/* std::vector<enum witsml2__RiskAffectedPersonnel>  has binding name 'std__vectorTemplateOfwitsml2__RiskAffectedPersonnel' for type 'witsml2:RiskAffectedPersonnel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__RiskAffectedPersonnel (-2115)

#endif

/* std::vector<witsml2__Degasser *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Degasser (-2109)

#endif

/* std::vector<witsml2__Hydrocyclone *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Hydrocyclone (-2107)

#endif

/* std::vector<witsml2__Centrifuge *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Centrifuge (-2105)

#endif

/* std::vector<witsml2__MudPump *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudPump (-2103)

#endif

/* std::vector<witsml2__Pit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Pit
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Pit (-2101)

#endif

/* std::vector<witsml2__Shaker *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Shaker (-2098)

#endif

/* std::vector<witsml2__IscwsaErrorTermValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTermValue' for type 'witsml2:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorTermValue (-2094)

#endif

/* std::vector<witsml2__IscwsaSurveyToolOperatingInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingInterval' for type 'witsml2:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingInterval (-2091)

#endif

/* std::vector<witsml2__IscwsaSurveyToolOperatingCondition *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingCondition' for type 'witsml2:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaSurveyToolOperatingCondition (-2089)

#endif

/* std::vector<witsml2__PumpOp *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PumpOp (-2085)

#endif

/* std::vector<witsml2__PitVolume *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PitVolume (-2083)

#endif

/* std::vector<witsml2__Scr *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Scr
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Scr (-2081)

#endif

/* std::vector<witsml2__TrajectoryStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__TrajectoryStation (-2079)

#endif

/* std::vector<witsml2__Personnel *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Personnel (-2077)

#endif

/* std::vector<witsml2__Inventory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Inventory (-2074)

#endif

/* std::vector<witsml2__Weather *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Weather
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Weather (-2072)

#endif

/* std::vector<witsml2__SupportCraft *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SupportCraft (-2070)

#endif

/* std::vector<witsml2__ShakerOp *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ShakerOp (-2067)

#endif

/* std::vector<witsml2__Perforating *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Perforating (-2058)

#endif

/* std::vector<witsml2__DayCost *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DayCost (-2054)

#endif

/* std::vector<witsml2__AbstractEventExtension *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension (-2052)

#endif

/* std::vector<witsml2__DepthRegLogRect *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect (-2049)

#endif

/* std::vector<witsml2__DepthRegLogSection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection (-2048)

#endif

/* std::vector<witsml2__PointMetadata *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PointMetadata (-2041)

#endif

/* std::vector<witsml2__LogChannelAxis *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LogChannelAxis (-2039)

#endif

/* std::vector<witsml2__ChannelSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ChannelSet (-2037)

#endif

/* std::vector<witsml2__Channel *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Channel
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Channel (-2027)

#endif

/* std::vector<witsml2__ChannelIndex *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ChannelIndex (-2025)

#endif

/* std::vector<witsml2__WellboreGeometrySection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection (-2023)

#endif

/* std::vector<witsml2__CementingFluid *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementingFluid (-2021)

#endif

/* std::vector<witsml2__CementStageDesign *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementStageDesign (-2016)

#endif

/* std::vector<witsml2__CementStageReport *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementStageReport (-2014)

#endif

/* std::vector<witsml2__TubularComponent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__TubularComponent (-2008)

#endif

/* std::vector<witsml2__DrillReportSurveyStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation (-2002)

#endif

/* std::vector<witsml2__DrillReportPorePressure *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure (-1999)

#endif

/* std::vector<witsml2__DrillReportStatusInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo (-1997)

#endif

/* std::vector<witsml2__DrillReportGasReadingInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo (-1994)

#endif

/* std::vector<witsml2__DrillReportPerfInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo (-1992)

#endif

/* std::vector<witsml2__DrillReportStratInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo (-1990)

#endif

/* std::vector<witsml2__DrillReportControlIncidentInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo (-1988)

#endif

/* std::vector<witsml2__DrillReportEquipFailureInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo (-1986)

#endif

/* std::vector<witsml2__DrillReportLithShowInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo (-1984)

#endif

/* std::vector<witsml2__DrillReportFormTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo (-1982)

#endif

/* std::vector<witsml2__DrillReportWellTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo (-1980)

#endif

/* std::vector<witsml2__DrillReportCoreInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo (-1978)

#endif

/* std::vector<witsml2__DrillReportLogInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo (-1976)

#endif

/* std::vector<witsml2__DrillActivity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillActivity (-1974)

#endif

/* std::vector<witsml2__BitRecord *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BitRecord (-1972)

#endif

/* std::vector<witsml2__Fluid *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Fluid (-1970)

#endif

/* std::vector<witsml2__DrillingParams *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillingParams (-1968)

#endif

/* std::vector<witsml2__WellDatum *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__WellDatum (-1965)

#endif

/* std::vector<witsml2__ReferencePoint *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ReferencePoint (-1963)

#endif

/* std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-1944)

#endif

/* std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-1942)

#endif

/* std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-1940)

#endif

/* std::vector<gmd__CI_USCOREDate_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType (-1938)

#endif

/* std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType (-1936)

#endif

/* std::vector<gco__DateTime_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType (-1934)

#endif

/* std::vector<gco__CharacterString_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType (-1929)

#endif

/* std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-1924)

#endif

/* std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-1922)

#endif

/* std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-1920)

#endif

/* std::vector<eml21__AbstractGraphicalInformation *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation (-1915)

#endif

/* std::vector<eml21__FailingRule *>  has binding name 'std__vectorTemplateOfPointerToeml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FailingRule (-1912)

#endif

/* std::vector<eml21__GeologicTime *>  has binding name 'std__vectorTemplateOfPointerToeml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__GeologicTime (-1899)

#endif

/* std::vector<eml21__PropertyKind *>  has binding name 'std__vectorTemplateOfPointerToeml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__PropertyKind (-1897)

#endif

/* std::vector<eml21__ParameterTemplate *>  has binding name 'std__vectorTemplateOfPointerToeml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ParameterTemplate (-1895)

#endif

/* std::vector<witsml2__PerforationStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory (-1892)

#endif

/* std::vector<witsml2__IntervalStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory (-1888)

#endif

/* std::vector<witsml2__GravelPackInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GravelPackInterval (-1886)

#endif

/* std::vector<witsml2__PerforationSetInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval (-1884)

#endif

/* std::vector<witsml2__OpenHoleInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval (-1882)

#endif

/* std::vector<witsml2__SlotsInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__SlotsInterval (-1880)

#endif

/* std::vector<witsml2__GasPeak *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GasPeak (-1869)

#endif

/* std::vector<witsml2__MudGas *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MudGas (-1845)

#endif

/* std::vector<witsml2__DrillingParameters *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DrillingParameters (-1843)

#endif

/* std::vector<witsml2__LithologyQualifier *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__LithologyQualifier (-1840)

#endif

/* std::vector<witsml2__CuttingsIntervalShow *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow (-1838)

#endif

/* std::vector<witsml2__IscwsaNomenclatureConstant *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaNomenclatureConstant' for type 'witsml2:IscwsaNomenclatureConstant' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaNomenclatureConstant
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaNomenclatureConstant (-1831)

#endif

/* std::vector<witsml2__IscwsaNameAndDescription *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaNameAndDescription' for type 'witsml2:IscwsaNameAndDescription' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaNameAndDescription
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaNameAndDescription (-1829)

#endif

/* std::vector<witsml2__AbstractIscwsaErrorCoefficient *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AbstractIscwsaErrorCoefficient' for type 'witsml2:AbstractIscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractIscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractIscwsaErrorCoefficient (-1827)

#endif

/* std::vector<witsml2__IscwsaErrorCoefficient *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IscwsaErrorCoefficient' for type 'witsml2:IscwsaErrorCoefficient' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorCoefficient
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__IscwsaErrorCoefficient (-1825)

#endif

/* std::vector<enum witsml2__SurveyToolOperatingMode>  has binding name 'std__vectorTemplateOfwitsml2__SurveyToolOperatingMode' for type 'witsml2:SurveyToolOperatingMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__SurveyToolOperatingMode
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__SurveyToolOperatingMode (-1823)

#endif

/* std::vector<witsml2__StimPerforationCluster *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster (-1818)

#endif

/* std::vector<witsml2__StimPumpFlowBackTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest (-1816)

#endif

/* std::vector<witsml2__StimStepTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimStepTest (-1814)

#endif

/* std::vector<witsml2__StimStepDownTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimStepDownTest (-1812)

#endif

/* std::vector<witsml2__StimFetTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimFetTest (-1810)

#endif

/* std::vector<enum witsml2__StimFetTestAnalysisMethod>  has binding name 'std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod' for type 'witsml2:StimFetTestAnalysisMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod (-1805)

#endif

/* std::vector<witsml2__StimPressureFlowRate *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate (-1803)

#endif

/* std::vector<witsml2__ISO13503_USCORE2SieveAnalysisData *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData (-1800)

#endif

/* std::vector<witsml2__ISO13503_USCORE2CrushTestData *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData (-1798)

#endif

/* std::vector<witsml2__StimProppantAgent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimProppantAgent (-1794)

#endif

/* std::vector<witsml2__StimAdditive *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimAdditive (-1792)

#endif

/* std::vector<witsml2__StimMaterialQuantity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity (-1790)

#endif

/* std::vector<witsml2__StimTubular *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimTubular (-1785)

#endif

/* std::vector<witsml2__StimPumpFlowBackTestStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep (-1781)

#endif

/* std::vector<witsml2__BopComponent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BopComponent (-1772)

#endif

/* std::vector<witsml2__AnchorState *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AnchorState (-1755)

#endif

/* std::vector<witsml2__Incident *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Incident
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Incident (-1747)

#endif

/* std::vector<witsml2__PerforationSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerforationSet (-1744)

#endif

/* std::vector<witsml2__PerfHole *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerfHole (-1742)

#endif

/* std::vector<witsml2__PerfSlot *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__PerfSlot (-1740)

#endif

/* std::vector<witsml2__ExtPropNameValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue (-1738)

#endif

/* std::vector<witsml2__Equipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Equipment (-1734)

#endif

/* std::vector<witsml2__DownholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DownholeString (-1732)

#endif

/* std::vector<witsml2__GeologyFeature *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__GeologyFeature (-1729)

#endif

/* std::vector<witsml2__Borehole *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Borehole (-1727)

#endif

/* std::vector<witsml2__BoreholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BoreholeString (-1725)

#endif

/* std::vector<witsml2__EquipmentConnection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__EquipmentConnection (-1722)

#endif

/* std::vector<witsml2__ReferenceContainer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__ReferenceContainer (-1720)

#endif

/* std::vector<witsml2__EventInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__EventInfo (-1717)

#endif

/* std::vector<witsml2__StringEquipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__StringEquipment (-1714)

#endif

/* std::vector<witsml2__MemberObject *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__MemberObject (-1708)

#endif

/* std::vector<witsml2__DownholeStringReference *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DownholeStringReference (-1702)

#endif

/* std::vector<witsml2__BoreholeStringReference *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference (-1700)

#endif

/* std::vector<witsml2__DepthRegTrack *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegTrack (-1697)

#endif

/* std::vector<witsml2__DepthRegParameter *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegParameter (-1695)

#endif

/* std::vector<witsml2__DepthRegCalibrationPoint *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint (-1693)

#endif

/* std::vector<witsml2__DepthRegTrackCurve *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve (-1689)

#endif

/* std::vector<witsml2__DepthRegRectangle *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle (-1687)

#endif

/* std::vector<eml21__DataObjectReference *>  has binding name 'std__vectorTemplateOfPointerToeml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__DataObjectReference (-1685)

#endif

/* std::vector<witsml2__CementAdditive *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementAdditive (-1683)

#endif

/* std::vector<witsml2__CementPumpScheduleStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep (-1679)

#endif

/* std::vector<witsml2__FluidLocation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__FluidLocation (-1677)

#endif

/* std::vector<witsml2__Sensor *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Sensor (-1668)

#endif

/* std::vector<witsml2__Nozzle *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Nozzle (-1657)

#endif

/* std::vector<witsml2__Bend *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Bend
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Bend (-1653)

#endif

/* std::vector<witsml2__Stabilizer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Stabilizer (-1651)

#endif

/* std::vector<witsml2__Connection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Connection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Connection (-1645)

#endif

/* std::vector<witsml2__NameTag *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__NameTag (-1642)

#endif

/* std::vector<witsml2__RheometerViscosity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__RheometerViscosity (-1620)

#endif

/* std::vector<witsml2__Rheometer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__Rheometer (-1614)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String64
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String64 (-1578)

#endif

/* std::vector<witsml2__AbstractWellLocation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation (-1576)

#endif

/* std::vector<gml__CodeType *>  has binding name 'std__vectorTemplateOfPointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTogml__CodeType (-1447)

#endif

/* std::vector<eml21__AbstractActivityParameter *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractActivityParameter (-1434)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String2000 (-1432)

#endif

/* std::vector<enum eml21__ParameterKind>  has binding name 'std__vectorTemplateOfeml21__ParameterKind' for type 'eml21:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__ParameterKind (-1430)

#endif

/* std::vector<eml21__AbstractParameterKey *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractParameterKey (-1429)

#endif

/* std::vector<eml21__ExternalDatasetPart *>  has binding name 'std__vectorTemplateOfPointerToeml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExternalDatasetPart (-1424)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOf_XML
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOf_XML (-1414)

#endif

/* std::vector<eml21__ExtensionNameValue *>  has binding name 'std__vectorTemplateOfPointerToeml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExtensionNameValue (-1408)

#endif

/* std::vector<eml21__ObjectAlias *>  has binding name 'std__vectorTemplateOfPointerToeml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ObjectAlias (-1404)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace gsoap_eml2_1


#endif

/* End of gsoap_eml2_1Stub.h */
