/* gsoap_eml2_1Stub.h
   Generated by gSOAP 2.8.108 for eml2_1ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool is licensed for commercial use, no resale/redistribution.
--------------------------------------------------------------------------------
Product and source code licensed by Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_witsml20	"http://www.energistics.org/energyml/data/witsmlv2"
#define SOAP_NAMESPACE_OF_eml21	"http://www.energistics.org/energyml/data/commonv2"
#include <time.h>

#ifndef gsoap_eml2_1Stub_H
#define gsoap_eml2_1Stub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 208108
# error "GSOAP VERSION 208108 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace gsoap_eml2_1 {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* eml2_1ForGsoap.h:1981 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind (-809)

/* eml21:ParameterKind */
enum eml21__ParameterKind {
	eml21__ParameterKind__dataObject = 0,
	eml21__ParameterKind__double_ = 1,
	eml21__ParameterKind__integer = 2,
	eml21__ParameterKind__string = 3,
	eml21__ParameterKind__timestamp = 4,
	eml21__ParameterKind__subActivity = 5
};
#endif

/* eml2_1ForGsoap.h:1998 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d (-810)

/* eml21:AxisOrder2d */
enum eml21__AxisOrder2d {
	eml21__AxisOrder2d__easting_x0020northing = 0,
	eml21__AxisOrder2d__northing_x0020easting = 1,
	eml21__AxisOrder2d__westing_x0020southing = 2,
	eml21__AxisOrder2d__southing_x0020westing = 3,
	eml21__AxisOrder2d__northing_x0020westing = 4,
	eml21__AxisOrder2d__westing_x0020northing = 5
};
#endif

/* eml2_1ForGsoap.h:2035 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection (-811)

/* eml21:VerticalDirection */
enum eml21__VerticalDirection {
	eml21__VerticalDirection__up = 0,
	eml21__VerticalDirection__down = 1
};
#endif

/* eml2_1ForGsoap.h:2139 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure (-822)

/* eml21:UnitOfMeasure */
enum eml21__UnitOfMeasure {
	eml21__UnitOfMeasure__A = 'A',
	eml21__UnitOfMeasure__a = 'a',
	eml21__UnitOfMeasure__b = 'b',
	eml21__UnitOfMeasure__B = 'B',
	eml21__UnitOfMeasure__C = 'C',
	eml21__UnitOfMeasure__D = 'D',
	eml21__UnitOfMeasure__d = 'd',
	eml21__UnitOfMeasure__F = 'F',
	eml21__UnitOfMeasure__g = 'g',
	eml21__UnitOfMeasure__H = 'H',
	eml21__UnitOfMeasure__h = 'h',
	eml21__UnitOfMeasure__J = 'J',
	eml21__UnitOfMeasure__K = 'K',
	eml21__UnitOfMeasure__L = 'L',
	eml21__UnitOfMeasure__m = 'm',
	eml21__UnitOfMeasure__N = 'N',
	eml21__UnitOfMeasure__O = 'O',
	eml21__UnitOfMeasure__P = 'P',
	eml21__UnitOfMeasure__S = 'S',
	eml21__UnitOfMeasure__s = 's',
	eml21__UnitOfMeasure__t = 't',
	eml21__UnitOfMeasure__T = 'T',
	eml21__UnitOfMeasure__V = 'V',
	eml21__UnitOfMeasure__W = 'W',
	eml21__UnitOfMeasure___x0025 = 'u',
	eml21__UnitOfMeasure___x0025_x005barea_x005d = 'v',
	eml21__UnitOfMeasure___x0025_x005bmass_x005d = 'w',
	eml21__UnitOfMeasure___x0025_x005bmolar_x005d = 'x',
	eml21__UnitOfMeasure___x0025_x005bvol_x005d = 'y',
	eml21__UnitOfMeasure___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 'z',
	eml21__UnitOfMeasure___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 123,
	eml21__UnitOfMeasure___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 124,
	eml21__UnitOfMeasure__0_x002e001_x0020bbl_x002fft3 = 125,
	eml21__UnitOfMeasure__0_x002e001_x0020bbl_x002fm3 = 126,
	eml21__UnitOfMeasure__0_x002e001_x0020d_x002fft3 = 127,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 128,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 129,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 130,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 131,
	eml21__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 132,
	eml21__UnitOfMeasure__0_x002e001_x0020h_x002fft = 133,
	eml21__UnitOfMeasure__0_x002e001_x0020kPa2_x002fcP = 134,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fbbl = 135,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 136,
	eml21__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 137,
	eml21__UnitOfMeasure__0_x002e001_x0020psi_x002fft = 138,
	eml21__UnitOfMeasure__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 139,
	eml21__UnitOfMeasure__0_x002e001_x0020seca = 140,
	eml21__UnitOfMeasure__0_x002e01_x0020bbl_x002fbbl = 141,
	eml21__UnitOfMeasure__0_x002e01_x0020dega_x002fft = 142,
	eml21__UnitOfMeasure__0_x002e01_x0020degF_x002fft = 143,
	eml21__UnitOfMeasure__0_x002e01_x0020dm3_x002fkm = 144,
	eml21__UnitOfMeasure__0_x002e01_x0020ft_x002fft = 145,
	eml21__UnitOfMeasure__0_x002e01_x0020grain_x002fft3 = 146,
	eml21__UnitOfMeasure__0_x002e01_x0020L_x002fkg = 147,
	eml21__UnitOfMeasure__0_x002e01_x0020L_x002fkm = 148,
	eml21__UnitOfMeasure__0_x002e01_x0020lbf_x002fft = 149,
	eml21__UnitOfMeasure__0_x002e01_x0020lbf_x002fft2 = 150,
	eml21__UnitOfMeasure__0_x002e01_x0020lbm_x002fft2 = 151,
	eml21__UnitOfMeasure__0_x002e01_x0020psi_x002fft = 152,
	eml21__UnitOfMeasure__0_x002e1_x0020ft = 153,
	eml21__UnitOfMeasure__0_x002e1_x0020ft_x005bUS_x005d = 154,
	eml21__UnitOfMeasure__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 155,
	eml21__UnitOfMeasure__0_x002e1_x0020in = 156,
	eml21__UnitOfMeasure__0_x002e1_x0020L_x002fbbl = 157,
	eml21__UnitOfMeasure__0_x002e1_x0020lbm_x002fbbl = 158,
	eml21__UnitOfMeasure__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 159,
	eml21__UnitOfMeasure__0_x002e1_x0020yd = 160,
	eml21__UnitOfMeasure__1_x002f_x0028kg_x002es_x0029 = 161,
	eml21__UnitOfMeasure__1_x002f16_x0020in = 162,
	eml21__UnitOfMeasure__1_x002f2_x0020ft = 163,
	eml21__UnitOfMeasure__1_x002f2_x0020ms = 164,
	eml21__UnitOfMeasure__1_x002f30_x0020cm3_x002fmin = 165,
	eml21__UnitOfMeasure__1_x002f30_x0020dega_x002fft = 166,
	eml21__UnitOfMeasure__1_x002f30_x0020dega_x002fm = 167,
	eml21__UnitOfMeasure__1_x002f30_x0020lbf_x002fm = 168,
	eml21__UnitOfMeasure__1_x002f30_x0020m_x002fm = 169,
	eml21__UnitOfMeasure__1_x002f30_x0020N_x002fm = 170,
	eml21__UnitOfMeasure__1_x002f32_x0020in = 171,
	eml21__UnitOfMeasure__1_x002f64_x0020in = 172,
	eml21__UnitOfMeasure__1_x002fa = 173,
	eml21__UnitOfMeasure__1_x002fangstrom = 174,
	eml21__UnitOfMeasure__1_x002fbar = 175,
	eml21__UnitOfMeasure__1_x002fbbl = 176,
	eml21__UnitOfMeasure__1_x002fcm = 177,
	eml21__UnitOfMeasure__1_x002fd = 178,
	eml21__UnitOfMeasure__1_x002fdegC = 179,
	eml21__UnitOfMeasure__1_x002fdegF = 180,
	eml21__UnitOfMeasure__1_x002fdegR = 181,
	eml21__UnitOfMeasure__1_x002fft = 182,
	eml21__UnitOfMeasure__1_x002fft2 = 183,
	eml21__UnitOfMeasure__1_x002fft3 = 184,
	eml21__UnitOfMeasure__1_x002fg = 185,
	eml21__UnitOfMeasure__1_x002fgal_x005bUK_x005d = 186,
	eml21__UnitOfMeasure__1_x002fgal_x005bUS_x005d = 187,
	eml21__UnitOfMeasure__1_x002fh = 188,
	eml21__UnitOfMeasure__1_x002fH = 189,
	eml21__UnitOfMeasure__1_x002fin = 190,
	eml21__UnitOfMeasure__1_x002fK = 191,
	eml21__UnitOfMeasure__1_x002fkg = 192,
	eml21__UnitOfMeasure__1_x002fkm2 = 193,
	eml21__UnitOfMeasure__1_x002fkPa = 194,
	eml21__UnitOfMeasure__1_x002fL = 195,
	eml21__UnitOfMeasure__1_x002flbf = 196,
	eml21__UnitOfMeasure__1_x002flbm = 197,
	eml21__UnitOfMeasure__1_x002fm = 198,
	eml21__UnitOfMeasure__1_x002fm2 = 199,
	eml21__UnitOfMeasure__1_x002fm3 = 200,
	eml21__UnitOfMeasure__1_x002fmi = 201,
	eml21__UnitOfMeasure__1_x002fmi2 = 202,
	eml21__UnitOfMeasure__1_x002fmin = 203,
	eml21__UnitOfMeasure__1_x002fmm = 204,
	eml21__UnitOfMeasure__1_x002fms = 205,
	eml21__UnitOfMeasure__1_x002fN = 206,
	eml21__UnitOfMeasure__1_x002fnm = 207,
	eml21__UnitOfMeasure__1_x002fPa = 208,
	eml21__UnitOfMeasure__1_x002fpPa = 209,
	eml21__UnitOfMeasure__1_x002fpsi = 210,
	eml21__UnitOfMeasure__1_x002fs = 211,
	eml21__UnitOfMeasure__1_x002fupsi = 212,
	eml21__UnitOfMeasure__1_x002fus = 213,
	eml21__UnitOfMeasure__1_x002fuV = 214,
	eml21__UnitOfMeasure__1_x002fV = 215,
	eml21__UnitOfMeasure__1_x002fwk = 216,
	eml21__UnitOfMeasure__1_x002fyd = 217,
	eml21__UnitOfMeasure__10_x0020ft = 218,
	eml21__UnitOfMeasure__10_x0020in = 219,
	eml21__UnitOfMeasure__10_x0020km = 220,
	eml21__UnitOfMeasure__10_x0020kN = 221,
	eml21__UnitOfMeasure__10_x0020Mg_x002fm3 = 222,
	eml21__UnitOfMeasure__100_x0020ft = 223,
	eml21__UnitOfMeasure__100_x0020ka_x005bt_x005d = 224,
	eml21__UnitOfMeasure__100_x0020km = 225,
	eml21__UnitOfMeasure__1000_x0020bbl = 226,
	eml21__UnitOfMeasure__1000_x0020bbl_x002eft_x002fd = 227,
	eml21__UnitOfMeasure__1000_x0020bbl_x002fd = 228,
	eml21__UnitOfMeasure__1000_x0020ft = 229,
	eml21__UnitOfMeasure__1000_x0020ft_x002fh = 230,
	eml21__UnitOfMeasure__1000_x0020ft_x002fs = 231,
	eml21__UnitOfMeasure__1000_x0020ft3 = 232,
	eml21__UnitOfMeasure__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 233,
	eml21__UnitOfMeasure__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 234,
	eml21__UnitOfMeasure__1000_x0020ft3_x002fbbl = 235,
	eml21__UnitOfMeasure__1000_x0020ft3_x002fd = 236,
	eml21__UnitOfMeasure__1000_x0020gal_x005bUK_x005d = 237,
	eml21__UnitOfMeasure__1000_x0020gal_x005bUS_x005d = 238,
	eml21__UnitOfMeasure__1000_x0020lbf_x002eft = 239,
	eml21__UnitOfMeasure__1000_x0020m3 = 240,
	eml21__UnitOfMeasure__1000_x0020m3_x002f_x0028d_x002em_x0029 = 241,
	eml21__UnitOfMeasure__1000_x0020m3_x002f_x0028h_x002em_x0029 = 242,
	eml21__UnitOfMeasure__1000_x0020m3_x002fd = 243,
	eml21__UnitOfMeasure__1000_x0020m3_x002fh = 244,
	eml21__UnitOfMeasure__1000_x0020m3_x002fm3 = 245,
	eml21__UnitOfMeasure__1000_x0020m4_x002fd = 246,
	eml21__UnitOfMeasure__1E12_x0020ft3 = 247,
	eml21__UnitOfMeasure__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 248,
	eml21__UnitOfMeasure__1E_6_x0020acre_x002eft_x002fbbl = 249,
	eml21__UnitOfMeasure__1E6_x0020bbl = 250,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 251,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002facre = 252,
	eml21__UnitOfMeasure__1E6_x0020bbl_x002fd = 253,
	eml21__UnitOfMeasure__1E_6_x0020bbl_x002fft3 = 254,
	eml21__UnitOfMeasure__1E_6_x0020bbl_x002fm3 = 255,
	eml21__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d = 256,
	eml21__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d_x002fh = 257,
	eml21__UnitOfMeasure__1E6_x0020ft3 = 258,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 259,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002fbbl = 260,
	eml21__UnitOfMeasure__1E6_x0020ft3_x002fd = 261,
	eml21__UnitOfMeasure__1E_6_x0020gal_x005bUS_x005d = 262,
	eml21__UnitOfMeasure__1E6_x0020lbm_x002fa = 263,
	eml21__UnitOfMeasure__1E6_x0020m3 = 264,
	eml21__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegC_x0029 = 265,
	eml21__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegF_x0029 = 266,
	eml21__UnitOfMeasure__1E6_x0020m3_x002fd = 267,
	eml21__UnitOfMeasure__1E_9_x00201_x002fft = 268,
	eml21__UnitOfMeasure__1E9_x0020bbl = 269,
	eml21__UnitOfMeasure__1E9_x0020ft3 = 270,
	eml21__UnitOfMeasure__30_x0020ft = 271,
	eml21__UnitOfMeasure__30_x0020m = 272,
	eml21__UnitOfMeasure__A_x002eh = 273,
	eml21__UnitOfMeasure__A_x002em2 = 274,
	eml21__UnitOfMeasure__A_x002es = 275,
	eml21__UnitOfMeasure__A_x002es_x002fkg = 276,
	eml21__UnitOfMeasure__A_x002es_x002fm3 = 277,
	eml21__UnitOfMeasure__A_x002fcm2 = 278,
	eml21__UnitOfMeasure__A_x002fft2 = 279,
	eml21__UnitOfMeasure__A_x002fm = 280,
	eml21__UnitOfMeasure__A_x002fm2 = 281,
	eml21__UnitOfMeasure__A_x002fmm = 282,
	eml21__UnitOfMeasure__A_x002fmm2 = 283,
	eml21__UnitOfMeasure__a_x005bt_x005d = 284,
	eml21__UnitOfMeasure__acre = 285,
	eml21__UnitOfMeasure__acre_x002eft = 286,
	eml21__UnitOfMeasure__ag = 287,
	eml21__UnitOfMeasure__aJ = 288,
	eml21__UnitOfMeasure__angstrom = 289,
	eml21__UnitOfMeasure__at = 290,
	eml21__UnitOfMeasure__atm = 291,
	eml21__UnitOfMeasure__atm_x002fft = 292,
	eml21__UnitOfMeasure__atm_x002fh = 293,
	eml21__UnitOfMeasure__atm_x002fhm = 294,
	eml21__UnitOfMeasure__atm_x002fm = 295,
	eml21__UnitOfMeasure__B_x002eW = 296,
	eml21__UnitOfMeasure__b_x002fcm3 = 297,
	eml21__UnitOfMeasure__B_x002fm = 298,
	eml21__UnitOfMeasure__B_x002fO = 299,
	eml21__UnitOfMeasure__bar = 300,
	eml21__UnitOfMeasure__bar_x002fh = 301,
	eml21__UnitOfMeasure__bar_x002fkm = 302,
	eml21__UnitOfMeasure__bar_x002fm = 303,
	eml21__UnitOfMeasure__bar2 = 304,
	eml21__UnitOfMeasure__bar2_x002fcP = 305,
	eml21__UnitOfMeasure__bbl = 306,
	eml21__UnitOfMeasure__bbl_x002f_x0028acre_x002eft_x0029 = 307,
	eml21__UnitOfMeasure__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 308,
	eml21__UnitOfMeasure__bbl_x002f_x0028d_x002eft_x0029 = 309,
	eml21__UnitOfMeasure__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 310,
	eml21__UnitOfMeasure__bbl_x002f_x0028kPa_x002ed_x0029 = 311,
	eml21__UnitOfMeasure__bbl_x002f_x0028psi_x002ed_x0029 = 312,
	eml21__UnitOfMeasure__bbl_x002facre = 313,
	eml21__UnitOfMeasure__bbl_x002fbbl = 314,
	eml21__UnitOfMeasure__bbl_x002fd = 315,
	eml21__UnitOfMeasure__bbl_x002fd2 = 316,
	eml21__UnitOfMeasure__bbl_x002fft = 317,
	eml21__UnitOfMeasure__bbl_x002fft3 = 318,
	eml21__UnitOfMeasure__bbl_x002fh = 319,
	eml21__UnitOfMeasure__bbl_x002fh2 = 320,
	eml21__UnitOfMeasure__bbl_x002fin = 321,
	eml21__UnitOfMeasure__bbl_x002fm3 = 322,
	eml21__UnitOfMeasure__bbl_x002fmi = 323,
	eml21__UnitOfMeasure__bbl_x002fmin = 324,
	eml21__UnitOfMeasure__bbl_x002fpsi = 325,
	eml21__UnitOfMeasure__bbl_x002fton_x005bUK_x005d = 326,
	eml21__UnitOfMeasure__bbl_x002fton_x005bUS_x005d = 327,
	eml21__UnitOfMeasure__Bd = 328,
	eml21__UnitOfMeasure__bit = 329,
	eml21__UnitOfMeasure__bit_x002fs = 330,
	eml21__UnitOfMeasure__Bq = 331,
	eml21__UnitOfMeasure__Bq_x002fkg = 332,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d = 333,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edegF_x0029 = 334,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edegF_x0029 = 335,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 336,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegF_x0029 = 337,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegR_x0029 = 338,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 339,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edegF_x0029 = 340,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 341,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 342,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegF_x0029 = 343,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegR_x0029 = 344,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edegF_x0029 = 345,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 346,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edegF_x0029 = 347,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 348,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edegF_x0029 = 349,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fbbl = 350,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fft3 = 351,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 352,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 353,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fh = 354,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002flbm = 355,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002flbmol = 356,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fmin = 357,
	eml21__UnitOfMeasure__Btu_x005bIT_x005d_x002fs = 358,
	eml21__UnitOfMeasure__Btu_x005bth_x005d = 359,
	eml21__UnitOfMeasure__Btu_x005bUK_x005d = 360,
	eml21__UnitOfMeasure__byte = 361,
	eml21__UnitOfMeasure__byte_x002fs = 362,
	eml21__UnitOfMeasure__C_x002em = 363,
	eml21__UnitOfMeasure__C_x002fcm2 = 364,
	eml21__UnitOfMeasure__C_x002fcm3 = 365,
	eml21__UnitOfMeasure__C_x002fg = 366,
	eml21__UnitOfMeasure__C_x002fkg = 367,
	eml21__UnitOfMeasure__C_x002fm2 = 368,
	eml21__UnitOfMeasure__C_x002fm3 = 369,
	eml21__UnitOfMeasure__C_x002fmm2 = 370,
	eml21__UnitOfMeasure__C_x002fmm3 = 371,
	eml21__UnitOfMeasure__ca = 372,
	eml21__UnitOfMeasure__cA = 373,
	eml21__UnitOfMeasure__cal_x005bIT_x005d = 374,
	eml21__UnitOfMeasure__cal_x005bth_x005d = 375,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028g_x002eK_x0029 = 376,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edegC_x0029 = 377,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 378,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edegC_x0029 = 379,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 380,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028mol_x002edegC_x0029 = 381,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edegC_x0029 = 382,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edegC_x0029 = 383,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 384,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fcm3 = 385,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fg = 386,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fh = 387,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fkg = 388,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002flbm = 389,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fmL = 390,
	eml21__UnitOfMeasure__cal_x005bth_x005d_x002fmm3 = 391,
	eml21__UnitOfMeasure__cC = 392,
	eml21__UnitOfMeasure__ccal_x005bth_x005d = 393,
	eml21__UnitOfMeasure__ccgr = 394,
	eml21__UnitOfMeasure__cd = 395,
	eml21__UnitOfMeasure__cd_x002fm2 = 396,
	eml21__UnitOfMeasure__cEuc = 397,
	eml21__UnitOfMeasure__ceV = 398,
	eml21__UnitOfMeasure__cF = 399,
	eml21__UnitOfMeasure__cg = 400,
	eml21__UnitOfMeasure__cgauss = 401,
	eml21__UnitOfMeasure__cgr = 402,
	eml21__UnitOfMeasure__cGy = 403,
	eml21__UnitOfMeasure__cH = 404,
	eml21__UnitOfMeasure__chain = 405,
	eml21__UnitOfMeasure__chain_x005bBnA_x005d = 406,
	eml21__UnitOfMeasure__chain_x005bBnB_x005d = 407,
	eml21__UnitOfMeasure__chain_x005bCla_x005d = 408,
	eml21__UnitOfMeasure__chain_x005bInd37_x005d = 409,
	eml21__UnitOfMeasure__chain_x005bSe_x005d = 410,
	eml21__UnitOfMeasure__chain_x005bSeT_x005d = 411,
	eml21__UnitOfMeasure__chain_x005bUS_x005d = 412,
	eml21__UnitOfMeasure__cHz = 413,
	eml21__UnitOfMeasure__Ci = 414,
	eml21__UnitOfMeasure__cJ = 415,
	eml21__UnitOfMeasure__cm = 416,
	eml21__UnitOfMeasure__cm_x002fa = 417,
	eml21__UnitOfMeasure__cm_x002fs = 418,
	eml21__UnitOfMeasure__cm_x002fs2 = 419,
	eml21__UnitOfMeasure__cm2 = 420,
	eml21__UnitOfMeasure__cm2_x002fg = 421,
	eml21__UnitOfMeasure__cm2_x002fs = 422,
	eml21__UnitOfMeasure__cm3 = 423,
	eml21__UnitOfMeasure__cm3_x002fcm3 = 424,
	eml21__UnitOfMeasure__cm3_x002fg = 425,
	eml21__UnitOfMeasure__cm3_x002fh = 426,
	eml21__UnitOfMeasure__cm3_x002fL = 427,
	eml21__UnitOfMeasure__cm3_x002fm3 = 428,
	eml21__UnitOfMeasure__cm3_x002fmin = 429,
	eml21__UnitOfMeasure__cm3_x002fs = 430,
	eml21__UnitOfMeasure__cm4 = 431,
	eml21__UnitOfMeasure__cmH2O_x005b4degC_x005d = 432,
	eml21__UnitOfMeasure__cN = 433,
	eml21__UnitOfMeasure__cohm = 434,
	eml21__UnitOfMeasure__cP = 435,
	eml21__UnitOfMeasure__cPa = 436,
	eml21__UnitOfMeasure__crd = 437,
	eml21__UnitOfMeasure__cS = 438,
	eml21__UnitOfMeasure__cs = 439,
	eml21__UnitOfMeasure__cSt = 440,
	eml21__UnitOfMeasure__ct = 441,
	eml21__UnitOfMeasure__cT = 442,
	eml21__UnitOfMeasure__cu = 443,
	eml21__UnitOfMeasure__cV = 444,
	eml21__UnitOfMeasure__cW = 445,
	eml21__UnitOfMeasure__cWb = 446,
	eml21__UnitOfMeasure__cwt_x005bUK_x005d = 447,
	eml21__UnitOfMeasure__cwt_x005bUS_x005d = 448,
	eml21__UnitOfMeasure__D_x002eft = 449,
	eml21__UnitOfMeasure__D_x002em = 450,
	eml21__UnitOfMeasure__D_x002f_x0028Pa_x002es_x0029 = 451,
	eml21__UnitOfMeasure__d_x002fbbl = 452,
	eml21__UnitOfMeasure__D_x002fcP = 453,
	eml21__UnitOfMeasure__d_x002fft3 = 454,
	eml21__UnitOfMeasure__d_x002fm3 = 455,
	eml21__UnitOfMeasure__D_x005bAPI_x005d = 456,
	eml21__UnitOfMeasure__dA = 457,
	eml21__UnitOfMeasure__dam = 458,
	eml21__UnitOfMeasure__daN = 459,
	eml21__UnitOfMeasure__daN_x002em = 460,
	eml21__UnitOfMeasure__dAPI = 461,
	eml21__UnitOfMeasure__dB = 462,
	eml21__UnitOfMeasure__dB_x002emW = 463,
	eml21__UnitOfMeasure__dB_x002eMW = 464,
	eml21__UnitOfMeasure__dB_x002eW = 465,
	eml21__UnitOfMeasure__dB_x002fft = 466,
	eml21__UnitOfMeasure__dB_x002fkm = 467,
	eml21__UnitOfMeasure__dB_x002fm = 468,
	eml21__UnitOfMeasure__dB_x002fO = 469,
	eml21__UnitOfMeasure__dC = 470,
	eml21__UnitOfMeasure__dcal_x005bth_x005d = 471,
	eml21__UnitOfMeasure__dega = 472,
	eml21__UnitOfMeasure__dega_x002fft = 473,
	eml21__UnitOfMeasure__dega_x002fh = 474,
	eml21__UnitOfMeasure__dega_x002fm = 475,
	eml21__UnitOfMeasure__dega_x002fmin = 476,
	eml21__UnitOfMeasure__dega_x002fs = 477,
	eml21__UnitOfMeasure__degC = 478,
	eml21__UnitOfMeasure__degC_x002em2_x002eh_x002fkcal_x005bth_x005d = 479,
	eml21__UnitOfMeasure__degC_x002fft = 480,
	eml21__UnitOfMeasure__degC_x002fh = 481,
	eml21__UnitOfMeasure__degC_x002fhm = 482,
	eml21__UnitOfMeasure__degC_x002fkm = 483,
	eml21__UnitOfMeasure__degC_x002fkPa = 484,
	eml21__UnitOfMeasure__degC_x002fm = 485,
	eml21__UnitOfMeasure__degC_x002fmin = 486,
	eml21__UnitOfMeasure__degC_x002fs = 487,
	eml21__UnitOfMeasure__degF = 488,
	eml21__UnitOfMeasure__degF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 489,
	eml21__UnitOfMeasure__degF_x002fft = 490,
	eml21__UnitOfMeasure__degF_x002fh = 491,
	eml21__UnitOfMeasure__degF_x002fm = 492,
	eml21__UnitOfMeasure__degF_x002fmin = 493,
	eml21__UnitOfMeasure__degF_x002fpsi = 494,
	eml21__UnitOfMeasure__degF_x002fs = 495,
	eml21__UnitOfMeasure__degR = 496,
	eml21__UnitOfMeasure__dEuc = 497,
	eml21__UnitOfMeasure__deV = 498,
	eml21__UnitOfMeasure__dF = 499,
	eml21__UnitOfMeasure__dgauss = 500,
	eml21__UnitOfMeasure__dGy = 501,
	eml21__UnitOfMeasure__dH = 502,
	eml21__UnitOfMeasure__dHz = 503,
	eml21__UnitOfMeasure__dJ = 504,
	eml21__UnitOfMeasure__dm = 505,
	eml21__UnitOfMeasure__dm_x002fs = 506,
	eml21__UnitOfMeasure__dm3 = 507,
	eml21__UnitOfMeasure__dm3_x002f_x0028kW_x002eh_x0029 = 508,
	eml21__UnitOfMeasure__dm3_x002fkg = 509,
	eml21__UnitOfMeasure__dm3_x002fkmol = 510,
	eml21__UnitOfMeasure__dm3_x002fm = 511,
	eml21__UnitOfMeasure__dm3_x002fm3 = 512,
	eml21__UnitOfMeasure__dm3_x002fMJ = 513,
	eml21__UnitOfMeasure__dm3_x002fs = 514,
	eml21__UnitOfMeasure__dm3_x002fs2 = 515,
	eml21__UnitOfMeasure__dm3_x002ft = 516,
	eml21__UnitOfMeasure__dN = 517,
	eml21__UnitOfMeasure__dN_x002em = 518,
	eml21__UnitOfMeasure__dohm = 519,
	eml21__UnitOfMeasure__dP = 520,
	eml21__UnitOfMeasure__dPa = 521,
	eml21__UnitOfMeasure__drd = 522,
	eml21__UnitOfMeasure__ds = 523,
	eml21__UnitOfMeasure__dS = 524,
	eml21__UnitOfMeasure__dT = 525,
	eml21__UnitOfMeasure__dV = 526,
	eml21__UnitOfMeasure__dW = 527,
	eml21__UnitOfMeasure__dWb = 528,
	eml21__UnitOfMeasure__dyne = 529,
	eml21__UnitOfMeasure__dyne_x002ecm2 = 530,
	eml21__UnitOfMeasure__dyne_x002es_x002fcm2 = 531,
	eml21__UnitOfMeasure__dyne_x002fcm = 532,
	eml21__UnitOfMeasure__dyne_x002fcm2 = 533,
	eml21__UnitOfMeasure__EA = 534,
	eml21__UnitOfMeasure__Ea_x005bt_x005d = 535,
	eml21__UnitOfMeasure__EC = 536,
	eml21__UnitOfMeasure__Ecal_x005bth_x005d = 537,
	eml21__UnitOfMeasure__EEuc = 538,
	eml21__UnitOfMeasure__EeV = 539,
	eml21__UnitOfMeasure__EF = 540,
	eml21__UnitOfMeasure__Eg = 541,
	eml21__UnitOfMeasure__Egauss = 542,
	eml21__UnitOfMeasure__EGy = 543,
	eml21__UnitOfMeasure__EH = 544,
	eml21__UnitOfMeasure__EHz = 545,
	eml21__UnitOfMeasure__EJ = 546,
	eml21__UnitOfMeasure__EJ_x002fa = 547,
	eml21__UnitOfMeasure__Em = 548,
	eml21__UnitOfMeasure__EN = 549,
	eml21__UnitOfMeasure__Eohm = 550,
	eml21__UnitOfMeasure__EP = 551,
	eml21__UnitOfMeasure__EPa = 552,
	eml21__UnitOfMeasure__Erd = 553,
	eml21__UnitOfMeasure__erg = 554,
	eml21__UnitOfMeasure__erg_x002fa = 555,
	eml21__UnitOfMeasure__erg_x002fcm2 = 556,
	eml21__UnitOfMeasure__erg_x002fcm3 = 557,
	eml21__UnitOfMeasure__erg_x002fg = 558,
	eml21__UnitOfMeasure__erg_x002fkg = 559,
	eml21__UnitOfMeasure__erg_x002fm3 = 560,
	eml21__UnitOfMeasure__ES = 561,
	eml21__UnitOfMeasure__ET = 562,
	eml21__UnitOfMeasure__Euc = 563,
	eml21__UnitOfMeasure__eV = 564,
	eml21__UnitOfMeasure__EW = 565,
	eml21__UnitOfMeasure__EWb = 566,
	eml21__UnitOfMeasure__F_x002fm = 567,
	eml21__UnitOfMeasure__fa = 568,
	eml21__UnitOfMeasure__fA = 569,
	eml21__UnitOfMeasure__fathom = 570,
	eml21__UnitOfMeasure__fC = 571,
	eml21__UnitOfMeasure__fcal_x005bth_x005d = 572,
	eml21__UnitOfMeasure__fEuc = 573,
	eml21__UnitOfMeasure__feV = 574,
	eml21__UnitOfMeasure__fF = 575,
	eml21__UnitOfMeasure__fg = 576,
	eml21__UnitOfMeasure__fgauss = 577,
	eml21__UnitOfMeasure__fGy = 578,
	eml21__UnitOfMeasure__fH = 579,
	eml21__UnitOfMeasure__fHz = 580,
	eml21__UnitOfMeasure__fJ = 581,
	eml21__UnitOfMeasure__floz_x005bUK_x005d = 582,
	eml21__UnitOfMeasure__floz_x005bUS_x005d = 583,
	eml21__UnitOfMeasure__fm = 584,
	eml21__UnitOfMeasure__fN = 585,
	eml21__UnitOfMeasure__fohm = 586,
	eml21__UnitOfMeasure__footcandle = 587,
	eml21__UnitOfMeasure__footcandle_x002es = 588,
	eml21__UnitOfMeasure__fP = 589,
	eml21__UnitOfMeasure__fPa = 590,
	eml21__UnitOfMeasure__frd = 591,
	eml21__UnitOfMeasure__fS = 592,
	eml21__UnitOfMeasure__ft = 593,
	eml21__UnitOfMeasure__fT = 594,
	eml21__UnitOfMeasure__ft_x002fbbl = 595,
	eml21__UnitOfMeasure__ft_x002fd = 596,
	eml21__UnitOfMeasure__ft_x002fdegF = 597,
	eml21__UnitOfMeasure__ft_x002fft = 598,
	eml21__UnitOfMeasure__ft_x002fft3 = 599,
	eml21__UnitOfMeasure__ft_x002fgal_x005bUS_x005d = 600,
	eml21__UnitOfMeasure__ft_x002fh = 601,
	eml21__UnitOfMeasure__ft_x002fin = 602,
	eml21__UnitOfMeasure__ft_x002flbm = 603,
	eml21__UnitOfMeasure__ft_x002fm = 604,
	eml21__UnitOfMeasure__ft_x002fmi = 605,
	eml21__UnitOfMeasure__ft_x002fmin = 606,
	eml21__UnitOfMeasure__ft_x002fms = 607,
	eml21__UnitOfMeasure__ft_x002fpsi = 608,
	eml21__UnitOfMeasure__ft_x002fs = 609,
	eml21__UnitOfMeasure__ft_x002fs2 = 610,
	eml21__UnitOfMeasure__ft_x002fus = 611,
	eml21__UnitOfMeasure__ft_x005bBnA_x005d = 612,
	eml21__UnitOfMeasure__ft_x005bBnB_x005d = 613,
	eml21__UnitOfMeasure__ft_x005bBr36_x005d = 614,
	eml21__UnitOfMeasure__ft_x005bBr65_x005d = 615,
	eml21__UnitOfMeasure__ft_x005bCla_x005d = 616,
	eml21__UnitOfMeasure__ft_x005bGC_x005d = 617,
	eml21__UnitOfMeasure__ft_x005bInd_x005d = 618,
	eml21__UnitOfMeasure__ft_x005bInd37_x005d = 619,
	eml21__UnitOfMeasure__ft_x005bInd62_x005d = 620,
	eml21__UnitOfMeasure__ft_x005bInd75_x005d = 621,
	eml21__UnitOfMeasure__ft_x005bSe_x005d = 622,
	eml21__UnitOfMeasure__ft_x005bSeT_x005d = 623,
	eml21__UnitOfMeasure__ft_x005bUS_x005d = 624,
	eml21__UnitOfMeasure__ft2 = 625,
	eml21__UnitOfMeasure__ft2_x002fh = 626,
	eml21__UnitOfMeasure__ft2_x002fin3 = 627,
	eml21__UnitOfMeasure__ft2_x002flbm = 628,
	eml21__UnitOfMeasure__ft2_x002fs = 629,
	eml21__UnitOfMeasure__ft3 = 630,
	eml21__UnitOfMeasure__ft3_x002f_x0028d_x002eft_x0029 = 631,
	eml21__UnitOfMeasure__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 632,
	eml21__UnitOfMeasure__ft3_x002f_x0028min_x002eft2_x0029 = 633,
	eml21__UnitOfMeasure__ft3_x002f_x0028s_x002eft2_x0029 = 634,
	eml21__UnitOfMeasure__ft3_x002fbbl = 635,
	eml21__UnitOfMeasure__ft3_x002fd = 636,
	eml21__UnitOfMeasure__ft3_x002fd2 = 637,
	eml21__UnitOfMeasure__ft3_x002fft = 638,
	eml21__UnitOfMeasure__ft3_x002fft2 = 639,
	eml21__UnitOfMeasure__ft3_x002fft3 = 640,
	eml21__UnitOfMeasure__ft3_x002fh = 641,
	eml21__UnitOfMeasure__ft3_x002fh2 = 642,
	eml21__UnitOfMeasure__ft3_x002fkg = 643,
	eml21__UnitOfMeasure__ft3_x002flbm = 644,
	eml21__UnitOfMeasure__ft3_x002flbmol = 645,
	eml21__UnitOfMeasure__ft3_x002fmin = 646,
	eml21__UnitOfMeasure__ft3_x002fmin2 = 647,
	eml21__UnitOfMeasure__ft3_x002frad = 648,
	eml21__UnitOfMeasure__ft3_x002fs = 649,
	eml21__UnitOfMeasure__ft3_x002fs2 = 650,
	eml21__UnitOfMeasure__ft3_x002fsack_x005b94lbm_x005d = 651,
	eml21__UnitOfMeasure__fur_x005bUS_x005d = 652,
	eml21__UnitOfMeasure__fV = 653,
	eml21__UnitOfMeasure__fW = 654,
	eml21__UnitOfMeasure__fWb = 655,
	eml21__UnitOfMeasure__g_x002eft_x002f_x0028cm3_x002es_x0029 = 656,
	eml21__UnitOfMeasure__g_x002em_x002f_x0028cm3_x002es_x0029 = 657,
	eml21__UnitOfMeasure__g_x002fcm3 = 658,
	eml21__UnitOfMeasure__g_x002fcm4 = 659,
	eml21__UnitOfMeasure__g_x002fdm3 = 660,
	eml21__UnitOfMeasure__g_x002fgal_x005bUK_x005d = 661,
	eml21__UnitOfMeasure__g_x002fgal_x005bUS_x005d = 662,
	eml21__UnitOfMeasure__g_x002fkg = 663,
	eml21__UnitOfMeasure__g_x002fL = 664,
	eml21__UnitOfMeasure__g_x002fm3 = 665,
	eml21__UnitOfMeasure__g_x002fmol = 666,
	eml21__UnitOfMeasure__g_x002fs = 667,
	eml21__UnitOfMeasure__g_x002ft = 668,
	eml21__UnitOfMeasure__GA = 669,
	eml21__UnitOfMeasure__Ga_x005bt_x005d = 670,
	eml21__UnitOfMeasure__Gal = 671,
	eml21__UnitOfMeasure__gal_x005bUK_x005d = 672,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 673,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 674,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 675,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 676,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 677,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 678,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fd = 679,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fft3 = 680,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fh = 681,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fh2 = 682,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002flbm = 683,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmi = 684,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmin = 685,
	eml21__UnitOfMeasure__gal_x005bUK_x005d_x002fmin2 = 686,
	eml21__UnitOfMeasure__gal_x005bUS_x005d = 687,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 688,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 689,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 690,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 691,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 692,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 693,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fbbl = 694,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fd = 695,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fft = 696,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fft3 = 697,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fh = 698,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fh2 = 699,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002flbm = 700,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmi = 701,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmin = 702,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fmin2 = 703,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 704,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 705,
	eml21__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 706,
	eml21__UnitOfMeasure__gAPI = 707,
	eml21__UnitOfMeasure__gauss = 708,
	eml21__UnitOfMeasure__gauss_x002fcm = 709,
	eml21__UnitOfMeasure__GBq = 710,
	eml21__UnitOfMeasure__GC = 711,
	eml21__UnitOfMeasure__Gcal_x005bth_x005d = 712,
	eml21__UnitOfMeasure__GEuc = 713,
	eml21__UnitOfMeasure__GeV = 714,
	eml21__UnitOfMeasure__gf = 715,
	eml21__UnitOfMeasure__GF = 716,
	eml21__UnitOfMeasure__Gg = 717,
	eml21__UnitOfMeasure__Ggauss = 718,
	eml21__UnitOfMeasure__GGy = 719,
	eml21__UnitOfMeasure__GH = 720,
	eml21__UnitOfMeasure__GHz = 721,
	eml21__UnitOfMeasure__GJ = 722,
	eml21__UnitOfMeasure__Gm = 723,
	eml21__UnitOfMeasure__GN = 724,
	eml21__UnitOfMeasure__gn = 725,
	eml21__UnitOfMeasure__Gohm = 726,
	eml21__UnitOfMeasure__gon = 727,
	eml21__UnitOfMeasure__GP = 728,
	eml21__UnitOfMeasure__GPa = 729,
	eml21__UnitOfMeasure__GPa_x002fcm = 730,
	eml21__UnitOfMeasure__GPa2 = 731,
	eml21__UnitOfMeasure__grain = 732,
	eml21__UnitOfMeasure__grain_x002fft3 = 733,
	eml21__UnitOfMeasure__grain_x002fgal_x005bUS_x005d = 734,
	eml21__UnitOfMeasure__Grd = 735,
	eml21__UnitOfMeasure__GS = 736,
	eml21__UnitOfMeasure__GT = 737,
	eml21__UnitOfMeasure__GV = 738,
	eml21__UnitOfMeasure__GW = 739,
	eml21__UnitOfMeasure__GW_x002eh = 740,
	eml21__UnitOfMeasure__GWb = 741,
	eml21__UnitOfMeasure__Gy = 742,
	eml21__UnitOfMeasure__h_x002fft3 = 743,
	eml21__UnitOfMeasure__h_x002fkm = 744,
	eml21__UnitOfMeasure__H_x002fm = 745,
	eml21__UnitOfMeasure__h_x002fm3 = 746,
	eml21__UnitOfMeasure__ha = 747,
	eml21__UnitOfMeasure__ha_x002em = 748,
	eml21__UnitOfMeasure__hbar = 749,
	eml21__UnitOfMeasure__hg = 750,
	eml21__UnitOfMeasure__hL = 751,
	eml21__UnitOfMeasure__hm = 752,
	eml21__UnitOfMeasure__hN = 753,
	eml21__UnitOfMeasure__hp = 754,
	eml21__UnitOfMeasure__hp_x002eh = 755,
	eml21__UnitOfMeasure__hp_x002eh_x002fbbl = 756,
	eml21__UnitOfMeasure__hp_x002eh_x002flbm = 757,
	eml21__UnitOfMeasure__hp_x002fft3 = 758,
	eml21__UnitOfMeasure__hp_x002fin2 = 759,
	eml21__UnitOfMeasure__hp_x005belec_x005d = 760,
	eml21__UnitOfMeasure__hp_x005bhyd_x005d = 761,
	eml21__UnitOfMeasure__hp_x005bhyd_x005d_x002fin2 = 762,
	eml21__UnitOfMeasure__hp_x005bmetric_x005d = 763,
	eml21__UnitOfMeasure__hp_x005bmetric_x005d_x002eh = 764,
	eml21__UnitOfMeasure__hs = 765,
	eml21__UnitOfMeasure__Hz = 766,
	eml21__UnitOfMeasure__in = 767,
	eml21__UnitOfMeasure__in_x002f_x0028in_x002edegF_x0029 = 768,
	eml21__UnitOfMeasure__in_x002fa = 769,
	eml21__UnitOfMeasure__in_x002fmin = 770,
	eml21__UnitOfMeasure__in_x002fs = 771,
	eml21__UnitOfMeasure__in_x002fs2 = 772,
	eml21__UnitOfMeasure__in_x005bUS_x005d = 773,
	eml21__UnitOfMeasure__in2 = 774,
	eml21__UnitOfMeasure__in2_x002fft2 = 775,
	eml21__UnitOfMeasure__in2_x002fin2 = 776,
	eml21__UnitOfMeasure__in2_x002fs = 777,
	eml21__UnitOfMeasure__in3 = 778,
	eml21__UnitOfMeasure__in3_x002fft = 779,
	eml21__UnitOfMeasure__in4 = 780,
	eml21__UnitOfMeasure__inH2O_x005b39degF_x005d = 781,
	eml21__UnitOfMeasure__inH2O_x005b60degF_x005d = 782,
	eml21__UnitOfMeasure__inHg_x005b32degF_x005d = 783,
	eml21__UnitOfMeasure__inHg_x005b60degF_x005d = 784,
	eml21__UnitOfMeasure__J_x002em_x002f_x0028s_x002em2_x002eK_x0029 = 785,
	eml21__UnitOfMeasure__J_x002em_x002fm2 = 786,
	eml21__UnitOfMeasure__J_x002f_x0028g_x002eK_x0029 = 787,
	eml21__UnitOfMeasure__J_x002f_x0028kg_x002eK_x0029 = 788,
	eml21__UnitOfMeasure__J_x002f_x0028mol_x002eK_x0029 = 789,
	eml21__UnitOfMeasure__J_x002f_x0028s_x002em2_x002edegC_x0029 = 790,
	eml21__UnitOfMeasure__J_x002fcm2 = 791,
	eml21__UnitOfMeasure__J_x002fdm3 = 792,
	eml21__UnitOfMeasure__J_x002fg = 793,
	eml21__UnitOfMeasure__J_x002fK = 794,
	eml21__UnitOfMeasure__J_x002fkg = 795,
	eml21__UnitOfMeasure__J_x002fm = 796,
	eml21__UnitOfMeasure__J_x002fm2 = 797,
	eml21__UnitOfMeasure__J_x002fm3 = 798,
	eml21__UnitOfMeasure__J_x002fmol = 799,
	eml21__UnitOfMeasure__J_x002fs = 800,
	eml21__UnitOfMeasure__K_x002em2_x002fkW = 801,
	eml21__UnitOfMeasure__K_x002em2_x002fW = 802,
	eml21__UnitOfMeasure__K_x002fkm = 803,
	eml21__UnitOfMeasure__K_x002fm = 804,
	eml21__UnitOfMeasure__K_x002fPa = 805,
	eml21__UnitOfMeasure__K_x002fs = 806,
	eml21__UnitOfMeasure__K_x002fW = 807,
	eml21__UnitOfMeasure__kA = 808,
	eml21__UnitOfMeasure__ka_x005bt_x005d = 809,
	eml21__UnitOfMeasure__kC = 810,
	eml21__UnitOfMeasure__kcal_x005bth_x005d = 811,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002em_x002fcm2 = 812,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edegC_x0029 = 813,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 814,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028kg_x002edegC_x0029 = 815,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fcm3 = 816,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fg = 817,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fh = 818,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fkg = 819,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fm3 = 820,
	eml21__UnitOfMeasure__kcal_x005bth_x005d_x002fmol = 821,
	eml21__UnitOfMeasure__kcd = 822,
	eml21__UnitOfMeasure__kdyne = 823,
	eml21__UnitOfMeasure__kEuc = 824,
	eml21__UnitOfMeasure__keV = 825,
	eml21__UnitOfMeasure__kF = 826,
	eml21__UnitOfMeasure__kg = 827,
	eml21__UnitOfMeasure__kg_x002em = 828,
	eml21__UnitOfMeasure__kg_x002em_x002fcm2 = 829,
	eml21__UnitOfMeasure__kg_x002em_x002fs = 830,
	eml21__UnitOfMeasure__kg_x002em2 = 831,
	eml21__UnitOfMeasure__kg_x002f_x0028kW_x002eh_x0029 = 832,
	eml21__UnitOfMeasure__kg_x002f_x0028m_x002es_x0029 = 833,
	eml21__UnitOfMeasure__kg_x002f_x0028m2_x002es_x0029 = 834,
	eml21__UnitOfMeasure__kg_x002fd = 835,
	eml21__UnitOfMeasure__kg_x002fdm3 = 836,
	eml21__UnitOfMeasure__kg_x002fdm4 = 837,
	eml21__UnitOfMeasure__kg_x002fh = 838,
	eml21__UnitOfMeasure__kg_x002fJ = 839,
	eml21__UnitOfMeasure__kg_x002fkg = 840,
	eml21__UnitOfMeasure__kg_x002fL = 841,
	eml21__UnitOfMeasure__kg_x002fm = 842,
	eml21__UnitOfMeasure__kg_x002fm2 = 843,
	eml21__UnitOfMeasure__kg_x002fm3 = 844,
	eml21__UnitOfMeasure__kg_x002fm4 = 845,
	eml21__UnitOfMeasure__kg_x002fmin = 846,
	eml21__UnitOfMeasure__kg_x002fMJ = 847,
	eml21__UnitOfMeasure__kg_x002fmol = 848,
	eml21__UnitOfMeasure__kg_x002fs = 849,
	eml21__UnitOfMeasure__kg_x002fsack_x005b94lbm_x005d = 850,
	eml21__UnitOfMeasure__kg_x002ft = 851,
	eml21__UnitOfMeasure__kgauss = 852,
	eml21__UnitOfMeasure__kgf = 853,
	eml21__UnitOfMeasure__kgf_x002em = 854,
	eml21__UnitOfMeasure__kgf_x002em_x002fcm2 = 855,
	eml21__UnitOfMeasure__kgf_x002em_x002fm = 856,
	eml21__UnitOfMeasure__kgf_x002em2 = 857,
	eml21__UnitOfMeasure__kgf_x002es_x002fm2 = 858,
	eml21__UnitOfMeasure__kgf_x002fcm = 859,
	eml21__UnitOfMeasure__kgf_x002fcm2 = 860,
	eml21__UnitOfMeasure__kgf_x002fkgf = 861,
	eml21__UnitOfMeasure__kgf_x002fm2 = 862,
	eml21__UnitOfMeasure__kgf_x002fmm2 = 863,
	eml21__UnitOfMeasure__kGy = 864,
	eml21__UnitOfMeasure__kH = 865,
	eml21__UnitOfMeasure__kHz = 866,
	eml21__UnitOfMeasure__Kibyte = 867,
	eml21__UnitOfMeasure__kJ = 868,
	eml21__UnitOfMeasure__kJ_x002em_x002f_x0028h_x002em2_x002eK_x0029 = 869,
	eml21__UnitOfMeasure__kJ_x002f_x0028h_x002em2_x002eK_x0029 = 870,
	eml21__UnitOfMeasure__kJ_x002f_x0028kg_x002eK_x0029 = 871,
	eml21__UnitOfMeasure__kJ_x002f_x0028kmol_x002eK_x0029 = 872,
	eml21__UnitOfMeasure__kJ_x002fdm3 = 873,
	eml21__UnitOfMeasure__kJ_x002fkg = 874,
	eml21__UnitOfMeasure__kJ_x002fkmol = 875,
	eml21__UnitOfMeasure__kJ_x002fm3 = 876,
	eml21__UnitOfMeasure__klbf = 877,
	eml21__UnitOfMeasure__klbm = 878,
	eml21__UnitOfMeasure__klbm_x002fin = 879,
	eml21__UnitOfMeasure__klx = 880,
	eml21__UnitOfMeasure__km = 881,
	eml21__UnitOfMeasure__km_x002fcm = 882,
	eml21__UnitOfMeasure__km_x002fdm3 = 883,
	eml21__UnitOfMeasure__km_x002fh = 884,
	eml21__UnitOfMeasure__km_x002fL = 885,
	eml21__UnitOfMeasure__km_x002fs = 886,
	eml21__UnitOfMeasure__km2 = 887,
	eml21__UnitOfMeasure__km3 = 888,
	eml21__UnitOfMeasure__kmol = 889,
	eml21__UnitOfMeasure__kmol_x002fh = 890,
	eml21__UnitOfMeasure__kmol_x002fm3 = 891,
	eml21__UnitOfMeasure__kmol_x002fs = 892,
	eml21__UnitOfMeasure__kN = 893,
	eml21__UnitOfMeasure__kN_x002em = 894,
	eml21__UnitOfMeasure__kN_x002em2 = 895,
	eml21__UnitOfMeasure__kN_x002fm = 896,
	eml21__UnitOfMeasure__kN_x002fm2 = 897,
	eml21__UnitOfMeasure__knot = 898,
	eml21__UnitOfMeasure__kohm = 899,
	eml21__UnitOfMeasure__kohm_x002em = 900,
	eml21__UnitOfMeasure__kP = 901,
	eml21__UnitOfMeasure__kPa = 902,
	eml21__UnitOfMeasure__kPa_x002es_x002fm = 903,
	eml21__UnitOfMeasure__kPa_x002fh = 904,
	eml21__UnitOfMeasure__kPa_x002fhm = 905,
	eml21__UnitOfMeasure__kPa_x002fm = 906,
	eml21__UnitOfMeasure__kPa_x002fmin = 907,
	eml21__UnitOfMeasure__kPa2 = 908,
	eml21__UnitOfMeasure__kPa2_x002fcP = 909,
	eml21__UnitOfMeasure__kpsi = 910,
	eml21__UnitOfMeasure__kpsi2 = 911,
	eml21__UnitOfMeasure__krad = 912,
	eml21__UnitOfMeasure__krd = 913,
	eml21__UnitOfMeasure__kS = 914,
	eml21__UnitOfMeasure__kS_x002fm = 915,
	eml21__UnitOfMeasure__kT = 916,
	eml21__UnitOfMeasure__kV = 917,
	eml21__UnitOfMeasure__kW = 918,
	eml21__UnitOfMeasure__kW_x002eh = 919,
	eml21__UnitOfMeasure__kW_x002eh_x002f_x0028kg_x002edegC_x0029 = 920,
	eml21__UnitOfMeasure__kW_x002eh_x002fdm3 = 921,
	eml21__UnitOfMeasure__kW_x002eh_x002fkg = 922,
	eml21__UnitOfMeasure__kW_x002eh_x002fm3 = 923,
	eml21__UnitOfMeasure__kW_x002f_x0028m2_x002eK_x0029 = 924,
	eml21__UnitOfMeasure__kW_x002f_x0028m3_x002eK_x0029 = 925,
	eml21__UnitOfMeasure__kW_x002fcm2 = 926,
	eml21__UnitOfMeasure__kW_x002fm2 = 927,
	eml21__UnitOfMeasure__kW_x002fm3 = 928,
	eml21__UnitOfMeasure__kWb = 929,
	eml21__UnitOfMeasure__L_x002f_x0028bar_x002emin_x0029 = 930,
	eml21__UnitOfMeasure__L_x002fh = 931,
	eml21__UnitOfMeasure__L_x002fkg = 932,
	eml21__UnitOfMeasure__L_x002fkmol = 933,
	eml21__UnitOfMeasure__L_x002fm = 934,
	eml21__UnitOfMeasure__L_x002fm3 = 935,
	eml21__UnitOfMeasure__L_x002fmin = 936,
	eml21__UnitOfMeasure__L_x002fmol = 937,
	eml21__UnitOfMeasure__L_x002fs = 938,
	eml21__UnitOfMeasure__L_x002fs2 = 939,
	eml21__UnitOfMeasure__L_x002ft = 940,
	eml21__UnitOfMeasure__L_x002fton_x005bUK_x005d = 941,
	eml21__UnitOfMeasure__lbf = 942,
	eml21__UnitOfMeasure__lbf_x002eft = 943,
	eml21__UnitOfMeasure__lbf_x002eft_x002fbbl = 944,
	eml21__UnitOfMeasure__lbf_x002eft_x002fgal_x005bUS_x005d = 945,
	eml21__UnitOfMeasure__lbf_x002eft_x002fin = 946,
	eml21__UnitOfMeasure__lbf_x002eft_x002fin2 = 947,
	eml21__UnitOfMeasure__lbf_x002eft_x002flbm = 948,
	eml21__UnitOfMeasure__lbf_x002eft_x002fmin = 949,
	eml21__UnitOfMeasure__lbf_x002eft_x002fs = 950,
	eml21__UnitOfMeasure__lbf_x002ein = 951,
	eml21__UnitOfMeasure__lbf_x002ein_x002fin = 952,
	eml21__UnitOfMeasure__lbf_x002ein2 = 953,
	eml21__UnitOfMeasure__lbf_x002es_x002fft2 = 954,
	eml21__UnitOfMeasure__lbf_x002es_x002fin2 = 955,
	eml21__UnitOfMeasure__lbf_x002fft = 956,
	eml21__UnitOfMeasure__lbf_x002fft2 = 957,
	eml21__UnitOfMeasure__lbf_x002fft3 = 958,
	eml21__UnitOfMeasure__lbf_x002fgal_x005bUS_x005d = 959,
	eml21__UnitOfMeasure__lbf_x002fin = 960,
	eml21__UnitOfMeasure__lbf_x002flbf = 961,
	eml21__UnitOfMeasure__lbm = 962,
	eml21__UnitOfMeasure__lbm_x002eft = 963,
	eml21__UnitOfMeasure__lbm_x002eft_x002fs = 964,
	eml21__UnitOfMeasure__lbm_x002eft2 = 965,
	eml21__UnitOfMeasure__lbm_x002eft2_x002fs2 = 966,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft_x002eh_x0029 = 967,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft_x002es_x0029 = 968,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft2_x002eh_x0029 = 969,
	eml21__UnitOfMeasure__lbm_x002f_x0028ft2_x002es_x0029 = 970,
	eml21__UnitOfMeasure__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 971,
	eml21__UnitOfMeasure__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 972,
	eml21__UnitOfMeasure__lbm_x002f_x0028hp_x002eh_x0029 = 973,
	eml21__UnitOfMeasure__lbm_x002fbbl = 974,
	eml21__UnitOfMeasure__lbm_x002fd = 975,
	eml21__UnitOfMeasure__lbm_x002fft = 976,
	eml21__UnitOfMeasure__lbm_x002fft2 = 977,
	eml21__UnitOfMeasure__lbm_x002fft3 = 978,
	eml21__UnitOfMeasure__lbm_x002fft4 = 979,
	eml21__UnitOfMeasure__lbm_x002fgal_x005bUK_x005d = 980,
	eml21__UnitOfMeasure__lbm_x002fgal_x005bUS_x005d = 981,
	eml21__UnitOfMeasure__lbm_x002fh = 982,
	eml21__UnitOfMeasure__lbm_x002fin3 = 983,
	eml21__UnitOfMeasure__lbm_x002flbmol = 984,
	eml21__UnitOfMeasure__lbm_x002fmin = 985,
	eml21__UnitOfMeasure__lbm_x002fs = 986,
	eml21__UnitOfMeasure__lbmol = 987,
	eml21__UnitOfMeasure__lbmol_x002f_x0028h_x002eft2_x0029 = 988,
	eml21__UnitOfMeasure__lbmol_x002f_x0028s_x002eft2_x0029 = 989,
	eml21__UnitOfMeasure__lbmol_x002fft3 = 990,
	eml21__UnitOfMeasure__lbmol_x002fgal_x005bUK_x005d = 991,
	eml21__UnitOfMeasure__lbmol_x002fgal_x005bUS_x005d = 992,
	eml21__UnitOfMeasure__lbmol_x002fh = 993,
	eml21__UnitOfMeasure__lbmol_x002fs = 994,
	eml21__UnitOfMeasure__link = 995,
	eml21__UnitOfMeasure__link_x005bBnA_x005d = 996,
	eml21__UnitOfMeasure__link_x005bBnB_x005d = 997,
	eml21__UnitOfMeasure__link_x005bCla_x005d = 998,
	eml21__UnitOfMeasure__link_x005bSe_x005d = 999,
	eml21__UnitOfMeasure__link_x005bSeT_x005d = 1000,
	eml21__UnitOfMeasure__link_x005bUS_x005d = 1001,
	eml21__UnitOfMeasure__lm = 1002,
	eml21__UnitOfMeasure__lm_x002es = 1003,
	eml21__UnitOfMeasure__lm_x002fm2 = 1004,
	eml21__UnitOfMeasure__lm_x002fW = 1005,
	eml21__UnitOfMeasure__lx = 1006,
	eml21__UnitOfMeasure__lx_x002es = 1007,
	eml21__UnitOfMeasure__m_x002f_x0028m_x002eK_x0029 = 1008,
	eml21__UnitOfMeasure__m_x002fcm = 1009,
	eml21__UnitOfMeasure__m_x002fd = 1010,
	eml21__UnitOfMeasure__m_x002fh = 1011,
	eml21__UnitOfMeasure__m_x002fK = 1012,
	eml21__UnitOfMeasure__m_x002fkg = 1013,
	eml21__UnitOfMeasure__m_x002fkm = 1014,
	eml21__UnitOfMeasure__m_x002fkPa = 1015,
	eml21__UnitOfMeasure__m_x002fm = 1016,
	eml21__UnitOfMeasure__m_x002fm3 = 1017,
	eml21__UnitOfMeasure__m_x002fmin = 1018,
	eml21__UnitOfMeasure__m_x002fms = 1019,
	eml21__UnitOfMeasure__m_x002fPa = 1020,
	eml21__UnitOfMeasure__m_x002fs = 1021,
	eml21__UnitOfMeasure__m_x002fs2 = 1022,
	eml21__UnitOfMeasure__m_x005bGer_x005d = 1023,
	eml21__UnitOfMeasure__m2 = 1024,
	eml21__UnitOfMeasure__m2_x002f_x0028kPa_x002ed_x0029 = 1025,
	eml21__UnitOfMeasure__m2_x002f_x0028Pa_x002es_x0029 = 1026,
	eml21__UnitOfMeasure__m2_x002fcm3 = 1027,
	eml21__UnitOfMeasure__m2_x002fd = 1028,
	eml21__UnitOfMeasure__m2_x002fg = 1029,
	eml21__UnitOfMeasure__m2_x002fh = 1030,
	eml21__UnitOfMeasure__m2_x002fkg = 1031,
	eml21__UnitOfMeasure__m2_x002fm2 = 1032,
	eml21__UnitOfMeasure__m2_x002fm3 = 1033,
	eml21__UnitOfMeasure__m2_x002fmol = 1034,
	eml21__UnitOfMeasure__m2_x002fs = 1035,
	eml21__UnitOfMeasure__m3 = 1036,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002ed_x0029 = 1037,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002eh_x0029 = 1038,
	eml21__UnitOfMeasure__m3_x002f_x0028bar_x002emin_x0029 = 1039,
	eml21__UnitOfMeasure__m3_x002f_x0028d_x002em_x0029 = 1040,
	eml21__UnitOfMeasure__m3_x002f_x0028h_x002em_x0029 = 1041,
	eml21__UnitOfMeasure__m3_x002f_x0028ha_x002em_x0029 = 1042,
	eml21__UnitOfMeasure__m3_x002f_x0028kPa_x002ed_x0029 = 1043,
	eml21__UnitOfMeasure__m3_x002f_x0028kPa_x002eh_x0029 = 1044,
	eml21__UnitOfMeasure__m3_x002f_x0028kW_x002eh_x0029 = 1045,
	eml21__UnitOfMeasure__m3_x002f_x0028m3_x002eK_x0029 = 1046,
	eml21__UnitOfMeasure__m3_x002f_x0028Pa_x002es_x0029 = 1047,
	eml21__UnitOfMeasure__m3_x002f_x0028psi_x002ed_x0029 = 1048,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002eft_x0029 = 1049,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em_x0029 = 1050,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em2_x0029 = 1051,
	eml21__UnitOfMeasure__m3_x002f_x0028s_x002em3_x0029 = 1052,
	eml21__UnitOfMeasure__m3_x002fbbl = 1053,
	eml21__UnitOfMeasure__m3_x002fd = 1054,
	eml21__UnitOfMeasure__m3_x002fd2 = 1055,
	eml21__UnitOfMeasure__m3_x002fg = 1056,
	eml21__UnitOfMeasure__m3_x002fh = 1057,
	eml21__UnitOfMeasure__m3_x002fJ = 1058,
	eml21__UnitOfMeasure__m3_x002fkg = 1059,
	eml21__UnitOfMeasure__m3_x002fkm = 1060,
	eml21__UnitOfMeasure__m3_x002fkmol = 1061,
	eml21__UnitOfMeasure__m3_x002fkPa = 1062,
	eml21__UnitOfMeasure__m3_x002fm = 1063,
	eml21__UnitOfMeasure__m3_x002fm2 = 1064,
	eml21__UnitOfMeasure__m3_x002fm3 = 1065,
	eml21__UnitOfMeasure__m3_x002fmin = 1066,
	eml21__UnitOfMeasure__m3_x002fmol = 1067,
	eml21__UnitOfMeasure__m3_x002fPa = 1068,
	eml21__UnitOfMeasure__m3_x002frad = 1069,
	eml21__UnitOfMeasure__m3_x002frev = 1070,
	eml21__UnitOfMeasure__m3_x002fs = 1071,
	eml21__UnitOfMeasure__m3_x002fs2 = 1072,
	eml21__UnitOfMeasure__m3_x002ft = 1073,
	eml21__UnitOfMeasure__m3_x002fton_x005bUK_x005d = 1074,
	eml21__UnitOfMeasure__m3_x002fton_x005bUS_x005d = 1075,
	eml21__UnitOfMeasure__m4 = 1076,
	eml21__UnitOfMeasure__m4_x002fs = 1077,
	eml21__UnitOfMeasure__mA = 1078,
	eml21__UnitOfMeasure__MA = 1079,
	eml21__UnitOfMeasure__mA_x002fcm2 = 1080,
	eml21__UnitOfMeasure__mA_x002fft2 = 1081,
	eml21__UnitOfMeasure__Ma_x005bt_x005d = 1082,
	eml21__UnitOfMeasure__mbar = 1083,
	eml21__UnitOfMeasure__MBq = 1084,
	eml21__UnitOfMeasure__mC = 1085,
	eml21__UnitOfMeasure__MC = 1086,
	eml21__UnitOfMeasure__mC_x002fm2 = 1087,
	eml21__UnitOfMeasure__mcal_x005bth_x005d = 1088,
	eml21__UnitOfMeasure__Mcal_x005bth_x005d = 1089,
	eml21__UnitOfMeasure__mCi = 1090,
	eml21__UnitOfMeasure__mD = 1091,
	eml21__UnitOfMeasure__mD_x002eft = 1092,
	eml21__UnitOfMeasure__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 1093,
	eml21__UnitOfMeasure__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 1094,
	eml21__UnitOfMeasure__mD_x002em = 1095,
	eml21__UnitOfMeasure__mD_x002f_x0028Pa_x002es_x0029 = 1096,
	eml21__UnitOfMeasure__mD_x002fcP = 1097,
	eml21__UnitOfMeasure__MEuc = 1098,
	eml21__UnitOfMeasure__mEuc = 1099,
	eml21__UnitOfMeasure__meV = 1100,
	eml21__UnitOfMeasure__MeV = 1101,
	eml21__UnitOfMeasure__MF = 1102,
	eml21__UnitOfMeasure__mF = 1103,
	eml21__UnitOfMeasure__mg = 1104,
	eml21__UnitOfMeasure__Mg = 1105,
	eml21__UnitOfMeasure__Mg_x002fa = 1106,
	eml21__UnitOfMeasure__Mg_x002fd = 1107,
	eml21__UnitOfMeasure__mg_x002fdm3 = 1108,
	eml21__UnitOfMeasure__mg_x002fg = 1109,
	eml21__UnitOfMeasure__mg_x002fgal_x005bUS_x005d = 1110,
	eml21__UnitOfMeasure__Mg_x002fh = 1111,
	eml21__UnitOfMeasure__Mg_x002fin = 1112,
	eml21__UnitOfMeasure__mg_x002fJ = 1113,
	eml21__UnitOfMeasure__mg_x002fkg = 1114,
	eml21__UnitOfMeasure__mg_x002fL = 1115,
	eml21__UnitOfMeasure__Mg_x002fm2 = 1116,
	eml21__UnitOfMeasure__mg_x002fm3 = 1117,
	eml21__UnitOfMeasure__Mg_x002fm3 = 1118,
	eml21__UnitOfMeasure__Mg_x002fmin = 1119,
	eml21__UnitOfMeasure__mGal = 1120,
	eml21__UnitOfMeasure__mgauss = 1121,
	eml21__UnitOfMeasure__Mgauss = 1122,
	eml21__UnitOfMeasure__Mgf = 1123,
	eml21__UnitOfMeasure__mgn = 1124,
	eml21__UnitOfMeasure__MGy = 1125,
	eml21__UnitOfMeasure__mGy = 1126,
	eml21__UnitOfMeasure__mH = 1127,
	eml21__UnitOfMeasure__MH = 1128,
	eml21__UnitOfMeasure__mHz = 1129,
	eml21__UnitOfMeasure__MHz = 1130,
	eml21__UnitOfMeasure__mi = 1131,
	eml21__UnitOfMeasure__mi_x002fgal_x005bUK_x005d = 1132,
	eml21__UnitOfMeasure__mi_x002fgal_x005bUS_x005d = 1133,
	eml21__UnitOfMeasure__mi_x002fh = 1134,
	eml21__UnitOfMeasure__mi_x002fin = 1135,
	eml21__UnitOfMeasure__mi_x005bnaut_x005d = 1136,
	eml21__UnitOfMeasure__mi_x005bnautUK_x005d = 1137,
	eml21__UnitOfMeasure__mi_x005bUS_x005d = 1138,
	eml21__UnitOfMeasure__mi_x005bUS_x005d2 = 1139,
	eml21__UnitOfMeasure__mi2 = 1140,
	eml21__UnitOfMeasure__mi3 = 1141,
	eml21__UnitOfMeasure__Mibyte = 1142,
	eml21__UnitOfMeasure__mil = 1143,
	eml21__UnitOfMeasure__mil_x002fa = 1144,
	eml21__UnitOfMeasure__mila = 1145,
	eml21__UnitOfMeasure__min_ = 1146,
	eml21__UnitOfMeasure__min_x002fft = 1147,
	eml21__UnitOfMeasure__min_x002fm = 1148,
	eml21__UnitOfMeasure__mina = 1149,
	eml21__UnitOfMeasure__mJ = 1150,
	eml21__UnitOfMeasure__MJ = 1151,
	eml21__UnitOfMeasure__MJ_x002fa = 1152,
	eml21__UnitOfMeasure__mJ_x002fcm2 = 1153,
	eml21__UnitOfMeasure__MJ_x002fkg = 1154,
	eml21__UnitOfMeasure__MJ_x002fkmol = 1155,
	eml21__UnitOfMeasure__MJ_x002fm = 1156,
	eml21__UnitOfMeasure__mJ_x002fm2 = 1157,
	eml21__UnitOfMeasure__MJ_x002fm3 = 1158,
	eml21__UnitOfMeasure__mL = 1159,
	eml21__UnitOfMeasure__mL_x002fgal_x005bUK_x005d = 1160,
	eml21__UnitOfMeasure__mL_x002fgal_x005bUS_x005d = 1161,
	eml21__UnitOfMeasure__mL_x002fmL = 1162,
	eml21__UnitOfMeasure__mm = 1163,
	eml21__UnitOfMeasure__Mm = 1164,
	eml21__UnitOfMeasure__mm_x002f_x0028mm_x002eK_x0029 = 1165,
	eml21__UnitOfMeasure__mm_x002fa = 1166,
	eml21__UnitOfMeasure__mm_x002fs = 1167,
	eml21__UnitOfMeasure__mm2 = 1168,
	eml21__UnitOfMeasure__mm2_x002fmm2 = 1169,
	eml21__UnitOfMeasure__mm2_x002fs = 1170,
	eml21__UnitOfMeasure__mm3 = 1171,
	eml21__UnitOfMeasure__mm3_x002fJ = 1172,
	eml21__UnitOfMeasure__mmHg_x005b0degC_x005d = 1173,
	eml21__UnitOfMeasure__mmol = 1174,
	eml21__UnitOfMeasure__MN = 1175,
	eml21__UnitOfMeasure__mN = 1176,
	eml21__UnitOfMeasure__mN_x002em2 = 1177,
	eml21__UnitOfMeasure__mN_x002fkm = 1178,
	eml21__UnitOfMeasure__mN_x002fm = 1179,
	eml21__UnitOfMeasure__Mohm = 1180,
	eml21__UnitOfMeasure__mohm = 1181,
	eml21__UnitOfMeasure__mol = 1182,
	eml21__UnitOfMeasure__mol_x002em2_x002f_x0028mol_x002es_x0029 = 1183,
	eml21__UnitOfMeasure__mol_x002f_x0028s_x002em2_x0029 = 1184,
	eml21__UnitOfMeasure__mol_x002fm2 = 1185,
	eml21__UnitOfMeasure__mol_x002fm3 = 1186,
	eml21__UnitOfMeasure__mol_x002fmol = 1187,
	eml21__UnitOfMeasure__mol_x002fs = 1188,
	eml21__UnitOfMeasure__MP = 1189,
	eml21__UnitOfMeasure__mP = 1190,
	eml21__UnitOfMeasure__mPa = 1191,
	eml21__UnitOfMeasure__MPa = 1192,
	eml21__UnitOfMeasure__mPa_x002es = 1193,
	eml21__UnitOfMeasure__MPa_x002es_x002fm = 1194,
	eml21__UnitOfMeasure__MPa_x002fh = 1195,
	eml21__UnitOfMeasure__MPa_x002fm = 1196,
	eml21__UnitOfMeasure__Mpsi = 1197,
	eml21__UnitOfMeasure__Mrad = 1198,
	eml21__UnitOfMeasure__mrad = 1199,
	eml21__UnitOfMeasure__mrd = 1200,
	eml21__UnitOfMeasure__Mrd = 1201,
	eml21__UnitOfMeasure__mrem = 1202,
	eml21__UnitOfMeasure__mrem_x002fh = 1203,
	eml21__UnitOfMeasure__ms = 1204,
	eml21__UnitOfMeasure__MS = 1205,
	eml21__UnitOfMeasure__mS = 1206,
	eml21__UnitOfMeasure__mS_x002fcm = 1207,
	eml21__UnitOfMeasure__ms_x002fcm = 1208,
	eml21__UnitOfMeasure__ms_x002fft = 1209,
	eml21__UnitOfMeasure__ms_x002fin = 1210,
	eml21__UnitOfMeasure__mS_x002fm = 1211,
	eml21__UnitOfMeasure__ms_x002fm = 1212,
	eml21__UnitOfMeasure__ms_x002fs = 1213,
	eml21__UnitOfMeasure__mSv = 1214,
	eml21__UnitOfMeasure__mSv_x002fh = 1215,
	eml21__UnitOfMeasure__mT = 1216,
	eml21__UnitOfMeasure__mT_x002fdm = 1217,
	eml21__UnitOfMeasure__MV = 1218,
	eml21__UnitOfMeasure__mV = 1219,
	eml21__UnitOfMeasure__mV_x002fft = 1220,
	eml21__UnitOfMeasure__mV_x002fm = 1221,
	eml21__UnitOfMeasure__mW = 1222,
	eml21__UnitOfMeasure__MW = 1223,
	eml21__UnitOfMeasure__MW_x002eh = 1224,
	eml21__UnitOfMeasure__MW_x002eh_x002fkg = 1225,
	eml21__UnitOfMeasure__MW_x002eh_x002fm3 = 1226,
	eml21__UnitOfMeasure__mW_x002fm2 = 1227,
	eml21__UnitOfMeasure__MWb = 1228,
	eml21__UnitOfMeasure__mWb = 1229,
	eml21__UnitOfMeasure__N_x002em = 1230,
	eml21__UnitOfMeasure__N_x002em_x002fm = 1231,
	eml21__UnitOfMeasure__N_x002em2 = 1232,
	eml21__UnitOfMeasure__N_x002es_x002fm2 = 1233,
	eml21__UnitOfMeasure__N_x002fm = 1234,
	eml21__UnitOfMeasure__N_x002fm2 = 1235,
	eml21__UnitOfMeasure__N_x002fm3 = 1236,
	eml21__UnitOfMeasure__N_x002fmm2 = 1237,
	eml21__UnitOfMeasure__N_x002fN = 1238,
	eml21__UnitOfMeasure__na = 1239,
	eml21__UnitOfMeasure__nA = 1240,
	eml21__UnitOfMeasure__nAPI = 1241,
	eml21__UnitOfMeasure__nC = 1242,
	eml21__UnitOfMeasure__ncal_x005bth_x005d = 1243,
	eml21__UnitOfMeasure__nCi = 1244,
	eml21__UnitOfMeasure__nEuc = 1245,
	eml21__UnitOfMeasure__neV = 1246,
	eml21__UnitOfMeasure__nF = 1247,
	eml21__UnitOfMeasure__ng = 1248,
	eml21__UnitOfMeasure__ng_x002fg = 1249,
	eml21__UnitOfMeasure__ng_x002fmg = 1250,
	eml21__UnitOfMeasure__ngauss = 1251,
	eml21__UnitOfMeasure__nGy = 1252,
	eml21__UnitOfMeasure__nH = 1253,
	eml21__UnitOfMeasure__nHz = 1254,
	eml21__UnitOfMeasure__nJ = 1255,
	eml21__UnitOfMeasure__nm = 1256,
	eml21__UnitOfMeasure__nm_x002fs = 1257,
	eml21__UnitOfMeasure__nN = 1258,
	eml21__UnitOfMeasure__nohm = 1259,
	eml21__UnitOfMeasure__nohm_x002emil2_x002fft = 1260,
	eml21__UnitOfMeasure__nohm_x002emm2_x002fm = 1261,
	eml21__UnitOfMeasure__nP = 1262,
	eml21__UnitOfMeasure__nPa = 1263,
	eml21__UnitOfMeasure__nrd = 1264,
	eml21__UnitOfMeasure__ns = 1265,
	eml21__UnitOfMeasure__nS = 1266,
	eml21__UnitOfMeasure__ns_x002fft = 1267,
	eml21__UnitOfMeasure__ns_x002fm = 1268,
	eml21__UnitOfMeasure__nT = 1269,
	eml21__UnitOfMeasure__nV = 1270,
	eml21__UnitOfMeasure__nW = 1271,
	eml21__UnitOfMeasure__nWb = 1272,
	eml21__UnitOfMeasure__Oe = 1273,
	eml21__UnitOfMeasure__ohm = 1274,
	eml21__UnitOfMeasure__ohm_x002ecm = 1275,
	eml21__UnitOfMeasure__ohm_x002em = 1276,
	eml21__UnitOfMeasure__ohm_x002em2_x002fm = 1277,
	eml21__UnitOfMeasure__ohm_x002fm = 1278,
	eml21__UnitOfMeasure__ozf = 1279,
	eml21__UnitOfMeasure__ozm = 1280,
	eml21__UnitOfMeasure__ozm_x005btroy_x005d = 1281,
	eml21__UnitOfMeasure__Pa = 1282,
	eml21__UnitOfMeasure__pA = 1283,
	eml21__UnitOfMeasure__Pa_x002es = 1284,
	eml21__UnitOfMeasure__Pa_x002es_x002em3_x002fkg = 1285,
	eml21__UnitOfMeasure__Pa_x002es_x002fm3 = 1286,
	eml21__UnitOfMeasure__Pa_x002es2_x002fm3 = 1287,
	eml21__UnitOfMeasure__Pa_x002fh = 1288,
	eml21__UnitOfMeasure__Pa_x002fm = 1289,
	eml21__UnitOfMeasure__Pa_x002fm3 = 1290,
	eml21__UnitOfMeasure__Pa_x002fs = 1291,
	eml21__UnitOfMeasure__Pa2 = 1292,
	eml21__UnitOfMeasure__Pa2_x002f_x0028Pa_x002es_x0029 = 1293,
	eml21__UnitOfMeasure__pC = 1294,
	eml21__UnitOfMeasure__pcal_x005bth_x005d = 1295,
	eml21__UnitOfMeasure__pCi = 1296,
	eml21__UnitOfMeasure__pCi_x002fg = 1297,
	eml21__UnitOfMeasure__pdl = 1298,
	eml21__UnitOfMeasure__pdl_x002ecm2 = 1299,
	eml21__UnitOfMeasure__pdl_x002eft = 1300,
	eml21__UnitOfMeasure__pdl_x002fcm = 1301,
	eml21__UnitOfMeasure__pEuc = 1302,
	eml21__UnitOfMeasure__peV = 1303,
	eml21__UnitOfMeasure__pF = 1304,
	eml21__UnitOfMeasure__pg = 1305,
	eml21__UnitOfMeasure__pgauss = 1306,
	eml21__UnitOfMeasure__pGy = 1307,
	eml21__UnitOfMeasure__pHz = 1308,
	eml21__UnitOfMeasure__pJ = 1309,
	eml21__UnitOfMeasure__pm = 1310,
	eml21__UnitOfMeasure__pN = 1311,
	eml21__UnitOfMeasure__pohm = 1312,
	eml21__UnitOfMeasure__pP = 1313,
	eml21__UnitOfMeasure__pPa = 1314,
	eml21__UnitOfMeasure__ppk = 1315,
	eml21__UnitOfMeasure__ppm = 1316,
	eml21__UnitOfMeasure__ppm_x005bmass_x005d = 1317,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d = 1318,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegC = 1319,
	eml21__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegF = 1320,
	eml21__UnitOfMeasure__prd = 1321,
	eml21__UnitOfMeasure__pS = 1322,
	eml21__UnitOfMeasure__ps = 1323,
	eml21__UnitOfMeasure__psi = 1324,
	eml21__UnitOfMeasure__psi_x002ed_x002fbbl = 1325,
	eml21__UnitOfMeasure__psi_x002es = 1326,
	eml21__UnitOfMeasure__psi_x002fft = 1327,
	eml21__UnitOfMeasure__psi_x002fh = 1328,
	eml21__UnitOfMeasure__psi_x002fm = 1329,
	eml21__UnitOfMeasure__psi_x002fmin = 1330,
	eml21__UnitOfMeasure__psi2 = 1331,
	eml21__UnitOfMeasure__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1332,
	eml21__UnitOfMeasure__psi2_x002fcP = 1333,
	eml21__UnitOfMeasure__pT = 1334,
	eml21__UnitOfMeasure__pt_x005bUK_x005d = 1335,
	eml21__UnitOfMeasure__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 1336,
	eml21__UnitOfMeasure__pt_x005bUS_x005d = 1337,
	eml21__UnitOfMeasure__pV = 1338,
	eml21__UnitOfMeasure__pW = 1339,
	eml21__UnitOfMeasure__pWb = 1340,
	eml21__UnitOfMeasure__qt_x005bUK_x005d = 1341,
	eml21__UnitOfMeasure__qt_x005bUS_x005d = 1342,
	eml21__UnitOfMeasure__quad = 1343,
	eml21__UnitOfMeasure__quad_x002fa = 1344,
	eml21__UnitOfMeasure__rad = 1345,
	eml21__UnitOfMeasure__rad_x002fft = 1346,
	eml21__UnitOfMeasure__rad_x002fft3 = 1347,
	eml21__UnitOfMeasure__rad_x002fm = 1348,
	eml21__UnitOfMeasure__rad_x002fm3 = 1349,
	eml21__UnitOfMeasure__rad_x002fs = 1350,
	eml21__UnitOfMeasure__rad_x002fs2 = 1351,
	eml21__UnitOfMeasure__rd = 1352,
	eml21__UnitOfMeasure__rem = 1353,
	eml21__UnitOfMeasure__rem_x002fh = 1354,
	eml21__UnitOfMeasure__rev = 1355,
	eml21__UnitOfMeasure__rev_x002fft = 1356,
	eml21__UnitOfMeasure__rev_x002fm = 1357,
	eml21__UnitOfMeasure__rev_x002fs = 1358,
	eml21__UnitOfMeasure__rod_x005bUS_x005d = 1359,
	eml21__UnitOfMeasure__rpm = 1360,
	eml21__UnitOfMeasure__rpm_x002fs = 1361,
	eml21__UnitOfMeasure__s_x002fcm = 1362,
	eml21__UnitOfMeasure__s_x002fft = 1363,
	eml21__UnitOfMeasure__s_x002fft3 = 1364,
	eml21__UnitOfMeasure__s_x002fin = 1365,
	eml21__UnitOfMeasure__s_x002fkg = 1366,
	eml21__UnitOfMeasure__s_x002fL = 1367,
	eml21__UnitOfMeasure__s_x002fm = 1368,
	eml21__UnitOfMeasure__S_x002fm = 1369,
	eml21__UnitOfMeasure__s_x002fm3 = 1370,
	eml21__UnitOfMeasure__s_x002fqt_x005bUK_x005d = 1371,
	eml21__UnitOfMeasure__s_x002fqt_x005bUS_x005d = 1372,
	eml21__UnitOfMeasure__s_x002fs = 1373,
	eml21__UnitOfMeasure__sack_x005b94lbm_x005d = 1374,
	eml21__UnitOfMeasure__seca = 1375,
	eml21__UnitOfMeasure__section = 1376,
	eml21__UnitOfMeasure__sr = 1377,
	eml21__UnitOfMeasure__St = 1378,
	eml21__UnitOfMeasure__Sv = 1379,
	eml21__UnitOfMeasure__Sv_x002fh = 1380,
	eml21__UnitOfMeasure__Sv_x002fs = 1381,
	eml21__UnitOfMeasure__t_x002fa = 1382,
	eml21__UnitOfMeasure__t_x002fd = 1383,
	eml21__UnitOfMeasure__t_x002fh = 1384,
	eml21__UnitOfMeasure__T_x002fm = 1385,
	eml21__UnitOfMeasure__t_x002fm3 = 1386,
	eml21__UnitOfMeasure__t_x002fmin = 1387,
	eml21__UnitOfMeasure__TA = 1388,
	eml21__UnitOfMeasure__Ta_x005bt_x005d = 1389,
	eml21__UnitOfMeasure__TBq = 1390,
	eml21__UnitOfMeasure__TC = 1391,
	eml21__UnitOfMeasure__Tcal_x005bth_x005d = 1392,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d = 1393,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d_x002em = 1394,
	eml21__UnitOfMeasure__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 1395,
	eml21__UnitOfMeasure__TEuc = 1396,
	eml21__UnitOfMeasure__TeV = 1397,
	eml21__UnitOfMeasure__TF = 1398,
	eml21__UnitOfMeasure__Tg = 1399,
	eml21__UnitOfMeasure__Tgauss = 1400,
	eml21__UnitOfMeasure__TGy = 1401,
	eml21__UnitOfMeasure__TH = 1402,
	eml21__UnitOfMeasure__therm_x005bEC_x005d = 1403,
	eml21__UnitOfMeasure__therm_x005bUK_x005d = 1404,
	eml21__UnitOfMeasure__therm_x005bUS_x005d = 1405,
	eml21__UnitOfMeasure__THz = 1406,
	eml21__UnitOfMeasure__TJ = 1407,
	eml21__UnitOfMeasure__TJ_x002fa = 1408,
	eml21__UnitOfMeasure__Tm = 1409,
	eml21__UnitOfMeasure__TN = 1410,
	eml21__UnitOfMeasure__Tohm = 1411,
	eml21__UnitOfMeasure__ton_x005bUK_x005d = 1412,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fa = 1413,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fd = 1414,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fh = 1415,
	eml21__UnitOfMeasure__ton_x005bUK_x005d_x002fmin = 1416,
	eml21__UnitOfMeasure__ton_x005bUS_x005d = 1417,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fa = 1418,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fd = 1419,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fft2 = 1420,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fh = 1421,
	eml21__UnitOfMeasure__ton_x005bUS_x005d_x002fmin = 1422,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d = 1423,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002eft2 = 1424,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002fft = 1425,
	eml21__UnitOfMeasure__tonf_x005bUK_x005d_x002fft2 = 1426,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d = 1427,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002eft = 1428,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002eft2 = 1429,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi = 1430,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fbbl = 1431,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fft = 1432,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fft = 1433,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fft2 = 1434,
	eml21__UnitOfMeasure__tonf_x005bUS_x005d_x002fin2 = 1435,
	eml21__UnitOfMeasure__tonRefrig = 1436,
	eml21__UnitOfMeasure__torr = 1437,
	eml21__UnitOfMeasure__TP = 1438,
	eml21__UnitOfMeasure__TPa = 1439,
	eml21__UnitOfMeasure__Trd = 1440,
	eml21__UnitOfMeasure__TS = 1441,
	eml21__UnitOfMeasure__TT = 1442,
	eml21__UnitOfMeasure__TV = 1443,
	eml21__UnitOfMeasure__TW = 1444,
	eml21__UnitOfMeasure__TW_x002eh = 1445,
	eml21__UnitOfMeasure__TWb = 1446,
	eml21__UnitOfMeasure__uA = 1447,
	eml21__UnitOfMeasure__uA_x002fcm2 = 1448,
	eml21__UnitOfMeasure__uA_x002fin2 = 1449,
	eml21__UnitOfMeasure__ubar = 1450,
	eml21__UnitOfMeasure__uC = 1451,
	eml21__UnitOfMeasure__ucal_x005bth_x005d = 1452,
	eml21__UnitOfMeasure__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 1453,
	eml21__UnitOfMeasure__ucal_x005bth_x005d_x002fs = 1454,
	eml21__UnitOfMeasure__uCi = 1455,
	eml21__UnitOfMeasure__uEuc = 1456,
	eml21__UnitOfMeasure__ueV = 1457,
	eml21__UnitOfMeasure__uF = 1458,
	eml21__UnitOfMeasure__uF_x002fm = 1459,
	eml21__UnitOfMeasure__ug = 1460,
	eml21__UnitOfMeasure__ug_x002fcm3 = 1461,
	eml21__UnitOfMeasure__ug_x002fg = 1462,
	eml21__UnitOfMeasure__ug_x002fmg = 1463,
	eml21__UnitOfMeasure__ugauss = 1464,
	eml21__UnitOfMeasure__uGy = 1465,
	eml21__UnitOfMeasure__uH = 1466,
	eml21__UnitOfMeasure__uH_x002fm = 1467,
	eml21__UnitOfMeasure__uHz = 1468,
	eml21__UnitOfMeasure__uJ = 1469,
	eml21__UnitOfMeasure__um = 1470,
	eml21__UnitOfMeasure__um_x002fs = 1471,
	eml21__UnitOfMeasure__um2 = 1472,
	eml21__UnitOfMeasure__um2_x002em = 1473,
	eml21__UnitOfMeasure__umHg_x005b0degC_x005d = 1474,
	eml21__UnitOfMeasure__umol = 1475,
	eml21__UnitOfMeasure__uN = 1476,
	eml21__UnitOfMeasure__uohm = 1477,
	eml21__UnitOfMeasure__uohm_x002fft = 1478,
	eml21__UnitOfMeasure__uohm_x002fm = 1479,
	eml21__UnitOfMeasure__uP = 1480,
	eml21__UnitOfMeasure__uPa = 1481,
	eml21__UnitOfMeasure__upsi = 1482,
	eml21__UnitOfMeasure__urad = 1483,
	eml21__UnitOfMeasure__urd = 1484,
	eml21__UnitOfMeasure__us = 1485,
	eml21__UnitOfMeasure__uS = 1486,
	eml21__UnitOfMeasure__us_x002fft = 1487,
	eml21__UnitOfMeasure__us_x002fin = 1488,
	eml21__UnitOfMeasure__us_x002fm = 1489,
	eml21__UnitOfMeasure__uT = 1490,
	eml21__UnitOfMeasure__uV = 1491,
	eml21__UnitOfMeasure__uV_x002fft = 1492,
	eml21__UnitOfMeasure__uV_x002fm = 1493,
	eml21__UnitOfMeasure__uW = 1494,
	eml21__UnitOfMeasure__uW_x002fm3 = 1495,
	eml21__UnitOfMeasure__uWb = 1496,
	eml21__UnitOfMeasure__V_x002fB = 1497,
	eml21__UnitOfMeasure__V_x002fdB = 1498,
	eml21__UnitOfMeasure__V_x002fm = 1499,
	eml21__UnitOfMeasure__W_x002em2_x002eK_x002f_x0028J_x002eK_x0029 = 1500,
	eml21__UnitOfMeasure__W_x002f_x0028m_x002eK_x0029 = 1501,
	eml21__UnitOfMeasure__W_x002f_x0028m2_x002eK_x0029 = 1502,
	eml21__UnitOfMeasure__W_x002f_x0028m2_x002esr_x0029 = 1503,
	eml21__UnitOfMeasure__W_x002f_x0028m3_x002eK_x0029 = 1504,
	eml21__UnitOfMeasure__W_x002fcm2 = 1505,
	eml21__UnitOfMeasure__W_x002fK = 1506,
	eml21__UnitOfMeasure__W_x002fkW = 1507,
	eml21__UnitOfMeasure__W_x002fm2 = 1508,
	eml21__UnitOfMeasure__W_x002fm3 = 1509,
	eml21__UnitOfMeasure__W_x002fmm2 = 1510,
	eml21__UnitOfMeasure__W_x002fsr = 1511,
	eml21__UnitOfMeasure__W_x002fW = 1512,
	eml21__UnitOfMeasure__Wb = 1513,
	eml21__UnitOfMeasure__Wb_x002em = 1514,
	eml21__UnitOfMeasure__Wb_x002fm = 1515,
	eml21__UnitOfMeasure__Wb_x002fmm = 1516,
	eml21__UnitOfMeasure__wk = 1517,
	eml21__UnitOfMeasure__yd = 1518,
	eml21__UnitOfMeasure__yd_x005bBnA_x005d = 1519,
	eml21__UnitOfMeasure__yd_x005bBnB_x005d = 1520,
	eml21__UnitOfMeasure__yd_x005bCla_x005d = 1521,
	eml21__UnitOfMeasure__yd_x005bInd_x005d = 1522,
	eml21__UnitOfMeasure__yd_x005bInd37_x005d = 1523,
	eml21__UnitOfMeasure__yd_x005bInd62_x005d = 1524,
	eml21__UnitOfMeasure__yd_x005bInd75_x005d = 1525,
	eml21__UnitOfMeasure__yd_x005bSe_x005d = 1526,
	eml21__UnitOfMeasure__yd_x005bSeT_x005d = 1527,
	eml21__UnitOfMeasure__yd_x005bUS_x005d = 1528,
	eml21__UnitOfMeasure__yd2 = 1529,
	eml21__UnitOfMeasure__yd3 = 1530
};
#endif

/* eml2_1ForGsoap.h:3601 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom (-825)

/* eml21:AbsorbedDoseUom */
enum eml21__AbsorbedDoseUom {
	eml21__AbsorbedDoseUom__cGy = 0,
	eml21__AbsorbedDoseUom__crd = 1,
	eml21__AbsorbedDoseUom__dGy = 2,
	eml21__AbsorbedDoseUom__drd = 3,
	eml21__AbsorbedDoseUom__EGy = 4,
	eml21__AbsorbedDoseUom__Erd = 5,
	eml21__AbsorbedDoseUom__fGy = 6,
	eml21__AbsorbedDoseUom__frd = 7,
	eml21__AbsorbedDoseUom__GGy = 8,
	eml21__AbsorbedDoseUom__Grd = 9,
	eml21__AbsorbedDoseUom__Gy = 10,
	eml21__AbsorbedDoseUom__kGy = 11,
	eml21__AbsorbedDoseUom__krd = 12,
	eml21__AbsorbedDoseUom__mGy = 13,
	eml21__AbsorbedDoseUom__MGy = 14,
	eml21__AbsorbedDoseUom__Mrd = 15,
	eml21__AbsorbedDoseUom__mrd = 16,
	eml21__AbsorbedDoseUom__nGy = 17,
	eml21__AbsorbedDoseUom__nrd = 18,
	eml21__AbsorbedDoseUom__pGy = 19,
	eml21__AbsorbedDoseUom__prd = 20,
	eml21__AbsorbedDoseUom__rd = 21,
	eml21__AbsorbedDoseUom__TGy = 22,
	eml21__AbsorbedDoseUom__Trd = 23,
	eml21__AbsorbedDoseUom__uGy = 24,
	eml21__AbsorbedDoseUom__urd = 25
};
#endif

/* eml2_1ForGsoap.h:3738 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom (-826)

/* eml21:ActivityOfRadioactivityUom */
enum eml21__ActivityOfRadioactivityUom {
	eml21__ActivityOfRadioactivityUom__Bq = 0,
	eml21__ActivityOfRadioactivityUom__Ci = 1,
	eml21__ActivityOfRadioactivityUom__GBq = 2,
	eml21__ActivityOfRadioactivityUom__MBq = 3,
	eml21__ActivityOfRadioactivityUom__mCi = 4,
	eml21__ActivityOfRadioactivityUom__nCi = 5,
	eml21__ActivityOfRadioactivityUom__pCi = 6,
	eml21__ActivityOfRadioactivityUom__TBq = 7,
	eml21__ActivityOfRadioactivityUom__uCi = 8
};
#endif

/* eml2_1ForGsoap.h:3790 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom (-827)

/* eml21:AmountOfSubstancePerAmountOfSubstanceUom */
enum eml21__AmountOfSubstancePerAmountOfSubstanceUom {
	eml21__AmountOfSubstancePerAmountOfSubstanceUom___x0025 = 0,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom___x0025_x005bmolar_x005d = 1,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__Euc = 2,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__mol_x002fmol = 3,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__nEuc = 4,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__ppk = 5,
	eml21__AmountOfSubstancePerAmountOfSubstanceUom__ppm = 6
};
#endif

/* eml2_1ForGsoap.h:3832 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom (-828)

/* eml21:AmountOfSubstancePerAreaUom */
enum eml21__AmountOfSubstancePerAreaUom {
	eml21__AmountOfSubstancePerAreaUom__mol_x002fm2 = 0
};
#endif

/* eml2_1ForGsoap.h:3844 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom (-829)

/* eml21:AmountOfSubstancePerTimePerAreaUom */
enum eml21__AmountOfSubstancePerTimePerAreaUom {
	eml21__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028h_x002eft2_x0029 = 0,
	eml21__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__AmountOfSubstancePerTimePerAreaUom__mol_x002f_x0028s_x002em2_x0029 = 2
};
#endif

/* eml2_1ForGsoap.h:3866 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom (-830)

/* eml21:AmountOfSubstancePerTimeUom */
enum eml21__AmountOfSubstancePerTimeUom {
	eml21__AmountOfSubstancePerTimeUom__kat = 0,
	eml21__AmountOfSubstancePerTimeUom__kmol_x002fh = 1,
	eml21__AmountOfSubstancePerTimeUom__kmol_x002fs = 2,
	eml21__AmountOfSubstancePerTimeUom__lbmol_x002fh = 3,
	eml21__AmountOfSubstancePerTimeUom__lbmol_x002fs = 4,
	eml21__AmountOfSubstancePerTimeUom__mol_x002fs = 5
};
#endif

/* eml2_1ForGsoap.h:3903 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom (-831)

/* eml21:AmountOfSubstancePerVolumeUom */
enum eml21__AmountOfSubstancePerVolumeUom {
	eml21__AmountOfSubstancePerVolumeUom__kmol_x002fm3 = 0,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fft3 = 1,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUK_x005d = 2,
	eml21__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUS_x005d = 3,
	eml21__AmountOfSubstancePerVolumeUom__mol_x002fm3 = 4
};
#endif

/* eml2_1ForGsoap.h:3935 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom (-832)

/* eml21:AmountOfSubstanceUom */
enum eml21__AmountOfSubstanceUom {
	eml21__AmountOfSubstanceUom__kmol = 0,
	eml21__AmountOfSubstanceUom__lbmol = 1,
	eml21__AmountOfSubstanceUom__mmol = 2,
	eml21__AmountOfSubstanceUom__mol = 3,
	eml21__AmountOfSubstanceUom__umol = 4
};
#endif

/* eml2_1ForGsoap.h:3967 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom (-833)

/* eml21:AnglePerLengthUom */
enum eml21__AnglePerLengthUom {
	eml21__AnglePerLengthUom__0_x002e01_x0020dega_x002fft = 0,
	eml21__AnglePerLengthUom__1_x002f30_x0020dega_x002fft = 1,
	eml21__AnglePerLengthUom__1_x002f30_x0020dega_x002fm = 2,
	eml21__AnglePerLengthUom__dega_x002fft = 3,
	eml21__AnglePerLengthUom__dega_x002fm = 4,
	eml21__AnglePerLengthUom__rad_x002fft = 5,
	eml21__AnglePerLengthUom__rad_x002fm = 6,
	eml21__AnglePerLengthUom__rev_x002fft = 7,
	eml21__AnglePerLengthUom__rev_x002fm = 8
};
#endif

/* eml2_1ForGsoap.h:4019 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom (-834)

/* eml21:AnglePerVolumeUom */
enum eml21__AnglePerVolumeUom {
	eml21__AnglePerVolumeUom__rad_x002fft3 = 0,
	eml21__AnglePerVolumeUom__rad_x002fm3 = 1
};
#endif

/* eml2_1ForGsoap.h:4036 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom (-835)

/* eml21:AngularAccelerationUom */
enum eml21__AngularAccelerationUom {
	eml21__AngularAccelerationUom__rad_x002fs2 = 0,
	eml21__AngularAccelerationUom__rpm_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:4053 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom (-836)

/* eml21:AngularVelocityUom */
enum eml21__AngularVelocityUom {
	eml21__AngularVelocityUom__dega_x002fh = 0,
	eml21__AngularVelocityUom__dega_x002fmin = 1,
	eml21__AngularVelocityUom__dega_x002fs = 2,
	eml21__AngularVelocityUom__rad_x002fs = 3,
	eml21__AngularVelocityUom__rev_x002fs = 4,
	eml21__AngularVelocityUom__rpm = 5
};
#endif

/* eml2_1ForGsoap.h:4090 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom (-837)

/* eml21:APIGammaRayUom */
enum eml21__APIGammaRayUom {
	eml21__APIGammaRayUom__gAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4102 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom (-838)

/* eml21:APIGravityUom */
enum eml21__APIGravityUom {
	eml21__APIGravityUom__dAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4114 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom (-839)

/* eml21:APINeutronUom */
enum eml21__APINeutronUom {
	eml21__APINeutronUom__nAPI = 0
};
#endif

/* eml2_1ForGsoap.h:4126 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom (-840)

/* eml21:AreaPerAmountOfSubstanceUom */
enum eml21__AreaPerAmountOfSubstanceUom {
	eml21__AreaPerAmountOfSubstanceUom__m2_x002fmol = 0
};
#endif

/* eml2_1ForGsoap.h:4138 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom (-841)

/* eml21:AreaPerAreaUom */
enum eml21__AreaPerAreaUom {
	eml21__AreaPerAreaUom___x0025 = 0,
	eml21__AreaPerAreaUom___x0025_x005barea_x005d = 1,
	eml21__AreaPerAreaUom__cEuc = 2,
	eml21__AreaPerAreaUom__Euc = 3,
	eml21__AreaPerAreaUom__in2_x002fft2 = 4,
	eml21__AreaPerAreaUom__in2_x002fin2 = 5,
	eml21__AreaPerAreaUom__m2_x002fm2 = 6,
	eml21__AreaPerAreaUom__mm2_x002fmm2 = 7
};
#endif

/* eml2_1ForGsoap.h:4185 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom (-842)

/* eml21:AreaPerCountUom */
enum eml21__AreaPerCountUom {
	eml21__AreaPerCountUom__b_x002felectron = 0
};
#endif

/* eml2_1ForGsoap.h:4193 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom (-843)

/* eml21:AreaPerMassUom */
enum eml21__AreaPerMassUom {
	eml21__AreaPerMassUom__cm2_x002fg = 0,
	eml21__AreaPerMassUom__ft2_x002flbm = 1,
	eml21__AreaPerMassUom__m2_x002fg = 2,
	eml21__AreaPerMassUom__m2_x002fkg = 3
};
#endif

/* eml2_1ForGsoap.h:4220 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom (-844)

/* eml21:AreaPerTimeUom */
enum eml21__AreaPerTimeUom {
	eml21__AreaPerTimeUom__cm2_x002fs = 0,
	eml21__AreaPerTimeUom__ft2_x002fh = 1,
	eml21__AreaPerTimeUom__ft2_x002fs = 2,
	eml21__AreaPerTimeUom__in2_x002fs = 3,
	eml21__AreaPerTimeUom__m2_x002fd = 4,
	eml21__AreaPerTimeUom__m2_x002fh = 5,
	eml21__AreaPerTimeUom__m2_x002fs = 6,
	eml21__AreaPerTimeUom__mm2_x002fs = 7
};
#endif

/* eml2_1ForGsoap.h:4267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom (-845)

/* eml21:AreaPerVolumeUom */
enum eml21__AreaPerVolumeUom {
	eml21__AreaPerVolumeUom__1_x002fm = 0,
	eml21__AreaPerVolumeUom__b_x002fcm3 = 1,
	eml21__AreaPerVolumeUom__cu = 2,
	eml21__AreaPerVolumeUom__ft2_x002fin3 = 3,
	eml21__AreaPerVolumeUom__m2_x002fcm3 = 4,
	eml21__AreaPerVolumeUom__m2_x002fm3 = 5
};
#endif

/* eml2_1ForGsoap.h:4304 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom (-846)

/* eml21:AreaUom */
enum eml21__AreaUom {
	eml21__AreaUom__b = 'b',
	eml21__AreaUom__acre = 'c',
	eml21__AreaUom__cm2 = 'd',
	eml21__AreaUom__ft2 = 'e',
	eml21__AreaUom__ha = 'f',
	eml21__AreaUom__in2 = 'g',
	eml21__AreaUom__km2 = 'h',
	eml21__AreaUom__m2 = 'i',
	eml21__AreaUom__mi_x005bUS_x005d2 = 'j',
	eml21__AreaUom__mi2 = 'k',
	eml21__AreaUom__mm2 = 'l',
	eml21__AreaUom__section = 'm',
	eml21__AreaUom__um2 = 'n',
	eml21__AreaUom__yd2 = 'o'
};
#endif

/* eml2_1ForGsoap.h:4381 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom (-847)

/* eml21:AttenuationPerFrequencyIntervalUom */
enum eml21__AttenuationPerFrequencyIntervalUom {
	eml21__AttenuationPerFrequencyIntervalUom__B_x002fO = 0,
	eml21__AttenuationPerFrequencyIntervalUom__dB_x002fO = 1
};
#endif

/* eml2_1ForGsoap.h:4398 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom (-848)

/* eml21:CapacitanceUom */
enum eml21__CapacitanceUom {
	eml21__CapacitanceUom__F = 'F',
	eml21__CapacitanceUom__cF = 'G',
	eml21__CapacitanceUom__dF = 'H',
	eml21__CapacitanceUom__EF = 'I',
	eml21__CapacitanceUom__fF = 'J',
	eml21__CapacitanceUom__GF = 'K',
	eml21__CapacitanceUom__kF = 'L',
	eml21__CapacitanceUom__mF = 'M',
	eml21__CapacitanceUom__MF = 'N',
	eml21__CapacitanceUom__nF = 'O',
	eml21__CapacitanceUom__pF = 'P',
	eml21__CapacitanceUom__TF = 'Q',
	eml21__CapacitanceUom__uF = 'R'
};
#endif

/* eml2_1ForGsoap.h:4470 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom (-849)

/* eml21:CationExchangeCapacityUom */
enum eml21__CationExchangeCapacityUom {
	eml21__CationExchangeCapacityUom___x002e01_x0020meq_x002fg = 0
};
#endif

/* eml2_1ForGsoap.h:4478 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom (-850)

/* eml21:DataTransferSpeedUom */
enum eml21__DataTransferSpeedUom {
	eml21__DataTransferSpeedUom__bit_x002fs = 0,
	eml21__DataTransferSpeedUom__byte_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:4495 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom (-851)

/* eml21:DiffusionCoefficientUom */
enum eml21__DiffusionCoefficientUom {
	eml21__DiffusionCoefficientUom__m2_x002fs = 0
};
#endif

/* eml2_1ForGsoap.h:4507 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom (-852)

/* eml21:DiffusiveTimeOfFlightUom */
enum eml21__DiffusiveTimeOfFlightUom {
	eml21__DiffusiveTimeOfFlightUom__h_x00280_x002e5_x0029 = 0,
	eml21__DiffusiveTimeOfFlightUom__s_x00280_x002e5_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:4520 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom (-853)

/* eml21:DigitalStorageUom */
enum eml21__DigitalStorageUom {
	eml21__DigitalStorageUom__bit = 0,
	eml21__DigitalStorageUom__byte = 1,
	eml21__DigitalStorageUom__Kibyte = 2,
	eml21__DigitalStorageUom__Mibyte = 3
};
#endif

/* eml2_1ForGsoap.h:4547 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom (-854)

/* eml21:DimensionlessUom */
enum eml21__DimensionlessUom {
	eml21__DimensionlessUom___x0025 = 0,
	eml21__DimensionlessUom__cEuc = 1,
	eml21__DimensionlessUom__dEuc = 2,
	eml21__DimensionlessUom__EEuc = 3,
	eml21__DimensionlessUom__Euc = 4,
	eml21__DimensionlessUom__fEuc = 5,
	eml21__DimensionlessUom__GEuc = 6,
	eml21__DimensionlessUom__kEuc = 7,
	eml21__DimensionlessUom__MEuc = 8,
	eml21__DimensionlessUom__mEuc = 9,
	eml21__DimensionlessUom__nEuc = 10,
	eml21__DimensionlessUom__pEuc = 11,
	eml21__DimensionlessUom__ppk = 12,
	eml21__DimensionlessUom__ppm = 13,
	eml21__DimensionlessUom__TEuc = 14,
	eml21__DimensionlessUom__uEuc = 15
};
#endif

/* eml2_1ForGsoap.h:4634 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom (-855)

/* eml21:DipoleMomentUom */
enum eml21__DipoleMomentUom {
	eml21__DipoleMomentUom__C_x002em = 0
};
#endif

/* eml2_1ForGsoap.h:4646 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom (-856)

/* eml21:DoseEquivalentUom */
enum eml21__DoseEquivalentUom {
	eml21__DoseEquivalentUom__mrem = 0,
	eml21__DoseEquivalentUom__mSv = 1,
	eml21__DoseEquivalentUom__rem = 2,
	eml21__DoseEquivalentUom__Sv = 3
};
#endif

/* eml2_1ForGsoap.h:4673 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom (-857)

/* eml21:DynamicViscosityUom */
enum eml21__DynamicViscosityUom {
	eml21__DynamicViscosityUom__P = 'P',
	eml21__DynamicViscosityUom__cP = 'Q',
	eml21__DynamicViscosityUom__dP = 'R',
	eml21__DynamicViscosityUom__dyne_x002es_x002fcm2 = 'S',
	eml21__DynamicViscosityUom__EP = 'T',
	eml21__DynamicViscosityUom__fP = 'U',
	eml21__DynamicViscosityUom__GP = 'V',
	eml21__DynamicViscosityUom__kgf_x002es_x002fm2 = 'W',
	eml21__DynamicViscosityUom__kP = 'X',
	eml21__DynamicViscosityUom__lbf_x002es_x002fft2 = 'Y',
	eml21__DynamicViscosityUom__lbf_x002es_x002fin2 = 'Z',
	eml21__DynamicViscosityUom__mP = 91,
	eml21__DynamicViscosityUom__MP = 92,
	eml21__DynamicViscosityUom__mPa_x002es = 93,
	eml21__DynamicViscosityUom__N_x002es_x002fm2 = 94,
	eml21__DynamicViscosityUom__nP = 95,
	eml21__DynamicViscosityUom__Pa_x002es = 96,
	eml21__DynamicViscosityUom__pP = 'a',
	eml21__DynamicViscosityUom__psi_x002es = 'b',
	eml21__DynamicViscosityUom__TP = 'c',
	eml21__DynamicViscosityUom__uP = 'd'
};
#endif

/* eml2_1ForGsoap.h:4785 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom (-858)

/* eml21:ElectricalResistivityUom */
enum eml21__ElectricalResistivityUom {
	eml21__ElectricalResistivityUom__kohm_x002em = 0,
	eml21__ElectricalResistivityUom__nohm_x002emil2_x002fft = 1,
	eml21__ElectricalResistivityUom__nohm_x002emm2_x002fm = 2,
	eml21__ElectricalResistivityUom__ohm_x002ecm = 3,
	eml21__ElectricalResistivityUom__ohm_x002em = 4,
	eml21__ElectricalResistivityUom__ohm_x002em2_x002fm = 5
};
#endif

/* eml2_1ForGsoap.h:4822 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom (-859)

/* eml21:ElectricChargePerAreaUom */
enum eml21__ElectricChargePerAreaUom {
	eml21__ElectricChargePerAreaUom__C_x002fcm2 = 0,
	eml21__ElectricChargePerAreaUom__C_x002fm2 = 1,
	eml21__ElectricChargePerAreaUom__C_x002fmm2 = 2,
	eml21__ElectricChargePerAreaUom__mC_x002fm2 = 3
};
#endif

/* eml2_1ForGsoap.h:4849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom (-860)

/* eml21:ElectricChargePerMassUom */
enum eml21__ElectricChargePerMassUom {
	eml21__ElectricChargePerMassUom__A_x002es_x002fkg = 0,
	eml21__ElectricChargePerMassUom__C_x002fg = 1,
	eml21__ElectricChargePerMassUom__C_x002fkg = 2
};
#endif

/* eml2_1ForGsoap.h:4871 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom (-861)

/* eml21:ElectricChargePerVolumeUom */
enum eml21__ElectricChargePerVolumeUom {
	eml21__ElectricChargePerVolumeUom__A_x002es_x002fm3 = 0,
	eml21__ElectricChargePerVolumeUom__C_x002fcm3 = 1,
	eml21__ElectricChargePerVolumeUom__C_x002fm3 = 2,
	eml21__ElectricChargePerVolumeUom__C_x002fmm3 = 3
};
#endif

/* eml2_1ForGsoap.h:4898 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom (-862)

/* eml21:ElectricChargeUom */
enum eml21__ElectricChargeUom {
	eml21__ElectricChargeUom__C = 'C',
	eml21__ElectricChargeUom__A_x002eh = 'D',
	eml21__ElectricChargeUom__A_x002es = 'E',
	eml21__ElectricChargeUom__cC = 'F',
	eml21__ElectricChargeUom__dC = 'G',
	eml21__ElectricChargeUom__EC = 'H',
	eml21__ElectricChargeUom__fC = 'I',
	eml21__ElectricChargeUom__GC = 'J',
	eml21__ElectricChargeUom__kC = 'K',
	eml21__ElectricChargeUom__MC = 'L',
	eml21__ElectricChargeUom__mC = 'M',
	eml21__ElectricChargeUom__nC = 'N',
	eml21__ElectricChargeUom__pC = 'O',
	eml21__ElectricChargeUom__TC = 'P',
	eml21__ElectricChargeUom__uC = 'Q'
};
#endif

/* eml2_1ForGsoap.h:4980 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom (-863)

/* eml21:ElectricConductanceUom */
enum eml21__ElectricConductanceUom {
	eml21__ElectricConductanceUom__S = 'S',
	eml21__ElectricConductanceUom__cS = 'T',
	eml21__ElectricConductanceUom__dS = 'U',
	eml21__ElectricConductanceUom__ES = 'V',
	eml21__ElectricConductanceUom__fS = 'W',
	eml21__ElectricConductanceUom__GS = 'X',
	eml21__ElectricConductanceUom__kS = 'Y',
	eml21__ElectricConductanceUom__mS = 'Z',
	eml21__ElectricConductanceUom__MS = 91,
	eml21__ElectricConductanceUom__nS = 92,
	eml21__ElectricConductanceUom__pS = 93,
	eml21__ElectricConductanceUom__TS = 94,
	eml21__ElectricConductanceUom__uS = 95
};
#endif

/* eml2_1ForGsoap.h:5052 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom (-864)

/* eml21:ElectricConductivityUom */
enum eml21__ElectricConductivityUom {
	eml21__ElectricConductivityUom__kS_x002fm = 0,
	eml21__ElectricConductivityUom__mS_x002fcm = 1,
	eml21__ElectricConductivityUom__mS_x002fm = 2,
	eml21__ElectricConductivityUom__S_x002fm = 3
};
#endif

/* eml2_1ForGsoap.h:5079 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom (-865)

/* eml21:ElectricCurrentDensityUom */
enum eml21__ElectricCurrentDensityUom {
	eml21__ElectricCurrentDensityUom__A_x002fcm2 = 0,
	eml21__ElectricCurrentDensityUom__A_x002fft2 = 1,
	eml21__ElectricCurrentDensityUom__A_x002fm2 = 2,
	eml21__ElectricCurrentDensityUom__A_x002fmm2 = 3,
	eml21__ElectricCurrentDensityUom__mA_x002fcm2 = 4,
	eml21__ElectricCurrentDensityUom__mA_x002fft2 = 5,
	eml21__ElectricCurrentDensityUom__uA_x002fcm2 = 6,
	eml21__ElectricCurrentDensityUom__uA_x002fin2 = 7
};
#endif

/* eml2_1ForGsoap.h:5126 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom (-866)

/* eml21:ElectricCurrentUom */
enum eml21__ElectricCurrentUom {
	eml21__ElectricCurrentUom__A = 'A',
	eml21__ElectricCurrentUom__cA = 'B',
	eml21__ElectricCurrentUom__dA = 'C',
	eml21__ElectricCurrentUom__EA = 'D',
	eml21__ElectricCurrentUom__fA = 'E',
	eml21__ElectricCurrentUom__GA = 'F',
	eml21__ElectricCurrentUom__kA = 'G',
	eml21__ElectricCurrentUom__MA = 'H',
	eml21__ElectricCurrentUom__mA = 'I',
	eml21__ElectricCurrentUom__nA = 'J',
	eml21__ElectricCurrentUom__pA = 'K',
	eml21__ElectricCurrentUom__TA = 'L',
	eml21__ElectricCurrentUom__uA = 'M'
};
#endif

/* eml2_1ForGsoap.h:5198 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom (-867)

/* eml21:ElectricFieldStrengthUom */
enum eml21__ElectricFieldStrengthUom {
	eml21__ElectricFieldStrengthUom__mV_x002fft = 0,
	eml21__ElectricFieldStrengthUom__mV_x002fm = 1,
	eml21__ElectricFieldStrengthUom__uV_x002fft = 2,
	eml21__ElectricFieldStrengthUom__uV_x002fm = 3,
	eml21__ElectricFieldStrengthUom__V_x002fm = 4
};
#endif

/* eml2_1ForGsoap.h:5230 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom (-868)

/* eml21:ElectricPotentialDifferenceUom */
enum eml21__ElectricPotentialDifferenceUom {
	eml21__ElectricPotentialDifferenceUom__V = 'V',
	eml21__ElectricPotentialDifferenceUom__cV = 'W',
	eml21__ElectricPotentialDifferenceUom__dV = 'X',
	eml21__ElectricPotentialDifferenceUom__fV = 'Y',
	eml21__ElectricPotentialDifferenceUom__GV = 'Z',
	eml21__ElectricPotentialDifferenceUom__kV = 91,
	eml21__ElectricPotentialDifferenceUom__mV = 92,
	eml21__ElectricPotentialDifferenceUom__MV = 93,
	eml21__ElectricPotentialDifferenceUom__nV = 94,
	eml21__ElectricPotentialDifferenceUom__pV = 95,
	eml21__ElectricPotentialDifferenceUom__TV = 96,
	eml21__ElectricPotentialDifferenceUom__uV = 'a'
};
#endif

/* eml2_1ForGsoap.h:5297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom (-869)

/* eml21:ElectricResistancePerLengthUom */
enum eml21__ElectricResistancePerLengthUom {
	eml21__ElectricResistancePerLengthUom__ohm_x002fm = 0,
	eml21__ElectricResistancePerLengthUom__uohm_x002fft = 1,
	eml21__ElectricResistancePerLengthUom__uohm_x002fm = 2
};
#endif

/* eml2_1ForGsoap.h:5319 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom (-870)

/* eml21:ElectricResistanceUom */
enum eml21__ElectricResistanceUom {
	eml21__ElectricResistanceUom__cohm = 0,
	eml21__ElectricResistanceUom__dohm = 1,
	eml21__ElectricResistanceUom__Eohm = 2,
	eml21__ElectricResistanceUom__fohm = 3,
	eml21__ElectricResistanceUom__Gohm = 4,
	eml21__ElectricResistanceUom__kohm = 5,
	eml21__ElectricResistanceUom__Mohm = 6,
	eml21__ElectricResistanceUom__mohm = 7,
	eml21__ElectricResistanceUom__nohm = 8,
	eml21__ElectricResistanceUom__ohm = 9,
	eml21__ElectricResistanceUom__pohm = 10,
	eml21__ElectricResistanceUom__Tohm = 11,
	eml21__ElectricResistanceUom__uohm = 12
};
#endif

/* eml2_1ForGsoap.h:5391 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom (-871)

/* eml21:ElectromagneticMomentUom */
enum eml21__ElectromagneticMomentUom {
	eml21__ElectromagneticMomentUom__A_x002em2 = 0
};
#endif

/* eml2_1ForGsoap.h:5403 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom (-872)

/* eml21:EnergyLengthPerAreaUom */
enum eml21__EnergyLengthPerAreaUom {
	eml21__EnergyLengthPerAreaUom__J_x002em_x002fm2 = 0,
	eml21__EnergyLengthPerAreaUom__kcal_x005bth_x005d_x002em_x002fcm2 = 1
};
#endif

/* eml2_1ForGsoap.h:5420 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom (-873)

/* eml21:EnergyLengthPerTimeAreaTemperatureUom */
enum eml21__EnergyLengthPerTimeAreaTemperatureUom {
	eml21__EnergyLengthPerTimeAreaTemperatureUom__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__J_x002em_x002f_x0028s_x002em2_x002edeltaK_x0029 = 1,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__kJ_x002em_x002f_x0028h_x002em2_x002edeltaK_x0029 = 2,
	eml21__EnergyLengthPerTimeAreaTemperatureUom__W_x002f_x0028m_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:5447 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom (-874)

/* eml21:EnergyPerAreaUom */
enum eml21__EnergyPerAreaUom {
	eml21__EnergyPerAreaUom__erg_x002fcm2 = 0,
	eml21__EnergyPerAreaUom__J_x002fcm2 = 1,
	eml21__EnergyPerAreaUom__J_x002fm2 = 2,
	eml21__EnergyPerAreaUom__kgf_x002em_x002fcm2 = 3,
	eml21__EnergyPerAreaUom__lbf_x002eft_x002fin2 = 4,
	eml21__EnergyPerAreaUom__mJ_x002fcm2 = 5,
	eml21__EnergyPerAreaUom__mJ_x002fm2 = 6,
	eml21__EnergyPerAreaUom__N_x002fm = 7
};
#endif

/* eml2_1ForGsoap.h:5494 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom (-875)

/* eml21:EnergyPerLengthUom */
enum eml21__EnergyPerLengthUom {
	eml21__EnergyPerLengthUom__J_x002fm = 0,
	eml21__EnergyPerLengthUom__MJ_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:5511 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom (-876)

/* eml21:EnergyPerMassPerTimeUom */
enum eml21__EnergyPerMassPerTimeUom {
	eml21__EnergyPerMassPerTimeUom__mrem_x002fh = 0,
	eml21__EnergyPerMassPerTimeUom__mSv_x002fh = 1,
	eml21__EnergyPerMassPerTimeUom__rem_x002fh = 2,
	eml21__EnergyPerMassPerTimeUom__Sv_x002fh = 3,
	eml21__EnergyPerMassPerTimeUom__Sv_x002fs = 4
};
#endif

/* eml2_1ForGsoap.h:5543 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom (-877)

/* eml21:EnergyPerMassUom */
enum eml21__EnergyPerMassUom {
	eml21__EnergyPerMassUom__Btu_x005bIT_x005d_x002flbm = 0,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002fg = 1,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002fkg = 2,
	eml21__EnergyPerMassUom__cal_x005bth_x005d_x002flbm = 3,
	eml21__EnergyPerMassUom__erg_x002fg = 4,
	eml21__EnergyPerMassUom__erg_x002fkg = 5,
	eml21__EnergyPerMassUom__hp_x002eh_x002flbm = 6,
	eml21__EnergyPerMassUom__J_x002fg = 7,
	eml21__EnergyPerMassUom__J_x002fkg = 8,
	eml21__EnergyPerMassUom__kcal_x005bth_x005d_x002fg = 9,
	eml21__EnergyPerMassUom__kcal_x005bth_x005d_x002fkg = 10,
	eml21__EnergyPerMassUom__kJ_x002fkg = 11,
	eml21__EnergyPerMassUom__kW_x002eh_x002fkg = 12,
	eml21__EnergyPerMassUom__lbf_x002eft_x002flbm = 13,
	eml21__EnergyPerMassUom__MJ_x002fkg = 14,
	eml21__EnergyPerMassUom__MW_x002eh_x002fkg = 15
};
#endif

/* eml2_1ForGsoap.h:5630 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom (-878)

/* eml21:EnergyPerVolumeUom */
enum eml21__EnergyPerVolumeUom {
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fbbl = 0,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fft3 = 1,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 2,
	eml21__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 3,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fcm3 = 4,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmL = 5,
	eml21__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmm3 = 6,
	eml21__EnergyPerVolumeUom__erg_x002fcm3 = 7,
	eml21__EnergyPerVolumeUom__erg_x002fm3 = 8,
	eml21__EnergyPerVolumeUom__hp_x002eh_x002fbbl = 9,
	eml21__EnergyPerVolumeUom__J_x002fdm3 = 10,
	eml21__EnergyPerVolumeUom__J_x002fm3 = 11,
	eml21__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fcm3 = 12,
	eml21__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fm3 = 13,
	eml21__EnergyPerVolumeUom__kJ_x002fdm3 = 14,
	eml21__EnergyPerVolumeUom__kJ_x002fm3 = 15,
	eml21__EnergyPerVolumeUom__kW_x002eh_x002fdm3 = 16,
	eml21__EnergyPerVolumeUom__kW_x002eh_x002fm3 = 17,
	eml21__EnergyPerVolumeUom__lbf_x002eft_x002fbbl = 18,
	eml21__EnergyPerVolumeUom__lbf_x002eft_x002fgal_x005bUS_x005d = 19,
	eml21__EnergyPerVolumeUom__MJ_x002fm3 = 20,
	eml21__EnergyPerVolumeUom__MW_x002eh_x002fm3 = 21,
	eml21__EnergyPerVolumeUom__tonf_x005bUS_x005d_x002emi_x002fbbl = 22
};
#endif

/* eml2_1ForGsoap.h:5752 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom (-879)

/* eml21:EnergyUom */
enum eml21__EnergyUom {
	eml21__EnergyUom__J = 'J',
	eml21__EnergyUom__1E6_x0020Btu_x005bIT_x005d = 'K',
	eml21__EnergyUom__aJ = 'L',
	eml21__EnergyUom__Btu_x005bIT_x005d = 'M',
	eml21__EnergyUom__Btu_x005bth_x005d = 'N',
	eml21__EnergyUom__Btu_x005bUK_x005d = 'O',
	eml21__EnergyUom__cal_x005bIT_x005d = 'P',
	eml21__EnergyUom__cal_x005bth_x005d = 'Q',
	eml21__EnergyUom__ccal_x005bth_x005d = 'R',
	eml21__EnergyUom__ceV = 'S',
	eml21__EnergyUom__cJ = 'T',
	eml21__EnergyUom__dcal_x005bth_x005d = 'U',
	eml21__EnergyUom__deV = 'V',
	eml21__EnergyUom__dJ = 'W',
	eml21__EnergyUom__Ecal_x005bth_x005d = 'X',
	eml21__EnergyUom__EeV = 'Y',
	eml21__EnergyUom__EJ = 'Z',
	eml21__EnergyUom__erg = 91,
	eml21__EnergyUom__eV = 92,
	eml21__EnergyUom__fcal_x005bth_x005d = 93,
	eml21__EnergyUom__feV = 94,
	eml21__EnergyUom__fJ = 95,
	eml21__EnergyUom__Gcal_x005bth_x005d = 96,
	eml21__EnergyUom__GeV = 'a',
	eml21__EnergyUom__GJ = 'b',
	eml21__EnergyUom__GW_x002eh = 'c',
	eml21__EnergyUom__hp_x002eh = 'd',
	eml21__EnergyUom__hp_x005bmetric_x005d_x002eh = 'e',
	eml21__EnergyUom__kcal_x005bth_x005d = 'f',
	eml21__EnergyUom__keV = 'g',
	eml21__EnergyUom__kJ = 'h',
	eml21__EnergyUom__kW_x002eh = 'i',
	eml21__EnergyUom__mcal_x005bth_x005d = 'j',
	eml21__EnergyUom__Mcal_x005bth_x005d = 'k',
	eml21__EnergyUom__meV = 'l',
	eml21__EnergyUom__MeV = 'm',
	eml21__EnergyUom__MJ = 'n',
	eml21__EnergyUom__mJ = 'o',
	eml21__EnergyUom__MW_x002eh = 'p',
	eml21__EnergyUom__ncal_x005bth_x005d = 'q',
	eml21__EnergyUom__neV = 'r',
	eml21__EnergyUom__nJ = 's',
	eml21__EnergyUom__pcal_x005bth_x005d = 't',
	eml21__EnergyUom__peV = 'u',
	eml21__EnergyUom__pJ = 'v',
	eml21__EnergyUom__quad = 'w',
	eml21__EnergyUom__Tcal_x005bth_x005d = 'x',
	eml21__EnergyUom__TeV = 'y',
	eml21__EnergyUom__therm_x005bEC_x005d = 'z',
	eml21__EnergyUom__therm_x005bUK_x005d = 123,
	eml21__EnergyUom__therm_x005bUS_x005d = 124,
	eml21__EnergyUom__TJ = 125,
	eml21__EnergyUom__TW_x002eh = 126,
	eml21__EnergyUom__ucal_x005bth_x005d = 127,
	eml21__EnergyUom__ueV = 128,
	eml21__EnergyUom__uJ = 129
};
#endif

/* eml2_1ForGsoap.h:6039 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom (-880)

/* eml21:ForceAreaUom */
enum eml21__ForceAreaUom {
	eml21__ForceAreaUom__dyne_x002ecm2 = 0,
	eml21__ForceAreaUom__kgf_x002em2 = 1,
	eml21__ForceAreaUom__kN_x002em2 = 2,
	eml21__ForceAreaUom__lbf_x002ein2 = 3,
	eml21__ForceAreaUom__mN_x002em2 = 4,
	eml21__ForceAreaUom__N_x002em2 = 5,
	eml21__ForceAreaUom__pdl_x002ecm2 = 6,
	eml21__ForceAreaUom__tonf_x005bUK_x005d_x002eft2 = 7,
	eml21__ForceAreaUom__tonf_x005bUS_x005d_x002eft2 = 8
};
#endif

/* eml2_1ForGsoap.h:6091 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom (-881)

/* eml21:ForceLengthPerLengthUom */
enum eml21__ForceLengthPerLengthUom {
	eml21__ForceLengthPerLengthUom__kgf_x002em_x002fm = 0,
	eml21__ForceLengthPerLengthUom__lbf_x002eft_x002fin = 1,
	eml21__ForceLengthPerLengthUom__lbf_x002ein_x002fin = 2,
	eml21__ForceLengthPerLengthUom__N_x002em_x002fm = 3,
	eml21__ForceLengthPerLengthUom__tonf_x005bUS_x005d_x002emi_x002fft = 4
};
#endif

/* eml2_1ForGsoap.h:6123 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom (-882)

/* eml21:ForcePerForceUom */
enum eml21__ForcePerForceUom {
	eml21__ForcePerForceUom___x0025 = 0,
	eml21__ForcePerForceUom__Euc = 1,
	eml21__ForcePerForceUom__kgf_x002fkgf = 2,
	eml21__ForcePerForceUom__lbf_x002flbf = 3,
	eml21__ForcePerForceUom__N_x002fN = 4
};
#endif

/* eml2_1ForGsoap.h:6155 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom (-883)

/* eml21:ForcePerLengthUom */
enum eml21__ForcePerLengthUom {
	eml21__ForcePerLengthUom__0_x002e01_x0020lbf_x002fft = 0,
	eml21__ForcePerLengthUom__1_x002f30_x0020lbf_x002fm = 1,
	eml21__ForcePerLengthUom__1_x002f30_x0020N_x002fm = 2,
	eml21__ForcePerLengthUom__dyne_x002fcm = 3,
	eml21__ForcePerLengthUom__kgf_x002fcm = 4,
	eml21__ForcePerLengthUom__kN_x002fm = 5,
	eml21__ForcePerLengthUom__lbf_x002fft = 6,
	eml21__ForcePerLengthUom__lbf_x002fin = 7,
	eml21__ForcePerLengthUom__mN_x002fkm = 8,
	eml21__ForcePerLengthUom__mN_x002fm = 9,
	eml21__ForcePerLengthUom__N_x002fm = 10,
	eml21__ForcePerLengthUom__pdl_x002fcm = 11,
	eml21__ForcePerLengthUom__tonf_x005bUK_x005d_x002fft = 12,
	eml21__ForcePerLengthUom__tonf_x005bUS_x005d_x002fft = 13
};
#endif

/* eml2_1ForGsoap.h:6232 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom (-884)

/* eml21:ForcePerVolumeUom */
enum eml21__ForcePerVolumeUom {
	eml21__ForcePerVolumeUom__0_x002e001_x0020psi_x002fft = 0,
	eml21__ForcePerVolumeUom__0_x002e01_x0020psi_x002fft = 1,
	eml21__ForcePerVolumeUom__atm_x002fft = 2,
	eml21__ForcePerVolumeUom__atm_x002fhm = 3,
	eml21__ForcePerVolumeUom__atm_x002fm = 4,
	eml21__ForcePerVolumeUom__bar_x002fkm = 5,
	eml21__ForcePerVolumeUom__bar_x002fm = 6,
	eml21__ForcePerVolumeUom__GPa_x002fcm = 7,
	eml21__ForcePerVolumeUom__kPa_x002fhm = 8,
	eml21__ForcePerVolumeUom__kPa_x002fm = 9,
	eml21__ForcePerVolumeUom__lbf_x002fft3 = 10,
	eml21__ForcePerVolumeUom__lbf_x002fgal_x005bUS_x005d = 11,
	eml21__ForcePerVolumeUom__MPa_x002fm = 12,
	eml21__ForcePerVolumeUom__N_x002fm3 = 13,
	eml21__ForcePerVolumeUom__Pa_x002fm = 14,
	eml21__ForcePerVolumeUom__psi_x002fft = 15,
	eml21__ForcePerVolumeUom__psi_x002fm = 16
};
#endif

/* eml2_1ForGsoap.h:6324 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom (-885)

/* eml21:ForceUom */
enum eml21__ForceUom {
	eml21__ForceUom__N = 'N',
	eml21__ForceUom__10_x0020kN = 'O',
	eml21__ForceUom__cN = 'P',
	eml21__ForceUom__daN = 'Q',
	eml21__ForceUom__dN = 'R',
	eml21__ForceUom__dyne = 'S',
	eml21__ForceUom__EN = 'T',
	eml21__ForceUom__fN = 'U',
	eml21__ForceUom__gf = 'V',
	eml21__ForceUom__GN = 'W',
	eml21__ForceUom__hN = 'X',
	eml21__ForceUom__kdyne = 'Y',
	eml21__ForceUom__kgf = 'Z',
	eml21__ForceUom__klbf = 91,
	eml21__ForceUom__kN = 92,
	eml21__ForceUom__lbf = 93,
	eml21__ForceUom__Mgf = 94,
	eml21__ForceUom__mN = 95,
	eml21__ForceUom__MN = 96,
	eml21__ForceUom__nN = 'a',
	eml21__ForceUom__ozf = 'b',
	eml21__ForceUom__pdl = 'c',
	eml21__ForceUom__pN = 'd',
	eml21__ForceUom__TN = 'e',
	eml21__ForceUom__tonf_x005bUK_x005d = 'f',
	eml21__ForceUom__tonf_x005bUS_x005d = 'g',
	eml21__ForceUom__uN = 'h'
};
#endif

/* eml2_1ForGsoap.h:6466 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom (-886)

/* eml21:FrequencyIntervalUom */
enum eml21__FrequencyIntervalUom {
	eml21__FrequencyIntervalUom__O = 'O'
};
#endif

/* eml2_1ForGsoap.h:6478 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom (-887)

/* eml21:FrequencyUom */
enum eml21__FrequencyUom {
	eml21__FrequencyUom__cHz = 0,
	eml21__FrequencyUom__dHz = 1,
	eml21__FrequencyUom__EHz = 2,
	eml21__FrequencyUom__fHz = 3,
	eml21__FrequencyUom__GHz = 4,
	eml21__FrequencyUom__Hz = 5,
	eml21__FrequencyUom__kHz = 6,
	eml21__FrequencyUom__mHz = 7,
	eml21__FrequencyUom__MHz = 8,
	eml21__FrequencyUom__nHz = 9,
	eml21__FrequencyUom__pHz = 10,
	eml21__FrequencyUom__THz = 11,
	eml21__FrequencyUom__uHz = 12
};
#endif

/* eml2_1ForGsoap.h:6550 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom (-888)

/* eml21:HeatCapacityUom */
enum eml21__HeatCapacityUom {
	eml21__HeatCapacityUom__J_x002fdeltaK = 0
};
#endif

/* eml2_1ForGsoap.h:6562 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom (-889)

/* eml21:HeatFlowRateUom */
enum eml21__HeatFlowRateUom {
	eml21__HeatFlowRateUom__W = 'W',
	eml21__HeatFlowRateUom__1E6_x0020Btu_x005bIT_x005d_x002fh = 'X',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fh = 'Y',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fmin = 'Z',
	eml21__HeatFlowRateUom__Btu_x005bIT_x005d_x002fs = 91,
	eml21__HeatFlowRateUom__cal_x005bth_x005d_x002fh = 92,
	eml21__HeatFlowRateUom__EJ_x002fa = 93,
	eml21__HeatFlowRateUom__erg_x002fa = 94,
	eml21__HeatFlowRateUom__GW = 95,
	eml21__HeatFlowRateUom__J_x002fs = 96,
	eml21__HeatFlowRateUom__kcal_x005bth_x005d_x002fh = 'a',
	eml21__HeatFlowRateUom__kW = 'b',
	eml21__HeatFlowRateUom__lbf_x002eft_x002fmin = 'c',
	eml21__HeatFlowRateUom__lbf_x002eft_x002fs = 'd',
	eml21__HeatFlowRateUom__MJ_x002fa = 'e',
	eml21__HeatFlowRateUom__mW = 'f',
	eml21__HeatFlowRateUom__MW = 'g',
	eml21__HeatFlowRateUom__nW = 'h',
	eml21__HeatFlowRateUom__quad_x002fa = 'i',
	eml21__HeatFlowRateUom__TJ_x002fa = 'j',
	eml21__HeatFlowRateUom__TW = 'k',
	eml21__HeatFlowRateUom__ucal_x005bth_x005d_x002fs = 'l',
	eml21__HeatFlowRateUom__uW = 'm'
};
#endif

/* eml2_1ForGsoap.h:6684 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom (-890)

/* eml21:HeatTransferCoefficientUom */
enum eml21__HeatTransferCoefficientUom {
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaR_x0029 = 1,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 2,
	eml21__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edeltaF_x0029 = 3,
	eml21__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edeltaC_x0029 = 4,
	eml21__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edeltaC_x0029 = 5,
	eml21__HeatTransferCoefficientUom__J_x002f_x0028s_x002em2_x002edeltaC_x0029 = 6,
	eml21__HeatTransferCoefficientUom__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 7,
	eml21__HeatTransferCoefficientUom__kJ_x002f_x0028h_x002em2_x002edeltaK_x0029 = 8,
	eml21__HeatTransferCoefficientUom__kW_x002f_x0028m2_x002edeltaK_x0029 = 9,
	eml21__HeatTransferCoefficientUom__W_x002f_x0028m2_x002edeltaK_x0029 = 10
};
#endif

/* eml2_1ForGsoap.h:6746 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom (-891)

/* eml21:IlluminanceUom */
enum eml21__IlluminanceUom {
	eml21__IlluminanceUom__footcandle = 0,
	eml21__IlluminanceUom__klx = 1,
	eml21__IlluminanceUom__lm_x002fm2 = 2,
	eml21__IlluminanceUom__lx = 3
};
#endif

/* eml2_1ForGsoap.h:6773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom (-892)

/* eml21:InductanceUom */
enum eml21__InductanceUom {
	eml21__InductanceUom__H = 'H',
	eml21__InductanceUom__cH = 'I',
	eml21__InductanceUom__dH = 'J',
	eml21__InductanceUom__EH = 'K',
	eml21__InductanceUom__fH = 'L',
	eml21__InductanceUom__GH = 'M',
	eml21__InductanceUom__kH = 'N',
	eml21__InductanceUom__MH = 'O',
	eml21__InductanceUom__mH = 'P',
	eml21__InductanceUom__nH = 'Q',
	eml21__InductanceUom__TH = 'R',
	eml21__InductanceUom__uH = 'S'
};
#endif

/* eml2_1ForGsoap.h:6840 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom (-893)

/* eml21:IsothermalCompressibilityUom */
enum eml21__IsothermalCompressibilityUom {
	eml21__IsothermalCompressibilityUom__dm3_x002f_x0028kW_x002eh_x0029 = 0,
	eml21__IsothermalCompressibilityUom__dm3_x002fMJ = 1,
	eml21__IsothermalCompressibilityUom__m3_x002f_x0028kW_x002eh_x0029 = 2,
	eml21__IsothermalCompressibilityUom__m3_x002fJ = 3,
	eml21__IsothermalCompressibilityUom__mm3_x002fJ = 4,
	eml21__IsothermalCompressibilityUom__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 5
};
#endif

/* eml2_1ForGsoap.h:6877 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom (-894)

/* eml21:KinematicViscosityUom */
enum eml21__KinematicViscosityUom {
	eml21__KinematicViscosityUom__cm2_x002fs = 0,
	eml21__KinematicViscosityUom__cSt = 1,
	eml21__KinematicViscosityUom__ft2_x002fh = 2,
	eml21__KinematicViscosityUom__ft2_x002fs = 3,
	eml21__KinematicViscosityUom__in2_x002fs = 4,
	eml21__KinematicViscosityUom__m2_x002fh = 5,
	eml21__KinematicViscosityUom__m2_x002fs = 6,
	eml21__KinematicViscosityUom__mm2_x002fs = 7,
	eml21__KinematicViscosityUom__Pa_x002es_x002em3_x002fkg = 8,
	eml21__KinematicViscosityUom__St = 9
};
#endif

/* eml2_1ForGsoap.h:6934 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom (-895)

/* eml21:LengthPerLengthUom */
enum eml21__LengthPerLengthUom {
	eml21__LengthPerLengthUom___x0025 = 0,
	eml21__LengthPerLengthUom__0_x002e01_x0020ft_x002fft = 1,
	eml21__LengthPerLengthUom__1_x002f30_x0020m_x002fm = 2,
	eml21__LengthPerLengthUom__Euc = 3,
	eml21__LengthPerLengthUom__ft_x002fft = 4,
	eml21__LengthPerLengthUom__ft_x002fin = 5,
	eml21__LengthPerLengthUom__ft_x002fm = 6,
	eml21__LengthPerLengthUom__ft_x002fmi = 7,
	eml21__LengthPerLengthUom__km_x002fcm = 8,
	eml21__LengthPerLengthUom__m_x002fcm = 9,
	eml21__LengthPerLengthUom__m_x002fkm = 10,
	eml21__LengthPerLengthUom__m_x002fm = 11,
	eml21__LengthPerLengthUom__mi_x002fin = 12
};
#endif

/* eml2_1ForGsoap.h:7006 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom (-896)

/* eml21:LengthPerMassUom */
enum eml21__LengthPerMassUom {
	eml21__LengthPerMassUom__ft_x002flbm = 0,
	eml21__LengthPerMassUom__m_x002fkg = 1
};
#endif

/* eml2_1ForGsoap.h:7023 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom (-897)

/* eml21:LengthPerPressureUom */
enum eml21__LengthPerPressureUom {
	eml21__LengthPerPressureUom__ft_x002fpsi = 0,
	eml21__LengthPerPressureUom__m_x002fkPa = 1,
	eml21__LengthPerPressureUom__m_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:7045 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom (-898)

/* eml21:LengthPerTemperatureUom */
enum eml21__LengthPerTemperatureUom {
	eml21__LengthPerTemperatureUom__ft_x002fdeltaF = 0,
	eml21__LengthPerTemperatureUom__m_x002fdeltaK = 1
};
#endif

/* eml2_1ForGsoap.h:7062 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom (-899)

/* eml21:LengthPerTimeUom */
enum eml21__LengthPerTimeUom {
	eml21__LengthPerTimeUom__1000_x0020ft_x002fh = 0,
	eml21__LengthPerTimeUom__1000_x0020ft_x002fs = 1,
	eml21__LengthPerTimeUom__cm_x002fa = 2,
	eml21__LengthPerTimeUom__cm_x002fs = 3,
	eml21__LengthPerTimeUom__dm_x002fs = 4,
	eml21__LengthPerTimeUom__ft_x002fd = 5,
	eml21__LengthPerTimeUom__ft_x002fh = 6,
	eml21__LengthPerTimeUom__ft_x002fmin = 7,
	eml21__LengthPerTimeUom__ft_x002fms = 8,
	eml21__LengthPerTimeUom__ft_x002fs = 9,
	eml21__LengthPerTimeUom__ft_x002fus = 10,
	eml21__LengthPerTimeUom__in_x002fa = 11,
	eml21__LengthPerTimeUom__in_x002fmin = 12,
	eml21__LengthPerTimeUom__in_x002fs = 13,
	eml21__LengthPerTimeUom__km_x002fh = 14,
	eml21__LengthPerTimeUom__km_x002fs = 15,
	eml21__LengthPerTimeUom__knot = 16,
	eml21__LengthPerTimeUom__m_x002fd = 17,
	eml21__LengthPerTimeUom__m_x002fh = 18,
	eml21__LengthPerTimeUom__m_x002fmin = 19,
	eml21__LengthPerTimeUom__m_x002fms = 20,
	eml21__LengthPerTimeUom__m_x002fs = 21,
	eml21__LengthPerTimeUom__mi_x002fh = 22,
	eml21__LengthPerTimeUom__mil_x002fa = 23,
	eml21__LengthPerTimeUom__mm_x002fa = 24,
	eml21__LengthPerTimeUom__mm_x002fs = 25,
	eml21__LengthPerTimeUom__nm_x002fs = 26,
	eml21__LengthPerTimeUom__um_x002fs = 27
};
#endif

/* eml2_1ForGsoap.h:7209 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom (-900)

/* eml21:LengthPerVolumeUom */
enum eml21__LengthPerVolumeUom {
	eml21__LengthPerVolumeUom__ft_x002fbbl = 0,
	eml21__LengthPerVolumeUom__ft_x002fft3 = 1,
	eml21__LengthPerVolumeUom__ft_x002fgal_x005bUS_x005d = 2,
	eml21__LengthPerVolumeUom__km_x002fdm3 = 3,
	eml21__LengthPerVolumeUom__km_x002fL = 4,
	eml21__LengthPerVolumeUom__m_x002fm3 = 5,
	eml21__LengthPerVolumeUom__mi_x002fgal_x005bUK_x005d = 6,
	eml21__LengthPerVolumeUom__mi_x002fgal_x005bUS_x005d = 7
};
#endif

/* eml2_1ForGsoap.h:7256 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom (-901)

/* eml21:LengthUom */
enum eml21__LengthUom {
	eml21__LengthUom__m = 'm',
	eml21__LengthUom__0_x002e1_x0020ft = 'n',
	eml21__LengthUom__0_x002e1_x0020ft_x005bUS_x005d = 'o',
	eml21__LengthUom__0_x002e1_x0020in = 'p',
	eml21__LengthUom__0_x002e1_x0020yd = 'q',
	eml21__LengthUom__1_x002f16_x0020in = 'r',
	eml21__LengthUom__1_x002f2_x0020ft = 's',
	eml21__LengthUom__1_x002f32_x0020in = 't',
	eml21__LengthUom__1_x002f64_x0020in = 'u',
	eml21__LengthUom__10_x0020ft = 'v',
	eml21__LengthUom__10_x0020in = 'w',
	eml21__LengthUom__10_x0020km = 'x',
	eml21__LengthUom__100_x0020ft = 'y',
	eml21__LengthUom__100_x0020km = 'z',
	eml21__LengthUom__1000_x0020ft = 123,
	eml21__LengthUom__30_x0020ft = 124,
	eml21__LengthUom__30_x0020m = 125,
	eml21__LengthUom__angstrom = 126,
	eml21__LengthUom__chain = 127,
	eml21__LengthUom__chain_x005bBnA_x005d = 128,
	eml21__LengthUom__chain_x005bBnB_x005d = 129,
	eml21__LengthUom__chain_x005bCla_x005d = 130,
	eml21__LengthUom__chain_x005bInd37_x005d = 131,
	eml21__LengthUom__chain_x005bSe_x005d = 132,
	eml21__LengthUom__chain_x005bSeT_x005d = 133,
	eml21__LengthUom__chain_x005bUS_x005d = 134,
	eml21__LengthUom__cm = 135,
	eml21__LengthUom__dam = 136,
	eml21__LengthUom__dm = 137,
	eml21__LengthUom__Em = 138,
	eml21__LengthUom__fathom = 139,
	eml21__LengthUom__fm = 140,
	eml21__LengthUom__ft = 141,
	eml21__LengthUom__ft_x005bBnA_x005d = 142,
	eml21__LengthUom__ft_x005bBnB_x005d = 143,
	eml21__LengthUom__ft_x005bBr36_x005d = 144,
	eml21__LengthUom__ft_x005bBr65_x005d = 145,
	eml21__LengthUom__ft_x005bCla_x005d = 146,
	eml21__LengthUom__ft_x005bGC_x005d = 147,
	eml21__LengthUom__ft_x005bInd_x005d = 148,
	eml21__LengthUom__ft_x005bInd37_x005d = 149,
	eml21__LengthUom__ft_x005bInd62_x005d = 150,
	eml21__LengthUom__ft_x005bInd75_x005d = 151,
	eml21__LengthUom__ft_x005bSe_x005d = 152,
	eml21__LengthUom__ft_x005bSeT_x005d = 153,
	eml21__LengthUom__ft_x005bUS_x005d = 154,
	eml21__LengthUom__fur_x005bUS_x005d = 155,
	eml21__LengthUom__Gm = 156,
	eml21__LengthUom__hm = 157,
	eml21__LengthUom__in = 158,
	eml21__LengthUom__in_x005bUS_x005d = 159,
	eml21__LengthUom__km = 160,
	eml21__LengthUom__link = 161,
	eml21__LengthUom__link_x005bBnA_x005d = 162,
	eml21__LengthUom__link_x005bBnB_x005d = 163,
	eml21__LengthUom__link_x005bCla_x005d = 164,
	eml21__LengthUom__link_x005bSe_x005d = 165,
	eml21__LengthUom__link_x005bSeT_x005d = 166,
	eml21__LengthUom__link_x005bUS_x005d = 167,
	eml21__LengthUom__m_x005bGer_x005d = 168,
	eml21__LengthUom__mi = 169,
	eml21__LengthUom__mi_x005bnaut_x005d = 170,
	eml21__LengthUom__mi_x005bnautUK_x005d = 171,
	eml21__LengthUom__mi_x005bUS_x005d = 172,
	eml21__LengthUom__mil = 173,
	eml21__LengthUom__mm = 174,
	eml21__LengthUom__Mm = 175,
	eml21__LengthUom__nm = 176,
	eml21__LengthUom__pm = 177,
	eml21__LengthUom__rod_x005bUS_x005d = 178,
	eml21__LengthUom__Tm = 179,
	eml21__LengthUom__um = 180,
	eml21__LengthUom__yd = 181,
	eml21__LengthUom__yd_x005bBnA_x005d = 182,
	eml21__LengthUom__yd_x005bBnB_x005d = 183,
	eml21__LengthUom__yd_x005bCla_x005d = 184,
	eml21__LengthUom__yd_x005bInd_x005d = 185,
	eml21__LengthUom__yd_x005bInd37_x005d = 186,
	eml21__LengthUom__yd_x005bInd62_x005d = 187,
	eml21__LengthUom__yd_x005bInd75_x005d = 188,
	eml21__LengthUom__yd_x005bSe_x005d = 189,
	eml21__LengthUom__yd_x005bSeT_x005d = 190,
	eml21__LengthUom__yd_x005bUS_x005d = 191
};
#endif

/* eml2_1ForGsoap.h:7678 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom (-902)

/* eml21:LightExposureUom */
enum eml21__LightExposureUom {
	eml21__LightExposureUom__footcandle_x002es = 0,
	eml21__LightExposureUom__lx_x002es = 1
};
#endif

/* eml2_1ForGsoap.h:7695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom (-903)

/* eml21:LinearAccelerationUom */
enum eml21__LinearAccelerationUom {
	eml21__LinearAccelerationUom__cm_x002fs2 = 0,
	eml21__LinearAccelerationUom__ft_x002fs2 = 1,
	eml21__LinearAccelerationUom__Gal = 2,
	eml21__LinearAccelerationUom__gn = 3,
	eml21__LinearAccelerationUom__in_x002fs2 = 4,
	eml21__LinearAccelerationUom__m_x002fs2 = 5,
	eml21__LinearAccelerationUom__mGal = 6,
	eml21__LinearAccelerationUom__mgn = 7
};
#endif

/* eml2_1ForGsoap.h:7742 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom (-904)

/* eml21:LinearThermalExpansionUom */
enum eml21__LinearThermalExpansionUom {
	eml21__LinearThermalExpansionUom__1_x002fdeltaK = 0,
	eml21__LinearThermalExpansionUom__in_x002f_x0028in_x002edeltaF_x0029 = 1,
	eml21__LinearThermalExpansionUom__m_x002f_x0028m_x002edeltaK_x0029 = 2,
	eml21__LinearThermalExpansionUom__mm_x002f_x0028mm_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:7769 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom (-905)

/* eml21:LogarithmicPowerRatioPerLengthUom */
enum eml21__LogarithmicPowerRatioPerLengthUom {
	eml21__LogarithmicPowerRatioPerLengthUom__B_x002fm = 0,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fft = 1,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fkm = 2,
	eml21__LogarithmicPowerRatioPerLengthUom__dB_x002fm = 3
};
#endif

/* eml2_1ForGsoap.h:7796 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom (-906)

/* eml21:LogarithmicPowerRatioUom */
enum eml21__LogarithmicPowerRatioUom {
	eml21__LogarithmicPowerRatioUom__B = 'B',
	eml21__LogarithmicPowerRatioUom__dB = 'C'
};
#endif

/* eml2_1ForGsoap.h:7813 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom (-907)

/* eml21:LuminanceUom */
enum eml21__LuminanceUom {
	eml21__LuminanceUom__cd_x002fm2 = 0
};
#endif

/* eml2_1ForGsoap.h:7825 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom (-908)

/* eml21:LuminousEfficacyUom */
enum eml21__LuminousEfficacyUom {
	eml21__LuminousEfficacyUom__lm_x002fW = 0
};
#endif

/* eml2_1ForGsoap.h:7837 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom (-909)

/* eml21:LuminousFluxUom */
enum eml21__LuminousFluxUom {
	eml21__LuminousFluxUom__lm = 0
};
#endif

/* eml2_1ForGsoap.h:7849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom (-910)

/* eml21:LuminousIntensityUom */
enum eml21__LuminousIntensityUom {
	eml21__LuminousIntensityUom__cd = 0,
	eml21__LuminousIntensityUom__kcd = 1
};
#endif

/* eml2_1ForGsoap.h:7866 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom (-911)

/* eml21:MagneticDipoleMomentUom */
enum eml21__MagneticDipoleMomentUom {
	eml21__MagneticDipoleMomentUom__Wb_x002em = 0
};
#endif

/* eml2_1ForGsoap.h:7878 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom (-912)

/* eml21:MagneticFieldStrengthUom */
enum eml21__MagneticFieldStrengthUom {
	eml21__MagneticFieldStrengthUom__A_x002fm = 0,
	eml21__MagneticFieldStrengthUom__A_x002fmm = 1,
	eml21__MagneticFieldStrengthUom__Oe = 2
};
#endif

/* eml2_1ForGsoap.h:7900 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom (-913)

/* eml21:MagneticFluxDensityPerLengthUom */
enum eml21__MagneticFluxDensityPerLengthUom {
	eml21__MagneticFluxDensityPerLengthUom__gauss_x002fcm = 0,
	eml21__MagneticFluxDensityPerLengthUom__mT_x002fdm = 1,
	eml21__MagneticFluxDensityPerLengthUom__T_x002fm = 2
};
#endif

/* eml2_1ForGsoap.h:7922 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom (-914)

/* eml21:MagneticFluxDensityUom */
enum eml21__MagneticFluxDensityUom {
	eml21__MagneticFluxDensityUom__T = 'T',
	eml21__MagneticFluxDensityUom__cgauss = 'U',
	eml21__MagneticFluxDensityUom__cT = 'V',
	eml21__MagneticFluxDensityUom__dgauss = 'W',
	eml21__MagneticFluxDensityUom__dT = 'X',
	eml21__MagneticFluxDensityUom__Egauss = 'Y',
	eml21__MagneticFluxDensityUom__ET = 'Z',
	eml21__MagneticFluxDensityUom__fgauss = 91,
	eml21__MagneticFluxDensityUom__fT = 92,
	eml21__MagneticFluxDensityUom__gauss = 93,
	eml21__MagneticFluxDensityUom__Ggauss = 94,
	eml21__MagneticFluxDensityUom__GT = 95,
	eml21__MagneticFluxDensityUom__kgauss = 96,
	eml21__MagneticFluxDensityUom__kT = 'a',
	eml21__MagneticFluxDensityUom__mgauss = 'b',
	eml21__MagneticFluxDensityUom__Mgauss = 'c',
	eml21__MagneticFluxDensityUom__mT = 'd',
	eml21__MagneticFluxDensityUom__ngauss = 'e',
	eml21__MagneticFluxDensityUom__nT = 'f',
	eml21__MagneticFluxDensityUom__pgauss = 'g',
	eml21__MagneticFluxDensityUom__pT = 'h',
	eml21__MagneticFluxDensityUom__Tgauss = 'i',
	eml21__MagneticFluxDensityUom__TT = 'j',
	eml21__MagneticFluxDensityUom__ugauss = 'k',
	eml21__MagneticFluxDensityUom__uT = 'l'
};
#endif

/* eml2_1ForGsoap.h:8054 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom (-915)

/* eml21:MagneticFluxUom */
enum eml21__MagneticFluxUom {
	eml21__MagneticFluxUom__cWb = 0,
	eml21__MagneticFluxUom__dWb = 1,
	eml21__MagneticFluxUom__EWb = 2,
	eml21__MagneticFluxUom__fWb = 3,
	eml21__MagneticFluxUom__GWb = 4,
	eml21__MagneticFluxUom__kWb = 5,
	eml21__MagneticFluxUom__mWb = 6,
	eml21__MagneticFluxUom__MWb = 7,
	eml21__MagneticFluxUom__nWb = 8,
	eml21__MagneticFluxUom__pWb = 9,
	eml21__MagneticFluxUom__TWb = 10,
	eml21__MagneticFluxUom__uWb = 11,
	eml21__MagneticFluxUom__Wb = 12
};
#endif

/* eml2_1ForGsoap.h:8126 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom (-916)

/* eml21:MagneticPermeabilityUom */
enum eml21__MagneticPermeabilityUom {
	eml21__MagneticPermeabilityUom__H_x002fm = 0,
	eml21__MagneticPermeabilityUom__uH_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:8143 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom (-917)

/* eml21:MagneticVectorPotentialUom */
enum eml21__MagneticVectorPotentialUom {
	eml21__MagneticVectorPotentialUom__Wb_x002fm = 0,
	eml21__MagneticVectorPotentialUom__Wb_x002fmm = 1
};
#endif

/* eml2_1ForGsoap.h:8160 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom (-918)

/* eml21:MassLengthUom */
enum eml21__MassLengthUom {
	eml21__MassLengthUom__kg_x002em = 0,
	eml21__MassLengthUom__lbm_x002eft = 1
};
#endif

/* eml2_1ForGsoap.h:8177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom (-919)

/* eml21:MassPerAreaUom */
enum eml21__MassPerAreaUom {
	eml21__MassPerAreaUom__0_x002e01_x0020lbm_x002fft2 = 0,
	eml21__MassPerAreaUom__kg_x002fm2 = 1,
	eml21__MassPerAreaUom__lbm_x002fft2 = 2,
	eml21__MassPerAreaUom__Mg_x002fm2 = 3,
	eml21__MassPerAreaUom__ton_x005bUS_x005d_x002fft2 = 4
};
#endif

/* eml2_1ForGsoap.h:8209 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom (-920)

/* eml21:MassPerEnergyUom */
enum eml21__MassPerEnergyUom {
	eml21__MassPerEnergyUom__kg_x002f_x0028kW_x002eh_x0029 = 0,
	eml21__MassPerEnergyUom__kg_x002fJ = 1,
	eml21__MassPerEnergyUom__kg_x002fMJ = 2,
	eml21__MassPerEnergyUom__lbm_x002f_x0028hp_x002eh_x0029 = 3,
	eml21__MassPerEnergyUom__mg_x002fJ = 4
};
#endif

/* eml2_1ForGsoap.h:8241 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom (-921)

/* eml21:MassPerLengthUom */
enum eml21__MassPerLengthUom {
	eml21__MassPerLengthUom__kg_x002em_x002fcm2 = 0,
	eml21__MassPerLengthUom__kg_x002fm = 1,
	eml21__MassPerLengthUom__klbm_x002fin = 2,
	eml21__MassPerLengthUom__lbm_x002fft = 3,
	eml21__MassPerLengthUom__Mg_x002fin = 4
};
#endif

/* eml2_1ForGsoap.h:8273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom (-922)

/* eml21:MassPerMassUom */
enum eml21__MassPerMassUom {
	eml21__MassPerMassUom___x0025 = 0,
	eml21__MassPerMassUom___x0025_x005bmass_x005d = 1,
	eml21__MassPerMassUom__Euc = 2,
	eml21__MassPerMassUom__g_x002fkg = 3,
	eml21__MassPerMassUom__g_x002ft = 4,
	eml21__MassPerMassUom__kg_x002fkg = 5,
	eml21__MassPerMassUom__kg_x002fsack_x005b94lbm_x005d = 6,
	eml21__MassPerMassUom__kg_x002ft = 7,
	eml21__MassPerMassUom__mg_x002fg = 8,
	eml21__MassPerMassUom__mg_x002fkg = 9,
	eml21__MassPerMassUom__ng_x002fg = 10,
	eml21__MassPerMassUom__ng_x002fmg = 11,
	eml21__MassPerMassUom__ppk = 12,
	eml21__MassPerMassUom__ppm = 13,
	eml21__MassPerMassUom__ppm_x005bmass_x005d = 14,
	eml21__MassPerMassUom__ug_x002fg = 15,
	eml21__MassPerMassUom__ug_x002fmg = 16
};
#endif

/* eml2_1ForGsoap.h:8365 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom (-923)

/* eml21:MassPerTimePerAreaUom */
enum eml21__MassPerTimePerAreaUom {
	eml21__MassPerTimePerAreaUom__g_x002eft_x002f_x0028cm3_x002es_x0029 = 0,
	eml21__MassPerTimePerAreaUom__g_x002em_x002f_x0028cm3_x002es_x0029 = 1,
	eml21__MassPerTimePerAreaUom__kg_x002f_x0028m2_x002es_x0029 = 2,
	eml21__MassPerTimePerAreaUom__kPa_x002es_x002fm = 3,
	eml21__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002eh_x0029 = 4,
	eml21__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002es_x0029 = 5,
	eml21__MassPerTimePerAreaUom__MPa_x002es_x002fm = 6
};
#endif

/* eml2_1ForGsoap.h:8407 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom (-924)

/* eml21:MassPerTimePerLengthUom */
enum eml21__MassPerTimePerLengthUom {
	eml21__MassPerTimePerLengthUom__kg_x002f_x0028m_x002es_x0029 = 0,
	eml21__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002eh_x0029 = 1,
	eml21__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002es_x0029 = 2,
	eml21__MassPerTimePerLengthUom__Pa_x002es = 3
};
#endif

/* eml2_1ForGsoap.h:8434 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom (-925)

/* eml21:MassPerTimeUom */
enum eml21__MassPerTimeUom {
	eml21__MassPerTimeUom__1E6_x0020lbm_x002fa = 0,
	eml21__MassPerTimeUom__g_x002fs = 1,
	eml21__MassPerTimeUom__kg_x002fd = 2,
	eml21__MassPerTimeUom__kg_x002fh = 3,
	eml21__MassPerTimeUom__kg_x002fmin = 4,
	eml21__MassPerTimeUom__kg_x002fs = 5,
	eml21__MassPerTimeUom__lbm_x002fd = 6,
	eml21__MassPerTimeUom__lbm_x002fh = 7,
	eml21__MassPerTimeUom__lbm_x002fmin = 8,
	eml21__MassPerTimeUom__lbm_x002fs = 9,
	eml21__MassPerTimeUom__Mg_x002fa = 10,
	eml21__MassPerTimeUom__Mg_x002fd = 11,
	eml21__MassPerTimeUom__Mg_x002fh = 12,
	eml21__MassPerTimeUom__Mg_x002fmin = 13,
	eml21__MassPerTimeUom__t_x002fa = 14,
	eml21__MassPerTimeUom__t_x002fd = 15,
	eml21__MassPerTimeUom__t_x002fh = 16,
	eml21__MassPerTimeUom__t_x002fmin = 17,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fa = 18,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fd = 19,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fh = 20,
	eml21__MassPerTimeUom__ton_x005bUK_x005d_x002fmin = 21,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fa = 22,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fd = 23,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fh = 24,
	eml21__MassPerTimeUom__ton_x005bUS_x005d_x002fmin = 25
};
#endif

/* eml2_1ForGsoap.h:8571 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom (-926)

/* eml21:MassPerVolumePerLengthUom */
enum eml21__MassPerVolumePerLengthUom {
	eml21__MassPerVolumePerLengthUom__g_x002fcm4 = 0,
	eml21__MassPerVolumePerLengthUom__kg_x002fdm4 = 1,
	eml21__MassPerVolumePerLengthUom__kg_x002fm4 = 2,
	eml21__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 3,
	eml21__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 4,
	eml21__MassPerVolumePerLengthUom__lbm_x002fft4 = 5,
	eml21__MassPerVolumePerLengthUom__Pa_x002es2_x002fm3 = 6
};
#endif

/* eml2_1ForGsoap.h:8613 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom (-927)

/* eml21:MassPerVolumePerPressureUom */
enum eml21__MassPerVolumePerPressureUom {
	eml21__MassPerVolumePerPressureUom__kg_x002fm3_x002ekPa = 0,
	eml21__MassPerVolumePerPressureUom__lb_x002fft_x002epsi = 1
};
#endif

/* eml2_1ForGsoap.h:8622 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom (-928)

/* eml21:MassPerVolumePerTemperatureUom */
enum eml21__MassPerVolumePerTemperatureUom {
	eml21__MassPerVolumePerTemperatureUom__kg_x002fm3_x002edegC = 0,
	eml21__MassPerVolumePerTemperatureUom__kg_x002fm3_x002eK = 1,
	eml21__MassPerVolumePerTemperatureUom__lb_x002fft_x002edegF = 2
};
#endif

/* eml2_1ForGsoap.h:8632 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom (-929)

/* eml21:MassPerVolumeUom */
enum eml21__MassPerVolumeUom {
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fbbl = 0,
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 1,
	eml21__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 2,
	eml21__MassPerVolumeUom__0_x002e01_x0020grain_x002fft3 = 3,
	eml21__MassPerVolumeUom__0_x002e1_x0020lbm_x002fbbl = 4,
	eml21__MassPerVolumeUom__10_x0020Mg_x002fm3 = 5,
	eml21__MassPerVolumeUom__g_x002fcm3 = 6,
	eml21__MassPerVolumeUom__g_x002fdm3 = 7,
	eml21__MassPerVolumeUom__g_x002fgal_x005bUK_x005d = 8,
	eml21__MassPerVolumeUom__g_x002fgal_x005bUS_x005d = 9,
	eml21__MassPerVolumeUom__g_x002fL = 10,
	eml21__MassPerVolumeUom__g_x002fm3 = 11,
	eml21__MassPerVolumeUom__grain_x002fft3 = 12,
	eml21__MassPerVolumeUom__grain_x002fgal_x005bUS_x005d = 13,
	eml21__MassPerVolumeUom__kg_x002fdm3 = 14,
	eml21__MassPerVolumeUom__kg_x002fL = 15,
	eml21__MassPerVolumeUom__kg_x002fm3 = 16,
	eml21__MassPerVolumeUom__lbm_x002fbbl = 17,
	eml21__MassPerVolumeUom__lbm_x002fft3 = 18,
	eml21__MassPerVolumeUom__lbm_x002fgal_x005bUK_x005d = 19,
	eml21__MassPerVolumeUom__lbm_x002fgal_x005bUS_x005d = 20,
	eml21__MassPerVolumeUom__lbm_x002fin3 = 21,
	eml21__MassPerVolumeUom__mg_x002fdm3 = 22,
	eml21__MassPerVolumeUom__mg_x002fgal_x005bUS_x005d = 23,
	eml21__MassPerVolumeUom__mg_x002fL = 24,
	eml21__MassPerVolumeUom__mg_x002fm3 = 25,
	eml21__MassPerVolumeUom__Mg_x002fm3 = 26,
	eml21__MassPerVolumeUom__t_x002fm3 = 27,
	eml21__MassPerVolumeUom__ug_x002fcm3 = 28
};
#endif

/* eml2_1ForGsoap.h:8784 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUom (-930)

/* eml21:MassUom */
enum eml21__MassUom {
	eml21__MassUom__g = 'g',
	eml21__MassUom__t = 't',
	eml21__MassUom__ag = 'u',
	eml21__MassUom__cg = 'v',
	eml21__MassUom__ct = 'w',
	eml21__MassUom__cwt_x005bUK_x005d = 'x',
	eml21__MassUom__cwt_x005bUS_x005d = 'y',
	eml21__MassUom__Eg = 'z',
	eml21__MassUom__fg = 123,
	eml21__MassUom__Gg = 124,
	eml21__MassUom__grain = 125,
	eml21__MassUom__hg = 126,
	eml21__MassUom__kg = 127,
	eml21__MassUom__klbm = 128,
	eml21__MassUom__lbm = 129,
	eml21__MassUom__mg = 130,
	eml21__MassUom__Mg = 131,
	eml21__MassUom__ng = 132,
	eml21__MassUom__ozm = 133,
	eml21__MassUom__ozm_x005btroy_x005d = 134,
	eml21__MassUom__pg = 135,
	eml21__MassUom__sack_x005b94lbm_x005d = 136,
	eml21__MassUom__Tg = 137,
	eml21__MassUom__ton_x005bUK_x005d = 138,
	eml21__MassUom__ton_x005bUS_x005d = 139,
	eml21__MassUom__ug = 140
};
#endif

/* eml2_1ForGsoap.h:8921 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom (-931)

/* eml21:MobilityUom */
enum eml21__MobilityUom {
	eml21__MobilityUom__D_x002f_x0028Pa_x002es_x0029 = 0,
	eml21__MobilityUom__D_x002fcP = 1,
	eml21__MobilityUom__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 2,
	eml21__MobilityUom__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 3,
	eml21__MobilityUom__mD_x002f_x0028Pa_x002es_x0029 = 4,
	eml21__MobilityUom__mD_x002fcP = 5,
	eml21__MobilityUom__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 6
};
#endif

/* eml2_1ForGsoap.h:8963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom (-932)

/* eml21:MolarEnergyUom */
enum eml21__MolarEnergyUom {
	eml21__MolarEnergyUom__Btu_x005bIT_x005d_x002flbmol = 0,
	eml21__MolarEnergyUom__J_x002fmol = 1,
	eml21__MolarEnergyUom__kcal_x005bth_x005d_x002fmol = 2,
	eml21__MolarEnergyUom__kJ_x002fkmol = 3,
	eml21__MolarEnergyUom__MJ_x002fkmol = 4
};
#endif

/* eml2_1ForGsoap.h:8995 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom (-933)

/* eml21:MolarHeatCapacityUom */
enum eml21__MolarHeatCapacityUom {
	eml21__MolarHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edeltaF_x0029 = 0,
	eml21__MolarHeatCapacityUom__cal_x005bth_x005d_x002f_x0028mol_x002edeltaC_x0029 = 1,
	eml21__MolarHeatCapacityUom__J_x002f_x0028mol_x002edeltaK_x0029 = 2,
	eml21__MolarHeatCapacityUom__kJ_x002f_x0028kmol_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:9022 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom (-934)

/* eml21:MolarVolumeUom */
enum eml21__MolarVolumeUom {
	eml21__MolarVolumeUom__dm3_x002fkmol = 0,
	eml21__MolarVolumeUom__ft3_x002flbmol = 1,
	eml21__MolarVolumeUom__L_x002fkmol = 2,
	eml21__MolarVolumeUom__L_x002fmol = 3,
	eml21__MolarVolumeUom__m3_x002fkmol = 4,
	eml21__MolarVolumeUom__m3_x002fmol = 5
};
#endif

/* eml2_1ForGsoap.h:9059 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom (-935)

/* eml21:MolecularWeightUom */
enum eml21__MolecularWeightUom {
	eml21__MolecularWeightUom__g_x002fmol = 0,
	eml21__MolecularWeightUom__kg_x002fmol = 1,
	eml21__MolecularWeightUom__lbm_x002flbmol = 2
};
#endif

/* eml2_1ForGsoap.h:9081 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom (-936)

/* eml21:MomentOfForceUom */
enum eml21__MomentOfForceUom {
	eml21__MomentOfForceUom__J = 'J',
	eml21__MomentOfForceUom__1000_x0020lbf_x002eft = 'K',
	eml21__MomentOfForceUom__daN_x002em = 'L',
	eml21__MomentOfForceUom__dN_x002em = 'M',
	eml21__MomentOfForceUom__kgf_x002em = 'N',
	eml21__MomentOfForceUom__kN_x002em = 'O',
	eml21__MomentOfForceUom__lbf_x002eft = 'P',
	eml21__MomentOfForceUom__lbf_x002ein = 'Q',
	eml21__MomentOfForceUom__lbm_x002eft2_x002fs2 = 'R',
	eml21__MomentOfForceUom__N_x002em = 'S',
	eml21__MomentOfForceUom__pdl_x002eft = 'T',
	eml21__MomentOfForceUom__tonf_x005bUS_x005d_x002eft = 'U',
	eml21__MomentOfForceUom__tonf_x005bUS_x005d_x002emi = 'V'
};
#endif

/* eml2_1ForGsoap.h:9153 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom (-937)

/* eml21:MomentOfInertiaUom */
enum eml21__MomentOfInertiaUom {
	eml21__MomentOfInertiaUom__kg_x002em2 = 0,
	eml21__MomentOfInertiaUom__lbm_x002eft2 = 1
};
#endif

/* eml2_1ForGsoap.h:9170 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom (-938)

/* eml21:MomentumUom */
enum eml21__MomentumUom {
	eml21__MomentumUom__kg_x002em_x002fs = 0,
	eml21__MomentumUom__lbm_x002eft_x002fs = 1
};
#endif

/* eml2_1ForGsoap.h:9187 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom (-939)

/* eml21:NormalizedPowerUom */
enum eml21__NormalizedPowerUom {
	eml21__NormalizedPowerUom__B_x002eW = 0,
	eml21__NormalizedPowerUom__dB_x002emW = 1,
	eml21__NormalizedPowerUom__dB_x002eMW = 2,
	eml21__NormalizedPowerUom__dB_x002eW = 3
};
#endif

/* eml2_1ForGsoap.h:9214 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom (-940)

/* eml21:PermeabilityLengthUom */
enum eml21__PermeabilityLengthUom {
	eml21__PermeabilityLengthUom__D_x002eft = 0,
	eml21__PermeabilityLengthUom__D_x002em = 1,
	eml21__PermeabilityLengthUom__mD_x002eft = 2,
	eml21__PermeabilityLengthUom__mD_x002em = 3,
	eml21__PermeabilityLengthUom__TD_x005bAPI_x005d_x002em = 4
};
#endif

/* eml2_1ForGsoap.h:9246 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom (-941)

/* eml21:PermeabilityRockUom */
enum eml21__PermeabilityRockUom {
	eml21__PermeabilityRockUom__D = 'D',
	eml21__PermeabilityRockUom__D_x005bAPI_x005d = 'E',
	eml21__PermeabilityRockUom__mD = 'F',
	eml21__PermeabilityRockUom__TD_x005bAPI_x005d = 'G'
};
#endif

/* eml2_1ForGsoap.h:9273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom (-942)

/* eml21:PermittivityUom */
enum eml21__PermittivityUom {
	eml21__PermittivityUom__F_x002fm = 0,
	eml21__PermittivityUom__uF_x002fm = 1
};
#endif

/* eml2_1ForGsoap.h:9290 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom (-943)

/* eml21:PlaneAngleUom */
enum eml21__PlaneAngleUom {
	eml21__PlaneAngleUom__0_x002e001_x0020seca = 0,
	eml21__PlaneAngleUom__ccgr = 1,
	eml21__PlaneAngleUom__cgr = 2,
	eml21__PlaneAngleUom__dega = 3,
	eml21__PlaneAngleUom__gon = 4,
	eml21__PlaneAngleUom__krad = 5,
	eml21__PlaneAngleUom__mila = 6,
	eml21__PlaneAngleUom__mina = 7,
	eml21__PlaneAngleUom__Mrad = 8,
	eml21__PlaneAngleUom__mrad = 9,
	eml21__PlaneAngleUom__rad = 10,
	eml21__PlaneAngleUom__rev = 11,
	eml21__PlaneAngleUom__seca = 12,
	eml21__PlaneAngleUom__urad = 13
};
#endif

/* eml2_1ForGsoap.h:9367 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom (-944)

/* eml21:PotentialDifferencePerPowerDropUom */
enum eml21__PotentialDifferencePerPowerDropUom {
	eml21__PotentialDifferencePerPowerDropUom__V_x002fB = 0,
	eml21__PotentialDifferencePerPowerDropUom__V_x002fdB = 1
};
#endif

/* eml2_1ForGsoap.h:9384 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom (-945)

/* eml21:PowerPerAreaUom */
enum eml21__PowerPerAreaUom {
	eml21__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 0,
	eml21__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__PowerPerAreaUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 2,
	eml21__PowerPerAreaUom__hp_x002fin2 = 3,
	eml21__PowerPerAreaUom__hp_x005bhyd_x005d_x002fin2 = 4,
	eml21__PowerPerAreaUom__kW_x002fcm2 = 5,
	eml21__PowerPerAreaUom__kW_x002fm2 = 6,
	eml21__PowerPerAreaUom__mW_x002fm2 = 7,
	eml21__PowerPerAreaUom__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 8,
	eml21__PowerPerAreaUom__W_x002fcm2 = 9,
	eml21__PowerPerAreaUom__W_x002fm2 = 10,
	eml21__PowerPerAreaUom__W_x002fmm2 = 11
};
#endif

/* eml2_1ForGsoap.h:9451 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom (-946)

/* eml21:PowerPerPowerUom */
enum eml21__PowerPerPowerUom {
	eml21__PowerPerPowerUom___x0025 = 0,
	eml21__PowerPerPowerUom__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 1,
	eml21__PowerPerPowerUom__Euc = 2,
	eml21__PowerPerPowerUom__W_x002fkW = 3,
	eml21__PowerPerPowerUom__W_x002fW = 4
};
#endif

/* eml2_1ForGsoap.h:9483 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom (-947)

/* eml21:PowerPerVolumeUom */
enum eml21__PowerPerVolumeUom {
	eml21__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 0,
	eml21__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 1,
	eml21__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 2,
	eml21__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 3,
	eml21__PowerPerVolumeUom__hp_x002fft3 = 4,
	eml21__PowerPerVolumeUom__kW_x002fm3 = 5,
	eml21__PowerPerVolumeUom__uW_x002fm3 = 6,
	eml21__PowerPerVolumeUom__W_x002fm3 = 7
};
#endif

/* eml2_1ForGsoap.h:9530 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom (-948)

/* eml21:PowerUom */
enum eml21__PowerUom {
	eml21__PowerUom__W = 'W',
	eml21__PowerUom__cW = 'X',
	eml21__PowerUom__dW = 'Y',
	eml21__PowerUom__EW = 'Z',
	eml21__PowerUom__fW = 91,
	eml21__PowerUom__GW = 92,
	eml21__PowerUom__hp = 93,
	eml21__PowerUom__hp_x005belec_x005d = 94,
	eml21__PowerUom__hp_x005bhyd_x005d = 95,
	eml21__PowerUom__hp_x005bmetric_x005d = 96,
	eml21__PowerUom__kW = 'a',
	eml21__PowerUom__MW = 'b',
	eml21__PowerUom__mW = 'c',
	eml21__PowerUom__nW = 'd',
	eml21__PowerUom__pW = 'e',
	eml21__PowerUom__tonRefrig = 'f',
	eml21__PowerUom__TW = 'g',
	eml21__PowerUom__uW = 'h'
};
#endif

/* eml2_1ForGsoap.h:9627 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom (-949)

/* eml21:PressurePerPressureUom */
enum eml21__PressurePerPressureUom {
	eml21__PressurePerPressureUom__atm_x002fatm = 0,
	eml21__PressurePerPressureUom__bar_x002fbar = 1,
	eml21__PressurePerPressureUom__Euc = 2,
	eml21__PressurePerPressureUom__kPa_x002fkPa = 3,
	eml21__PressurePerPressureUom__MPa_x002fMPa = 4,
	eml21__PressurePerPressureUom__Pa_x002fPa = 5,
	eml21__PressurePerPressureUom__psi_x002fpsi = 6
};
#endif

/* eml2_1ForGsoap.h:9669 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom (-950)

/* eml21:PressurePerTimeUom */
enum eml21__PressurePerTimeUom {
	eml21__PressurePerTimeUom__atm_x002fh = 0,
	eml21__PressurePerTimeUom__bar_x002fh = 1,
	eml21__PressurePerTimeUom__kPa_x002fh = 2,
	eml21__PressurePerTimeUom__kPa_x002fmin = 3,
	eml21__PressurePerTimeUom__MPa_x002fh = 4,
	eml21__PressurePerTimeUom__Pa_x002fh = 5,
	eml21__PressurePerTimeUom__Pa_x002fs = 6,
	eml21__PressurePerTimeUom__psi_x002fh = 7,
	eml21__PressurePerTimeUom__psi_x002fmin = 8
};
#endif

/* eml2_1ForGsoap.h:9721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom (-951)

/* eml21:PressurePerVolumeUom */
enum eml21__PressurePerVolumeUom {
	eml21__PressurePerVolumeUom__Pa_x002fm3 = 0,
	eml21__PressurePerVolumeUom__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:9738 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom (-952)

/* eml21:PressureSquaredPerForceTimePerAreaUom */
enum eml21__PressureSquaredPerForceTimePerAreaUom {
	eml21__PressureSquaredPerForceTimePerAreaUom__0_x002e001_x0020kPa2_x002fcP = 0,
	eml21__PressureSquaredPerForceTimePerAreaUom__bar2_x002fcP = 1,
	eml21__PressureSquaredPerForceTimePerAreaUom__kPa2_x002fcP = 2,
	eml21__PressureSquaredPerForceTimePerAreaUom__Pa2_x002f_x0028Pa_x002es_x0029 = 3,
	eml21__PressureSquaredPerForceTimePerAreaUom__psi2_x002fcP = 4
};
#endif

/* eml2_1ForGsoap.h:9770 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom (-953)

/* eml21:PressureSquaredUom */
enum eml21__PressureSquaredUom {
	eml21__PressureSquaredUom__bar2 = 0,
	eml21__PressureSquaredUom__GPa2 = 1,
	eml21__PressureSquaredUom__kPa2 = 2,
	eml21__PressureSquaredUom__kpsi2 = 3,
	eml21__PressureSquaredUom__Pa2 = 4,
	eml21__PressureSquaredUom__psi2 = 5
};
#endif

/* eml2_1ForGsoap.h:9807 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom (-954)

/* eml21:PressureTimePerVolumeUom */
enum eml21__PressureTimePerVolumeUom {
	eml21__PressureTimePerVolumeUom__Pa_x002es_x002fm3 = 0,
	eml21__PressureTimePerVolumeUom__psi_x002ed_x002fbbl = 1
};
#endif

/* eml2_1ForGsoap.h:9824 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom (-955)

/* eml21:PressureUom */
enum eml21__PressureUom {
	eml21__PressureUom__0_x002e01_x0020lbf_x002fft2 = 0,
	eml21__PressureUom__at = 1,
	eml21__PressureUom__atm = 2,
	eml21__PressureUom__bar = 3,
	eml21__PressureUom__cmH2O_x005b4degC_x005d = 4,
	eml21__PressureUom__cPa = 5,
	eml21__PressureUom__dPa = 6,
	eml21__PressureUom__dyne_x002fcm2 = 7,
	eml21__PressureUom__EPa = 8,
	eml21__PressureUom__fPa = 9,
	eml21__PressureUom__GPa = 10,
	eml21__PressureUom__hbar = 11,
	eml21__PressureUom__inH2O_x005b39degF_x005d = 12,
	eml21__PressureUom__inH2O_x005b60degF_x005d = 13,
	eml21__PressureUom__inHg_x005b32degF_x005d = 14,
	eml21__PressureUom__inHg_x005b60degF_x005d = 15,
	eml21__PressureUom__kgf_x002fcm2 = 16,
	eml21__PressureUom__kgf_x002fm2 = 17,
	eml21__PressureUom__kgf_x002fmm2 = 18,
	eml21__PressureUom__kN_x002fm2 = 19,
	eml21__PressureUom__kPa = 20,
	eml21__PressureUom__kpsi = 21,
	eml21__PressureUom__lbf_x002fft2 = 22,
	eml21__PressureUom__mbar = 23,
	eml21__PressureUom__mmHg_x005b0degC_x005d = 24,
	eml21__PressureUom__mPa = 25,
	eml21__PressureUom__MPa = 26,
	eml21__PressureUom__Mpsi = 27,
	eml21__PressureUom__N_x002fm2 = 28,
	eml21__PressureUom__N_x002fmm2 = 29,
	eml21__PressureUom__nPa = 30,
	eml21__PressureUom__Pa = 31,
	eml21__PressureUom__pPa = 32,
	eml21__PressureUom__psi = 33,
	eml21__PressureUom__tonf_x005bUK_x005d_x002fft2 = 34,
	eml21__PressureUom__tonf_x005bUS_x005d_x002fft2 = 35,
	eml21__PressureUom__tonf_x005bUS_x005d_x002fin2 = 36,
	eml21__PressureUom__torr = 37,
	eml21__PressureUom__TPa = 38,
	eml21__PressureUom__ubar = 39,
	eml21__PressureUom__umHg_x005b0degC_x005d = 40,
	eml21__PressureUom__uPa = 41,
	eml21__PressureUom__upsi = 42
};
#endif

/* eml2_1ForGsoap.h:10046 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom (-956)

/* eml21:QuantityOfLightUom */
enum eml21__QuantityOfLightUom {
	eml21__QuantityOfLightUom__lm_x002es = 0
};
#endif

/* eml2_1ForGsoap.h:10058 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom (-957)

/* eml21:RadianceUom */
enum eml21__RadianceUom {
	eml21__RadianceUom__W_x002f_x0028m2_x002esr_x0029 = 0
};
#endif

/* eml2_1ForGsoap.h:10070 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom (-958)

/* eml21:RadiantIntensityUom */
enum eml21__RadiantIntensityUom {
	eml21__RadiantIntensityUom__W_x002fsr = 0
};
#endif

/* eml2_1ForGsoap.h:10082 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom (-959)

/* eml21:ReciprocalAreaUom */
enum eml21__ReciprocalAreaUom {
	eml21__ReciprocalAreaUom__1_x002fft2 = 0,
	eml21__ReciprocalAreaUom__1_x002fkm2 = 1,
	eml21__ReciprocalAreaUom__1_x002fm2 = 2,
	eml21__ReciprocalAreaUom__1_x002fmi2 = 3
};
#endif

/* eml2_1ForGsoap.h:10109 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom (-960)

/* eml21:ReciprocalElectricPotentialDifferenceUom */
enum eml21__ReciprocalElectricPotentialDifferenceUom {
	eml21__ReciprocalElectricPotentialDifferenceUom__1_x002fuV = 0,
	eml21__ReciprocalElectricPotentialDifferenceUom__1_x002fV = 1
};
#endif

/* eml2_1ForGsoap.h:10126 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom (-961)

/* eml21:ReciprocalForceUom */
enum eml21__ReciprocalForceUom {
	eml21__ReciprocalForceUom__1_x002flbf = 0,
	eml21__ReciprocalForceUom__1_x002fN = 1
};
#endif

/* eml2_1ForGsoap.h:10143 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom (-962)

/* eml21:ReciprocalLengthUom */
enum eml21__ReciprocalLengthUom {
	eml21__ReciprocalLengthUom__1_x002fangstrom = 0,
	eml21__ReciprocalLengthUom__1_x002fcm = 1,
	eml21__ReciprocalLengthUom__1_x002fft = 2,
	eml21__ReciprocalLengthUom__1_x002fin = 3,
	eml21__ReciprocalLengthUom__1_x002fm = 4,
	eml21__ReciprocalLengthUom__1_x002fmi = 5,
	eml21__ReciprocalLengthUom__1_x002fmm = 6,
	eml21__ReciprocalLengthUom__1_x002fnm = 7,
	eml21__ReciprocalLengthUom__1_x002fyd = 8,
	eml21__ReciprocalLengthUom__1E_9_x00201_x002fft = 9
};
#endif

/* eml2_1ForGsoap.h:10200 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom (-963)

/* eml21:ReciprocalMassTimeUom */
enum eml21__ReciprocalMassTimeUom {
	eml21__ReciprocalMassTimeUom__1_x002f_x0028kg_x002es_x0029 = 0,
	eml21__ReciprocalMassTimeUom__Bq_x002fkg = 1,
	eml21__ReciprocalMassTimeUom__pCi_x002fg = 2
};
#endif

/* eml2_1ForGsoap.h:10222 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom (-964)

/* eml21:ReciprocalMassUom */
enum eml21__ReciprocalMassUom {
	eml21__ReciprocalMassUom__1_x002fg = 0,
	eml21__ReciprocalMassUom__1_x002fkg = 1,
	eml21__ReciprocalMassUom__1_x002flbm = 2
};
#endif

/* eml2_1ForGsoap.h:10244 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom (-965)

/* eml21:ReciprocalPressureUom */
enum eml21__ReciprocalPressureUom {
	eml21__ReciprocalPressureUom__1_x002fbar = 0,
	eml21__ReciprocalPressureUom__1_x002fkPa = 1,
	eml21__ReciprocalPressureUom__1_x002fPa = 2,
	eml21__ReciprocalPressureUom__1_x002fpPa = 3,
	eml21__ReciprocalPressureUom__1_x002fpsi = 4,
	eml21__ReciprocalPressureUom__1_x002fupsi = 5
};
#endif

/* eml2_1ForGsoap.h:10281 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom (-966)

/* eml21:ReciprocalTimeUom */
enum eml21__ReciprocalTimeUom {
	eml21__ReciprocalTimeUom__1_x002fa = 0,
	eml21__ReciprocalTimeUom__1_x002fd = 1,
	eml21__ReciprocalTimeUom__1_x002fh = 2,
	eml21__ReciprocalTimeUom__1_x002fmin = 3,
	eml21__ReciprocalTimeUom__1_x002fms = 4,
	eml21__ReciprocalTimeUom__1_x002fs = 5,
	eml21__ReciprocalTimeUom__1_x002fus = 6,
	eml21__ReciprocalTimeUom__1_x002fwk = 7
};
#endif

/* eml2_1ForGsoap.h:10328 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom (-967)

/* eml21:ReciprocalVolumeUom */
enum eml21__ReciprocalVolumeUom {
	eml21__ReciprocalVolumeUom__1_x002fbbl = 0,
	eml21__ReciprocalVolumeUom__1_x002fft3 = 1,
	eml21__ReciprocalVolumeUom__1_x002fgal_x005bUK_x005d = 2,
	eml21__ReciprocalVolumeUom__1_x002fgal_x005bUS_x005d = 3,
	eml21__ReciprocalVolumeUom__1_x002fL = 4,
	eml21__ReciprocalVolumeUom__1_x002fm3 = 5
};
#endif

/* eml2_1ForGsoap.h:10365 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom (-968)

/* eml21:ReluctanceUom */
enum eml21__ReluctanceUom {
	eml21__ReluctanceUom__1_x002fH = 0
};
#endif

/* eml2_1ForGsoap.h:10377 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom (-969)

/* eml21:SecondMomentOfAreaUom */
enum eml21__SecondMomentOfAreaUom {
	eml21__SecondMomentOfAreaUom__cm4 = 0,
	eml21__SecondMomentOfAreaUom__in4 = 1,
	eml21__SecondMomentOfAreaUom__m4 = 2
};
#endif

/* eml2_1ForGsoap.h:10399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom (-970)

/* eml21:SignalingEventPerTimeUom */
enum eml21__SignalingEventPerTimeUom {
	eml21__SignalingEventPerTimeUom__Bd = 0
};
#endif

/* eml2_1ForGsoap.h:10411 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom (-971)

/* eml21:SolidAngleUom */
enum eml21__SolidAngleUom {
	eml21__SolidAngleUom__sr = 0
};
#endif

/* eml2_1ForGsoap.h:10423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom (-972)

/* eml21:SpecificHeatCapacityUom */
enum eml21__SpecificHeatCapacityUom {
	eml21__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaF_x0029 = 0,
	eml21__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaR_x0029 = 1,
	eml21__SpecificHeatCapacityUom__cal_x005bth_x005d_x002f_x0028g_x002edeltaK_x0029 = 2,
	eml21__SpecificHeatCapacityUom__J_x002f_x0028g_x002edeltaK_x0029 = 3,
	eml21__SpecificHeatCapacityUom__J_x002f_x0028kg_x002edeltaK_x0029 = 4,
	eml21__SpecificHeatCapacityUom__kcal_x005bth_x005d_x002f_x0028kg_x002edeltaC_x0029 = 5,
	eml21__SpecificHeatCapacityUom__kJ_x002f_x0028kg_x002edeltaK_x0029 = 6,
	eml21__SpecificHeatCapacityUom__kW_x002eh_x002f_x0028kg_x002edeltaC_x0029 = 7
};
#endif

/* eml2_1ForGsoap.h:10470 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom (-973)

/* eml21:TemperatureIntervalPerLengthUom */
enum eml21__TemperatureIntervalPerLengthUom {
	eml21__TemperatureIntervalPerLengthUom__0_x002e01_x0020deltaF_x002fft = 0,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fft = 1,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fhm = 2,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fkm = 3,
	eml21__TemperatureIntervalPerLengthUom__deltaC_x002fm = 4,
	eml21__TemperatureIntervalPerLengthUom__deltaF_x002fft = 5,
	eml21__TemperatureIntervalPerLengthUom__deltaF_x002fm = 6,
	eml21__TemperatureIntervalPerLengthUom__deltaK_x002fkm = 7,
	eml21__TemperatureIntervalPerLengthUom__deltaK_x002fm = 8
};
#endif

/* eml2_1ForGsoap.h:10522 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom (-974)

/* eml21:TemperatureIntervalPerPressureUom */
enum eml21__TemperatureIntervalPerPressureUom {
	eml21__TemperatureIntervalPerPressureUom__deltaC_x002fkPa = 0,
	eml21__TemperatureIntervalPerPressureUom__deltaF_x002fpsi = 1,
	eml21__TemperatureIntervalPerPressureUom__deltaK_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:10544 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom (-975)

/* eml21:TemperatureIntervalPerTimeUom */
enum eml21__TemperatureIntervalPerTimeUom {
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fh = 0,
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fmin = 1,
	eml21__TemperatureIntervalPerTimeUom__deltaC_x002fs = 2,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fh = 3,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fmin = 4,
	eml21__TemperatureIntervalPerTimeUom__deltaF_x002fs = 5,
	eml21__TemperatureIntervalPerTimeUom__deltaK_x002fs = 6
};
#endif

/* eml2_1ForGsoap.h:10586 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom (-976)

/* eml21:TemperatureIntervalUom */
enum eml21__TemperatureIntervalUom {
	eml21__TemperatureIntervalUom__deltaC = 0,
	eml21__TemperatureIntervalUom__deltaF = 1,
	eml21__TemperatureIntervalUom__deltaK = 2,
	eml21__TemperatureIntervalUom__deltaR = 3
};
#endif

/* eml2_1ForGsoap.h:10613 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom (-977)

/* eml21:ThermalConductanceUom */
enum eml21__ThermalConductanceUom {
	eml21__ThermalConductanceUom__W_x002fdeltaK = 0
};
#endif

/* eml2_1ForGsoap.h:10625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom (-978)

/* eml21:ThermalConductivityUom */
enum eml21__ThermalConductivityUom {
	eml21__ThermalConductivityUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edeltaF_x0029 = 0,
	eml21__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edeltaC_x0029 = 1,
	eml21__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edeltaC_x0029 = 2,
	eml21__ThermalConductivityUom__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edeltaC_x0029 = 3,
	eml21__ThermalConductivityUom__W_x002f_x0028m_x002edeltaK_x0029 = 4
};
#endif

/* eml2_1ForGsoap.h:10657 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom (-979)

/* eml21:ThermalDiffusivityUom */
enum eml21__ThermalDiffusivityUom {
	eml21__ThermalDiffusivityUom__cm2_x002fs = 0,
	eml21__ThermalDiffusivityUom__ft2_x002fh = 1,
	eml21__ThermalDiffusivityUom__ft2_x002fs = 2,
	eml21__ThermalDiffusivityUom__in2_x002fs = 3,
	eml21__ThermalDiffusivityUom__m2_x002fh = 4,
	eml21__ThermalDiffusivityUom__m2_x002fs = 5,
	eml21__ThermalDiffusivityUom__mm2_x002fs = 6
};
#endif

/* eml2_1ForGsoap.h:10699 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom (-980)

/* eml21:ThermalInsulanceUom */
enum eml21__ThermalInsulanceUom {
	eml21__ThermalInsulanceUom__deltaC_x002em2_x002eh_x002fkcal_x005bth_x005d = 0,
	eml21__ThermalInsulanceUom__deltaF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 1,
	eml21__ThermalInsulanceUom__deltaK_x002em2_x002fkW = 2,
	eml21__ThermalInsulanceUom__deltaK_x002em2_x002fW = 3
};
#endif

/* eml2_1ForGsoap.h:10726 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom (-981)

/* eml21:ThermalResistanceUom */
enum eml21__ThermalResistanceUom {
	eml21__ThermalResistanceUom__deltaK_x002fW = 0
};
#endif

/* eml2_1ForGsoap.h:10738 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-982)

/* eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom */
enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom {
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degC_x002fdegC = 0,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degF_x002fdegF = 1,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degR_x002fdegR = 2,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__Euc = 3,
	eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom__K_x002fK = 4
};
#endif

/* eml2_1ForGsoap.h:10770 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom (-983)

/* eml21:ThermodynamicTemperatureUom */
enum eml21__ThermodynamicTemperatureUom {
	eml21__ThermodynamicTemperatureUom__K = 'K',
	eml21__ThermodynamicTemperatureUom__degC = 'L',
	eml21__ThermodynamicTemperatureUom__degF = 'M',
	eml21__ThermodynamicTemperatureUom__degR = 'N'
};
#endif

/* eml2_1ForGsoap.h:10797 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom (-984)

/* eml21:TimePerLengthUom */
enum eml21__TimePerLengthUom {
	eml21__TimePerLengthUom__0_x002e001_x0020h_x002fft = 0,
	eml21__TimePerLengthUom__h_x002fkm = 1,
	eml21__TimePerLengthUom__min_x002fft = 2,
	eml21__TimePerLengthUom__min_x002fm = 3,
	eml21__TimePerLengthUom__ms_x002fcm = 4,
	eml21__TimePerLengthUom__ms_x002fft = 5,
	eml21__TimePerLengthUom__ms_x002fin = 6,
	eml21__TimePerLengthUom__ms_x002fm = 7,
	eml21__TimePerLengthUom__ns_x002fft = 8,
	eml21__TimePerLengthUom__ns_x002fm = 9,
	eml21__TimePerLengthUom__s_x002fcm = 10,
	eml21__TimePerLengthUom__s_x002fft = 11,
	eml21__TimePerLengthUom__s_x002fin = 12,
	eml21__TimePerLengthUom__s_x002fm = 13,
	eml21__TimePerLengthUom__us_x002fft = 14,
	eml21__TimePerLengthUom__us_x002fin = 15,
	eml21__TimePerLengthUom__us_x002fm = 16
};
#endif

/* eml2_1ForGsoap.h:10889 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom (-985)

/* eml21:TimePerMassUom */
enum eml21__TimePerMassUom {
	eml21__TimePerMassUom__s_x002fkg = 0
};
#endif

/* eml2_1ForGsoap.h:10901 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom (-986)

/* eml21:TimePerTimeUom */
enum eml21__TimePerTimeUom {
	eml21__TimePerTimeUom___x0025 = 0,
	eml21__TimePerTimeUom__Euc = 1,
	eml21__TimePerTimeUom__ms_x002fs = 2,
	eml21__TimePerTimeUom__s_x002fs = 3
};
#endif

/* eml2_1ForGsoap.h:10928 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom (-987)

/* eml21:TimePerVolumeUom */
enum eml21__TimePerVolumeUom {
	eml21__TimePerVolumeUom__0_x002e001_x0020d_x002fft3 = 0,
	eml21__TimePerVolumeUom__d_x002fbbl = 1,
	eml21__TimePerVolumeUom__d_x002fft3 = 2,
	eml21__TimePerVolumeUom__d_x002fm3 = 3,
	eml21__TimePerVolumeUom__h_x002fft3 = 4,
	eml21__TimePerVolumeUom__h_x002fm3 = 5,
	eml21__TimePerVolumeUom__s_x002fft3 = 6,
	eml21__TimePerVolumeUom__s_x002fL = 7,
	eml21__TimePerVolumeUom__s_x002fm3 = 8,
	eml21__TimePerVolumeUom__s_x002fqt_x005bUK_x005d = 9,
	eml21__TimePerVolumeUom__s_x002fqt_x005bUS_x005d = 10
};
#endif

/* eml2_1ForGsoap.h:10990 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom (-988)

/* eml21:TimeUom */
enum eml21__TimeUom {
	eml21__TimeUom__a = 'a',
	eml21__TimeUom__d = 'd',
	eml21__TimeUom__h = 'h',
	eml21__TimeUom__s = 's',
	eml21__TimeUom__1_x002f2_x0020ms = 't',
	eml21__TimeUom__100_x0020ka_x005bt_x005d = 'u',
	eml21__TimeUom__a_x005bt_x005d = 'v',
	eml21__TimeUom__ca = 'w',
	eml21__TimeUom__cs = 'x',
	eml21__TimeUom__ds = 'y',
	eml21__TimeUom__Ea_x005bt_x005d = 'z',
	eml21__TimeUom__fa = 123,
	eml21__TimeUom__Ga_x005bt_x005d = 124,
	eml21__TimeUom__hs = 125,
	eml21__TimeUom__ka_x005bt_x005d = 126,
	eml21__TimeUom__Ma_x005bt_x005d = 127,
	eml21__TimeUom__min_ = 128,
	eml21__TimeUom__ms = 129,
	eml21__TimeUom__na = 130,
	eml21__TimeUom__ns = 131,
	eml21__TimeUom__ps = 132,
	eml21__TimeUom__Ta_x005bt_x005d = 133,
	eml21__TimeUom__us = 134,
	eml21__TimeUom__wk = 135
};
#endif

/* eml2_1ForGsoap.h:11121 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom (-989)

/* eml21:VerticalCoordinateUom */
enum eml21__VerticalCoordinateUom {
	eml21__VerticalCoordinateUom__m = 'm',
	eml21__VerticalCoordinateUom__ft = 'n',
	eml21__VerticalCoordinateUom__ftUS = 'o',
	eml21__VerticalCoordinateUom__ftBr_x002865_x0029 = 'p'
};
#endif

/* eml2_1ForGsoap.h:11148 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom (-990)

/* eml21:VolumeFlowRatePerVolumeFlowRateUom */
enum eml21__VolumeFlowRatePerVolumeFlowRateUom {
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0025 = 0,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 1,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 2,
	eml21__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 3,
	eml21__VolumeFlowRatePerVolumeFlowRateUom__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 4,
	eml21__VolumeFlowRatePerVolumeFlowRateUom__Euc = 5
};
#endif

/* eml2_1ForGsoap.h:11185 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom (-991)

/* eml21:VolumePerAreaUom */
enum eml21__VolumePerAreaUom {
	eml21__VolumePerAreaUom__1E6_x0020bbl_x002facre = 0,
	eml21__VolumePerAreaUom__bbl_x002facre = 1,
	eml21__VolumePerAreaUom__ft3_x002fft2 = 2,
	eml21__VolumePerAreaUom__m3_x002fm2 = 3
};
#endif

/* eml2_1ForGsoap.h:11212 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom (-992)

/* eml21:VolumePerLengthUom */
enum eml21__VolumePerLengthUom {
	eml21__VolumePerLengthUom__0_x002e01_x0020dm3_x002fkm = 0,
	eml21__VolumePerLengthUom__0_x002e01_x0020L_x002fkm = 1,
	eml21__VolumePerLengthUom__bbl_x002fft = 2,
	eml21__VolumePerLengthUom__bbl_x002fin = 3,
	eml21__VolumePerLengthUom__bbl_x002fmi = 4,
	eml21__VolumePerLengthUom__dm3_x002fm = 5,
	eml21__VolumePerLengthUom__ft3_x002fft = 6,
	eml21__VolumePerLengthUom__gal_x005bUK_x005d_x002fmi = 7,
	eml21__VolumePerLengthUom__gal_x005bUS_x005d_x002fft = 8,
	eml21__VolumePerLengthUom__gal_x005bUS_x005d_x002fmi = 9,
	eml21__VolumePerLengthUom__in3_x002fft = 10,
	eml21__VolumePerLengthUom__L_x002fm = 11,
	eml21__VolumePerLengthUom__m3_x002fkm = 12,
	eml21__VolumePerLengthUom__m3_x002fm = 13
};
#endif

/* eml2_1ForGsoap.h:11289 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom (-993)

/* eml21:VolumePerMassUom */
enum eml21__VolumePerMassUom {
	eml21__VolumePerMassUom__0_x002e01_x0020L_x002fkg = 0,
	eml21__VolumePerMassUom__bbl_x002fton_x005bUK_x005d = 1,
	eml21__VolumePerMassUom__bbl_x002fton_x005bUS_x005d = 2,
	eml21__VolumePerMassUom__cm3_x002fg = 3,
	eml21__VolumePerMassUom__dm3_x002fkg = 4,
	eml21__VolumePerMassUom__dm3_x002ft = 5,
	eml21__VolumePerMassUom__ft3_x002fkg = 6,
	eml21__VolumePerMassUom__ft3_x002flbm = 7,
	eml21__VolumePerMassUom__ft3_x002fsack_x005b94lbm_x005d = 8,
	eml21__VolumePerMassUom__gal_x005bUK_x005d_x002flbm = 9,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002flbm = 10,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 11,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 12,
	eml21__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 13,
	eml21__VolumePerMassUom__L_x002fkg = 14,
	eml21__VolumePerMassUom__L_x002ft = 15,
	eml21__VolumePerMassUom__L_x002fton_x005bUK_x005d = 16,
	eml21__VolumePerMassUom__m3_x002fg = 17,
	eml21__VolumePerMassUom__m3_x002fkg = 18,
	eml21__VolumePerMassUom__m3_x002ft = 19,
	eml21__VolumePerMassUom__m3_x002fton_x005bUK_x005d = 20,
	eml21__VolumePerMassUom__m3_x002fton_x005bUS_x005d = 21
};
#endif

/* eml2_1ForGsoap.h:11406 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom (-994)

/* eml21:VolumePerPressureUom */
enum eml21__VolumePerPressureUom {
	eml21__VolumePerPressureUom__bbl_x002fpsi = 0,
	eml21__VolumePerPressureUom__m3_x002fkPa = 1,
	eml21__VolumePerPressureUom__m3_x002fPa = 2
};
#endif

/* eml2_1ForGsoap.h:11428 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom (-995)

/* eml21:VolumePerRotationUom */
enum eml21__VolumePerRotationUom {
	eml21__VolumePerRotationUom__ft3_x002frad = 0,
	eml21__VolumePerRotationUom__m3_x002frad = 1,
	eml21__VolumePerRotationUom__m3_x002frev = 2
};
#endif

/* eml2_1ForGsoap.h:11450 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom (-996)

/* eml21:VolumePerTimeLengthUom */
enum eml21__VolumePerTimeLengthUom {
	eml21__VolumePerTimeLengthUom__1000_x0020bbl_x002eft_x002fd = 0,
	eml21__VolumePerTimeLengthUom__1000_x0020m4_x002fd = 1,
	eml21__VolumePerTimeLengthUom__m4_x002fs = 2
};
#endif

/* eml2_1ForGsoap.h:11472 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom (-997)

/* eml21:VolumePerTimePerAreaUom */
enum eml21__VolumePerTimePerAreaUom {
	eml21__VolumePerTimePerAreaUom__ft3_x002f_x0028min_x002eft2_x0029 = 0,
	eml21__VolumePerTimePerAreaUom__ft3_x002f_x0028s_x002eft2_x0029 = 1,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 2,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 3,
	eml21__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 4,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 5,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 6,
	eml21__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 7,
	eml21__VolumePerTimePerAreaUom__m3_x002f_x0028s_x002em2_x0029 = 8
};
#endif

/* eml2_1ForGsoap.h:11524 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom (-998)

/* eml21:VolumePerTimePerLengthUom */
enum eml21__VolumePerTimePerLengthUom {
	eml21__VolumePerTimePerLengthUom__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 0,
	eml21__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028d_x002em_x0029 = 1,
	eml21__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028h_x002em_x0029 = 2,
	eml21__VolumePerTimePerLengthUom__bbl_x002f_x0028d_x002eft_x0029 = 3,
	eml21__VolumePerTimePerLengthUom__ft3_x002f_x0028d_x002eft_x0029 = 4,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 5,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 6,
	eml21__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 7,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 8,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 9,
	eml21__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 10,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028d_x002em_x0029 = 11,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028h_x002em_x0029 = 12,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002eft_x0029 = 13,
	eml21__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002em_x0029 = 14
};
#endif

/* eml2_1ForGsoap.h:11606 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom (-999)

/* eml21:VolumePerTimePerPressureLengthUom */
enum eml21__VolumePerTimePerPressureLengthUom {
	eml21__VolumePerTimePerPressureLengthUom__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 0,
	eml21__VolumePerTimePerPressureLengthUom__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 1,
	eml21__VolumePerTimePerPressureLengthUom__m2_x002f_x0028kPa_x002ed_x0029 = 2,
	eml21__VolumePerTimePerPressureLengthUom__m2_x002f_x0028Pa_x002es_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:11633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom (-1000)

/* eml21:VolumePerTimePerPressureUom */
enum eml21__VolumePerTimePerPressureUom {
	eml21__VolumePerTimePerPressureUom__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 0,
	eml21__VolumePerTimePerPressureUom__bbl_x002f_x0028kPa_x002ed_x0029 = 1,
	eml21__VolumePerTimePerPressureUom__bbl_x002f_x0028psi_x002ed_x0029 = 2,
	eml21__VolumePerTimePerPressureUom__L_x002f_x0028bar_x002emin_x0029 = 3,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002ed_x0029 = 4,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002eh_x0029 = 5,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002emin_x0029 = 6,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002ed_x0029 = 7,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002eh_x0029 = 8,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028Pa_x002es_x0029 = 9,
	eml21__VolumePerTimePerPressureUom__m3_x002f_x0028psi_x002ed_x0029 = 10
};
#endif

/* eml2_1ForGsoap.h:11695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom (-1001)

/* eml21:VolumePerTimePerTimeUom */
enum eml21__VolumePerTimePerTimeUom {
	eml21__VolumePerTimePerTimeUom__bbl_x002fd2 = 0,
	eml21__VolumePerTimePerTimeUom__bbl_x002fh2 = 1,
	eml21__VolumePerTimePerTimeUom__dm3_x002fs2 = 2,
	eml21__VolumePerTimePerTimeUom__ft3_x002fd2 = 3,
	eml21__VolumePerTimePerTimeUom__ft3_x002fh2 = 4,
	eml21__VolumePerTimePerTimeUom__ft3_x002fmin2 = 5,
	eml21__VolumePerTimePerTimeUom__ft3_x002fs2 = 6,
	eml21__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fh2 = 7,
	eml21__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fmin2 = 8,
	eml21__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fh2 = 9,
	eml21__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fmin2 = 10,
	eml21__VolumePerTimePerTimeUom__L_x002fs2 = 11,
	eml21__VolumePerTimePerTimeUom__m3_x002fd2 = 12,
	eml21__VolumePerTimePerTimeUom__m3_x002fs2 = 13
};
#endif

/* eml2_1ForGsoap.h:11772 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom (-1002)

/* eml21:VolumePerTimePerVolumeUom */
enum eml21__VolumePerTimePerVolumeUom {
	eml21__VolumePerTimePerVolumeUom__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 0,
	eml21__VolumePerTimePerVolumeUom__m3_x002f_x0028s_x002em3_x0029 = 1
};
#endif

/* eml2_1ForGsoap.h:11789 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom (-1003)

/* eml21:VolumePerTimeUom */
enum eml21__VolumePerTimeUom {
	eml21__VolumePerTimeUom__1_x002f30_x0020cm3_x002fmin = 0,
	eml21__VolumePerTimeUom__1000_x0020bbl_x002fd = 1,
	eml21__VolumePerTimeUom__1000_x0020ft3_x002fd = 2,
	eml21__VolumePerTimeUom__1000_x0020m3_x002fd = 3,
	eml21__VolumePerTimeUom__1000_x0020m3_x002fh = 4,
	eml21__VolumePerTimeUom__1E6_x0020bbl_x002fd = 5,
	eml21__VolumePerTimeUom__1E6_x0020ft3_x002fd = 6,
	eml21__VolumePerTimeUom__1E6_x0020m3_x002fd = 7,
	eml21__VolumePerTimeUom__bbl_x002fd = 8,
	eml21__VolumePerTimeUom__bbl_x002fh = 9,
	eml21__VolumePerTimeUom__bbl_x002fmin = 10,
	eml21__VolumePerTimeUom__cm3_x002fh = 11,
	eml21__VolumePerTimeUom__cm3_x002fmin = 12,
	eml21__VolumePerTimeUom__cm3_x002fs = 13,
	eml21__VolumePerTimeUom__dm3_x002fs = 14,
	eml21__VolumePerTimeUom__ft3_x002fd = 15,
	eml21__VolumePerTimeUom__ft3_x002fh = 16,
	eml21__VolumePerTimeUom__ft3_x002fmin = 17,
	eml21__VolumePerTimeUom__ft3_x002fs = 18,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fd = 19,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fh = 20,
	eml21__VolumePerTimeUom__gal_x005bUK_x005d_x002fmin = 21,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fd = 22,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fh = 23,
	eml21__VolumePerTimeUom__gal_x005bUS_x005d_x002fmin = 24,
	eml21__VolumePerTimeUom__L_x002fh = 25,
	eml21__VolumePerTimeUom__L_x002fmin = 26,
	eml21__VolumePerTimeUom__L_x002fs = 27,
	eml21__VolumePerTimeUom__m3_x002fd = 28,
	eml21__VolumePerTimeUom__m3_x002fh = 29,
	eml21__VolumePerTimeUom__m3_x002fmin = 30,
	eml21__VolumePerTimeUom__m3_x002fs = 31
};
#endif

/* eml2_1ForGsoap.h:11956 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom (-1004)

/* eml21:VolumePerVolumeUom */
enum eml21__VolumePerVolumeUom {
	eml21__VolumePerVolumeUom___x0025 = 0,
	eml21__VolumePerVolumeUom___x0025_x005bvol_x005d = 1,
	eml21__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fft3 = 2,
	eml21__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fm3 = 3,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 4,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 5,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 6,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 7,
	eml21__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 8,
	eml21__VolumePerVolumeUom__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 9,
	eml21__VolumePerVolumeUom__0_x002e01_x0020bbl_x002fbbl = 10,
	eml21__VolumePerVolumeUom__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 11,
	eml21__VolumePerVolumeUom__0_x002e1_x0020L_x002fbbl = 12,
	eml21__VolumePerVolumeUom__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 13,
	eml21__VolumePerVolumeUom__1000_x0020ft3_x002fbbl = 14,
	eml21__VolumePerVolumeUom__1000_x0020m3_x002fm3 = 15,
	eml21__VolumePerVolumeUom__1E_6_x0020acre_x002eft_x002fbbl = 16,
	eml21__VolumePerVolumeUom__1E_6_x0020bbl_x002fft3 = 17,
	eml21__VolumePerVolumeUom__1E_6_x0020bbl_x002fm3 = 18,
	eml21__VolumePerVolumeUom__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 19,
	eml21__VolumePerVolumeUom__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 20,
	eml21__VolumePerVolumeUom__1E6_x0020ft3_x002fbbl = 21,
	eml21__VolumePerVolumeUom__bbl_x002f_x0028acre_x002eft_x0029 = 22,
	eml21__VolumePerVolumeUom__bbl_x002fbbl = 23,
	eml21__VolumePerVolumeUom__bbl_x002fft3 = 24,
	eml21__VolumePerVolumeUom__bbl_x002fm3 = 25,
	eml21__VolumePerVolumeUom__cEuc = 26,
	eml21__VolumePerVolumeUom__cm3_x002fcm3 = 27,
	eml21__VolumePerVolumeUom__cm3_x002fL = 28,
	eml21__VolumePerVolumeUom__cm3_x002fm3 = 29,
	eml21__VolumePerVolumeUom__dm3_x002fm3 = 30,
	eml21__VolumePerVolumeUom__Euc = 31,
	eml21__VolumePerVolumeUom__ft3_x002fbbl = 32,
	eml21__VolumePerVolumeUom__ft3_x002fft3 = 33,
	eml21__VolumePerVolumeUom__gal_x005bUK_x005d_x002fft3 = 34,
	eml21__VolumePerVolumeUom__gal_x005bUS_x005d_x002fbbl = 35,
	eml21__VolumePerVolumeUom__gal_x005bUS_x005d_x002fft3 = 36,
	eml21__VolumePerVolumeUom__L_x002fm3 = 37,
	eml21__VolumePerVolumeUom__m3_x002f_x0028ha_x002em_x0029 = 38,
	eml21__VolumePerVolumeUom__m3_x002fbbl = 39,
	eml21__VolumePerVolumeUom__m3_x002fm3 = 40,
	eml21__VolumePerVolumeUom__mL_x002fgal_x005bUK_x005d = 41,
	eml21__VolumePerVolumeUom__mL_x002fgal_x005bUS_x005d = 42,
	eml21__VolumePerVolumeUom__mL_x002fmL = 43,
	eml21__VolumePerVolumeUom__ppk = 44,
	eml21__VolumePerVolumeUom__ppm = 45,
	eml21__VolumePerVolumeUom__ppm_x005bvol_x005d = 46
};
#endif

/* eml2_1ForGsoap.h:12198 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom (-1005)

/* eml21:VolumetricHeatTransferCoefficientUom */
enum eml21__VolumetricHeatTransferCoefficientUom {
	eml21__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edeltaF_x0029 = 0,
	eml21__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edeltaF_x0029 = 1,
	eml21__VolumetricHeatTransferCoefficientUom__kW_x002f_x0028m3_x002edeltaK_x0029 = 2,
	eml21__VolumetricHeatTransferCoefficientUom__W_x002f_x0028m3_x002edeltaK_x0029 = 3
};
#endif

/* eml2_1ForGsoap.h:12225 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom (-1006)

/* eml21:VolumetricThermalExpansionUom */
enum eml21__VolumetricThermalExpansionUom {
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaC = 0,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaF = 1,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaK = 2,
	eml21__VolumetricThermalExpansionUom__1_x002fdeltaR = 3,
	eml21__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaC_x0029 = 4,
	eml21__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaF_x0029 = 5,
	eml21__VolumetricThermalExpansionUom__m3_x002f_x0028m3_x002edeltaK_x0029 = 6,
	eml21__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaC = 7,
	eml21__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaF = 8
};
#endif

/* eml2_1ForGsoap.h:12277 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom (-1007)

/* eml21:VolumeUom */
enum eml21__VolumeUom {
	eml21__VolumeUom__L = 'L',
	eml21__VolumeUom__1000_x0020bbl = 'M',
	eml21__VolumeUom__1000_x0020ft3 = 'N',
	eml21__VolumeUom__1000_x0020gal_x005bUK_x005d = 'O',
	eml21__VolumeUom__1000_x0020gal_x005bUS_x005d = 'P',
	eml21__VolumeUom__1000_x0020m3 = 'Q',
	eml21__VolumeUom__1E_6_x0020gal_x005bUS_x005d = 'R',
	eml21__VolumeUom__1E12_x0020ft3 = 'S',
	eml21__VolumeUom__1E6_x0020bbl = 'T',
	eml21__VolumeUom__1E6_x0020ft3 = 'U',
	eml21__VolumeUom__1E6_x0020m3 = 'V',
	eml21__VolumeUom__1E9_x0020bbl = 'W',
	eml21__VolumeUom__1E9_x0020ft3 = 'X',
	eml21__VolumeUom__acre_x002eft = 'Y',
	eml21__VolumeUom__bbl = 'Z',
	eml21__VolumeUom__cm3 = 91,
	eml21__VolumeUom__dm3 = 92,
	eml21__VolumeUom__floz_x005bUK_x005d = 93,
	eml21__VolumeUom__floz_x005bUS_x005d = 94,
	eml21__VolumeUom__ft3 = 95,
	eml21__VolumeUom__gal_x005bUK_x005d = 96,
	eml21__VolumeUom__gal_x005bUS_x005d = 'a',
	eml21__VolumeUom__ha_x002em = 'b',
	eml21__VolumeUom__hL = 'c',
	eml21__VolumeUom__in3 = 'd',
	eml21__VolumeUom__km3 = 'e',
	eml21__VolumeUom__m3 = 'f',
	eml21__VolumeUom__mi3 = 'g',
	eml21__VolumeUom__mL = 'h',
	eml21__VolumeUom__mm3 = 'i',
	eml21__VolumeUom__pt_x005bUK_x005d = 'j',
	eml21__VolumeUom__pt_x005bUS_x005d = 'k',
	eml21__VolumeUom__qt_x005bUK_x005d = 'l',
	eml21__VolumeUom__qt_x005bUS_x005d = 'm',
	eml21__VolumeUom__um2_x002em = 'n',
	eml21__VolumeUom__yd3 = 'o'
};
#endif

/* eml2_1ForGsoap.h:12468 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PrincipalMeridian (-1008)

/* witsml20:PrincipalMeridian */
enum witsml20__PrincipalMeridian {
	witsml20__PrincipalMeridian__1st_x0020Principal_x0020Meridian = 0,
	witsml20__PrincipalMeridian__2nd_x0020Principal_x0020Meridian = 1,
	witsml20__PrincipalMeridian__3rd_x0020Principal_x0020Meridian = 2,
	witsml20__PrincipalMeridian__4th_x0020Principal_x0020Meridian = 3,
	witsml20__PrincipalMeridian__5th_x0020Principal_x0020Meridian = 4,
	witsml20__PrincipalMeridian__6th_x0020Principal_x0020Meridian = 5,
	witsml20__PrincipalMeridian__Black_x0020Hills_x0020Meridian = 6,
	witsml20__PrincipalMeridian__Boise_x0020Meridian = 7,
	witsml20__PrincipalMeridian__Chickasaw_x0020Meridian = 8,
	witsml20__PrincipalMeridian__Choctaw_x0020Meridian = 9,
	witsml20__PrincipalMeridian__Cimarron_x0020Meridian = 10,
	witsml20__PrincipalMeridian__Copper_x0020River_x0020Meridian = 11,
	witsml20__PrincipalMeridian__Fairbanks_x0020Meridian = 12,
	witsml20__PrincipalMeridian__Gila_x0020and_x0020Salt_x0020River_x0020Meridian = 13,
	witsml20__PrincipalMeridian__Humboldt_x0020Meridian = 14,
	witsml20__PrincipalMeridian__Huntsville_x0020Meridian = 15,
	witsml20__PrincipalMeridian__Indian_x0020Meridian = 16,
	witsml20__PrincipalMeridian__Kateel_x0020River_x0020Meridian = 17,
	witsml20__PrincipalMeridian__Lousiana_x0020Meridian = 18,
	witsml20__PrincipalMeridian__Michigan_x0020Meridian = 19,
	witsml20__PrincipalMeridian__Montana_x0020Meridian = 20,
	witsml20__PrincipalMeridian__Mount_x0020Diablo_x0020Meridian = 21,
	witsml20__PrincipalMeridian__Navajo_x0020Meridian = 22,
	witsml20__PrincipalMeridian__New_x0020Mexico_x0020Meridian = 23,
	witsml20__PrincipalMeridian__Saint_x0020Helena_x0020Meridian = 24,
	witsml20__PrincipalMeridian__Saint_x0020Stephens_x0020Meridian = 25,
	witsml20__PrincipalMeridian__Salt_x0020Lake_x0020Meridian = 26,
	witsml20__PrincipalMeridian__San_x0020Bernardo_x0020Meridian = 27,
	witsml20__PrincipalMeridian__Seward_x0020Meridian = 28,
	witsml20__PrincipalMeridian__Tallahassee_x0020Meridian = 29,
	witsml20__PrincipalMeridian__Uintah_x0020Meridian = 30,
	witsml20__PrincipalMeridian__Umiat_x0020Meridian = 31,
	witsml20__PrincipalMeridian__Ute_x0020Meridian = 32,
	witsml20__PrincipalMeridian__Washington_x0020Meridian = 33,
	witsml20__PrincipalMeridian__Williamette_x0020Meridian = 34,
	witsml20__PrincipalMeridian__Wind_x0020River_x0020Meridian = 35
};
#endif

/* eml2_1ForGsoap.h:12659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EastOrWest (-1009)

/* witsml20:EastOrWest */
enum witsml20__EastOrWest {
	witsml20__EastOrWest__east = 0,
	witsml20__EastOrWest__west = 1
};
#endif

/* eml2_1ForGsoap.h:12680 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NorthOrSouth (-1010)

/* witsml20:NorthOrSouth */
enum witsml20__NorthOrSouth {
	witsml20__NorthOrSouth__north = 0,
	witsml20__NorthOrSouth__south = 1
};
#endif

/* eml2_1ForGsoap.h:12701 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellPurpose (-1011)

/* witsml20:WellPurpose */
enum witsml20__WellPurpose {
	witsml20__WellPurpose__appraisal = 0,
	witsml20__WellPurpose__appraisal_x0020_x002d__x0020confirmation_x0020appraisal = 1,
	witsml20__WellPurpose__appraisal_x0020_x002d__x0020exploratory_x0020appraisal = 2,
	witsml20__WellPurpose__exploration = 3,
	witsml20__WellPurpose__exploration_x0020_x002d__x0020deeper_pool_x0020wildcat = 4,
	witsml20__WellPurpose__exploration_x0020_x002d__x0020new_field_x0020wildcat = 5,
	witsml20__WellPurpose__exploration_x0020_x002d__x0020new_pool_x0020wildcat = 6,
	witsml20__WellPurpose__exploration_x0020_x002d__x0020outpost_x0020wildcat = 7,
	witsml20__WellPurpose__exploration_x0020_x002d__x0020shallower_pool_x0020wildcat = 8,
	witsml20__WellPurpose__development = 9,
	witsml20__WellPurpose__development_x0020_x002d__x0020infill_x0020development = 10,
	witsml20__WellPurpose__development_x0020_x002d__x0020injector = 11,
	witsml20__WellPurpose__development_x0020_x002d__x0020producer = 12,
	witsml20__WellPurpose__fluid_x0020storage = 13,
	witsml20__WellPurpose__fluid_x0020storage_x0020_x002d__x0020gas_x0020storage = 14,
	witsml20__WellPurpose__general_x0020srvc = 15,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020borehole_x0020re_acquisition = 16,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020observation = 17,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020relief = 18,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020research = 19,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020drill_x0020test = 20,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020strat_x0020test = 21,
	witsml20__WellPurpose__general_x0020srvc_x0020_x002d__x0020waste_x0020disposal = 22,
	witsml20__WellPurpose__mineral = 23
};
#endif

/* eml2_1ForGsoap.h:12832 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellFluid (-1012)

/* witsml20:WellFluid */
enum witsml20__WellFluid {
	witsml20__WellFluid__air = 0,
	witsml20__WellFluid__condensate = 1,
	witsml20__WellFluid__dry = 2,
	witsml20__WellFluid__gas = 3,
	witsml20__WellFluid__gas_water = 4,
	witsml20__WellFluid__non_x0020HC_x0020gas = 5,
	witsml20__WellFluid__non_x0020HC_x0020gas_x0020_x002d__x0020CO2 = 6,
	witsml20__WellFluid__oil = 7,
	witsml20__WellFluid__oil_gas = 8,
	witsml20__WellFluid__oil_water = 9,
	witsml20__WellFluid__steam = 10,
	witsml20__WellFluid__water = 11,
	witsml20__WellFluid__water_x0020_x002d__x0020brine = 12,
	witsml20__WellFluid__water_x0020_x002d__x0020fresh_x0020water = 13
};
#endif

/* eml2_1ForGsoap.h:12913 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellDirection (-1013)

/* witsml20:WellDirection */
enum witsml20__WellDirection {
	witsml20__WellDirection__huff_n_puff = 0,
	witsml20__WellDirection__injector = 1,
	witsml20__WellDirection__producer = 2,
	witsml20__WellDirection__uncertain = 3
};
#endif

/* eml2_1ForGsoap.h:12944 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ElevCodeEnum (-1014)

/* witsml20:ElevCodeEnum */
enum witsml20__ElevCodeEnum {
	witsml20__ElevCodeEnum__CF = 0,
	witsml20__ElevCodeEnum__CV = 1,
	witsml20__ElevCodeEnum__DF = 2,
	witsml20__ElevCodeEnum__GL = 3,
	witsml20__ElevCodeEnum__KB = 4,
	witsml20__ElevCodeEnum__RB = 5,
	witsml20__ElevCodeEnum__RT = 6,
	witsml20__ElevCodeEnum__SF = 7,
	witsml20__ElevCodeEnum__LAT = 8,
	witsml20__ElevCodeEnum__SL = 9,
	witsml20__ElevCodeEnum__MHHW = 10,
	witsml20__ElevCodeEnum__MHW = 11,
	witsml20__ElevCodeEnum__MLLW = 12,
	witsml20__ElevCodeEnum__MLW = 13,
	witsml20__ElevCodeEnum__MTL = 14,
	witsml20__ElevCodeEnum__KO = 15,
	witsml20__ElevCodeEnum__unknown = 16
};
#endif

/* eml2_1ForGsoap.h:13040 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagNumberingScheme (-1015)

/* witsml20:NameTagNumberingScheme */
enum witsml20__NameTagNumberingScheme {
	witsml20__NameTagNumberingScheme__ANSI_x002fAIM_BC10 = 0,
	witsml20__NameTagNumberingScheme__ANSI_x002fAIM_BC2 = 1,
	witsml20__NameTagNumberingScheme__ANSI_x002fAIM_BC6 = 2,
	witsml20__NameTagNumberingScheme__EAN_x002eUCC = 3,
	witsml20__NameTagNumberingScheme__EPC64 = 4,
	witsml20__NameTagNumberingScheme__EPC96 = 5,
	witsml20__NameTagNumberingScheme__F2F = 6,
	witsml20__NameTagNumberingScheme__MFM = 7,
	witsml20__NameTagNumberingScheme__MSRCID = 8,
	witsml20__NameTagNumberingScheme__serial_x0020number = 9
};
#endif

/* eml2_1ForGsoap.h:13061 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagTechnology (-1016)

/* witsml20:NameTagTechnology */
enum witsml20__NameTagTechnology {
	witsml20__NameTagTechnology__intrinsic = 0,
	witsml20__NameTagTechnology__labeled = 1,
	witsml20__NameTagTechnology__painted = 2,
	witsml20__NameTagTechnology__stamped = 3,
	witsml20__NameTagTechnology__tagged = 4,
	witsml20__NameTagTechnology__temporary = 5
};
#endif

/* eml2_1ForGsoap.h:13078 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagLocation (-1017)

/* witsml20:NameTagLocation */
enum witsml20__NameTagLocation {
	witsml20__NameTagLocation__body = 0,
	witsml20__NameTagLocation__box = 1,
	witsml20__NameTagLocation__other = 2,
	witsml20__NameTagLocation__pin = 3
};
#endif

/* eml2_1ForGsoap.h:13093 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreType (-1018)

/* witsml20:WellboreType */
enum witsml20__WellboreType {
	witsml20__WellboreType__bypass = 0,
	witsml20__WellboreType__initial = 1,
	witsml20__WellboreType__redrill = 2,
	witsml20__WellboreType__reentry = 3,
	witsml20__WellboreType__respud = 4,
	witsml20__WellboreType__sidetrack = 5
};
#endif

/* eml2_1ForGsoap.h:13134 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreShape (-1019)

/* witsml20:WellboreShape */
enum witsml20__WellboreShape {
	witsml20__WellboreShape__build_x0020and_x0020hold = 0,
	witsml20__WellboreShape__deviated = 1,
	witsml20__WellboreShape__double_x0020kickoff = 2,
	witsml20__WellboreShape__horizontal = 3,
	witsml20__WellboreShape__S_shaped = 4,
	witsml20__WellboreShape__vertical = 5
};
#endif

/* eml2_1ForGsoap.h:13175 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PhysicalStatus (-1020)

/* witsml20:PhysicalStatus */
enum witsml20__PhysicalStatus {
	witsml20__PhysicalStatus__closed = 0,
	witsml20__PhysicalStatus__open = 1,
	witsml20__PhysicalStatus__proposed = 2
};
#endif

/* eml2_1ForGsoap.h:13189 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatus (-1021)

/* witsml20:PerforationStatus */
enum witsml20__PerforationStatus {
	witsml20__PerforationStatus__open = 0,
	witsml20__PerforationStatus__proposed = 1,
	witsml20__PerforationStatus__squeezed = 2
};
#endif

/* eml2_1ForGsoap.h:13203 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionTypes (-1022)

/* witsml20:CasingConnectionTypes */
enum witsml20__CasingConnectionTypes {
	witsml20__CasingConnectionTypes__landed = 0,
	witsml20__CasingConnectionTypes__self_sealing_threaded = 1,
	witsml20__CasingConnectionTypes__welded = 2
};
#endif

/* eml2_1ForGsoap.h:13217 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionTypes (-1023)

/* witsml20:TubingConnectionTypes */
enum witsml20__TubingConnectionTypes {
	witsml20__TubingConnectionTypes__dogscompressionfit_notsealed = 0,
	witsml20__TubingConnectionTypes__landed = 1,
	witsml20__TubingConnectionTypes__latched = 2,
	witsml20__TubingConnectionTypes__radial = 3,
	witsml20__TubingConnectionTypes__selfsealing_threaded = 4,
	witsml20__TubingConnectionTypes__slipfit_sealed = 5,
	witsml20__TubingConnectionTypes__threaded = 6
};
#endif

/* eml2_1ForGsoap.h:13235 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionTypes (-1024)

/* witsml20:RodConnectionTypes */
enum witsml20__RodConnectionTypes {
	witsml20__RodConnectionTypes__eating_x0020nipple_cup = 0,
	witsml20__RodConnectionTypes__latched = 1,
	witsml20__RodConnectionTypes__seating_x0020nipple_mechanical = 2,
	witsml20__RodConnectionTypes__slipfit_x0020sealed = 3,
	witsml20__RodConnectionTypes__threaded = 4,
	witsml20__RodConnectionTypes__welded = 5
};
#endif

/* eml2_1ForGsoap.h:13252 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionTypes (-1025)

/* witsml20:OtherConnectionTypes */
enum witsml20__OtherConnectionTypes {
	witsml20__OtherConnectionTypes__cemented_in_place = 0,
	witsml20__OtherConnectionTypes__dogscompressionfit_sealed = 1
};
#endif

/* eml2_1ForGsoap.h:13265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionFormType (-1026)

/* witsml20:ConnectionFormType */
enum witsml20__ConnectionFormType {
	witsml20__ConnectionFormType__box = 0,
	witsml20__ConnectionFormType__flange = 1,
	witsml20__ConnectionFormType__mandrel = 2,
	witsml20__ConnectionFormType__pin = 3,
	witsml20__ConnectionFormType__welded = 4
};
#endif

/* eml2_1ForGsoap.h:13281 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentType (-1027)

/* witsml20:EquipmentType */
enum witsml20__EquipmentType {
	witsml20__EquipmentType__bridge_x0020plug = 0,
	witsml20__EquipmentType__bull_x0020plug = 1,
	witsml20__EquipmentType__capillary_x0020tubing = 2,
	witsml20__EquipmentType__casing_x0020crossover = 3,
	witsml20__EquipmentType__casing_x0020hanger = 4,
	witsml20__EquipmentType__casing_x0020head = 5,
	witsml20__EquipmentType__casing_x0020liner_expandable = 6,
	witsml20__EquipmentType__casing_x0020shoe = 7,
	witsml20__EquipmentType__casing_x0020spool = 8,
	witsml20__EquipmentType__casing_x002fcasing_x0020liner = 9,
	witsml20__EquipmentType__cement_x0020_x0028behind_x0020casing_x0029 = 10,
	witsml20__EquipmentType__cement_x0020basket = 11,
	witsml20__EquipmentType__cement_x0020retainer = 12,
	witsml20__EquipmentType__cement_x0020squeeze = 13,
	witsml20__EquipmentType__cement_x0020stage_x0020tool = 14,
	witsml20__EquipmentType__chemical_x0020injection_x0020mandrel = 15,
	witsml20__EquipmentType__chemical_x0020injection_x0020valve = 16,
	witsml20__EquipmentType__corrosion_x0020coupon_x0020carrier = 17,
	witsml20__EquipmentType__dip_x0020tube = 18,
	witsml20__EquipmentType__downhole_x0020choke = 19,
	witsml20__EquipmentType__downhole_x0020sensor = 20,
	witsml20__EquipmentType__ESP_x0020assembly = 21,
	witsml20__EquipmentType__ESP_x0020bolt_x0020on_x0020discharge = 22,
	witsml20__EquipmentType__ESP_x0020bolt_x0020on_x0020intake = 23,
	witsml20__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020base = 24,
	witsml20__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020head = 25,
	witsml20__EquipmentType__ESP_x0020cable = 26,
	witsml20__EquipmentType__ESP_x0020gas_x0020handler = 27,
	witsml20__EquipmentType__ESP_x0020gas_x0020separator = 28,
	witsml20__EquipmentType__ESP_x0020lower_x0020pigtail = 29,
	witsml20__EquipmentType__ESP_x0020motor = 30,
	witsml20__EquipmentType__ESP_x0020motor_x0020base_x0020centralizer = 31,
	witsml20__EquipmentType__ESP_x0020motor_x0020flat_x0020cable = 32,
	witsml20__EquipmentType__ESP_x0020motor_x0020shroud = 33,
	witsml20__EquipmentType__ESP_x0020promotor = 34,
	witsml20__EquipmentType__ESP_x0020pump = 35,
	witsml20__EquipmentType__ESP_x0020pump_x0020discharge_x0020sensor_x0020sub = 36,
	witsml20__EquipmentType__ESP_x0020seal = 37,
	witsml20__EquipmentType__expansion_x0020joint = 38,
	witsml20__EquipmentType__external_x0020cementing_x0020port = 39,
	witsml20__EquipmentType__fill = 40,
	witsml20__EquipmentType__fish = 41,
	witsml20__EquipmentType__float_x0020collar = 42,
	witsml20__EquipmentType__float_x0020shoe_x002fguide_x0020shoe = 43,
	witsml20__EquipmentType__gas_x0020anchor = 44,
	witsml20__EquipmentType__gas_x0020lift_x0020mandrel = 45,
	witsml20__EquipmentType__gas_x0020lift_x0020valve = 46,
	witsml20__EquipmentType__gravel_x0020pack_x0020screen = 47,
	witsml20__EquipmentType__hydraulic_x0020pump = 48,
	witsml20__EquipmentType__injection_x0020mandrel = 49,
	witsml20__EquipmentType__injection_x0020valve = 50,
	witsml20__EquipmentType__junk_x0020in_x0020wellbore = 51,
	witsml20__EquipmentType__landing_x0020collar = 52,
	witsml20__EquipmentType__liner_x0020entry_x0020guide = 53,
	witsml20__EquipmentType__liner_x0020hanger = 54,
	witsml20__EquipmentType__mule_x0020shoe = 55,
	witsml20__EquipmentType__notched_x0020collar = 56,
	witsml20__EquipmentType__on_off_x0020tool = 57,
	witsml20__EquipmentType__overshot = 58,
	witsml20__EquipmentType__packer = 59,
	witsml20__EquipmentType__packer_x0020plug = 60,
	witsml20__EquipmentType__packer_multiple_x0020strings = 61,
	witsml20__EquipmentType__packoff_x0020_x0028tubing_x0029 = 62,
	witsml20__EquipmentType__pcp_flex_x0020shaft_x0020intake = 63,
	witsml20__EquipmentType__pcp_gear_x0020reducer_x0020_x0028subsurface_x0029 = 64,
	witsml20__EquipmentType__pcp_no_x0020turn_x0020tool_x002ftorque_x0020anchor = 'A',
	witsml20__EquipmentType__pcp_rotor = 'B',
	witsml20__EquipmentType__pcp_stator = 'C',
	witsml20__EquipmentType__pcp_tag_x0020bar = 'D',
	witsml20__EquipmentType__plug_x0020__x0020cement = 'E',
	witsml20__EquipmentType__plug_x0020__x0020mud = 'F',
	witsml20__EquipmentType__plunger_x0020lift_x0020ball = 'G',
	witsml20__EquipmentType__plunger_x0020lift_x0020bottom_x0020hole_x0020bumper_x0020assembly = 'H',
	witsml20__EquipmentType__plunger_x0020lift_x0020bumper_x0020spring = 'I',
	witsml20__EquipmentType__plunger_x0020lift_x0020collar_x0020stop = 'J',
	witsml20__EquipmentType__plunger_x0020lift_x0020plunger = 'K',
	witsml20__EquipmentType__polished_x0020rod = 'L',
	witsml20__EquipmentType__polished_x0020rod_x0020liner = 'M',
	witsml20__EquipmentType__ported_x0020collar = 'N',
	witsml20__EquipmentType__profile_x0020nipple = 'O',
	witsml20__EquipmentType__profile_x0020nipple_x0020plug = 'P',
	witsml20__EquipmentType__pump_out_x0020plug = 'Q',
	witsml20__EquipmentType__sand_x0020screen_tubing = 'R',
	witsml20__EquipmentType__sand_x0020separator = 'S',
	witsml20__EquipmentType__screen_x0020liner_x002finsert = 'T',
	witsml20__EquipmentType__seal_x0020assembly = 'U',
	witsml20__EquipmentType__seal_x0020bore_x0020extension = 'V',
	witsml20__EquipmentType__seat_x0020nipple_x002fshoe = 'W',
	witsml20__EquipmentType__shear_x0020tool = 'X',
	witsml20__EquipmentType__sliding_x0020sleeve = 'Y',
	witsml20__EquipmentType__steam_x0020cup_x0020mandrel = 'Z',
	witsml20__EquipmentType__steam_x0020deflectors = 91,
	witsml20__EquipmentType__strainer_x0020nipple = 92,
	witsml20__EquipmentType__subsurface_x0020safety_x0020valve = 93,
	witsml20__EquipmentType__sucker_x0020rod = 94,
	witsml20__EquipmentType__sucker_x0020rod_x0020backoff_x0020coupling = 95,
	witsml20__EquipmentType__sucker_x0020rod_x0020pump_insert = 96,
	witsml20__EquipmentType__sucker_x0020rod_x0020pump_jacket = 'a',
	witsml20__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020barrel = 'b',
	witsml20__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020plunger = 'c',
	witsml20__EquipmentType__sucker_x0020rod_x0020sub = 'd',
	witsml20__EquipmentType__sucker_x0020rod_continuous = 'e',
	witsml20__EquipmentType__sucker_x0020rod_ribbon = 'f',
	witsml20__EquipmentType__sucker_x0020rod_sinker_x0020bar = 'g',
	witsml20__EquipmentType__tcp_x0020gun = 'h',
	witsml20__EquipmentType__tubing = 'i',
	witsml20__EquipmentType__tubing_x0020_x0028coiled_x0029 = 'j',
	witsml20__EquipmentType__tubing_x0020anchor_x002fcatcher = 'k',
	witsml20__EquipmentType__tubing_x0020crossover = 'l',
	witsml20__EquipmentType__tubing_x0020drain = 'm',
	witsml20__EquipmentType__tubing_x0020hanger = 'n',
	witsml20__EquipmentType__tubing_x0020head_x0020_x0028spool_x0029 = 'o',
	witsml20__EquipmentType__tubing_x0020purge_x0020check_x0020valve = 'p',
	witsml20__EquipmentType__tubing_x0020sub = 'q',
	witsml20__EquipmentType__wellbore_x0020notes = 'r',
	witsml20__EquipmentType__whipstock = 's',
	witsml20__EquipmentType__wireline_x0020re_entry_x0020guide_x0020_x0028bell_x0020collar_x0029 = 't',
	witsml20__EquipmentType__y_tool = 'u'
};
#endif

/* eml2_1ForGsoap.h:13410 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GradeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GradeType (-1028)

/* witsml20:GradeType */
enum witsml20__GradeType {
	witsml20__GradeType__35 = 35,
	witsml20__GradeType__45 = 45,
	witsml20__GradeType__46 = 46,
	witsml20__GradeType__50 = 50,
	witsml20__GradeType__75 = 'K',
	witsml20__GradeType__95 = 95,
	witsml20__GradeType__13CR = 96,
	witsml20__GradeType__13CR__x002080 = 'a',
	witsml20__GradeType__13CR__x002085 = 'b',
	witsml20__GradeType__13CR__x002095 = 'c',
	witsml20__GradeType__13CR_110 = 'd',
	witsml20__GradeType__620C = 'e',
	witsml20__GradeType__750N = 'f',
	witsml20__GradeType__75A = 'g',
	witsml20__GradeType__780M = 'h',
	witsml20__GradeType__960M = 'i',
	witsml20__GradeType__970N = 'j',
	witsml20__GradeType__A53 = 'k',
	witsml20__GradeType__A53A = 'l',
	witsml20__GradeType__A53B = 'm',
	witsml20__GradeType__Armco_95 = 'n',
	witsml20__GradeType__B = 'o',
	witsml20__GradeType__C = 'p',
	witsml20__GradeType__C_110 = 'q',
	witsml20__GradeType__C_75 = 'r',
	witsml20__GradeType__C_90 = 's',
	witsml20__GradeType__C_95 = 't',
	witsml20__GradeType__D = 'u',
	witsml20__GradeType__DE = 'v',
	witsml20__GradeType__DER = 'w',
	witsml20__GradeType__DR = 'x',
	witsml20__GradeType__DWR = 'y',
	witsml20__GradeType__E = 'z',
	witsml20__GradeType__E_75 = 123,
	witsml20__GradeType__EL = 124,
	witsml20__GradeType__F_25 = 125,
	witsml20__GradeType__FG = 126,
	witsml20__GradeType__FS_80 = 127,
	witsml20__GradeType__FSS_95 = 128,
	witsml20__GradeType__G = 129,
	witsml20__GradeType__G_105 = 130,
	witsml20__GradeType__GT_80S = 131,
	witsml20__GradeType__H2S_90 = 132,
	witsml20__GradeType__H2S_95 = 133,
	witsml20__GradeType__H_40 = 134,
	witsml20__GradeType__HC_95 = 135,
	witsml20__GradeType__HCK_55 = 136,
	witsml20__GradeType__HCL_80 = 137,
	witsml20__GradeType__HCN_80 = 138,
	witsml20__GradeType__HCP_110 = 139,
	witsml20__GradeType__HCQ_125 = 140,
	witsml20__GradeType__HO_70 = 141,
	witsml20__GradeType__HS = 142,
	witsml20__GradeType__J_20 = 143,
	witsml20__GradeType__J_55 = 144,
	witsml20__GradeType__K = 145,
	witsml20__GradeType__K_40 = 146,
	witsml20__GradeType__K_55 = 147,
	witsml20__GradeType__KD = 148,
	witsml20__GradeType__KD_63 = 149,
	witsml20__GradeType__L_80 = 150,
	witsml20__GradeType__LS_140 = 151,
	witsml20__GradeType__LS_50 = 152,
	witsml20__GradeType__LS_65 = 153,
	witsml20__GradeType__M_65 = 154,
	witsml20__GradeType__M_90 = 155,
	witsml20__GradeType__M_95 = 156,
	witsml20__GradeType__MAV_50 = 157,
	witsml20__GradeType__MD_56 = 158,
	witsml20__GradeType__MMS = 159,
	witsml20__GradeType__N_105 = 160,
	witsml20__GradeType__N_23 = 161,
	witsml20__GradeType__N_30 = 162,
	witsml20__GradeType__N_40 = 163,
	witsml20__GradeType__N_54 = 164,
	witsml20__GradeType__N_75 = 165,
	witsml20__GradeType__N_78 = 166,
	witsml20__GradeType__N_80 = 167,
	witsml20__GradeType__N_90 = 168,
	witsml20__GradeType__N_96 = 169,
	witsml20__GradeType__N_97 = 170,
	witsml20__GradeType__P_105 = 171,
	witsml20__GradeType__P_110 = 172,
	witsml20__GradeType__PCP_x0020_x0020900 = 173,
	witsml20__GradeType__PCP_x00201000 = 174,
	witsml20__GradeType__PCP_x00201500 = 175,
	witsml20__GradeType__PCP_x00202500 = 176,
	witsml20__GradeType__PH_6 = 177,
	witsml20__GradeType__Plus = 178,
	witsml20__GradeType__Q_125 = 179,
	witsml20__GradeType__QT_1000 = 180,
	witsml20__GradeType__QT_1200 = 181,
	witsml20__GradeType__QT_700 = 182,
	witsml20__GradeType__QT_800 = 183,
	witsml20__GradeType__QT_900 = 184,
	witsml20__GradeType__S = 185,
	witsml20__GradeType__S_135 = 186,
	witsml20__GradeType__S_59 = 187,
	witsml20__GradeType__S_60 = 188,
	witsml20__GradeType__S_67 = 189,
	witsml20__GradeType__S_80 = 190,
	witsml20__GradeType__S_87 = 191,
	witsml20__GradeType__S_88 = 192,
	witsml20__GradeType__S_95 = 193,
	witsml20__GradeType__SC_90 = 194,
	witsml20__GradeType__SE = 195,
	witsml20__GradeType__SER = 196,
	witsml20__GradeType__SM = 197,
	witsml20__GradeType__SOO_95 = 198,
	witsml20__GradeType__Stainless = 199,
	witsml20__GradeType__SWR = 200,
	witsml20__GradeType__T = 201,
	witsml20__GradeType__T_66 = 202,
	witsml20__GradeType__T_95 = 203,
	witsml20__GradeType__T_D61 = 204,
	witsml20__GradeType__T_D63 = 205,
	witsml20__GradeType__T_K65 = 206,
	witsml20__GradeType__UHS = 207,
	witsml20__GradeType__USS_125 = 208,
	witsml20__GradeType__USS_140 = 209,
	witsml20__GradeType__USS_50 = 210,
	witsml20__GradeType__USS_95 = 211,
	witsml20__GradeType__V_150 = 212,
	witsml20__GradeType__WC_50 = 213,
	witsml20__GradeType__X = 214,
	witsml20__GradeType__X_140 = 215,
	witsml20__GradeType__X_42 = 216,
	witsml20__GradeType__X_46 = 217,
	witsml20__GradeType__X_52 = 218,
	witsml20__GradeType__X_56 = 219,
	witsml20__GradeType__X_60 = 220,
	witsml20__GradeType__X_70 = 221,
	witsml20__GradeType__X_95 = 222,
	witsml20__GradeType__XD = 223
};
#endif

/* eml2_1ForGsoap.h:13555 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeType (-1029)

/* witsml20:BoreholeType */
enum witsml20__BoreholeType {
	witsml20__BoreholeType__cavern = 0,
	witsml20__BoreholeType__cavity = 1,
	witsml20__BoreholeType__normalborehole = 2,
	witsml20__BoreholeType__underream = 3
};
#endif

/* eml2_1ForGsoap.h:13570 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Coating
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Coating (-1030)

/* witsml20:Coating */
enum witsml20__Coating {
	witsml20__Coating__bare = 0,
	witsml20__Coating__carbonnitrided = 1,
	witsml20__Coating__carburized = 2,
	witsml20__Coating__carburized_hardened = 3,
	witsml20__Coating__cementlined = 4,
	witsml20__Coating__chrome = 5,
	witsml20__Coating__chrome_plated = 6,
	witsml20__Coating__chromeplated_grooved = 7,
	witsml20__Coating__chromeplated_heavy = 8,
	witsml20__Coating__corrosion_x0020coating = 9,
	witsml20__Coating__dblgalv = 10,
	witsml20__Coating__duolin20wr = 11,
	witsml20__Coating__duoline = 12,
	witsml20__Coating__duoline10 = 13,
	witsml20__Coating__duoline20 = 14,
	witsml20__Coating__epdm = 15,
	witsml20__Coating__fiberglass_lined = 16,
	witsml20__Coating__galvanized = 17,
	witsml20__Coating__hardened = 18,
	witsml20__Coating__hard_lined = 19,
	witsml20__Coating__ins = 20,
	witsml20__Coating__ipc = 21,
	witsml20__Coating__ipc_epoxy = 22,
	witsml20__Coating__ipc_epxthk = 23,
	witsml20__Coating__ipc_epxthn = 24,
	witsml20__Coating__ipc_nylon = 25,
	witsml20__Coating__ipc_rwrap = 26,
	witsml20__Coating__ipc_s505 = 27,
	witsml20__Coating__ipc_s650 = 28,
	witsml20__Coating__ipc_tk70 = 29,
	witsml20__Coating__ipc_tk75 = 30,
	witsml20__Coating__lp = 31,
	witsml20__Coating__moly = 32,
	witsml20__Coating__mtr = 33,
	witsml20__Coating__n_x002fa = 34,
	witsml20__Coating__nickel_carbide = 35,
	witsml20__Coating__nickel_plated = 36,
	witsml20__Coating__nitrided = 37,
	witsml20__Coating__nitrile = 38,
	witsml20__Coating__pap = 39,
	witsml20__Coating__pelined = 40,
	witsml20__Coating__phosphate = 41,
	witsml20__Coating__phosphorus = 42,
	witsml20__Coating__plastic = 43,
	witsml20__Coating__plunger_lubricant = 44,
	witsml20__Coating__polished_rodliner = 45,
	witsml20__Coating__polypropylene = 46,
	witsml20__Coating__ppw_x002fnitrl = 47,
	witsml20__Coating__pvclined = 48,
	witsml20__Coating__rodguide_1 = 49,
	witsml20__Coating__rodguide_2 = 50,
	witsml20__Coating__rodguide_2_x002e = 51,
	witsml20__Coating__rodguide_3 = 52,
	witsml20__Coating__rodguide_4 = 53,
	witsml20__Coating__rodguide_5 = 54,
	witsml20__Coating__rodguide_6 = 55,
	witsml20__Coating__rodguide_7 = 56,
	witsml20__Coating__rodguide_fx = 57,
	witsml20__Coating__rodguide_so = 58,
	witsml20__Coating__rodguide_so1 = 59,
	witsml20__Coating__rodguide_so2 = 60,
	witsml20__Coating__rodguide_so3 = 61,
	witsml20__Coating__rodguide_so4 = 62,
	witsml20__Coating__rodguide_so5 = 63,
	witsml20__Coating__rodguide_so6 = 64,
	witsml20__Coating__rodguide_so8 = 'A',
	witsml20__Coating__rodguide_sp = 'B',
	witsml20__Coating__spray_metal = 'C',
	witsml20__Coating__spray_metal_monel = 'D',
	witsml20__Coating__spraymetal_monel = 'E',
	witsml20__Coating__spraymetal_nickel = 'F',
	witsml20__Coating__spraymetal_od_x002fnickelplated_id = 'G',
	witsml20__Coating__spraymetal_steel = 'H',
	witsml20__Coating__spraymetal_thick = 'I',
	witsml20__Coating__sslined = 'J',
	witsml20__Coating__teflon = 'K',
	witsml20__Coating__teflon_red = 'L',
	witsml20__Coating__teflon_tan = 'M',
	witsml20__Coating__teflon_yellow = 'N',
	witsml20__Coating__thermo = 'O',
	witsml20__Coating__tk_4 = 'P',
	witsml20__Coating__tk_99 = 'Q',
	witsml20__Coating__tuffr = 'R',
	witsml20__Coating__tungsten_x0020plated = 'S',
	witsml20__Coating__zincplated = 'T'
};
#endif

/* eml2_1ForGsoap.h:13666 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringType (-1031)

/* witsml20:DownholeStringType */
enum witsml20__DownholeStringType {
	witsml20__DownholeStringType__casing = 0,
	witsml20__DownholeStringType__others = 1,
	witsml20__DownholeStringType__rod = 2,
	witsml20__DownholeStringType__tubing = 3,
	witsml20__DownholeStringType__wellhead = 4
};
#endif

/* eml2_1ForGsoap.h:13682 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SubStringType (-1032)

/* witsml20:SubStringType */
enum witsml20__SubStringType {
	witsml20__SubStringType__abandoned_x0020junk_x002ffish = 0,
	witsml20__SubStringType__capillary_x0020string_x0020_x0028inside_x0020tubing_x0029 = 1,
	witsml20__SubStringType__capillary_x0020string_x0020_x0028tubing_x002fcasing_x0020annulus_x0029 = 2,
	witsml20__SubStringType__conductor_x0020casing = 3,
	witsml20__SubStringType__drill_x0020string = 4,
	witsml20__SubStringType__flowline = 5,
	witsml20__SubStringType__geological_x0020objects = 6,
	witsml20__SubStringType__inner_x0020liner = 7,
	witsml20__SubStringType__intermediate_x0020casing = 8,
	witsml20__SubStringType__production_x0020casing = 9,
	witsml20__SubStringType__production_x0020liner = 10,
	witsml20__SubStringType__protective_x0020casing = 11,
	witsml20__SubStringType__surface_x0020casing = 12,
	witsml20__SubStringType__wellbore_x0020notes = 13,
	witsml20__SubStringType__y_tool_x0020string = 14
};
#endif

/* eml2_1ForGsoap.h:13708 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyType (-1033)

/* witsml20:GeologyType */
enum witsml20__GeologyType {
	witsml20__GeologyType__aquifer = 0,
	witsml20__GeologyType__reservoir = 1
};
#endif

/* eml2_1ForGsoap.h:13721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationToolType (-1034)

/* witsml20:PerforationToolType */
enum witsml20__PerforationToolType {
	witsml20__PerforationToolType__casing_x0020gun = 0,
	witsml20__PerforationToolType__coiled_x0020tubing_x0020jet_x0020tool = 1,
	witsml20__PerforationToolType__drilled = 2,
	witsml20__PerforationToolType__mandrel = 3,
	witsml20__PerforationToolType__n_x002fa = 4,
	witsml20__PerforationToolType__slots_machine_x0020cut = 5,
	witsml20__PerforationToolType__slots_undercut = 6,
	witsml20__PerforationToolType__strip_x0020gun = 7,
	witsml20__PerforationToolType__tcp_x0020gun = 8,
	witsml20__PerforationToolType__through_x0020tubing_x0020gun = 9
};
#endif

/* eml2_1ForGsoap.h:13742 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularAssembly (-1035)

/* witsml20:TubularAssembly */
enum witsml20__TubularAssembly {
	witsml20__TubularAssembly__drilling = 0,
	witsml20__TubularAssembly__directional_x0020drilling = 1,
	witsml20__TubularAssembly__fishing = 2,
	witsml20__TubularAssembly__condition_x0020mud = 3,
	witsml20__TubularAssembly__tubing_x0020conveyed_x0020logging = 4,
	witsml20__TubularAssembly__cementing = 5,
	witsml20__TubularAssembly__casing = 6,
	witsml20__TubularAssembly__clean_x0020out = 7,
	witsml20__TubularAssembly__completion_x0020or_x0020testing = 8,
	witsml20__TubularAssembly__coring = 9,
	witsml20__TubularAssembly__hole_x0020opening_x0020or_x0020underreaming = 10,
	witsml20__TubularAssembly__milling_x0020or_x0020dressing_x0020or_x0020cutting = 11,
	witsml20__TubularAssembly__wiper_x0020or_x0020check_x0020or_x0020reaming = 12,
	witsml20__TubularAssembly__unknown = 13
};
#endif

/* eml2_1ForGsoap.h:13771 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoxPinConfig (-1036)

/* witsml20:BoxPinConfig */
enum witsml20__BoxPinConfig {
	witsml20__BoxPinConfig__bottom_x0020box = 0,
	witsml20__BoxPinConfig__top_x0020box = 1,
	witsml20__BoxPinConfig__top_x0020pin = 2,
	witsml20__BoxPinConfig__bottom_x0020pin_x0020top_x0020box = 3,
	witsml20__BoxPinConfig__bottom_x0020pin = 4
};
#endif

/* eml2_1ForGsoap.h:13787 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MaterialType (-1037)

/* witsml20:MaterialType */
enum witsml20__MaterialType {
	witsml20__MaterialType__aluminum = 0,
	witsml20__MaterialType__beryllium_x0020copper = 1,
	witsml20__MaterialType__chrome_x0020alloy = 2,
	witsml20__MaterialType__composite = 3,
	witsml20__MaterialType__other = 4,
	witsml20__MaterialType__non_magnetic_x0020steel = 5,
	witsml20__MaterialType__plastic = 6,
	witsml20__MaterialType__steel = 7,
	witsml20__MaterialType__steel_x0020alloy = 8,
	witsml20__MaterialType__titanium = 9
};
#endif

/* eml2_1ForGsoap.h:13808 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitType (-1038)

/* witsml20:BitType */
enum witsml20__BitType {
	witsml20__BitType__diamond = 0,
	witsml20__BitType__diamond_x0020core = 1,
	witsml20__BitType__insert_x0020roller_x0020cone = 2,
	witsml20__BitType__PDC = 3,
	witsml20__BitType__PDC_x0020core = 4,
	witsml20__BitType__roller_x0020cone = 5
};
#endif

/* eml2_1ForGsoap.h:13849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitDullCode (-1039)

/* witsml20:BitDullCode */
enum witsml20__BitDullCode {
	witsml20__BitDullCode__BC = 0,
	witsml20__BitDullCode__BT = 1,
	witsml20__BitDullCode__BU = 2,
	witsml20__BitDullCode__CC = 3,
	witsml20__BitDullCode__CD = 4,
	witsml20__BitDullCode__CI = 5,
	witsml20__BitDullCode__CR = 6,
	witsml20__BitDullCode__CT = 7,
	witsml20__BitDullCode__ER = 8,
	witsml20__BitDullCode__FC = 9,
	witsml20__BitDullCode__HC = 10,
	witsml20__BitDullCode__JD = 11,
	witsml20__BitDullCode__LC = 12,
	witsml20__BitDullCode__LN = 13,
	witsml20__BitDullCode__LT = 14,
	witsml20__BitDullCode__NO = 15,
	witsml20__BitDullCode__OC = 16,
	witsml20__BitDullCode__PB = 17,
	witsml20__BitDullCode__PN = 18,
	witsml20__BitDullCode__RG = 19,
	witsml20__BitDullCode__RO = 20,
	witsml20__BitDullCode__SD = 21,
	witsml20__BitDullCode__SS = 22,
	witsml20__BitDullCode__TR = 23,
	witsml20__BitDullCode__WO = 24,
	witsml20__BitDullCode__WT = 25
};
#endif

/* eml2_1ForGsoap.h:13990 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitReasonPulled (-1040)

/* witsml20:BitReasonPulled */
enum witsml20__BitReasonPulled {
	witsml20__BitReasonPulled__BHA = 0,
	witsml20__BitReasonPulled__CM = 1,
	witsml20__BitReasonPulled__CP = 2,
	witsml20__BitReasonPulled__DMF = 3,
	witsml20__BitReasonPulled__DP = 4,
	witsml20__BitReasonPulled__DST = 5,
	witsml20__BitReasonPulled__DTF = 6,
	witsml20__BitReasonPulled__FM = 7,
	witsml20__BitReasonPulled__HP = 8,
	witsml20__BitReasonPulled__HR = 9,
	witsml20__BitReasonPulled__LOG = 10,
	witsml20__BitReasonPulled__PP = 11,
	witsml20__BitReasonPulled__PR = 12,
	witsml20__BitReasonPulled__RIG = 13,
	witsml20__BitReasonPulled__TD = 14,
	witsml20__BitReasonPulled__TQ = 15,
	witsml20__BitReasonPulled__TW = 16,
	witsml20__BitReasonPulled__WC = 17
};
#endif

/* eml2_1ForGsoap.h:14091 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NozzleType (-1041)

/* witsml20:NozzleType */
enum witsml20__NozzleType {
	witsml20__NozzleType__extended = 0,
	witsml20__NozzleType__normal = 1
};
#endif

/* eml2_1ForGsoap.h:14104 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionPosition (-1042)

/* witsml20:ConnectionPosition */
enum witsml20__ConnectionPosition {
	witsml20__ConnectionPosition__both = 0,
	witsml20__ConnectionPosition__bottom = 1,
	witsml20__ConnectionPosition__top = 2
};
#endif

/* eml2_1ForGsoap.h:14130 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__JarType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__JarType (-1043)

/* witsml20:JarType */
enum witsml20__JarType {
	witsml20__JarType__mechanical = 0,
	witsml20__JarType__hydraulic = 1,
	witsml20__JarType__hydro_x0020mechanical = 2
};
#endif

/* eml2_1ForGsoap.h:14144 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__JarAction
#define SOAP_TYPE_gsoap_eml2_1_witsml20__JarAction (-1044)

/* witsml20:JarAction */
enum witsml20__JarAction {
	witsml20__JarAction__up = 0,
	witsml20__JarAction__down = 1,
	witsml20__JarAction__both = 2,
	witsml20__JarAction__vibrating = 3
};
#endif

/* eml2_1ForGsoap.h:14159 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasurementType (-1045)

/* witsml20:MeasurementType */
enum witsml20__MeasurementType {
	witsml20__MeasurementType__acceleration = 0,
	witsml20__MeasurementType__acoustic_x0020caliper = 1,
	witsml20__MeasurementType__acoustic_x0020casing_x0020collar_x0020locator = 2,
	witsml20__MeasurementType__acoustic_x0020impedance = 3,
	witsml20__MeasurementType__acoustic_x0020porosity = 4,
	witsml20__MeasurementType__acoustic_x0020velocity = 5,
	witsml20__MeasurementType__acoustic_x0020wave_x0020matrix_x0020travel_x0020time = 6,
	witsml20__MeasurementType__acoustic_x0020wave_x0020travel_x0020time = 7,
	witsml20__MeasurementType__amplitude = 8,
	witsml20__MeasurementType__amplitude_x0020of_x0020acoustic_x0020wave = 9,
	witsml20__MeasurementType__amplitude_x0020of_x0020E_M_x0020wave = 10,
	witsml20__MeasurementType__amplitude_x0020ratio = 11,
	witsml20__MeasurementType__area = 12,
	witsml20__MeasurementType__attenuation = 13,
	witsml20__MeasurementType__attenuation_x0020of_x0020acoustic_x0020wave = 14,
	witsml20__MeasurementType__attenuation_x0020of_x0020E_M_x0020wave = 15,
	witsml20__MeasurementType__auxiliary = 16,
	witsml20__MeasurementType__average_x0020porosity = 17,
	witsml20__MeasurementType__azimuth = 18,
	witsml20__MeasurementType__barite_x0020mud_x0020correction = 19,
	witsml20__MeasurementType__bed_x0020thickness_x0020correction = 20,
	witsml20__MeasurementType__bit_x0020size = 21,
	witsml20__MeasurementType__blocked = 22,
	witsml20__MeasurementType__borehole_x0020environment_x0020correction = 23,
	witsml20__MeasurementType__borehole_x0020fluid_x0020correction = 24,
	witsml20__MeasurementType__borehole_x0020size_x0020correction = 25,
	witsml20__MeasurementType__bromide_x0020mud_x0020correction = 26,
	witsml20__MeasurementType__bulk_x0020compressibility = 27,
	witsml20__MeasurementType__bulk_x0020density = 28,
	witsml20__MeasurementType__bulk_x0020volume = 29,
	witsml20__MeasurementType__bulk_x0020volume_x0020gas = 30,
	witsml20__MeasurementType__bulk_x0020volume_x0020hydrocarbon = 31,
	witsml20__MeasurementType__bulk_x0020volume_x0020oil = 32,
	witsml20__MeasurementType__bulk_x0020volume_x0020water = 33,
	witsml20__MeasurementType__C_x002fO_x0020ratio = 34,
	witsml20__MeasurementType__caliper = 35,
	witsml20__MeasurementType__cased_x0020hole_x0020correction = 36,
	witsml20__MeasurementType__casing_x0020collar_x0020locator = 37,
	witsml20__MeasurementType__casing_x0020correction = 38,
	witsml20__MeasurementType__casing_x0020diameter_x0020correction = 39,
	witsml20__MeasurementType__casing_x0020inspection = 40,
	witsml20__MeasurementType__casing_x0020thickness_x0020correction = 41,
	witsml20__MeasurementType__casing_x0020weight_x0020correction = 42,
	witsml20__MeasurementType__cement_x0020correction = 43,
	witsml20__MeasurementType__cement_x0020density_x0020correction = 44,
	witsml20__MeasurementType__cement_x0020evaluation = 45,
	witsml20__MeasurementType__cement_x0020thickness_x0020correction = 46,
	witsml20__MeasurementType__cement_x0020type_x0020correction = 47,
	witsml20__MeasurementType__CH_x0020density_x0020porosity = 48,
	witsml20__MeasurementType__CH_x0020dolomite_x0020density_x0020porosity = 49,
	witsml20__MeasurementType__CH_x0020dolomite_x0020neutron_x0020porosity = 50,
	witsml20__MeasurementType__CH_x0020limestone_x0020density_x0020porosity = 51,
	witsml20__MeasurementType__CH_x0020limestone_x0020neutron_x0020porosity = 52,
	witsml20__MeasurementType__CH_x0020neutron_x0020porosity = 53,
	witsml20__MeasurementType__CH_x0020sandstone_x0020density_x0020porosity = 54,
	witsml20__MeasurementType__CH_x0020sandstone_x0020neutron_x0020porosity = 55,
	witsml20__MeasurementType__compressional_x0020wave_x0020dolomite_x0020porosity = 56,
	witsml20__MeasurementType__compressional_x0020wave_x0020limestone_x0020porosity = 57,
	witsml20__MeasurementType__compressional_x0020wave_x0020matrix_x0020travel_x0020time = 58,
	witsml20__MeasurementType__compressional_x0020wave_x0020sandstone_x0020porosity = 59,
	witsml20__MeasurementType__compressional_x0020wave_x0020travel_x0020time = 60,
	witsml20__MeasurementType__conductivity = 61,
	witsml20__MeasurementType__conductivity_x0020from_x0020attenuation = 62,
	witsml20__MeasurementType__conductivity_x0020from_x0020phase_x0020shift = 63,
	witsml20__MeasurementType__connate_x0020water_x0020conductivity = 64,
	witsml20__MeasurementType__connate_x0020water_x0020resistivity = 'A',
	witsml20__MeasurementType__conventional_x0020core_x0020porosity = 'B',
	witsml20__MeasurementType__core_x0020matrix_x0020density = 'C',
	witsml20__MeasurementType__core_x0020permeability = 'D',
	witsml20__MeasurementType__core_x0020porosity = 'E',
	witsml20__MeasurementType__corrected = 'F',
	witsml20__MeasurementType__count_x0020rate = 'G',
	witsml20__MeasurementType__count_x0020rate_x0020ratio = 'H',
	witsml20__MeasurementType__cross_x0020plot_x0020porosity = 'I',
	witsml20__MeasurementType__decay_x0020time = 'J',
	witsml20__MeasurementType__deep_x0020conductivity = 'K',
	witsml20__MeasurementType__deep_x0020induction_x0020conductivity = 'L',
	witsml20__MeasurementType__deep_x0020induction_x0020resistivity = 'M',
	witsml20__MeasurementType__deep_x0020laterolog_x0020conductivity = 'N',
	witsml20__MeasurementType__deep_x0020laterolog_x0020resistivity = 'O',
	witsml20__MeasurementType__deep_x0020resistivity = 'P',
	witsml20__MeasurementType__density = 'Q',
	witsml20__MeasurementType__density_x0020porosity = 'R',
	witsml20__MeasurementType__depth = 'S',
	witsml20__MeasurementType__depth_x0020adjusted = 'T',
	witsml20__MeasurementType__depth_x0020derived_x0020from_x0020velocity = 'U',
	witsml20__MeasurementType__deviation = 'V',
	witsml20__MeasurementType__dielectric = 'W',
	witsml20__MeasurementType__diffusion_x0020correction = 'X',
	witsml20__MeasurementType__dip = 'Y',
	witsml20__MeasurementType__dipmeter = 'Z',
	witsml20__MeasurementType__dipmeter_x0020conductivity = 91,
	witsml20__MeasurementType__dipmeter_x0020resistivity = 92,
	witsml20__MeasurementType__dolomite_x0020acoustic_x0020porosity = 93,
	witsml20__MeasurementType__dolomite_x0020density_x0020porosity = 94,
	witsml20__MeasurementType__dolomite_x0020neutron_x0020porosity = 95,
	witsml20__MeasurementType__edited = 96,
	witsml20__MeasurementType__effective_x0020porosity = 'a',
	witsml20__MeasurementType__electric_x0020current = 'b',
	witsml20__MeasurementType__electric_x0020potential = 'c',
	witsml20__MeasurementType__electromagnetic_x0020wave_x0020matrix_x0020travel_x0020time = 'd',
	witsml20__MeasurementType__electromagnetic_x0020wave_x0020travel_x0020time = 'e',
	witsml20__MeasurementType__element = 'f',
	witsml20__MeasurementType__elemental_x0020ratio = 'g',
	witsml20__MeasurementType__enhanced = 'h',
	witsml20__MeasurementType__filtered = 'i',
	witsml20__MeasurementType__flowmeter = 'j',
	witsml20__MeasurementType__fluid_x0020density = 'k',
	witsml20__MeasurementType__fluid_x0020velocity = 'l',
	witsml20__MeasurementType__fluid_x0020viscosity = 'm',
	witsml20__MeasurementType__flushed_x0020zone_x0020conductivity = 'n',
	witsml20__MeasurementType__flushed_x0020zone_x0020resistivity = 'o',
	witsml20__MeasurementType__flushed_x0020zone_x0020saturation = 'p',
	witsml20__MeasurementType__force = 'q',
	witsml20__MeasurementType__formation_x0020density_x0020correction = 'r',
	witsml20__MeasurementType__formation_x0020properties_x0020correction = 's',
	witsml20__MeasurementType__formation_x0020salinity_x0020correction = 't',
	witsml20__MeasurementType__formation_x0020saturation_x0020correction = 'u',
	witsml20__MeasurementType__formation_x0020volume_x0020factor_x0020correction = 'v',
	witsml20__MeasurementType__formation_x0020water_x0020density_x0020correction = 'w',
	witsml20__MeasurementType__formation_x0020water_x0020saturation_x0020correction = 'x',
	witsml20__MeasurementType__free_x0020fluid_x0020index = 'y',
	witsml20__MeasurementType__friction_x0020effect_x0020correction = 'z',
	witsml20__MeasurementType__gamma_x0020ray = 123,
	witsml20__MeasurementType__gamma_x0020ray_x0020minus_x0020uranium = 124,
	witsml20__MeasurementType__gas_x0020saturation = 125,
	witsml20__MeasurementType__gradiomanometer = 126,
	witsml20__MeasurementType__high_x0020frequency_x0020conductivity = 127,
	witsml20__MeasurementType__high_x0020frequency_x0020electromagnetic = 128,
	witsml20__MeasurementType__high_x0020frequency_x0020electromagnetic_x0020porosity = 129,
	witsml20__MeasurementType__high_x0020frequency_x0020E_M_x0020phase_x0020shift = 130,
	witsml20__MeasurementType__high_x0020frequency_x0020resistivity = 131,
	witsml20__MeasurementType__hydrocarbon_x0020correction = 132,
	witsml20__MeasurementType__hydrocarbon_x0020density_x0020correction = 133,
	witsml20__MeasurementType__hydrocarbon_x0020gravity_x0020correction = 134,
	witsml20__MeasurementType__hydrocarbon_x0020saturation = 135,
	witsml20__MeasurementType__hydrocarbon_x0020viscosity_x0020correction = 136,
	witsml20__MeasurementType__image = 137,
	witsml20__MeasurementType__interpretation_x0020variable = 138,
	witsml20__MeasurementType__iron_x0020mud_x0020correction = 139,
	witsml20__MeasurementType__joined = 140,
	witsml20__MeasurementType__KCl_x0020mud_x0020correction = 141,
	witsml20__MeasurementType__length = 142,
	witsml20__MeasurementType__limestone_x0020acoustic_x0020porosity = 143,
	witsml20__MeasurementType__limestone_x0020density_x0020porosity = 144,
	witsml20__MeasurementType__limestone_x0020neutron_x0020porosity = 145,
	witsml20__MeasurementType__lithology_x0020correction = 146,
	witsml20__MeasurementType__log_x0020derived_x0020permeability = 147,
	witsml20__MeasurementType__log_x0020matrix_x0020density = 148,
	witsml20__MeasurementType__magnetic_x0020casing_x0020collar_x0020locator = 149,
	witsml20__MeasurementType__matrix_x0020density = 150,
	witsml20__MeasurementType__matrix_x0020travel_x0020time = 151,
	witsml20__MeasurementType__measured_x0020depth = 152,
	witsml20__MeasurementType__mechanical_x0020caliper = 153,
	witsml20__MeasurementType__mechanical_x0020casing_x0020collar_x0020locator = 154,
	witsml20__MeasurementType__medium_x0020conductivity = 155,
	witsml20__MeasurementType__medium_x0020induction_x0020conductivity = 156,
	witsml20__MeasurementType__medium_x0020induction_x0020resistivity = 157,
	witsml20__MeasurementType__medium_x0020laterolog_x0020conductivity = 158,
	witsml20__MeasurementType__medium_x0020laterolog_x0020resistivity = 159,
	witsml20__MeasurementType__medium_x0020resistivity = 160,
	witsml20__MeasurementType__micro_x0020conductivity = 161,
	witsml20__MeasurementType__micro_x0020inverse_x0020conductivity = 162,
	witsml20__MeasurementType__micro_x0020inverse_x0020resistivity = 163,
	witsml20__MeasurementType__micro_x0020laterolog_x0020conductivity = 164,
	witsml20__MeasurementType__micro_x0020laterolog_x0020resistivity = 165,
	witsml20__MeasurementType__micro_x0020normal_x0020conductivity = 166,
	witsml20__MeasurementType__micro_x0020normal_x0020resistivity = 167,
	witsml20__MeasurementType__micro_x0020resistivity = 168,
	witsml20__MeasurementType__micro_x0020spherically_x0020focused_x0020conductivity = 169,
	witsml20__MeasurementType__micro_x0020spherically_x0020focused_x0020resistivity = 170,
	witsml20__MeasurementType__mineral = 171,
	witsml20__MeasurementType__mud_x0020cake_x0020conductivity = 172,
	witsml20__MeasurementType__mud_x0020cake_x0020correction = 173,
	witsml20__MeasurementType__mud_x0020cake_x0020density_x0020correction = 174,
	witsml20__MeasurementType__mud_x0020cake_x0020resistivity = 175,
	witsml20__MeasurementType__mud_x0020cake_x0020resistivity_x0020correction = 176,
	witsml20__MeasurementType__mud_x0020cake_x0020thickness_x0020correction = 177,
	witsml20__MeasurementType__mud_x0020composition_x0020correction = 178,
	witsml20__MeasurementType__mud_x0020conductivity = 179,
	witsml20__MeasurementType__mud_x0020filtrate_x0020conductivity = 180,
	witsml20__MeasurementType__mud_x0020filtrate_x0020correction = 181,
	witsml20__MeasurementType__mud_x0020filtrate_x0020density_x0020correction = 182,
	witsml20__MeasurementType__mud_x0020filtrate_x0020resistivity = 183,
	witsml20__MeasurementType__mud_x0020filtrate_x0020resistivity_x0020correction = 184,
	witsml20__MeasurementType__mud_x0020filtrate_x0020salinity_x0020correction = 185,
	witsml20__MeasurementType__mud_x0020resistivity = 186,
	witsml20__MeasurementType__mud_x0020salinity_x0020correction = 187,
	witsml20__MeasurementType__mud_x0020viscosity_x0020correction = 188,
	witsml20__MeasurementType__mud_x0020weight_x0020correction = 189,
	witsml20__MeasurementType__neutron_x0020die_x0020away_x0020time = 190,
	witsml20__MeasurementType__neutron_x0020porosity = 191,
	witsml20__MeasurementType__nuclear_x0020caliper = 192,
	witsml20__MeasurementType__nuclear_x0020magnetic_x0020decay_x0020time = 193,
	witsml20__MeasurementType__nuclear_x0020magnetism_x0020log_x0020permeability = 194,
	witsml20__MeasurementType__nuclear_x0020magnetism_x0020porosity = 195,
	witsml20__MeasurementType__OH_x0020density_x0020porosity = 196,
	witsml20__MeasurementType__OH_x0020dolomite_x0020density_x0020porosity = 197,
	witsml20__MeasurementType__OH_x0020dolomite_x0020neutron_x0020porosity = 198,
	witsml20__MeasurementType__OH_x0020limestone_x0020density_x0020porosity = 199,
	witsml20__MeasurementType__OH_x0020limestone_x0020neutron_x0020porosity = 200,
	witsml20__MeasurementType__OH_x0020neutron_x0020porosity = 201,
	witsml20__MeasurementType__OH_x0020sandstone_x0020density_x0020porosity = 202,
	witsml20__MeasurementType__OH_x0020sandstone_x0020neutron_x0020porosity = 203,
	witsml20__MeasurementType__oil_x0020based_x0020mud_x0020correction = 204,
	witsml20__MeasurementType__oil_x0020saturation = 205,
	witsml20__MeasurementType__perforating = 206,
	witsml20__MeasurementType__permeability = 207,
	witsml20__MeasurementType__phase_x0020shift = 208,
	witsml20__MeasurementType__photoelectric_x0020absorption = 209,
	witsml20__MeasurementType__photoelectric_x0020absorption_x0020correction = 210,
	witsml20__MeasurementType__physical_x0020measurement_x0020correction = 211,
	witsml20__MeasurementType__plane_x0020angle = 212,
	witsml20__MeasurementType__porosity = 213,
	witsml20__MeasurementType__porosity_x0020correction = 214,
	witsml20__MeasurementType__potassium = 215,
	witsml20__MeasurementType__pressure = 216,
	witsml20__MeasurementType__pressure_x0020correction = 217,
	witsml20__MeasurementType__processed = 218,
	witsml20__MeasurementType__pulsed_x0020neutron_x0020porosity = 219,
	witsml20__MeasurementType__quality = 220,
	witsml20__MeasurementType__ratio = 221,
	witsml20__MeasurementType__raw = 222,
	witsml20__MeasurementType__relative_x0020bearing = 223,
	witsml20__MeasurementType__resistivity = 224,
	witsml20__MeasurementType__resistivity_x0020factor_x0020correction = 225,
	witsml20__MeasurementType__resistivity_x0020from_x0020attenuation = 226,
	witsml20__MeasurementType__resistivity_x0020from_x0020phase_x0020shift = 227,
	witsml20__MeasurementType__resistivity_x0020phase_x0020shift = 228,
	witsml20__MeasurementType__resistivity_x0020ratio = 229,
	witsml20__MeasurementType__salinity = 230,
	witsml20__MeasurementType__sampling = 231,
	witsml20__MeasurementType__sandstone_x0020acoustic_x0020porosity = 232,
	witsml20__MeasurementType__sandstone_x0020density_x0020porosity = 233,
	witsml20__MeasurementType__sandstone_x0020neutron_x0020porosity = 234,
	witsml20__MeasurementType__saturation = 235,
	witsml20__MeasurementType__shale_x0020volume = 236,
	witsml20__MeasurementType__shallow_x0020conductivity = 237,
	witsml20__MeasurementType__shallow_x0020induction_x0020conductivity = 238,
	witsml20__MeasurementType__shallow_x0020induction_x0020resistivity = 239,
	witsml20__MeasurementType__shallow_x0020laterolog_x0020conductivity = 240,
	witsml20__MeasurementType__shallow_x0020laterolog_x0020resistivity = 241,
	witsml20__MeasurementType__shallow_x0020resistivity = 242,
	witsml20__MeasurementType__shear_x0020wave_x0020dolomite_x0020porosity = 243,
	witsml20__MeasurementType__shear_x0020wave_x0020limestone_x0020porosity = 244,
	witsml20__MeasurementType__shear_x0020wave_x0020matrix_x0020travel_x0020time = 245,
	witsml20__MeasurementType__shear_x0020wave_x0020sandstone_x0020porosity = 246,
	witsml20__MeasurementType__shear_x0020wave_x0020travel_x0020time = 247,
	witsml20__MeasurementType__shifted = 248,
	witsml20__MeasurementType__sidewall_x0020core_x0020porosity = 249,
	witsml20__MeasurementType__sigma = 250,
	witsml20__MeasurementType__sigma_x0020formation = 251,
	witsml20__MeasurementType__sigma_x0020gas = 252,
	witsml20__MeasurementType__sigma_x0020hydrocarbon = 253,
	witsml20__MeasurementType__sigma_x0020matrix = 254,
	witsml20__MeasurementType__sigma_x0020oil = 255,
	witsml20__MeasurementType__sigma_x0020water = 256,
	witsml20__MeasurementType__slippage_x0020velocity_x0020correction = 257,
	witsml20__MeasurementType__smoothed = 258,
	witsml20__MeasurementType__spectral_x0020gamma_x0020ray = 259,
	witsml20__MeasurementType__spherically_x0020focused_x0020conductivity = 260,
	witsml20__MeasurementType__spherically_x0020focused_x0020resistivity = 261,
	witsml20__MeasurementType__spontaneous_x0020potential = 262,
	witsml20__MeasurementType__spreading_x0020loss_x0020correction = 263,
	witsml20__MeasurementType__synthetic_x0020well_x0020log_x0020trace = 264,
	witsml20__MeasurementType__temperature = 265,
	witsml20__MeasurementType__temperature_x0020correction = 266,
	witsml20__MeasurementType__tension = 267,
	witsml20__MeasurementType__Th_x002fK_x0020ratio = 268,
	witsml20__MeasurementType__thorium = 269,
	witsml20__MeasurementType__time = 270,
	witsml20__MeasurementType__tool_x0020diameter_x0020correction = 271,
	witsml20__MeasurementType__tool_x0020eccentricity_x0020correction = 272,
	witsml20__MeasurementType__total_x0020gamma_x0020ray = 273,
	witsml20__MeasurementType__total_x0020porosity = 274,
	witsml20__MeasurementType__tracer_x0020survey = 275,
	witsml20__MeasurementType__travel_x0020time = 276,
	witsml20__MeasurementType__true_x0020conductivity = 277,
	witsml20__MeasurementType__true_x0020resistivity = 278,
	witsml20__MeasurementType__true_x0020vertical_x0020depth = 279,
	witsml20__MeasurementType__tube_x0020wave_x0020dolomite_x0020porosity = 280,
	witsml20__MeasurementType__tube_x0020wave_x0020limestone_x0020porosity = 281,
	witsml20__MeasurementType__tube_x0020wave_x0020matrix_x0020travel_x0020time = 282,
	witsml20__MeasurementType__tube_x0020wave_x0020sandstone_x0020porosity = 283,
	witsml20__MeasurementType__tube_x0020wave_x0020travel_x0020time = 284,
	witsml20__MeasurementType__uranium = 285,
	witsml20__MeasurementType__velocity = 286,
	witsml20__MeasurementType__volume = 287,
	witsml20__MeasurementType__water_x0020based_x0020fluid_x0020correction = 288,
	witsml20__MeasurementType__water_x0020holdup_x0020correction = 289,
	witsml20__MeasurementType__water_x0020saturated_x0020conductivity = 290,
	witsml20__MeasurementType__water_x0020saturated_x0020resistivity = 291,
	witsml20__MeasurementType__water_x0020saturation = 292
};
#endif

/* eml2_1ForGsoap.h:15619 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BearingType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BearingType (-1046)

/* witsml20:BearingType */
enum witsml20__BearingType {
	witsml20__BearingType__oil_x0020seal = 0,
	witsml20__BearingType__mud_x0020lube = 1,
	witsml20__BearingType__other = 2
};
#endif

/* eml2_1ForGsoap.h:15633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BladeShapeType (-1047)

/* witsml20:BladeShapeType */
enum witsml20__BladeShapeType {
	witsml20__BladeShapeType__dynamic = 0,
	witsml20__BladeShapeType__melon = 1,
	witsml20__BladeShapeType__spiral = 2,
	witsml20__BladeShapeType__straight = 3,
	witsml20__BladeShapeType__variable = 4
};
#endif

/* eml2_1ForGsoap.h:15649 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BladeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BladeType (-1048)

/* witsml20:BladeType */
enum witsml20__BladeType {
	witsml20__BladeType__clamp_on = 0,
	witsml20__BladeType__integral = 1,
	witsml20__BladeType__sleeve = 2,
	witsml20__BladeType__welded = 3
};
#endif

/* eml2_1ForGsoap.h:15664 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpenerType (-1049)

/* witsml20:HoleOpenerType */
enum witsml20__HoleOpenerType {
	witsml20__HoleOpenerType__under_reamer = 0,
	witsml20__HoleOpenerType__fixed_x0020blade = 1
};
#endif

/* eml2_1ForGsoap.h:15677 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DeflectionMethod (-1050)

/* witsml20:DeflectionMethod */
enum witsml20__DeflectionMethod {
	witsml20__DeflectionMethod__hybrid = 0,
	witsml20__DeflectionMethod__point_x0020bit = 1,
	witsml20__DeflectionMethod__push_x0020bit = 2
};
#endif

/* eml2_1ForGsoap.h:15703 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponentType (-1051)

/* witsml20:TubularComponentType */
enum witsml20__TubularComponentType {
	witsml20__TubularComponentType__accelerator = 0,
	witsml20__TubularComponentType__adjustable_x0020kickoff = 1,
	witsml20__TubularComponentType__bit_x0020core_x0020diamond = 2,
	witsml20__TubularComponentType__bit_x0020core_x0020PDC = 3,
	witsml20__TubularComponentType__bit_x0020diamond_x0020fixed_x0020cut = 4,
	witsml20__TubularComponentType__bit_x0020hole_x0020opener = 5,
	witsml20__TubularComponentType__bit_x0020insert_x0020roller_x0020cone = 6,
	witsml20__TubularComponentType__bit_x0020mill_x0020tooth_x0020roller_x0020cone = 7,
	witsml20__TubularComponentType__bit_x0020PDC_x0020fixed_x0020cutter = 8,
	witsml20__TubularComponentType__bit_x0020under_x0020reamer = 9,
	witsml20__TubularComponentType__bridge_x0020plug = 10,
	witsml20__TubularComponentType__bull_x0020plug = 11,
	witsml20__TubularComponentType__bullnose = 12,
	witsml20__TubularComponentType__casing = 13,
	witsml20__TubularComponentType__casing_x0020crossover = 14,
	witsml20__TubularComponentType__casing_x0020cutter = 15,
	witsml20__TubularComponentType__casing_x0020head = 16,
	witsml20__TubularComponentType__casing_x0020inflatable_x0020packer = 17,
	witsml20__TubularComponentType__casing_x0020shoe_x0020screw_in = 18,
	witsml20__TubularComponentType__catch_x0020assembly = 19,
	witsml20__TubularComponentType__coiled_x0020tubing_x0020in_x0020hole = 20,
	witsml20__TubularComponentType__coiled_x0020tubing_x0020on_x0020coil = 21,
	witsml20__TubularComponentType__core_x0020barrel = 22,
	witsml20__TubularComponentType__core_x0020orientation_x0020barrel = 23,
	witsml20__TubularComponentType__die_x0020collar = 24,
	witsml20__TubularComponentType__die_x0020collar_x0020LH = 25,
	witsml20__TubularComponentType__directional_x0020guidance_x0020system = 26,
	witsml20__TubularComponentType__drill_x0020collar = 27,
	witsml20__TubularComponentType__drill_x0020collar_x0020short = 28,
	witsml20__TubularComponentType__drill_x0020pipe = 29,
	witsml20__TubularComponentType__drill_x0020pipe_x0020compressive = 30,
	witsml20__TubularComponentType__drill_x0020pipe_x0020LH = 31,
	witsml20__TubularComponentType__drill_x0020stem_x0020test_x0020BHA = 32,
	witsml20__TubularComponentType__drive_x0020pipe = 33,
	witsml20__TubularComponentType__dual_x0020catch_x0020assembly = 34,
	witsml20__TubularComponentType__extension_x0020bowl_x0020overshot = 35,
	witsml20__TubularComponentType__extension_x0020sub_overshot = 36,
	witsml20__TubularComponentType__float_x0020collar = 37,
	witsml20__TubularComponentType__float_x0020shoe = 38,
	witsml20__TubularComponentType__flow_x0020head = 39,
	witsml20__TubularComponentType__guide_x0020shoe = 40,
	witsml20__TubularComponentType__hanger_x0020casing_x0020subsea = 41,
	witsml20__TubularComponentType__hanger_x0020casing_x0020surface = 42,
	witsml20__TubularComponentType__hanger_x0020liner = 43,
	witsml20__TubularComponentType__hanger_x0020mud_x0020line = 44,
	witsml20__TubularComponentType__hanger_x0020tubing = 45,
	witsml20__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe = 46,
	witsml20__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe_x0020LH = 47,
	witsml20__TubularComponentType__jar = 48,
	witsml20__TubularComponentType__junk_x0020basket = 49,
	witsml20__TubularComponentType__junk_x0020basket_x0020reverse_x0020circulation = 50,
	witsml20__TubularComponentType__kelly = 51,
	witsml20__TubularComponentType__keyseat_x0020wiper_x0020tool = 52,
	witsml20__TubularComponentType__landing_x0020float_x0020collar = 53,
	witsml20__TubularComponentType__lead_x0020impression_x0020block = 54,
	witsml20__TubularComponentType__liner = 55,
	witsml20__TubularComponentType__logging_x0020while_x0020drilling_x0020tool = 56,
	witsml20__TubularComponentType__magnet = 57,
	witsml20__TubularComponentType__mill_x0020casing_x0020cutting = 58,
	witsml20__TubularComponentType__mill_x0020dress = 59,
	witsml20__TubularComponentType__mill_x0020flat_x0020bottom = 60,
	witsml20__TubularComponentType__mill_x0020hollow = 61,
	witsml20__TubularComponentType__mill_x0020packer_x0020picker_x0020assembly = 62,
	witsml20__TubularComponentType__mill_x0020pilot = 63,
	witsml20__TubularComponentType__mill_x0020polish = 64,
	witsml20__TubularComponentType__mill_x0020section = 'A',
	witsml20__TubularComponentType__mill_x0020taper = 'B',
	witsml20__TubularComponentType__mill_x0020washover = 'C',
	witsml20__TubularComponentType__mill_x0020watermelon = 'D',
	witsml20__TubularComponentType__millout_x0020extension = 'E',
	witsml20__TubularComponentType__motor = 'F',
	witsml20__TubularComponentType__motor_x0020instrumented = 'G',
	witsml20__TubularComponentType__motor_x0020steerable = 'H',
	witsml20__TubularComponentType__mule_x0020shoe = 'I',
	witsml20__TubularComponentType__multilateral_x0020hanger_x0020running_x0020tool = 'J',
	witsml20__TubularComponentType__MWD_x0020hang_x0020off_x0020sub = 'K',
	witsml20__TubularComponentType__MWD_x0020pulser = 'L',
	witsml20__TubularComponentType__non_magnetic_x0020collar = 'M',
	witsml20__TubularComponentType__non_magnetic_x0020stabilizer = 'N',
	witsml20__TubularComponentType__other = 'O',
	witsml20__TubularComponentType__overshot = 'P',
	witsml20__TubularComponentType__overshot_x0020LH = 'Q',
	witsml20__TubularComponentType__oversize_x0020lip_x0020guide_x0020overshot = 'R',
	witsml20__TubularComponentType__packer = 'S',
	witsml20__TubularComponentType__packer_x0020retrieve_x0020TT_x0020squeeze = 'T',
	witsml20__TubularComponentType__packer_x0020RTTS = 'U',
	witsml20__TubularComponentType__packer_x0020storm_x0020valve_x0020RTTS = 'V',
	witsml20__TubularComponentType__pipe_x0020cutter = 'W',
	witsml20__TubularComponentType__polished_x0020bore_x0020receptacle = 'X',
	witsml20__TubularComponentType__ported_x0020stinger = 'Y',
	witsml20__TubularComponentType__prepacked_x0020screens = 'Z',
	witsml20__TubularComponentType__reamer = 91,
	witsml20__TubularComponentType__reversing_x0020tool = 92,
	witsml20__TubularComponentType__riser_x0020high_x0020pressure = 93,
	witsml20__TubularComponentType__riser_x0020marine = 94,
	witsml20__TubularComponentType__riser_x0020production = 95,
	witsml20__TubularComponentType__rotary_x0020steering_x0020tool = 96,
	witsml20__TubularComponentType__running_x0020tool = 'a',
	witsml20__TubularComponentType__safety_x0020joint = 'b',
	witsml20__TubularComponentType__safety_x0020joint_x0020LH = 'c',
	witsml20__TubularComponentType__scab_x0020liner_x0020bit_x0020guide = 'd',
	witsml20__TubularComponentType__scraper = 'e',
	witsml20__TubularComponentType__scratchers = 'f',
	witsml20__TubularComponentType__slotted_x0020liner = 'g',
	witsml20__TubularComponentType__spear = 'h',
	witsml20__TubularComponentType__stabilizer = 'i',
	witsml20__TubularComponentType__stabilizer_x0020inline = 'j',
	witsml20__TubularComponentType__stabilizer_x0020near_x0020bit = 'k',
	witsml20__TubularComponentType__stabilizer_x0020near_x0020bit_x0020roller_x0020reamer = 'l',
	witsml20__TubularComponentType__stabilizer_x0020non_rotating = 'm',
	witsml20__TubularComponentType__stabilizer_x0020steerable = 'n',
	witsml20__TubularComponentType__stabilizer_x0020string = 'o',
	witsml20__TubularComponentType__stabilizer_x0020string_x0020roller_x0020reamer = 'p',
	witsml20__TubularComponentType__stabilizer_x0020turbo_x0020back = 'q',
	witsml20__TubularComponentType__stabilizer_x0020variable_x0020blade = 'r',
	witsml20__TubularComponentType__stage_x0020cement_x0020collar = 's',
	witsml20__TubularComponentType__sub_bar_x0020catcher = 't',
	witsml20__TubularComponentType__sub_bent = 'u',
	witsml20__TubularComponentType__sub_bit = 'v',
	witsml20__TubularComponentType__sub_bumper = 'w',
	witsml20__TubularComponentType__sub_catcher = 'x',
	witsml20__TubularComponentType__sub_circulation = 'y',
	witsml20__TubularComponentType__sub_cone = 'z',
	witsml20__TubularComponentType__sub_crossover = 123,
	witsml20__TubularComponentType__sub_dart = 124,
	witsml20__TubularComponentType__sub_filter = 125,
	witsml20__TubularComponentType__sub_float = 126,
	witsml20__TubularComponentType__sub_jetting = 127,
	witsml20__TubularComponentType__sub_junk = 128,
	witsml20__TubularComponentType__sub_orienting = 129,
	witsml20__TubularComponentType__sub_ported = 130,
	witsml20__TubularComponentType__sub_pressure_x0020relief = 131,
	witsml20__TubularComponentType__sub_pump_x0020out = 132,
	witsml20__TubularComponentType__sub_restrictor = 133,
	witsml20__TubularComponentType__sub_saver = 134,
	witsml20__TubularComponentType__sub_shock = 135,
	witsml20__TubularComponentType__sub_side_x0020entry = 136,
	witsml20__TubularComponentType__sub_stop = 137,
	witsml20__TubularComponentType__surface_x0020pipe = 138,
	witsml20__TubularComponentType__taper_x0020tap = 139,
	witsml20__TubularComponentType__taper_x0020tap_x0020LH = 140,
	witsml20__TubularComponentType__thruster = 141,
	witsml20__TubularComponentType__tieback_x0020polished_x0020bore_x0020receptacle = 142,
	witsml20__TubularComponentType__tieback_x0020stinger = 143,
	witsml20__TubularComponentType__tubing = 144,
	witsml20__TubularComponentType__tubing_conveyed_x0020perforating_x0020gun = 145,
	witsml20__TubularComponentType__turbine = 146,
	witsml20__TubularComponentType__unknown = 147,
	witsml20__TubularComponentType__washover_x0020pipe = 148,
	witsml20__TubularComponentType__whipstock = 149,
	witsml20__TubularComponentType__whipstock_x0020anchor = 150
};
#endif

/* eml2_1ForGsoap.h:15865 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IadcBearingWearCode (-1052)

/* witsml20:IadcBearingWearCode */
enum witsml20__IadcBearingWearCode {
	witsml20__IadcBearingWearCode__0 = 0,
	witsml20__IadcBearingWearCode__1 = 1,
	witsml20__IadcBearingWearCode__2 = 2,
	witsml20__IadcBearingWearCode__3 = 3,
	witsml20__IadcBearingWearCode__4 = 4,
	witsml20__IadcBearingWearCode__5 = 5,
	witsml20__IadcBearingWearCode__6 = 6,
	witsml20__IadcBearingWearCode__7 = 7,
	witsml20__IadcBearingWearCode__8 = 8,
	witsml20__IadcBearingWearCode__E = 'E',
	witsml20__IadcBearingWearCode__F = 'F',
	witsml20__IadcBearingWearCode__N = 'N',
	witsml20__IadcBearingWearCode__X = 'X'
};
#endif

/* eml2_1ForGsoap.h:15889 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IadcIntegerCode (-1053)

/* witsml20:IadcIntegerCode */
enum witsml20__IadcIntegerCode {
	witsml20__IadcIntegerCode__0 = 0,
	witsml20__IadcIntegerCode__1 = 1,
	witsml20__IadcIntegerCode__2 = 2,
	witsml20__IadcIntegerCode__3 = 3,
	witsml20__IadcIntegerCode__4 = 4,
	witsml20__IadcIntegerCode__5 = 5,
	witsml20__IadcIntegerCode__6 = 6,
	witsml20__IadcIntegerCode__7 = 7,
	witsml20__IadcIntegerCode__8 = 8
};
#endif

/* eml2_1ForGsoap.h:15909 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatus (-1054)

/* witsml20:CompletionStatus */
enum witsml20__CompletionStatus {
	witsml20__CompletionStatus__active = 0,
	witsml20__CompletionStatus__inactive = 1,
	witsml20__CompletionStatus__permanently_x0020abandoned = 2,
	witsml20__CompletionStatus__planned = 3,
	witsml20__CompletionStatus__suspended = 4,
	witsml20__CompletionStatus__temporarily_x0020abandoned = 5,
	witsml20__CompletionStatus__testing = 6
};
#endif

/* eml2_1ForGsoap.h:15927 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleCasingType (-1055)

/* witsml20:HoleCasingType */
enum witsml20__HoleCasingType {
	witsml20__HoleCasingType__blow_x0020out_x0020preventer = 0,
	witsml20__HoleCasingType__casing = 1,
	witsml20__HoleCasingType__conductor = 2,
	witsml20__HoleCasingType__curved_x0020conductor = 3,
	witsml20__HoleCasingType__liner = 4,
	witsml20__HoleCasingType__open_x0020hole = 5,
	witsml20__HoleCasingType__riser = 6,
	witsml20__HoleCasingType__tubing = 7
};
#endif

/* eml2_1ForGsoap.h:15946 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IndexDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IndexDirection (-1056)

/* witsml20:IndexDirection */
enum witsml20__IndexDirection {
	witsml20__IndexDirection__decreasing = 0,
	witsml20__IndexDirection__increasing = 1
};
#endif

/* eml2_1ForGsoap.h:15967 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LoggingMethod (-1057)

/* witsml20:LoggingMethod */
enum witsml20__LoggingMethod {
	witsml20__LoggingMethod__computed = 0,
	witsml20__LoggingMethod__distributed = 1,
	witsml20__LoggingMethod__LWD = 2,
	witsml20__LoggingMethod__mixed = 3,
	witsml20__LoggingMethod__MWD = 4,
	witsml20__LoggingMethod__surface = 5,
	witsml20__LoggingMethod__wireline = 6
};
#endif

/* eml2_1ForGsoap.h:16013 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndexType (-1058)

/* witsml20:ChannelIndexType */
enum witsml20__ChannelIndexType {
	witsml20__ChannelIndexType__measured_x0020depth = 0,
	witsml20__ChannelIndexType__true_x0020vertical_x0020depth = 1,
	witsml20__ChannelIndexType__pass_x0020indexed_x0020depth = 2,
	witsml20__ChannelIndexType__date_x0020time = 3,
	witsml20__ChannelIndexType__elapsed_x0020time = 4,
	witsml20__ChannelIndexType__temperature = 5,
	witsml20__ChannelIndexType__pressure = 6
};
#endif

/* eml2_1ForGsoap.h:16059 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelState (-1059)

/* witsml20:ChannelState */
enum witsml20__ChannelState {
	witsml20__ChannelState__calculated = 0,
	witsml20__ChannelState__final_ = 1,
	witsml20__ChannelState__memory = 2,
	witsml20__ChannelState__processed = 3,
	witsml20__ChannelState__real_x0020time = 4
};
#endif

/* eml2_1ForGsoap.h:16095 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EtpDataType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EtpDataType (-1060)

/* witsml20:EtpDataType */
enum witsml20__EtpDataType {
	witsml20__EtpDataType__boolean = 0,
	witsml20__EtpDataType__bytes = 1,
	witsml20__EtpDataType__double_ = 2,
	witsml20__EtpDataType__float_ = 3,
	witsml20__EtpDataType__int_ = 4,
	witsml20__EtpDataType__long_ = 5,
	witsml20__EtpDataType__null = 6,
	witsml20__EtpDataType__string = 7,
	witsml20__EtpDataType__vector = 8
};
#endif

/* eml2_1ForGsoap.h:16151 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelStatus (-1061)

/* witsml20:ChannelStatus */
enum witsml20__ChannelStatus {
	witsml20__ChannelStatus__active = 0,
	witsml20__ChannelStatus__closed = 1,
	witsml20__ChannelStatus__inactive = 2
};
#endif

/* eml2_1ForGsoap.h:16177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelDerivation (-1062)

/* witsml20:ChannelDerivation */
enum witsml20__ChannelDerivation {
	witsml20__ChannelDerivation__raw = 0,
	witsml20__ChannelDerivation__simulated = 1,
	witsml20__ChannelDerivation__spliced = 2,
	witsml20__ChannelDerivation__sampled = 3,
	witsml20__ChannelDerivation__model = 4
};
#endif

/* eml2_1ForGsoap.h:16213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BhaStatus (-1063)

/* witsml20:BhaStatus */
enum witsml20__BhaStatus {
	witsml20__BhaStatus__final_ = 0,
	witsml20__BhaStatus__progress = 1,
	witsml20__BhaStatus__plan = 2
};
#endif

/* eml2_1ForGsoap.h:16227 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MudSubClass (-1064)

/* witsml20:MudSubClass */
enum witsml20__MudSubClass {
	witsml20__MudSubClass__aerated_x0020mud = 0,
	witsml20__MudSubClass__air = 1,
	witsml20__MudSubClass__brackish_x0020water = 2,
	witsml20__MudSubClass__brine = 3,
	witsml20__MudSubClass__caesium_x0020formate = 4,
	witsml20__MudSubClass__diesel_x0020oil_based = 5,
	witsml20__MudSubClass__ester_x0020synthetic_based = 6,
	witsml20__MudSubClass__freshwater = 7,
	witsml20__MudSubClass__glycol_x0020mud = 8,
	witsml20__MudSubClass__gyp_x0020mud = 9,
	witsml20__MudSubClass__internal_olefin_x0020synthetic_based = 10,
	witsml20__MudSubClass__lightly_x0020treated_x0020non_dispersed = 11,
	witsml20__MudSubClass__lignite_x002flignosulfonate_x0020mud = 12,
	witsml20__MudSubClass__lime_x0020mud = 13,
	witsml20__MudSubClass__linear_x0020paraffin_x0020synthetic_based = 14,
	witsml20__MudSubClass__linear_alpha_olefin_x0020synthetic_based = 15,
	witsml20__MudSubClass__low_x0020solids = 16,
	witsml20__MudSubClass__low_x0020toxicity_x0020mineral_x0020oil_based = 17,
	witsml20__MudSubClass__mineral_x0020oil_based = 18,
	witsml20__MudSubClass__mist = 19,
	witsml20__MudSubClass__mixed_metal_x0020oxide_x0020mud = 20,
	witsml20__MudSubClass__native_x002fnatural_x0020mud = 21,
	witsml20__MudSubClass__natural_x0020gas = 22,
	witsml20__MudSubClass__nitrogen_aerated_x0020mud = 23,
	witsml20__MudSubClass__non_aqueous_x0020_x0028invert_x0020emulsion_x0029_x0020drilling_x0020fluids = 24,
	witsml20__MudSubClass__non_dispersed = 25,
	witsml20__MudSubClass__pneumatic_x0020_x0028gaseous_x0029_x0020drilling_x0020fluids = 26,
	witsml20__MudSubClass__polymer_x0020mud = 27,
	witsml20__MudSubClass__potassium_x0020formate = 28,
	witsml20__MudSubClass__potassium_treated_x0020mud = 29,
	witsml20__MudSubClass__salt_x0020water_x0020mud = 30,
	witsml20__MudSubClass__saturated_x0020salt_x0020mud = 31,
	witsml20__MudSubClass__sea_x0020water = 32,
	witsml20__MudSubClass__seawater_x0020mud = 33,
	witsml20__MudSubClass__silicate_x0020mud = 34,
	witsml20__MudSubClass__sodium_x0020formate = 35,
	witsml20__MudSubClass__spud_x0020mud = 36,
	witsml20__MudSubClass__stable_x0020foam = 37,
	witsml20__MudSubClass__stiff_x0020foam = 38,
	witsml20__MudSubClass__water_based_x0020drilling_x0020fluids = 39
};
#endif

/* eml2_1ForGsoap.h:16278 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MudClass
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MudClass (-1065)

/* witsml20:MudClass */
enum witsml20__MudClass {
	witsml20__MudClass__oil_based = 0,
	witsml20__MudClass__water_based = 1,
	witsml20__MudClass__other = 2,
	witsml20__MudClass__pneumatic = 3
};
#endif

/* eml2_1ForGsoap.h:16301 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GasPeakType (-1066)

/* witsml20:GasPeakType */
enum witsml20__GasPeakType {
	witsml20__GasPeakType__circulating_x0020background_x0020gas = 0,
	witsml20__GasPeakType__connection_x0020gas = 1,
	witsml20__GasPeakType__drilling_x0020background_x0020gas = 2,
	witsml20__GasPeakType__drilling_x0020gas_x0020peak = 3,
	witsml20__GasPeakType__flow_x0020check_x0020gas = 4,
	witsml20__GasPeakType__no_x0020readings = 5,
	witsml20__GasPeakType__other = 6,
	witsml20__GasPeakType__shut_x0020down_x0020gas = 7,
	witsml20__GasPeakType__trip_x0020gas = 8
};
#endif

/* eml2_1ForGsoap.h:16321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OpsReportVersion (-1067)

/* witsml20:OpsReportVersion */
enum witsml20__OpsReportVersion {
	witsml20__OpsReportVersion__preliminary = 0,
	witsml20__OpsReportVersion__normal = 1,
	witsml20__OpsReportVersion__final_ = 2
};
#endif

/* eml2_1ForGsoap.h:16347 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PresTestType (-1068)

/* witsml20:PresTestType */
enum witsml20__PresTestType {
	witsml20__PresTestType__leak_x0020off_x0020test = 0,
	witsml20__PresTestType__formation_x0020integrity_x0020test = 1
};
#endif

/* eml2_1ForGsoap.h:16368 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReadingKind
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReadingKind (-1069)

/* witsml20:ReadingKind */
enum witsml20__ReadingKind {
	witsml20__ReadingKind__measured = 0,
	witsml20__ReadingKind__estimated = 1,
	witsml20__ReadingKind__unknown = 2
};
#endif

/* eml2_1ForGsoap.h:16394 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityCode (-1070)

/* witsml20:DrillActivityCode */
enum witsml20__DrillActivityCode {
	witsml20__DrillActivityCode__abandonment = 0,
	witsml20__DrillActivityCode__abandonment_x0020_x002d__x0020log_x0020plugs = 1,
	witsml20__DrillActivityCode__abandonment_x0020_x002d__x0020run_x0020plugs = 2,
	witsml20__DrillActivityCode__abandonment_x0020_x002d__x0020wait_x0020on_x0020cement = 3,
	witsml20__DrillActivityCode__casing = 4,
	witsml20__DrillActivityCode__cement = 5,
	witsml20__DrillActivityCode__cement_x0020_x002d__x0020circulate = 6,
	witsml20__DrillActivityCode__cement_x0020_x002d__x0020other = 7,
	witsml20__DrillActivityCode__cement_x0020_x002d__x0020rig_x0020up = 8,
	witsml20__DrillActivityCode__cement_x0020_x002d__x0020wait_x0020on_x0020cement = 9,
	witsml20__DrillActivityCode__circulate = 10,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020boulder_x0020or_x0020gravel = 11,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020casing = 12,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020cementing = 13,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020circulate_x0020samples = 14,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020coring = 15,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020drilling = 16,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020fishing = 17,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020gumbo_x0020attack = 18,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020logging = 19,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020lost_x0020circulation = 20,
	witsml20__DrillActivityCode__circulate_x0020_x002d__x0020well_x0020control = 21,
	witsml20__DrillActivityCode__completion_x0020operations = 22,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020gravel_x0020packing = 23,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020logging = 24,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020rig_x0020up = 25,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020running_x0020liner = 26,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020tear_x0020down = 27,
	witsml20__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020testing = 28,
	witsml20__DrillActivityCode__cond_x0020mud = 29,
	witsml20__DrillActivityCode__coring = 30,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020conventional = 31,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020flow_x0020check = 32,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020laydown_x0020barrel = 33,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020oriented = 34,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020plastic_x0020sleeve = 35,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020rig_x0020up_x0020core_x0020barrel = 36,
	witsml20__DrillActivityCode__coring_x0020_x002d__x0020sponge = 37,
	witsml20__DrillActivityCode__cut = 38,
	witsml20__DrillActivityCode__deviation_x0020survey = 39,
	witsml20__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020multi_shot = 40,
	witsml20__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020single_x0020shot = 41,
	witsml20__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020drift = 42,
	witsml20__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020gyro = 43,
	witsml20__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020MWD = 44,
	witsml20__DrillActivityCode__dir_x0020work = 45,
	witsml20__DrillActivityCode__dir_x0020work_x0020_x002d__x0020horizontal_x0020drilling = 46,
	witsml20__DrillActivityCode__dir_x0020work_x0020_x002d__x0020motor_x0020drilling = 47,
	witsml20__DrillActivityCode__dir_x0020work_x0020_x002d__x0020orient = 48,
	witsml20__DrillActivityCode__dir_x0020work_x0020_x002d__x0020rotary_x0020drilling = 49,
	witsml20__DrillActivityCode__dir_x0020work_x0020_x002d__x0020slant_x0020drilling = 50,
	witsml20__DrillActivityCode__drilling = 51,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020casing = 52,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020connection = 53,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020drill_x0020cement = 54,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020flow_x0020check = 55,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020hole_x0020opening = 56,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020new_x0020hole = 57,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020sidetracking = 58,
	witsml20__DrillActivityCode__drilling_x0020_x002d__x0020under_reaming = 59,
	witsml20__DrillActivityCode__DST = 60,
	witsml20__DrillActivityCode__DST_x0020_x002d__x0020cased_x0020hole = 61,
	witsml20__DrillActivityCode__DST_x0020_x002d__x0020lay_x0020down_x0020tools = 62,
	witsml20__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole = 63,
	witsml20__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole_x0020closed_x0020chamber = 64,
	witsml20__DrillActivityCode__DST_x0020_x002d__x0020rig_x0020up_x0020tools = 'A',
	witsml20__DrillActivityCode__fishing = 'B',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020BHA = 'C',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020casing = 'D',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020cones = 'E',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020other = 'F',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020stuck_x0020pipe = 'G',
	witsml20__DrillActivityCode__fishing_x0020_x002d__x0020wireline_x0020tools = 'H',
	witsml20__DrillActivityCode__float_x0020equip = 'I',
	witsml20__DrillActivityCode__HSE = 'J',
	witsml20__DrillActivityCode__HSE_x0020_x002d__x0020hold_x0020drill = 'K',
	witsml20__DrillActivityCode__HSE_x0020_x002d__x0020incident = 'L',
	witsml20__DrillActivityCode__HSE_x0020_x002d__x0020safety_x0020meeting = 'M',
	witsml20__DrillActivityCode__mill = 'N',
	witsml20__DrillActivityCode__mill_x0020_x002d__x0020cut_x0020casing_x0020or_x0020tubing = 'O',
	witsml20__DrillActivityCode__mill_x0020_x002d__x0020milling = 'P',
	witsml20__DrillActivityCode__miscellaneous = 'Q',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP = 'R',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020diverter = 'S',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020manifold = 'T',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020other = 'U',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020PVT_x0020system = 'V',
	witsml20__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020stack = 'W',
	witsml20__DrillActivityCode__plug_x0020back = 'X',
	witsml20__DrillActivityCode__plug_x0020back_x0020_x002d__x0020abandonment = 'Y',
	witsml20__DrillActivityCode__plug_x0020back_x0020_x002d__x0020kick_x0020off_x0020plug = 'Z',
	witsml20__DrillActivityCode__plug_x0020back_x0020_x002d__x0020lost_x0020circulation = 91,
	witsml20__DrillActivityCode__plug_x0020back_x0020_x002d__x0020wait_x0020on_x0020cement = 92,
	witsml20__DrillActivityCode__plug_x0020back_x0020_x002d__x0020well_x0020control = 93,
	witsml20__DrillActivityCode__pressure_x0020test = 94,
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020manifold = 95,
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020stack = 96,
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020integrity_x0020test = 'a',
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020leak_x0020off_x0020test = 'b',
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020packer = 'c',
	witsml20__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020PIT = 'd',
	witsml20__DrillActivityCode__reaming = 'e',
	witsml20__DrillActivityCode__reaming_x0020_x002d__x0020back_x0020reaming = 'f',
	witsml20__DrillActivityCode__reaming_x0020_x002d__x0020coring = 'g',
	witsml20__DrillActivityCode__reaming_x0020_x002d__x0020drill = 'h',
	witsml20__DrillActivityCode__reaming_x0020_x002d__x0020logging = 'i',
	witsml20__DrillActivityCode__reaming_x0020_x002d__x0020under_reaming = 'j',
	witsml20__DrillActivityCode__rig_x0020move = 'k',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020anchor_x0020handling = 'l',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_pad_x0020move = 'm',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_well_x0020move = 'n',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020jack_x0020up_x0020or_x0020down = 'o',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020other = 'p',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020position_x0020rig = 'q',
	witsml20__DrillActivityCode__rig_x0020move_x0020_x002d__x0020skid_x0020rig = 'r',
	witsml20__DrillActivityCode__rig_x0020release = 's',
	witsml20__DrillActivityCode__rig_x0020release_x0020_x002d__x0020cut_x0020casing = 't',
	witsml20__DrillActivityCode__rig_x0020release_x0020_x002d__x0020install_x0020capping_x0020assembly = 'u',
	witsml20__DrillActivityCode__rig_x0020release_x0020_x002d__x0020MOB_x0020or_x0020DE_MOB = 'v',
	witsml20__DrillActivityCode__rig_x0020repairs = 'w',
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020drawworks = 'x',
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020electrical = 'y',
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020mud_x0020system = 'z',
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020other = 123,
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020rotary = 124,
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020subsea_x0020equipment = 125,
	witsml20__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020well_x0020control_x0020equipment = 126,
	witsml20__DrillActivityCode__rig_x0020service = 127,
	witsml20__DrillActivityCode__rig_x0020service_x0020_x002d__x0020lubricate_x0020rig = 128,
	witsml20__DrillActivityCode__rig_x0020service_x0020_x002d__x0020test_x0020equipment = 129,
	witsml20__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down = 130,
	witsml20__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020rig_x0020up = 131,
	witsml20__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020site_x0020work = 132,
	witsml20__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020tear_x0020down = 133,
	witsml20__DrillActivityCode__run_x0020casing = 134,
	witsml20__DrillActivityCode__run_x0020liner = 135,
	witsml20__DrillActivityCode__run_x0020or_x0020pull_x0020riser = 136,
	witsml20__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020other = 137,
	witsml20__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020run_x0020or_x0020pull_x0020riser = 138,
	witsml20__DrillActivityCode__set = 139,
	witsml20__DrillActivityCode__slip_x0020drilling_x0020line = 140,
	witsml20__DrillActivityCode__squeeze_x0020cement = 141,
	witsml20__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020repair = 142,
	witsml20__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020shoe = 143,
	witsml20__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020parted_x0020casing = 144,
	witsml20__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020perforations_x0020DST = 145,
	witsml20__DrillActivityCode__stuck_x0020pipe = 146,
	witsml20__DrillActivityCode__surface_x0020string_x0020handling = 147,
	witsml20__DrillActivityCode__test_x0020completion = 148,
	witsml20__DrillActivityCode__testing_x0020general = 149,
	witsml20__DrillActivityCode__testing_x0020general_x0020_x002d__x0020equipment = 150,
	witsml20__DrillActivityCode__testing_x0020general_x0020_x002d__x0020flow = 151,
	witsml20__DrillActivityCode__tripping = 152,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020back_reaming = 153,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020flow_x0020check = 154,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020in = 155,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020out = 156,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020in_x0020_x0028from_x0020surface_x0029 = 157,
	witsml20__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020out_x0020_x0028to_x0020surface_x0029 = 158,
	witsml20__DrillActivityCode__wait = 159,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020daylight = 160,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020environmental_x0020or_x0020regulatory = 161,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020equipment = 162,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020holiday = 163,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020ice = 164,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020on_x0020orders = 165,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020operator = 166,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020other = 167,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020partners = 168,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020service_x0020company = 169,
	witsml20__DrillActivityCode__wait_x0020_x002d__x0020weather = 170,
	witsml20__DrillActivityCode__well_x0020control = 171,
	witsml20__DrillActivityCode__well_x0020control_x0020_x002d__x0020mix = 172,
	witsml20__DrillActivityCode__well_x0020control_x0020_x002d__x0020shut_x0020in = 173,
	witsml20__DrillActivityCode__well_x0020control_x0020_x002d__x0020strip = 174,
	witsml20__DrillActivityCode__well_x0020control_x0020_x002d__x0020well_x0020kill = 175,
	witsml20__DrillActivityCode__well_x0020srvc = 176,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020casing_x0020repair = 177,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020clean_x0020well_x0020to_x0020compl_x0020fluid = 178,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020coiled_x0020tubing_x0020work = 179,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020gravel_x0020pack = 180,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020install_x0020or_x0020test_x0020xmas_x0020tree = 181,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020kill_x0020well = 182,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020land = 183,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020perforate = 184,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020completion = 185,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020suspension_x0020plugs = 186,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020completion = 187,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020screens = 188,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020sand_x0020control = 189,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020stimulation = 190,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020subsea_x0020work = 191,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020surface_x0020line_x0020work = 192,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020suspend_x0020well_x0020or_x0020pull_x0020BOPs = 193,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020test_x0020well = 194,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wash = 195,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wireline_x0020work = 196,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020work_x0020tubulars = 197,
	witsml20__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020workstring_x0020run = 198,
	witsml20__DrillActivityCode__wireline_x0020logs = 199,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020abandonment = 200,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020evaluation = 201,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020form_x0020tester = 202,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020other = 203,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020side_x0020wall_x0020cores = 204,
	witsml20__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020velocity = 205
};
#endif

/* eml2_1ForGsoap.h:16611 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityClassType (-1071)

/* witsml20:DrillActivityClassType */
enum witsml20__DrillActivityClassType {
	witsml20__DrillActivityClassType__planned = 0,
	witsml20__DrillActivityClassType__unplanned = 1,
	witsml20__DrillActivityClassType__downtime = 2
};
#endif

/* eml2_1ForGsoap.h:16625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StateDetailActivity (-1072)

/* witsml20:StateDetailActivity */
enum witsml20__StateDetailActivity {
	witsml20__StateDetailActivity__injury = 0,
	witsml20__StateDetailActivity__operation_x0020failed = 1,
	witsml20__StateDetailActivity__kick = 2,
	witsml20__StateDetailActivity__circulation_x0020loss = 3,
	witsml20__StateDetailActivity__mud_x0020loss = 4,
	witsml20__StateDetailActivity__stuck_x0020equipment = 5,
	witsml20__StateDetailActivity__equipment_x0020failure = 6,
	witsml20__StateDetailActivity__equipment_x0020hang = 7,
	witsml20__StateDetailActivity__success = 8
};
#endif

/* eml2_1ForGsoap.h:16681 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ItemState
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ItemState (-1073)

/* witsml20:ItemState */
enum witsml20__ItemState {
	witsml20__ItemState__actual = 0,
	witsml20__ItemState__model = 1,
	witsml20__ItemState__plan = 2
};
#endif

/* eml2_1ForGsoap.h:16707 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InnerBarrelType (-1074)

/* witsml20:InnerBarrelType */
enum witsml20__InnerBarrelType {
	witsml20__InnerBarrelType__undifferentiated = 0,
	witsml20__InnerBarrelType__aluminum = 1,
	witsml20__InnerBarrelType__gel = 2,
	witsml20__InnerBarrelType__fiberglass = 3
};
#endif

/* eml2_1ForGsoap.h:16738 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellTestType (-1075)

/* witsml20:WellTestType */
enum witsml20__WellTestType {
	witsml20__WellTestType__drill_x0020stem_x0020test = 0,
	witsml20__WellTestType__production_x0020test = 1
};
#endif

/* eml2_1ForGsoap.h:16759 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellControlIncidentType (-1076)

/* witsml20:WellControlIncidentType */
enum witsml20__WellControlIncidentType {
	witsml20__WellControlIncidentType__shallow_x0020gas_x0020kick = 0,
	witsml20__WellControlIncidentType__water_x0020kick = 1,
	witsml20__WellControlIncidentType__oil_x0020kick = 2,
	witsml20__WellControlIncidentType__gas_x0020kick = 3
};
#endif

/* eml2_1ForGsoap.h:16790 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellKillingProcedureType (-1077)

/* witsml20:WellKillingProcedureType */
enum witsml20__WellKillingProcedureType {
	witsml20__WellKillingProcedureType__drillers_x0020method = 0,
	witsml20__WellKillingProcedureType__wait_x0020and_x0020weight = 1,
	witsml20__WellKillingProcedureType__bullheading = 2,
	witsml20__WellKillingProcedureType__lubricate_x0020and_x0020bleed = 3,
	witsml20__WellKillingProcedureType__forward_x0020circulation = 4,
	witsml20__WellKillingProcedureType__reverse_x0020circulation = 5
};
#endif

/* eml2_1ForGsoap.h:16833 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluorescence (-1078)

/* witsml20:ShowFluorescence */
enum witsml20__ShowFluorescence {
	witsml20__ShowFluorescence__faint = 0,
	witsml20__ShowFluorescence__bright = 1,
	witsml20__ShowFluorescence__none = 2
};
#endif

/* eml2_1ForGsoap.h:16847 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowSpeed (-1079)

/* witsml20:ShowSpeed */
enum witsml20__ShowSpeed {
	witsml20__ShowSpeed__slow = 0,
	witsml20__ShowSpeed__moderately_x0020fast = 1,
	witsml20__ShowSpeed__fast = 2,
	witsml20__ShowSpeed__instantaneous = 3,
	witsml20__ShowSpeed__none = 4
};
#endif

/* eml2_1ForGsoap.h:16863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowLevel (-1080)

/* witsml20:ShowLevel */
enum witsml20__ShowLevel {
	witsml20__ShowLevel__blooming = 0,
	witsml20__ShowLevel__streaming = 1
};
#endif

/* eml2_1ForGsoap.h:16876 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowRating (-1081)

/* witsml20:ShowRating */
enum witsml20__ShowRating {
	witsml20__ShowRating__none = 0,
	witsml20__ShowRating__very_x0020poor = 1,
	witsml20__ShowRating__poor = 2,
	witsml20__ShowRating__fair = 3,
	witsml20__ShowRating__good = 4,
	witsml20__ShowRating__very_x0020good = 5
};
#endif

/* eml2_1ForGsoap.h:16893 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluid (-1082)

/* witsml20:ShowFluid */
enum witsml20__ShowFluid {
	witsml20__ShowFluid__gas = 0,
	witsml20__ShowFluid__oil = 1
};
#endif

/* eml2_1ForGsoap.h:16906 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AziRef
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AziRef (-1083)

/* witsml20:AziRef */
enum witsml20__AziRef {
	witsml20__AziRef__magnetic_x0020north = 0,
	witsml20__AziRef__grid_x0020north = 1,
	witsml20__AziRef__true_x0020north = 2
};
#endif

/* eml2_1ForGsoap.h:16932 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationType (-1084)

/* witsml20:TrajStationType */
enum witsml20__TrajStationType {
	witsml20__TrajStationType__azimuth_x0020on_x0020plane = 0,
	witsml20__TrajStationType__buildrate_x0020to_x0020delta_MD = 1,
	witsml20__TrajStationType__buildrate_x0020to_x0020INCL = 2,
	witsml20__TrajStationType__buildrate_x0020to_x0020MD = 3,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020AZI = 4,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020delta_MD = 5,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL = 6,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL_x0020and_x0020AZI = 7,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020MD = 8,
	witsml20__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020TVD = 9,
	witsml20__TrajStationType__buildrate_x0020TVD = 10,
	witsml20__TrajStationType__casing_x0020MD = 11,
	witsml20__TrajStationType__casing_x0020TVD = 12,
	witsml20__TrajStationType__DLS = 13,
	witsml20__TrajStationType__DLS_x0020to_x0020AZI_x0020and_x0020MD = 14,
	witsml20__TrajStationType__DLS_x0020to_x0020AZI_TVD = 15,
	witsml20__TrajStationType__DLS_x0020to_x0020INCL = 16,
	witsml20__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020AZI = 17,
	witsml20__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020MD = 18,
	witsml20__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020TVD = 19,
	witsml20__TrajStationType__DLS_x0020to_x0020NS = 20,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020AZI = 21,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020delta_MD = 22,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL = 23,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL_AZI = 24,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020MD = 25,
	witsml20__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020TVD = 26,
	witsml20__TrajStationType__formation_x0020MD = 27,
	witsml20__TrajStationType__formation_x0020TVD = 28,
	witsml20__TrajStationType__hold_x0020to_x0020delta_MD = 29,
	witsml20__TrajStationType__hold_x0020to_x0020MD = 30,
	witsml20__TrajStationType__hold_x0020to_x0020TVD = 31,
	witsml20__TrajStationType__INCL_x0020AZI_x0020and_x0020TVD = 32,
	witsml20__TrajStationType__interpolated = 33,
	witsml20__TrajStationType__marker_x0020MD = 34,
	witsml20__TrajStationType__marker_x0020TVD = 35,
	witsml20__TrajStationType__MD_x0020and_x0020INCL = 36,
	witsml20__TrajStationType__MD_x0020INCL_x0020and_x0020AZI = 37,
	witsml20__TrajStationType__N_x0020E_x0020and_x0020TVD = 38,
	witsml20__TrajStationType__NS_x0020EW_x0020and_x0020TVD = 39,
	witsml20__TrajStationType__target_x0020center = 40,
	witsml20__TrajStationType__target_x0020offset = 41,
	witsml20__TrajStationType__tie_x0020in_x0020point = 42,
	witsml20__TrajStationType__turnrate_x0020to_x0020AZI = 43,
	witsml20__TrajStationType__turnrate_x0020to_x0020delta_MD = 44,
	witsml20__TrajStationType__turnrate_x0020to_x0020MD = 45,
	witsml20__TrajStationType__turnrate_x0020to_x0020TVD = 46,
	witsml20__TrajStationType__unknown = 47
};
#endif

/* eml2_1ForGsoap.h:17183 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TypeSurveyTool (-1085)

/* witsml20:TypeSurveyTool */
enum witsml20__TypeSurveyTool {
	witsml20__TypeSurveyTool__gyroscopic_x0020inertial = 0,
	witsml20__TypeSurveyTool__gyroscopic_x0020MWD = 1,
	witsml20__TypeSurveyTool__gyroscopic_x0020north_x0020seeking = 2,
	witsml20__TypeSurveyTool__magnetic_x0020multiple_shot = 3,
	witsml20__TypeSurveyTool__magnetic_x0020MWD = 4,
	witsml20__TypeSurveyTool__magnetic_x0020single_shot = 5
};
#endif

/* eml2_1ForGsoap.h:17200 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStnCalcAlgorithm (-1086)

/* witsml20:TrajStnCalcAlgorithm */
enum witsml20__TrajStnCalcAlgorithm {
	witsml20__TrajStnCalcAlgorithm__average_x0020angle = 0,
	witsml20__TrajStnCalcAlgorithm__balanced_x0020tangential = 1,
	witsml20__TrajStnCalcAlgorithm__constant_x0020tool_x0020face = 2,
	witsml20__TrajStnCalcAlgorithm__custom = 3,
	witsml20__TrajStnCalcAlgorithm__inertial = 4,
	witsml20__TrajStnCalcAlgorithm__minimum_x0020curvature = 5,
	witsml20__TrajStnCalcAlgorithm__radius_x0020of_x0020curvature = 6,
	witsml20__TrajStnCalcAlgorithm__tangential = 7
};
#endif

/* eml2_1ForGsoap.h:17219 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationStatus (-1087)

/* witsml20:TrajStationStatus */
enum witsml20__TrajStationStatus {
	witsml20__TrajStationStatus__open = 0,
	witsml20__TrajStationStatus__rejected = 1,
	witsml20__TrajStationStatus__position = 2
};
#endif

/* eml2_1ForGsoap.h:17245 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SurveyToolOperatingMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SurveyToolOperatingMode (-1088)

/* witsml20:SurveyToolOperatingMode */
enum witsml20__SurveyToolOperatingMode {
	witsml20__SurveyToolOperatingMode__continuous_x0020xy = 0,
	witsml20__SurveyToolOperatingMode__continuous_x0020xyz = 1,
	witsml20__SurveyToolOperatingMode__continuous_x0020z = 2,
	witsml20__SurveyToolOperatingMode__unknown = 3,
	witsml20__SurveyToolOperatingMode__stationary = 4
};
#endif

/* eml2_1ForGsoap.h:17265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorModelMisalignmentMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorModelMisalignmentMode (-1089)

/* witsml20:ErrorModelMisalignmentMode */
enum witsml20__ErrorModelMisalignmentMode {
	witsml20__ErrorModelMisalignmentMode__1 = 1,
	witsml20__ErrorModelMisalignmentMode__2 = 2,
	witsml20__ErrorModelMisalignmentMode__3 = 3,
	witsml20__ErrorModelMisalignmentMode__unknown = 4
};
#endif

/* eml2_1ForGsoap.h:17292 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorPropagationMode (-1090)

/* witsml20:ErrorPropagationMode */
enum witsml20__ErrorPropagationMode {
	witsml20__ErrorPropagationMode__B = 'B',
	witsml20__ErrorPropagationMode__R = 'R',
	witsml20__ErrorPropagationMode__S = 'S',
	witsml20__ErrorPropagationMode__W = 'W',
	witsml20__ErrorPropagationMode__G = 'G'
};
#endif

/* eml2_1ForGsoap.h:17328 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AuthorizationStatus (-1091)

/* witsml20:AuthorizationStatus */
enum witsml20__AuthorizationStatus {
	witsml20__AuthorizationStatus__draft = 0,
	witsml20__AuthorizationStatus__authorized = 1,
	witsml20__AuthorizationStatus__superseded = 2,
	witsml20__AuthorizationStatus__withdrawn = 3
};
#endif

/* eml2_1ForGsoap.h:17367 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind (-1092)

/* eml21:ExistenceKind */
enum eml21__ExistenceKind {
	eml21__ExistenceKind__actual = 0,
	eml21__ExistenceKind__planned = 1,
	eml21__ExistenceKind__simulated = 2
};
#endif

/* eml2_1ForGsoap.h:17393 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank (-1093)

/* eml21:GeochronologicalRank */
enum eml21__GeochronologicalRank {
	eml21__GeochronologicalRank__eon = 0,
	eml21__GeochronologicalRank__era = 1,
	eml21__GeochronologicalRank__period = 2,
	eml21__GeochronologicalRank__epoch = 3,
	eml21__GeochronologicalRank__age = 4,
	eml21__GeochronologicalRank__chron = 5
};
#endif

/* eml2_1ForGsoap.h:17410 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind (-1094)

/* eml21:LithologyKind */
enum eml21__LithologyKind {
	eml21__LithologyKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml21__LithologyKind__alkali_x0020olivine_x0020basalt = 1,
	eml21__LithologyKind__amphibolite = 2,
	eml21__LithologyKind__andesite = 3,
	eml21__LithologyKind__anhydrite = 4,
	eml21__LithologyKind__anorthositic_x0020rock = 5,
	eml21__LithologyKind__anthracite = 6,
	eml21__LithologyKind__aplite = 7,
	eml21__LithologyKind__arenite = 8,
	eml21__LithologyKind__argillaceous = 9,
	eml21__LithologyKind__arkose = 10,
	eml21__LithologyKind__basalt = 11,
	eml21__LithologyKind__basanite = 12,
	eml21__LithologyKind__bauxite = 13,
	eml21__LithologyKind__bituminous_x0020coal = 14,
	eml21__LithologyKind__blueschist_x0020metamorphic_x0020rock = 15,
	eml21__LithologyKind__boninite = 16,
	eml21__LithologyKind__breccia = 17,
	eml21__LithologyKind__carbonate_x0020ooze = 18,
	eml21__LithologyKind__carbonatite = 19,
	eml21__LithologyKind__chalk = 20,
	eml21__LithologyKind__chert = 21,
	eml21__LithologyKind__clay = 22,
	eml21__LithologyKind__claystone = 23,
	eml21__LithologyKind__coal = 24,
	eml21__LithologyKind__conglomerate = 25,
	eml21__LithologyKind__dacite = 26,
	eml21__LithologyKind__diabase = 27,
	eml21__LithologyKind__diamictite = 28,
	eml21__LithologyKind__diorite = 29,
	eml21__LithologyKind__dioritoid = 30,
	eml21__LithologyKind__doleritic_x0020rock = 31,
	eml21__LithologyKind__dolomite = 32,
	eml21__LithologyKind__dolomitic = 33,
	eml21__LithologyKind__eclogite = 34,
	eml21__LithologyKind__exotic_x0020alkaline_x0020rock = 35,
	eml21__LithologyKind__feldspar = 36,
	eml21__LithologyKind__feldspathic_x0020arenite = 37,
	eml21__LithologyKind__fine_x0020grained_x0020igneous_x0020rock = 38,
	eml21__LithologyKind__foid_x0020dioritoid = 39,
	eml21__LithologyKind__foid_x0020gabbroid = 40,
	eml21__LithologyKind__foid_x0020syenitoid = 41,
	eml21__LithologyKind__foidite = 42,
	eml21__LithologyKind__foiditoid = 43,
	eml21__LithologyKind__foidolite = 44,
	eml21__LithologyKind__foliated_x0020metamorphic_x0020rock = 45,
	eml21__LithologyKind__fragmental_x0020igneous_x0020rock = 46,
	eml21__LithologyKind__gabbro = 47,
	eml21__LithologyKind__gabbroic_x0020rock = 48,
	eml21__LithologyKind__gabbroid = 49,
	eml21__LithologyKind__glauconite = 50,
	eml21__LithologyKind__gneiss = 51,
	eml21__LithologyKind__granite = 52,
	eml21__LithologyKind__granodiorite = 53,
	eml21__LithologyKind__granofels = 54,
	eml21__LithologyKind__granulite = 55,
	eml21__LithologyKind__gravel = 56,
	eml21__LithologyKind__greenstone = 57,
	eml21__LithologyKind__gumbo = 58,
	eml21__LithologyKind__gypsum = 59,
	eml21__LithologyKind__halite = 60,
	eml21__LithologyKind__hornfels = 61,
	eml21__LithologyKind__igneous_x0020rock = 62,
	eml21__LithologyKind__impact_x0020generated_x0020material = 63,
	eml21__LithologyKind__impure_x0020dolomite = 64,
	eml21__LithologyKind__impure_x0020limestone = 'A',
	eml21__LithologyKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 'B',
	eml21__LithologyKind__iron_x0020rich_x0020sedimentary_x0020rock = 'C',
	eml21__LithologyKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 'D',
	eml21__LithologyKind__komatiitic_x0020rock = 'E',
	eml21__LithologyKind__latitic_x0020rock = 'F',
	eml21__LithologyKind__lignite = 'G',
	eml21__LithologyKind__lime_x0020boundstone = 'H',
	eml21__LithologyKind__lime_x0020framestone = 'I',
	eml21__LithologyKind__lime_x0020grainstone = 'J',
	eml21__LithologyKind__lime_x0020mudstone = 'K',
	eml21__LithologyKind__lime_x0020packstone = 'L',
	eml21__LithologyKind__lime_x0020wackestone = 'M',
	eml21__LithologyKind__limestone = 'N',
	eml21__LithologyKind__marble = 'O',
	eml21__LithologyKind__marl = 'P',
	eml21__LithologyKind__metamorphic_x0020rock = 'Q',
	eml21__LithologyKind__mica_x0020schist = 'R',
	eml21__LithologyKind__migmatite = 'S',
	eml21__LithologyKind__monzogabbro = 'T',
	eml21__LithologyKind__mud = 'U',
	eml21__LithologyKind__mudstone = 'V',
	eml21__LithologyKind__mylonitic_x0020rock = 'W',
	eml21__LithologyKind__no_x0020description = 'X',
	eml21__LithologyKind__no_x0020sample = 'Y',
	eml21__LithologyKind__ooze = 'Z',
	eml21__LithologyKind__ophiolite = 91,
	eml21__LithologyKind__organic_x0020bearing_x0020mudstone = 92,
	eml21__LithologyKind__peat = 93,
	eml21__LithologyKind__pegmatite = 94,
	eml21__LithologyKind__peridotite = 95,
	eml21__LithologyKind__phaneritic_x0020igneous_x0020rock = 96,
	eml21__LithologyKind__phonolite = 'a',
	eml21__LithologyKind__phonolitoid = 'b',
	eml21__LithologyKind__phosphate = 'c',
	eml21__LithologyKind__phosphate_x0020rock = 'd',
	eml21__LithologyKind__phyllite = 'e',
	eml21__LithologyKind__porphyry = 'f',
	eml21__LithologyKind__potassium_x0020and_x0020magnesium_x0020salts = 'g',
	eml21__LithologyKind__pyroclastic_x0020breccia = 'h',
	eml21__LithologyKind__pyroclastic_x0020rock = 'i',
	eml21__LithologyKind__pyroxenite = 'j',
	eml21__LithologyKind__quartz_x0020arenite = 'k',
	eml21__LithologyKind__quartzite = 'l',
	eml21__LithologyKind__rhyolite = 'm',
	eml21__LithologyKind__rock_x0020salt = 'n',
	eml21__LithologyKind__sand = 'o',
	eml21__LithologyKind__sandstone = 'p',
	eml21__LithologyKind__sandy = 'q',
	eml21__LithologyKind__sapropel = 'r',
	eml21__LithologyKind__schist = 's',
	eml21__LithologyKind__serpentinite = 't',
	eml21__LithologyKind__shale = 'u',
	eml21__LithologyKind__siliceous_x0020ooze = 'v',
	eml21__LithologyKind__silt = 'w',
	eml21__LithologyKind__siltstone = 'x',
	eml21__LithologyKind__skarn = 'y',
	eml21__LithologyKind__slate = 'z',
	eml21__LithologyKind__spilite = 123,
	eml21__LithologyKind__syenite = 124,
	eml21__LithologyKind__syenitoid = 125,
	eml21__LithologyKind__sylvite = 126,
	eml21__LithologyKind__tephrite = 127,
	eml21__LithologyKind__tephritoid = 128,
	eml21__LithologyKind__tholeiitic_x0020basalt = 129,
	eml21__LithologyKind__tonalite = 130,
	eml21__LithologyKind__trachyte = 131,
	eml21__LithologyKind__trachytic_x0020rock = 132,
	eml21__LithologyKind__trachytoid = 133,
	eml21__LithologyKind__travertine = 134,
	eml21__LithologyKind__tuff = 135,
	eml21__LithologyKind__tuffite = 136,
	eml21__LithologyKind__ultrabasic = 137,
	eml21__LithologyKind__undifferentiated = 138,
	eml21__LithologyKind__unknown = 139,
	eml21__LithologyKind__wacke = 140
};
#endif

/* eml2_1ForGsoap.h:17558 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind (-1095)

/* eml21:LithologyQualifierKind */
enum eml21__LithologyQualifierKind {
	eml21__LithologyQualifierKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml21__LithologyQualifierKind__alkali_x0020olivine_x0020basalt = 1,
	eml21__LithologyQualifierKind__amphibolite = 2,
	eml21__LithologyQualifierKind__amphibolitic = 3,
	eml21__LithologyQualifierKind__andesite = 4,
	eml21__LithologyQualifierKind__andesitic = 5,
	eml21__LithologyQualifierKind__anhydrite = 6,
	eml21__LithologyQualifierKind__anhydritic = 7,
	eml21__LithologyQualifierKind__ankerite = 8,
	eml21__LithologyQualifierKind__ankeritic = 9,
	eml21__LithologyQualifierKind__anorthositic_x0020rock = 10,
	eml21__LithologyQualifierKind__anthracite = 11,
	eml21__LithologyQualifierKind__anthracitic = 12,
	eml21__LithologyQualifierKind__aplite = 13,
	eml21__LithologyQualifierKind__aplitic = 14,
	eml21__LithologyQualifierKind__arenite = 15,
	eml21__LithologyQualifierKind__arenitic = 16,
	eml21__LithologyQualifierKind__argillaceous = 17,
	eml21__LithologyQualifierKind__arkose = 18,
	eml21__LithologyQualifierKind__arkosic = 19,
	eml21__LithologyQualifierKind__barite = 20,
	eml21__LithologyQualifierKind__baritic = 21,
	eml21__LithologyQualifierKind__basalt = 22,
	eml21__LithologyQualifierKind__basaltic = 23,
	eml21__LithologyQualifierKind__basanite = 24,
	eml21__LithologyQualifierKind__basanitic = 25,
	eml21__LithologyQualifierKind__bauxite = 26,
	eml21__LithologyQualifierKind__bauxitic = 27,
	eml21__LithologyQualifierKind__belemnites = 28,
	eml21__LithologyQualifierKind__belemnitic = 29,
	eml21__LithologyQualifierKind__bioturbated = 30,
	eml21__LithologyQualifierKind__bioturbation = 31,
	eml21__LithologyQualifierKind__bitumen = 32,
	eml21__LithologyQualifierKind__bituminous = 33,
	eml21__LithologyQualifierKind__bituminous_x0020coal = 34,
	eml21__LithologyQualifierKind__blueschist_x0020metamorphic_x0020rock = 35,
	eml21__LithologyQualifierKind__boninite = 36,
	eml21__LithologyQualifierKind__breccia = 37,
	eml21__LithologyQualifierKind__brecciated = 38,
	eml21__LithologyQualifierKind__bryozoan = 39,
	eml21__LithologyQualifierKind__bryozoans = 40,
	eml21__LithologyQualifierKind__burrowed = 41,
	eml21__LithologyQualifierKind__burrows = 42,
	eml21__LithologyQualifierKind__calcareous = 43,
	eml21__LithologyQualifierKind__calcite = 44,
	eml21__LithologyQualifierKind__calcite_x0020concretion = 45,
	eml21__LithologyQualifierKind__calcitic = 46,
	eml21__LithologyQualifierKind__carbonaceous = 47,
	eml21__LithologyQualifierKind__carbonate_x0020ooze = 48,
	eml21__LithologyQualifierKind__carbonatite = 49,
	eml21__LithologyQualifierKind__carbonatitic = 50,
	eml21__LithologyQualifierKind__chalk = 51,
	eml21__LithologyQualifierKind__chalky = 52,
	eml21__LithologyQualifierKind__chamosite = 53,
	eml21__LithologyQualifierKind__chamositic = 54,
	eml21__LithologyQualifierKind__chert = 55,
	eml21__LithologyQualifierKind__cherty = 56,
	eml21__LithologyQualifierKind__chlorite = 57,
	eml21__LithologyQualifierKind__chloritic = 58,
	eml21__LithologyQualifierKind__clay = 59,
	eml21__LithologyQualifierKind__claystone = 60,
	eml21__LithologyQualifierKind__coal = 61,
	eml21__LithologyQualifierKind__concretionary = 62,
	eml21__LithologyQualifierKind__concretions = 63,
	eml21__LithologyQualifierKind__conglomerate = 64,
	eml21__LithologyQualifierKind__conglomeratic = 'A',
	eml21__LithologyQualifierKind__coral_x0020fragments = 'B',
	eml21__LithologyQualifierKind__coralline = 'C',
	eml21__LithologyQualifierKind__crinoidal = 'D',
	eml21__LithologyQualifierKind__crinoids = 'E',
	eml21__LithologyQualifierKind__dacite = 'F',
	eml21__LithologyQualifierKind__dacitic = 'G',
	eml21__LithologyQualifierKind__diabase = 'H',
	eml21__LithologyQualifierKind__diabasic = 'I',
	eml21__LithologyQualifierKind__diamictite = 'J',
	eml21__LithologyQualifierKind__diamictitic = 'K',
	eml21__LithologyQualifierKind__diatomaceous = 'L',
	eml21__LithologyQualifierKind__diatoms = 'M',
	eml21__LithologyQualifierKind__diorite = 'N',
	eml21__LithologyQualifierKind__dioritic = 'O',
	eml21__LithologyQualifierKind__dioritoid = 'P',
	eml21__LithologyQualifierKind__dioritoidic = 'Q',
	eml21__LithologyQualifierKind__doleritic_x0020rock = 'R',
	eml21__LithologyQualifierKind__dolomite = 'S',
	eml21__LithologyQualifierKind__dolomite_x0020concretion = 'T',
	eml21__LithologyQualifierKind__dolomite_x0020stringer = 'U',
	eml21__LithologyQualifierKind__dolomitic = 'V',
	eml21__LithologyQualifierKind__eclogite = 'W',
	eml21__LithologyQualifierKind__eclogitic = 'X',
	eml21__LithologyQualifierKind__exotic_x0020alkaline_x0020rock = 'Y',
	eml21__LithologyQualifierKind__feldspar = 'Z',
	eml21__LithologyQualifierKind__feldsparic = 91,
	eml21__LithologyQualifierKind__feldspathic = 92,
	eml21__LithologyQualifierKind__feldspathic_x0020arenite = 93,
	eml21__LithologyQualifierKind__ferruginous = 94,
	eml21__LithologyQualifierKind__fine_x0020grained_x0020igneous_x0020rock = 95,
	eml21__LithologyQualifierKind__foid_x0020dioritoid = 96,
	eml21__LithologyQualifierKind__foid_x0020gabbroid = 'a',
	eml21__LithologyQualifierKind__foid_x0020syenitoid = 'b',
	eml21__LithologyQualifierKind__foidite = 'c',
	eml21__LithologyQualifierKind__foiditic = 'd',
	eml21__LithologyQualifierKind__foiditoid = 'e',
	eml21__LithologyQualifierKind__foidolite = 'f',
	eml21__LithologyQualifierKind__foidolitic = 'g',
	eml21__LithologyQualifierKind__foliated_x0020metamorphic_x0020rock = 'h',
	eml21__LithologyQualifierKind__foraminifera = 'i',
	eml21__LithologyQualifierKind__foraminiferous = 'j',
	eml21__LithologyQualifierKind__forams = 'k',
	eml21__LithologyQualifierKind__fossil_x0020fragments = 'l',
	eml21__LithologyQualifierKind__fossiliferous = 'm',
	eml21__LithologyQualifierKind__fossils_x0020undifferentiated = 'n',
	eml21__LithologyQualifierKind__fragmental_x0020igneous_x0020rock = 'o',
	eml21__LithologyQualifierKind__gabbro = 'p',
	eml21__LithologyQualifierKind__gabbroic = 'q',
	eml21__LithologyQualifierKind__gabbroic_x0020rock = 'r',
	eml21__LithologyQualifierKind__gabbroid = 's',
	eml21__LithologyQualifierKind__gabbroidic = 't',
	eml21__LithologyQualifierKind__gilsonite = 'u',
	eml21__LithologyQualifierKind__gilsonitic = 'v',
	eml21__LithologyQualifierKind__glauconite = 'w',
	eml21__LithologyQualifierKind__glauconitic = 'x',
	eml21__LithologyQualifierKind__gneiss = 'y',
	eml21__LithologyQualifierKind__gneissic = 'z',
	eml21__LithologyQualifierKind__granite = 123,
	eml21__LithologyQualifierKind__granitic = 124,
	eml21__LithologyQualifierKind__granodiorite = 125,
	eml21__LithologyQualifierKind__granodioritic = 126,
	eml21__LithologyQualifierKind__granofels = 127,
	eml21__LithologyQualifierKind__granulite = 128,
	eml21__LithologyQualifierKind__granulitic = 129,
	eml21__LithologyQualifierKind__gravel = 130,
	eml21__LithologyQualifierKind__gravelly = 131,
	eml21__LithologyQualifierKind__greenstone = 132,
	eml21__LithologyQualifierKind__gumbo = 133,
	eml21__LithologyQualifierKind__gypsiferous = 134,
	eml21__LithologyQualifierKind__gypsum = 135,
	eml21__LithologyQualifierKind__halite = 136,
	eml21__LithologyQualifierKind__halitic = 137,
	eml21__LithologyQualifierKind__hornfels = 138,
	eml21__LithologyQualifierKind__hornfelsic = 139,
	eml21__LithologyQualifierKind__igneous = 140,
	eml21__LithologyQualifierKind__igneous_x0020rock = 141,
	eml21__LithologyQualifierKind__illite = 142,
	eml21__LithologyQualifierKind__illitic = 143,
	eml21__LithologyQualifierKind__impact_x0020generated_x0020material = 144,
	eml21__LithologyQualifierKind__impure_x0020dolomite = 145,
	eml21__LithologyQualifierKind__impure_x0020limestone = 146,
	eml21__LithologyQualifierKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 147,
	eml21__LithologyQualifierKind__iron_x0020rich_x0020sedimentary_x0020rock = 148,
	eml21__LithologyQualifierKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 149,
	eml21__LithologyQualifierKind__kaolinite = 150,
	eml21__LithologyQualifierKind__kaolinitic = 151,
	eml21__LithologyQualifierKind__komatiitic_x0020rock = 152,
	eml21__LithologyQualifierKind__latitic_x0020rock = 153,
	eml21__LithologyQualifierKind__lignite = 154,
	eml21__LithologyQualifierKind__lignitic = 155,
	eml21__LithologyQualifierKind__lime_x0020boundstone = 156,
	eml21__LithologyQualifierKind__lime_x0020framestone = 157,
	eml21__LithologyQualifierKind__lime_x0020grainstone = 158,
	eml21__LithologyQualifierKind__lime_x0020mudstone = 159,
	eml21__LithologyQualifierKind__lime_x0020packstone = 160,
	eml21__LithologyQualifierKind__lime_x0020wackestone = 161,
	eml21__LithologyQualifierKind__limestone = 162,
	eml21__LithologyQualifierKind__limestone_x0020stringer = 163,
	eml21__LithologyQualifierKind__lithic = 164,
	eml21__LithologyQualifierKind__lithic_x0020fragments = 165,
	eml21__LithologyQualifierKind__marble = 166,
	eml21__LithologyQualifierKind__marcasite = 167,
	eml21__LithologyQualifierKind__marcasitic = 168,
	eml21__LithologyQualifierKind__marl = 169,
	eml21__LithologyQualifierKind__marly = 170,
	eml21__LithologyQualifierKind__metamorphic_x0020rock = 171,
	eml21__LithologyQualifierKind__mica = 172,
	eml21__LithologyQualifierKind__mica_x0020schist = 173,
	eml21__LithologyQualifierKind__micaceous = 174,
	eml21__LithologyQualifierKind__microfossiliferous = 175,
	eml21__LithologyQualifierKind__microfossils = 176,
	eml21__LithologyQualifierKind__migmatite = 177,
	eml21__LithologyQualifierKind__migmatitic = 178,
	eml21__LithologyQualifierKind__monzogabbro = 179,
	eml21__LithologyQualifierKind__monzogabbroic = 180,
	eml21__LithologyQualifierKind__mud = 181,
	eml21__LithologyQualifierKind__muddy = 182,
	eml21__LithologyQualifierKind__mudstone = 183,
	eml21__LithologyQualifierKind__mylonitic_x0020rock = 184,
	eml21__LithologyQualifierKind__no_x0020sample = 185,
	eml21__LithologyQualifierKind__oncolite = 186,
	eml21__LithologyQualifierKind__oncoliths = 187,
	eml21__LithologyQualifierKind__oncolitic = 188,
	eml21__LithologyQualifierKind__ooids = 189,
	eml21__LithologyQualifierKind__ooliths = 190,
	eml21__LithologyQualifierKind__oolitic = 191,
	eml21__LithologyQualifierKind__ooze = 192,
	eml21__LithologyQualifierKind__ophiolite = 193,
	eml21__LithologyQualifierKind__ophiolitic = 194,
	eml21__LithologyQualifierKind__organic_x0020bearing_x0020mudstone = 195,
	eml21__LithologyQualifierKind__ostracodal = 196,
	eml21__LithologyQualifierKind__ostracods = 197,
	eml21__LithologyQualifierKind__peat = 198,
	eml21__LithologyQualifierKind__peaty = 199,
	eml21__LithologyQualifierKind__pebble = 200,
	eml21__LithologyQualifierKind__pebbly = 201,
	eml21__LithologyQualifierKind__pegmatite = 202,
	eml21__LithologyQualifierKind__pegmatitic = 203,
	eml21__LithologyQualifierKind__pelletal = 204,
	eml21__LithologyQualifierKind__pellets = 205,
	eml21__LithologyQualifierKind__peloidal = 206,
	eml21__LithologyQualifierKind__peloids = 207,
	eml21__LithologyQualifierKind__peridotite = 208,
	eml21__LithologyQualifierKind__peridotitic = 209,
	eml21__LithologyQualifierKind__phaneritic_x0020igneous_x0020rock = 210,
	eml21__LithologyQualifierKind__phonolite = 211,
	eml21__LithologyQualifierKind__phonolitic = 212,
	eml21__LithologyQualifierKind__phonolitoid = 213,
	eml21__LithologyQualifierKind__phosphate = 214,
	eml21__LithologyQualifierKind__phosphate_x0020rock = 215,
	eml21__LithologyQualifierKind__phosphatic = 216,
	eml21__LithologyQualifierKind__phyllite = 217,
	eml21__LithologyQualifierKind__phyllitic = 218,
	eml21__LithologyQualifierKind__pisolite = 219,
	eml21__LithologyQualifierKind__pisoliths = 220,
	eml21__LithologyQualifierKind__pisolitic = 221,
	eml21__LithologyQualifierKind__plant_x0020remains = 222,
	eml21__LithologyQualifierKind__porphyritic = 223,
	eml21__LithologyQualifierKind__porphyry = 224,
	eml21__LithologyQualifierKind__potassium_x0020and_x0020magnesium_x0020salts = 225,
	eml21__LithologyQualifierKind__pyrite = 226,
	eml21__LithologyQualifierKind__pyritic = 227,
	eml21__LithologyQualifierKind__pyroclastic_x0020breccia = 228,
	eml21__LithologyQualifierKind__pyroclastic_x0020rock = 229,
	eml21__LithologyQualifierKind__pyroxenite = 230,
	eml21__LithologyQualifierKind__pyroxenitic = 231,
	eml21__LithologyQualifierKind__quartiferous = 232,
	eml21__LithologyQualifierKind__quartz = 233,
	eml21__LithologyQualifierKind__quartz_x0020arenite = 234,
	eml21__LithologyQualifierKind__quartzite = 235,
	eml21__LithologyQualifierKind__quartzitic = 236,
	eml21__LithologyQualifierKind__radiolaria = 237,
	eml21__LithologyQualifierKind__radiolarian = 238,
	eml21__LithologyQualifierKind__rhyolite = 239,
	eml21__LithologyQualifierKind__rhyolitic = 240,
	eml21__LithologyQualifierKind__rock_x0020salt = 241,
	eml21__LithologyQualifierKind__rootlets = 242,
	eml21__LithologyQualifierKind__salty = 243,
	eml21__LithologyQualifierKind__sand = 244,
	eml21__LithologyQualifierKind__sandstone = 245,
	eml21__LithologyQualifierKind__sandy = 246,
	eml21__LithologyQualifierKind__sapropel = 247,
	eml21__LithologyQualifierKind__sapropelic = 248,
	eml21__LithologyQualifierKind__schist = 249,
	eml21__LithologyQualifierKind__schisty = 250,
	eml21__LithologyQualifierKind__sepentinitic = 251,
	eml21__LithologyQualifierKind__serpentinite = 252,
	eml21__LithologyQualifierKind__shale = 253,
	eml21__LithologyQualifierKind__shaly = 254,
	eml21__LithologyQualifierKind__shell_x0020fragments = 255,
	eml21__LithologyQualifierKind__shelly = 256,
	eml21__LithologyQualifierKind__siderite = 257,
	eml21__LithologyQualifierKind__siderite_x0020concretion = 258,
	eml21__LithologyQualifierKind__sideritic = 259,
	eml21__LithologyQualifierKind__siliceous_x0020ooze = 260,
	eml21__LithologyQualifierKind__silt = 261,
	eml21__LithologyQualifierKind__siltstone = 262,
	eml21__LithologyQualifierKind__silty = 263,
	eml21__LithologyQualifierKind__skarn = 264,
	eml21__LithologyQualifierKind__skarny = 265,
	eml21__LithologyQualifierKind__slate = 266,
	eml21__LithologyQualifierKind__slaty = 267,
	eml21__LithologyQualifierKind__smectite = 268,
	eml21__LithologyQualifierKind__smectitic = 269,
	eml21__LithologyQualifierKind__spicular = 270,
	eml21__LithologyQualifierKind__spicules = 271,
	eml21__LithologyQualifierKind__spilite = 272,
	eml21__LithologyQualifierKind__spilitic = 273,
	eml21__LithologyQualifierKind__stylolites = 274,
	eml21__LithologyQualifierKind__stylolitic = 275,
	eml21__LithologyQualifierKind__syenite = 276,
	eml21__LithologyQualifierKind__syenitic = 277,
	eml21__LithologyQualifierKind__syenitoid = 278,
	eml21__LithologyQualifierKind__sylvite = 279,
	eml21__LithologyQualifierKind__sylvitic = 280,
	eml21__LithologyQualifierKind__tarry = 281,
	eml21__LithologyQualifierKind__tephrite = 282,
	eml21__LithologyQualifierKind__tephritic = 283,
	eml21__LithologyQualifierKind__tephritoid = 284,
	eml21__LithologyQualifierKind__tholeiitic_x0020basalt = 285,
	eml21__LithologyQualifierKind__tonalite = 286,
	eml21__LithologyQualifierKind__tonalitic = 287,
	eml21__LithologyQualifierKind__trachyte = 288,
	eml21__LithologyQualifierKind__trachytic = 289,
	eml21__LithologyQualifierKind__trachytic_x0020rock = 290,
	eml21__LithologyQualifierKind__trachytoid = 291,
	eml21__LithologyQualifierKind__travertine = 292,
	eml21__LithologyQualifierKind__tuff = 293,
	eml21__LithologyQualifierKind__tuffaceous = 294,
	eml21__LithologyQualifierKind__tuffite = 295,
	eml21__LithologyQualifierKind__tuffitic = 296,
	eml21__LithologyQualifierKind__ultrabasic = 297,
	eml21__LithologyQualifierKind__undifferentiated = 298,
	eml21__LithologyQualifierKind__unknown = 299,
	eml21__LithologyQualifierKind__wacke = 300
};
#endif

/* eml2_1ForGsoap.h:17870 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank (-1096)

/* eml21:LithostratigraphicRank */
enum eml21__LithostratigraphicRank {
	eml21__LithostratigraphicRank__group = 0,
	eml21__LithostratigraphicRank__formation = 1,
	eml21__LithostratigraphicRank__member = 2,
	eml21__LithostratigraphicRank__bed = 3
};
#endif

/* eml2_1ForGsoap.h:17919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind (-1097)

/* eml21:MatrixCementKind */
enum eml21__MatrixCementKind {
	eml21__MatrixCementKind__ankerite = 0,
	eml21__MatrixCementKind__calcite = 1,
	eml21__MatrixCementKind__chlorite = 2,
	eml21__MatrixCementKind__dolomite = 3,
	eml21__MatrixCementKind__illite = 4,
	eml21__MatrixCementKind__kaolinite = 5,
	eml21__MatrixCementKind__quartz = 6,
	eml21__MatrixCementKind__siderite = 7,
	eml21__MatrixCementKind__smectite = 8
};
#endif

/* eml2_1ForGsoap.h:17939 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass (-1098)

/* eml21:MeasureClass */
enum eml21__MeasureClass {
	eml21__MeasureClass__absorbed_x0020dose = 0,
	eml21__MeasureClass__activity_x0020of_x0020radioactivity = 1,
	eml21__MeasureClass__amount_x0020of_x0020substance = 2,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml21__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml21__MeasureClass__angle_x0020per_x0020length = 8,
	eml21__MeasureClass__angle_x0020per_x0020volume = 9,
	eml21__MeasureClass__angular_x0020acceleration = 10,
	eml21__MeasureClass__angular_x0020velocity = 11,
	eml21__MeasureClass__api_x0020gamma_x0020ray = 12,
	eml21__MeasureClass__api_x0020gravity = 13,
	eml21__MeasureClass__api_x0020neutron = 14,
	eml21__MeasureClass__area = 15,
	eml21__MeasureClass__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml21__MeasureClass__area_x0020per_x0020area = 17,
	eml21__MeasureClass__area_x0020per_x0020count = 18,
	eml21__MeasureClass__area_x0020per_x0020mass = 19,
	eml21__MeasureClass__area_x0020per_x0020time = 20,
	eml21__MeasureClass__area_x0020per_x0020volume = 21,
	eml21__MeasureClass__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml21__MeasureClass__capacitance = 23,
	eml21__MeasureClass__cation_x0020exchange_x0020capacity = 24,
	eml21__MeasureClass__data_x0020transfer_x0020speed = 25,
	eml21__MeasureClass__diffusion_x0020coefficient = 26,
	eml21__MeasureClass__diffusive_x0020time_x0020of_x0020flight = 27,
	eml21__MeasureClass__digital_x0020storage = 28,
	eml21__MeasureClass__dimensionless = 29,
	eml21__MeasureClass__dipole_x0020moment = 30,
	eml21__MeasureClass__dose_x0020equivalent = 31,
	eml21__MeasureClass__dynamic_x0020viscosity = 32,
	eml21__MeasureClass__electric_x0020charge = 33,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020area = 34,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020mass = 35,
	eml21__MeasureClass__electric_x0020charge_x0020per_x0020volume = 36,
	eml21__MeasureClass__electric_x0020conductance = 37,
	eml21__MeasureClass__electric_x0020conductivity = 38,
	eml21__MeasureClass__electric_x0020current = 39,
	eml21__MeasureClass__electric_x0020current_x0020density = 40,
	eml21__MeasureClass__electric_x0020field_x0020strength = 41,
	eml21__MeasureClass__electric_x0020potential_x0020difference = 42,
	eml21__MeasureClass__electric_x0020resistance = 43,
	eml21__MeasureClass__electric_x0020resistance_x0020per_x0020length = 44,
	eml21__MeasureClass__electrical_x0020resistivity = 45,
	eml21__MeasureClass__electromagnetic_x0020moment = 46,
	eml21__MeasureClass__energy = 47,
	eml21__MeasureClass__energy_x0020length_x0020per_x0020area = 48,
	eml21__MeasureClass__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml21__MeasureClass__energy_x0020per_x0020area = 50,
	eml21__MeasureClass__energy_x0020per_x0020length = 51,
	eml21__MeasureClass__energy_x0020per_x0020mass = 52,
	eml21__MeasureClass__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml21__MeasureClass__energy_x0020per_x0020volume = 54,
	eml21__MeasureClass__force = 55,
	eml21__MeasureClass__force_x0020area = 56,
	eml21__MeasureClass__force_x0020length_x0020per_x0020length = 57,
	eml21__MeasureClass__force_x0020per_x0020force = 58,
	eml21__MeasureClass__force_x0020per_x0020length = 59,
	eml21__MeasureClass__force_x0020per_x0020volume = 60,
	eml21__MeasureClass__frequency = 61,
	eml21__MeasureClass__frequency_x0020interval = 62,
	eml21__MeasureClass__heat_x0020capacity = 63,
	eml21__MeasureClass__heat_x0020flow_x0020rate = 64,
	eml21__MeasureClass__heat_x0020transfer_x0020coefficient = 'A',
	eml21__MeasureClass__illuminance = 'B',
	eml21__MeasureClass__inductance = 'C',
	eml21__MeasureClass__isothermal_x0020compressibility = 'D',
	eml21__MeasureClass__kinematic_x0020viscosity = 'E',
	eml21__MeasureClass__length = 'F',
	eml21__MeasureClass__length_x0020per_x0020length = 'G',
	eml21__MeasureClass__length_x0020per_x0020mass = 'H',
	eml21__MeasureClass__length_x0020per_x0020pressure = 'I',
	eml21__MeasureClass__length_x0020per_x0020temperature = 'J',
	eml21__MeasureClass__length_x0020per_x0020time = 'K',
	eml21__MeasureClass__length_x0020per_x0020volume = 'L',
	eml21__MeasureClass__light_x0020exposure = 'M',
	eml21__MeasureClass__linear_x0020acceleration = 'N',
	eml21__MeasureClass__linear_x0020thermal_x0020expansion = 'O',
	eml21__MeasureClass__logarithmic_x0020power_x0020ratio = 'P',
	eml21__MeasureClass__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml21__MeasureClass__luminance = 'R',
	eml21__MeasureClass__luminous_x0020efficacy = 'S',
	eml21__MeasureClass__luminous_x0020flux = 'T',
	eml21__MeasureClass__luminous_x0020intensity = 'U',
	eml21__MeasureClass__magnetic_x0020dipole_x0020moment = 'V',
	eml21__MeasureClass__magnetic_x0020field_x0020strength = 'W',
	eml21__MeasureClass__magnetic_x0020flux = 'X',
	eml21__MeasureClass__magnetic_x0020flux_x0020density = 'Y',
	eml21__MeasureClass__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml21__MeasureClass__magnetic_x0020permeability = 91,
	eml21__MeasureClass__magnetic_x0020vector_x0020potential = 92,
	eml21__MeasureClass__mass = 93,
	eml21__MeasureClass__mass_x0020length = 94,
	eml21__MeasureClass__mass_x0020per_x0020area = 95,
	eml21__MeasureClass__mass_x0020per_x0020energy = 96,
	eml21__MeasureClass__mass_x0020per_x0020length = 'a',
	eml21__MeasureClass__mass_x0020per_x0020mass = 'b',
	eml21__MeasureClass__mass_x0020per_x0020time = 'c',
	eml21__MeasureClass__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml21__MeasureClass__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml21__MeasureClass__mass_x0020per_x0020volume = 'f',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml21__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml21__MeasureClass__mobility = 'j',
	eml21__MeasureClass__molar_x0020energy = 'k',
	eml21__MeasureClass__molar_x0020heat_x0020capacity = 'l',
	eml21__MeasureClass__molar_x0020volume = 'm',
	eml21__MeasureClass__molecular_x0020weight = 'n',
	eml21__MeasureClass__moment_x0020of_x0020force = 'o',
	eml21__MeasureClass__moment_x0020of_x0020inertia = 'p',
	eml21__MeasureClass__momentum = 'q',
	eml21__MeasureClass__normalized_x0020power = 'r',
	eml21__MeasureClass__permeability_x0020length = 's',
	eml21__MeasureClass__permeability_x0020rock = 't',
	eml21__MeasureClass__permittivity = 'u',
	eml21__MeasureClass__plane_x0020angle = 'v',
	eml21__MeasureClass__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml21__MeasureClass__power = 'x',
	eml21__MeasureClass__power_x0020per_x0020area = 'y',
	eml21__MeasureClass__power_x0020per_x0020power = 'z',
	eml21__MeasureClass__power_x0020per_x0020volume = 123,
	eml21__MeasureClass__pressure = 124,
	eml21__MeasureClass__pressure_x0020per_x0020pressure = 125,
	eml21__MeasureClass__pressure_x0020per_x0020time = 126,
	eml21__MeasureClass__pressure_x0020per_x0020volume = 127,
	eml21__MeasureClass__pressure_x0020squared = 128,
	eml21__MeasureClass__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml21__MeasureClass__pressure_x0020time_x0020per_x0020volume = 130,
	eml21__MeasureClass__quantity_x0020of_x0020light = 131,
	eml21__MeasureClass__radiance = 132,
	eml21__MeasureClass__radiant_x0020intensity = 133,
	eml21__MeasureClass__reciprocal_x0020area = 134,
	eml21__MeasureClass__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml21__MeasureClass__reciprocal_x0020force = 136,
	eml21__MeasureClass__reciprocal_x0020length = 137,
	eml21__MeasureClass__reciprocal_x0020mass = 138,
	eml21__MeasureClass__reciprocal_x0020mass_x0020time = 139,
	eml21__MeasureClass__reciprocal_x0020pressure = 140,
	eml21__MeasureClass__reciprocal_x0020time = 141,
	eml21__MeasureClass__reciprocal_x0020volume = 142,
	eml21__MeasureClass__reluctance = 143,
	eml21__MeasureClass__second_x0020moment_x0020of_x0020area = 144,
	eml21__MeasureClass__signaling_x0020event_x0020per_x0020time = 145,
	eml21__MeasureClass__solid_x0020angle = 146,
	eml21__MeasureClass__specific_x0020heat_x0020capacity = 147,
	eml21__MeasureClass__temperature_x0020interval = 148,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020length = 149,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml21__MeasureClass__temperature_x0020interval_x0020per_x0020time = 151,
	eml21__MeasureClass__thermal_x0020conductance = 152,
	eml21__MeasureClass__thermal_x0020conductivity = 153,
	eml21__MeasureClass__thermal_x0020diffusivity = 154,
	eml21__MeasureClass__thermal_x0020insulance = 155,
	eml21__MeasureClass__thermal_x0020resistance = 156,
	eml21__MeasureClass__thermodynamic_x0020temperature = 157,
	eml21__MeasureClass__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml21__MeasureClass__time = 159,
	eml21__MeasureClass__time_x0020per_x0020length = 160,
	eml21__MeasureClass__time_x0020per_x0020mass = 161,
	eml21__MeasureClass__time_x0020per_x0020time = 162,
	eml21__MeasureClass__time_x0020per_x0020volume = 163,
	eml21__MeasureClass__vertical_x0020coordinate = 164,
	eml21__MeasureClass__volume = 165,
	eml21__MeasureClass__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml21__MeasureClass__volume_x0020per_x0020area = 167,
	eml21__MeasureClass__volume_x0020per_x0020length = 168,
	eml21__MeasureClass__volume_x0020per_x0020mass = 169,
	eml21__MeasureClass__volume_x0020per_x0020pressure = 170,
	eml21__MeasureClass__volume_x0020per_x0020rotation = 171,
	eml21__MeasureClass__volume_x0020per_x0020time = 172,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020length = 173,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml21__MeasureClass__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml21__MeasureClass__volume_x0020per_x0020volume = 180,
	eml21__MeasureClass__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml21__MeasureClass__volumetric_x0020thermal_x0020expansion = 182,
	eml21__MeasureClass__unitless = 183
};
#endif

/* eml2_1ForGsoap.h:18130 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind (-1099)

/* eml21:QuantityClassKind */
enum eml21__QuantityClassKind {
	eml21__QuantityClassKind__absorbed_x0020dose = 0,
	eml21__QuantityClassKind__activity_x0020of_x0020radioactivity = 1,
	eml21__QuantityClassKind__amount_x0020of_x0020substance = 2,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml21__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml21__QuantityClassKind__angle_x0020per_x0020length = 8,
	eml21__QuantityClassKind__angle_x0020per_x0020volume = 9,
	eml21__QuantityClassKind__angular_x0020acceleration = 10,
	eml21__QuantityClassKind__angular_x0020velocity = 11,
	eml21__QuantityClassKind__api_x0020gamma_x0020ray = 12,
	eml21__QuantityClassKind__api_x0020gravity = 13,
	eml21__QuantityClassKind__api_x0020neutron = 14,
	eml21__QuantityClassKind__area = 15,
	eml21__QuantityClassKind__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml21__QuantityClassKind__area_x0020per_x0020area = 17,
	eml21__QuantityClassKind__area_x0020per_x0020count = 18,
	eml21__QuantityClassKind__area_x0020per_x0020mass = 19,
	eml21__QuantityClassKind__area_x0020per_x0020time = 20,
	eml21__QuantityClassKind__area_x0020per_x0020volume = 21,
	eml21__QuantityClassKind__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml21__QuantityClassKind__capacitance = 23,
	eml21__QuantityClassKind__cation_x0020exchange_x0020capacity = 24,
	eml21__QuantityClassKind__data_x0020transfer_x0020speed = 25,
	eml21__QuantityClassKind__diffusion_x0020coefficient = 26,
	eml21__QuantityClassKind__diffusive_x0020time_x0020of_x0020flight = 27,
	eml21__QuantityClassKind__digital_x0020storage = 28,
	eml21__QuantityClassKind__dimensionless = 29,
	eml21__QuantityClassKind__dipole_x0020moment = 30,
	eml21__QuantityClassKind__dose_x0020equivalent = 31,
	eml21__QuantityClassKind__dynamic_x0020viscosity = 32,
	eml21__QuantityClassKind__electric_x0020charge = 33,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020area = 34,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020mass = 35,
	eml21__QuantityClassKind__electric_x0020charge_x0020per_x0020volume = 36,
	eml21__QuantityClassKind__electric_x0020conductance = 37,
	eml21__QuantityClassKind__electric_x0020conductivity = 38,
	eml21__QuantityClassKind__electric_x0020current = 39,
	eml21__QuantityClassKind__electric_x0020current_x0020density = 40,
	eml21__QuantityClassKind__electric_x0020field_x0020strength = 41,
	eml21__QuantityClassKind__electric_x0020potential_x0020difference = 42,
	eml21__QuantityClassKind__electric_x0020resistance = 43,
	eml21__QuantityClassKind__electric_x0020resistance_x0020per_x0020length = 44,
	eml21__QuantityClassKind__electrical_x0020resistivity = 45,
	eml21__QuantityClassKind__electromagnetic_x0020moment = 46,
	eml21__QuantityClassKind__energy = 47,
	eml21__QuantityClassKind__energy_x0020length_x0020per_x0020area = 48,
	eml21__QuantityClassKind__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml21__QuantityClassKind__energy_x0020per_x0020area = 50,
	eml21__QuantityClassKind__energy_x0020per_x0020length = 51,
	eml21__QuantityClassKind__energy_x0020per_x0020mass = 52,
	eml21__QuantityClassKind__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml21__QuantityClassKind__energy_x0020per_x0020volume = 54,
	eml21__QuantityClassKind__force = 55,
	eml21__QuantityClassKind__force_x0020area = 56,
	eml21__QuantityClassKind__force_x0020length_x0020per_x0020length = 57,
	eml21__QuantityClassKind__force_x0020per_x0020force = 58,
	eml21__QuantityClassKind__force_x0020per_x0020length = 59,
	eml21__QuantityClassKind__force_x0020per_x0020volume = 60,
	eml21__QuantityClassKind__frequency = 61,
	eml21__QuantityClassKind__frequency_x0020interval = 62,
	eml21__QuantityClassKind__heat_x0020capacity = 63,
	eml21__QuantityClassKind__heat_x0020flow_x0020rate = 64,
	eml21__QuantityClassKind__heat_x0020transfer_x0020coefficient = 'A',
	eml21__QuantityClassKind__illuminance = 'B',
	eml21__QuantityClassKind__inductance = 'C',
	eml21__QuantityClassKind__isothermal_x0020compressibility = 'D',
	eml21__QuantityClassKind__kinematic_x0020viscosity = 'E',
	eml21__QuantityClassKind__length = 'F',
	eml21__QuantityClassKind__length_x0020per_x0020length = 'G',
	eml21__QuantityClassKind__length_x0020per_x0020mass = 'H',
	eml21__QuantityClassKind__length_x0020per_x0020pressure = 'I',
	eml21__QuantityClassKind__length_x0020per_x0020temperature = 'J',
	eml21__QuantityClassKind__length_x0020per_x0020time = 'K',
	eml21__QuantityClassKind__length_x0020per_x0020volume = 'L',
	eml21__QuantityClassKind__light_x0020exposure = 'M',
	eml21__QuantityClassKind__linear_x0020acceleration = 'N',
	eml21__QuantityClassKind__linear_x0020thermal_x0020expansion = 'O',
	eml21__QuantityClassKind__logarithmic_x0020power_x0020ratio = 'P',
	eml21__QuantityClassKind__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml21__QuantityClassKind__luminance = 'R',
	eml21__QuantityClassKind__luminous_x0020efficacy = 'S',
	eml21__QuantityClassKind__luminous_x0020flux = 'T',
	eml21__QuantityClassKind__luminous_x0020intensity = 'U',
	eml21__QuantityClassKind__magnetic_x0020dipole_x0020moment = 'V',
	eml21__QuantityClassKind__magnetic_x0020field_x0020strength = 'W',
	eml21__QuantityClassKind__magnetic_x0020flux = 'X',
	eml21__QuantityClassKind__magnetic_x0020flux_x0020density = 'Y',
	eml21__QuantityClassKind__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml21__QuantityClassKind__magnetic_x0020permeability = 91,
	eml21__QuantityClassKind__magnetic_x0020vector_x0020potential = 92,
	eml21__QuantityClassKind__mass = 93,
	eml21__QuantityClassKind__mass_x0020length = 94,
	eml21__QuantityClassKind__mass_x0020per_x0020area = 95,
	eml21__QuantityClassKind__mass_x0020per_x0020energy = 96,
	eml21__QuantityClassKind__mass_x0020per_x0020length = 'a',
	eml21__QuantityClassKind__mass_x0020per_x0020mass = 'b',
	eml21__QuantityClassKind__mass_x0020per_x0020time = 'c',
	eml21__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml21__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml21__QuantityClassKind__mass_x0020per_x0020volume = 'f',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml21__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml21__QuantityClassKind__mobility = 'j',
	eml21__QuantityClassKind__molar_x0020energy = 'k',
	eml21__QuantityClassKind__molar_x0020heat_x0020capacity = 'l',
	eml21__QuantityClassKind__molar_x0020volume = 'm',
	eml21__QuantityClassKind__molecular_x0020weight = 'n',
	eml21__QuantityClassKind__moment_x0020of_x0020force = 'o',
	eml21__QuantityClassKind__moment_x0020of_x0020inertia = 'p',
	eml21__QuantityClassKind__momentum = 'q',
	eml21__QuantityClassKind__normalized_x0020power = 'r',
	eml21__QuantityClassKind__permeability_x0020length = 's',
	eml21__QuantityClassKind__permeability_x0020rock = 't',
	eml21__QuantityClassKind__permittivity = 'u',
	eml21__QuantityClassKind__plane_x0020angle = 'v',
	eml21__QuantityClassKind__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml21__QuantityClassKind__power = 'x',
	eml21__QuantityClassKind__power_x0020per_x0020area = 'y',
	eml21__QuantityClassKind__power_x0020per_x0020power = 'z',
	eml21__QuantityClassKind__power_x0020per_x0020volume = 123,
	eml21__QuantityClassKind__pressure = 124,
	eml21__QuantityClassKind__pressure_x0020per_x0020pressure = 125,
	eml21__QuantityClassKind__pressure_x0020per_x0020time = 126,
	eml21__QuantityClassKind__pressure_x0020per_x0020volume = 127,
	eml21__QuantityClassKind__pressure_x0020squared = 128,
	eml21__QuantityClassKind__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml21__QuantityClassKind__pressure_x0020time_x0020per_x0020volume = 130,
	eml21__QuantityClassKind__quantity_x0020of_x0020light = 131,
	eml21__QuantityClassKind__radiance = 132,
	eml21__QuantityClassKind__radiant_x0020intensity = 133,
	eml21__QuantityClassKind__reciprocal_x0020area = 134,
	eml21__QuantityClassKind__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml21__QuantityClassKind__reciprocal_x0020force = 136,
	eml21__QuantityClassKind__reciprocal_x0020length = 137,
	eml21__QuantityClassKind__reciprocal_x0020mass = 138,
	eml21__QuantityClassKind__reciprocal_x0020mass_x0020time = 139,
	eml21__QuantityClassKind__reciprocal_x0020pressure = 140,
	eml21__QuantityClassKind__reciprocal_x0020time = 141,
	eml21__QuantityClassKind__reciprocal_x0020volume = 142,
	eml21__QuantityClassKind__reluctance = 143,
	eml21__QuantityClassKind__second_x0020moment_x0020of_x0020area = 144,
	eml21__QuantityClassKind__signaling_x0020event_x0020per_x0020time = 145,
	eml21__QuantityClassKind__solid_x0020angle = 146,
	eml21__QuantityClassKind__specific_x0020heat_x0020capacity = 147,
	eml21__QuantityClassKind__temperature_x0020interval = 148,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020length = 149,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml21__QuantityClassKind__temperature_x0020interval_x0020per_x0020time = 151,
	eml21__QuantityClassKind__thermal_x0020conductance = 152,
	eml21__QuantityClassKind__thermal_x0020conductivity = 153,
	eml21__QuantityClassKind__thermal_x0020diffusivity = 154,
	eml21__QuantityClassKind__thermal_x0020insulance = 155,
	eml21__QuantityClassKind__thermal_x0020resistance = 156,
	eml21__QuantityClassKind__thermodynamic_x0020temperature = 157,
	eml21__QuantityClassKind__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml21__QuantityClassKind__time = 159,
	eml21__QuantityClassKind__time_x0020per_x0020length = 160,
	eml21__QuantityClassKind__time_x0020per_x0020mass = 161,
	eml21__QuantityClassKind__time_x0020per_x0020time = 162,
	eml21__QuantityClassKind__time_x0020per_x0020volume = 163,
	eml21__QuantityClassKind__vertical_x0020coordinate = 164,
	eml21__QuantityClassKind__volume = 165,
	eml21__QuantityClassKind__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml21__QuantityClassKind__volume_x0020per_x0020area = 167,
	eml21__QuantityClassKind__volume_x0020per_x0020length = 168,
	eml21__QuantityClassKind__volume_x0020per_x0020mass = 169,
	eml21__QuantityClassKind__volume_x0020per_x0020pressure = 170,
	eml21__QuantityClassKind__volume_x0020per_x0020rotation = 171,
	eml21__QuantityClassKind__volume_x0020per_x0020time = 172,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020length = 173,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml21__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml21__QuantityClassKind__volume_x0020per_x0020volume = 180,
	eml21__QuantityClassKind__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml21__QuantityClassKind__volumetric_x0020thermal_x0020expansion = 182,
	eml21__QuantityClassKind__unitless = 183,
	eml21__QuantityClassKind__not_x0020a_x0020measure = 184
};
#endif

/* eml2_1ForGsoap.h:18336 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition (-1100)

/* eml21:ReferenceCondition */
enum eml21__ReferenceCondition {
	eml21__ReferenceCondition__0_x0020degC_x00201_x0020atm = 0,
	eml21__ReferenceCondition__0_x0020degC_x00201_x0020bar = 1,
	eml21__ReferenceCondition__15_x0020degC_x00201_x0020atm = 2,
	eml21__ReferenceCondition__15_x0020degC_x00201_x0020bar = 3,
	eml21__ReferenceCondition__20_x0020degC_x00201_x0020atm = 4,
	eml21__ReferenceCondition__20_x0020degC_x00201_x0020bar = 5,
	eml21__ReferenceCondition__25_x0020degC_x00201_x0020bar = 6,
	eml21__ReferenceCondition__60_x0020degF_x00201_x0020atm = 7,
	eml21__ReferenceCondition__60_x0020degF_x002030_x0020in_x0020Hg = 8,
	eml21__ReferenceCondition__ambient = 9
};
#endif

/* eml2_1ForGsoap.h:18370 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference (-1101)

/* eml21:WellboreDatumReference */
enum eml21__WellboreDatumReference {
	eml21__WellboreDatumReference__ground_x0020level = 0,
	eml21__WellboreDatumReference__kelly_x0020bushing = 1,
	eml21__WellboreDatumReference__mean_x0020sea_x0020level = 2,
	eml21__WellboreDatumReference__derrick_x0020floor = 3,
	eml21__WellboreDatumReference__casing_x0020flange = 4,
	eml21__WellboreDatumReference__crown_x0020valve = 5,
	eml21__WellboreDatumReference__rotary_x0020bushing = 6,
	eml21__WellboreDatumReference__rotary_x0020table = 7,
	eml21__WellboreDatumReference__sea_x0020floor = 8,
	eml21__WellboreDatumReference__lowest_x0020astronomical_x0020tide = 9,
	eml21__WellboreDatumReference__mean_x0020higher_x0020high_x0020water = 10,
	eml21__WellboreDatumReference__mean_x0020high_x0020water = 11,
	eml21__WellboreDatumReference__mean_x0020lower_x0020low_x0020water = 12,
	eml21__WellboreDatumReference__mean_x0020low_x0020water = 13,
	eml21__WellboreDatumReference__mean_x0020tide_x0020level = 14,
	eml21__WellboreDatumReference__kickoff_x0020point = 15
};
#endif

/* eml2_1ForGsoap.h:18433 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus (-1102)

/* eml21:WellStatus */
enum eml21__WellStatus {
	eml21__WellStatus__abandoned = 0,
	eml21__WellStatus__active = 1,
	eml21__WellStatus__active_x0020_x002d__x0020injecting = 2,
	eml21__WellStatus__active_x0020_x002d__x0020producing = 3,
	eml21__WellStatus__completed = 4,
	eml21__WellStatus__drilling = 5,
	eml21__WellStatus__partially_x0020plugged = 6,
	eml21__WellStatus__permitted = 7,
	eml21__WellStatus__plugged_x0020and_x0020abandoned = 8,
	eml21__WellStatus__proposed = 9,
	eml21__WellStatus__sold = 10,
	eml21__WellStatus__suspended = 11,
	eml21__WellStatus__temporarily_x0020abandoned = 12,
	eml21__WellStatus__testing = 13,
	eml21__WellStatus__tight = 14,
	eml21__WellStatus__working_x0020over = 15,
	eml21__WellStatus__unknown = 16
};
#endif

/* eml2_1ForGsoap.h:18531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind (-1103)

/* eml21:ReferencePressureKind */
enum eml21__ReferencePressureKind {
	eml21__ReferencePressureKind__absolute = 0,
	eml21__ReferencePressureKind__ambient = 1,
	eml21__ReferencePressureKind__legal = 2
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/struct_tm.h:67 */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

typedef struct tm xsd__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class witsml20__ReferencePoint;	/* eml2_1ForGsoap.h:161 */
class witsml20__WellDatum;	/* eml2_1ForGsoap.h:171 */
class witsml20__RefWellbore;	/* eml2_1ForGsoap.h:173 */
class witsml20__RefWellboreRig;	/* eml2_1ForGsoap.h:175 */
class witsml20__AbstractWellLocation;	/* eml2_1ForGsoap.h:177 */
class witsml20__PublicLandSurveySystem;	/* eml2_1ForGsoap.h:179 */
class witsml20__NameTag;	/* eml2_1ForGsoap.h:183 */
class witsml20__Cost;	/* eml2_1ForGsoap.h:185 */
class witsml20__ContactIntervalSet;	/* eml2_1ForGsoap.h:193 */
class witsml20__GravelPackInterval;	/* eml2_1ForGsoap.h:195 */
class witsml20__IntervalStatusHistory;	/* eml2_1ForGsoap.h:197 */
class witsml20__OpenHoleInterval;	/* eml2_1ForGsoap.h:199 */
class witsml20__PerforationSetInterval;	/* eml2_1ForGsoap.h:201 */
class witsml20__PerforationStatusHistory;	/* eml2_1ForGsoap.h:203 */
class witsml20__SlotsInterval;	/* eml2_1ForGsoap.h:205 */
class witsml20__DownholeString;	/* eml2_1ForGsoap.h:209 */
class witsml20__StringEquipmentSet;	/* eml2_1ForGsoap.h:211 */
class witsml20__StringEquipment;	/* eml2_1ForGsoap.h:213 */
class witsml20__EventInfo;	/* eml2_1ForGsoap.h:215 */
class witsml20__EventRefInfo;	/* eml2_1ForGsoap.h:217 */
class witsml20__ObjectSequence;	/* eml2_1ForGsoap.h:219 */
class witsml20__ReferenceContainer;	/* eml2_1ForGsoap.h:221 */
class witsml20__Assembly;	/* eml2_1ForGsoap.h:225 */
class witsml20__StringAccessory;	/* eml2_1ForGsoap.h:227 */
class witsml20__BoreholeStringSet;	/* eml2_1ForGsoap.h:229 */
class witsml20__BoreholeString;	/* eml2_1ForGsoap.h:231 */
class witsml20__Borehole;	/* eml2_1ForGsoap.h:233 */
class witsml20__GeologyFeature;	/* eml2_1ForGsoap.h:235 */
class witsml20__DownholeStringSet;	/* eml2_1ForGsoap.h:237 */
class witsml20__EquipmentSet;	/* eml2_1ForGsoap.h:239 */
class witsml20__Equipment;	/* eml2_1ForGsoap.h:241 */
class witsml20__ExtPropNameValue;	/* eml2_1ForGsoap.h:243 */
class witsml20__PerfSlot;	/* eml2_1ForGsoap.h:245 */
class witsml20__PerfHole;	/* eml2_1ForGsoap.h:247 */
class witsml20__PerforationSets;	/* eml2_1ForGsoap.h:249 */
class witsml20__PerforationSet;	/* eml2_1ForGsoap.h:251 */
class witsml20__AbstractConnectionType;	/* eml2_1ForGsoap.h:253 */
class witsml20__TubularComponent;	/* eml2_1ForGsoap.h:265 */
class witsml20__BitRecord;	/* eml2_1ForGsoap.h:267 */
class witsml20__Nozzle;	/* eml2_1ForGsoap.h:269 */
class witsml20__Connection;	/* eml2_1ForGsoap.h:271 */
class witsml20__Jar;	/* eml2_1ForGsoap.h:273 */
class witsml20__MwdTool;	/* eml2_1ForGsoap.h:275 */
class witsml20__Sensor;	/* eml2_1ForGsoap.h:277 */
class witsml20__Motor;	/* eml2_1ForGsoap.h:279 */
class witsml20__Stabilizer;	/* eml2_1ForGsoap.h:281 */
class witsml20__Bend;	/* eml2_1ForGsoap.h:283 */
class witsml20__HoleOpener;	/* eml2_1ForGsoap.h:285 */
class witsml20__RotarySteerableTool;	/* eml2_1ForGsoap.h:287 */
class witsml20__AbstractRotarySteerableTool;	/* eml2_1ForGsoap.h:289 */
class witsml20__CompletionStatusHistory;	/* eml2_1ForGsoap.h:297 */
class witsml20__WellboreGeometrySection;	/* eml2_1ForGsoap.h:301 */
class witsml20__ChannelData;	/* eml2_1ForGsoap.h:305 */
class witsml20__PointMetadata;	/* eml2_1ForGsoap.h:307 */
class witsml20__ChannelIndex;	/* eml2_1ForGsoap.h:311 */
class witsml20__AbstractIndexValue;	/* eml2_1ForGsoap.h:315 */
class witsml20__AbstractLogDataContext;	/* eml2_1ForGsoap.h:323 */
class witsml20__LogChannelAxis;	/* eml2_1ForGsoap.h:329 */
class witsml20__DrillingParams;	/* eml2_1ForGsoap.h:335 */
class witsml20__Fluid;	/* eml2_1ForGsoap.h:337 */
class witsml20__RheometerViscosity;	/* eml2_1ForGsoap.h:339 */
class witsml20__DrillReportWellboreInfo;	/* eml2_1ForGsoap.h:345 */
class witsml20__DrillReportStatusInfo;	/* eml2_1ForGsoap.h:347 */
class witsml20__Rheometer;	/* eml2_1ForGsoap.h:349 */
class witsml20__DrillReportPorePressure;	/* eml2_1ForGsoap.h:351 */
class witsml20__DrillReportSurveyStation;	/* eml2_1ForGsoap.h:355 */
class witsml20__DrillActivity;	/* eml2_1ForGsoap.h:357 */
class witsml20__DrillReportLogInfo;	/* eml2_1ForGsoap.h:359 */
class witsml20__DrillReportCoreInfo;	/* eml2_1ForGsoap.h:361 */
class witsml20__DrillReportWellTestInfo;	/* eml2_1ForGsoap.h:363 */
class witsml20__DrillReportFormTestInfo;	/* eml2_1ForGsoap.h:365 */
class witsml20__DrillReportLithShowInfo;	/* eml2_1ForGsoap.h:367 */
class witsml20__DrillReportEquipFailureInfo;	/* eml2_1ForGsoap.h:369 */
class witsml20__DrillReportControlIncidentInfo;	/* eml2_1ForGsoap.h:371 */
class witsml20__DrillReportStratInfo;	/* eml2_1ForGsoap.h:373 */
class witsml20__DrillReportPerfInfo;	/* eml2_1ForGsoap.h:375 */
class witsml20__DrillReportGasReadingInfo;	/* eml2_1ForGsoap.h:377 */
struct __witsml20__AbstractBottomHoleTemperature_sequence;	/* eml2_1ForGsoap.h:25288 */
class witsml20__AbstractBottomHoleTemperature;	/* eml2_1ForGsoap.h:379 */
class witsml20__CuttingsIntervalShow;	/* eml2_1ForGsoap.h:389 */
class witsml20__LithologyQualifier;	/* eml2_1ForGsoap.h:399 */
class witsml20__CuttingsIntervalLithology;	/* eml2_1ForGsoap.h:401 */
class witsml20__InterpretedIntervalLithology;	/* eml2_1ForGsoap.h:405 */
class witsml20__TrajectoryStation;	/* eml2_1ForGsoap.h:417 */
class witsml20__StnTrajRawData;	/* eml2_1ForGsoap.h:419 */
class witsml20__StnTrajCorUsed;	/* eml2_1ForGsoap.h:421 */
class witsml20__StnTrajValid;	/* eml2_1ForGsoap.h:423 */
class witsml20__StnTrajMatrixCov;	/* eml2_1ForGsoap.h:425 */
class witsml20__RefWellboreTrajectoryStation;	/* eml2_1ForGsoap.h:427 */
class witsml20__IscwsaSurveyToolOperatingCondition;	/* eml2_1ForGsoap.h:429 */
class witsml20__IscwsaSurveyToolOperatingInterval;	/* eml2_1ForGsoap.h:431 */
class witsml20__IscwsaModelParameters;	/* eml2_1ForGsoap.h:433 */
class witsml20__IscwsaErrorTermValue;	/* eml2_1ForGsoap.h:435 */
class witsml20__IscwsaAuthorizationData;	/* eml2_1ForGsoap.h:441 */
class eml21__AbstractObject;	/* eml2_1ForGsoap.h:443 */
class eml21__Citation;	/* eml2_1ForGsoap.h:445 */
class eml21__CustomData;	/* eml2_1ForGsoap.h:447 */
class eml21__ExtensionNameValue;	/* eml2_1ForGsoap.h:449 */
class eml21__ObjectAlias;	/* eml2_1ForGsoap.h:451 */
class eml21__AbstractValueArray;	/* eml2_1ForGsoap.h:463 */
class eml21__JaggedArray;	/* eml2_1ForGsoap.h:495 */
class eml21__MdInterval;	/* eml2_1ForGsoap.h:497 */
class eml21__TvdInterval;	/* eml2_1ForGsoap.h:505 */
class eml21__DataObjectReference;	/* eml2_1ForGsoap.h:1241 */
class eml21__ExternalDataset;	/* eml2_1ForGsoap.h:1245 */
class eml21__ExternalDatasetPart;	/* eml2_1ForGsoap.h:1247 */
class eml21__AbstractActivityParameter;	/* eml2_1ForGsoap.h:1249 */
class eml21__AbstractParameterKey;	/* eml2_1ForGsoap.h:1251 */
class eml21__ParameterTemplate;	/* eml2_1ForGsoap.h:1265 */
class eml21__GeologicTime;	/* eml2_1ForGsoap.h:1273 */
class eml21__TimeIndex;	/* eml2_1ForGsoap.h:1279 */
class eml21__TimeIndices;	/* eml2_1ForGsoap.h:1281 */
class eml21__TimeSeriesParentage;	/* eml2_1ForGsoap.h:1285 */
class eml21__AbstractPressureValue;	/* eml2_1ForGsoap.h:1289 */
union _eml21__union_AbstractTemperaturePressure;	/* eml2_1ForGsoap.h:27673 */
class eml21__AbstractTemperaturePressure;	/* eml2_1ForGsoap.h:1291 */
class eml21__DensityValue;	/* eml2_1ForGsoap.h:1293 */
class eml21__FlowRateValue;	/* eml2_1ForGsoap.h:1295 */
class eml21__PressureValue;	/* eml2_1ForGsoap.h:1299 */
class eml21__VolumeValue;	/* eml2_1ForGsoap.h:1309 */
class eml21__AbstractGeodeticCrs;	/* eml2_1ForGsoap.h:1311 */
class eml21__AbstractProjectedCrs;	/* eml2_1ForGsoap.h:1313 */
class eml21__AbstractVerticalCrs;	/* eml2_1ForGsoap.h:1315 */
class eml21__FailingRule;	/* eml2_1ForGsoap.h:1349 */
class eml21__IndexRange;	/* eml2_1ForGsoap.h:1351 */
class eml21__AbstractGraphicalInformation;	/* eml2_1ForGsoap.h:1353 */
class witsml20__GeodeticWellLocation;	/* eml2_1ForGsoap.h:163 */
class witsml20__ProjectedWellLocation;	/* eml2_1ForGsoap.h:165 */
class witsml20__Well;	/* eml2_1ForGsoap.h:167 */
class witsml20__Wellbore;	/* eml2_1ForGsoap.h:189 */
class witsml20__WellboreCompletion;	/* eml2_1ForGsoap.h:191 */
class witsml20__DownholeComponent;	/* eml2_1ForGsoap.h:207 */
class witsml20__EquipmentConnection;	/* eml2_1ForGsoap.h:223 */
class witsml20__CasingConnectionType;	/* eml2_1ForGsoap.h:255 */
class witsml20__TubingConnectionType;	/* eml2_1ForGsoap.h:257 */
class witsml20__RodConnectionType;	/* eml2_1ForGsoap.h:259 */
class witsml20__OtherConnectionType;	/* eml2_1ForGsoap.h:261 */
class witsml20__Tubular;	/* eml2_1ForGsoap.h:263 */
struct __witsml20__BendAngle_sequence;	/* eml2_1ForGsoap.h:28997 */
class witsml20__BendAngle;	/* eml2_1ForGsoap.h:291 */
struct __witsml20__BendOffset_sequence;	/* eml2_1ForGsoap.h:29031 */
class witsml20__BendOffset;	/* eml2_1ForGsoap.h:293 */
class witsml20__WellCompletion;	/* eml2_1ForGsoap.h:295 */
class witsml20__WellboreGeometry;	/* eml2_1ForGsoap.h:299 */
class witsml20__ChannelSet;	/* eml2_1ForGsoap.h:303 */
class witsml20__PassIndexedDepth;	/* eml2_1ForGsoap.h:309 */
class witsml20__Log;	/* eml2_1ForGsoap.h:313 */
class witsml20__TimeIndexValue;	/* eml2_1ForGsoap.h:317 */
class witsml20__DepthIndexValue;	/* eml2_1ForGsoap.h:319 */
class witsml20__Channel;	/* eml2_1ForGsoap.h:321 */
class witsml20__IndexRangeContext;	/* eml2_1ForGsoap.h:325 */
class witsml20__ObjectContext;	/* eml2_1ForGsoap.h:327 */
class witsml20__ChannelValueContext;	/* eml2_1ForGsoap.h:331 */
class witsml20__BhaRun;	/* eml2_1ForGsoap.h:333 */
class witsml20__FluidsReport;	/* eml2_1ForGsoap.h:341 */
class witsml20__DrillReport;	/* eml2_1ForGsoap.h:343 */
struct __witsml20__BottomHoleCirculatingTemperature_sequence_;	/* eml2_1ForGsoap.h:30227 */
class witsml20__BottomHoleCirculatingTemperature;	/* eml2_1ForGsoap.h:381 */
struct __witsml20__BottomHoleStaticTemperature_sequence_;	/* eml2_1ForGsoap.h:30266 */
class witsml20__BottomHoleStaticTemperature;	/* eml2_1ForGsoap.h:383 */
class witsml20__WellboreMarker;	/* eml2_1ForGsoap.h:385 */
class witsml20__WellboreMarkerSet;	/* eml2_1ForGsoap.h:387 */
class witsml20__WellboreGeology;	/* eml2_1ForGsoap.h:391 */
class witsml20__ShowEvaluation;	/* eml2_1ForGsoap.h:393 */
class witsml20__InterpretedGeology;	/* eml2_1ForGsoap.h:395 */
class witsml20__ShowEvaluationInterval;	/* eml2_1ForGsoap.h:403 */
class witsml20__CuttingsGeologyInterval;	/* eml2_1ForGsoap.h:407 */
class witsml20__CuttingsGeology;	/* eml2_1ForGsoap.h:409 */
class witsml20__InterpretedGeologyInterval;	/* eml2_1ForGsoap.h:413 */
class witsml20__Trajectory;	/* eml2_1ForGsoap.h:415 */
class witsml20__ToolErrorModel;	/* eml2_1ForGsoap.h:439 */
class eml21__AbstractBooleanArray;	/* eml2_1ForGsoap.h:453 */
class eml21__AbstractNumericArray;	/* eml2_1ForGsoap.h:459 */
class eml21__AbstractStringArray;	/* eml2_1ForGsoap.h:461 */
class eml21__EpcExternalPartReference;	/* eml2_1ForGsoap.h:1243 */
class eml21__Activity;	/* eml2_1ForGsoap.h:1253 */
class eml21__ActivityTemplate;	/* eml2_1ForGsoap.h:1255 */
class eml21__DataObjectParameter;	/* eml2_1ForGsoap.h:1257 */
class eml21__DoubleQuantityParameter;	/* eml2_1ForGsoap.h:1259 */
class eml21__IntegerQuantityParameter;	/* eml2_1ForGsoap.h:1261 */
class eml21__ObjectParameterKey;	/* eml2_1ForGsoap.h:1263 */
class eml21__StringParameter;	/* eml2_1ForGsoap.h:1267 */
class eml21__TimeIndexParameter;	/* eml2_1ForGsoap.h:1269 */
class eml21__TimeIndexParameterKey;	/* eml2_1ForGsoap.h:1271 */
class eml21__PropertyKind;	/* eml2_1ForGsoap.h:1275 */
class eml21__PropertyKindDictionary;	/* eml2_1ForGsoap.h:1277 */
class eml21__TimeSeries;	/* eml2_1ForGsoap.h:1283 */
class eml21__AbsolutePressure;	/* eml2_1ForGsoap.h:1287 */
class eml21__GaugePressure;	/* eml2_1ForGsoap.h:1297 */
union _eml21__union_ReferenceTemperaturePressure_;	/* eml2_1ForGsoap.h:31883 */
class eml21__ReferenceTemperaturePressure;	/* eml2_1ForGsoap.h:1303 */
class eml21__RelativePressure;	/* eml2_1ForGsoap.h:1305 */
class eml21__TemperaturePressure;	/* eml2_1ForGsoap.h:1307 */
class eml21__GeodeticCrs;	/* eml2_1ForGsoap.h:1317 */
class eml21__GeodeticEpsgCrs;	/* eml2_1ForGsoap.h:1319 */
class eml21__GeodeticLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1321 */
class eml21__GeodeticUnknownCrs;	/* eml2_1ForGsoap.h:1323 */
class eml21__GeodeticWktCrs;	/* eml2_1ForGsoap.h:1325 */
class eml21__ProjectedCrs;	/* eml2_1ForGsoap.h:1327 */
class eml21__ProjectedEpsgCrs;	/* eml2_1ForGsoap.h:1329 */
class eml21__ProjectedLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1331 */
class eml21__ProjectedUnknownCrs;	/* eml2_1ForGsoap.h:1333 */
class eml21__ProjectedWktCrs;	/* eml2_1ForGsoap.h:1335 */
class eml21__VerticalCrs;	/* eml2_1ForGsoap.h:1337 */
class eml21__VerticalEpsgCrs;	/* eml2_1ForGsoap.h:1339 */
class eml21__VerticalLocalAuthorityCrs;	/* eml2_1ForGsoap.h:1341 */
class eml21__VerticalUnknownCrs;	/* eml2_1ForGsoap.h:1343 */
class eml21__VerticalWktCrs;	/* eml2_1ForGsoap.h:1345 */
class eml21__DataAssuranceRecord;	/* eml2_1ForGsoap.h:1347 */
class eml21__GraphicalInformationSet;	/* eml2_1ForGsoap.h:1355 */
class witsml20__DistanceNorthSouth;	/* eml2_1ForGsoap.h:157 */
class witsml20__DistanceEastWest;	/* eml2_1ForGsoap.h:159 */
class witsml20__WellElevationCoord;	/* eml2_1ForGsoap.h:169 */
class witsml20__WellVerticalDepthCoord;	/* eml2_1ForGsoap.h:181 */
class witsml20__MeasuredDepthCoord;	/* eml2_1ForGsoap.h:187 */
class witsml20__MeasureOrQuantity;	/* eml2_1ForGsoap.h:437 */
class eml21__AbstractFloatingPointArray;	/* eml2_1ForGsoap.h:455 */
class eml21__AbstractIntegerArray;	/* eml2_1ForGsoap.h:457 */
class eml21__BooleanArrayFromIndexArray;	/* eml2_1ForGsoap.h:467 */
class eml21__BooleanConstantArray;	/* eml2_1ForGsoap.h:469 */
class eml21__BooleanExternalArray;	/* eml2_1ForGsoap.h:471 */
class eml21__GenericMeasure;	/* eml2_1ForGsoap.h:483 */
class eml21__StringConstantArray;	/* eml2_1ForGsoap.h:499 */
class eml21__StringExternalArray;	/* eml2_1ForGsoap.h:501 */
class eml21__AbsorbedDoseMeasure;	/* eml2_1ForGsoap.h:507 */
class eml21__AbsorbedDoseMeasureExt;	/* eml2_1ForGsoap.h:509 */
class eml21__ActivityOfRadioactivityMeasure;	/* eml2_1ForGsoap.h:511 */
class eml21__ActivityOfRadioactivityMeasureExt;	/* eml2_1ForGsoap.h:513 */
class eml21__AmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:515 */
class eml21__AmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:517 */
class eml21__AmountOfSubstancePerAmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:519 */
class eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:521 */
class eml21__AmountOfSubstancePerAreaMeasure;	/* eml2_1ForGsoap.h:523 */
class eml21__AmountOfSubstancePerAreaMeasureExt;	/* eml2_1ForGsoap.h:525 */
class eml21__AmountOfSubstancePerTimeMeasure;	/* eml2_1ForGsoap.h:527 */
class eml21__AmountOfSubstancePerTimeMeasureExt;	/* eml2_1ForGsoap.h:529 */
class eml21__AmountOfSubstancePerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:531 */
class eml21__AmountOfSubstancePerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:533 */
class eml21__AmountOfSubstancePerVolumeMeasure;	/* eml2_1ForGsoap.h:535 */
class eml21__AmountOfSubstancePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:537 */
class eml21__AnglePerLengthMeasure;	/* eml2_1ForGsoap.h:539 */
class eml21__AnglePerLengthMeasureExt;	/* eml2_1ForGsoap.h:541 */
class eml21__AnglePerVolumeMeasure;	/* eml2_1ForGsoap.h:543 */
class eml21__AnglePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:545 */
class eml21__AngularAccelerationMeasure;	/* eml2_1ForGsoap.h:547 */
class eml21__AngularAccelerationMeasureExt;	/* eml2_1ForGsoap.h:549 */
class eml21__AngularVelocityMeasure;	/* eml2_1ForGsoap.h:551 */
class eml21__AngularVelocityMeasureExt;	/* eml2_1ForGsoap.h:553 */
class eml21__APIGammaRayMeasure;	/* eml2_1ForGsoap.h:555 */
class eml21__APIGammaRayMeasureExt;	/* eml2_1ForGsoap.h:557 */
class eml21__APIGravityMeasure;	/* eml2_1ForGsoap.h:559 */
class eml21__APIGravityMeasureExt;	/* eml2_1ForGsoap.h:561 */
class eml21__APINeutronMeasure;	/* eml2_1ForGsoap.h:563 */
class eml21__APINeutronMeasureExt;	/* eml2_1ForGsoap.h:565 */
class eml21__AreaMeasure;	/* eml2_1ForGsoap.h:567 */
class eml21__AreaMeasureExt;	/* eml2_1ForGsoap.h:569 */
class eml21__AreaPerAmountOfSubstanceMeasure;	/* eml2_1ForGsoap.h:571 */
class eml21__AreaPerAmountOfSubstanceMeasureExt;	/* eml2_1ForGsoap.h:573 */
class eml21__AreaPerAreaMeasure;	/* eml2_1ForGsoap.h:575 */
class eml21__AreaPerAreaMeasureExt;	/* eml2_1ForGsoap.h:577 */
class eml21__AreaPerCountMeasure;	/* eml2_1ForGsoap.h:579 */
class eml21__AreaPerCountMeasureExt;	/* eml2_1ForGsoap.h:581 */
class eml21__AreaPerMassMeasure;	/* eml2_1ForGsoap.h:583 */
class eml21__AreaPerMassMeasureExt;	/* eml2_1ForGsoap.h:585 */
class eml21__AreaPerTimeMeasure;	/* eml2_1ForGsoap.h:587 */
class eml21__AreaPerTimeMeasureExt;	/* eml2_1ForGsoap.h:589 */
class eml21__AreaPerVolumeMeasure;	/* eml2_1ForGsoap.h:591 */
class eml21__AreaPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:593 */
class eml21__AttenuationPerFrequencyIntervalMeasure;	/* eml2_1ForGsoap.h:595 */
class eml21__AttenuationPerFrequencyIntervalMeasureExt;	/* eml2_1ForGsoap.h:597 */
class eml21__CapacitanceMeasure;	/* eml2_1ForGsoap.h:599 */
class eml21__CapacitanceMeasureExt;	/* eml2_1ForGsoap.h:601 */
class eml21__CationExchangeCapacityMeasure;	/* eml2_1ForGsoap.h:603 */
class eml21__CationExchangeCapacityMeasureExt;	/* eml2_1ForGsoap.h:605 */
class eml21__DataTransferSpeedMeasure;	/* eml2_1ForGsoap.h:607 */
class eml21__DataTransferSpeedMeasureExt;	/* eml2_1ForGsoap.h:609 */
class eml21__DiffusionCoefficientMeasure;	/* eml2_1ForGsoap.h:611 */
class eml21__DiffusionCoefficientMeasureExt;	/* eml2_1ForGsoap.h:613 */
class eml21__DiffusiveTimeOfFlightMeasure;	/* eml2_1ForGsoap.h:615 */
class eml21__DiffusiveTimeOfFlightMeasureExt;	/* eml2_1ForGsoap.h:617 */
class eml21__DigitalStorageMeasure;	/* eml2_1ForGsoap.h:619 */
class eml21__DigitalStorageMeasureExt;	/* eml2_1ForGsoap.h:621 */
class eml21__DimensionlessMeasure;	/* eml2_1ForGsoap.h:623 */
class eml21__DimensionlessMeasureExt;	/* eml2_1ForGsoap.h:625 */
class eml21__DipoleMomentMeasure;	/* eml2_1ForGsoap.h:627 */
class eml21__DipoleMomentMeasureExt;	/* eml2_1ForGsoap.h:629 */
class eml21__DoseEquivalentMeasure;	/* eml2_1ForGsoap.h:631 */
class eml21__DoseEquivalentMeasureExt;	/* eml2_1ForGsoap.h:633 */
class eml21__DynamicViscosityMeasure;	/* eml2_1ForGsoap.h:635 */
class eml21__DynamicViscosityMeasureExt;	/* eml2_1ForGsoap.h:637 */
class eml21__ElectricalResistivityMeasure;	/* eml2_1ForGsoap.h:639 */
class eml21__ElectricalResistivityMeasureExt;	/* eml2_1ForGsoap.h:641 */
class eml21__ElectricChargeMeasure;	/* eml2_1ForGsoap.h:643 */
class eml21__ElectricChargeMeasureExt;	/* eml2_1ForGsoap.h:645 */
class eml21__ElectricChargePerAreaMeasure;	/* eml2_1ForGsoap.h:647 */
class eml21__ElectricChargePerAreaMeasureExt;	/* eml2_1ForGsoap.h:649 */
class eml21__ElectricChargePerMassMeasure;	/* eml2_1ForGsoap.h:651 */
class eml21__ElectricChargePerMassMeasureExt;	/* eml2_1ForGsoap.h:653 */
class eml21__ElectricChargePerVolumeMeasure;	/* eml2_1ForGsoap.h:655 */
class eml21__ElectricChargePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:657 */
class eml21__ElectricConductanceMeasure;	/* eml2_1ForGsoap.h:659 */
class eml21__ElectricConductanceMeasureExt;	/* eml2_1ForGsoap.h:661 */
class eml21__ElectricConductivityMeasure;	/* eml2_1ForGsoap.h:663 */
class eml21__ElectricConductivityMeasureExt;	/* eml2_1ForGsoap.h:665 */
class eml21__ElectricCurrentDensityMeasure;	/* eml2_1ForGsoap.h:667 */
class eml21__ElectricCurrentDensityMeasureExt;	/* eml2_1ForGsoap.h:669 */
class eml21__ElectricCurrentMeasure;	/* eml2_1ForGsoap.h:671 */
class eml21__ElectricCurrentMeasureExt;	/* eml2_1ForGsoap.h:673 */
class eml21__ElectricFieldStrengthMeasure;	/* eml2_1ForGsoap.h:675 */
class eml21__ElectricFieldStrengthMeasureExt;	/* eml2_1ForGsoap.h:677 */
class eml21__ElectricPotentialDifferenceMeasure;	/* eml2_1ForGsoap.h:679 */
class eml21__ElectricPotentialDifferenceMeasureExt;	/* eml2_1ForGsoap.h:681 */
class eml21__ElectricResistanceMeasure;	/* eml2_1ForGsoap.h:683 */
class eml21__ElectricResistanceMeasureExt;	/* eml2_1ForGsoap.h:685 */
class eml21__ElectricResistancePerLengthMeasure;	/* eml2_1ForGsoap.h:687 */
class eml21__ElectricResistancePerLengthMeasureExt;	/* eml2_1ForGsoap.h:689 */
class eml21__ElectromagneticMomentMeasure;	/* eml2_1ForGsoap.h:691 */
class eml21__ElectromagneticMomentMeasureExt;	/* eml2_1ForGsoap.h:693 */
class eml21__EnergyLengthPerAreaMeasure;	/* eml2_1ForGsoap.h:695 */
class eml21__EnergyLengthPerAreaMeasureExt;	/* eml2_1ForGsoap.h:697 */
class eml21__EnergyLengthPerTimeAreaTemperatureMeasure;	/* eml2_1ForGsoap.h:699 */
class eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt;	/* eml2_1ForGsoap.h:701 */
class eml21__EnergyMeasure;	/* eml2_1ForGsoap.h:703 */
class eml21__EnergyMeasureExt;	/* eml2_1ForGsoap.h:705 */
class eml21__EnergyPerAreaMeasure;	/* eml2_1ForGsoap.h:707 */
class eml21__EnergyPerAreaMeasureExt;	/* eml2_1ForGsoap.h:709 */
class eml21__EnergyPerLengthMeasure;	/* eml2_1ForGsoap.h:711 */
class eml21__EnergyPerLengthMeasureExt;	/* eml2_1ForGsoap.h:713 */
class eml21__EnergyPerMassMeasure;	/* eml2_1ForGsoap.h:715 */
class eml21__EnergyPerMassMeasureExt;	/* eml2_1ForGsoap.h:717 */
class eml21__EnergyPerMassPerTimeMeasure;	/* eml2_1ForGsoap.h:719 */
class eml21__EnergyPerMassPerTimeMeasureExt;	/* eml2_1ForGsoap.h:721 */
class eml21__EnergyPerVolumeMeasure;	/* eml2_1ForGsoap.h:723 */
class eml21__EnergyPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:725 */
class eml21__ForceAreaMeasure;	/* eml2_1ForGsoap.h:727 */
class eml21__ForceAreaMeasureExt;	/* eml2_1ForGsoap.h:729 */
class eml21__ForceLengthPerLengthMeasure;	/* eml2_1ForGsoap.h:731 */
class eml21__ForceLengthPerLengthMeasureExt;	/* eml2_1ForGsoap.h:733 */
class eml21__ForceMeasure;	/* eml2_1ForGsoap.h:735 */
class eml21__ForceMeasureExt;	/* eml2_1ForGsoap.h:737 */
class eml21__ForcePerForceMeasure;	/* eml2_1ForGsoap.h:739 */
class eml21__ForcePerForceMeasureExt;	/* eml2_1ForGsoap.h:741 */
class eml21__ForcePerLengthMeasure;	/* eml2_1ForGsoap.h:743 */
class eml21__ForcePerLengthMeasureExt;	/* eml2_1ForGsoap.h:745 */
class eml21__ForcePerVolumeMeasure;	/* eml2_1ForGsoap.h:747 */
class eml21__ForcePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:749 */
class eml21__FrequencyIntervalMeasure;	/* eml2_1ForGsoap.h:751 */
class eml21__FrequencyIntervalMeasureExt;	/* eml2_1ForGsoap.h:753 */
class eml21__FrequencyMeasure;	/* eml2_1ForGsoap.h:755 */
class eml21__FrequencyMeasureExt;	/* eml2_1ForGsoap.h:757 */
class eml21__HeatCapacityMeasure;	/* eml2_1ForGsoap.h:759 */
class eml21__HeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:761 */
class eml21__HeatFlowRateMeasure;	/* eml2_1ForGsoap.h:763 */
class eml21__HeatFlowRateMeasureExt;	/* eml2_1ForGsoap.h:765 */
class eml21__HeatTransferCoefficientMeasure;	/* eml2_1ForGsoap.h:767 */
class eml21__HeatTransferCoefficientMeasureExt;	/* eml2_1ForGsoap.h:769 */
class eml21__IlluminanceMeasure;	/* eml2_1ForGsoap.h:771 */
class eml21__IlluminanceMeasureExt;	/* eml2_1ForGsoap.h:773 */
class eml21__InductanceMeasure;	/* eml2_1ForGsoap.h:775 */
class eml21__InductanceMeasureExt;	/* eml2_1ForGsoap.h:777 */
class eml21__IsothermalCompressibilityMeasure;	/* eml2_1ForGsoap.h:779 */
class eml21__IsothermalCompressibilityMeasureExt;	/* eml2_1ForGsoap.h:781 */
class eml21__KinematicViscosityMeasure;	/* eml2_1ForGsoap.h:783 */
class eml21__KinematicViscosityMeasureExt;	/* eml2_1ForGsoap.h:785 */
class eml21__LengthMeasure;	/* eml2_1ForGsoap.h:787 */
class eml21__LengthMeasureExt;	/* eml2_1ForGsoap.h:789 */
class eml21__LengthPerLengthMeasure;	/* eml2_1ForGsoap.h:791 */
class eml21__LengthPerLengthMeasureExt;	/* eml2_1ForGsoap.h:793 */
class eml21__LengthPerMassMeasure;	/* eml2_1ForGsoap.h:795 */
class eml21__LengthPerMassMeasureExt;	/* eml2_1ForGsoap.h:797 */
class eml21__LengthPerPressureMeasure;	/* eml2_1ForGsoap.h:799 */
class eml21__LengthPerPressureMeasureExt;	/* eml2_1ForGsoap.h:801 */
class eml21__LengthPerTemperatureMeasure;	/* eml2_1ForGsoap.h:803 */
class eml21__LengthPerTemperatureMeasureExt;	/* eml2_1ForGsoap.h:805 */
class eml21__LengthPerTimeMeasure;	/* eml2_1ForGsoap.h:807 */
class eml21__LengthPerTimeMeasureExt;	/* eml2_1ForGsoap.h:809 */
class eml21__LengthPerVolumeMeasure;	/* eml2_1ForGsoap.h:811 */
class eml21__LengthPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:813 */
class eml21__LightExposureMeasure;	/* eml2_1ForGsoap.h:815 */
class eml21__LightExposureMeasureExt;	/* eml2_1ForGsoap.h:817 */
class eml21__LinearAccelerationMeasure;	/* eml2_1ForGsoap.h:819 */
class eml21__LinearAccelerationMeasureExt;	/* eml2_1ForGsoap.h:821 */
class eml21__LinearThermalExpansionMeasure;	/* eml2_1ForGsoap.h:823 */
class eml21__LinearThermalExpansionMeasureExt;	/* eml2_1ForGsoap.h:825 */
class eml21__LogarithmicPowerRatioMeasure;	/* eml2_1ForGsoap.h:827 */
class eml21__LogarithmicPowerRatioMeasureExt;	/* eml2_1ForGsoap.h:829 */
class eml21__LogarithmicPowerRatioPerLengthMeasure;	/* eml2_1ForGsoap.h:831 */
class eml21__LogarithmicPowerRatioPerLengthMeasureExt;	/* eml2_1ForGsoap.h:833 */
class eml21__LuminanceMeasure;	/* eml2_1ForGsoap.h:835 */
class eml21__LuminanceMeasureExt;	/* eml2_1ForGsoap.h:837 */
class eml21__LuminousEfficacyMeasure;	/* eml2_1ForGsoap.h:839 */
class eml21__LuminousEfficacyMeasureExt;	/* eml2_1ForGsoap.h:841 */
class eml21__LuminousFluxMeasure;	/* eml2_1ForGsoap.h:843 */
class eml21__LuminousFluxMeasureExt;	/* eml2_1ForGsoap.h:845 */
class eml21__LuminousIntensityMeasure;	/* eml2_1ForGsoap.h:847 */
class eml21__LuminousIntensityMeasureExt;	/* eml2_1ForGsoap.h:849 */
class eml21__MagneticDipoleMomentMeasure;	/* eml2_1ForGsoap.h:851 */
class eml21__MagneticDipoleMomentMeasureExt;	/* eml2_1ForGsoap.h:853 */
class eml21__MagneticFieldStrengthMeasure;	/* eml2_1ForGsoap.h:855 */
class eml21__MagneticFieldStrengthMeasureExt;	/* eml2_1ForGsoap.h:857 */
class eml21__MagneticFluxDensityMeasure;	/* eml2_1ForGsoap.h:859 */
class eml21__MagneticFluxDensityMeasureExt;	/* eml2_1ForGsoap.h:861 */
class eml21__MagneticFluxDensityPerLengthMeasure;	/* eml2_1ForGsoap.h:863 */
class eml21__MagneticFluxDensityPerLengthMeasureExt;	/* eml2_1ForGsoap.h:865 */
class eml21__MagneticFluxMeasure;	/* eml2_1ForGsoap.h:867 */
class eml21__MagneticFluxMeasureExt;	/* eml2_1ForGsoap.h:869 */
class eml21__MagneticPermeabilityMeasure;	/* eml2_1ForGsoap.h:871 */
class eml21__MagneticPermeabilityMeasureExt;	/* eml2_1ForGsoap.h:873 */
class eml21__MagneticVectorPotentialMeasure;	/* eml2_1ForGsoap.h:875 */
class eml21__MagneticVectorPotentialMeasureExt;	/* eml2_1ForGsoap.h:877 */
class eml21__MassLengthMeasure;	/* eml2_1ForGsoap.h:879 */
class eml21__MassLengthMeasureExt;	/* eml2_1ForGsoap.h:881 */
class eml21__MassMeasure;	/* eml2_1ForGsoap.h:883 */
class eml21__MassMeasureExt;	/* eml2_1ForGsoap.h:885 */
class eml21__MassPerAreaMeasure;	/* eml2_1ForGsoap.h:887 */
class eml21__MassPerAreaMeasureExt;	/* eml2_1ForGsoap.h:889 */
class eml21__MassPerEnergyMeasure;	/* eml2_1ForGsoap.h:891 */
class eml21__MassPerEnergyMeasureExt;	/* eml2_1ForGsoap.h:893 */
class eml21__MassPerLengthMeasure;	/* eml2_1ForGsoap.h:895 */
class eml21__MassPerLengthMeasureExt;	/* eml2_1ForGsoap.h:897 */
class eml21__MassPerMassMeasure;	/* eml2_1ForGsoap.h:899 */
class eml21__MassPerMassMeasureExt;	/* eml2_1ForGsoap.h:901 */
class eml21__MassPerTimeMeasure;	/* eml2_1ForGsoap.h:903 */
class eml21__MassPerTimeMeasureExt;	/* eml2_1ForGsoap.h:905 */
class eml21__MassPerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:907 */
class eml21__MassPerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:909 */
class eml21__MassPerTimePerLengthMeasure;	/* eml2_1ForGsoap.h:911 */
class eml21__MassPerTimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:913 */
class eml21__MassPerVolumeMeasure;	/* eml2_1ForGsoap.h:915 */
class eml21__MassPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:917 */
class eml21__MassPerVolumePerLengthMeasure;	/* eml2_1ForGsoap.h:919 */
class eml21__MassPerVolumePerLengthMeasureExt;	/* eml2_1ForGsoap.h:921 */
class eml21__MassPerVolumePerPressureMeasure;	/* eml2_1ForGsoap.h:923 */
class eml21__MassPerVolumePerPressureMeasureExt;	/* eml2_1ForGsoap.h:925 */
class eml21__MassPerVolumePerTemperatureMeasure;	/* eml2_1ForGsoap.h:927 */
class eml21__MassPerVolumePerTemperatureMeasureExt;	/* eml2_1ForGsoap.h:929 */
class eml21__MobilityMeasure;	/* eml2_1ForGsoap.h:931 */
class eml21__MobilityMeasureExt;	/* eml2_1ForGsoap.h:933 */
class eml21__MolarEnergyMeasure;	/* eml2_1ForGsoap.h:935 */
class eml21__MolarEnergyMeasureExt;	/* eml2_1ForGsoap.h:937 */
class eml21__MolarHeatCapacityMeasure;	/* eml2_1ForGsoap.h:939 */
class eml21__MolarHeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:941 */
class eml21__MolarVolumeMeasure;	/* eml2_1ForGsoap.h:943 */
class eml21__MolarVolumeMeasureExt;	/* eml2_1ForGsoap.h:945 */
class eml21__MolecularWeightMeasure;	/* eml2_1ForGsoap.h:947 */
class eml21__MolecularWeightMeasureExt;	/* eml2_1ForGsoap.h:949 */
class eml21__MomentOfForceMeasure;	/* eml2_1ForGsoap.h:951 */
class eml21__MomentOfForceMeasureExt;	/* eml2_1ForGsoap.h:953 */
class eml21__MomentOfInertiaMeasure;	/* eml2_1ForGsoap.h:955 */
class eml21__MomentOfInertiaMeasureExt;	/* eml2_1ForGsoap.h:957 */
class eml21__MomentumMeasure;	/* eml2_1ForGsoap.h:959 */
class eml21__MomentumMeasureExt;	/* eml2_1ForGsoap.h:961 */
class eml21__NormalizedPowerMeasure;	/* eml2_1ForGsoap.h:963 */
class eml21__NormalizedPowerMeasureExt;	/* eml2_1ForGsoap.h:965 */
class eml21__PermeabilityLengthMeasure;	/* eml2_1ForGsoap.h:967 */
class eml21__PermeabilityLengthMeasureExt;	/* eml2_1ForGsoap.h:969 */
class eml21__PermeabilityRockMeasure;	/* eml2_1ForGsoap.h:971 */
class eml21__PermeabilityRockMeasureExt;	/* eml2_1ForGsoap.h:973 */
class eml21__PermittivityMeasure;	/* eml2_1ForGsoap.h:975 */
class eml21__PermittivityMeasureExt;	/* eml2_1ForGsoap.h:977 */
class eml21__PlaneAngleMeasure;	/* eml2_1ForGsoap.h:979 */
class eml21__PlaneAngleMeasureExt;	/* eml2_1ForGsoap.h:981 */
class eml21__PotentialDifferencePerPowerDropMeasure;	/* eml2_1ForGsoap.h:983 */
class eml21__PotentialDifferencePerPowerDropMeasureExt;	/* eml2_1ForGsoap.h:985 */
class eml21__PowerMeasure;	/* eml2_1ForGsoap.h:987 */
class eml21__PowerMeasureExt;	/* eml2_1ForGsoap.h:989 */
class eml21__PowerPerAreaMeasure;	/* eml2_1ForGsoap.h:991 */
class eml21__PowerPerAreaMeasureExt;	/* eml2_1ForGsoap.h:993 */
class eml21__PowerPerPowerMeasure;	/* eml2_1ForGsoap.h:995 */
class eml21__PowerPerPowerMeasureExt;	/* eml2_1ForGsoap.h:997 */
class eml21__PowerPerVolumeMeasure;	/* eml2_1ForGsoap.h:999 */
class eml21__PowerPerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1001 */
class eml21__PressureMeasure;	/* eml2_1ForGsoap.h:1003 */
class eml21__PressureMeasureExt;	/* eml2_1ForGsoap.h:1005 */
class eml21__PressurePerPressureMeasure;	/* eml2_1ForGsoap.h:1007 */
class eml21__PressurePerPressureMeasureExt;	/* eml2_1ForGsoap.h:1009 */
class eml21__PressurePerTimeMeasure;	/* eml2_1ForGsoap.h:1011 */
class eml21__PressurePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1013 */
class eml21__PressurePerVolumeMeasure;	/* eml2_1ForGsoap.h:1015 */
class eml21__PressurePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1017 */
class eml21__PressureSquaredMeasure;	/* eml2_1ForGsoap.h:1019 */
class eml21__PressureSquaredMeasureExt;	/* eml2_1ForGsoap.h:1021 */
class eml21__PressureSquaredPerForceTimePerAreaMeasure;	/* eml2_1ForGsoap.h:1023 */
class eml21__PressureSquaredPerForceTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:1025 */
class eml21__PressureTimePerVolumeMeasure;	/* eml2_1ForGsoap.h:1027 */
class eml21__PressureTimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1029 */
class eml21__QuantityOfLightMeasure;	/* eml2_1ForGsoap.h:1031 */
class eml21__QuantityOfLightMeasureExt;	/* eml2_1ForGsoap.h:1033 */
class eml21__RadianceMeasure;	/* eml2_1ForGsoap.h:1035 */
class eml21__RadianceMeasureExt;	/* eml2_1ForGsoap.h:1037 */
class eml21__RadiantIntensityMeasure;	/* eml2_1ForGsoap.h:1039 */
class eml21__RadiantIntensityMeasureExt;	/* eml2_1ForGsoap.h:1041 */
class eml21__ReciprocalAreaMeasure;	/* eml2_1ForGsoap.h:1043 */
class eml21__ReciprocalAreaMeasureExt;	/* eml2_1ForGsoap.h:1045 */
class eml21__ReciprocalElectricPotentialDifferenceMeasure;	/* eml2_1ForGsoap.h:1047 */
class eml21__ReciprocalElectricPotentialDifferenceMeasureExt;	/* eml2_1ForGsoap.h:1049 */
class eml21__ReciprocalForceMeasure;	/* eml2_1ForGsoap.h:1051 */
class eml21__ReciprocalForceMeasureExt;	/* eml2_1ForGsoap.h:1053 */
class eml21__ReciprocalLengthMeasure;	/* eml2_1ForGsoap.h:1055 */
class eml21__ReciprocalLengthMeasureExt;	/* eml2_1ForGsoap.h:1057 */
class eml21__ReciprocalMassMeasure;	/* eml2_1ForGsoap.h:1059 */
class eml21__ReciprocalMassMeasureExt;	/* eml2_1ForGsoap.h:1061 */
class eml21__ReciprocalMassTimeMeasure;	/* eml2_1ForGsoap.h:1063 */
class eml21__ReciprocalMassTimeMeasureExt;	/* eml2_1ForGsoap.h:1065 */
class eml21__ReciprocalPressureMeasure;	/* eml2_1ForGsoap.h:1067 */
class eml21__ReciprocalPressureMeasureExt;	/* eml2_1ForGsoap.h:1069 */
class eml21__ReciprocalTimeMeasure;	/* eml2_1ForGsoap.h:1071 */
class eml21__ReciprocalTimeMeasureExt;	/* eml2_1ForGsoap.h:1073 */
class eml21__ReciprocalVolumeMeasure;	/* eml2_1ForGsoap.h:1075 */
class eml21__ReciprocalVolumeMeasureExt;	/* eml2_1ForGsoap.h:1077 */
class eml21__ReluctanceMeasure;	/* eml2_1ForGsoap.h:1079 */
class eml21__ReluctanceMeasureExt;	/* eml2_1ForGsoap.h:1081 */
class eml21__SecondMomentOfAreaMeasure;	/* eml2_1ForGsoap.h:1083 */
class eml21__SecondMomentOfAreaMeasureExt;	/* eml2_1ForGsoap.h:1085 */
class eml21__SignalingEventPerTimeMeasure;	/* eml2_1ForGsoap.h:1087 */
class eml21__SignalingEventPerTimeMeasureExt;	/* eml2_1ForGsoap.h:1089 */
class eml21__SolidAngleMeasure;	/* eml2_1ForGsoap.h:1091 */
class eml21__SolidAngleMeasureExt;	/* eml2_1ForGsoap.h:1093 */
class eml21__SpecificHeatCapacityMeasure;	/* eml2_1ForGsoap.h:1095 */
class eml21__SpecificHeatCapacityMeasureExt;	/* eml2_1ForGsoap.h:1097 */
class eml21__TemperatureIntervalMeasure;	/* eml2_1ForGsoap.h:1099 */
class eml21__TemperatureIntervalMeasureExt;	/* eml2_1ForGsoap.h:1101 */
class eml21__TemperatureIntervalPerLengthMeasure;	/* eml2_1ForGsoap.h:1103 */
class eml21__TemperatureIntervalPerLengthMeasureExt;	/* eml2_1ForGsoap.h:1105 */
class eml21__TemperatureIntervalPerPressureMeasure;	/* eml2_1ForGsoap.h:1107 */
class eml21__TemperatureIntervalPerPressureMeasureExt;	/* eml2_1ForGsoap.h:1109 */
class eml21__TemperatureIntervalPerTimeMeasure;	/* eml2_1ForGsoap.h:1111 */
class eml21__TemperatureIntervalPerTimeMeasureExt;	/* eml2_1ForGsoap.h:1113 */
class eml21__ThermalConductanceMeasure;	/* eml2_1ForGsoap.h:1115 */
class eml21__ThermalConductanceMeasureExt;	/* eml2_1ForGsoap.h:1117 */
class eml21__ThermalConductivityMeasure;	/* eml2_1ForGsoap.h:1119 */
class eml21__ThermalConductivityMeasureExt;	/* eml2_1ForGsoap.h:1121 */
class eml21__ThermalDiffusivityMeasure;	/* eml2_1ForGsoap.h:1123 */
class eml21__ThermalDiffusivityMeasureExt;	/* eml2_1ForGsoap.h:1125 */
class eml21__ThermalInsulanceMeasure;	/* eml2_1ForGsoap.h:1127 */
class eml21__ThermalInsulanceMeasureExt;	/* eml2_1ForGsoap.h:1129 */
class eml21__ThermalResistanceMeasure;	/* eml2_1ForGsoap.h:1131 */
class eml21__ThermalResistanceMeasureExt;	/* eml2_1ForGsoap.h:1133 */
class eml21__ThermodynamicTemperatureMeasure;	/* eml2_1ForGsoap.h:1135 */
class eml21__ThermodynamicTemperatureMeasureExt;	/* eml2_1ForGsoap.h:1137 */
class eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure;	/* eml2_1ForGsoap.h:1139 */
class eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt;	/* eml2_1ForGsoap.h:1141 */
class eml21__TimeMeasure;	/* eml2_1ForGsoap.h:1143 */
class eml21__TimeMeasureExt;	/* eml2_1ForGsoap.h:1145 */
class eml21__TimePerLengthMeasure;	/* eml2_1ForGsoap.h:1147 */
class eml21__TimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:1149 */
class eml21__TimePerMassMeasure;	/* eml2_1ForGsoap.h:1151 */
class eml21__TimePerMassMeasureExt;	/* eml2_1ForGsoap.h:1153 */
class eml21__TimePerTimeMeasure;	/* eml2_1ForGsoap.h:1155 */
class eml21__TimePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1157 */
class eml21__TimePerVolumeMeasure;	/* eml2_1ForGsoap.h:1159 */
class eml21__TimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1161 */
class eml21__UnitlessMeasure;	/* eml2_1ForGsoap.h:1163 */
class eml21__VerticalCoordinateMeasure;	/* eml2_1ForGsoap.h:1165 */
class eml21__VerticalCoordinateMeasureExt;	/* eml2_1ForGsoap.h:1167 */
class eml21__VolumeFlowRatePerVolumeFlowRateMeasure;	/* eml2_1ForGsoap.h:1169 */
class eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt;	/* eml2_1ForGsoap.h:1171 */
class eml21__VolumeMeasure;	/* eml2_1ForGsoap.h:1173 */
class eml21__VolumeMeasureExt;	/* eml2_1ForGsoap.h:1175 */
class eml21__VolumePerAreaMeasure;	/* eml2_1ForGsoap.h:1177 */
class eml21__VolumePerAreaMeasureExt;	/* eml2_1ForGsoap.h:1179 */
class eml21__VolumePerLengthMeasure;	/* eml2_1ForGsoap.h:1181 */
class eml21__VolumePerLengthMeasureExt;	/* eml2_1ForGsoap.h:1183 */
class eml21__VolumePerMassMeasure;	/* eml2_1ForGsoap.h:1185 */
class eml21__VolumePerMassMeasureExt;	/* eml2_1ForGsoap.h:1187 */
class eml21__VolumePerPressureMeasure;	/* eml2_1ForGsoap.h:1189 */
class eml21__VolumePerPressureMeasureExt;	/* eml2_1ForGsoap.h:1191 */
class eml21__VolumePerRotationMeasure;	/* eml2_1ForGsoap.h:1193 */
class eml21__VolumePerRotationMeasureExt;	/* eml2_1ForGsoap.h:1195 */
class eml21__VolumePerTimeLengthMeasure;	/* eml2_1ForGsoap.h:1197 */
class eml21__VolumePerTimeLengthMeasureExt;	/* eml2_1ForGsoap.h:1199 */
class eml21__VolumePerTimeMeasure;	/* eml2_1ForGsoap.h:1201 */
class eml21__VolumePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1203 */
class eml21__VolumePerTimePerAreaMeasure;	/* eml2_1ForGsoap.h:1205 */
class eml21__VolumePerTimePerAreaMeasureExt;	/* eml2_1ForGsoap.h:1207 */
class eml21__VolumePerTimePerLengthMeasure;	/* eml2_1ForGsoap.h:1209 */
class eml21__VolumePerTimePerLengthMeasureExt;	/* eml2_1ForGsoap.h:1211 */
class eml21__VolumePerTimePerPressureLengthMeasure;	/* eml2_1ForGsoap.h:1213 */
class eml21__VolumePerTimePerPressureLengthMeasureExt;	/* eml2_1ForGsoap.h:1215 */
class eml21__VolumePerTimePerPressureMeasure;	/* eml2_1ForGsoap.h:1217 */
class eml21__VolumePerTimePerPressureMeasureExt;	/* eml2_1ForGsoap.h:1219 */
class eml21__VolumePerTimePerTimeMeasure;	/* eml2_1ForGsoap.h:1221 */
class eml21__VolumePerTimePerTimeMeasureExt;	/* eml2_1ForGsoap.h:1223 */
class eml21__VolumePerTimePerVolumeMeasure;	/* eml2_1ForGsoap.h:1225 */
class eml21__VolumePerTimePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1227 */
class eml21__VolumePerVolumeMeasure;	/* eml2_1ForGsoap.h:1229 */
class eml21__VolumePerVolumeMeasureExt;	/* eml2_1ForGsoap.h:1231 */
class eml21__VolumetricHeatTransferCoefficientMeasure;	/* eml2_1ForGsoap.h:1233 */
class eml21__VolumetricHeatTransferCoefficientMeasureExt;	/* eml2_1ForGsoap.h:1235 */
class eml21__VolumetricThermalExpansionMeasure;	/* eml2_1ForGsoap.h:1237 */
class eml21__VolumetricThermalExpansionMeasureExt;	/* eml2_1ForGsoap.h:1239 */
class eml21__ReferencePressure;	/* eml2_1ForGsoap.h:1301 */
class witsml20__TimestampedCommentString;	/* eml2_1ForGsoap.h:353 */
class witsml20__LithostratigraphicUnit;	/* eml2_1ForGsoap.h:397 */
class witsml20__GeochronologicalUnit;	/* eml2_1ForGsoap.h:411 */
class eml21__AuthorityQualifiedName;	/* eml2_1ForGsoap.h:465 */
class eml21__FloatingPointConstantArray;	/* eml2_1ForGsoap.h:477 */
class eml21__FloatingPointExternalArray;	/* eml2_1ForGsoap.h:479 */
class eml21__FloatingPointLatticeArray;	/* eml2_1ForGsoap.h:481 */
class eml21__IntegerArrayFromBooleanMaskArray;	/* eml2_1ForGsoap.h:485 */
class eml21__IntegerConstantArray;	/* eml2_1ForGsoap.h:487 */
class eml21__IntegerExternalArray;	/* eml2_1ForGsoap.h:489 */
class eml21__IntegerLatticeArray;	/* eml2_1ForGsoap.h:491 */
class eml21__IntegerRangeArray;	/* eml2_1ForGsoap.h:493 */
class eml21__StringMeasure;	/* eml2_1ForGsoap.h:503 */
class eml21__DoubleExternalArray;	/* eml2_1ForGsoap.h:473 */
class eml21__FloatExternalArray;	/* eml2_1ForGsoap.h:475 */

/* custom/struct_tm.h:57 */
#ifndef SOAP_TYPE_gsoap_eml2_1_tm
#define SOAP_TYPE_gsoap_eml2_1_tm (-8)
#if 0 /* Volatile: declared external of the data binding interface and not redeclared here */
struct SOAP_CMAC tm {
      public:
        /** Required element 'tm-sec' of XML schema type 'xsd:int' */
        int tm_sec;
        /** Required element 'tm-min' of XML schema type 'xsd:int' */
        int tm_min;
        /** Required element 'tm-hour' of XML schema type 'xsd:int' */
        int tm_hour;
        /** Required element 'tm-mday' of XML schema type 'xsd:int' */
        int tm_mday;
        /** Required element 'tm-mon' of XML schema type 'xsd:int' */
        int tm_mon;
        /** Required element 'tm-year' of XML schema type 'xsd:int' */
        int tm_year;
        /** Required element 'tm-isdst' of XML schema type 'xsd:int' */
        int tm_isdst;
};
#endif
#endif

/* eml2_1ForGsoap.h:161 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint (-15)
/* complex XML schema type 'witsml20:ReferencePoint': */
class SOAP_CMAC witsml20__ReferencePoint {
      public:
        /// Required element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml20:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml20:MeasuredDepth' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Elevation' of XML schema type 'witsml20:WellElevationCoord'
        witsml20__WellElevationCoord *Elevation;
        /// Required element 'witsml20:Location' of XML schema type 'witsml20:AbstractWellLocation'
        std::vector<witsml20__AbstractWellLocation *> Location;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ReferencePoint, default initialized and not managed by a soap context
        virtual witsml20__ReferencePoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ReferencePoint); }
      public:
        /// Constructor with default initializations
        witsml20__ReferencePoint() : Name(), Type(), MeasuredDepth(), Description(), ExtensionNameValue(), Elevation(), Location(), uid(), soap() { }
        virtual ~witsml20__ReferencePoint() { }
        /// Friend allocator used by soap_new_witsml20__ReferencePoint(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ReferencePoint * SOAP_FMAC2 soap_instantiate_witsml20__ReferencePoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:171 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum (-20)
/* complex XML schema type 'witsml20:WellDatum': */
class SOAP_CMAC witsml20__WellDatum {
      public:
        /// Required element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Optional element 'witsml20:Code' of XML schema type 'eml21:WellboreDatumReference'
        enum eml21__WellboreDatumReference *Code;
        /// Optional element 'witsml20:Kind' of XML schema type 'eml21:String64'
        std::vector<std::string> Kind;
        /// Optional element 'witsml20:MeasuredDepth' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Wellbore' of XML schema type 'witsml20:RefWellbore'
        witsml20__RefWellbore *Wellbore;
        /// Optional element 'witsml20:Rig' of XML schema type 'witsml20:RefWellboreRig'
        witsml20__RefWellboreRig *Rig;
        /// Optional element 'witsml20:Elevation' of XML schema type 'witsml20:WellElevationCoord'
        witsml20__WellElevationCoord *Elevation;
        /// Optional element 'witsml20:HorizontalLocation' of XML schema type 'witsml20:AbstractWellLocation'
        witsml20__AbstractWellLocation *HorizontalLocation;
        /// Required element 'witsml20:Crs' of XML schema type 'eml21:AbstractVerticalCrs'
        eml21__AbstractVerticalCrs *Crs;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellDatum, default initialized and not managed by a soap context
        virtual witsml20__WellDatum *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellDatum); }
      public:
        /// Constructor with default initializations
        witsml20__WellDatum() : Name(), Code(), Kind(), MeasuredDepth(), Comment(), ExtensionNameValue(), Wellbore(), Rig(), Elevation(), HorizontalLocation(), Crs(), uid(), soap() { }
        virtual ~witsml20__WellDatum() { }
        /// Friend allocator used by soap_new_witsml20__WellDatum(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellDatum * SOAP_FMAC2 soap_instantiate_witsml20__WellDatum(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:173 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore (-21)
/* complex XML schema type 'witsml20:RefWellbore': */
class SOAP_CMAC witsml20__RefWellbore {
      public:
        /// Required element 'witsml20:WellboreReference' of XML schema type 'eml21:String64'
        std::string WellboreReference;
        /// Optional element 'witsml20:WellParent' of XML schema type 'eml21:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RefWellbore, default initialized and not managed by a soap context
        virtual witsml20__RefWellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RefWellbore); }
      public:
        /// Constructor with default initializations
        witsml20__RefWellbore() : WellboreReference(), WellParent(), soap() { }
        virtual ~witsml20__RefWellbore() { }
        /// Friend allocator used by soap_new_witsml20__RefWellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RefWellbore * SOAP_FMAC2 soap_instantiate_witsml20__RefWellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:175 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig (-22)
/* complex XML schema type 'witsml20:RefWellboreRig': */
class SOAP_CMAC witsml20__RefWellboreRig {
      public:
        /// Required element 'witsml20:RigReference' of XML schema type 'eml21:String64'
        std::string RigReference;
        /// Optional element 'witsml20:WellboreParent' of XML schema type 'eml21:String64'
        std::string *WellboreParent;
        /// Optional element 'witsml20:WellParent' of XML schema type 'eml21:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RefWellboreRig, default initialized and not managed by a soap context
        virtual witsml20__RefWellboreRig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RefWellboreRig); }
      public:
        /// Constructor with default initializations
        witsml20__RefWellboreRig() : RigReference(), WellboreParent(), WellParent(), soap() { }
        virtual ~witsml20__RefWellboreRig() { }
        /// Friend allocator used by soap_new_witsml20__RefWellboreRig(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RefWellboreRig * SOAP_FMAC2 soap_instantiate_witsml20__RefWellboreRig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation (-23)
/* complex XML schema type 'witsml20:AbstractWellLocation': */
class SOAP_CMAC witsml20__AbstractWellLocation {
      public:
        /// Optional element 'witsml20:Original' of XML schema type 'xsd:boolean'
        bool *Original;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractWellLocation, default initialized and not managed by a soap context
        virtual witsml20__AbstractWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractWellLocation); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractWellLocation() : Original(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__AbstractWellLocation() { }
        /// Friend allocator used by soap_new_witsml20__AbstractWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractWellLocation * SOAP_FMAC2 soap_instantiate_witsml20__AbstractWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:179 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem (-24)
/* complex XML schema type 'witsml20:PublicLandSurveySystem': */
class SOAP_CMAC witsml20__PublicLandSurveySystem {
      public:
        /// Optional element 'witsml20:PrincipalMeridian' of XML schema type 'witsml20:PrincipalMeridian'
        enum witsml20__PrincipalMeridian *PrincipalMeridian;
        /// Optional element 'witsml20:Range' of XML schema type 'xsd:int'
        int *Range;
        /// Optional element 'witsml20:RangeDir' of XML schema type 'witsml20:EastOrWest'
        enum witsml20__EastOrWest *RangeDir;
        /// Optional element 'witsml20:Township' of XML schema type 'xsd:int'
        int *Township;
        /// Optional element 'witsml20:TownshipDir' of XML schema type 'witsml20:NorthOrSouth'
        enum witsml20__NorthOrSouth *TownshipDir;
        /// Optional element 'witsml20:Section' of XML schema type 'witsml20:SectionNumber'
        std::string *Section;
        /// Optional element 'witsml20:QuarterSection' of XML schema type 'witsml20:PublicLandSurveySystemQuarterSection'
        std::string *QuarterSection;
        /// Optional element 'witsml20:QuarterTownship' of XML schema type 'witsml20:PublicLandSurveySystemQuarterTownship'
        std::string *QuarterTownship;
        /// Optional element 'witsml20:FootageNS' of XML schema type 'witsml20:DistanceNorthSouth'
        witsml20__DistanceNorthSouth *FootageNS;
        /// Optional element 'witsml20:FootageEW' of XML schema type 'witsml20:DistanceEastWest'
        witsml20__DistanceEastWest *FootageEW;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PublicLandSurveySystem, default initialized and not managed by a soap context
        virtual witsml20__PublicLandSurveySystem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PublicLandSurveySystem); }
      public:
        /// Constructor with default initializations
        witsml20__PublicLandSurveySystem() : PrincipalMeridian(), Range(), RangeDir(), Township(), TownshipDir(), Section(), QuarterSection(), QuarterTownship(), FootageNS(), FootageEW(), soap() { }
        virtual ~witsml20__PublicLandSurveySystem() { }
        /// Friend allocator used by soap_new_witsml20__PublicLandSurveySystem(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PublicLandSurveySystem * SOAP_FMAC2 soap_instantiate_witsml20__PublicLandSurveySystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:183 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag (-26)
/* complex XML schema type 'witsml20:NameTag': */
class SOAP_CMAC witsml20__NameTag {
      public:
        /// Required element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml20:NumberingScheme' of XML schema type 'witsml20:NameTagNumberingScheme'
        enum witsml20__NameTagNumberingScheme NumberingScheme;
        /// Optional element 'witsml20:Technology' of XML schema type 'witsml20:NameTagTechnology'
        enum witsml20__NameTagTechnology *Technology;
        /// Optional element 'witsml20:Location' of XML schema type 'witsml20:NameTagLocation'
        enum witsml20__NameTagLocation *Location;
        /// Optional element 'witsml20:InstallationDate' of XML schema type 'eml21:TimeStamp'
        std::string *InstallationDate;
        /// Optional element 'witsml20:InstallationCompany' of XML schema type 'eml21:String64'
        std::string *InstallationCompany;
        /// Optional element 'witsml20:MountingCode' of XML schema type 'eml21:String64'
        std::string *MountingCode;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__NameTag, default initialized and not managed by a soap context
        virtual witsml20__NameTag *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__NameTag); }
      public:
        /// Constructor with default initializations
        witsml20__NameTag() : Name(), NumberingScheme(), Technology(), Location(), InstallationDate(), InstallationCompany(), MountingCode(), Comment(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__NameTag() { }
        /// Friend allocator used by soap_new_witsml20__NameTag(struct soap*, int)
        friend SOAP_FMAC1 witsml20__NameTag * SOAP_FMAC2 soap_instantiate_witsml20__NameTag(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:185 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Cost
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Cost (-27)
/* complex XML schema type 'witsml20:Cost': */
class SOAP_CMAC witsml20__Cost {
      public:
        /// Required attribute 'currency' of XML schema type 'eml21:String64'
        std::string currency;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Cost
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Cost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Cost, default initialized and not managed by a soap context
        virtual witsml20__Cost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Cost); }
      public:
        /// Constructor with default initializations
        witsml20__Cost() : currency(), soap() { }
        virtual ~witsml20__Cost() { }
        /// Friend allocator used by soap_new_witsml20__Cost(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Cost * SOAP_FMAC2 soap_instantiate_witsml20__Cost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:193 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet (-31)
/* complex XML schema type 'witsml20:ContactIntervalSet': */
class SOAP_CMAC witsml20__ContactIntervalSet {
      public:
        /// Optional element 'witsml20:SlotsInterval' of XML schema type 'witsml20:SlotsInterval'
        std::vector<witsml20__SlotsInterval *> SlotsInterval;
        /// Optional element 'witsml20:OpenHoleInterval' of XML schema type 'witsml20:OpenHoleInterval'
        std::vector<witsml20__OpenHoleInterval *> OpenHoleInterval;
        /// Optional element 'witsml20:PerforationSetInterval' of XML schema type 'witsml20:PerforationSetInterval'
        std::vector<witsml20__PerforationSetInterval *> PerforationSetInterval;
        /// Optional element 'witsml20:GravelPackInterval' of XML schema type 'witsml20:GravelPackInterval'
        std::vector<witsml20__GravelPackInterval *> GravelPackInterval;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ContactIntervalSet, default initialized and not managed by a soap context
        virtual witsml20__ContactIntervalSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ContactIntervalSet); }
      public:
        /// Constructor with default initializations
        witsml20__ContactIntervalSet() : SlotsInterval(), OpenHoleInterval(), PerforationSetInterval(), GravelPackInterval(), soap() { }
        virtual ~witsml20__ContactIntervalSet() { }
        /// Friend allocator used by soap_new_witsml20__ContactIntervalSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ContactIntervalSet * SOAP_FMAC2 soap_instantiate_witsml20__ContactIntervalSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:195 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval (-32)
/* complex XML schema type 'witsml20:GravelPackInterval': */
class SOAP_CMAC witsml20__GravelPackInterval {
      public:
        /// Optional element 'witsml20:DownholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string *DownholeStringReferenceId;
        /// Optional element 'witsml20:GravelPackMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *GravelPackMdInterval;
        /// Optional element 'witsml20:GravelPackTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *GravelPackTvdInterval;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EventHistory;
        /// Optional element 'witsml20:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:StatusHistory' of XML schema type 'witsml20:IntervalStatusHistory'
        std::vector<witsml20__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__GravelPackInterval, default initialized and not managed by a soap context
        virtual witsml20__GravelPackInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__GravelPackInterval); }
      public:
        /// Constructor with default initializations
        witsml20__GravelPackInterval() : DownholeStringReferenceId(), GravelPackMdInterval(), GravelPackTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml20__GravelPackInterval() { }
        /// Friend allocator used by soap_new_witsml20__GravelPackInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__GravelPackInterval * SOAP_FMAC2 soap_instantiate_witsml20__GravelPackInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:197 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory (-33)
/* complex XML schema type 'witsml20:IntervalStatusHistory': */
class SOAP_CMAC witsml20__IntervalStatusHistory {
      public:
        /// Optional element 'witsml20:PhysicalStatus' of XML schema type 'witsml20:PhysicalStatus'
        enum witsml20__PhysicalStatus *PhysicalStatus;
        /// Optional element 'witsml20:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml20:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml20:StatusMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *StatusMdInterval;
        /// Optional element 'witsml20:AllocationFactor' of XML schema type 'witsml20:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IntervalStatusHistory, default initialized and not managed by a soap context
        virtual witsml20__IntervalStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IntervalStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml20__IntervalStatusHistory() : PhysicalStatus(), StartDate(), EndDate(), StatusMdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml20__IntervalStatusHistory() { }
        /// Friend allocator used by soap_new_witsml20__IntervalStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IntervalStatusHistory * SOAP_FMAC2 soap_instantiate_witsml20__IntervalStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:199 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval (-34)
/* complex XML schema type 'witsml20:OpenHoleInterval': */
class SOAP_CMAC witsml20__OpenHoleInterval {
      public:
        /// Optional element 'witsml20:BoreholeStringReferenceId' of XML schema type 'eml21:String64'
        std::string *BoreholeStringReferenceId;
        /// Optional element 'witsml20:OpenHoleMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *OpenHoleMdInterval;
        /// Optional element 'witsml20:OpenHoleTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *OpenHoleTvdInterval;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EventHistory;
        /// Optional element 'witsml20:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:StatusHistory' of XML schema type 'witsml20:IntervalStatusHistory'
        std::vector<witsml20__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__OpenHoleInterval, default initialized and not managed by a soap context
        virtual witsml20__OpenHoleInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__OpenHoleInterval); }
      public:
        /// Constructor with default initializations
        witsml20__OpenHoleInterval() : BoreholeStringReferenceId(), OpenHoleMdInterval(), OpenHoleTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml20__OpenHoleInterval() { }
        /// Friend allocator used by soap_new_witsml20__OpenHoleInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__OpenHoleInterval * SOAP_FMAC2 soap_instantiate_witsml20__OpenHoleInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:201 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval (-35)
/* complex XML schema type 'witsml20:PerforationSetInterval': */
class SOAP_CMAC witsml20__PerforationSetInterval {
      public:
        /// Optional element 'witsml20:PerforationSetReferenceId' of XML schema type 'eml21:String64'
        std::string *PerforationSetReferenceId;
        /// Optional element 'witsml20:PerforationSetMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationSetMdInterval;
        /// Optional element 'witsml20:PerforationSetTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationSetTvdInterval;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EventHistory;
        /// Optional element 'witsml20:GeologyFeatureReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:PerforationStatusHistory' of XML schema type 'witsml20:PerforationStatusHistory'
        std::vector<witsml20__PerforationStatusHistory *> PerforationStatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerforationSetInterval, default initialized and not managed by a soap context
        virtual witsml20__PerforationSetInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerforationSetInterval); }
      public:
        /// Constructor with default initializations
        witsml20__PerforationSetInterval() : PerforationSetReferenceId(), PerforationSetMdInterval(), PerforationSetTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), PerforationStatusHistory(), uid(), soap() { }
        virtual ~witsml20__PerforationSetInterval() { }
        /// Friend allocator used by soap_new_witsml20__PerforationSetInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerforationSetInterval * SOAP_FMAC2 soap_instantiate_witsml20__PerforationSetInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:203 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory (-36)
/* complex XML schema type 'witsml20:PerforationStatusHistory': */
class SOAP_CMAC witsml20__PerforationStatusHistory {
      public:
        /// Optional element 'witsml20:PerforationStatus' of XML schema type 'witsml20:PerforationStatus'
        enum witsml20__PerforationStatus *PerforationStatus;
        /// Optional element 'witsml20:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml20:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml20:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml20:PerforationTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml20:AllocationFactor' of XML schema type 'witsml20:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerforationStatusHistory, default initialized and not managed by a soap context
        virtual witsml20__PerforationStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerforationStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml20__PerforationStatusHistory() : PerforationStatus(), StartDate(), EndDate(), PerforationMdInterval(), PerforationTvdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml20__PerforationStatusHistory() { }
        /// Friend allocator used by soap_new_witsml20__PerforationStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerforationStatusHistory * SOAP_FMAC2 soap_instantiate_witsml20__PerforationStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:205 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval (-37)
/* complex XML schema type 'witsml20:SlotsInterval': */
class SOAP_CMAC witsml20__SlotsInterval {
      public:
        /// Optional element 'witsml20:StringEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string *StringEquipmentReferenceId;
        /// Optional element 'witsml20:SlottedMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *SlottedMdInterval;
        /// Optional element 'witsml20:SlottedTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *SlottedTvdInterval;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EventHistory;
        /// Optional element 'witsml20:GeologyFeatureRefID' of XML schema type 'eml21:String64'
        std::vector<std::string> GeologyFeatureRefID;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:StatusHistory' of XML schema type 'witsml20:IntervalStatusHistory'
        std::vector<witsml20__IntervalStatusHistory *> StatusHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__SlotsInterval, default initialized and not managed by a soap context
        virtual witsml20__SlotsInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__SlotsInterval); }
      public:
        /// Constructor with default initializations
        witsml20__SlotsInterval() : StringEquipmentReferenceId(), SlottedMdInterval(), SlottedTvdInterval(), EventHistory(), GeologyFeatureRefID(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml20__SlotsInterval() { }
        /// Friend allocator used by soap_new_witsml20__SlotsInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__SlotsInterval * SOAP_FMAC2 soap_instantiate_witsml20__SlotsInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:209 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString (-39)
/* Type witsml20__DownholeString is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'witsml20:DownholeString': */
class SOAP_CMAC witsml20__DownholeString {
      public:
        /// Required element 'witsml20:StringType' of XML schema type 'witsml20:DownholeStringType'
        enum witsml20__DownholeStringType StringType;
        /// Optional element 'witsml20:SubStringType' of XML schema type 'witsml20:SubStringType'
        enum witsml20__SubStringType *SubStringType;
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml20:StringInstallDate' of XML schema type 'eml21:TimeStamp'
        std::string *StringInstallDate;
        /// Optional element 'witsml20:ParentStringsName' of XML schema type 'eml21:String64'
        std::string *ParentStringsName;
        /// Optional element 'witsml20:StringMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *StringMdInterval;
        /// Optional element 'witsml20:AxisOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AxisOffset;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Accessories' of XML schema type 'witsml20:StringAccessory'
        witsml20__StringAccessory *Accessories;
        /// Optional element 'witsml20:StringEquipmentSet' of XML schema type 'witsml20:StringEquipmentSet'
        witsml20__StringEquipmentSet *StringEquipmentSet;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required element 'witsml20:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Optional element 'witsml20:ParentString' of XML schema type 'witsml20:DownholeString'
        witsml20__DownholeString *ParentString;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DownholeString, default initialized and not managed by a soap context
        virtual witsml20__DownholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DownholeString); }
      public:
        /// Constructor with default initializations
        witsml20__DownholeString() : StringType(), SubStringType(), Name(), StringInstallDate(), ParentStringsName(), StringMdInterval(), AxisOffset(), ExtensionNameValue(), Accessories(), StringEquipmentSet(), ExtensionAny(), ReferenceWellbore(), ParentString(), uid(), soap() { }
        virtual ~witsml20__DownholeString() { }
        /// Friend allocator used by soap_new_witsml20__DownholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DownholeString * SOAP_FMAC2 soap_instantiate_witsml20__DownholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:211 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet (-40)
/* complex XML schema type 'witsml20:StringEquipmentSet': */
class SOAP_CMAC witsml20__StringEquipmentSet {
      public:
        /// Required element 'witsml20:StringEquipment' of XML schema type 'witsml20:StringEquipment'
        std::vector<witsml20__StringEquipment *> StringEquipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StringEquipmentSet, default initialized and not managed by a soap context
        virtual witsml20__StringEquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StringEquipmentSet); }
      public:
        /// Constructor with default initializations
        witsml20__StringEquipmentSet() : StringEquipment(), soap() { }
        virtual ~witsml20__StringEquipmentSet() { }
        /// Friend allocator used by soap_new_witsml20__StringEquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StringEquipmentSet * SOAP_FMAC2 soap_instantiate_witsml20__StringEquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment (-41)
/* Type witsml20__StringEquipment is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'witsml20:StringEquipment': */
class SOAP_CMAC witsml20__StringEquipment {
      public:
        /// Optional element 'witsml20:EquipmentType' of XML schema type 'witsml20:EquipmentTypeExt'
        std::string *EquipmentType;
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String2000'
        std::string *Name;
        /// Optional element 'witsml20:EquipmentEventHistory' of XML schema type 'witsml20:EventInfo'
        std::vector<witsml20__EventInfo *> EquipmentEventHistory;
        /// Optional element 'witsml20:Status' of XML schema type 'eml21:String64'
        std::string *Status;
        /// Optional element 'witsml20:RunNo' of XML schema type 'eml21:String64'
        std::string *RunNo;
        /// Optional element 'witsml20:PreviousRunDays' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *PreviousRunDays;
        /// Optional element 'witsml20:ObjectCondition' of XML schema type 'eml21:String64'
        std::string *ObjectCondition;
        /// Optional element 'witsml20:SurfaceCondition' of XML schema type 'eml21:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml20:Count' of XML schema type 'xsd:int'
        int *Count;
        /// Optional element 'witsml20:Length' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Length;
        /// Optional element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml20:OutsideString' of XML schema type 'xsd:boolean'
        bool *OutsideString;
        /// Optional element 'witsml20:TensileMax' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *TensileMax;
        /// Optional element 'witsml20:PresRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRating;
        /// Optional element 'witsml20:PresCollapse' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCollapse;
        /// Optional element 'witsml20:PresBurst' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBurst;
        /// Optional element 'witsml20:HeatRating' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *HeatRating;
        /// Optional element 'witsml20:IsLinetoSurface' of XML schema type 'xsd:boolean'
        bool *IsLinetoSurface;
        /// Optional element 'witsml20:IsCentralized' of XML schema type 'xsd:boolean'
        bool *IsCentralized;
        /// Optional element 'witsml20:HasScratchers' of XML schema type 'xsd:boolean'
        bool *HasScratchers;
        /// Optional element 'witsml20:PerforationSetRefId' of XML schema type 'eml21:String64'
        std::vector<std::string> PerforationSetRefId;
        /// Optional element 'witsml20:PermanentRemarks' of XML schema type 'eml21:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml20:UsageComment' of XML schema type 'eml21:String2000'
        std::string *UsageComment;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Assembly' of XML schema type 'witsml20:Assembly'
        witsml20__Assembly *Assembly;
        /// Optional element 'witsml20:OrderOfObject' of XML schema type 'witsml20:ObjectSequence'
        witsml20__ObjectSequence *OrderOfObject;
        /// Optional element 'witsml20:InsideComponent' of XML schema type 'witsml20:ReferenceContainer'
        std::vector<witsml20__ReferenceContainer *> InsideComponent;
        /// Optional element 'witsml20:OutsideComponent' of XML schema type 'witsml20:ReferenceContainer'
        std::vector<witsml20__ReferenceContainer *> OutsideComponent;
        /// Optional element 'witsml20:ConnectionNext' of XML schema type 'witsml20:EquipmentConnection'
        std::vector<witsml20__EquipmentConnection *> ConnectionNext;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Required attribute 'equipmentReferenceUid' of XML schema type 'eml21:String64'
        std::string equipmentReferenceUid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StringEquipment, default initialized and not managed by a soap context
        virtual witsml20__StringEquipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StringEquipment); }
      public:
        /// Constructor with default initializations
        witsml20__StringEquipment() : EquipmentType(), Name(), EquipmentEventHistory(), Status(), RunNo(), PreviousRunDays(), ObjectCondition(), SurfaceCondition(), Count(), Length(), MdInterval(), TvdInterval(), OutsideString(), TensileMax(), PresRating(), PresCollapse(), PresBurst(), HeatRating(), IsLinetoSurface(), IsCentralized(), HasScratchers(), PerforationSetRefId(), PermanentRemarks(), UsageComment(), ExtensionNameValue(), Assembly(), OrderOfObject(), InsideComponent(), OutsideComponent(), ConnectionNext(), uid(), equipmentReferenceUid(), soap() { }
        virtual ~witsml20__StringEquipment() { }
        /// Friend allocator used by soap_new_witsml20__StringEquipment(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StringEquipment * SOAP_FMAC2 soap_instantiate_witsml20__StringEquipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:215 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo (-42)
/* complex XML schema type 'witsml20:EventInfo': */
class SOAP_CMAC witsml20__EventInfo {
      public:
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:BeginEvent' of XML schema type 'witsml20:EventRefInfo'
        witsml20__EventRefInfo *BeginEvent;
        /// Optional element 'witsml20:EndEvent' of XML schema type 'witsml20:EventRefInfo'
        witsml20__EventRefInfo *EndEvent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__EventInfo, default initialized and not managed by a soap context
        virtual witsml20__EventInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__EventInfo); }
      public:
        /// Constructor with default initializations
        witsml20__EventInfo() : ExtensionNameValue(), BeginEvent(), EndEvent(), soap() { }
        virtual ~witsml20__EventInfo() { }
        /// Friend allocator used by soap_new_witsml20__EventInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__EventInfo * SOAP_FMAC2 soap_instantiate_witsml20__EventInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:217 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo (-43)
/* complex XML schema type 'witsml20:EventRefInfo': */
class SOAP_CMAC witsml20__EventRefInfo {
      public:
        /// Optional element 'witsml20:EventReferenceId' of XML schema type 'eml21:String64'
        std::string *EventReferenceId;
        /// Optional element 'witsml20:EventDate' of XML schema type 'eml21:TimeStamp'
        std::string *EventDate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__EventRefInfo, default initialized and not managed by a soap context
        virtual witsml20__EventRefInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__EventRefInfo); }
      public:
        /// Constructor with default initializations
        witsml20__EventRefInfo() : EventReferenceId(), EventDate(), soap() { }
        virtual ~witsml20__EventRefInfo() { }
        /// Friend allocator used by soap_new_witsml20__EventRefInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__EventRefInfo * SOAP_FMAC2 soap_instantiate_witsml20__EventRefInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:219 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence (-44)
/* complex XML schema type 'witsml20:ObjectSequence': */
class SOAP_CMAC witsml20__ObjectSequence {
      public:
        /// Required attribute 'description' of XML schema type 'eml21:String2000'
        std::string description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ObjectSequence, default initialized and not managed by a soap context
        virtual witsml20__ObjectSequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ObjectSequence); }
      public:
        /// Constructor with default initializations
        witsml20__ObjectSequence() : description(), soap() { }
        virtual ~witsml20__ObjectSequence() { }
        /// Friend allocator used by soap_new_witsml20__ObjectSequence(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ObjectSequence * SOAP_FMAC2 soap_instantiate_witsml20__ObjectSequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:221 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer (-45)
/* complex XML schema type 'witsml20:ReferenceContainer': */
class SOAP_CMAC witsml20__ReferenceContainer {
      public:
        /// Required element 'witsml20:StringReferenceId' of XML schema type 'eml21:String64'
        std::string StringReferenceId;
        /// Required element 'witsml20:EquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string EquipmentReferenceId;
        /// Required element 'witsml20:AccesoryEquipmentReferenceId' of XML schema type 'eml21:String64'
        std::string AccesoryEquipmentReferenceId;
        /// Required element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ReferenceContainer, default initialized and not managed by a soap context
        virtual witsml20__ReferenceContainer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ReferenceContainer); }
      public:
        /// Constructor with default initializations
        witsml20__ReferenceContainer() : StringReferenceId(), EquipmentReferenceId(), AccesoryEquipmentReferenceId(), Comment(), uid(), soap() { }
        virtual ~witsml20__ReferenceContainer() { }
        /// Friend allocator used by soap_new_witsml20__ReferenceContainer(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ReferenceContainer * SOAP_FMAC2 soap_instantiate_witsml20__ReferenceContainer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:225 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly (-47)
/* complex XML schema type 'witsml20:Assembly': */
class SOAP_CMAC witsml20__Assembly {
      public:
        /// Optional element 'witsml20:Part' of XML schema type 'witsml20:StringEquipment'
        std::vector<witsml20__StringEquipment *> Part;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Assembly, default initialized and not managed by a soap context
        virtual witsml20__Assembly *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Assembly); }
      public:
        /// Constructor with default initializations
        witsml20__Assembly() : Part(), soap() { }
        virtual ~witsml20__Assembly() { }
        /// Friend allocator used by soap_new_witsml20__Assembly(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Assembly * SOAP_FMAC2 soap_instantiate_witsml20__Assembly(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:227 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory (-48)
/* complex XML schema type 'witsml20:StringAccessory': */
class SOAP_CMAC witsml20__StringAccessory {
      public:
        /// Required element 'witsml20:Accessory' of XML schema type 'witsml20:StringEquipment'
        std::vector<witsml20__StringEquipment *> Accessory;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StringAccessory, default initialized and not managed by a soap context
        virtual witsml20__StringAccessory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StringAccessory); }
      public:
        /// Constructor with default initializations
        witsml20__StringAccessory() : Accessory(), soap() { }
        virtual ~witsml20__StringAccessory() { }
        /// Friend allocator used by soap_new_witsml20__StringAccessory(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StringAccessory * SOAP_FMAC2 soap_instantiate_witsml20__StringAccessory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:229 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet (-49)
/* complex XML schema type 'witsml20:BoreholeStringSet': */
class SOAP_CMAC witsml20__BoreholeStringSet {
      public:
        /// Required element 'witsml20:BoreholeString' of XML schema type 'witsml20:BoreholeString'
        std::vector<witsml20__BoreholeString *> BoreholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BoreholeStringSet, default initialized and not managed by a soap context
        virtual witsml20__BoreholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BoreholeStringSet); }
      public:
        /// Constructor with default initializations
        witsml20__BoreholeStringSet() : BoreholeString(), soap() { }
        virtual ~witsml20__BoreholeStringSet() { }
        /// Friend allocator used by soap_new_witsml20__BoreholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BoreholeStringSet * SOAP_FMAC2 soap_instantiate_witsml20__BoreholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:231 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString (-50)
/* complex XML schema type 'witsml20:BoreholeString': */
class SOAP_CMAC witsml20__BoreholeString {
      public:
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml20:Accessories' of XML schema type 'witsml20:StringAccessory'
        witsml20__StringAccessory *Accessories;
        /// Optional element 'witsml20:Borehole' of XML schema type 'witsml20:Borehole'
        std::vector<witsml20__Borehole *> Borehole;
        /// Optional element 'witsml20:GeologyFeature' of XML schema type 'witsml20:GeologyFeature'
        std::vector<witsml20__GeologyFeature *> GeologyFeature;
        /// Required element 'witsml20:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BoreholeString, default initialized and not managed by a soap context
        virtual witsml20__BoreholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BoreholeString); }
      public:
        /// Constructor with default initializations
        witsml20__BoreholeString() : Name(), Accessories(), Borehole(), GeologyFeature(), ReferenceWellbore(), uid(), soap() { }
        virtual ~witsml20__BoreholeString() { }
        /// Friend allocator used by soap_new_witsml20__BoreholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BoreholeString * SOAP_FMAC2 soap_instantiate_witsml20__BoreholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:233 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole (-51)
/* complex XML schema type 'witsml20:Borehole': */
class SOAP_CMAC witsml20__Borehole {
      public:
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml20:TypeBorehole' of XML schema type 'witsml20:BoreholeType'
        enum witsml20__BoreholeType *TypeBorehole;
        /// Optional element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml20:BoreholeDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BoreholeDiameter;
        /// Optional element 'witsml20:DescriptionPermanent' of XML schema type 'eml21:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:EquipmentEventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EquipmentEventHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Borehole, default initialized and not managed by a soap context
        virtual witsml20__Borehole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Borehole); }
      public:
        /// Constructor with default initializations
        witsml20__Borehole() : Name(), TypeBorehole(), MdInterval(), TvdInterval(), BoreholeDiameter(), DescriptionPermanent(), ExtensionNameValue(), EquipmentEventHistory(), uid(), soap() { }
        virtual ~witsml20__Borehole() { }
        /// Friend allocator used by soap_new_witsml20__Borehole(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Borehole * SOAP_FMAC2 soap_instantiate_witsml20__Borehole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:235 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature (-52)
/* complex XML schema type 'witsml20:GeologyFeature': */
class SOAP_CMAC witsml20__GeologyFeature {
      public:
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml20:GeologyType' of XML schema type 'witsml20:GeologyType'
        enum witsml20__GeologyType *GeologyType;
        /// Optional element 'witsml20:FeatureMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *FeatureMdInterval;
        /// Optional element 'witsml20:FeatureTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *FeatureTvdInterval;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__GeologyFeature, default initialized and not managed by a soap context
        virtual witsml20__GeologyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__GeologyFeature); }
      public:
        /// Constructor with default initializations
        witsml20__GeologyFeature() : Name(), GeologyType(), FeatureMdInterval(), FeatureTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__GeologyFeature() { }
        /// Friend allocator used by soap_new_witsml20__GeologyFeature(struct soap*, int)
        friend SOAP_FMAC1 witsml20__GeologyFeature * SOAP_FMAC2 soap_instantiate_witsml20__GeologyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:237 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet (-53)
/* complex XML schema type 'witsml20:DownholeStringSet': */
class SOAP_CMAC witsml20__DownholeStringSet {
      public:
        /// Required element 'witsml20:DownholeString' of XML schema type 'witsml20:DownholeString'
        std::vector<witsml20__DownholeString *> DownholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DownholeStringSet, default initialized and not managed by a soap context
        virtual witsml20__DownholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DownholeStringSet); }
      public:
        /// Constructor with default initializations
        witsml20__DownholeStringSet() : DownholeString(), soap() { }
        virtual ~witsml20__DownholeStringSet() { }
        /// Friend allocator used by soap_new_witsml20__DownholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DownholeStringSet * SOAP_FMAC2 soap_instantiate_witsml20__DownholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:239 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet (-54)
/* complex XML schema type 'witsml20:EquipmentSet': */
class SOAP_CMAC witsml20__EquipmentSet {
      public:
        /// Required element 'witsml20:Equipment' of XML schema type 'witsml20:Equipment'
        std::vector<witsml20__Equipment *> Equipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__EquipmentSet, default initialized and not managed by a soap context
        virtual witsml20__EquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__EquipmentSet); }
      public:
        /// Constructor with default initializations
        witsml20__EquipmentSet() : Equipment(), soap() { }
        virtual ~witsml20__EquipmentSet() { }
        /// Friend allocator used by soap_new_witsml20__EquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__EquipmentSet * SOAP_FMAC2 soap_instantiate_witsml20__EquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:241 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment (-55)
/* complex XML schema type 'witsml20:Equipment': */
class SOAP_CMAC witsml20__Equipment {
      public:
        /// Optional element 'witsml20:EquipmentName' of XML schema type 'eml21:String64'
        std::string *EquipmentName;
        /// Required element 'witsml20:EquipmentType' of XML schema type 'witsml20:EquipmentTypeExt'
        std::string EquipmentType;
        /// Optional element 'witsml20:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml20:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml20:CatalogId' of XML schema type 'eml21:String64'
        std::string *CatalogId;
        /// Optional element 'witsml20:CatalogName' of XML schema type 'eml21:String64'
        std::string *CatalogName;
        /// Optional element 'witsml20:BrandName' of XML schema type 'eml21:String64'
        std::string *BrandName;
        /// Optional element 'witsml20:ModelType' of XML schema type 'eml21:String64'
        std::string *ModelType;
        /// Optional element 'witsml20:Series' of XML schema type 'eml21:String64'
        std::string *Series;
        /// Optional element 'witsml20:IsSerialized' of XML schema type 'xsd:boolean'
        bool *IsSerialized;
        /// Optional element 'witsml20:SerialNumber' of XML schema type 'eml21:String64'
        std::string *SerialNumber;
        /// Optional element 'witsml20:PartNo' of XML schema type 'eml21:String64'
        std::string *PartNo;
        /// Optional element 'witsml20:SurfaceCondition' of XML schema type 'eml21:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml20:Material' of XML schema type 'eml21:String64'
        std::string *Material;
        /// Optional element 'witsml20:Grade' of XML schema type 'witsml20:GradeType'
        enum witsml20__GradeType *Grade;
        /// Optional element 'witsml20:UnitWeight' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *UnitWeight;
        /// Optional element 'witsml20:CoatingLinerApplied' of XML schema type 'xsd:boolean'
        bool *CoatingLinerApplied;
        /// Optional element 'witsml20:OutsideCoating' of XML schema type 'witsml20:Coating'
        enum witsml20__Coating *OutsideCoating;
        /// Optional element 'witsml20:InsideCoating' of XML schema type 'witsml20:Coating'
        enum witsml20__Coating *InsideCoating;
        /// Optional element 'witsml20:UnitLength' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *UnitLength;
        /// Optional element 'witsml20:MajorOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MajorOd;
        /// Optional element 'witsml20:MinorOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinorOd;
        /// Optional element 'witsml20:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml20:MaxOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MaxOd;
        /// Optional element 'witsml20:MinOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinOd;
        /// Optional element 'witsml20:MajorId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MajorId;
        /// Optional element 'witsml20:MinorId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinorId;
        /// Optional element 'witsml20:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml20:MaxId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MaxId;
        /// Optional element 'witsml20:MinId' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MinId;
        /// Optional element 'witsml20:Drift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Drift;
        /// Optional element 'witsml20:NominalSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *NominalSize;
        /// Optional element 'witsml20:NameService' of XML schema type 'eml21:String64'
        std::string *NameService;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:DescriptionPermanent' of XML schema type 'eml21:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml20:Remark' of XML schema type 'eml21:String2000'
        std::string *Remark;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml20:Property' of XML schema type 'witsml20:ExtPropNameValue'
        std::vector<witsml20__ExtPropNameValue *> Property;
        /// Optional element 'witsml20:SlotAsManufactured' of XML schema type 'witsml20:PerfSlot'
        std::vector<witsml20__PerfSlot *> SlotAsManufactured;
        /// Optional element 'witsml20:HoleAsManufactured' of XML schema type 'witsml20:PerfHole'
        std::vector<witsml20__PerfHole *> HoleAsManufactured;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Equipment, default initialized and not managed by a soap context
        virtual witsml20__Equipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Equipment); }
      public:
        /// Constructor with default initializations
        witsml20__Equipment() : EquipmentName(), EquipmentType(), Manufacturer(), Model(), CatalogId(), CatalogName(), BrandName(), ModelType(), Series(), IsSerialized(), SerialNumber(), PartNo(), SurfaceCondition(), Material(), Grade(), UnitWeight(), CoatingLinerApplied(), OutsideCoating(), InsideCoating(), UnitLength(), MajorOd(), MinorOd(), Od(), MaxOd(), MinOd(), MajorId(), MinorId(), Id(), MaxId(), MinId(), Drift(), NominalSize(), NameService(), Description(), DescriptionPermanent(), Remark(), ExtensionNameValue(), ExtensionAny(), Property(), SlotAsManufactured(), HoleAsManufactured(), uid(), soap() { }
        virtual ~witsml20__Equipment() { }
        /// Friend allocator used by soap_new_witsml20__Equipment(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Equipment * SOAP_FMAC2 soap_instantiate_witsml20__Equipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue (-56)
/* complex XML schema type 'witsml20:ExtPropNameValue': */
class SOAP_CMAC witsml20__ExtPropNameValue {
      public:
        /// Optional element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string *Name;
        /// Optional element 'witsml20:Value' of XML schema type 'eml21:String2000'
        std::string *Value;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ExtPropNameValue, default initialized and not managed by a soap context
        virtual witsml20__ExtPropNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ExtPropNameValue); }
      public:
        /// Constructor with default initializations
        witsml20__ExtPropNameValue() : Name(), Value(), uid(), soap() { }
        virtual ~witsml20__ExtPropNameValue() { }
        /// Friend allocator used by soap_new_witsml20__ExtPropNameValue(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ExtPropNameValue * SOAP_FMAC2 soap_instantiate_witsml20__ExtPropNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:245 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot (-57)
/* complex XML schema type 'witsml20:PerfSlot': */
class SOAP_CMAC witsml20__PerfSlot {
      public:
        /// Optional element 'witsml20:SlotHeight' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotHeight;
        /// Optional element 'witsml20:SlotWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotWidth;
        /// Optional element 'witsml20:SlotCenterDistance' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SlotCenterDistance;
        /// Optional element 'witsml20:SlotCount' of XML schema type 'xsd:int'
        int *SlotCount;
        /// Optional element 'witsml20:Remarks' of XML schema type 'eml21:String2000'
        std::string *Remarks;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerfSlot, default initialized and not managed by a soap context
        virtual witsml20__PerfSlot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerfSlot); }
      public:
        /// Constructor with default initializations
        witsml20__PerfSlot() : SlotHeight(), SlotWidth(), SlotCenterDistance(), SlotCount(), Remarks(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__PerfSlot() { }
        /// Friend allocator used by soap_new_witsml20__PerfSlot(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerfSlot * SOAP_FMAC2 soap_instantiate_witsml20__PerfSlot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:247 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole (-58)
/* complex XML schema type 'witsml20:PerfHole': */
class SOAP_CMAC witsml20__PerfHole {
      public:
        /// Optional element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml20:HoleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml20:HoleAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml20:HolePattern' of XML schema type 'eml21:String64'
        std::string *HolePattern;
        /// Optional element 'witsml20:Remarks' of XML schema type 'eml21:String2000'
        std::string *Remarks;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:HoleDensity' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml20:HoleCount' of XML schema type 'xsd:int'
        int *HoleCount;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerfHole, default initialized and not managed by a soap context
        virtual witsml20__PerfHole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerfHole); }
      public:
        /// Constructor with default initializations
        witsml20__PerfHole() : MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), Remarks(), ExtensionNameValue(), HoleDensity(), HoleCount(), uid(), soap() { }
        virtual ~witsml20__PerfHole() { }
        /// Friend allocator used by soap_new_witsml20__PerfHole(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerfHole * SOAP_FMAC2 soap_instantiate_witsml20__PerfHole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:249 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets (-59)
/* complex XML schema type 'witsml20:PerforationSets': */
class SOAP_CMAC witsml20__PerforationSets {
      public:
        /// Required element 'witsml20:PerforationSet' of XML schema type 'witsml20:PerforationSet'
        std::vector<witsml20__PerforationSet *> PerforationSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerforationSets, default initialized and not managed by a soap context
        virtual witsml20__PerforationSets *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerforationSets); }
      public:
        /// Constructor with default initializations
        witsml20__PerforationSets() : PerforationSet(), soap() { }
        virtual ~witsml20__PerforationSets() { }
        /// Friend allocator used by soap_new_witsml20__PerforationSets(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerforationSets * SOAP_FMAC2 soap_instantiate_witsml20__PerforationSets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:251 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet (-60)
/* complex XML schema type 'witsml20:PerforationSet': */
class SOAP_CMAC witsml20__PerforationSet {
      public:
        /// Optional element 'witsml20:BoreholeStringReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> BoreholeStringReferenceId;
        /// Optional element 'witsml20:DownholeStringReferenceId' of XML schema type 'eml21:String64'
        std::vector<std::string> DownholeStringReferenceId;
        /// Optional element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:TvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TvdInterval;
        /// Optional element 'witsml20:HoleDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml20:HoleAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml20:HolePattern' of XML schema type 'eml21:String64'
        std::string *HolePattern;
        /// Optional element 'witsml20:HoleDensity' of XML schema type 'eml21:ReciprocalLengthMeasure'
        eml21__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml20:HoleCount' of XML schema type 'xsd:int'
        int *HoleCount;
        /// Optional element 'witsml20:FrictionFactor' of XML schema type 'xsd:double'
        double *FrictionFactor;
        /// Optional element 'witsml20:FrictionPres' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *FrictionPres;
        /// Optional element 'witsml20:DischargeCoefficient' of XML schema type 'xsd:double'
        double *DischargeCoefficient;
        /// Optional element 'witsml20:PerforationTool' of XML schema type 'witsml20:PerforationToolType'
        enum witsml20__PerforationToolType *PerforationTool;
        /// Optional element 'witsml20:PerforationPenetration' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PerforationPenetration;
        /// Optional element 'witsml20:CrushZoneDiameter' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *CrushZoneDiameter;
        /// Optional element 'witsml20:CrushDamageRatio' of XML schema type 'eml21:String64'
        std::string *CrushDamageRatio;
        /// Optional element 'witsml20:PerforationDate' of XML schema type 'eml21:TimeStamp'
        std::string *PerforationDate;
        /// Optional element 'witsml20:PermanentRemarks' of XML schema type 'eml21:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        witsml20__EventInfo *EventHistory;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PerforationSet, default initialized and not managed by a soap context
        virtual witsml20__PerforationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PerforationSet); }
      public:
        /// Constructor with default initializations
        witsml20__PerforationSet() : BoreholeStringReferenceId(), DownholeStringReferenceId(), MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), HoleDensity(), HoleCount(), FrictionFactor(), FrictionPres(), DischargeCoefficient(), PerforationTool(), PerforationPenetration(), CrushZoneDiameter(), CrushDamageRatio(), PerforationDate(), PermanentRemarks(), EventHistory(), uid(), soap() { }
        virtual ~witsml20__PerforationSet() { }
        /// Friend allocator used by soap_new_witsml20__PerforationSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PerforationSet * SOAP_FMAC2 soap_instantiate_witsml20__PerforationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:253 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType (-61)
/* complex XML schema type 'witsml20:AbstractConnectionType': */
class SOAP_CMAC witsml20__AbstractConnectionType {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractConnectionType, default initialized and not managed by a soap context
        virtual witsml20__AbstractConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractConnectionType); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractConnectionType() : soap() { }
        virtual ~witsml20__AbstractConnectionType() { }
        /// Friend allocator used by soap_new_witsml20__AbstractConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractConnectionType * SOAP_FMAC2 soap_instantiate_witsml20__AbstractConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent (-67)
/* complex XML schema type 'witsml20:TubularComponent': */
class SOAP_CMAC witsml20__TubularComponent {
      public:
        /// Required element 'witsml20:TypeTubularComponent' of XML schema type 'witsml20:TubularComponentType'
        enum witsml20__TubularComponentType TypeTubularComponent;
        /// Required element 'witsml20:Sequence' of XML schema type 'xsd:int'
        int Sequence;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required element 'witsml20:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Required element 'witsml20:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml20:OdMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdMx;
        /// Required element 'witsml20:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml20:LenJointAv' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenJointAv;
        /// Optional element 'witsml20:NumJointStand' of XML schema type 'xsd:int'
        int *NumJointStand;
        /// Optional element 'witsml20:WtPerLen' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml20:Grade' of XML schema type 'eml21:String64'
        std::string *Grade;
        /// Optional element 'witsml20:OdDrift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdDrift;
        /// Optional element 'witsml20:TensYield' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *TensYield;
        /// Optional element 'witsml20:TqYield' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml20:StressFatigue' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *StressFatigue;
        /// Optional element 'witsml20:LenFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenFishneck;
        /// Optional element 'witsml20:IdFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdFishneck;
        /// Optional element 'witsml20:OdFishneck' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdFishneck;
        /// Optional element 'witsml20:Disp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Disp;
        /// Optional element 'witsml20:PresBurst' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBurst;
        /// Optional element 'witsml20:PresCollapse' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresCollapse;
        /// Optional element 'witsml20:ClassService' of XML schema type 'eml21:String64'
        std::string *ClassService;
        /// Optional element 'witsml20:WearWall' of XML schema type 'eml21:LengthPerLengthMeasure'
        eml21__LengthPerLengthMeasure *WearWall;
        /// Optional element 'witsml20:ThickWall' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ThickWall;
        /// Optional element 'witsml20:ConfigCon' of XML schema type 'witsml20:BoxPinConfig'
        enum witsml20__BoxPinConfig *ConfigCon;
        /// Optional element 'witsml20:BendStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *BendStiffness;
        /// Optional element 'witsml20:AxialStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *AxialStiffness;
        /// Optional element 'witsml20:TorsionalStiffness' of XML schema type 'eml21:ForcePerLengthMeasure'
        eml21__ForcePerLengthMeasure *TorsionalStiffness;
        /// Optional element 'witsml20:TypeMaterial' of XML schema type 'witsml20:MaterialType'
        enum witsml20__MaterialType *TypeMaterial;
        /// Optional element 'witsml20:DoglegMx' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *DoglegMx;
        /// Optional element 'witsml20:Vendor' of XML schema type 'eml21:String64'
        std::string *Vendor;
        /// Optional element 'witsml20:Model' of XML schema type 'eml21:String64'
        std::string *Model;
        /// Optional element 'witsml20:NameTag' of XML schema type 'witsml20:NameTag'
        std::vector<witsml20__NameTag *> NameTag;
        /// Optional element 'witsml20:AreaNozzleFlow' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *AreaNozzleFlow;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Connection' of XML schema type 'witsml20:Connection'
        std::vector<witsml20__Connection *> Connection;
        /// Optional element 'witsml20:Jar' of XML schema type 'witsml20:Jar'
        witsml20__Jar *Jar;
        /// Optional element 'witsml20:MwdTool' of XML schema type 'witsml20:MwdTool'
        witsml20__MwdTool *MwdTool;
        /// Optional element 'witsml20:BitRecord' of XML schema type 'witsml20:BitRecord'
        witsml20__BitRecord *BitRecord;
        /// Optional element 'witsml20:Motor' of XML schema type 'witsml20:Motor'
        witsml20__Motor *Motor;
        /// Optional element 'witsml20:Stabilizer' of XML schema type 'witsml20:Stabilizer'
        std::vector<witsml20__Stabilizer *> Stabilizer;
        /// Optional element 'witsml20:Bend' of XML schema type 'witsml20:Bend'
        std::vector<witsml20__Bend *> Bend;
        /// Optional element 'witsml20:HoleOpener' of XML schema type 'witsml20:HoleOpener'
        witsml20__HoleOpener *HoleOpener;
        /// Optional element 'witsml20:RotarySteerableTool' of XML schema type 'witsml20:RotarySteerableTool'
        witsml20__RotarySteerableTool *RotarySteerableTool;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml20:Nozzle' of XML schema type 'witsml20:Nozzle'
        std::vector<witsml20__Nozzle *> Nozzle;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__TubularComponent, default initialized and not managed by a soap context
        virtual witsml20__TubularComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__TubularComponent); }
      public:
        /// Constructor with default initializations
        witsml20__TubularComponent() : TypeTubularComponent(), Sequence(), Description(), Id(), Od(), OdMx(), Len(), LenJointAv(), NumJointStand(), WtPerLen(), Grade(), OdDrift(), TensYield(), TqYield(), StressFatigue(), LenFishneck(), IdFishneck(), OdFishneck(), Disp(), PresBurst(), PresCollapse(), ClassService(), WearWall(), ThickWall(), ConfigCon(), BendStiffness(), AxialStiffness(), TorsionalStiffness(), TypeMaterial(), DoglegMx(), Vendor(), Model(), NameTag(), AreaNozzleFlow(), ExtensionNameValue(), Connection(), Jar(), MwdTool(), BitRecord(), Motor(), Stabilizer(), Bend(), HoleOpener(), RotarySteerableTool(), ExtensionAny(), Nozzle(), uid(), soap() { }
        virtual ~witsml20__TubularComponent() { }
        /// Friend allocator used by soap_new_witsml20__TubularComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml20__TubularComponent * SOAP_FMAC2 soap_instantiate_witsml20__TubularComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord (-68)
/* complex XML schema type 'witsml20:BitRecord': */
class SOAP_CMAC witsml20__BitRecord {
      public:
        /// Optional element 'witsml20:NumBit' of XML schema type 'eml21:String64'
        std::string *NumBit;
        /// Required element 'witsml20:DiaBit' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaBit;
        /// Optional element 'witsml20:DiaPassThru' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPassThru;
        /// Optional element 'witsml20:DiaPilot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPilot;
        /// Optional element 'witsml20:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml20:TypeBit' of XML schema type 'witsml20:BitType'
        enum witsml20__BitType *TypeBit;
        /// Optional element 'witsml20:CodeMfg' of XML schema type 'eml21:String64'
        std::string *CodeMfg;
        /// Optional element 'witsml20:CodeIADC' of XML schema type 'eml21:String64'
        std::string *CodeIADC;
        /// Optional element 'witsml20:CondInitInner' of XML schema type 'witsml20:IadcIntegerCode'
        enum witsml20__IadcIntegerCode *CondInitInner;
        /// Optional element 'witsml20:CondInitOuter' of XML schema type 'witsml20:IadcIntegerCode'
        enum witsml20__IadcIntegerCode *CondInitOuter;
        /// Optional element 'witsml20:CondInitDull' of XML schema type 'witsml20:BitDullCode'
        enum witsml20__BitDullCode *CondInitDull;
        /// Optional element 'witsml20:CondInitLocation' of XML schema type 'eml21:String64'
        std::string *CondInitLocation;
        /// Optional element 'witsml20:CondInitBearing' of XML schema type 'witsml20:IadcBearingWearCode'
        enum witsml20__IadcBearingWearCode *CondInitBearing;
        /// Optional element 'witsml20:CondInitGauge' of XML schema type 'eml21:String64'
        std::string *CondInitGauge;
        /// Optional element 'witsml20:CondInitOther' of XML schema type 'eml21:String64'
        std::string *CondInitOther;
        /// Optional element 'witsml20:CondInitReason' of XML schema type 'witsml20:BitReasonPulled'
        enum witsml20__BitReasonPulled *CondInitReason;
        /// Optional element 'witsml20:CondFinalInner' of XML schema type 'witsml20:IadcIntegerCode'
        enum witsml20__IadcIntegerCode *CondFinalInner;
        /// Optional element 'witsml20:CondFinalOuter' of XML schema type 'witsml20:IadcIntegerCode'
        enum witsml20__IadcIntegerCode *CondFinalOuter;
        /// Optional element 'witsml20:CondFinalDull' of XML schema type 'witsml20:BitDullCode'
        enum witsml20__BitDullCode *CondFinalDull;
        /// Optional element 'witsml20:CondFinalLocation' of XML schema type 'eml21:String64'
        std::string *CondFinalLocation;
        /// Optional element 'witsml20:CondFinalBearing' of XML schema type 'witsml20:IadcBearingWearCode'
        enum witsml20__IadcBearingWearCode *CondFinalBearing;
        /// Optional element 'witsml20:CondFinalGauge' of XML schema type 'eml21:String64'
        std::string *CondFinalGauge;
        /// Optional element 'witsml20:CondFinalOther' of XML schema type 'eml21:String64'
        std::string *CondFinalOther;
        /// Optional element 'witsml20:CondFinalReason' of XML schema type 'witsml20:BitReasonPulled'
        enum witsml20__BitReasonPulled *CondFinalReason;
        /// Optional element 'witsml20:Drive' of XML schema type 'eml21:String64'
        std::string *Drive;
        /// Optional element 'witsml20:BitClass' of XML schema type 'eml21:String64'
        std::string *BitClass;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Cost' of XML schema type 'witsml20:Cost'
        witsml20__Cost *Cost;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BitRecord, default initialized and not managed by a soap context
        virtual witsml20__BitRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BitRecord); }
      public:
        /// Constructor with default initializations
        witsml20__BitRecord() : NumBit(), DiaBit(), DiaPassThru(), DiaPilot(), Manufacturer(), TypeBit(), CodeMfg(), CodeIADC(), CondInitInner(), CondInitOuter(), CondInitDull(), CondInitLocation(), CondInitBearing(), CondInitGauge(), CondInitOther(), CondInitReason(), CondFinalInner(), CondFinalOuter(), CondFinalDull(), CondFinalLocation(), CondFinalBearing(), CondFinalGauge(), CondFinalOther(), CondFinalReason(), Drive(), BitClass(), ExtensionNameValue(), Cost(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__BitRecord() { }
        /// Friend allocator used by soap_new_witsml20__BitRecord(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BitRecord * SOAP_FMAC2 soap_instantiate_witsml20__BitRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:269 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle (-69)
/* complex XML schema type 'witsml20:Nozzle': */
class SOAP_CMAC witsml20__Nozzle {
      public:
        /// Optional element 'witsml20:Index' of XML schema type 'xsd:int'
        int *Index;
        /// Optional element 'witsml20:DiaNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml20:TypeNozzle' of XML schema type 'witsml20:NozzleType'
        enum witsml20__NozzleType *TypeNozzle;
        /// Optional element 'witsml20:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml20:Orientation' of XML schema type 'eml21:String64'
        std::string *Orientation;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Nozzle, default initialized and not managed by a soap context
        virtual witsml20__Nozzle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Nozzle); }
      public:
        /// Constructor with default initializations
        witsml20__Nozzle() : Index(), DiaNozzle(), TypeNozzle(), Len(), Orientation(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__Nozzle() { }
        /// Friend allocator used by soap_new_witsml20__Nozzle(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Nozzle * SOAP_FMAC2 soap_instantiate_witsml20__Nozzle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Connection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Connection (-70)
/* complex XML schema type 'witsml20:Connection': */
class SOAP_CMAC witsml20__Connection {
      public:
        /// Optional element 'witsml20:Id' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Id;
        /// Optional element 'witsml20:Od' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Od;
        /// Optional element 'witsml20:Len' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *Len;
        /// Optional element 'witsml20:TypeThread' of XML schema type 'eml21:String64'
        std::string *TypeThread;
        /// Optional element 'witsml20:SizeThread' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeThread;
        /// Optional element 'witsml20:TensYield' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *TensYield;
        /// Optional element 'witsml20:TqYield' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml20:Position' of XML schema type 'witsml20:ConnectionPosition'
        enum witsml20__ConnectionPosition *Position;
        /// Optional element 'witsml20:CriticalCrossSection' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *CriticalCrossSection;
        /// Optional element 'witsml20:PresLeak' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresLeak;
        /// Optional element 'witsml20:TqMakeup' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqMakeup;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Connection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Connection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Connection, default initialized and not managed by a soap context
        virtual witsml20__Connection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Connection); }
      public:
        /// Constructor with default initializations
        witsml20__Connection() : Id(), Od(), Len(), TypeThread(), SizeThread(), TensYield(), TqYield(), Position(), CriticalCrossSection(), PresLeak(), TqMakeup(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__Connection() { }
        /// Friend allocator used by soap_new_witsml20__Connection(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Connection * SOAP_FMAC2 soap_instantiate_witsml20__Connection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Jar
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Jar (-71)
/* complex XML schema type 'witsml20:Jar': */
class SOAP_CMAC witsml20__Jar {
      public:
        /// Optional element 'witsml20:ForUpSet' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForUpSet;
        /// Optional element 'witsml20:ForDownSet' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForDownSet;
        /// Optional element 'witsml20:ForUpTrip' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForUpTrip;
        /// Optional element 'witsml20:ForDownTrip' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForDownTrip;
        /// Optional element 'witsml20:ForPmpOpen' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForPmpOpen;
        /// Optional element 'witsml20:ForSealFric' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *ForSealFric;
        /// Optional element 'witsml20:TypeJar' of XML schema type 'witsml20:JarType'
        enum witsml20__JarType *TypeJar;
        /// Optional element 'witsml20:JarAction' of XML schema type 'witsml20:JarAction'
        enum witsml20__JarAction *JarAction;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Jar
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Jar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Jar, default initialized and not managed by a soap context
        virtual witsml20__Jar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Jar); }
      public:
        /// Constructor with default initializations
        witsml20__Jar() : ForUpSet(), ForDownSet(), ForUpTrip(), ForDownTrip(), ForPmpOpen(), ForSealFric(), TypeJar(), JarAction(), ExtensionAny(), soap() { }
        virtual ~witsml20__Jar() { }
        /// Friend allocator used by soap_new_witsml20__Jar(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Jar * SOAP_FMAC2 soap_instantiate_witsml20__Jar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:275 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool (-72)
/* complex XML schema type 'witsml20:MwdTool': */
class SOAP_CMAC witsml20__MwdTool {
      public:
        /// Optional element 'witsml20:FlowrateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml20:FlowrateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml20:TempMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempMx;
        /// Optional element 'witsml20:IdEquv' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdEquv;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Optional element 'witsml20:Sensor' of XML schema type 'witsml20:Sensor'
        std::vector<witsml20__Sensor *> Sensor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__MwdTool, default initialized and not managed by a soap context
        virtual witsml20__MwdTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__MwdTool); }
      public:
        /// Constructor with default initializations
        witsml20__MwdTool() : FlowrateMn(), FlowrateMx(), TempMx(), IdEquv(), ExtensionAny(), Sensor(), soap() { }
        virtual ~witsml20__MwdTool() { }
        /// Friend allocator used by soap_new_witsml20__MwdTool(struct soap*, int)
        friend SOAP_FMAC1 witsml20__MwdTool * SOAP_FMAC2 soap_instantiate_witsml20__MwdTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:277 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor (-73)
/* complex XML schema type 'witsml20:Sensor': */
class SOAP_CMAC witsml20__Sensor {
      public:
        /// Optional element 'witsml20:TypeMeasurement' of XML schema type 'witsml20:MeasurementType'
        enum witsml20__MeasurementType *TypeMeasurement;
        /// Optional element 'witsml20:OffsetBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OffsetBot;
        /// Optional element 'witsml20:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Sensor, default initialized and not managed by a soap context
        virtual witsml20__Sensor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Sensor); }
      public:
        /// Constructor with default initializations
        witsml20__Sensor() : TypeMeasurement(), OffsetBot(), Comments(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__Sensor() { }
        /// Friend allocator used by soap_new_witsml20__Sensor(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Sensor * SOAP_FMAC2 soap_instantiate_witsml20__Sensor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:279 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Motor
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Motor (-74)
/* complex XML schema type 'witsml20:Motor': */
class SOAP_CMAC witsml20__Motor {
      public:
        /// Optional element 'witsml20:OffsetTool' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OffsetTool;
        /// Optional element 'witsml20:PresLossFact' of XML schema type 'xsd:double'
        double *PresLossFact;
        /// Optional element 'witsml20:FlowrateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml20:FlowrateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml20:DiaRotorNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaRotorNozzle;
        /// Optional element 'witsml20:ClearanceBearBox' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ClearanceBearBox;
        /// Optional element 'witsml20:LobesRotor' of XML schema type 'xsd:int'
        int *LobesRotor;
        /// Optional element 'witsml20:LobesStator' of XML schema type 'xsd:int'
        int *LobesStator;
        /// Optional element 'witsml20:TypeBearing' of XML schema type 'witsml20:BearingType'
        enum witsml20__BearingType *TypeBearing;
        /// Optional element 'witsml20:TempOpMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempOpMx;
        /// Optional element 'witsml20:RotorCatcher' of XML schema type 'xsd:boolean'
        bool *RotorCatcher;
        /// Optional element 'witsml20:DumpValve' of XML schema type 'xsd:boolean'
        bool *DumpValve;
        /// Optional element 'witsml20:DiaNozzle' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml20:Rotatable' of XML schema type 'xsd:boolean'
        bool *Rotatable;
        /// Optional element 'witsml20:BendSettingsMn' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BendSettingsMn;
        /// Optional element 'witsml20:BendSettingsMx' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *BendSettingsMx;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Motor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Motor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Motor, default initialized and not managed by a soap context
        virtual witsml20__Motor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Motor); }
      public:
        /// Constructor with default initializations
        witsml20__Motor() : OffsetTool(), PresLossFact(), FlowrateMn(), FlowrateMx(), DiaRotorNozzle(), ClearanceBearBox(), LobesRotor(), LobesStator(), TypeBearing(), TempOpMx(), RotorCatcher(), DumpValve(), DiaNozzle(), Rotatable(), BendSettingsMn(), BendSettingsMx(), ExtensionAny(), soap() { }
        virtual ~witsml20__Motor() { }
        /// Friend allocator used by soap_new_witsml20__Motor(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Motor * SOAP_FMAC2 soap_instantiate_witsml20__Motor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:281 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer (-75)
/* complex XML schema type 'witsml20:Stabilizer': */
class SOAP_CMAC witsml20__Stabilizer {
      public:
        /// Optional element 'witsml20:LenBlade' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBlade;
        /// Optional element 'witsml20:LenBladeGauge' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBladeGauge;
        /// Optional element 'witsml20:OdBladeMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdBladeMx;
        /// Optional element 'witsml20:OdBladeMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdBladeMn;
        /// Optional element 'witsml20:DistBladeBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistBladeBot;
        /// Optional element 'witsml20:ShapeBlade' of XML schema type 'witsml20:BladeShapeType'
        enum witsml20__BladeShapeType *ShapeBlade;
        /// Optional element 'witsml20:FactFric' of XML schema type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml20:TypeBlade' of XML schema type 'witsml20:BladeType'
        enum witsml20__BladeType *TypeBlade;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Stabilizer, default initialized and not managed by a soap context
        virtual witsml20__Stabilizer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Stabilizer); }
      public:
        /// Constructor with default initializations
        witsml20__Stabilizer() : LenBlade(), LenBladeGauge(), OdBladeMx(), OdBladeMn(), DistBladeBot(), ShapeBlade(), FactFric(), TypeBlade(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__Stabilizer() { }
        /// Friend allocator used by soap_new_witsml20__Stabilizer(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Stabilizer * SOAP_FMAC2 soap_instantiate_witsml20__Stabilizer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:283 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Bend
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Bend (-76)
/* complex XML schema type 'witsml20:Bend': */
class SOAP_CMAC witsml20__Bend {
      public:
        /// Optional element 'witsml20:Angle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Angle;
        /// Optional element 'witsml20:DistBendBot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistBendBot;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Bend
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Bend; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Bend, default initialized and not managed by a soap context
        virtual witsml20__Bend *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Bend); }
      public:
        /// Constructor with default initializations
        witsml20__Bend() : Angle(), DistBendBot(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml20__Bend() { }
        /// Friend allocator used by soap_new_witsml20__Bend(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Bend * SOAP_FMAC2 soap_instantiate_witsml20__Bend(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:285 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener (-77)
/* complex XML schema type 'witsml20:HoleOpener': */
class SOAP_CMAC witsml20__HoleOpener {
      public:
        /// Optional element 'witsml20:TypeHoleOpener' of XML schema type 'witsml20:HoleOpenerType'
        enum witsml20__HoleOpenerType *TypeHoleOpener;
        /// Optional element 'witsml20:NumCutter' of XML schema type 'xsd:int'
        int *NumCutter;
        /// Optional element 'witsml20:Manufacturer' of XML schema type 'eml21:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml20:DiaHoleOpener' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHoleOpener;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__HoleOpener, default initialized and not managed by a soap context
        virtual witsml20__HoleOpener *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__HoleOpener); }
      public:
        /// Constructor with default initializations
        witsml20__HoleOpener() : TypeHoleOpener(), NumCutter(), Manufacturer(), DiaHoleOpener(), ExtensionAny(), soap() { }
        virtual ~witsml20__HoleOpener() { }
        /// Friend allocator used by soap_new_witsml20__HoleOpener(struct soap*, int)
        friend SOAP_FMAC1 witsml20__HoleOpener * SOAP_FMAC2 soap_instantiate_witsml20__HoleOpener(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:287 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool (-78)
/* complex XML schema type 'witsml20:RotarySteerableTool': */
class SOAP_CMAC witsml20__RotarySteerableTool {
      public:
        /// Required element 'witsml20:DeflectionMethod' of XML schema type 'witsml20:DeflectionMethod'
        enum witsml20__DeflectionMethod DeflectionMethod;
        /// Optional element 'witsml20:HoleSizeMn' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleSizeMn;
        /// Optional element 'witsml20:HoleSizeMx' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *HoleSizeMx;
        /// Optional element 'witsml20:WobMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMx;
        /// Optional element 'witsml20:OperatingSpeed' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *OperatingSpeed;
        /// Optional element 'witsml20:SpeedMx' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *SpeedMx;
        /// Optional element 'witsml20:FlowRateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateMn;
        /// Optional element 'witsml20:FlowRateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateMx;
        /// Optional element 'witsml20:DownLinkFlowRateMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *DownLinkFlowRateMn;
        /// Optional element 'witsml20:DownLinkFlowRateMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *DownLinkFlowRateMx;
        /// Optional element 'witsml20:PressLossFact' of XML schema type 'xsd:double'
        double *PressLossFact;
        /// Optional element 'witsml20:PadCount' of XML schema type 'xsd:int'
        int *PadCount;
        /// Optional element 'witsml20:PadLen' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadLen;
        /// Optional element 'witsml20:PadWidth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadWidth;
        /// Optional element 'witsml20:PadOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *PadOffset;
        /// Optional element 'witsml20:OpenPadOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OpenPadOd;
        /// Optional element 'witsml20:ClosePadOd' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ClosePadOd;
        /// Required element 'witsml20:AbstractRotarySteerableTool' of XML schema type 'witsml20:AbstractRotarySteerableTool'
        witsml20__AbstractRotarySteerableTool *AbstractRotarySteerableTool;
        /// Optional element 'witsml20:Sensor' of XML schema type 'witsml20:Sensor'
        std::vector<witsml20__Sensor *> Sensor;
        /// Optional element 'witsml20:ExtensionAny' of XML schema type 'eml21:CustomData'
        eml21__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml20__RotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RotarySteerableTool); }
      public:
        /// Constructor with default initializations
        witsml20__RotarySteerableTool() : DeflectionMethod(), HoleSizeMn(), HoleSizeMx(), WobMx(), OperatingSpeed(), SpeedMx(), FlowRateMn(), FlowRateMx(), DownLinkFlowRateMn(), DownLinkFlowRateMx(), PressLossFact(), PadCount(), PadLen(), PadWidth(), PadOffset(), OpenPadOd(), ClosePadOd(), AbstractRotarySteerableTool(), Sensor(), ExtensionAny(), soap() { }
        virtual ~witsml20__RotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml20__RotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml20__RotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:289 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool (-79)
/* complex XML schema type 'witsml20:AbstractRotarySteerableTool': */
class SOAP_CMAC witsml20__AbstractRotarySteerableTool {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractRotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml20__AbstractRotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractRotarySteerableTool); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractRotarySteerableTool() : soap() { }
        virtual ~witsml20__AbstractRotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml20__AbstractRotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractRotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml20__AbstractRotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory (-83)
/* complex XML schema type 'witsml20:CompletionStatusHistory': */
class SOAP_CMAC witsml20__CompletionStatusHistory {
      public:
        /// Optional element 'witsml20:Status' of XML schema type 'witsml20:CompletionStatus'
        enum witsml20__CompletionStatus *Status;
        /// Optional element 'witsml20:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml20:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml20:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CompletionStatusHistory, default initialized and not managed by a soap context
        virtual witsml20__CompletionStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CompletionStatusHistory); }
      public:
        /// Constructor with default initializations
        witsml20__CompletionStatusHistory() : Status(), StartDate(), EndDate(), PerforationMdInterval(), Comment(), uid(), soap() { }
        virtual ~witsml20__CompletionStatusHistory() { }
        /// Friend allocator used by soap_new_witsml20__CompletionStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CompletionStatusHistory * SOAP_FMAC2 soap_instantiate_witsml20__CompletionStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:301 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection (-85)
/* complex XML schema type 'witsml20:WellboreGeometrySection': */
class SOAP_CMAC witsml20__WellboreGeometrySection {
      public:
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:TypeHoleCasing' of XML schema type 'witsml20:HoleCasingType'
        enum witsml20__HoleCasingType *TypeHoleCasing;
        /// Optional element 'witsml20:SectionMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *SectionMdInterval;
        /// Optional element 'witsml20:SectionTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *SectionTvdInterval;
        /// Optional element 'witsml20:IdSection' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *IdSection;
        /// Optional element 'witsml20:OdSection' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *OdSection;
        /// Optional element 'witsml20:WtPerLen' of XML schema type 'eml21:MassPerLengthMeasure'
        eml21__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml20:Grade' of XML schema type 'eml21:String64'
        std::string *Grade;
        /// Optional element 'witsml20:CurveConductor' of XML schema type 'xsd:boolean'
        bool *CurveConductor;
        /// Optional element 'witsml20:DiaDrift' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaDrift;
        /// Optional element 'witsml20:FactFric' of XML schema type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:BhaRun' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> BhaRun;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreGeometrySection, default initialized and not managed by a soap context
        virtual witsml20__WellboreGeometrySection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreGeometrySection); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreGeometrySection() : Citation(), TypeHoleCasing(), SectionMdInterval(), SectionTvdInterval(), IdSection(), OdSection(), WtPerLen(), Grade(), CurveConductor(), DiaDrift(), FactFric(), ExtensionNameValue(), BhaRun(), uid(), soap() { }
        virtual ~witsml20__WellboreGeometrySection() { }
        /// Friend allocator used by soap_new_witsml20__WellboreGeometrySection(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreGeometrySection * SOAP_FMAC2 soap_instantiate_witsml20__WellboreGeometrySection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:305 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData (-87)
/* complex XML schema type 'witsml20:ChannelData': */
class SOAP_CMAC witsml20__ChannelData {
      public:
        /// Optional element 'witsml20:Data' of XML schema type 'xsd:string'
        std::string *Data;
        /// Optional element 'witsml20:FileUri' of XML schema type 'xsd:anyURI'
        std::string *FileUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ChannelData, default initialized and not managed by a soap context
        virtual witsml20__ChannelData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ChannelData); }
      public:
        /// Constructor with default initializations
        witsml20__ChannelData() : Data(), FileUri(), soap() { }
        virtual ~witsml20__ChannelData() { }
        /// Friend allocator used by soap_new_witsml20__ChannelData(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ChannelData * SOAP_FMAC2 soap_instantiate_witsml20__ChannelData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:307 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata (-88)
/* complex XML schema type 'witsml20:PointMetadata': */
class SOAP_CMAC witsml20__PointMetadata {
      public:
        /// Required element 'witsml20:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'witsml20:EtpDataType' of XML schema type 'witsml20:EtpDataType'
        enum witsml20__EtpDataType EtpDataType;
        /// Required element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PointMetadata, default initialized and not managed by a soap context
        virtual witsml20__PointMetadata *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PointMetadata); }
      public:
        /// Constructor with default initializations
        witsml20__PointMetadata() : Name(), EtpDataType(), Description(), soap() { }
        virtual ~witsml20__PointMetadata() { }
        /// Friend allocator used by soap_new_witsml20__PointMetadata(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PointMetadata * SOAP_FMAC2 soap_instantiate_witsml20__PointMetadata(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:311 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex (-90)
/* complex XML schema type 'witsml20:ChannelIndex': */
class SOAP_CMAC witsml20__ChannelIndex {
      public:
        /// Required element 'witsml20:IndexType' of XML schema type 'witsml20:ChannelIndexType'
        enum witsml20__ChannelIndexType IndexType;
        /// Required element 'witsml20:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml20:Direction' of XML schema type 'witsml20:IndexDirection'
        enum witsml20__IndexDirection Direction;
        /// Required element 'witsml20:Mnemonic' of XML schema type 'eml21:String64'
        std::string Mnemonic;
        /// Optional element 'witsml20:DatumReference' of XML schema type 'eml21:String64'
        std::string *DatumReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ChannelIndex, default initialized and not managed by a soap context
        virtual witsml20__ChannelIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ChannelIndex); }
      public:
        /// Constructor with default initializations
        witsml20__ChannelIndex() : IndexType(), Uom(), Direction(), Mnemonic(), DatumReference(), soap() { }
        virtual ~witsml20__ChannelIndex() { }
        /// Friend allocator used by soap_new_witsml20__ChannelIndex(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ChannelIndex * SOAP_FMAC2 soap_instantiate_witsml20__ChannelIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue (-92)
/* complex XML schema type 'witsml20:AbstractIndexValue': */
class SOAP_CMAC witsml20__AbstractIndexValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractIndexValue, default initialized and not managed by a soap context
        virtual witsml20__AbstractIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractIndexValue); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractIndexValue() : soap() { }
        virtual ~witsml20__AbstractIndexValue() { }
        /// Friend allocator used by soap_new_witsml20__AbstractIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractIndexValue * SOAP_FMAC2 soap_instantiate_witsml20__AbstractIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:323 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext (-96)
/* complex XML schema type 'witsml20:AbstractLogDataContext': */
class SOAP_CMAC witsml20__AbstractLogDataContext {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractLogDataContext, default initialized and not managed by a soap context
        virtual witsml20__AbstractLogDataContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractLogDataContext); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractLogDataContext() : soap() { }
        virtual ~witsml20__AbstractLogDataContext() { }
        /// Friend allocator used by soap_new_witsml20__AbstractLogDataContext(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractLogDataContext * SOAP_FMAC2 soap_instantiate_witsml20__AbstractLogDataContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:329 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis (-99)
/* complex XML schema type 'witsml20:LogChannelAxis': */
class SOAP_CMAC witsml20__LogChannelAxis {
      public:
        /// Required element 'witsml20:AxisStart' of XML schema type 'xsd:double'
        double AxisStart;
        /// Required element 'witsml20:AxisSpacing' of XML schema type 'xsd:double'
        double AxisSpacing;
        /// Required element 'witsml20:AxisCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 AxisCount;
        /// Optional element 'witsml20:AxisName' of XML schema type 'eml21:String64'
        std::string *AxisName;
        /// Required element 'witsml20:AxisPropertyKind' of XML schema type 'eml21:String64'
        std::string AxisPropertyKind;
        /// Required element 'witsml20:AxisUom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string AxisUom;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__LogChannelAxis, default initialized and not managed by a soap context
        virtual witsml20__LogChannelAxis *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__LogChannelAxis); }
      public:
        /// Constructor with default initializations
        witsml20__LogChannelAxis() : AxisStart(), AxisSpacing(), AxisCount(), AxisName(), AxisPropertyKind(), AxisUom(), uid(), soap() { }
        virtual ~witsml20__LogChannelAxis() { }
        /// Friend allocator used by soap_new_witsml20__LogChannelAxis(struct soap*, int)
        friend SOAP_FMAC1 witsml20__LogChannelAxis * SOAP_FMAC2 soap_instantiate_witsml20__LogChannelAxis(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:335 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams (-102)
/* complex XML schema type 'witsml20:DrillingParams': */
class SOAP_CMAC witsml20__DrillingParams {
      public:
        /// Optional element 'witsml20:ETimOpBit' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimOpBit;
        /// Optional element 'witsml20:MdHoleStart' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdHoleStart;
        /// Required element 'witsml20:MdHoleStop' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdHoleStop;
        /// Optional element 'witsml20:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml20:HkldRot' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldRot;
        /// Optional element 'witsml20:OverPull' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *OverPull;
        /// Optional element 'witsml20:SlackOff' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *SlackOff;
        /// Optional element 'witsml20:HkldUp' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldUp;
        /// Optional element 'witsml20:HkldDn' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *HkldDn;
        /// Optional element 'witsml20:TqOnBotAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotAv;
        /// Optional element 'witsml20:TqOnBotMx' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotMx;
        /// Optional element 'witsml20:TqOnBotMn' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOnBotMn;
        /// Optional element 'witsml20:TqOffBotAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqOffBotAv;
        /// Optional element 'witsml20:TqDhAv' of XML schema type 'eml21:MomentOfForceMeasure'
        eml21__MomentOfForceMeasure *TqDhAv;
        /// Optional element 'witsml20:WtAboveJar' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WtAboveJar;
        /// Optional element 'witsml20:WtBelowJar' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WtBelowJar;
        /// Optional element 'witsml20:WtMud' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WtMud;
        /// Optional element 'witsml20:FlowratePumpAv' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpAv;
        /// Optional element 'witsml20:FlowratePumpMx' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpMx;
        /// Optional element 'witsml20:FlowratePumpMn' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowratePumpMn;
        /// Optional element 'witsml20:VelNozzleAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *VelNozzleAv;
        /// Optional element 'witsml20:PowBit' of XML schema type 'eml21:PowerMeasure'
        eml21__PowerMeasure *PowBit;
        /// Optional element 'witsml20:PresDropBit' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresDropBit;
        /// Optional element 'witsml20:CTimHold' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimHold;
        /// Optional element 'witsml20:CTimSteering' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimSteering;
        /// Optional element 'witsml20:CTimDrillRot' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimDrillRot;
        /// Optional element 'witsml20:CTimDrillSlid' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimDrillSlid;
        /// Optional element 'witsml20:CTimCirc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimCirc;
        /// Optional element 'witsml20:CTimReam' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *CTimReam;
        /// Optional element 'witsml20:DistDrillRot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml20:DistDrillSlid' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml20:DistReam' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistReam;
        /// Optional element 'witsml20:DistHold' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistHold;
        /// Optional element 'witsml20:DistSteering' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistSteering;
        /// Optional element 'witsml20:RpmAv' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmAv;
        /// Optional element 'witsml20:RpmMx' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmMx;
        /// Optional element 'witsml20:RpmMn' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmMn;
        /// Optional element 'witsml20:RpmAvDh' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *RpmAvDh;
        /// Optional element 'witsml20:RopAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml20:RopMx' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopMx;
        /// Optional element 'witsml20:RopMn' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopMn;
        /// Optional element 'witsml20:WobAv' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobAv;
        /// Optional element 'witsml20:WobMx' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMx;
        /// Optional element 'witsml20:WobMn' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobMn;
        /// Optional element 'witsml20:WobAvDh' of XML schema type 'eml21:ForceMeasure'
        eml21__ForceMeasure *WobAvDh;
        /// Optional element 'witsml20:ReasonTrip' of XML schema type 'eml21:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml20:ObjectiveBha' of XML schema type 'eml21:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml20:AziTop' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziTop;
        /// Optional element 'witsml20:AziBottom' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziBottom;
        /// Optional element 'witsml20:InclStart' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclStart;
        /// Optional element 'witsml20:InclMx' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclMx;
        /// Optional element 'witsml20:InclMn' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclMn;
        /// Optional element 'witsml20:InclStop' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *InclStop;
        /// Optional element 'witsml20:TempMudDhMx' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempMudDhMx;
        /// Optional element 'witsml20:PresPumpAv' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresPumpAv;
        /// Optional element 'witsml20:FlowrateBit' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowrateBit;
        /// Optional element 'witsml20:MudClass' of XML schema type 'witsml20:MudClass'
        enum witsml20__MudClass *MudClass;
        /// Optional element 'witsml20:MudSubClass' of XML schema type 'witsml20:MudSubClass'
        enum witsml20__MudSubClass *MudSubClass;
        /// Optional element 'witsml20:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillingParams, default initialized and not managed by a soap context
        virtual witsml20__DrillingParams *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillingParams); }
      public:
        /// Constructor with default initializations
        witsml20__DrillingParams() : ETimOpBit(), MdHoleStart(), MdHoleStop(), Tubular(), HkldRot(), OverPull(), SlackOff(), HkldUp(), HkldDn(), TqOnBotAv(), TqOnBotMx(), TqOnBotMn(), TqOffBotAv(), TqDhAv(), WtAboveJar(), WtBelowJar(), WtMud(), FlowratePumpAv(), FlowratePumpMx(), FlowratePumpMn(), VelNozzleAv(), PowBit(), PresDropBit(), CTimHold(), CTimSteering(), CTimDrillRot(), CTimDrillSlid(), CTimCirc(), CTimReam(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), RpmAv(), RpmMx(), RpmMn(), RpmAvDh(), RopAv(), RopMx(), RopMn(), WobAv(), WobMx(), WobMn(), WobAvDh(), ReasonTrip(), ObjectiveBha(), AziTop(), AziBottom(), InclStart(), InclMx(), InclMn(), InclStop(), TempMudDhMx(), PresPumpAv(), FlowrateBit(), MudClass(), MudSubClass(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillingParams() { }
        /// Friend allocator used by soap_new_witsml20__DrillingParams(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillingParams * SOAP_FMAC2 soap_instantiate_witsml20__DrillingParams(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:337 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid (-103)
/* complex XML schema type 'witsml20:Fluid': */
class SOAP_CMAC witsml20__Fluid {
      public:
        /// Optional element 'witsml20:Type' of XML schema type 'eml21:String64'
        std::string *Type;
        /// Optional element 'witsml20:LocationSample' of XML schema type 'eml21:String64'
        std::string *LocationSample;
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:Ecd' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Ecd;
        /// Optional element 'witsml20:KickToleranceVolume' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *KickToleranceVolume;
        /// Optional element 'witsml20:KickToleranceIntensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *KickToleranceIntensity;
        /// Optional element 'witsml20:TempFlowLine' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempFlowLine;
        /// Optional element 'witsml20:PresBopRating' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBopRating;
        /// Optional element 'witsml20:MudClass' of XML schema type 'witsml20:MudClass'
        enum witsml20__MudClass *MudClass;
        /// Optional element 'witsml20:Density' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml20:VisFunnel' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *VisFunnel;
        /// Optional element 'witsml20:TempVis' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempVis;
        /// Optional element 'witsml20:Pv' of XML schema type 'eml21:DynamicViscosityMeasure'
        eml21__DynamicViscosityMeasure *Pv;
        /// Optional element 'witsml20:Yp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Yp;
        /// Optional element 'witsml20:Gel10Sec' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Sec;
        /// Optional element 'witsml20:Gel10Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel10Min;
        /// Optional element 'witsml20:Gel30Min' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Gel30Min;
        /// Optional element 'witsml20:FilterCakeLtlp' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FilterCakeLtlp;
        /// Optional element 'witsml20:FiltrateLtlp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FiltrateLtlp;
        /// Optional element 'witsml20:TempHthp' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempHthp;
        /// Optional element 'witsml20:PresHthp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresHthp;
        /// Optional element 'witsml20:FiltrateHthp' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *FiltrateHthp;
        /// Optional element 'witsml20:FilterCakeHthp' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *FilterCakeHthp;
        /// Optional element 'witsml20:SolidsPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsPc;
        /// Optional element 'witsml20:WaterPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *WaterPc;
        /// Optional element 'witsml20:OilPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *OilPc;
        /// Optional element 'witsml20:SandPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SandPc;
        /// Optional element 'witsml20:SolidsLowGravPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsLowGravPc;
        /// Optional element 'witsml20:SolidsLowGrav' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SolidsLowGrav;
        /// Optional element 'witsml20:SolidsCalcPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsCalcPc;
        /// Optional element 'witsml20:BaritePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *BaritePc;
        /// Optional element 'witsml20:Lcm' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Lcm;
        /// Optional element 'witsml20:Mbt' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Mbt;
        /// Optional element 'witsml20:Ph' of XML schema type 'xsd:double'
        double *Ph;
        /// Optional element 'witsml20:TempPh' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempPh;
        /// Optional element 'witsml20:Pm' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Pm;
        /// Optional element 'witsml20:PmFiltrate' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *PmFiltrate;
        /// Optional element 'witsml20:Mf' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *Mf;
        /// Optional element 'witsml20:AlkalinityP1' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *AlkalinityP1;
        /// Optional element 'witsml20:AlkalinityP2' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *AlkalinityP2;
        /// Optional element 'witsml20:Chloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Chloride;
        /// Optional element 'witsml20:Calcium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Calcium;
        /// Optional element 'witsml20:Magnesium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Magnesium;
        /// Optional element 'witsml20:Potassium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Potassium;
        /// Optional element 'witsml20:BrinePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *BrinePc;
        /// Optional element 'witsml20:BrineDensity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *BrineDensity;
        /// Optional element 'witsml20:Lime' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Lime;
        /// Optional element 'witsml20:ElectStab' of XML schema type 'eml21:ElectricPotentialDifferenceMeasure'
        eml21__ElectricPotentialDifferenceMeasure *ElectStab;
        /// Optional element 'witsml20:CalciumChloridePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *CalciumChloridePc;
        /// Optional element 'witsml20:CalciumChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *CalciumChloride;
        /// Optional element 'witsml20:Company' of XML schema type 'eml21:String64'
        std::string *Company;
        /// Optional element 'witsml20:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml20:Asg' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *Asg;
        /// Optional element 'witsml20:SolidsHiGravPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolidsHiGravPc;
        /// Optional element 'witsml20:SolidsHiGrav' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SolidsHiGrav;
        /// Optional element 'witsml20:Polymer' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Polymer;
        /// Optional element 'witsml20:PolyType' of XML schema type 'eml21:String64'
        std::string *PolyType;
        /// Optional element 'witsml20:SolCorPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SolCorPc;
        /// Optional element 'witsml20:OilCtg' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *OilCtg;
        /// Optional element 'witsml20:OilCtgDry' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *OilCtgDry;
        /// Optional element 'witsml20:HardnessCa' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *HardnessCa;
        /// Optional element 'witsml20:Sulfide' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Sulfide;
        /// Optional element 'witsml20:AverageCuttingSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *AverageCuttingSize;
        /// Optional element 'witsml20:Carbonate' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Carbonate;
        /// Optional element 'witsml20:Iron' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Iron;
        /// Optional element 'witsml20:MetalRecovered' of XML schema type 'eml21:MassMeasure'
        eml21__MassMeasure *MetalRecovered;
        /// Optional element 'witsml20:Turbidity' of XML schema type 'xsd:double'
        double *Turbidity;
        /// Optional element 'witsml20:OilGrease' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *OilGrease;
        /// Optional element 'witsml20:Salt' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *Salt;
        /// Optional element 'witsml20:SaltPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SaltPc;
        /// Optional element 'witsml20:Tct' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Tct;
        /// Optional element 'witsml20:WaterPhaseSalinity' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WaterPhaseSalinity;
        /// Optional element 'witsml20:WholeMudCalcium' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WholeMudCalcium;
        /// Optional element 'witsml20:WholeMudChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WholeMudChloride;
        /// Optional element 'witsml20:ZincOxide' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *ZincOxide;
        /// Optional element 'witsml20:SodiumChloride' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *SodiumChloride;
        /// Optional element 'witsml20:SodiumChloridePc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *SodiumChloridePc;
        /// Optional element 'witsml20:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Rheometer' of XML schema type 'witsml20:Rheometer'
        std::vector<witsml20__Rheometer *> Rheometer;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Fluid, default initialized and not managed by a soap context
        virtual witsml20__Fluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Fluid); }
      public:
        /// Constructor with default initializations
        witsml20__Fluid() : Type(), LocationSample(), DTim(), Md(), Tvd(), Ecd(), KickToleranceVolume(), KickToleranceIntensity(), TempFlowLine(), PresBopRating(), MudClass(), Density(), VisFunnel(), TempVis(), Pv(), Yp(), Gel10Sec(), Gel10Min(), Gel30Min(), FilterCakeLtlp(), FiltrateLtlp(), TempHthp(), PresHthp(), FiltrateHthp(), FilterCakeHthp(), SolidsPc(), WaterPc(), OilPc(), SandPc(), SolidsLowGravPc(), SolidsLowGrav(), SolidsCalcPc(), BaritePc(), Lcm(), Mbt(), Ph(), TempPh(), Pm(), PmFiltrate(), Mf(), AlkalinityP1(), AlkalinityP2(), Chloride(), Calcium(), Magnesium(), Potassium(), BrinePc(), BrineDensity(), Lime(), ElectStab(), CalciumChloridePc(), CalciumChloride(), Company(), Engineer(), Asg(), SolidsHiGravPc(), SolidsHiGrav(), Polymer(), PolyType(), SolCorPc(), OilCtg(), OilCtgDry(), HardnessCa(), Sulfide(), AverageCuttingSize(), Carbonate(), Iron(), MetalRecovered(), Turbidity(), OilGrease(), Salt(), SaltPc(), Tct(), WaterPhaseSalinity(), WholeMudCalcium(), WholeMudChloride(), ZincOxide(), SodiumChloride(), SodiumChloridePc(), Comments(), ExtensionNameValue(), Rheometer(), uid(), soap() { }
        virtual ~witsml20__Fluid() { }
        /// Friend allocator used by soap_new_witsml20__Fluid(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Fluid * SOAP_FMAC2 soap_instantiate_witsml20__Fluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity (-104)
/* complex XML schema type 'witsml20:RheometerViscosity': */
class SOAP_CMAC witsml20__RheometerViscosity {
      public:
        /// Required element 'witsml20:Speed' of XML schema type 'eml21:AngularVelocityMeasure'
        eml21__AngularVelocityMeasure *Speed;
        /// Required element 'witsml20:Viscosity' of XML schema type 'xsd:double'
        double Viscosity;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RheometerViscosity, default initialized and not managed by a soap context
        virtual witsml20__RheometerViscosity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RheometerViscosity); }
      public:
        /// Constructor with default initializations
        witsml20__RheometerViscosity() : Speed(), Viscosity(), uid(), soap() { }
        virtual ~witsml20__RheometerViscosity() { }
        /// Friend allocator used by soap_new_witsml20__RheometerViscosity(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RheometerViscosity * SOAP_FMAC2 soap_instantiate_witsml20__RheometerViscosity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo (-107)
/* complex XML schema type 'witsml20:DrillReportWellboreInfo': */
class SOAP_CMAC witsml20__DrillReportWellboreInfo {
      public:
        /// Optional element 'witsml20:DTimSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimSpud;
        /// Optional element 'witsml20:DTimPreSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPreSpud;
        /// Optional element 'witsml20:DateDrillComplete' of XML schema type 'xsd:date'
        std::string *DateDrillComplete;
        /// Optional element 'witsml20:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml20:DrillContractor' of XML schema type 'eml21:String64'
        std::string *DrillContractor;
        /// Optional element 'witsml20:RigAlias' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> RigAlias;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportWellboreInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportWellboreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportWellboreInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportWellboreInfo() : DTimSpud(), DTimPreSpud(), DateDrillComplete(), Operator(), DrillContractor(), RigAlias(), soap() { }
        virtual ~witsml20__DrillReportWellboreInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportWellboreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportWellboreInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportWellboreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:347 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo (-108)
/* complex XML schema type 'witsml20:DrillReportStatusInfo': */
class SOAP_CMAC witsml20__DrillReportStatusInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:MdPlugTop' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdPlugTop;
        /// Optional element 'witsml20:DiaHole' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHole;
        /// Optional element 'witsml20:MdDiaHoleStart' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdDiaHoleStart;
        /// Optional element 'witsml20:DiaPilot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaPilot;
        /// Optional element 'witsml20:MdDiaPilotPlan' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdDiaPilotPlan;
        /// Optional element 'witsml20:TvdDiaPilotPlan' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdDiaPilotPlan;
        /// Optional element 'witsml20:TypeWellbore' of XML schema type 'witsml20:WellboreType'
        enum witsml20__WellboreType *TypeWellbore;
        /// Optional element 'witsml20:MdKickoff' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml20:TvdKickoff' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *TvdKickoff;
        /// Optional element 'witsml20:StrengthForm' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *StrengthForm;
        /// Optional element 'witsml20:MdStrengthForm' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdStrengthForm;
        /// Optional element 'witsml20:TvdStrengthForm' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdStrengthForm;
        /// Optional element 'witsml20:DiaCsgLast' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml20:MdCsgLast' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml20:TvdCsgLast' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdCsgLast;
        /// Optional element 'witsml20:PresTestType' of XML schema type 'witsml20:PresTestType'
        enum witsml20__PresTestType *PresTestType;
        /// Optional element 'witsml20:MdPlanned' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml20:DistDrill' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrill;
        /// Optional element 'witsml20:Sum24Hr' of XML schema type 'eml21:String2000'
        std::string *Sum24Hr;
        /// Optional element 'witsml20:Forecast24Hr' of XML schema type 'eml21:String2000'
        std::string *Forecast24Hr;
        /// Optional element 'witsml20:RopCurrent' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopCurrent;
        /// Optional element 'witsml20:Rig' of XML schema type 'eml21:String64'
        std::string *Rig;
        /// Optional element 'witsml20:ETimStart' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimStart;
        /// Optional element 'witsml20:ETimSpud' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSpud;
        /// Optional element 'witsml20:ETimLoc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLoc;
        /// Optional element 'witsml20:ETimDrill' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrill;
        /// Optional element 'witsml20:RopAv' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml20:Supervisor' of XML schema type 'eml21:String64'
        std::string *Supervisor;
        /// Optional element 'witsml20:Engineer' of XML schema type 'eml21:String64'
        std::string *Engineer;
        /// Optional element 'witsml20:Geologist' of XML schema type 'eml21:String64'
        std::string *Geologist;
        /// Optional element 'witsml20:ETimDrillRot' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillRot;
        /// Optional element 'witsml20:ETimDrillSlid' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimDrillSlid;
        /// Optional element 'witsml20:ETimCirc' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimCirc;
        /// Optional element 'witsml20:ETimReam' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimReam;
        /// Optional element 'witsml20:ETimHold' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimHold;
        /// Optional element 'witsml20:ETimSteering' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimSteering;
        /// Optional element 'witsml20:DistDrillRot' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml20:DistDrillSlid' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml20:DistReam' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistReam;
        /// Optional element 'witsml20:DistHold' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistHold;
        /// Optional element 'witsml20:DistSteering' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DistSteering;
        /// Optional element 'witsml20:NumPob' of XML schema type 'xsd:int'
        int *NumPob;
        /// Optional element 'witsml20:NumContract' of XML schema type 'xsd:int'
        int *NumContract;
        /// Optional element 'witsml20:NumOperator' of XML schema type 'xsd:int'
        int *NumOperator;
        /// Optional element 'witsml20:NumService' of XML schema type 'xsd:int'
        int *NumService;
        /// Optional element 'witsml20:NumAFE' of XML schema type 'eml21:String64'
        std::string *NumAFE;
        /// Optional element 'witsml20:ConditionHole' of XML schema type 'eml21:String64'
        std::string *ConditionHole;
        /// Optional element 'witsml20:TvdLot' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdLot;
        /// Optional element 'witsml20:PresLotEmw' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PresLotEmw;
        /// Optional element 'witsml20:PresKickTol' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresKickTol;
        /// Optional element 'witsml20:VolKickTol' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolKickTol;
        /// Optional element 'witsml20:Maasp' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Maasp;
        /// Optional element 'witsml20:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ParentWellbore' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ParentWellbore;
        /// Optional element 'witsml20:ElevKelly' of XML schema type 'witsml20:WellElevationCoord'
        witsml20__WellElevationCoord *ElevKelly;
        /// Optional element 'witsml20:CostDay' of XML schema type 'witsml20:Cost'
        witsml20__Cost *CostDay;
        /// Optional element 'witsml20:CostDayMud' of XML schema type 'witsml20:Cost'
        witsml20__Cost *CostDayMud;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportStatusInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportStatusInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportStatusInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportStatusInfo() : DTim(), Md(), Tvd(), MdPlugTop(), DiaHole(), MdDiaHoleStart(), DiaPilot(), MdDiaPilotPlan(), TvdDiaPilotPlan(), TypeWellbore(), MdKickoff(), TvdKickoff(), StrengthForm(), MdStrengthForm(), TvdStrengthForm(), DiaCsgLast(), MdCsgLast(), TvdCsgLast(), PresTestType(), MdPlanned(), DistDrill(), Sum24Hr(), Forecast24Hr(), RopCurrent(), Rig(), ETimStart(), ETimSpud(), ETimLoc(), ETimDrill(), RopAv(), Supervisor(), Engineer(), Geologist(), ETimDrillRot(), ETimDrillSlid(), ETimCirc(), ETimReam(), ETimHold(), ETimSteering(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), NumPob(), NumContract(), NumOperator(), NumService(), NumAFE(), ConditionHole(), TvdLot(), PresLotEmw(), PresKickTol(), VolKickTol(), Maasp(), Tubular(), ExtensionNameValue(), ParentWellbore(), ElevKelly(), CostDay(), CostDayMud(), uid(), soap() { }
        virtual ~witsml20__DrillReportStatusInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportStatusInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportStatusInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportStatusInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:349 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer (-109)
/* complex XML schema type 'witsml20:Rheometer': */
class SOAP_CMAC witsml20__Rheometer {
      public:
        /// Optional element 'witsml20:TempRheom' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempRheom;
        /// Optional element 'witsml20:PresRheom' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresRheom;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Viscosity' of XML schema type 'witsml20:RheometerViscosity'
        std::vector<witsml20__RheometerViscosity *> Viscosity;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Rheometer, default initialized and not managed by a soap context
        virtual witsml20__Rheometer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Rheometer); }
      public:
        /// Constructor with default initializations
        witsml20__Rheometer() : TempRheom(), PresRheom(), ExtensionNameValue(), Viscosity(), uid(), soap() { }
        virtual ~witsml20__Rheometer() { }
        /// Friend allocator used by soap_new_witsml20__Rheometer(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Rheometer * SOAP_FMAC2 soap_instantiate_witsml20__Rheometer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:351 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure (-110)
/* complex XML schema type 'witsml20:DrillReportPorePressure': */
class SOAP_CMAC witsml20__DrillReportPorePressure {
      public:
        /// Required element 'witsml20:ReadingKind' of XML schema type 'witsml20:ReadingKind'
        enum witsml20__ReadingKind ReadingKind;
        /// Required element 'witsml20:EquivalentMudWeight' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *EquivalentMudWeight;
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportPorePressure, default initialized and not managed by a soap context
        virtual witsml20__DrillReportPorePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportPorePressure); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportPorePressure() : ReadingKind(), EquivalentMudWeight(), DTim(), Md(), Tvd(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportPorePressure() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportPorePressure(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportPorePressure * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportPorePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:355 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation (-112)
/* complex XML schema type 'witsml20:DrillReportSurveyStation': */
class SOAP_CMAC witsml20__DrillReportSurveyStation {
      public:
        /// Required element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Required element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:Incl' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml20:Azi' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml20:VertSect' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *VertSect;
        /// Optional element 'witsml20:Dls' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Location' of XML schema type 'witsml20:AbstractWellLocation'
        std::vector<witsml20__AbstractWellLocation *> Location;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportSurveyStation, default initialized and not managed by a soap context
        virtual witsml20__DrillReportSurveyStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportSurveyStation); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportSurveyStation() : DTim(), Md(), Tvd(), Incl(), Azi(), VertSect(), Dls(), ExtensionNameValue(), Location(), uid(), soap() { }
        virtual ~witsml20__DrillReportSurveyStation() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportSurveyStation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportSurveyStation * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportSurveyStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:357 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity (-113)
/* complex XML schema type 'witsml20:DrillActivity': */
class SOAP_CMAC witsml20__DrillActivity {
      public:
        /// Optional element 'witsml20:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml20:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimEnd;
        /// Optional element 'witsml20:Duration' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *Duration;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:Phase' of XML schema type 'eml21:String64'
        std::string *Phase;
        /// Optional element 'witsml20:ActivityCode' of XML schema type 'witsml20:DrillActivityCode'
        enum witsml20__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml20:DetailActivity' of XML schema type 'eml21:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml20:TypeActivityClass' of XML schema type 'witsml20:DrillActivityClassType'
        enum witsml20__DrillActivityClassType *TypeActivityClass;
        /// Optional element 'witsml20:ActivityMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ActivityMdInterval;
        /// Optional element 'witsml20:ActivityTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *ActivityTvdInterval;
        /// Optional element 'witsml20:BitMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *BitMdInterval;
        /// Optional element 'witsml20:State' of XML schema type 'eml21:String64'
        std::string *State;
        /// Optional element 'witsml20:StateDetailActivity' of XML schema type 'witsml20:StateDetailActivity'
        enum witsml20__StateDetailActivity *StateDetailActivity;
        /// Optional element 'witsml20:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml20:Tubular' of XML schema type 'eml21:String64'
        std::string *Tubular;
        /// Optional element 'witsml20:Optimum' of XML schema type 'xsd:boolean'
        bool *Optimum;
        /// Optional element 'witsml20:Productive' of XML schema type 'xsd:boolean'
        bool *Productive;
        /// Optional element 'witsml20:ItemState' of XML schema type 'witsml20:ItemState'
        enum witsml20__ItemState *ItemState;
        /// Optional element 'witsml20:Comments' of XML schema type 'eml21:String2000'
        std::string *Comments;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ProprietaryCode' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ProprietaryCode;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillActivity, default initialized and not managed by a soap context
        virtual witsml20__DrillActivity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillActivity); }
      public:
        /// Constructor with default initializations
        witsml20__DrillActivity() : DTimStart(), DTimEnd(), Duration(), Md(), Tvd(), Phase(), ActivityCode(), DetailActivity(), TypeActivityClass(), ActivityMdInterval(), ActivityTvdInterval(), BitMdInterval(), State(), StateDetailActivity(), Operator(), Tubular(), Optimum(), Productive(), ItemState(), Comments(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml20__DrillActivity() { }
        /// Friend allocator used by soap_new_witsml20__DrillActivity(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillActivity * SOAP_FMAC2 soap_instantiate_witsml20__DrillActivity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:359 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo (-114)
/* complex XML schema type 'witsml20:DrillReportLogInfo': */
class SOAP_CMAC witsml20__DrillReportLogInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml20:ServiceCompany' of XML schema type 'eml21:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml20:LoggedMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *LoggedMdInterval;
        /// Optional element 'witsml20:LoggedTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *LoggedTvdInterval;
        /// Optional element 'witsml20:Tool' of XML schema type 'eml21:String64'
        std::string *Tool;
        /// Optional element 'witsml20:MdTempTool' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdTempTool;
        /// Optional element 'witsml20:TvdTempTool' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdTempTool;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:BottomHoleTemperature' of XML schema type 'witsml20:AbstractBottomHoleTemperature'
        witsml20__AbstractBottomHoleTemperature *BottomHoleTemperature;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportLogInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportLogInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportLogInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportLogInfo() : DTim(), RunNumber(), ServiceCompany(), LoggedMdInterval(), LoggedTvdInterval(), Tool(), MdTempTool(), TvdTempTool(), ExtensionNameValue(), BottomHoleTemperature(), uid(), soap() { }
        virtual ~witsml20__DrillReportLogInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportLogInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportLogInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportLogInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:361 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo (-115)
/* complex XML schema type 'witsml20:DrillReportCoreInfo': */
class SOAP_CMAC witsml20__DrillReportCoreInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:CoreNumber' of XML schema type 'eml21:String64'
        std::string *CoreNumber;
        /// Optional element 'witsml20:CoredMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *CoredMdInterval;
        /// Optional element 'witsml20:CoredTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *CoredTvdInterval;
        /// Optional element 'witsml20:LenRecovered' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenRecovered;
        /// Optional element 'witsml20:RecoverPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *RecoverPc;
        /// Optional element 'witsml20:LenBarrel' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *LenBarrel;
        /// Optional element 'witsml20:InnerBarrelType' of XML schema type 'witsml20:InnerBarrelType'
        enum witsml20__InnerBarrelType *InnerBarrelType;
        /// Optional element 'witsml20:CoreDescription' of XML schema type 'eml21:String2000'
        std::string *CoreDescription;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportCoreInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportCoreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportCoreInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportCoreInfo() : DTim(), CoreNumber(), CoredMdInterval(), CoredTvdInterval(), LenRecovered(), RecoverPc(), LenBarrel(), InnerBarrelType(), CoreDescription(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportCoreInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportCoreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportCoreInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportCoreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:363 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo (-116)
/* complex XML schema type 'witsml20:DrillReportWellTestInfo': */
class SOAP_CMAC witsml20__DrillReportWellTestInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:TestType' of XML schema type 'witsml20:WellTestType'
        enum witsml20__WellTestType *TestType;
        /// Optional element 'witsml20:TestNumber' of XML schema type 'xsd:int'
        int *TestNumber;
        /// Optional element 'witsml20:TestMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *TestMdInterval;
        /// Optional element 'witsml20:TestTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *TestTvdInterval;
        /// Optional element 'witsml20:ChokeOrificeSize' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *ChokeOrificeSize;
        /// Optional element 'witsml20:DensityOil' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityOil;
        /// Optional element 'witsml20:DensityWater' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityWater;
        /// Optional element 'witsml20:DensityGas' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityGas;
        /// Optional element 'witsml20:FlowRateOil' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateOil;
        /// Optional element 'witsml20:FlowRateWater' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateWater;
        /// Optional element 'witsml20:FlowRateGas' of XML schema type 'eml21:VolumePerTimeMeasure'
        eml21__VolumePerTimeMeasure *FlowRateGas;
        /// Optional element 'witsml20:PresShutIn' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutIn;
        /// Optional element 'witsml20:PresFlowing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresFlowing;
        /// Optional element 'witsml20:PresBottom' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresBottom;
        /// Optional element 'witsml20:GasOilRatio' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasOilRatio;
        /// Optional element 'witsml20:WaterOilRatio' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *WaterOilRatio;
        /// Optional element 'witsml20:Chloride' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *Chloride;
        /// Optional element 'witsml20:CarbonDioxide' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *CarbonDioxide;
        /// Optional element 'witsml20:HydrogenSulfide' of XML schema type 'eml21:MassPerMassMeasure'
        eml21__MassPerMassMeasure *HydrogenSulfide;
        /// Optional element 'witsml20:VolOilTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOilTotal;
        /// Optional element 'witsml20:VolGasTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolGasTotal;
        /// Optional element 'witsml20:VolWaterTotal' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolWaterTotal;
        /// Optional element 'witsml20:VolOilStored' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolOilStored;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportWellTestInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportWellTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportWellTestInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportWellTestInfo() : DTim(), TestType(), TestNumber(), TestMdInterval(), TestTvdInterval(), ChokeOrificeSize(), DensityOil(), DensityWater(), DensityGas(), FlowRateOil(), FlowRateWater(), FlowRateGas(), PresShutIn(), PresFlowing(), PresBottom(), GasOilRatio(), WaterOilRatio(), Chloride(), CarbonDioxide(), HydrogenSulfide(), VolOilTotal(), VolGasTotal(), VolWaterTotal(), VolOilStored(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportWellTestInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportWellTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportWellTestInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportWellTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:365 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo (-117)
/* complex XML schema type 'witsml20:DrillReportFormTestInfo': */
class SOAP_CMAC witsml20__DrillReportFormTestInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:PresPore' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresPore;
        /// Optional element 'witsml20:GoodSeal' of XML schema type 'xsd:boolean'
        bool *GoodSeal;
        /// Optional element 'witsml20:MdSample' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdSample;
        /// Optional element 'witsml20:DominateComponent' of XML schema type 'eml21:String64'
        std::string *DominateComponent;
        /// Optional element 'witsml20:DensityHC' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensityHC;
        /// Optional element 'witsml20:VolumeSample' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolumeSample;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportFormTestInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportFormTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportFormTestInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportFormTestInfo() : DTim(), Md(), Tvd(), PresPore(), GoodSeal(), MdSample(), DominateComponent(), DensityHC(), VolumeSample(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportFormTestInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportFormTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportFormTestInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportFormTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:367 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo (-118)
/* complex XML schema type 'witsml20:DrillReportLithShowInfo': */
class SOAP_CMAC witsml20__DrillReportLithShowInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:ShowMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *ShowMdInterval;
        /// Optional element 'witsml20:ShowTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *ShowTvdInterval;
        /// Optional element 'witsml20:Show' of XML schema type 'eml21:String2000'
        std::string *Show;
        /// Optional element 'witsml20:Lithology' of XML schema type 'eml21:String2000'
        std::string *Lithology;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportLithShowInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportLithShowInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportLithShowInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportLithShowInfo() : DTim(), ShowMdInterval(), ShowTvdInterval(), Show(), Lithology(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportLithShowInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportLithShowInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportLithShowInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportLithShowInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:369 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo (-119)
/* complex XML schema type 'witsml20:DrillReportEquipFailureInfo': */
class SOAP_CMAC witsml20__DrillReportEquipFailureInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:EquipClass' of XML schema type 'eml21:String64'
        std::string *EquipClass;
        /// Optional element 'witsml20:ETimMissProduction' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimMissProduction;
        /// Optional element 'witsml20:DTimRepair' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRepair;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportEquipFailureInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportEquipFailureInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportEquipFailureInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportEquipFailureInfo() : DTim(), Md(), Tvd(), EquipClass(), ETimMissProduction(), DTimRepair(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportEquipFailureInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportEquipFailureInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportEquipFailureInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportEquipFailureInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:371 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo (-120)
/* complex XML schema type 'witsml20:DrillReportControlIncidentInfo': */
class SOAP_CMAC witsml20__DrillReportControlIncidentInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:MdInflow' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdInflow;
        /// Optional element 'witsml20:TvdInflow' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdInflow;
        /// Optional element 'witsml20:Phase' of XML schema type 'eml21:String64'
        std::string *Phase;
        /// Optional element 'witsml20:ActivityCode' of XML schema type 'witsml20:DrillActivityCode'
        enum witsml20__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml20:DetailActivity' of XML schema type 'eml21:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml20:ETimLost' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *ETimLost;
        /// Optional element 'witsml20:DTimRegained' of XML schema type 'eml21:TimeStamp'
        std::string *DTimRegained;
        /// Optional element 'witsml20:DiaBit' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaBit;
        /// Optional element 'witsml20:MdBit' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml20:WtMud' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *WtMud;
        /// Required element 'witsml20:PorePressure' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *PorePressure;
        /// Optional element 'witsml20:DiaCsgLast' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml20:MdCsgLast' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml20:VolMudGained' of XML schema type 'eml21:VolumeMeasure'
        eml21__VolumeMeasure *VolMudGained;
        /// Optional element 'witsml20:PresShutInCasing' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutInCasing;
        /// Optional element 'witsml20:PresShutInDrill' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresShutInDrill;
        /// Optional element 'witsml20:IncidentType' of XML schema type 'witsml20:WellControlIncidentType'
        enum witsml20__WellControlIncidentType *IncidentType;
        /// Optional element 'witsml20:KillingType' of XML schema type 'witsml20:WellKillingProcedureType'
        enum witsml20__WellKillingProcedureType *KillingType;
        /// Optional element 'witsml20:Formation' of XML schema type 'eml21:String2000'
        std::string *Formation;
        /// Optional element 'witsml20:TempBottom' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *TempBottom;
        /// Optional element 'witsml20:PresMaxChoke' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *PresMaxChoke;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:ProprietaryCode' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> ProprietaryCode;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportControlIncidentInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportControlIncidentInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportControlIncidentInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportControlIncidentInfo() : DTim(), MdInflow(), TvdInflow(), Phase(), ActivityCode(), DetailActivity(), ETimLost(), DTimRegained(), DiaBit(), MdBit(), WtMud(), PorePressure(), DiaCsgLast(), MdCsgLast(), VolMudGained(), PresShutInCasing(), PresShutInDrill(), IncidentType(), KillingType(), Formation(), TempBottom(), PresMaxChoke(), Description(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml20__DrillReportControlIncidentInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportControlIncidentInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportControlIncidentInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportControlIncidentInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:373 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo (-121)
/* complex XML schema type 'witsml20:DrillReportStratInfo': */
class SOAP_CMAC witsml20__DrillReportStratInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:MdTop' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdTop;
        /// Optional element 'witsml20:TvdTop' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdTop;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportStratInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportStratInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportStratInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportStratInfo() : DTim(), MdTop(), TvdTop(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportStratInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportStratInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportStratInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportStratInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:375 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo (-122)
/* complex XML schema type 'witsml20:DrillReportPerfInfo': */
class SOAP_CMAC witsml20__DrillReportPerfInfo {
      public:
        /// Optional element 'witsml20:DTimOpen' of XML schema type 'eml21:TimeStamp'
        std::string *DTimOpen;
        /// Optional element 'witsml20:DTimClose' of XML schema type 'eml21:TimeStamp'
        std::string *DTimClose;
        /// Optional element 'witsml20:PerforationMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml20:PerforationTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportPerfInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportPerfInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportPerfInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportPerfInfo() : DTimOpen(), DTimClose(), PerforationMdInterval(), PerforationTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportPerfInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportPerfInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportPerfInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportPerfInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:377 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo (-123)
/* complex XML schema type 'witsml20:DrillReportGasReadingInfo': */
class SOAP_CMAC witsml20__DrillReportGasReadingInfo {
      public:
        /// Optional element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'witsml20:ReadingType' of XML schema type 'witsml20:GasPeakType'
        enum witsml20__GasPeakType *ReadingType;
        /// Optional element 'witsml20:GasReadingMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *GasReadingMdInterval;
        /// Optional element 'witsml20:GasReadingTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *GasReadingTvdInterval;
        /// Optional element 'witsml20:GasHigh' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasHigh;
        /// Optional element 'witsml20:GasLow' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *GasLow;
        /// Optional element 'witsml20:Meth' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Meth;
        /// Optional element 'witsml20:Eth' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Eth;
        /// Optional element 'witsml20:Prop' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Prop;
        /// Optional element 'witsml20:Ibut' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Ibut;
        /// Optional element 'witsml20:Nbut' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Nbut;
        /// Optional element 'witsml20:Ipent' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Ipent;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReportGasReadingInfo, default initialized and not managed by a soap context
        virtual witsml20__DrillReportGasReadingInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReportGasReadingInfo); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReportGasReadingInfo() : DTim(), ReadingType(), GasReadingMdInterval(), GasReadingTvdInterval(), GasHigh(), GasLow(), Meth(), Eth(), Prop(), Ibut(), Nbut(), Ipent(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__DrillReportGasReadingInfo() { }
        /// Friend allocator used by soap_new_witsml20__DrillReportGasReadingInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReportGasReadingInfo * SOAP_FMAC2 soap_instantiate_witsml20__DrillReportGasReadingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:25288 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml20__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml20__AbstractBottomHoleTemperature_sequence (-1279)
/* Wrapper: */
struct SOAP_CMAC __witsml20__AbstractBottomHoleTemperature_sequence {
      public:
        /** Required element 'witsml20:BottomHoleTemperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure' */
        eml21__ThermodynamicTemperatureMeasure *BottomHoleTemperature;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml20__AbstractBottomHoleTemperature_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1___witsml20__AbstractBottomHoleTemperature_sequence; }
        /** Constructor with member initializations */
        __witsml20__AbstractBottomHoleTemperature_sequence() : BottomHoleTemperature() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __witsml20__AbstractBottomHoleTemperature_sequence * SOAP_FMAC2 soap_instantiate___witsml20__AbstractBottomHoleTemperature_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:379 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature (-124)
/* complex XML schema type 'witsml20:AbstractBottomHoleTemperature': */
class SOAP_CMAC witsml20__AbstractBottomHoleTemperature {
      public:
        struct __witsml20__AbstractBottomHoleTemperature_sequence *__AbstractBottomHoleTemperature_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__AbstractBottomHoleTemperature, default initialized and not managed by a soap context
        virtual witsml20__AbstractBottomHoleTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__AbstractBottomHoleTemperature); }
      public:
        /// Constructor with default initializations
        witsml20__AbstractBottomHoleTemperature() : __AbstractBottomHoleTemperature_sequence(), soap() { }
        virtual ~witsml20__AbstractBottomHoleTemperature() { }
        /// Friend allocator used by soap_new_witsml20__AbstractBottomHoleTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml20__AbstractBottomHoleTemperature * SOAP_FMAC2 soap_instantiate_witsml20__AbstractBottomHoleTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:389 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow (-129)
/* complex XML schema type 'witsml20:CuttingsIntervalShow': */
class SOAP_CMAC witsml20__CuttingsIntervalShow {
      public:
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:ShowRating' of XML schema type 'witsml20:ShowRating'
        enum witsml20__ShowRating *ShowRating;
        /// Optional element 'witsml20:StainColor' of XML schema type 'eml21:String64'
        std::string *StainColor;
        /// Optional element 'witsml20:StainDistr' of XML schema type 'eml21:String64'
        std::string *StainDistr;
        /// Optional element 'witsml20:StainPc' of XML schema type 'eml21:AreaPerAreaMeasure'
        eml21__AreaPerAreaMeasure *StainPc;
        /// Optional element 'witsml20:CutSpeed' of XML schema type 'witsml20:ShowSpeed'
        enum witsml20__ShowSpeed *CutSpeed;
        /// Optional element 'witsml20:CutColor' of XML schema type 'eml21:String64'
        std::string *CutColor;
        /// Optional element 'witsml20:CutStrength' of XML schema type 'eml21:String64'
        std::string *CutStrength;
        /// Optional element 'witsml20:CutForm' of XML schema type 'witsml20:ShowLevel'
        enum witsml20__ShowLevel *CutForm;
        /// Optional element 'witsml20:CutLevel' of XML schema type 'eml21:String64'
        std::string *CutLevel;
        /// Optional element 'witsml20:CutFlorForm' of XML schema type 'witsml20:ShowLevel'
        enum witsml20__ShowLevel *CutFlorForm;
        /// Optional element 'witsml20:CutFlorColor' of XML schema type 'eml21:String64'
        std::string *CutFlorColor;
        /// Optional element 'witsml20:CutFlorStrength' of XML schema type 'eml21:String64'
        std::string *CutFlorStrength;
        /// Optional element 'witsml20:CutFlorSpeed' of XML schema type 'witsml20:ShowSpeed'
        enum witsml20__ShowSpeed *CutFlorSpeed;
        /// Optional element 'witsml20:CutFlorLevel' of XML schema type 'witsml20:ShowFluorescence'
        enum witsml20__ShowFluorescence *CutFlorLevel;
        /// Optional element 'witsml20:NatFlorColor' of XML schema type 'eml21:String64'
        std::string *NatFlorColor;
        /// Optional element 'witsml20:NatFlorPc' of XML schema type 'eml21:AreaPerAreaMeasure'
        eml21__AreaPerAreaMeasure *NatFlorPc;
        /// Optional element 'witsml20:NatFlorLevel' of XML schema type 'witsml20:ShowFluorescence'
        enum witsml20__ShowFluorescence *NatFlorLevel;
        /// Optional element 'witsml20:NatFlorDesc' of XML schema type 'eml21:String64'
        std::string *NatFlorDesc;
        /// Optional element 'witsml20:ResidueColor' of XML schema type 'eml21:String64'
        std::string *ResidueColor;
        /// Optional element 'witsml20:ImpregnatedLitho' of XML schema type 'eml21:String64'
        std::string *ImpregnatedLitho;
        /// Optional element 'witsml20:Odor' of XML schema type 'eml21:String64'
        std::string *Odor;
        /// Optional element 'witsml20:CuttingFluid' of XML schema type 'eml21:String64'
        std::string *CuttingFluid;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CuttingsIntervalShow, default initialized and not managed by a soap context
        virtual witsml20__CuttingsIntervalShow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CuttingsIntervalShow); }
      public:
        /// Constructor with default initializations
        witsml20__CuttingsIntervalShow() : Citation(), ShowRating(), StainColor(), StainDistr(), StainPc(), CutSpeed(), CutColor(), CutStrength(), CutForm(), CutLevel(), CutFlorForm(), CutFlorColor(), CutFlorStrength(), CutFlorSpeed(), CutFlorLevel(), NatFlorColor(), NatFlorPc(), NatFlorLevel(), NatFlorDesc(), ResidueColor(), ImpregnatedLitho(), Odor(), CuttingFluid(), uid(), soap() { }
        virtual ~witsml20__CuttingsIntervalShow() { }
        /// Friend allocator used by soap_new_witsml20__CuttingsIntervalShow(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CuttingsIntervalShow * SOAP_FMAC2 soap_instantiate_witsml20__CuttingsIntervalShow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:399 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier (-134)
/* complex XML schema type 'witsml20:LithologyQualifier': */
class SOAP_CMAC witsml20__LithologyQualifier {
      public:
        /// Required element 'witsml20:Kind' of XML schema type 'eml21:LithologyQualifierKindExt'
        std::string Kind;
        /// Optional element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:Abundance' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Abundance;
        /// Optional element 'witsml20:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__LithologyQualifier, default initialized and not managed by a soap context
        virtual witsml20__LithologyQualifier *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__LithologyQualifier); }
      public:
        /// Constructor with default initializations
        witsml20__LithologyQualifier() : Kind(), MdInterval(), Abundance(), Description(), uid(), soap() { }
        virtual ~witsml20__LithologyQualifier() { }
        /// Friend allocator used by soap_new_witsml20__LithologyQualifier(struct soap*, int)
        friend SOAP_FMAC1 witsml20__LithologyQualifier * SOAP_FMAC2 soap_instantiate_witsml20__LithologyQualifier(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:401 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology (-135)
/* complex XML schema type 'witsml20:CuttingsIntervalLithology': */
class SOAP_CMAC witsml20__CuttingsIntervalLithology {
      public:
        /// Required element 'witsml20:Kind' of XML schema type 'eml21:LithologyKindExt'
        std::string Kind;
        /// Required element 'witsml20:LithPc' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *LithPc;
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:CodeLith' of XML schema type 'eml21:String64'
        std::string *CodeLith;
        /// Optional element 'witsml20:Color' of XML schema type 'eml21:String64'
        std::string *Color;
        /// Optional element 'witsml20:Texture' of XML schema type 'eml21:String64'
        std::string *Texture;
        /// Optional element 'witsml20:Hardness' of XML schema type 'eml21:String64'
        std::string *Hardness;
        /// Optional element 'witsml20:Compaction' of XML schema type 'eml21:String64'
        std::string *Compaction;
        /// Optional element 'witsml20:SizeGrain' of XML schema type 'eml21:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml20:Roundness' of XML schema type 'eml21:String64'
        std::string *Roundness;
        /// Optional element 'witsml20:Sphericity' of XML schema type 'eml21:String64'
        std::string *Sphericity;
        /// Optional element 'witsml20:Sorting' of XML schema type 'eml21:String64'
        std::string *Sorting;
        /// Optional element 'witsml20:MatrixCement' of XML schema type 'eml21:MatrixCementKind'
        enum eml21__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml20:PorosityVisible' of XML schema type 'eml21:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml20:PorosityFabric' of XML schema type 'eml21:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml20:Permeability' of XML schema type 'eml21:String64'
        std::string *Permeability;
        /// Optional element 'witsml20:Shows' of XML schema type 'witsml20:CuttingsIntervalShow'
        std::vector<witsml20__CuttingsIntervalShow *> Shows;
        /// Optional element 'witsml20:Qualifier' of XML schema type 'witsml20:LithologyQualifier'
        std::vector<witsml20__LithologyQualifier *> Qualifier;
        /// Optional attribute 'uid' of XML schema type 'eml21:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CuttingsIntervalLithology, default initialized and not managed by a soap context
        virtual witsml20__CuttingsIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CuttingsIntervalLithology); }
      public:
        /// Constructor with default initializations
        witsml20__CuttingsIntervalLithology() : Kind(), LithPc(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sphericity(), Sorting(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Shows(), Qualifier(), uid(), soap() { }
        virtual ~witsml20__CuttingsIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml20__CuttingsIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CuttingsIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml20__CuttingsIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:405 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology (-137)
/* complex XML schema type 'witsml20:InterpretedIntervalLithology': */
class SOAP_CMAC witsml20__InterpretedIntervalLithology {
      public:
        /// Required element 'witsml20:Kind' of XML schema type 'eml21:LithologyKindExt'
        std::string Kind;
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:CodeLith' of XML schema type 'eml21:String64'
        std::string *CodeLith;
        /// Optional element 'witsml20:Color' of XML schema type 'eml21:String64'
        std::string *Color;
        /// Optional element 'witsml20:Texture' of XML schema type 'eml21:String64'
        std::string *Texture;
        /// Optional element 'witsml20:Hardness' of XML schema type 'eml21:String64'
        std::string *Hardness;
        /// Optional element 'witsml20:Compaction' of XML schema type 'eml21:String64'
        std::string *Compaction;
        /// Optional element 'witsml20:SizeGrain' of XML schema type 'eml21:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml20:Roundness' of XML schema type 'eml21:String64'
        std::string *Roundness;
        /// Optional element 'witsml20:Sorting' of XML schema type 'eml21:String64'
        std::string *Sorting;
        /// Optional element 'witsml20:Sphericity' of XML schema type 'eml21:String64'
        std::string *Sphericity;
        /// Optional element 'witsml20:MatrixCement' of XML schema type 'eml21:MatrixCementKind'
        enum eml21__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml20:PorosityVisible' of XML schema type 'eml21:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml20:PorosityFabric' of XML schema type 'eml21:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml20:Permeability' of XML schema type 'eml21:String64'
        std::string *Permeability;
        /// Optional element 'witsml20:Qualifier' of XML schema type 'witsml20:LithologyQualifier'
        std::vector<witsml20__LithologyQualifier *> Qualifier;
        /// Optional attribute 'uid' of XML schema type 'eml21:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__InterpretedIntervalLithology, default initialized and not managed by a soap context
        virtual witsml20__InterpretedIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__InterpretedIntervalLithology); }
      public:
        /// Constructor with default initializations
        witsml20__InterpretedIntervalLithology() : Kind(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sorting(), Sphericity(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Qualifier(), uid(), soap() { }
        virtual ~witsml20__InterpretedIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml20__InterpretedIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml20__InterpretedIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml20__InterpretedIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:417 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation (-143)
/* complex XML schema type 'witsml20:TrajectoryStation': */
class SOAP_CMAC witsml20__TrajectoryStation {
      public:
        /// Optional element 'witsml20:ManuallyEntered' of XML schema type 'xsd:boolean'
        bool *ManuallyEntered;
        /// Optional element 'witsml20:Target' of XML schema type 'eml21:String64'
        std::string *Target;
        /// Optional element 'witsml20:DTimStn' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStn;
        /// Required element 'witsml20:TypeTrajStation' of XML schema type 'witsml20:TrajStationType'
        enum witsml20__TrajStationType TypeTrajStation;
        /// Optional element 'witsml20:TypeSurveyTool' of XML schema type 'witsml20:TypeSurveyTool'
        enum witsml20__TypeSurveyTool *TypeSurveyTool;
        /// Optional element 'witsml20:CalcAlgorithm' of XML schema type 'witsml20:TrajStnCalcAlgorithm'
        enum witsml20__TrajStnCalcAlgorithm *CalcAlgorithm;
        /// Required element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:Incl' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml20:Azi' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml20:Mtf' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Mtf;
        /// Optional element 'witsml20:Gtf' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Gtf;
        /// Optional element 'witsml20:DispNs' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispNs;
        /// Optional element 'witsml20:DispEw' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispEw;
        /// Optional element 'witsml20:VertSect' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *VertSect;
        /// Optional element 'witsml20:Dls' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml20:RateTurn' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *RateTurn;
        /// Optional element 'witsml20:RateBuild' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *RateBuild;
        /// Optional element 'witsml20:MdDelta' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdDelta;
        /// Optional element 'witsml20:TvdDelta' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdDelta;
        /// Optional element 'witsml20:GravTotalUncert' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalUncert;
        /// Optional element 'witsml20:DipAngleUncert' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipAngleUncert;
        /// Optional element 'witsml20:MagTotalUncert' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalUncert;
        /// Optional element 'witsml20:GravAccelCorUsed' of XML schema type 'xsd:boolean'
        bool *GravAccelCorUsed;
        /// Optional element 'witsml20:MagXAxialCorUsed' of XML schema type 'xsd:boolean'
        bool *MagXAxialCorUsed;
        /// Optional element 'witsml20:SagCorUsed' of XML schema type 'xsd:boolean'
        bool *SagCorUsed;
        /// Optional element 'witsml20:MagDrlstrCorUsed' of XML schema type 'xsd:boolean'
        bool *MagDrlstrCorUsed;
        /// Optional element 'witsml20:InfieldRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InfieldRefCorUsed;
        /// Optional element 'witsml20:InterpolatedInfieldRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InterpolatedInfieldRefCorUsed;
        /// Optional element 'witsml20:InHoleRefCorUsed' of XML schema type 'xsd:boolean'
        bool *InHoleRefCorUsed;
        /// Optional element 'witsml20:AxialMagInterferenceCorUsed' of XML schema type 'xsd:boolean'
        bool *AxialMagInterferenceCorUsed;
        /// Optional element 'witsml20:CosagCorUsed' of XML schema type 'xsd:boolean'
        bool *CosagCorUsed;
        /// Optional element 'witsml20:MSACorUsed' of XML schema type 'xsd:boolean'
        bool *MSACorUsed;
        /// Optional element 'witsml20:GravTotalFieldReference' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalFieldReference;
        /// Optional element 'witsml20:MagTotalFieldReference' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalFieldReference;
        /// Optional element 'witsml20:MagDipAngleReference' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDipAngleReference;
        /// Optional element 'witsml20:MagModelUsed' of XML schema type 'eml21:String64'
        std::string *MagModelUsed;
        /// Optional element 'witsml20:MagModelValid' of XML schema type 'eml21:String64'
        std::string *MagModelValid;
        /// Optional element 'witsml20:GeoModelUsed' of XML schema type 'eml21:String64'
        std::string *GeoModelUsed;
        /// Optional element 'witsml20:StatusTrajStation' of XML schema type 'witsml20:TrajStationStatus'
        enum witsml20__TrajStationStatus *StatusTrajStation;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml20:Valid' of XML schema type 'witsml20:StnTrajValid'
        witsml20__StnTrajValid *Valid;
        /// Optional element 'witsml20:MatrixCov' of XML schema type 'witsml20:StnTrajMatrixCov'
        witsml20__StnTrajMatrixCov *MatrixCov;
        /// Optional element 'witsml20:Location' of XML schema type 'witsml20:AbstractWellLocation'
        std::vector<witsml20__AbstractWellLocation *> Location;
        /// Optional element 'witsml20:SourceStation' of XML schema type 'witsml20:RefWellboreTrajectoryStation'
        witsml20__RefWellboreTrajectoryStation *SourceStation;
        /// Optional element 'witsml20:RawData' of XML schema type 'witsml20:StnTrajRawData'
        witsml20__StnTrajRawData *RawData;
        /// Optional element 'witsml20:CorUsed' of XML schema type 'witsml20:StnTrajCorUsed'
        witsml20__StnTrajCorUsed *CorUsed;
        /// Optional element 'witsml20:IscwsaToolErrorModel' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *IscwsaToolErrorModel;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__TrajectoryStation, default initialized and not managed by a soap context
        virtual witsml20__TrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__TrajectoryStation); }
      public:
        /// Constructor with default initializations
        witsml20__TrajectoryStation() : ManuallyEntered(), Target(), DTimStn(), TypeTrajStation(), TypeSurveyTool(), CalcAlgorithm(), Md(), Tvd(), Incl(), Azi(), Mtf(), Gtf(), DispNs(), DispEw(), VertSect(), Dls(), RateTurn(), RateBuild(), MdDelta(), TvdDelta(), GravTotalUncert(), DipAngleUncert(), MagTotalUncert(), GravAccelCorUsed(), MagXAxialCorUsed(), SagCorUsed(), MagDrlstrCorUsed(), InfieldRefCorUsed(), InterpolatedInfieldRefCorUsed(), InHoleRefCorUsed(), AxialMagInterferenceCorUsed(), CosagCorUsed(), MSACorUsed(), GravTotalFieldReference(), MagTotalFieldReference(), MagDipAngleReference(), MagModelUsed(), MagModelValid(), GeoModelUsed(), StatusTrajStation(), ExtensionNameValue(), Valid(), MatrixCov(), Location(), SourceStation(), RawData(), CorUsed(), IscwsaToolErrorModel(), uid(), soap() { }
        virtual ~witsml20__TrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml20__TrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__TrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml20__TrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:419 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData (-144)
/* complex XML schema type 'witsml20:StnTrajRawData': */
class SOAP_CMAC witsml20__StnTrajRawData {
      public:
        /// Optional element 'witsml20:GravAxialRaw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravAxialRaw;
        /// Optional element 'witsml20:GravTran1Raw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran1Raw;
        /// Optional element 'witsml20:GravTran2Raw' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran2Raw;
        /// Optional element 'witsml20:MagAxialRaw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialRaw;
        /// Optional element 'witsml20:MagTran1Raw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1Raw;
        /// Optional element 'witsml20:MagTran2Raw' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2Raw;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StnTrajRawData, default initialized and not managed by a soap context
        virtual witsml20__StnTrajRawData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StnTrajRawData); }
      public:
        /// Constructor with default initializations
        witsml20__StnTrajRawData() : GravAxialRaw(), GravTran1Raw(), GravTran2Raw(), MagAxialRaw(), MagTran1Raw(), MagTran2Raw(), soap() { }
        virtual ~witsml20__StnTrajRawData() { }
        /// Friend allocator used by soap_new_witsml20__StnTrajRawData(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StnTrajRawData * SOAP_FMAC2 soap_instantiate_witsml20__StnTrajRawData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:421 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed (-145)
/* complex XML schema type 'witsml20:StnTrajCorUsed': */
class SOAP_CMAC witsml20__StnTrajCorUsed {
      public:
        /// Optional element 'witsml20:GravAxialAccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravAxialAccelCor;
        /// Optional element 'witsml20:GravTran1AccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran1AccelCor;
        /// Optional element 'witsml20:GravTran2AccelCor' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTran2AccelCor;
        /// Optional element 'witsml20:MagAxialDrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialDrlstrCor;
        /// Optional element 'witsml20:MagTran1DrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1DrlstrCor;
        /// Optional element 'witsml20:MagTran2DrlstrCor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2DrlstrCor;
        /// Optional element 'witsml20:MagTran1MSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran1MSACor;
        /// Optional element 'witsml20:MagTran2MSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTran2MSACor;
        /// Optional element 'witsml20:MagAxialMSACor' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagAxialMSACor;
        /// Optional element 'witsml20:SagIncCor' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *SagIncCor;
        /// Optional element 'witsml20:SagAziCor' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *SagAziCor;
        /// Optional element 'witsml20:StnMagDeclUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *StnMagDeclUsed;
        /// Optional element 'witsml20:StnGridConUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *StnGridConUsed;
        /// Optional element 'witsml20:DirSensorOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DirSensorOffset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StnTrajCorUsed, default initialized and not managed by a soap context
        virtual witsml20__StnTrajCorUsed *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StnTrajCorUsed); }
      public:
        /// Constructor with default initializations
        witsml20__StnTrajCorUsed() : GravAxialAccelCor(), GravTran1AccelCor(), GravTran2AccelCor(), MagAxialDrlstrCor(), MagTran1DrlstrCor(), MagTran2DrlstrCor(), MagTran1MSACor(), MagTran2MSACor(), MagAxialMSACor(), SagIncCor(), SagAziCor(), StnMagDeclUsed(), StnGridConUsed(), DirSensorOffset(), soap() { }
        virtual ~witsml20__StnTrajCorUsed() { }
        /// Friend allocator used by soap_new_witsml20__StnTrajCorUsed(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StnTrajCorUsed * SOAP_FMAC2 soap_instantiate_witsml20__StnTrajCorUsed(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:423 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid (-146)
/* complex XML schema type 'witsml20:StnTrajValid': */
class SOAP_CMAC witsml20__StnTrajValid {
      public:
        /// Optional element 'witsml20:MagTotalFieldCalc' of XML schema type 'eml21:MagneticFluxDensityMeasure'
        eml21__MagneticFluxDensityMeasure *MagTotalFieldCalc;
        /// Optional element 'witsml20:MagDipAngleCalc' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDipAngleCalc;
        /// Optional element 'witsml20:GravTotalFieldCalc' of XML schema type 'eml21:LinearAccelerationMeasure'
        eml21__LinearAccelerationMeasure *GravTotalFieldCalc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StnTrajValid, default initialized and not managed by a soap context
        virtual witsml20__StnTrajValid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StnTrajValid); }
      public:
        /// Constructor with default initializations
        witsml20__StnTrajValid() : MagTotalFieldCalc(), MagDipAngleCalc(), GravTotalFieldCalc(), soap() { }
        virtual ~witsml20__StnTrajValid() { }
        /// Friend allocator used by soap_new_witsml20__StnTrajValid(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StnTrajValid * SOAP_FMAC2 soap_instantiate_witsml20__StnTrajValid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:425 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov (-147)
/* complex XML schema type 'witsml20:StnTrajMatrixCov': */
class SOAP_CMAC witsml20__StnTrajMatrixCov {
      public:
        /// Optional element 'witsml20:VarianceNN' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNN;
        /// Optional element 'witsml20:VarianceNE' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNE;
        /// Optional element 'witsml20:VarianceNVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceNVert;
        /// Optional element 'witsml20:VarianceEE' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceEE;
        /// Optional element 'witsml20:VarianceEVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceEVert;
        /// Optional element 'witsml20:VarianceVertVert' of XML schema type 'eml21:AreaMeasure'
        eml21__AreaMeasure *VarianceVertVert;
        /// Optional element 'witsml20:BiasN' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasN;
        /// Optional element 'witsml20:BiasE' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasE;
        /// Optional element 'witsml20:BiasVert' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *BiasVert;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__StnTrajMatrixCov, default initialized and not managed by a soap context
        virtual witsml20__StnTrajMatrixCov *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__StnTrajMatrixCov); }
      public:
        /// Constructor with default initializations
        witsml20__StnTrajMatrixCov() : VarianceNN(), VarianceNE(), VarianceNVert(), VarianceEE(), VarianceEVert(), VarianceVertVert(), BiasN(), BiasE(), BiasVert(), soap() { }
        virtual ~witsml20__StnTrajMatrixCov() { }
        /// Friend allocator used by soap_new_witsml20__StnTrajMatrixCov(struct soap*, int)
        friend SOAP_FMAC1 witsml20__StnTrajMatrixCov * SOAP_FMAC2 soap_instantiate_witsml20__StnTrajMatrixCov(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:427 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation (-148)
/* complex XML schema type 'witsml20:RefWellboreTrajectoryStation': */
class SOAP_CMAC witsml20__RefWellboreTrajectoryStation {
      public:
        /// Required element 'witsml20:StationReference' of XML schema type 'eml21:String64'
        std::string StationReference;
        /// Required element 'witsml20:TrajectoryParent' of XML schema type 'eml21:String64'
        std::string TrajectoryParent;
        /// Optional element 'witsml20:WellboreParent' of XML schema type 'eml21:String64'
        std::string *WellboreParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RefWellboreTrajectoryStation, default initialized and not managed by a soap context
        virtual witsml20__RefWellboreTrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RefWellboreTrajectoryStation); }
      public:
        /// Constructor with default initializations
        witsml20__RefWellboreTrajectoryStation() : StationReference(), TrajectoryParent(), WellboreParent(), soap() { }
        virtual ~witsml20__RefWellboreTrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml20__RefWellboreTrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RefWellboreTrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml20__RefWellboreTrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:429 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition (-149)
/* complex XML schema type 'witsml20:IscwsaSurveyToolOperatingCondition': */
class SOAP_CMAC witsml20__IscwsaSurveyToolOperatingCondition {
      public:
        /// Optional element 'witsml20:Parameter' of XML schema type 'eml21:String64'
        std::string *Parameter;
        /// Optional element 'witsml20:Min' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Min;
        /// Optional element 'witsml20:Max' of XML schema type 'eml21:GenericMeasure'
        eml21__GenericMeasure *Max;
        /// Optional element 'witsml20:Value' of XML schema type 'eml21:String64'
        std::string *Value;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IscwsaSurveyToolOperatingCondition, default initialized and not managed by a soap context
        virtual witsml20__IscwsaSurveyToolOperatingCondition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IscwsaSurveyToolOperatingCondition); }
      public:
        /// Constructor with default initializations
        witsml20__IscwsaSurveyToolOperatingCondition() : Parameter(), Min(), Max(), Value(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__IscwsaSurveyToolOperatingCondition() { }
        /// Friend allocator used by soap_new_witsml20__IscwsaSurveyToolOperatingCondition(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IscwsaSurveyToolOperatingCondition * SOAP_FMAC2 soap_instantiate_witsml20__IscwsaSurveyToolOperatingCondition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:431 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval (-150)
/* complex XML schema type 'witsml20:IscwsaSurveyToolOperatingInterval': */
class SOAP_CMAC witsml20__IscwsaSurveyToolOperatingInterval {
      public:
        /// Required element 'witsml20:Mode' of XML schema type 'witsml20:SurveyToolOperatingMode'
        enum witsml20__SurveyToolOperatingMode Mode;
        /// Required element 'witsml20:Start' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Start;
        /// Required element 'witsml20:End' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *End;
        /// Optional element 'witsml20:Speed' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *Speed;
        /// Optional element 'witsml20:SampleRate' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *SampleRate;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IscwsaSurveyToolOperatingInterval, default initialized and not managed by a soap context
        virtual witsml20__IscwsaSurveyToolOperatingInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IscwsaSurveyToolOperatingInterval); }
      public:
        /// Constructor with default initializations
        witsml20__IscwsaSurveyToolOperatingInterval() : Mode(), Start(), End(), Speed(), SampleRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml20__IscwsaSurveyToolOperatingInterval() { }
        /// Friend allocator used by soap_new_witsml20__IscwsaSurveyToolOperatingInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IscwsaSurveyToolOperatingInterval * SOAP_FMAC2 soap_instantiate_witsml20__IscwsaSurveyToolOperatingInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:433 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters (-151)
/* complex XML schema type 'witsml20:IscwsaModelParameters': */
class SOAP_CMAC witsml20__IscwsaModelParameters {
      public:
        /// Required element 'witsml20:MisalignmentMode' of XML schema type 'witsml20:ErrorModelMisalignmentMode'
        enum witsml20__ErrorModelMisalignmentMode MisalignmentMode;
        /// Optional element 'witsml20:GyroInitialization' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *GyroInitialization;
        /// Optional element 'witsml20:GyroReinitializationDistance' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GyroReinitializationDistance;
        /// Optional element 'witsml20:Switching' of XML schema type 'xsd:boolean'
        bool *Switching;
        /// Optional element 'witsml20:NoiseReductionFactor' of XML schema type 'xsd:double'
        double *NoiseReductionFactor;
        /// Optional element 'witsml20:GyroRunningSpeed' of XML schema type 'eml21:LengthPerTimeMeasure'
        eml21__LengthPerTimeMeasure *GyroRunningSpeed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IscwsaModelParameters, default initialized and not managed by a soap context
        virtual witsml20__IscwsaModelParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IscwsaModelParameters); }
      public:
        /// Constructor with default initializations
        witsml20__IscwsaModelParameters() : MisalignmentMode(), GyroInitialization(), GyroReinitializationDistance(), Switching(), NoiseReductionFactor(), GyroRunningSpeed(), soap() { }
        virtual ~witsml20__IscwsaModelParameters() { }
        /// Friend allocator used by soap_new_witsml20__IscwsaModelParameters(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IscwsaModelParameters * SOAP_FMAC2 soap_instantiate_witsml20__IscwsaModelParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:435 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue (-152)
/* complex XML schema type 'witsml20:IscwsaErrorTermValue': */
class SOAP_CMAC witsml20__IscwsaErrorTermValue {
      public:
        /// Required element 'witsml20:Term' of XML schema type 'eml21:String64'
        std::string Term;
        /// Required element 'witsml20:Prop' of XML schema type 'witsml20:ErrorPropagationMode'
        enum witsml20__ErrorPropagationMode Prop;
        /// Optional element 'witsml20:Bias' of XML schema type 'xsd:double'
        double *Bias;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Optional element 'witsml20:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml20:Value' of XML schema type 'witsml20:MeasureOrQuantity'
        witsml20__MeasureOrQuantity *Value;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IscwsaErrorTermValue, default initialized and not managed by a soap context
        virtual witsml20__IscwsaErrorTermValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IscwsaErrorTermValue); }
      public:
        /// Constructor with default initializations
        witsml20__IscwsaErrorTermValue() : Term(), Prop(), Bias(), Comment(), ExtensionNameValue(), Value(), uid(), soap() { }
        virtual ~witsml20__IscwsaErrorTermValue() { }
        /// Friend allocator used by soap_new_witsml20__IscwsaErrorTermValue(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IscwsaErrorTermValue * SOAP_FMAC2 soap_instantiate_witsml20__IscwsaErrorTermValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:441 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData (-155)
/* complex XML schema type 'witsml20:IscwsaAuthorizationData': */
class SOAP_CMAC witsml20__IscwsaAuthorizationData {
      public:
        /// Optional element 'witsml20:Author' of XML schema type 'eml21:String64'
        std::string *Author;
        /// Optional element 'witsml20:Source' of XML schema type 'eml21:String64'
        std::string *Source;
        /// Required element 'witsml20:Authority' of XML schema type 'eml21:String64'
        std::string Authority;
        /// Required element 'witsml20:Status' of XML schema type 'witsml20:AuthorizationStatus'
        enum witsml20__AuthorizationStatus Status;
        /// Optional element 'witsml20:Version' of XML schema type 'eml21:String64'
        std::string *Version;
        /// Optional element 'witsml20:Comment' of XML schema type 'eml21:String2000'
        std::string *Comment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IscwsaAuthorizationData, default initialized and not managed by a soap context
        virtual witsml20__IscwsaAuthorizationData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IscwsaAuthorizationData); }
      public:
        /// Constructor with default initializations
        witsml20__IscwsaAuthorizationData() : Author(), Source(), Authority(), Status(), Version(), Comment(), soap() { }
        virtual ~witsml20__IscwsaAuthorizationData() { }
        /// Friend allocator used by soap_new_witsml20__IscwsaAuthorizationData(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IscwsaAuthorizationData * SOAP_FMAC2 soap_instantiate_witsml20__IscwsaAuthorizationData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:443 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject (-156)
/* complex XML schema type 'eml21:AbstractObject': */
class SOAP_CMAC eml21__AbstractObject {
      public:
        /// Optional element 'eml21:Aliases' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> Aliases;
        /// Required element 'eml21:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'eml21:CustomData' of XML schema type 'eml21:CustomData'
        eml21__CustomData *CustomData;
        /// Optional element 'eml21:ExtensionNameValue' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> ExtensionNameValue;
        /// Optional attribute 'objectVersion' of XML schema type 'eml21:String64'
        std::string *objectVersion;
        /// Required attribute 'schemaVersion' of XML schema type 'eml21:String64'
        std::string schemaVersion;
        /// Required attribute 'uuid' of XML schema type 'eml21:UuidString'
        std::string uuid;
        /// Optional attribute 'existenceKind' of XML schema type 'eml21:ExistenceKind'
        enum eml21__ExistenceKind *existenceKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractObject, default initialized and not managed by a soap context
        virtual eml21__AbstractObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractObject); }
      public:
        /// Constructor with default initializations
        eml21__AbstractObject() : Aliases(), Citation(), CustomData(), ExtensionNameValue(), objectVersion(), schemaVersion(), uuid(), existenceKind(), soap() { }
        virtual ~eml21__AbstractObject() { }
        /// Friend allocator used by soap_new_eml21__AbstractObject(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractObject * SOAP_FMAC2 soap_instantiate_eml21__AbstractObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:445 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_eml21__Citation (-157)
/* complex XML schema type 'eml21:Citation': */
class SOAP_CMAC eml21__Citation {
      public:
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Required element 'eml21:Originator' of XML schema type 'eml21:String64'
        std::string Originator;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm Creation;
        /// Required element 'eml21:Format' of XML schema type 'eml21:String2000'
        std::string Format;
        /// Optional element 'eml21:Editor' of XML schema type 'eml21:String64'
        std::string *Editor;
        /// Optional element 'eml21:LastUpdate' of XML schema type 'xsd:dateTime'
        struct tm *LastUpdate;
        /// Optional element 'eml21:VersionString' of XML schema type 'eml21:String64'
        std::string *VersionString;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Optional element 'eml21:DescriptiveKeywords' of XML schema type 'eml21:String2000'
        std::string *DescriptiveKeywords;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__Citation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__Citation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__Citation, default initialized and not managed by a soap context
        virtual eml21__Citation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__Citation); }
      public:
        /// Constructor with default initializations
        eml21__Citation() : Title(), Originator(), Creation(), Format(), Editor(), LastUpdate(), VersionString(), Description(), DescriptiveKeywords(), soap() { }
        virtual ~eml21__Citation() { }
        /// Friend allocator used by soap_new_eml21__Citation(struct soap*, int)
        friend SOAP_FMAC1 eml21__Citation * SOAP_FMAC2 soap_instantiate_eml21__Citation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:447 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_eml21__CustomData (-158)
/* complex XML schema type 'eml21:CustomData': */
class SOAP_CMAC eml21__CustomData {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CustomData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CustomData, default initialized and not managed by a soap context
        virtual eml21__CustomData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CustomData); }
      public:
        /// Constructor with default initializations
        eml21__CustomData() : __any(), soap() { }
        virtual ~eml21__CustomData() { }
        /// Friend allocator used by soap_new_eml21__CustomData(struct soap*, int)
        friend SOAP_FMAC1 eml21__CustomData * SOAP_FMAC2 soap_instantiate_eml21__CustomData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:449 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue (-159)
/* complex XML schema type 'eml21:ExtensionNameValue': */
class SOAP_CMAC eml21__ExtensionNameValue {
      public:
        /// Required element 'eml21:Name' of XML schema type 'eml21:String64'
        std::string Name;
        /// Required element 'eml21:Value' of XML schema type 'eml21:StringMeasure'
        eml21__StringMeasure *Value;
        /// Optional element 'eml21:MeasureClass' of XML schema type 'eml21:MeasureClass'
        enum eml21__MeasureClass *MeasureClass;
        /// Optional element 'eml21:DTim' of XML schema type 'eml21:TimeStamp'
        std::string *DTim;
        /// Optional element 'eml21:Index' of XML schema type 'xsd:int'
        int *Index;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExtensionNameValue, default initialized and not managed by a soap context
        virtual eml21__ExtensionNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExtensionNameValue); }
      public:
        /// Constructor with default initializations
        eml21__ExtensionNameValue() : Name(), Value(), MeasureClass(), DTim(), Index(), Description(), soap() { }
        virtual ~eml21__ExtensionNameValue() { }
        /// Friend allocator used by soap_new_eml21__ExtensionNameValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExtensionNameValue * SOAP_FMAC2 soap_instantiate_eml21__ExtensionNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:451 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias (-160)
/* complex XML schema type 'eml21:ObjectAlias': */
class SOAP_CMAC eml21__ObjectAlias {
      public:
        /// Required element 'eml21:Identifier' of XML schema type 'eml21:String64'
        std::string Identifier;
        /// Optional element 'eml21:Description' of XML schema type 'eml21:String2000'
        std::string *Description;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ObjectAlias, default initialized and not managed by a soap context
        virtual eml21__ObjectAlias *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ObjectAlias); }
      public:
        /// Constructor with default initializations
        eml21__ObjectAlias() : Identifier(), Description(), authority(), soap() { }
        virtual ~eml21__ObjectAlias() { }
        /// Friend allocator used by soap_new_eml21__ObjectAlias(struct soap*, int)
        friend SOAP_FMAC1 eml21__ObjectAlias * SOAP_FMAC2 soap_instantiate_eml21__ObjectAlias(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:463 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray (-166)
/* complex XML schema type 'eml21:AbstractValueArray': */
class SOAP_CMAC eml21__AbstractValueArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractValueArray, default initialized and not managed by a soap context
        virtual eml21__AbstractValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractValueArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractValueArray() : soap() { }
        virtual ~eml21__AbstractValueArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractValueArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractValueArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:495 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray (-182)
/* complex XML schema type 'eml21:JaggedArray': */
class SOAP_CMAC eml21__JaggedArray {
      public:
        /// Required element 'eml21:Elements' of XML schema type 'eml21:AbstractValueArray'
        eml21__AbstractValueArray *Elements;
        /// Required element 'eml21:CumulativeLength' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *CumulativeLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__JaggedArray, default initialized and not managed by a soap context
        virtual eml21__JaggedArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__JaggedArray); }
      public:
        /// Constructor with default initializations
        eml21__JaggedArray() : Elements(), CumulativeLength(), soap() { }
        virtual ~eml21__JaggedArray() { }
        /// Friend allocator used by soap_new_eml21__JaggedArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__JaggedArray * SOAP_FMAC2 soap_instantiate_eml21__JaggedArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:497 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval (-183)
/* complex XML schema type 'eml21:MdInterval': */
class SOAP_CMAC eml21__MdInterval {
      public:
        /// Required element 'eml21:MdTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdTop;
        /// Required element 'eml21:MdBase' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *MdBase;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MdInterval, default initialized and not managed by a soap context
        virtual eml21__MdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MdInterval); }
      public:
        /// Constructor with default initializations
        eml21__MdInterval() : MdTop(), MdBase(), datum(), soap() { }
        virtual ~eml21__MdInterval() { }
        /// Friend allocator used by soap_new_eml21__MdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml21__MdInterval * SOAP_FMAC2 soap_instantiate_eml21__MdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:505 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval (-187)
/* complex XML schema type 'eml21:TvdInterval': */
class SOAP_CMAC eml21__TvdInterval {
      public:
        /// Required element 'eml21:TvdTop' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdTop;
        /// Required element 'eml21:TvdBase' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *TvdBase;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TvdInterval, default initialized and not managed by a soap context
        virtual eml21__TvdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TvdInterval); }
      public:
        /// Constructor with default initializations
        eml21__TvdInterval() : TvdTop(), TvdBase(), datum(), soap() { }
        virtual ~eml21__TvdInterval() { }
        /// Friend allocator used by soap_new_eml21__TvdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml21__TvdInterval * SOAP_FMAC2 soap_instantiate_eml21__TvdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1241 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference (-555)
/* complex XML schema type 'eml21:DataObjectReference': */
class SOAP_CMAC eml21__DataObjectReference {
      public:
        /// Required element 'eml21:ContentType' of XML schema type 'eml21:String2000'
        std::string ContentType;
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Required element 'eml21:Uuid' of XML schema type 'eml21:UuidString'
        std::string Uuid;
        /// Optional element 'eml21:UuidAuthority' of XML schema type 'eml21:String64'
        std::string *UuidAuthority;
        /// Optional element 'eml21:Uri' of XML schema type 'xsd:anyURI'
        std::string *Uri;
        /// Optional element 'eml21:VersionString' of XML schema type 'eml21:String64'
        std::string *VersionString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataObjectReference, default initialized and not managed by a soap context
        virtual eml21__DataObjectReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataObjectReference); }
      public:
        /// Constructor with default initializations
        eml21__DataObjectReference() : ContentType(), Title(), Uuid(), UuidAuthority(), Uri(), VersionString(), soap() { }
        virtual ~eml21__DataObjectReference() { }
        /// Friend allocator used by soap_new_eml21__DataObjectReference(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataObjectReference * SOAP_FMAC2 soap_instantiate_eml21__DataObjectReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1245 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset (-557)
/* complex XML schema type 'eml21:ExternalDataset': */
class SOAP_CMAC eml21__ExternalDataset {
      public:
        /// Required element 'eml21:ExternalFileProxy' of XML schema type 'eml21:ExternalDatasetPart'
        std::vector<eml21__ExternalDatasetPart *> ExternalFileProxy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExternalDataset, default initialized and not managed by a soap context
        virtual eml21__ExternalDataset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExternalDataset); }
      public:
        /// Constructor with default initializations
        eml21__ExternalDataset() : ExternalFileProxy(), soap() { }
        virtual ~eml21__ExternalDataset() { }
        /// Friend allocator used by soap_new_eml21__ExternalDataset(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExternalDataset * SOAP_FMAC2 soap_instantiate_eml21__ExternalDataset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1247 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart (-558)
/* complex XML schema type 'eml21:ExternalDatasetPart': */
class SOAP_CMAC eml21__ExternalDatasetPart {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:PathInExternalFile' of XML schema type 'eml21:String2000'
        std::string PathInExternalFile;
        /// Required element 'eml21:StartIndex' of XML schema type 'xsd:unsignedLong'
        ULONG64 StartIndex;
        /// Required element 'eml21:EpcExternalPartReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *EpcExternalPartReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ExternalDatasetPart, default initialized and not managed by a soap context
        virtual eml21__ExternalDatasetPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ExternalDatasetPart); }
      public:
        /// Constructor with default initializations
        eml21__ExternalDatasetPart() : Count(), PathInExternalFile(), StartIndex(), EpcExternalPartReference(), soap() { }
        virtual ~eml21__ExternalDatasetPart() { }
        /// Friend allocator used by soap_new_eml21__ExternalDatasetPart(struct soap*, int)
        friend SOAP_FMAC1 eml21__ExternalDatasetPart * SOAP_FMAC2 soap_instantiate_eml21__ExternalDatasetPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1249 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter (-559)
/* complex XML schema type 'eml21:AbstractActivityParameter': */
class SOAP_CMAC eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Optional element 'eml21:Index' of XML schema type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'eml21:Selection' of XML schema type 'eml21:String2000'
        std::string *Selection;
        /// Optional element 'eml21:Key' of XML schema type 'eml21:AbstractParameterKey'
        std::vector<eml21__AbstractParameterKey *> Key;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractActivityParameter, default initialized and not managed by a soap context
        virtual eml21__AbstractActivityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractActivityParameter); }
      public:
        /// Constructor with default initializations
        eml21__AbstractActivityParameter() : Title(), Index(), Selection(), Key(), soap() { }
        virtual ~eml21__AbstractActivityParameter() { }
        /// Friend allocator used by soap_new_eml21__AbstractActivityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractActivityParameter * SOAP_FMAC2 soap_instantiate_eml21__AbstractActivityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1251 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey (-560)
/* complex XML schema type 'eml21:AbstractParameterKey': */
class SOAP_CMAC eml21__AbstractParameterKey {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractParameterKey, default initialized and not managed by a soap context
        virtual eml21__AbstractParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__AbstractParameterKey() : soap() { }
        virtual ~eml21__AbstractParameterKey() { }
        /// Friend allocator used by soap_new_eml21__AbstractParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractParameterKey * SOAP_FMAC2 soap_instantiate_eml21__AbstractParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1265 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate (-567)
/* complex XML schema type 'eml21:ParameterTemplate': */
class SOAP_CMAC eml21__ParameterTemplate {
      public:
        /// Optional element 'eml21:AllowedKind' of XML schema type 'eml21:ParameterKind'
        std::vector<enum eml21__ParameterKind> AllowedKind;
        /// Required element 'eml21:IsInput' of XML schema type 'xsd:boolean'
        bool IsInput;
        /// Optional element 'eml21:KeyConstraint' of XML schema type 'eml21:String2000'
        std::vector<std::string> KeyConstraint;
        /// Required element 'eml21:IsOutput' of XML schema type 'xsd:boolean'
        bool IsOutput;
        /// Required element 'eml21:Title' of XML schema type 'eml21:String2000'
        std::string Title;
        /// Optional element 'eml21:DataObjectContentType' of XML schema type 'eml21:String2000'
        std::string *DataObjectContentType;
        /// Required element 'eml21:MaxOccurs' of XML schema type 'xsd:long'
        LONG64 MaxOccurs;
        /// Required element 'eml21:MinOccurs' of XML schema type 'xsd:long'
        LONG64 MinOccurs;
        /// Optional element 'eml21:Constraint' of XML schema type 'eml21:String2000'
        std::string *Constraint;
        /// Optional element 'eml21:DefaultValue' of XML schema type 'eml21:AbstractActivityParameter'
        std::vector<eml21__AbstractActivityParameter *> DefaultValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ParameterTemplate, default initialized and not managed by a soap context
        virtual eml21__ParameterTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ParameterTemplate); }
      public:
        /// Constructor with default initializations
        eml21__ParameterTemplate() : AllowedKind(), IsInput(), KeyConstraint(), IsOutput(), Title(), DataObjectContentType(), MaxOccurs(), MinOccurs(), Constraint(), DefaultValue(), soap() { }
        virtual ~eml21__ParameterTemplate() { }
        /// Friend allocator used by soap_new_eml21__ParameterTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml21__ParameterTemplate * SOAP_FMAC2 soap_instantiate_eml21__ParameterTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1273 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime (-571)
/* complex XML schema type 'eml21:GeologicTime': */
class SOAP_CMAC eml21__GeologicTime {
      public:
        /// Optional element 'eml21:AgeOffsetAttribute' of XML schema type 'xsd:long'
        LONG64 *AgeOffsetAttribute;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeologicTime, default initialized and not managed by a soap context
        virtual eml21__GeologicTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeologicTime); }
      public:
        /// Constructor with default initializations
        eml21__GeologicTime() : AgeOffsetAttribute(), DateTime(), soap() { }
        virtual ~eml21__GeologicTime() { }
        /// Friend allocator used by soap_new_eml21__GeologicTime(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeologicTime * SOAP_FMAC2 soap_instantiate_eml21__GeologicTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1279 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex (-574)
/* complex XML schema type 'eml21:TimeIndex': */
class SOAP_CMAC eml21__TimeIndex {
      public:
        /// Required element 'eml21:Index' of XML schema type 'xsd:unsignedLong'
        ULONG64 Index;
        /// Required element 'eml21:TimeSeries' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndex, default initialized and not managed by a soap context
        virtual eml21__TimeIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndex); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndex() : Index(), TimeSeries(), soap() { }
        virtual ~eml21__TimeIndex() { }
        /// Friend allocator used by soap_new_eml21__TimeIndex(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndex * SOAP_FMAC2 soap_instantiate_eml21__TimeIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1281 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices (-575)
/* complex XML schema type 'eml21:TimeIndices': */
class SOAP_CMAC eml21__TimeIndices {
      public:
        /// Required element 'eml21:TimeIndexCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 TimeIndexCount;
        /// Optional element 'eml21:TimeIndexStart' of XML schema type 'xsd:unsignedLong'
        ULONG64 *TimeIndexStart;
        /// Optional element 'eml21:SimulatorTimeStep' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *SimulatorTimeStep;
        /// Required element 'eml21:UseInterval' of XML schema type 'xsd:boolean'
        bool UseInterval;
        /// Required element 'eml21:TimeSeries' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndices, default initialized and not managed by a soap context
        virtual eml21__TimeIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndices); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndices() : TimeIndexCount(), TimeIndexStart(), SimulatorTimeStep(), UseInterval(), TimeSeries(), soap() { }
        virtual ~eml21__TimeIndices() { }
        /// Friend allocator used by soap_new_eml21__TimeIndices(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndices * SOAP_FMAC2 soap_instantiate_eml21__TimeIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1285 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage (-577)
/* complex XML schema type 'eml21:TimeSeriesParentage': */
class SOAP_CMAC eml21__TimeSeriesParentage {
      public:
        /// Required element 'eml21:HasOverlap' of XML schema type 'xsd:boolean'
        bool HasOverlap;
        /// Required element 'eml21:ParentTimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *ParentTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeSeriesParentage, default initialized and not managed by a soap context
        virtual eml21__TimeSeriesParentage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeSeriesParentage); }
      public:
        /// Constructor with default initializations
        eml21__TimeSeriesParentage() : HasOverlap(), ParentTimeIndex(), soap() { }
        virtual ~eml21__TimeSeriesParentage() { }
        /// Friend allocator used by soap_new_eml21__TimeSeriesParentage(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeSeriesParentage * SOAP_FMAC2 soap_instantiate_eml21__TimeSeriesParentage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1289 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue (-579)
/* complex XML schema type 'eml21:AbstractPressureValue': */
class SOAP_CMAC eml21__AbstractPressureValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractPressureValue, default initialized and not managed by a soap context
        virtual eml21__AbstractPressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractPressureValue); }
      public:
        /// Constructor with default initializations
        eml21__AbstractPressureValue() : soap() { }
        virtual ~eml21__AbstractPressureValue() { }
        /// Friend allocator used by soap_new_eml21__AbstractPressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractPressureValue * SOAP_FMAC2 soap_instantiate_eml21__AbstractPressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:27673 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__union_AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1__eml21__union_AbstractTemperaturePressure (-1321)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml21__union_AbstractTemperaturePressure
{
};
#endif

/* eml2_1ForGsoap.h:1291 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure (-580)
/* Choice: */
class SOAP_CMAC eml21__AbstractTemperaturePressure {
      public:
        /// Union with union _eml21__union_AbstractTemperaturePressure variant selector __union_AbstractTemperaturePressure set to one of:
        int __union_AbstractTemperaturePressure;
        union _eml21__union_AbstractTemperaturePressure union_AbstractTemperaturePressure;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractTemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__AbstractTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__AbstractTemperaturePressure() : __union_AbstractTemperaturePressure(), soap() { }
        virtual ~eml21__AbstractTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__AbstractTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__AbstractTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1293 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue (-581)
/* complex XML schema type 'eml21:DensityValue': */
class SOAP_CMAC eml21__DensityValue {
      public:
        /// Required element 'eml21:Density' of XML schema type 'eml21:MassPerVolumeMeasureExt'
        eml21__MassPerVolumeMeasureExt *Density;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DensityValue, default initialized and not managed by a soap context
        virtual eml21__DensityValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DensityValue); }
      public:
        /// Constructor with default initializations
        eml21__DensityValue() : Density(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__DensityValue() { }
        /// Friend allocator used by soap_new_eml21__DensityValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__DensityValue * SOAP_FMAC2 soap_instantiate_eml21__DensityValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1295 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue (-582)
/* complex XML schema type 'eml21:FlowRateValue': */
class SOAP_CMAC eml21__FlowRateValue {
      public:
        /// Required element 'eml21:FlowRate' of XML schema type 'eml21:VolumePerTimeMeasureExt'
        eml21__VolumePerTimeMeasureExt *FlowRate;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FlowRateValue, default initialized and not managed by a soap context
        virtual eml21__FlowRateValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FlowRateValue); }
      public:
        /// Constructor with default initializations
        eml21__FlowRateValue() : FlowRate(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__FlowRateValue() { }
        /// Friend allocator used by soap_new_eml21__FlowRateValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__FlowRateValue * SOAP_FMAC2 soap_instantiate_eml21__FlowRateValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1299 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue (-584)
/* complex XML schema type 'eml21:PressureValue': */
class SOAP_CMAC eml21__PressureValue {
      public:
        /// Required element 'eml21:AbstractPressureValue' of XML schema type 'eml21:AbstractPressureValue'
        eml21__AbstractPressureValue *AbstractPressureValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureValue, default initialized and not managed by a soap context
        virtual eml21__PressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureValue); }
      public:
        /// Constructor with default initializations
        eml21__PressureValue() : AbstractPressureValue(), soap() { }
        virtual ~eml21__PressureValue() { }
        /// Friend allocator used by soap_new_eml21__PressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureValue * SOAP_FMAC2 soap_instantiate_eml21__PressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1309 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue (-589)
/* complex XML schema type 'eml21:VolumeValue': */
class SOAP_CMAC eml21__VolumeValue {
      public:
        /// Required element 'eml21:Volume' of XML schema type 'eml21:VolumeMeasureExt'
        eml21__VolumeMeasureExt *Volume;
        /// Required element 'eml21:MeasurementPressureTemperature' of XML schema type 'eml21:AbstractTemperaturePressure'
        eml21__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeValue, default initialized and not managed by a soap context
        virtual eml21__VolumeValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeValue); }
      public:
        /// Constructor with default initializations
        eml21__VolumeValue() : Volume(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml21__VolumeValue() { }
        /// Friend allocator used by soap_new_eml21__VolumeValue(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeValue * SOAP_FMAC2 soap_instantiate_eml21__VolumeValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1311 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs (-590)
/* complex XML schema type 'eml21:AbstractGeodeticCrs': */
class SOAP_CMAC eml21__AbstractGeodeticCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractGeodeticCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractGeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractGeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractGeodeticCrs() : soap() { }
        virtual ~eml21__AbstractGeodeticCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractGeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractGeodeticCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractGeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1313 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs (-591)
/* complex XML schema type 'eml21:AbstractProjectedCrs': */
class SOAP_CMAC eml21__AbstractProjectedCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractProjectedCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractProjectedCrs() : soap() { }
        virtual ~eml21__AbstractProjectedCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractProjectedCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1315 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs (-592)
/* complex XML schema type 'eml21:AbstractVerticalCrs': */
class SOAP_CMAC eml21__AbstractVerticalCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractVerticalCrs, default initialized and not managed by a soap context
        virtual eml21__AbstractVerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractVerticalCrs); }
      public:
        /// Constructor with default initializations
        eml21__AbstractVerticalCrs() : soap() { }
        virtual ~eml21__AbstractVerticalCrs() { }
        /// Friend allocator used by soap_new_eml21__AbstractVerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractVerticalCrs * SOAP_FMAC2 soap_instantiate_eml21__AbstractVerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1349 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule (-609)
/* complex XML schema type 'eml21:FailingRule': */
class SOAP_CMAC eml21__FailingRule {
      public:
        /// Required element 'eml21:RuleId' of XML schema type 'eml21:String64'
        std::string RuleId;
        /// Optional element 'eml21:RuleName' of XML schema type 'eml21:String2000'
        std::string *RuleName;
        /// Optional element 'eml21:Severity' of XML schema type 'eml21:String64'
        std::string *Severity;
        /// Optional element 'eml21:FailingRuleExtensions' of XML schema type 'eml21:ExtensionNameValue'
        std::vector<eml21__ExtensionNameValue *> FailingRuleExtensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FailingRule, default initialized and not managed by a soap context
        virtual eml21__FailingRule *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FailingRule); }
      public:
        /// Constructor with default initializations
        eml21__FailingRule() : RuleId(), RuleName(), Severity(), FailingRuleExtensions(), soap() { }
        virtual ~eml21__FailingRule() { }
        /// Friend allocator used by soap_new_eml21__FailingRule(struct soap*, int)
        friend SOAP_FMAC1 eml21__FailingRule * SOAP_FMAC2 soap_instantiate_eml21__FailingRule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1351 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange (-610)
/* complex XML schema type 'eml21:IndexRange': */
class SOAP_CMAC eml21__IndexRange {
      public:
        /// Required element 'eml21:IndexMinimum' of XML schema type 'eml21:String64'
        std::string IndexMinimum;
        /// Required element 'eml21:IndexMaximum' of XML schema type 'eml21:String64'
        std::string IndexMaximum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IndexRange, default initialized and not managed by a soap context
        virtual eml21__IndexRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IndexRange); }
      public:
        /// Constructor with default initializations
        eml21__IndexRange() : IndexMinimum(), IndexMaximum(), soap() { }
        virtual ~eml21__IndexRange() { }
        /// Friend allocator used by soap_new_eml21__IndexRange(struct soap*, int)
        friend SOAP_FMAC1 eml21__IndexRange * SOAP_FMAC2 soap_instantiate_eml21__IndexRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1353 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation (-611)
/* complex XML schema type 'eml21:AbstractGraphicalInformation': */
class SOAP_CMAC eml21__AbstractGraphicalInformation {
      public:
        /// Required element 'eml21:TargetObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *TargetObject;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractGraphicalInformation, default initialized and not managed by a soap context
        virtual eml21__AbstractGraphicalInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractGraphicalInformation); }
      public:
        /// Constructor with default initializations
        eml21__AbstractGraphicalInformation() : TargetObject(), soap() { }
        virtual ~eml21__AbstractGraphicalInformation() { }
        /// Friend allocator used by soap_new_eml21__AbstractGraphicalInformation(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractGraphicalInformation * SOAP_FMAC2 soap_instantiate_eml21__AbstractGraphicalInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:163 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation (-16)
/* complex XML schema type 'witsml20:GeodeticWellLocation': */
class SOAP_CMAC witsml20__GeodeticWellLocation : public witsml20__AbstractWellLocation {
      public:
        /// Required element 'witsml20:Latitude' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Latitude;
        /// Required element 'witsml20:Longitude' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *Longitude;
        /// Required element 'witsml20:Crs' of XML schema type 'eml21:AbstractGeodeticCrs'
        eml21__AbstractGeodeticCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__GeodeticWellLocation, default initialized and not managed by a soap context
        virtual witsml20__GeodeticWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__GeodeticWellLocation); }
      public:
        /// Constructor with default initializations
        witsml20__GeodeticWellLocation() : Latitude(), Longitude(), Crs() { }
        virtual ~witsml20__GeodeticWellLocation() { }
        /// Friend allocator used by soap_new_witsml20__GeodeticWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__GeodeticWellLocation * SOAP_FMAC2 soap_instantiate_witsml20__GeodeticWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:165 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation (-17)
/* complex XML schema type 'witsml20:ProjectedWellLocation': */
class SOAP_CMAC witsml20__ProjectedWellLocation : public witsml20__AbstractWellLocation {
      public:
        /// Required element 'witsml20:Coordinate1' of XML schema type 'xsd:double'
        double Coordinate1;
        /// Required element 'witsml20:Coordinate2' of XML schema type 'xsd:double'
        double Coordinate2;
        /// Required element 'witsml20:Crs' of XML schema type 'eml21:AbstractProjectedCrs'
        eml21__AbstractProjectedCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ProjectedWellLocation, default initialized and not managed by a soap context
        virtual witsml20__ProjectedWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ProjectedWellLocation); }
      public:
        /// Constructor with default initializations
        witsml20__ProjectedWellLocation() : Coordinate1(), Coordinate2(), Crs() { }
        virtual ~witsml20__ProjectedWellLocation() { }
        /// Friend allocator used by soap_new_witsml20__ProjectedWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ProjectedWellLocation * SOAP_FMAC2 soap_instantiate_witsml20__ProjectedWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:167 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Well
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Well (-18)
/* complex XML schema type 'witsml20:Well': */
class SOAP_CMAC witsml20__Well : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:NameLegal' of XML schema type 'eml21:String64'
        std::string *NameLegal;
        /// Optional element 'witsml20:NumLicense' of XML schema type 'eml21:String64'
        std::string *NumLicense;
        /// Optional element 'witsml20:NumGovt' of XML schema type 'eml21:String64'
        std::string *NumGovt;
        /// Optional element 'witsml20:DTimLicense' of XML schema type 'eml21:TimeStamp'
        std::string *DTimLicense;
        /// Optional element 'witsml20:Field' of XML schema type 'eml21:String64'
        std::string *Field;
        /// Optional element 'witsml20:Country' of XML schema type 'eml21:String64'
        std::string *Country;
        /// Optional element 'witsml20:State' of XML schema type 'eml21:String64'
        std::string *State;
        /// Optional element 'witsml20:County' of XML schema type 'eml21:String64'
        std::string *County;
        /// Optional element 'witsml20:Region' of XML schema type 'eml21:String64'
        std::string *Region;
        /// Optional element 'witsml20:District' of XML schema type 'eml21:String64'
        std::string *District;
        /// Optional element 'witsml20:Block' of XML schema type 'eml21:String64'
        std::string *Block;
        /// Optional element 'witsml20:TimeZone' of XML schema type 'eml21:TimeZone'
        std::string *TimeZone;
        /// Optional element 'witsml20:Operator' of XML schema type 'eml21:String64'
        std::string *Operator;
        /// Optional element 'witsml20:OperatorDiv' of XML schema type 'eml21:String64'
        std::string *OperatorDiv;
        /// Optional element 'witsml20:OriginalOperator' of XML schema type 'eml21:String64'
        std::string *OriginalOperator;
        /// Optional element 'witsml20:PcInterest' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *PcInterest;
        /// Optional element 'witsml20:NumAPI' of XML schema type 'eml21:String64'
        std::string *NumAPI;
        /// Optional element 'witsml20:StatusWell' of XML schema type 'eml21:WellStatus'
        enum eml21__WellStatus *StatusWell;
        /// Optional element 'witsml20:PurposeWell' of XML schema type 'witsml20:WellPurpose'
        enum witsml20__WellPurpose *PurposeWell;
        /// Optional element 'witsml20:FluidWell' of XML schema type 'witsml20:WellFluid'
        enum witsml20__WellFluid *FluidWell;
        /// Optional element 'witsml20:DirectionWell' of XML schema type 'witsml20:WellDirection'
        enum witsml20__WellDirection *DirectionWell;
        /// Optional element 'witsml20:DTimSpud' of XML schema type 'eml21:TimeStamp'
        std::string *DTimSpud;
        /// Optional element 'witsml20:DTimPa' of XML schema type 'eml21:TimeStamp'
        std::string *DTimPa;
        /// Optional element 'witsml20:WaterDepth' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *WaterDepth;
        /// Optional element 'witsml20:GeographicLocationWGS84' of XML schema type 'witsml20:GeodeticWellLocation'
        witsml20__GeodeticWellLocation *GeographicLocationWGS84;
        /// Optional element 'witsml20:WellLocation' of XML schema type 'witsml20:AbstractWellLocation'
        std::vector<witsml20__AbstractWellLocation *> WellLocation;
        /// Optional element 'witsml20:WellPublicLandSurveySystemLocation' of XML schema type 'witsml20:PublicLandSurveySystem'
        witsml20__PublicLandSurveySystem *WellPublicLandSurveySystemLocation;
        /// Optional element 'witsml20:ReferencePoint' of XML schema type 'witsml20:ReferencePoint'
        std::vector<witsml20__ReferencePoint *> ReferencePoint;
        /// Optional element 'witsml20:WellheadElevation' of XML schema type 'witsml20:WellElevationCoord'
        witsml20__WellElevationCoord *WellheadElevation;
        /// Optional element 'witsml20:WellDatum' of XML schema type 'witsml20:WellDatum'
        std::vector<witsml20__WellDatum *> WellDatum;
        /// Optional element 'witsml20:GroundElevation' of XML schema type 'witsml20:WellElevationCoord'
        witsml20__WellElevationCoord *GroundElevation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Well
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Well; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Well, default initialized and not managed by a soap context
        virtual witsml20__Well *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Well); }
      public:
        /// Constructor with default initializations
        witsml20__Well() : NameLegal(), NumLicense(), NumGovt(), DTimLicense(), Field(), Country(), State(), County(), Region(), District(), Block(), TimeZone(), Operator(), OperatorDiv(), OriginalOperator(), PcInterest(), NumAPI(), StatusWell(), PurposeWell(), FluidWell(), DirectionWell(), DTimSpud(), DTimPa(), WaterDepth(), GeographicLocationWGS84(), WellLocation(), WellPublicLandSurveySystemLocation(), ReferencePoint(), WellheadElevation(), WellDatum(), GroundElevation() { }
        virtual ~witsml20__Well() { }
        /// Friend allocator used by soap_new_witsml20__Well(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Well * SOAP_FMAC2 soap_instantiate_witsml20__Well(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:189 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore (-29)
/* complex XML schema type 'witsml20:Wellbore': */
class SOAP_CMAC witsml20__Wellbore : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:Number' of XML schema type 'eml21:String64'
        std::string *Number;
        /// Optional element 'witsml20:SuffixAPI' of XML schema type 'eml21:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml20:NumGovt' of XML schema type 'eml21:String64'
        std::string *NumGovt;
        /// Optional element 'witsml20:StatusWellbore' of XML schema type 'eml21:WellStatus'
        enum eml21__WellStatus *StatusWellbore;
        /// Optional element 'witsml20:IsActive' of XML schema type 'xsd:boolean'
        bool *IsActive;
        /// Optional element 'witsml20:PurposeWellbore' of XML schema type 'witsml20:WellPurpose'
        enum witsml20__WellPurpose *PurposeWellbore;
        /// Optional element 'witsml20:TypeWellbore' of XML schema type 'witsml20:WellboreType'
        enum witsml20__WellboreType *TypeWellbore;
        /// Optional element 'witsml20:Shape' of XML schema type 'witsml20:WellboreShape'
        enum witsml20__WellboreShape *Shape;
        /// Optional element 'witsml20:DTimKickoff' of XML schema type 'eml21:TimeStamp'
        std::string *DTimKickoff;
        /// Optional element 'witsml20:AchievedTD' of XML schema type 'xsd:boolean'
        bool *AchievedTD;
        /// Optional element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:MdBit' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml20:TvdBit' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdBit;
        /// Optional element 'witsml20:MdKickoff' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml20:TvdKickoff' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdKickoff;
        /// Optional element 'witsml20:MdPlanned' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml20:TvdPlanned' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdPlanned;
        /// Optional element 'witsml20:MdSubSeaPlanned' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdSubSeaPlanned;
        /// Optional element 'witsml20:TvdSubSeaPlanned' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *TvdSubSeaPlanned;
        /// Optional element 'witsml20:DayTarget' of XML schema type 'eml21:TimeMeasure'
        eml21__TimeMeasure *DayTarget;
        /// Required element 'witsml20:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
        /// Optional element 'witsml20:ParentWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ParentWellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Wellbore, default initialized and not managed by a soap context
        virtual witsml20__Wellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Wellbore); }
      public:
        /// Constructor with default initializations
        witsml20__Wellbore() : Number(), SuffixAPI(), NumGovt(), StatusWellbore(), IsActive(), PurposeWellbore(), TypeWellbore(), Shape(), DTimKickoff(), AchievedTD(), Md(), Tvd(), MdBit(), TvdBit(), MdKickoff(), TvdKickoff(), MdPlanned(), TvdPlanned(), MdSubSeaPlanned(), TvdSubSeaPlanned(), DayTarget(), Well(), ParentWellbore() { }
        virtual ~witsml20__Wellbore() { }
        /// Friend allocator used by soap_new_witsml20__Wellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Wellbore * SOAP_FMAC2 soap_instantiate_witsml20__Wellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:191 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion (-30)
/* complex XML schema type 'witsml20:WellboreCompletion': */
class SOAP_CMAC witsml20__WellboreCompletion : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:NameWellCompletion' of XML schema type 'eml21:String64'
        std::string NameWellCompletion;
        /// Optional element 'witsml20:WellboreCompletionNo' of XML schema type 'eml21:String64'
        std::string *WellboreCompletionNo;
        /// Optional element 'witsml20:WellboreCompletionAlias' of XML schema type 'eml21:String64'
        std::string *WellboreCompletionAlias;
        /// Optional element 'witsml20:EventHistory' of XML schema type 'witsml20:EventInfo'
        std::vector<witsml20__EventInfo *> EventHistory;
        /// Optional element 'witsml20:WellboreCompletionDate' of XML schema type 'eml21:TimeStamp'
        std::string *WellboreCompletionDate;
        /// Optional element 'witsml20:SuffixAPI' of XML schema type 'eml21:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml20:CompletionMdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *CompletionMdInterval;
        /// Optional element 'witsml20:CompletionTvdInterval' of XML schema type 'eml21:TvdInterval'
        eml21__TvdInterval *CompletionTvdInterval;
        /// Optional element 'witsml20:CurrentStatus' of XML schema type 'witsml20:CompletionStatus'
        enum witsml20__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml20:StatusDate' of XML schema type 'eml21:TimeStamp'
        std::string *StatusDate;
        /// Optional element 'witsml20:StatusHistory' of XML schema type 'witsml20:CompletionStatusHistory'
        std::vector<witsml20__CompletionStatusHistory *> StatusHistory;
        /// Optional element 'witsml20:ContactIntervalSet' of XML schema type 'witsml20:ContactIntervalSet'
        witsml20__ContactIntervalSet *ContactIntervalSet;
        /// Required element 'witsml20:ReferenceWellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferenceWellbore;
        /// Required element 'witsml20:WellCompletion' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *WellCompletion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreCompletion, default initialized and not managed by a soap context
        virtual witsml20__WellboreCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreCompletion); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreCompletion() : NameWellCompletion(), WellboreCompletionNo(), WellboreCompletionAlias(), EventHistory(), WellboreCompletionDate(), SuffixAPI(), CompletionMdInterval(), CompletionTvdInterval(), CurrentStatus(), StatusDate(), StatusHistory(), ContactIntervalSet(), ReferenceWellbore(), WellCompletion() { }
        virtual ~witsml20__WellboreCompletion() { }
        /// Friend allocator used by soap_new_witsml20__WellboreCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreCompletion * SOAP_FMAC2 soap_instantiate_witsml20__WellboreCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:207 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent (-38)
/* complex XML schema type 'witsml20:DownholeComponent': */
class SOAP_CMAC witsml20__DownholeComponent : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:StartDate' of XML schema type 'eml21:TimeStamp'
        std::string *StartDate;
        /// Optional element 'witsml20:EndDate' of XML schema type 'eml21:TimeStamp'
        std::string *EndDate;
        /// Optional element 'witsml20:DownholeStringSet' of XML schema type 'witsml20:DownholeStringSet'
        witsml20__DownholeStringSet *DownholeStringSet;
        /// Optional element 'witsml20:PerforationSets' of XML schema type 'witsml20:PerforationSets'
        witsml20__PerforationSets *PerforationSets;
        /// Optional element 'witsml20:EquipmentSet' of XML schema type 'witsml20:EquipmentSet'
        witsml20__EquipmentSet *EquipmentSet;
        /// Required element 'witsml20:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
        /// Optional element 'witsml20:WellHead' of XML schema type 'witsml20:DownholeString'
        witsml20__DownholeString *WellHead;
        /// Optional element 'witsml20:BoreholeStringSet' of XML schema type 'witsml20:BoreholeStringSet'
        witsml20__BoreholeStringSet *BoreholeStringSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DownholeComponent, default initialized and not managed by a soap context
        virtual witsml20__DownholeComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DownholeComponent); }
      public:
        /// Constructor with default initializations
        witsml20__DownholeComponent() : StartDate(), EndDate(), DownholeStringSet(), PerforationSets(), EquipmentSet(), Well(), WellHead(), BoreholeStringSet() { }
        virtual ~witsml20__DownholeComponent() { }
        /// Friend allocator used by soap_new_witsml20__DownholeComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DownholeComponent * SOAP_FMAC2 soap_instantiate_witsml20__DownholeComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:223 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection (-46)
/* complex XML schema type 'witsml20:EquipmentConnection': */
class SOAP_CMAC witsml20__EquipmentConnection : public witsml20__Connection {
      public:
        /// Optional element 'witsml20:RadialOffset' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *RadialOffset;
        /// Optional element 'witsml20:ConnectionForm' of XML schema type 'witsml20:ConnectionFormType'
        enum witsml20__ConnectionFormType *ConnectionForm;
        /// Optional element 'witsml20:ConnectionUpset' of XML schema type 'eml21:String64'
        std::string *ConnectionUpset;
        /// Optional element 'witsml20:ConnectionType' of XML schema type 'witsml20:AbstractConnectionType'
        witsml20__AbstractConnectionType *ConnectionType;
        /// Required attribute 'stringEquipmentReferenceUid' of XML schema type 'eml21:String64'
        std::string stringEquipmentReferenceUid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__EquipmentConnection, default initialized and not managed by a soap context
        virtual witsml20__EquipmentConnection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__EquipmentConnection); }
      public:
        /// Constructor with default initializations
        witsml20__EquipmentConnection() : RadialOffset(), ConnectionForm(), ConnectionUpset(), ConnectionType(), stringEquipmentReferenceUid() { }
        virtual ~witsml20__EquipmentConnection() { }
        /// Friend allocator used by soap_new_witsml20__EquipmentConnection(struct soap*, int)
        friend SOAP_FMAC1 witsml20__EquipmentConnection * SOAP_FMAC2 soap_instantiate_witsml20__EquipmentConnection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:255 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType (-62)
/* complex XML schema type 'witsml20:CasingConnectionType': */
class SOAP_CMAC witsml20__CasingConnectionType : public witsml20__AbstractConnectionType {
      public:
        /// Required element 'witsml20:CasingConnectionType' of XML schema type 'witsml20:CasingConnectionTypes'
        enum witsml20__CasingConnectionTypes CasingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CasingConnectionType, default initialized and not managed by a soap context
        virtual witsml20__CasingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CasingConnectionType); }
      public:
        /// Constructor with default initializations
        witsml20__CasingConnectionType() : CasingConnectionType() { }
        virtual ~witsml20__CasingConnectionType() { }
        /// Friend allocator used by soap_new_witsml20__CasingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CasingConnectionType * SOAP_FMAC2 soap_instantiate_witsml20__CasingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:257 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType (-63)
/* complex XML schema type 'witsml20:TubingConnectionType': */
class SOAP_CMAC witsml20__TubingConnectionType : public witsml20__AbstractConnectionType {
      public:
        /// Required element 'witsml20:TubingConnectionType' of XML schema type 'witsml20:TubingConnectionTypes'
        enum witsml20__TubingConnectionTypes TubingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__TubingConnectionType, default initialized and not managed by a soap context
        virtual witsml20__TubingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__TubingConnectionType); }
      public:
        /// Constructor with default initializations
        witsml20__TubingConnectionType() : TubingConnectionType() { }
        virtual ~witsml20__TubingConnectionType() { }
        /// Friend allocator used by soap_new_witsml20__TubingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml20__TubingConnectionType * SOAP_FMAC2 soap_instantiate_witsml20__TubingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:259 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType (-64)
/* complex XML schema type 'witsml20:RodConnectionType': */
class SOAP_CMAC witsml20__RodConnectionType : public witsml20__AbstractConnectionType {
      public:
        /// Required element 'witsml20:RodConnectionType' of XML schema type 'witsml20:RodConnectionTypes'
        enum witsml20__RodConnectionTypes RodConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__RodConnectionType, default initialized and not managed by a soap context
        virtual witsml20__RodConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__RodConnectionType); }
      public:
        /// Constructor with default initializations
        witsml20__RodConnectionType() : RodConnectionType() { }
        virtual ~witsml20__RodConnectionType() { }
        /// Friend allocator used by soap_new_witsml20__RodConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml20__RodConnectionType * SOAP_FMAC2 soap_instantiate_witsml20__RodConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:261 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType (-65)
/* complex XML schema type 'witsml20:OtherConnectionType': */
class SOAP_CMAC witsml20__OtherConnectionType : public witsml20__AbstractConnectionType {
      public:
        /// Required element 'witsml20:OtherConnectionType' of XML schema type 'witsml20:OtherConnectionTypes'
        enum witsml20__OtherConnectionTypes OtherConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__OtherConnectionType, default initialized and not managed by a soap context
        virtual witsml20__OtherConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__OtherConnectionType); }
      public:
        /// Constructor with default initializations
        witsml20__OtherConnectionType() : OtherConnectionType() { }
        virtual ~witsml20__OtherConnectionType() { }
        /// Friend allocator used by soap_new_witsml20__OtherConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml20__OtherConnectionType * SOAP_FMAC2 soap_instantiate_witsml20__OtherConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:263 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular (-66)
/* complex XML schema type 'witsml20:Tubular': */
class SOAP_CMAC witsml20__Tubular : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:TypeTubularAssy' of XML schema type 'witsml20:TubularAssembly'
        enum witsml20__TubularAssembly TypeTubularAssy;
        /// Optional element 'witsml20:ValveFloat' of XML schema type 'xsd:boolean'
        bool *ValveFloat;
        /// Optional element 'witsml20:SourceNuclear' of XML schema type 'xsd:boolean'
        bool *SourceNuclear;
        /// Optional element 'witsml20:DiaHoleAssy' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DiaHoleAssy;
        /// Optional element 'witsml20:TubularComponent' of XML schema type 'witsml20:TubularComponent'
        std::vector<witsml20__TubularComponent *> TubularComponent;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Tubular, default initialized and not managed by a soap context
        virtual witsml20__Tubular *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Tubular); }
      public:
        /// Constructor with default initializations
        witsml20__Tubular() : TypeTubularAssy(), ValveFloat(), SourceNuclear(), DiaHoleAssy(), TubularComponent(), Wellbore() { }
        virtual ~witsml20__Tubular() { }
        /// Friend allocator used by soap_new_witsml20__Tubular(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Tubular * SOAP_FMAC2 soap_instantiate_witsml20__Tubular(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:28997 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml20__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml20__BendAngle_sequence (-1353)
/* Wrapper: */
struct SOAP_CMAC __witsml20__BendAngle_sequence {
      public:
        /** Optional element 'witsml20:BendAngle' of XML schema type 'eml21:PlaneAngleMeasure' */
        eml21__PlaneAngleMeasure *BendAngle;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml20__BendAngle_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1___witsml20__BendAngle_sequence; }
        /** Constructor with member initializations */
        __witsml20__BendAngle_sequence() : BendAngle() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __witsml20__BendAngle_sequence * SOAP_FMAC2 soap_instantiate___witsml20__BendAngle_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:291 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle (-80)
/* complex XML schema type 'witsml20:BendAngle': */
class SOAP_CMAC witsml20__BendAngle : public witsml20__AbstractRotarySteerableTool {
      public:
        struct __witsml20__BendAngle_sequence *__BendAngle_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BendAngle, default initialized and not managed by a soap context
        virtual witsml20__BendAngle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BendAngle); }
      public:
        /// Constructor with default initializations
        witsml20__BendAngle() : __BendAngle_sequence() { }
        virtual ~witsml20__BendAngle() { }
        /// Friend allocator used by soap_new_witsml20__BendAngle(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BendAngle * SOAP_FMAC2 soap_instantiate_witsml20__BendAngle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:29031 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml20__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_1___witsml20__BendOffset_sequence (-1355)
/* Wrapper: */
struct SOAP_CMAC __witsml20__BendOffset_sequence {
      public:
        /** Optional element 'witsml20:BendOffset' of XML schema type 'eml21:LengthMeasure' */
        eml21__LengthMeasure *BendOffset;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml20__BendOffset_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1___witsml20__BendOffset_sequence; }
        /** Constructor with member initializations */
        __witsml20__BendOffset_sequence() : BendOffset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __witsml20__BendOffset_sequence * SOAP_FMAC2 soap_instantiate___witsml20__BendOffset_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:293 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset (-81)
/* complex XML schema type 'witsml20:BendOffset': */
class SOAP_CMAC witsml20__BendOffset : public witsml20__AbstractRotarySteerableTool {
      public:
        struct __witsml20__BendOffset_sequence *__BendOffset_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BendOffset, default initialized and not managed by a soap context
        virtual witsml20__BendOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BendOffset); }
      public:
        /// Constructor with default initializations
        witsml20__BendOffset() : __BendOffset_sequence() { }
        virtual ~witsml20__BendOffset() { }
        /// Friend allocator used by soap_new_witsml20__BendOffset(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BendOffset * SOAP_FMAC2 soap_instantiate_witsml20__BendOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:295 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion (-82)
/* complex XML schema type 'witsml20:WellCompletion': */
class SOAP_CMAC witsml20__WellCompletion : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:FieldID' of XML schema type 'eml21:String64'
        std::string *FieldID;
        /// Optional element 'witsml20:FieldCode' of XML schema type 'eml21:String64'
        std::string *FieldCode;
        /// Optional element 'witsml20:FieldType' of XML schema type 'eml21:String64'
        std::string *FieldType;
        /// Optional element 'witsml20:EffectiveDate' of XML schema type 'eml21:TimeStamp'
        std::string *EffectiveDate;
        /// Optional element 'witsml20:ExpiredDate' of XML schema type 'eml21:TimeStamp'
        std::string *ExpiredDate;
        /// Optional element 'witsml20:E_P_RightsID' of XML schema type 'eml21:String64'
        std::string *E_USCOREP_USCORERightsID;
        /// Optional element 'witsml20:CurrentStatus' of XML schema type 'witsml20:CompletionStatus'
        enum witsml20__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml20:StatusDate' of XML schema type 'eml21:TimeStamp'
        std::string *StatusDate;
        /// Optional element 'witsml20:StatusHistory' of XML schema type 'witsml20:CompletionStatusHistory'
        std::vector<witsml20__CompletionStatusHistory *> StatusHistory;
        /// Required element 'witsml20:Well' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Well;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellCompletion, default initialized and not managed by a soap context
        virtual witsml20__WellCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellCompletion); }
      public:
        /// Constructor with default initializations
        witsml20__WellCompletion() : FieldID(), FieldCode(), FieldType(), EffectiveDate(), ExpiredDate(), E_USCOREP_USCORERightsID(), CurrentStatus(), StatusDate(), StatusHistory(), Well() { }
        virtual ~witsml20__WellCompletion() { }
        /// Friend allocator used by soap_new_witsml20__WellCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellCompletion * SOAP_FMAC2 soap_instantiate_witsml20__WellCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:299 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry (-84)
/* complex XML schema type 'witsml20:WellboreGeometry': */
class SOAP_CMAC witsml20__WellboreGeometry : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:MdBase' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdBase;
        /// Optional element 'witsml20:GapAir' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *GapAir;
        /// Optional element 'witsml20:DepthWaterMean' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DepthWaterMean;
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:WellboreGeometrySection' of XML schema type 'witsml20:WellboreGeometrySection'
        std::vector<witsml20__WellboreGeometrySection *> WellboreGeometrySection;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:BhaRun' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> BhaRun;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreGeometry, default initialized and not managed by a soap context
        virtual witsml20__WellboreGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreGeometry); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreGeometry() : MdBase(), GapAir(), DepthWaterMean(), GrowingStatus(), WellboreGeometrySection(), Wellbore(), BhaRun() { }
        virtual ~witsml20__WellboreGeometry() { }
        /// Friend allocator used by soap_new_witsml20__WellboreGeometry(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreGeometry * SOAP_FMAC2 soap_instantiate_witsml20__WellboreGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:303 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet (-86)
/* complex XML schema type 'witsml20:ChannelSet': */
class SOAP_CMAC witsml20__ChannelSet : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:Index' of XML schema type 'witsml20:ChannelIndex'
        std::vector<witsml20__ChannelIndex *> Index;
        /// Required element 'witsml20:Channel' of XML schema type 'witsml20:Channel'
        std::vector<witsml20__Channel *> Channel;
        /// Optional element 'witsml20:Data' of XML schema type 'witsml20:ChannelData'
        witsml20__ChannelData *Data;
        /// Optional element 'witsml20:ChannelState' of XML schema type 'witsml20:ChannelState'
        enum witsml20__ChannelState *ChannelState;
        /// Optional element 'witsml20:TimeDepth' of XML schema type 'eml21:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml20:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml20:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml20:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml20:StartIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml20:EndIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml20:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml20:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml20:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml20:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml20:Derivation' of XML schema type 'witsml20:ChannelDerivation'
        enum witsml20__ChannelDerivation *Derivation;
        /// Optional element 'witsml20:LoggingMethod' of XML schema type 'witsml20:LoggingMethod'
        enum witsml20__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml20:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:DataContext' of XML schema type 'witsml20:AbstractLogDataContext'
        witsml20__AbstractLogDataContext *DataContext;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ChannelSet, default initialized and not managed by a soap context
        virtual witsml20__ChannelSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ChannelSet); }
      public:
        /// Constructor with default initializations
        witsml20__ChannelSet() : Index(), Channel(), Data(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), DataContext() { }
        virtual ~witsml20__ChannelSet() { }
        /// Friend allocator used by soap_new_witsml20__ChannelSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ChannelSet * SOAP_FMAC2 soap_instantiate_witsml20__ChannelSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:309 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth (-89)
/* complex XML schema type 'witsml20:PassIndexedDepth': */
class SOAP_CMAC witsml20__PassIndexedDepth : public witsml20__AbstractIndexValue {
      public:
        /// Required element 'witsml20:Pass' of XML schema type 'xsd:int'
        int Pass;
        /// Required element 'witsml20:Direction' of XML schema type 'xsd:int'
        int Direction;
        /// Required element 'witsml20:Depth' of XML schema type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__PassIndexedDepth, default initialized and not managed by a soap context
        virtual witsml20__PassIndexedDepth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__PassIndexedDepth); }
      public:
        /// Constructor with default initializations
        witsml20__PassIndexedDepth() : Pass(), Direction(), Depth() { }
        virtual ~witsml20__PassIndexedDepth() { }
        /// Friend allocator used by soap_new_witsml20__PassIndexedDepth(struct soap*, int)
        friend SOAP_FMAC1 witsml20__PassIndexedDepth * SOAP_FMAC2 soap_instantiate_witsml20__PassIndexedDepth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:313 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Log
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Log (-91)
/* complex XML schema type 'witsml20:Log': */
class SOAP_CMAC witsml20__Log : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:ChannelState' of XML schema type 'witsml20:ChannelState'
        enum witsml20__ChannelState *ChannelState;
        /// Optional element 'witsml20:TimeDepth' of XML schema type 'eml21:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml20:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml20:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml20:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml20:StartIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml20:EndIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml20:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml20:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml20:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml20:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml20:Derivation' of XML schema type 'witsml20:ChannelDerivation'
        enum witsml20__ChannelDerivation *Derivation;
        /// Optional element 'witsml20:LoggingMethod' of XML schema type 'witsml20:LoggingMethod'
        enum witsml20__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml20:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Required element 'witsml20:ChannelSet' of XML schema type 'witsml20:ChannelSet'
        std::vector<witsml20__ChannelSet *> ChannelSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Log
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Log; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Log, default initialized and not managed by a soap context
        virtual witsml20__Log *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Log); }
      public:
        /// Constructor with default initializations
        witsml20__Log() : ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), ChannelSet() { }
        virtual ~witsml20__Log() { }
        /// Friend allocator used by soap_new_witsml20__Log(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Log * SOAP_FMAC2 soap_instantiate_witsml20__Log(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:317 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue (-93)
/* complex XML schema type 'witsml20:TimeIndexValue': */
class SOAP_CMAC witsml20__TimeIndexValue : public witsml20__AbstractIndexValue {
      public:
        /// Required element 'witsml20:Time' of XML schema type 'eml21:TimeStamp'
        std::string Time;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__TimeIndexValue, default initialized and not managed by a soap context
        virtual witsml20__TimeIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__TimeIndexValue); }
      public:
        /// Constructor with default initializations
        witsml20__TimeIndexValue() : Time() { }
        virtual ~witsml20__TimeIndexValue() { }
        /// Friend allocator used by soap_new_witsml20__TimeIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml20__TimeIndexValue * SOAP_FMAC2 soap_instantiate_witsml20__TimeIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:319 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue (-94)
/* complex XML schema type 'witsml20:DepthIndexValue': */
class SOAP_CMAC witsml20__DepthIndexValue : public witsml20__AbstractIndexValue {
      public:
        /// Required element 'witsml20:Depth' of XML schema type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DepthIndexValue, default initialized and not managed by a soap context
        virtual witsml20__DepthIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DepthIndexValue); }
      public:
        /// Constructor with default initializations
        witsml20__DepthIndexValue() : Depth() { }
        virtual ~witsml20__DepthIndexValue() { }
        /// Friend allocator used by soap_new_witsml20__DepthIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DepthIndexValue * SOAP_FMAC2 soap_instantiate_witsml20__DepthIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Channel (-95)
/* complex XML schema type 'witsml20:Channel': */
class SOAP_CMAC witsml20__Channel : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:Mnemonic' of XML schema type 'eml21:String64'
        std::string Mnemonic;
        /// Required element 'witsml20:DataType' of XML schema type 'witsml20:EtpDataType'
        enum witsml20__EtpDataType DataType;
        /// Required element 'witsml20:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:Source' of XML schema type 'eml21:String64'
        std::string *Source;
        /// Optional element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:AxisDefinition' of XML schema type 'witsml20:LogChannelAxis'
        std::vector<witsml20__LogChannelAxis *> AxisDefinition;
        /// Optional element 'witsml20:ChannelState' of XML schema type 'witsml20:ChannelState'
        enum witsml20__ChannelState *ChannelState;
        /// Required element 'witsml20:TimeDepth' of XML schema type 'eml21:String64'
        std::string TimeDepth;
        /// Required element 'witsml20:ChannelClass' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelClass;
        /// Optional element 'witsml20:RunNumber' of XML schema type 'eml21:String64'
        std::string *RunNumber;
        /// Optional element 'witsml20:PassNumber' of XML schema type 'eml21:String64'
        std::string *PassNumber;
        /// Optional element 'witsml20:StartIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml20:EndIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *EndIndex;
        /// Required element 'witsml20:LoggingCompanyName' of XML schema type 'eml21:String64'
        std::string LoggingCompanyName;
        /// Optional element 'witsml20:LoggingCompanyCode' of XML schema type 'eml21:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml20:ToolName' of XML schema type 'eml21:String64'
        std::string *ToolName;
        /// Optional element 'witsml20:ToolClass' of XML schema type 'eml21:String64'
        std::string *ToolClass;
        /// Optional element 'witsml20:Derivation' of XML schema type 'witsml20:ChannelDerivation'
        enum witsml20__ChannelDerivation *Derivation;
        /// Optional element 'witsml20:LoggingMethod' of XML schema type 'witsml20:LoggingMethod'
        enum witsml20__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml20:NominalHoleSize' of XML schema type 'eml21:LengthMeasureExt'
        eml21__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml20:PointMetadata' of XML schema type 'witsml20:PointMetadata'
        std::vector<witsml20__PointMetadata *> PointMetadata;
        /// Optional element 'witsml20:DerivedFrom' of XML schema type 'eml21:DataObjectReference'
        std::vector<eml21__DataObjectReference *> DerivedFrom;
        /// Required element 'witsml20:Index' of XML schema type 'witsml20:ChannelIndex'
        std::vector<witsml20__ChannelIndex *> Index;
        /// Optional element 'witsml20:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Channel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Channel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Channel, default initialized and not managed by a soap context
        virtual witsml20__Channel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Channel); }
      public:
        /// Constructor with default initializations
        witsml20__Channel() : Mnemonic(), DataType(), Uom(), GrowingStatus(), Source(), Wellbore(), AxisDefinition(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), PointMetadata(), DerivedFrom(), Index(), Parent() { }
        virtual ~witsml20__Channel() { }
        /// Friend allocator used by soap_new_witsml20__Channel(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Channel * SOAP_FMAC2 soap_instantiate_witsml20__Channel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:325 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext (-97)
/* complex XML schema type 'witsml20:IndexRangeContext': */
class SOAP_CMAC witsml20__IndexRangeContext : public witsml20__AbstractLogDataContext {
      public:
        /// Required element 'witsml20:StartIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *StartIndex;
        /// Required element 'witsml20:EndIndex' of XML schema type 'witsml20:AbstractIndexValue'
        witsml20__AbstractIndexValue *EndIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__IndexRangeContext, default initialized and not managed by a soap context
        virtual witsml20__IndexRangeContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__IndexRangeContext); }
      public:
        /// Constructor with default initializations
        witsml20__IndexRangeContext() : StartIndex(), EndIndex() { }
        virtual ~witsml20__IndexRangeContext() { }
        /// Friend allocator used by soap_new_witsml20__IndexRangeContext(struct soap*, int)
        friend SOAP_FMAC1 witsml20__IndexRangeContext * SOAP_FMAC2 soap_instantiate_witsml20__IndexRangeContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:327 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext (-98)
/* complex XML schema type 'witsml20:ObjectContext': */
class SOAP_CMAC witsml20__ObjectContext : public witsml20__AbstractLogDataContext {
      public:
        /// Required element 'witsml20:ObjectReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ObjectReference;
        /// Required element 'witsml20:SubObjectReference' of XML schema type 'eml21:String64'
        std::string SubObjectReference;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ObjectContext, default initialized and not managed by a soap context
        virtual witsml20__ObjectContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ObjectContext); }
      public:
        /// Constructor with default initializations
        witsml20__ObjectContext() : ObjectReference(), SubObjectReference() { }
        virtual ~witsml20__ObjectContext() { }
        /// Friend allocator used by soap_new_witsml20__ObjectContext(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ObjectContext * SOAP_FMAC2 soap_instantiate_witsml20__ObjectContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:331 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext (-100)
/* complex XML schema type 'witsml20:ChannelValueContext': */
class SOAP_CMAC witsml20__ChannelValueContext : public witsml20__AbstractLogDataContext {
      public:
        /// Required element 'witsml20:ChannelReference' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ChannelReference;
        /// Required element 'witsml20:DataValue' of XML schema type 'xsd:string'
        std::string DataValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ChannelValueContext, default initialized and not managed by a soap context
        virtual witsml20__ChannelValueContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ChannelValueContext); }
      public:
        /// Constructor with default initializations
        witsml20__ChannelValueContext() : ChannelReference(), DataValue() { }
        virtual ~witsml20__ChannelValueContext() { }
        /// Friend allocator used by soap_new_witsml20__ChannelValueContext(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ChannelValueContext * SOAP_FMAC2 soap_instantiate_witsml20__ChannelValueContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:333 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun (-101)
/* complex XML schema type 'witsml20:BhaRun': */
class SOAP_CMAC witsml20__BhaRun : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStart;
        /// Optional element 'witsml20:DTimStop' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStop;
        /// Optional element 'witsml20:DTimStartDrilling' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStartDrilling;
        /// Optional element 'witsml20:DTimStopDrilling' of XML schema type 'eml21:TimeStamp'
        std::string *DTimStopDrilling;
        /// Optional element 'witsml20:PlanDogleg' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *PlanDogleg;
        /// Optional element 'witsml20:ActDogleg' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *ActDogleg;
        /// Optional element 'witsml20:ActDoglegMx' of XML schema type 'eml21:AnglePerLengthMeasure'
        eml21__AnglePerLengthMeasure *ActDoglegMx;
        /// Optional element 'witsml20:StatusBha' of XML schema type 'witsml20:BhaStatus'
        enum witsml20__BhaStatus *StatusBha;
        /// Optional element 'witsml20:NumBitRun' of XML schema type 'xsd:int'
        int *NumBitRun;
        /// Optional element 'witsml20:NumStringRun' of XML schema type 'xsd:int'
        int *NumStringRun;
        /// Optional element 'witsml20:ReasonTrip' of XML schema type 'eml21:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml20:ObjectiveBha' of XML schema type 'eml21:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml20:DrillingParams' of XML schema type 'witsml20:DrillingParams'
        std::vector<witsml20__DrillingParams *> DrillingParams;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:Tubular' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Tubular;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BhaRun, default initialized and not managed by a soap context
        virtual witsml20__BhaRun *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BhaRun); }
      public:
        /// Constructor with default initializations
        witsml20__BhaRun() : DTimStart(), DTimStop(), DTimStartDrilling(), DTimStopDrilling(), PlanDogleg(), ActDogleg(), ActDoglegMx(), StatusBha(), NumBitRun(), NumStringRun(), ReasonTrip(), ObjectiveBha(), DrillingParams(), Wellbore(), Tubular() { }
        virtual ~witsml20__BhaRun() { }
        /// Friend allocator used by soap_new_witsml20__BhaRun(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BhaRun * SOAP_FMAC2 soap_instantiate_witsml20__BhaRun(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:341 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport (-105)
/* complex XML schema type 'witsml20:FluidsReport': */
class SOAP_CMAC witsml20__FluidsReport : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:DTim' of XML schema type 'eml21:TimeStamp'
        std::string DTim;
        /// Required element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:NumReport' of XML schema type 'xsd:int'
        int *NumReport;
        /// Optional element 'witsml20:Fluid' of XML schema type 'witsml20:Fluid'
        std::vector<witsml20__Fluid *> Fluid;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__FluidsReport, default initialized and not managed by a soap context
        virtual witsml20__FluidsReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__FluidsReport); }
      public:
        /// Constructor with default initializations
        witsml20__FluidsReport() : DTim(), Md(), Tvd(), NumReport(), Fluid(), Wellbore() { }
        virtual ~witsml20__FluidsReport() { }
        /// Friend allocator used by soap_new_witsml20__FluidsReport(struct soap*, int)
        friend SOAP_FMAC1 witsml20__FluidsReport * SOAP_FMAC2 soap_instantiate_witsml20__FluidsReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:343 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport (-106)
/* complex XML schema type 'witsml20:DrillReport': */
class SOAP_CMAC witsml20__DrillReport : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:DTimStart' of XML schema type 'eml21:TimeStamp'
        std::string DTimStart;
        /// Required element 'witsml20:DTimEnd' of XML schema type 'eml21:TimeStamp'
        std::string DTimEnd;
        /// Optional element 'witsml20:VersionKind' of XML schema type 'witsml20:OpsReportVersion'
        enum witsml20__OpsReportVersion *VersionKind;
        /// Optional element 'witsml20:CreateDate' of XML schema type 'eml21:TimeStamp'
        std::string *CreateDate;
        /// Optional element 'witsml20:WellDatum' of XML schema type 'witsml20:WellDatum'
        std::vector<witsml20__WellDatum *> WellDatum;
        /// Optional element 'witsml20:BitRecord' of XML schema type 'witsml20:BitRecord'
        std::vector<witsml20__BitRecord *> BitRecord;
        /// Optional element 'witsml20:DrillActivity' of XML schema type 'witsml20:DrillActivity'
        std::vector<witsml20__DrillActivity *> DrillActivity;
        /// Optional element 'witsml20:LogInfo' of XML schema type 'witsml20:DrillReportLogInfo'
        std::vector<witsml20__DrillReportLogInfo *> LogInfo;
        /// Optional element 'witsml20:CoreInfo' of XML schema type 'witsml20:DrillReportCoreInfo'
        std::vector<witsml20__DrillReportCoreInfo *> CoreInfo;
        /// Optional element 'witsml20:WellTestInfo' of XML schema type 'witsml20:DrillReportWellTestInfo'
        std::vector<witsml20__DrillReportWellTestInfo *> WellTestInfo;
        /// Optional element 'witsml20:FormTestInfo' of XML schema type 'witsml20:DrillReportFormTestInfo'
        std::vector<witsml20__DrillReportFormTestInfo *> FormTestInfo;
        /// Optional element 'witsml20:LithShowInfo' of XML schema type 'witsml20:DrillReportLithShowInfo'
        std::vector<witsml20__DrillReportLithShowInfo *> LithShowInfo;
        /// Optional element 'witsml20:EquipFailureInfo' of XML schema type 'witsml20:DrillReportEquipFailureInfo'
        std::vector<witsml20__DrillReportEquipFailureInfo *> EquipFailureInfo;
        /// Optional element 'witsml20:ControlIncidentInfo' of XML schema type 'witsml20:DrillReportControlIncidentInfo'
        std::vector<witsml20__DrillReportControlIncidentInfo *> ControlIncidentInfo;
        /// Optional element 'witsml20:StratInfo' of XML schema type 'witsml20:DrillReportStratInfo'
        std::vector<witsml20__DrillReportStratInfo *> StratInfo;
        /// Optional element 'witsml20:PerfInfo' of XML schema type 'witsml20:DrillReportPerfInfo'
        std::vector<witsml20__DrillReportPerfInfo *> PerfInfo;
        /// Optional element 'witsml20:GasReadingInfo' of XML schema type 'witsml20:DrillReportGasReadingInfo'
        std::vector<witsml20__DrillReportGasReadingInfo *> GasReadingInfo;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:WellAlias' of XML schema type 'eml21:ObjectAlias'
        eml21__ObjectAlias *WellAlias;
        /// Optional element 'witsml20:WellboreAlias' of XML schema type 'eml21:ObjectAlias'
        std::vector<eml21__ObjectAlias *> WellboreAlias;
        /// Optional element 'witsml20:WellboreInfo' of XML schema type 'witsml20:DrillReportWellboreInfo'
        witsml20__DrillReportWellboreInfo *WellboreInfo;
        /// Optional element 'witsml20:StatusInfo' of XML schema type 'witsml20:DrillReportStatusInfo'
        std::vector<witsml20__DrillReportStatusInfo *> StatusInfo;
        /// Optional element 'witsml20:Fluid' of XML schema type 'witsml20:Fluid'
        std::vector<witsml20__Fluid *> Fluid;
        /// Optional element 'witsml20:PorePressure' of XML schema type 'witsml20:DrillReportPorePressure'
        std::vector<witsml20__DrillReportPorePressure *> PorePressure;
        /// Optional element 'witsml20:ExtendedReport' of XML schema type 'witsml20:TimestampedCommentString'
        witsml20__TimestampedCommentString *ExtendedReport;
        /// Optional element 'witsml20:SurveyStation' of XML schema type 'witsml20:DrillReportSurveyStation'
        std::vector<witsml20__DrillReportSurveyStation *> SurveyStation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DrillReport, default initialized and not managed by a soap context
        virtual witsml20__DrillReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DrillReport); }
      public:
        /// Constructor with default initializations
        witsml20__DrillReport() : DTimStart(), DTimEnd(), VersionKind(), CreateDate(), WellDatum(), BitRecord(), DrillActivity(), LogInfo(), CoreInfo(), WellTestInfo(), FormTestInfo(), LithShowInfo(), EquipFailureInfo(), ControlIncidentInfo(), StratInfo(), PerfInfo(), GasReadingInfo(), Wellbore(), WellAlias(), WellboreAlias(), WellboreInfo(), StatusInfo(), Fluid(), PorePressure(), ExtendedReport(), SurveyStation() { }
        virtual ~witsml20__DrillReport() { }
        /// Friend allocator used by soap_new_witsml20__DrillReport(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DrillReport * SOAP_FMAC2 soap_instantiate_witsml20__DrillReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:30227 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleCirculatingTemperature_sequence_ (-1414)
/* Wrapper: */
struct SOAP_CMAC __witsml20__BottomHoleCirculatingTemperature_sequence_ {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleCirculatingTemperature_sequence_ */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleCirculatingTemperature_sequence_; }
        /** Constructor with member initializations */
        __witsml20__BottomHoleCirculatingTemperature_sequence_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __witsml20__BottomHoleCirculatingTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml20__BottomHoleCirculatingTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:381 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature (-125)
/* complex XML schema type 'witsml20:BottomHoleCirculatingTemperature': */
class SOAP_CMAC witsml20__BottomHoleCirculatingTemperature : public witsml20__AbstractBottomHoleTemperature {
      public:
        struct __witsml20__BottomHoleCirculatingTemperature_sequence_ *__BottomHoleCirculatingTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BottomHoleCirculatingTemperature, default initialized and not managed by a soap context
        virtual witsml20__BottomHoleCirculatingTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BottomHoleCirculatingTemperature); }
      public:
        /// Constructor with default initializations
        witsml20__BottomHoleCirculatingTemperature() : __BottomHoleCirculatingTemperature_sequence_() { }
        virtual ~witsml20__BottomHoleCirculatingTemperature() { }
        /// Friend allocator used by soap_new_witsml20__BottomHoleCirculatingTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BottomHoleCirculatingTemperature * SOAP_FMAC2 soap_instantiate_witsml20__BottomHoleCirculatingTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:30266 */
#ifndef SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleStaticTemperature_sequence_ (-1416)
/* Wrapper: */
struct SOAP_CMAC __witsml20__BottomHoleStaticTemperature_sequence_ {
      public:
        /** Required element 'witsml20:eTimStatic' of XML schema type 'eml21:TimeMeasure' */
        eml21__TimeMeasure *eTimStatic;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleStaticTemperature_sequence_ */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1___witsml20__BottomHoleStaticTemperature_sequence_; }
        /** Constructor with member initializations */
        __witsml20__BottomHoleStaticTemperature_sequence_() : eTimStatic() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __witsml20__BottomHoleStaticTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml20__BottomHoleStaticTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:383 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature (-126)
/* complex XML schema type 'witsml20:BottomHoleStaticTemperature': */
class SOAP_CMAC witsml20__BottomHoleStaticTemperature : public witsml20__AbstractBottomHoleTemperature {
      public:
        struct __witsml20__BottomHoleStaticTemperature_sequence_ *__BottomHoleStaticTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__BottomHoleStaticTemperature, default initialized and not managed by a soap context
        virtual witsml20__BottomHoleStaticTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__BottomHoleStaticTemperature); }
      public:
        /// Constructor with default initializations
        witsml20__BottomHoleStaticTemperature() : __BottomHoleStaticTemperature_sequence_() { }
        virtual ~witsml20__BottomHoleStaticTemperature() { }
        /// Friend allocator used by soap_new_witsml20__BottomHoleStaticTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml20__BottomHoleStaticTemperature * SOAP_FMAC2 soap_instantiate_witsml20__BottomHoleStaticTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:385 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker (-127)
/* complex XML schema type 'witsml20:WellboreMarker': */
class SOAP_CMAC witsml20__WellboreMarker : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:ChronostratigraphicTop' of XML schema type 'witsml20:GeochronologicalUnit'
        witsml20__GeochronologicalUnit *ChronostratigraphicTop;
        /// Optional element 'witsml20:LithostratigraphicTop' of XML schema type 'witsml20:LithostratigraphicUnit'
        witsml20__LithostratigraphicUnit *LithostratigraphicTop;
        /// Required element 'witsml20:Md' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *Md;
        /// Optional element 'witsml20:Tvd' of XML schema type 'witsml20:WellVerticalDepthCoord'
        witsml20__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml20:DipAngle' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipAngle;
        /// Optional element 'witsml20:DipDirection' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *DipDirection;
        /// Optional element 'witsml20:Trajectory' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Trajectory;
        /// Optional element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreMarker, default initialized and not managed by a soap context
        virtual witsml20__WellboreMarker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreMarker); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreMarker() : ChronostratigraphicTop(), LithostratigraphicTop(), Md(), Tvd(), DipAngle(), DipDirection(), Trajectory(), Wellbore() { }
        virtual ~witsml20__WellboreMarker() { }
        /// Friend allocator used by soap_new_witsml20__WellboreMarker(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreMarker * SOAP_FMAC2 soap_instantiate_witsml20__WellboreMarker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:387 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet (-128)
/* complex XML schema type 'witsml20:WellboreMarkerSet': */
class SOAP_CMAC witsml20__WellboreMarkerSet : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MarkerSetInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MarkerSetInterval;
        /// Optional element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:FormationMarker' of XML schema type 'witsml20:WellboreMarker'
        std::vector<witsml20__WellboreMarker *> FormationMarker;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreMarkerSet, default initialized and not managed by a soap context
        virtual witsml20__WellboreMarkerSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreMarkerSet); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreMarkerSet() : MarkerSetInterval(), Wellbore(), FormationMarker() { }
        virtual ~witsml20__WellboreMarkerSet() { }
        /// Friend allocator used by soap_new_witsml20__WellboreMarkerSet(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreMarkerSet * SOAP_FMAC2 soap_instantiate_witsml20__WellboreMarkerSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:391 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology (-130)
/* complex XML schema type 'witsml20:WellboreGeology': */
class SOAP_CMAC witsml20__WellboreGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:ShowIntervalSet' of XML schema type 'witsml20:ShowEvaluation'
        witsml20__ShowEvaluation *ShowIntervalSet;
        /// Optional element 'witsml20:InterpretedGeologyIntervalSet' of XML schema type 'witsml20:InterpretedGeology'
        witsml20__InterpretedGeology *InterpretedGeologyIntervalSet;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:CuttingsIntervalSet' of XML schema type 'witsml20:CuttingsGeology'
        witsml20__CuttingsGeology *CuttingsIntervalSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellboreGeology, default initialized and not managed by a soap context
        virtual witsml20__WellboreGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellboreGeology); }
      public:
        /// Constructor with default initializations
        witsml20__WellboreGeology() : MdInterval(), ShowIntervalSet(), InterpretedGeologyIntervalSet(), Wellbore(), CuttingsIntervalSet() { }
        virtual ~witsml20__WellboreGeology() { }
        /// Friend allocator used by soap_new_witsml20__WellboreGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellboreGeology * SOAP_FMAC2 soap_instantiate_witsml20__WellboreGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:393 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation (-131)
/* complex XML schema type 'witsml20:ShowEvaluation': */
class SOAP_CMAC witsml20__ShowEvaluation : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:EvaluatedIntervalShow' of XML schema type 'witsml20:ShowEvaluationInterval'
        std::vector<witsml20__ShowEvaluationInterval *> EvaluatedIntervalShow;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ShowEvaluation, default initialized and not managed by a soap context
        virtual witsml20__ShowEvaluation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ShowEvaluation); }
      public:
        /// Constructor with default initializations
        witsml20__ShowEvaluation() : MdInterval(), GrowingStatus(), EvaluatedIntervalShow(), Wellbore() { }
        virtual ~witsml20__ShowEvaluation() { }
        /// Friend allocator used by soap_new_witsml20__ShowEvaluation(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ShowEvaluation * SOAP_FMAC2 soap_instantiate_witsml20__ShowEvaluation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:395 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology (-132)
/* complex XML schema type 'witsml20:InterpretedGeology': */
class SOAP_CMAC witsml20__InterpretedGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:GeologicIntervalInterpreted' of XML schema type 'witsml20:InterpretedGeologyInterval'
        std::vector<witsml20__InterpretedGeologyInterval *> GeologicIntervalInterpreted;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__InterpretedGeology, default initialized and not managed by a soap context
        virtual witsml20__InterpretedGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__InterpretedGeology); }
      public:
        /// Constructor with default initializations
        witsml20__InterpretedGeology() : MdInterval(), GrowingStatus(), GeologicIntervalInterpreted(), Wellbore() { }
        virtual ~witsml20__InterpretedGeology() { }
        /// Friend allocator used by soap_new_witsml20__InterpretedGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml20__InterpretedGeology * SOAP_FMAC2 soap_instantiate_witsml20__InterpretedGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:403 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval (-136)
/* complex XML schema type 'witsml20:ShowEvaluationInterval': */
class SOAP_CMAC witsml20__ShowEvaluationInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Required element 'witsml20:ShowFluid' of XML schema type 'witsml20:ShowFluid'
        enum witsml20__ShowFluid ShowFluid;
        /// Optional element 'witsml20:ShowRating' of XML schema type 'witsml20:ShowRating'
        enum witsml20__ShowRating *ShowRating;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ShowEvaluationInterval, default initialized and not managed by a soap context
        virtual witsml20__ShowEvaluationInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ShowEvaluationInterval); }
      public:
        /// Constructor with default initializations
        witsml20__ShowEvaluationInterval() : MdInterval(), Citation(), ShowFluid(), ShowRating(), uid() { }
        virtual ~witsml20__ShowEvaluationInterval() { }
        /// Friend allocator used by soap_new_witsml20__ShowEvaluationInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ShowEvaluationInterval * SOAP_FMAC2 soap_instantiate_witsml20__ShowEvaluationInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:407 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval (-138)
/* complex XML schema type 'witsml20:CuttingsGeologyInterval': */
class SOAP_CMAC witsml20__CuttingsGeologyInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:DensBulk' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensBulk;
        /// Optional element 'witsml20:DensShale' of XML schema type 'eml21:MassPerVolumeMeasure'
        eml21__MassPerVolumeMeasure *DensShale;
        /// Optional element 'witsml20:Calcite' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Calcite;
        /// Optional element 'witsml20:CalcStab' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *CalcStab;
        /// Optional element 'witsml20:Cec' of XML schema type 'eml21:DimensionlessMeasure'
        eml21__DimensionlessMeasure *Cec;
        /// Optional element 'witsml20:Dolomite' of XML schema type 'eml21:VolumePerVolumeMeasure'
        eml21__VolumePerVolumeMeasure *Dolomite;
        /// Optional element 'witsml20:SizeMin' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeMin;
        /// Optional element 'witsml20:SizeMax' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *SizeMax;
        /// Optional element 'witsml20:Qft' of XML schema type 'eml21:IlluminanceMeasure'
        eml21__IlluminanceMeasure *Qft;
        /// Optional element 'witsml20:CleaningMethod' of XML schema type 'eml21:String64'
        std::string *CleaningMethod;
        /// Optional element 'witsml20:DryingMethod' of XML schema type 'eml21:String64'
        std::string *DryingMethod;
        /// Optional element 'witsml20:CuttingsIntervalLithology' of XML schema type 'witsml20:CuttingsIntervalLithology'
        std::vector<witsml20__CuttingsIntervalLithology *> CuttingsIntervalLithology;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CuttingsGeologyInterval, default initialized and not managed by a soap context
        virtual witsml20__CuttingsGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CuttingsGeologyInterval); }
      public:
        /// Constructor with default initializations
        witsml20__CuttingsGeologyInterval() : MdInterval(), Citation(), DensBulk(), DensShale(), Calcite(), CalcStab(), Cec(), Dolomite(), SizeMin(), SizeMax(), Qft(), CleaningMethod(), DryingMethod(), CuttingsIntervalLithology(), uid() { }
        virtual ~witsml20__CuttingsGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml20__CuttingsGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CuttingsGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml20__CuttingsGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:409 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology (-139)
/* complex XML schema type 'witsml20:CuttingsGeology': */
class SOAP_CMAC witsml20__CuttingsGeology : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:CuttingsInterval' of XML schema type 'witsml20:CuttingsGeologyInterval'
        std::vector<witsml20__CuttingsGeologyInterval *> CuttingsInterval;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__CuttingsGeology, default initialized and not managed by a soap context
        virtual witsml20__CuttingsGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__CuttingsGeology); }
      public:
        /// Constructor with default initializations
        witsml20__CuttingsGeology() : MdInterval(), GrowingStatus(), CuttingsInterval(), Wellbore() { }
        virtual ~witsml20__CuttingsGeology() { }
        /// Friend allocator used by soap_new_witsml20__CuttingsGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml20__CuttingsGeology * SOAP_FMAC2 soap_instantiate_witsml20__CuttingsGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:413 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval (-141)
/* complex XML schema type 'witsml20:InterpretedGeologyInterval': */
class SOAP_CMAC witsml20__InterpretedGeologyInterval : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:MdInterval' of XML schema type 'eml21:MdInterval'
        eml21__MdInterval *MdInterval;
        /// Optional element 'witsml20:Citation' of XML schema type 'eml21:Citation'
        eml21__Citation *Citation;
        /// Optional element 'witsml20:GeochronologicalUnit' of XML schema type 'witsml20:GeochronologicalUnit'
        std::vector<witsml20__GeochronologicalUnit *> GeochronologicalUnit;
        /// Optional element 'witsml20:LithostratigraphicUnit' of XML schema type 'witsml20:LithostratigraphicUnit'
        std::vector<witsml20__LithostratigraphicUnit *> LithostratigraphicUnit;
        /// Optional element 'witsml20:InterpretedLithology' of XML schema type 'witsml20:InterpretedIntervalLithology'
        witsml20__InterpretedIntervalLithology *InterpretedLithology;
        /// Required attribute 'uid' of XML schema type 'eml21:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__InterpretedGeologyInterval, default initialized and not managed by a soap context
        virtual witsml20__InterpretedGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__InterpretedGeologyInterval); }
      public:
        /// Constructor with default initializations
        witsml20__InterpretedGeologyInterval() : MdInterval(), Citation(), GeochronologicalUnit(), LithostratigraphicUnit(), InterpretedLithology(), uid() { }
        virtual ~witsml20__InterpretedGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml20__InterpretedGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml20__InterpretedGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml20__InterpretedGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:415 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory (-142)
/* complex XML schema type 'witsml20:Trajectory': */
class SOAP_CMAC witsml20__Trajectory : public eml21__AbstractObject {
      public:
        /// Required element 'witsml20:GrowingStatus' of XML schema type 'witsml20:ChannelStatus'
        enum witsml20__ChannelStatus GrowingStatus;
        /// Optional element 'witsml20:DTimTrajStart' of XML schema type 'eml21:TimeStamp'
        std::string *DTimTrajStart;
        /// Optional element 'witsml20:DTimTrajEnd' of XML schema type 'eml21:TimeStamp'
        std::string *DTimTrajEnd;
        /// Optional element 'witsml20:MdMn' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdMn;
        /// Optional element 'witsml20:MdMx' of XML schema type 'witsml20:MeasuredDepthCoord'
        witsml20__MeasuredDepthCoord *MdMx;
        /// Optional element 'witsml20:ServiceCompany' of XML schema type 'eml21:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml20:MagDeclUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *MagDeclUsed;
        /// Optional element 'witsml20:GridConUsed' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *GridConUsed;
        /// Optional element 'witsml20:AziVertSect' of XML schema type 'eml21:PlaneAngleMeasure'
        eml21__PlaneAngleMeasure *AziVertSect;
        /// Optional element 'witsml20:DispNsVertSectOrig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispNsVertSectOrig;
        /// Optional element 'witsml20:DispEwVertSectOrig' of XML schema type 'eml21:LengthMeasure'
        eml21__LengthMeasure *DispEwVertSectOrig;
        /// Optional element 'witsml20:Definitive' of XML schema type 'xsd:boolean'
        bool *Definitive;
        /// Optional element 'witsml20:Memory' of XML schema type 'xsd:boolean'
        bool *Memory;
        /// Optional element 'witsml20:FinalTraj' of XML schema type 'xsd:boolean'
        bool *FinalTraj;
        /// Optional element 'witsml20:AziRef' of XML schema type 'witsml20:AziRef'
        enum witsml20__AziRef *AziRef;
        /// Optional element 'witsml20:TrajectoryStation' of XML schema type 'witsml20:TrajectoryStation'
        std::vector<witsml20__TrajectoryStation *> TrajectoryStation;
        /// Required element 'witsml20:Wellbore' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Wellbore;
        /// Optional element 'witsml20:ParentTrajectory' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ParentTrajectory;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__Trajectory, default initialized and not managed by a soap context
        virtual witsml20__Trajectory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__Trajectory); }
      public:
        /// Constructor with default initializations
        witsml20__Trajectory() : GrowingStatus(), DTimTrajStart(), DTimTrajEnd(), MdMn(), MdMx(), ServiceCompany(), MagDeclUsed(), GridConUsed(), AziVertSect(), DispNsVertSectOrig(), DispEwVertSectOrig(), Definitive(), Memory(), FinalTraj(), AziRef(), TrajectoryStation(), Wellbore(), ParentTrajectory() { }
        virtual ~witsml20__Trajectory() { }
        /// Friend allocator used by soap_new_witsml20__Trajectory(struct soap*, int)
        friend SOAP_FMAC1 witsml20__Trajectory * SOAP_FMAC2 soap_instantiate_witsml20__Trajectory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:439 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel (-154)
/* complex XML schema type 'witsml20:ToolErrorModel': */
class SOAP_CMAC witsml20__ToolErrorModel : public eml21__AbstractObject {
      public:
        /// Optional element 'witsml20:TypeSurveyTool' of XML schema type 'witsml20:TypeSurveyTool'
        enum witsml20__TypeSurveyTool *TypeSurveyTool;
        /// Optional element 'witsml20:UseErrorTermSet' of XML schema type 'eml21:String64'
        std::string *UseErrorTermSet;
        /// Optional element 'witsml20:Authorization' of XML schema type 'witsml20:IscwsaAuthorizationData'
        witsml20__IscwsaAuthorizationData *Authorization;
        /// Optional element 'witsml20:OperatingCondition' of XML schema type 'witsml20:IscwsaSurveyToolOperatingCondition'
        std::vector<witsml20__IscwsaSurveyToolOperatingCondition *> OperatingCondition;
        /// Optional element 'witsml20:OperatingInterval' of XML schema type 'witsml20:IscwsaSurveyToolOperatingInterval'
        std::vector<witsml20__IscwsaSurveyToolOperatingInterval *> OperatingInterval;
        /// Optional element 'witsml20:ModelParameters' of XML schema type 'witsml20:IscwsaModelParameters'
        witsml20__IscwsaModelParameters *ModelParameters;
        /// Required element 'witsml20:ErrorTermValue' of XML schema type 'witsml20:IscwsaErrorTermValue'
        std::vector<witsml20__IscwsaErrorTermValue *> ErrorTermValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__ToolErrorModel, default initialized and not managed by a soap context
        virtual witsml20__ToolErrorModel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__ToolErrorModel); }
      public:
        /// Constructor with default initializations
        witsml20__ToolErrorModel() : TypeSurveyTool(), UseErrorTermSet(), Authorization(), OperatingCondition(), OperatingInterval(), ModelParameters(), ErrorTermValue() { }
        virtual ~witsml20__ToolErrorModel() { }
        /// Friend allocator used by soap_new_witsml20__ToolErrorModel(struct soap*, int)
        friend SOAP_FMAC1 witsml20__ToolErrorModel * SOAP_FMAC2 soap_instantiate_witsml20__ToolErrorModel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:453 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray (-161)
/* complex XML schema type 'eml21:AbstractBooleanArray': */
class SOAP_CMAC eml21__AbstractBooleanArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractBooleanArray, default initialized and not managed by a soap context
        virtual eml21__AbstractBooleanArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractBooleanArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractBooleanArray() { }
        virtual ~eml21__AbstractBooleanArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractBooleanArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractBooleanArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractBooleanArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:459 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray (-164)
/* complex XML schema type 'eml21:AbstractNumericArray': */
class SOAP_CMAC eml21__AbstractNumericArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractNumericArray, default initialized and not managed by a soap context
        virtual eml21__AbstractNumericArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractNumericArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractNumericArray() { }
        virtual ~eml21__AbstractNumericArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractNumericArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractNumericArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractNumericArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:461 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray (-165)
/* complex XML schema type 'eml21:AbstractStringArray': */
class SOAP_CMAC eml21__AbstractStringArray : public eml21__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractStringArray, default initialized and not managed by a soap context
        virtual eml21__AbstractStringArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractStringArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractStringArray() { }
        virtual ~eml21__AbstractStringArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractStringArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractStringArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractStringArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1243 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference (-556)
/* complex XML schema type 'eml21:EpcExternalPartReference': */
class SOAP_CMAC eml21__EpcExternalPartReference : public eml21__AbstractObject {
      public:
        /// Optional element 'eml21:Filename' of XML schema type 'eml21:String2000'
        std::string *Filename;
        /// Optional element 'eml21:MimeType' of XML schema type 'eml21:String2000'
        std::string *MimeType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EpcExternalPartReference, default initialized and not managed by a soap context
        virtual eml21__EpcExternalPartReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EpcExternalPartReference); }
      public:
        /// Constructor with default initializations
        eml21__EpcExternalPartReference() : Filename(), MimeType() { }
        virtual ~eml21__EpcExternalPartReference() { }
        /// Friend allocator used by soap_new_eml21__EpcExternalPartReference(struct soap*, int)
        friend SOAP_FMAC1 eml21__EpcExternalPartReference * SOAP_FMAC2 soap_instantiate_eml21__EpcExternalPartReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1253 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1_eml21__Activity (-561)
/* complex XML schema type 'eml21:Activity': */
class SOAP_CMAC eml21__Activity : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:ActivityDescriptor' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ActivityDescriptor;
        /// Optional element 'eml21:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
        /// Required element 'eml21:Parameter' of XML schema type 'eml21:AbstractActivityParameter'
        std::vector<eml21__AbstractActivityParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__Activity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__Activity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__Activity, default initialized and not managed by a soap context
        virtual eml21__Activity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__Activity); }
      public:
        /// Constructor with default initializations
        eml21__Activity() : ActivityDescriptor(), Parent(), Parameter() { }
        virtual ~eml21__Activity() { }
        /// Friend allocator used by soap_new_eml21__Activity(struct soap*, int)
        friend SOAP_FMAC1 eml21__Activity * SOAP_FMAC2 soap_instantiate_eml21__Activity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1255 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate (-562)
/* complex XML schema type 'eml21:ActivityTemplate': */
class SOAP_CMAC eml21__ActivityTemplate : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Parameter' of XML schema type 'eml21:ParameterTemplate'
        std::vector<eml21__ParameterTemplate *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityTemplate, default initialized and not managed by a soap context
        virtual eml21__ActivityTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityTemplate); }
      public:
        /// Constructor with default initializations
        eml21__ActivityTemplate() : Parameter() { }
        virtual ~eml21__ActivityTemplate() { }
        /// Friend allocator used by soap_new_eml21__ActivityTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityTemplate * SOAP_FMAC2 soap_instantiate_eml21__ActivityTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1257 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter (-563)
/* complex XML schema type 'eml21:DataObjectParameter': */
class SOAP_CMAC eml21__DataObjectParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:DataObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataObjectParameter, default initialized and not managed by a soap context
        virtual eml21__DataObjectParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataObjectParameter); }
      public:
        /// Constructor with default initializations
        eml21__DataObjectParameter() : DataObject() { }
        virtual ~eml21__DataObjectParameter() { }
        /// Friend allocator used by soap_new_eml21__DataObjectParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataObjectParameter * SOAP_FMAC2 soap_instantiate_eml21__DataObjectParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1259 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter (-564)
/* complex XML schema type 'eml21:DoubleQuantityParameter': */
class SOAP_CMAC eml21__DoubleQuantityParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml21:Uom' of XML schema type 'eml21:UnitOfMeasureExt'
        std::string Uom;
        /// Optional element 'eml21:CustomUnitDictionary' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoubleQuantityParameter, default initialized and not managed by a soap context
        virtual eml21__DoubleQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoubleQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml21__DoubleQuantityParameter() : Value(), Uom(), CustomUnitDictionary() { }
        virtual ~eml21__DoubleQuantityParameter() { }
        /// Friend allocator used by soap_new_eml21__DoubleQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoubleQuantityParameter * SOAP_FMAC2 soap_instantiate_eml21__DoubleQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1261 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter (-565)
/* complex XML schema type 'eml21:IntegerQuantityParameter': */
class SOAP_CMAC eml21__IntegerQuantityParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerQuantityParameter, default initialized and not managed by a soap context
        virtual eml21__IntegerQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml21__IntegerQuantityParameter() : Value() { }
        virtual ~eml21__IntegerQuantityParameter() { }
        /// Friend allocator used by soap_new_eml21__IntegerQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerQuantityParameter * SOAP_FMAC2 soap_instantiate_eml21__IntegerQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1263 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey (-566)
/* complex XML schema type 'eml21:ObjectParameterKey': */
class SOAP_CMAC eml21__ObjectParameterKey : public eml21__AbstractParameterKey {
      public:
        /// Required element 'eml21:DataObject' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ObjectParameterKey, default initialized and not managed by a soap context
        virtual eml21__ObjectParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ObjectParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__ObjectParameterKey() : DataObject() { }
        virtual ~eml21__ObjectParameterKey() { }
        /// Friend allocator used by soap_new_eml21__ObjectParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__ObjectParameterKey * SOAP_FMAC2 soap_instantiate_eml21__ObjectParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1267 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter (-568)
/* complex XML schema type 'eml21:StringParameter': */
class SOAP_CMAC eml21__StringParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:Value' of XML schema type 'eml21:String2000'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringParameter, default initialized and not managed by a soap context
        virtual eml21__StringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringParameter); }
      public:
        /// Constructor with default initializations
        eml21__StringParameter() : Value() { }
        virtual ~eml21__StringParameter() { }
        /// Friend allocator used by soap_new_eml21__StringParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringParameter * SOAP_FMAC2 soap_instantiate_eml21__StringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1269 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter (-569)
/* complex XML schema type 'eml21:TimeIndexParameter': */
class SOAP_CMAC eml21__TimeIndexParameter : public eml21__AbstractActivityParameter {
      public:
        /// Required element 'eml21:TimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndexParameter, default initialized and not managed by a soap context
        virtual eml21__TimeIndexParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndexParameter); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndexParameter() : TimeIndex() { }
        virtual ~eml21__TimeIndexParameter() { }
        /// Friend allocator used by soap_new_eml21__TimeIndexParameter(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndexParameter * SOAP_FMAC2 soap_instantiate_eml21__TimeIndexParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1271 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey (-570)
/* complex XML schema type 'eml21:TimeIndexParameterKey': */
class SOAP_CMAC eml21__TimeIndexParameterKey : public eml21__AbstractParameterKey {
      public:
        /// Required element 'eml21:TimeIndex' of XML schema type 'eml21:TimeIndex'
        eml21__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeIndexParameterKey, default initialized and not managed by a soap context
        virtual eml21__TimeIndexParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeIndexParameterKey); }
      public:
        /// Constructor with default initializations
        eml21__TimeIndexParameterKey() : TimeIndex() { }
        virtual ~eml21__TimeIndexParameterKey() { }
        /// Friend allocator used by soap_new_eml21__TimeIndexParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeIndexParameterKey * SOAP_FMAC2 soap_instantiate_eml21__TimeIndexParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1275 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind (-572)
/* complex XML schema type 'eml21:PropertyKind': */
class SOAP_CMAC eml21__PropertyKind : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:IsAbstract' of XML schema type 'xsd:boolean'
        bool IsAbstract;
        /// Optional element 'eml21:DeprecationDate' of XML schema type 'eml21:TimeStamp'
        std::string *DeprecationDate;
        /// Required element 'eml21:QuantityClass' of XML schema type 'eml21:QuantityClassKindExt'
        std::string QuantityClass;
        /// Optional element 'eml21:Parent' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PropertyKind, default initialized and not managed by a soap context
        virtual eml21__PropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PropertyKind); }
      public:
        /// Constructor with default initializations
        eml21__PropertyKind() : IsAbstract(), DeprecationDate(), QuantityClass(), Parent() { }
        virtual ~eml21__PropertyKind() { }
        /// Friend allocator used by soap_new_eml21__PropertyKind(struct soap*, int)
        friend SOAP_FMAC1 eml21__PropertyKind * SOAP_FMAC2 soap_instantiate_eml21__PropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1277 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary (-573)
/* complex XML schema type 'eml21:PropertyKindDictionary': */
class SOAP_CMAC eml21__PropertyKindDictionary : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:PropertyKind' of XML schema type 'eml21:PropertyKind'
        std::vector<eml21__PropertyKind *> PropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PropertyKindDictionary, default initialized and not managed by a soap context
        virtual eml21__PropertyKindDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PropertyKindDictionary); }
      public:
        /// Constructor with default initializations
        eml21__PropertyKindDictionary() : PropertyKind() { }
        virtual ~eml21__PropertyKindDictionary() { }
        /// Friend allocator used by soap_new_eml21__PropertyKindDictionary(struct soap*, int)
        friend SOAP_FMAC1 eml21__PropertyKindDictionary * SOAP_FMAC2 soap_instantiate_eml21__PropertyKindDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1283 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries (-576)
/* complex XML schema type 'eml21:TimeSeries': */
class SOAP_CMAC eml21__TimeSeries : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Time' of XML schema type 'eml21:GeologicTime'
        std::vector<eml21__GeologicTime *> Time;
        /// Optional element 'eml21:TimeSeriesParentage' of XML schema type 'eml21:TimeSeriesParentage'
        eml21__TimeSeriesParentage *TimeSeriesParentage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeSeries, default initialized and not managed by a soap context
        virtual eml21__TimeSeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeSeries); }
      public:
        /// Constructor with default initializations
        eml21__TimeSeries() : Time(), TimeSeriesParentage() { }
        virtual ~eml21__TimeSeries() { }
        /// Friend allocator used by soap_new_eml21__TimeSeries(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeSeries * SOAP_FMAC2 soap_instantiate_eml21__TimeSeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1287 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure (-578)
/* complex XML schema type 'eml21:AbsolutePressure': */
class SOAP_CMAC eml21__AbsolutePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:AbsolutePressure' of XML schema type 'eml21:PressureMeasureExt'
        eml21__PressureMeasureExt *AbsolutePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsolutePressure, default initialized and not managed by a soap context
        virtual eml21__AbsolutePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsolutePressure); }
      public:
        /// Constructor with default initializations
        eml21__AbsolutePressure() : AbsolutePressure() { }
        virtual ~eml21__AbsolutePressure() { }
        /// Friend allocator used by soap_new_eml21__AbsolutePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsolutePressure * SOAP_FMAC2 soap_instantiate_eml21__AbsolutePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1297 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure (-583)
/* complex XML schema type 'eml21:GaugePressure': */
class SOAP_CMAC eml21__GaugePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:GaugePressure' of XML schema type 'eml21:PressureMeasureExt'
        eml21__PressureMeasureExt *GaugePressure;
        /// Optional element 'eml21:ReferencePressure' of XML schema type 'eml21:ReferencePressure'
        eml21__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GaugePressure, default initialized and not managed by a soap context
        virtual eml21__GaugePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GaugePressure); }
      public:
        /// Constructor with default initializations
        eml21__GaugePressure() : GaugePressure(), ReferencePressure() { }
        virtual ~eml21__GaugePressure() { }
        /// Friend allocator used by soap_new_eml21__GaugePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__GaugePressure * SOAP_FMAC2 soap_instantiate_eml21__GaugePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:31883 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure_
#define SOAP_TYPE_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure_ (-1457)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml21__union_ReferenceTemperaturePressure_
{
        #define SOAP_UNION_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure__ReferenceTempPres	(1)	/**< union variant selector value for member ReferenceTempPres */
        std::string *ReferenceTempPres;
};
#endif

/* eml2_1ForGsoap.h:1303 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure (-586)
/* complex XML schema type 'eml21:ReferenceTemperaturePressure': */
class SOAP_CMAC eml21__ReferenceTemperaturePressure : public eml21__AbstractTemperaturePressure {
      public:
        /// Union with union _eml21__union_ReferenceTemperaturePressure_ variant selector __union_ReferenceTemperaturePressure_ set to one of: SOAP_UNION_gsoap_eml2_1__eml21__union_ReferenceTemperaturePressure__ReferenceTempPres
        int __union_ReferenceTemperaturePressure_;
        union _eml21__union_ReferenceTemperaturePressure_ union_ReferenceTemperaturePressure_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReferenceTemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__ReferenceTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReferenceTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__ReferenceTemperaturePressure() : __union_ReferenceTemperaturePressure_() { }
        virtual ~eml21__ReferenceTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__ReferenceTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReferenceTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__ReferenceTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1305 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure (-587)
/* complex XML schema type 'eml21:RelativePressure': */
class SOAP_CMAC eml21__RelativePressure : public eml21__AbstractPressureValue {
      public:
        /// Required element 'eml21:RelativePressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *RelativePressure;
        /// Required element 'eml21:ReferencePressure' of XML schema type 'eml21:ReferencePressure'
        eml21__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RelativePressure, default initialized and not managed by a soap context
        virtual eml21__RelativePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RelativePressure); }
      public:
        /// Constructor with default initializations
        eml21__RelativePressure() : RelativePressure(), ReferencePressure() { }
        virtual ~eml21__RelativePressure() { }
        /// Friend allocator used by soap_new_eml21__RelativePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RelativePressure * SOAP_FMAC2 soap_instantiate_eml21__RelativePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1307 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure (-588)
/* complex XML schema type 'eml21:TemperaturePressure': */
class SOAP_CMAC eml21__TemperaturePressure : public eml21__AbstractTemperaturePressure {
      public:
        /// Required element 'eml21:Temperature' of XML schema type 'eml21:ThermodynamicTemperatureMeasure'
        eml21__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'eml21:Pressure' of XML schema type 'eml21:PressureMeasure'
        eml21__PressureMeasure *Pressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperaturePressure, default initialized and not managed by a soap context
        virtual eml21__TemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml21__TemperaturePressure() : Temperature(), Pressure() { }
        virtual ~eml21__TemperaturePressure() { }
        /// Friend allocator used by soap_new_eml21__TemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperaturePressure * SOAP_FMAC2 soap_instantiate_eml21__TemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1317 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs (-593)
/* complex XML schema type 'eml21:GeodeticCrs': */
class SOAP_CMAC eml21__GeodeticCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:AbstractGeodeticCrs' of XML schema type 'eml21:AbstractGeodeticCrs'
        eml21__AbstractGeodeticCrs *AbstractGeodeticCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticCrs() : AbstractGeodeticCrs() { }
        virtual ~eml21__GeodeticCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1319 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs (-594)
/* complex XML schema type 'eml21:GeodeticEpsgCrs': */
class SOAP_CMAC eml21__GeodeticEpsgCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticEpsgCrs() : EpsgCode() { }
        virtual ~eml21__GeodeticEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1321 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs (-595)
/* complex XML schema type 'eml21:GeodeticLocalAuthorityCrs': */
class SOAP_CMAC eml21__GeodeticLocalAuthorityCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__GeodeticLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1323 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs (-596)
/* complex XML schema type 'eml21:GeodeticUnknownCrs': */
class SOAP_CMAC eml21__GeodeticUnknownCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticUnknownCrs() : Unknown() { }
        virtual ~eml21__GeodeticUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1325 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs (-597)
/* complex XML schema type 'eml21:GeodeticWktCrs': */
class SOAP_CMAC eml21__GeodeticWktCrs : public eml21__AbstractGeodeticCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GeodeticWktCrs, default initialized and not managed by a soap context
        virtual eml21__GeodeticWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GeodeticWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__GeodeticWktCrs() : WellKnownText() { }
        virtual ~eml21__GeodeticWktCrs() { }
        /// Friend allocator used by soap_new_eml21__GeodeticWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__GeodeticWktCrs * SOAP_FMAC2 soap_instantiate_eml21__GeodeticWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1327 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs (-598)
/* complex XML schema type 'eml21:ProjectedCrs': */
class SOAP_CMAC eml21__ProjectedCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:AxisOrder' of XML schema type 'eml21:AxisOrder2d'
        enum eml21__AxisOrder2d AxisOrder;
        /// Required element 'eml21:AbstractProjectedCrs' of XML schema type 'eml21:AbstractProjectedCrs'
        eml21__AbstractProjectedCrs *AbstractProjectedCrs;
        /// Optional attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string *uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedCrs() : AxisOrder(), AbstractProjectedCrs(), uom() { }
        virtual ~eml21__ProjectedCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1329 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs (-599)
/* complex XML schema type 'eml21:ProjectedEpsgCrs': */
class SOAP_CMAC eml21__ProjectedEpsgCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedEpsgCrs() : EpsgCode() { }
        virtual ~eml21__ProjectedEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1331 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs (-600)
/* complex XML schema type 'eml21:ProjectedLocalAuthorityCrs': */
class SOAP_CMAC eml21__ProjectedLocalAuthorityCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__ProjectedLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1333 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs (-601)
/* complex XML schema type 'eml21:ProjectedUnknownCrs': */
class SOAP_CMAC eml21__ProjectedUnknownCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedUnknownCrs() : Unknown() { }
        virtual ~eml21__ProjectedUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1335 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs (-602)
/* complex XML schema type 'eml21:ProjectedWktCrs': */
class SOAP_CMAC eml21__ProjectedWktCrs : public eml21__AbstractProjectedCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ProjectedWktCrs, default initialized and not managed by a soap context
        virtual eml21__ProjectedWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ProjectedWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__ProjectedWktCrs() : WellKnownText() { }
        virtual ~eml21__ProjectedWktCrs() { }
        /// Friend allocator used by soap_new_eml21__ProjectedWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__ProjectedWktCrs * SOAP_FMAC2 soap_instantiate_eml21__ProjectedWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1337 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs (-603)
/* complex XML schema type 'eml21:VerticalCrs': */
class SOAP_CMAC eml21__VerticalCrs : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:Direction' of XML schema type 'eml21:VerticalDirection'
        enum eml21__VerticalDirection Direction;
        /// Required element 'eml21:AbstractVerticalCrs' of XML schema type 'eml21:AbstractVerticalCrs'
        eml21__AbstractVerticalCrs *AbstractVerticalCrs;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCrs() : Direction(), AbstractVerticalCrs(), uom() { }
        virtual ~eml21__VerticalCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1339 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs (-604)
/* complex XML schema type 'eml21:VerticalEpsgCrs': */
class SOAP_CMAC eml21__VerticalEpsgCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:EpsgCode' of XML schema type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalEpsgCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalEpsgCrs() : EpsgCode() { }
        virtual ~eml21__VerticalEpsgCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalEpsgCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1341 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs (-605)
/* complex XML schema type 'eml21:VerticalLocalAuthorityCrs': */
class SOAP_CMAC eml21__VerticalLocalAuthorityCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:LocalAuthorityCrsName' of XML schema type 'eml21:AuthorityQualifiedName'
        eml21__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml21__VerticalLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1343 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs (-606)
/* complex XML schema type 'eml21:VerticalUnknownCrs': */
class SOAP_CMAC eml21__VerticalUnknownCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:Unknown' of XML schema type 'eml21:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalUnknownCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalUnknownCrs() : Unknown() { }
        virtual ~eml21__VerticalUnknownCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalUnknownCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1345 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs (-607)
/* complex XML schema type 'eml21:VerticalWktCrs': */
class SOAP_CMAC eml21__VerticalWktCrs : public eml21__AbstractVerticalCrs {
      public:
        /// Required element 'eml21:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalWktCrs, default initialized and not managed by a soap context
        virtual eml21__VerticalWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalWktCrs); }
      public:
        /// Constructor with default initializations
        eml21__VerticalWktCrs() : WellKnownText() { }
        virtual ~eml21__VerticalWktCrs() { }
        /// Friend allocator used by soap_new_eml21__VerticalWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalWktCrs * SOAP_FMAC2 soap_instantiate_eml21__VerticalWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1347 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord (-608)
/* complex XML schema type 'eml21:DataAssuranceRecord': */
class SOAP_CMAC eml21__DataAssuranceRecord : public eml21__AbstractObject {
      public:
        /// Required element 'eml21:PolicyId' of XML schema type 'eml21:String64'
        std::string PolicyId;
        /// Optional element 'eml21:PolicyName' of XML schema type 'eml21:String2000'
        std::string *PolicyName;
        /// Optional element 'eml21:ReferencedElementName' of XML schema type 'eml21:String64'
        std::string *ReferencedElementName;
        /// Optional element 'eml21:ReferencedElementUid' of XML schema type 'eml21:String64'
        std::string *ReferencedElementUid;
        /// Required element 'eml21:Origin' of XML schema type 'xsd:string'
        std::string Origin;
        /// Required element 'eml21:Conformance' of XML schema type 'xsd:boolean'
        bool Conformance;
        /// Required element 'eml21:Date' of XML schema type 'eml21:TimeStamp'
        std::string Date;
        /// Optional element 'eml21:Comment' of XML schema type 'xsd:string'
        std::string *Comment;
        /// Optional element 'eml21:FailingRules' of XML schema type 'eml21:FailingRule'
        std::vector<eml21__FailingRule *> FailingRules;
        /// Optional element 'eml21:IndexRange' of XML schema type 'eml21:IndexRange'
        eml21__IndexRange *IndexRange;
        /// Required element 'eml21:ReferencedData' of XML schema type 'eml21:DataObjectReference'
        eml21__DataObjectReference *ReferencedData;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataAssuranceRecord, default initialized and not managed by a soap context
        virtual eml21__DataAssuranceRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataAssuranceRecord); }
      public:
        /// Constructor with default initializations
        eml21__DataAssuranceRecord() : PolicyId(), PolicyName(), ReferencedElementName(), ReferencedElementUid(), Origin(), Conformance(), Date(), Comment(), FailingRules(), IndexRange(), ReferencedData() { }
        virtual ~eml21__DataAssuranceRecord() { }
        /// Friend allocator used by soap_new_eml21__DataAssuranceRecord(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataAssuranceRecord * SOAP_FMAC2 soap_instantiate_eml21__DataAssuranceRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1355 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet (-612)
/* complex XML schema type 'eml21:GraphicalInformationSet': */
class SOAP_CMAC eml21__GraphicalInformationSet : public eml21__AbstractObject {
      public:
        /// Optional element 'eml21:GraphicalInformation' of XML schema type 'eml21:AbstractGraphicalInformation'
        std::vector<eml21__AbstractGraphicalInformation *> GraphicalInformation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GraphicalInformationSet, default initialized and not managed by a soap context
        virtual eml21__GraphicalInformationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GraphicalInformationSet); }
      public:
        /// Constructor with default initializations
        eml21__GraphicalInformationSet() : GraphicalInformation() { }
        virtual ~eml21__GraphicalInformationSet() { }
        /// Friend allocator used by soap_new_eml21__GraphicalInformationSet(struct soap*, int)
        friend SOAP_FMAC1 eml21__GraphicalInformationSet * SOAP_FMAC2 soap_instantiate_eml21__GraphicalInformationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:157 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth (-13)
/* simple XML schema type 'witsml20:DistanceNorthSouth': */
class SOAP_CMAC witsml20__DistanceNorthSouth {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'reference' of XML schema type 'witsml20:NorthOrSouth'
        enum witsml20__NorthOrSouth reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DistanceNorthSouth, default initialized and not managed by a soap context
        virtual witsml20__DistanceNorthSouth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DistanceNorthSouth); }
      public:
        /// Constructor with default initializations
        witsml20__DistanceNorthSouth() : __item(), uom(), reference(), soap() { }
        virtual ~witsml20__DistanceNorthSouth() { }
        /// Friend allocator used by soap_new_witsml20__DistanceNorthSouth(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DistanceNorthSouth * SOAP_FMAC2 soap_instantiate_witsml20__DistanceNorthSouth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:159 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest (-14)
/* simple XML schema type 'witsml20:DistanceEastWest': */
class SOAP_CMAC witsml20__DistanceEastWest {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'reference' of XML schema type 'witsml20:EastOrWest'
        enum witsml20__EastOrWest reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__DistanceEastWest, default initialized and not managed by a soap context
        virtual witsml20__DistanceEastWest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__DistanceEastWest); }
      public:
        /// Constructor with default initializations
        witsml20__DistanceEastWest() : __item(), uom(), reference(), soap() { }
        virtual ~witsml20__DistanceEastWest() { }
        /// Friend allocator used by soap_new_witsml20__DistanceEastWest(struct soap*, int)
        friend SOAP_FMAC1 witsml20__DistanceEastWest * SOAP_FMAC2 soap_instantiate_witsml20__DistanceEastWest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:169 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord (-19)
/* simple XML schema type 'witsml20:WellElevationCoord': */
class SOAP_CMAC witsml20__WellElevationCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellElevationCoord, default initialized and not managed by a soap context
        virtual witsml20__WellElevationCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellElevationCoord); }
      public:
        /// Constructor with default initializations
        witsml20__WellElevationCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml20__WellElevationCoord() { }
        /// Friend allocator used by soap_new_witsml20__WellElevationCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellElevationCoord * SOAP_FMAC2 soap_instantiate_witsml20__WellElevationCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:181 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord (-25)
/* simple XML schema type 'witsml20:WellVerticalDepthCoord': */
class SOAP_CMAC witsml20__WellVerticalDepthCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__WellVerticalDepthCoord, default initialized and not managed by a soap context
        virtual witsml20__WellVerticalDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__WellVerticalDepthCoord); }
      public:
        /// Constructor with default initializations
        witsml20__WellVerticalDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml20__WellVerticalDepthCoord() { }
        /// Friend allocator used by soap_new_witsml20__WellVerticalDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml20__WellVerticalDepthCoord * SOAP_FMAC2 soap_instantiate_witsml20__WellVerticalDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:187 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord (-28)
/* simple XML schema type 'witsml20:MeasuredDepthCoord': */
class SOAP_CMAC witsml20__MeasuredDepthCoord {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Required attribute 'datum' of XML schema type 'eml21:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__MeasuredDepthCoord, default initialized and not managed by a soap context
        virtual witsml20__MeasuredDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__MeasuredDepthCoord); }
      public:
        /// Constructor with default initializations
        witsml20__MeasuredDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml20__MeasuredDepthCoord() { }
        /// Friend allocator used by soap_new_witsml20__MeasuredDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml20__MeasuredDepthCoord * SOAP_FMAC2 soap_instantiate_witsml20__MeasuredDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:437 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity (-153)
/* simple XML schema type 'witsml20:MeasureOrQuantity': */
class SOAP_CMAC witsml20__MeasureOrQuantity {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__MeasureOrQuantity, default initialized and not managed by a soap context
        virtual witsml20__MeasureOrQuantity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__MeasureOrQuantity); }
      public:
        /// Constructor with default initializations
        witsml20__MeasureOrQuantity() : __item(), uom(), soap() { }
        virtual ~witsml20__MeasureOrQuantity() { }
        /// Friend allocator used by soap_new_witsml20__MeasureOrQuantity(struct soap*, int)
        friend SOAP_FMAC1 witsml20__MeasureOrQuantity * SOAP_FMAC2 soap_instantiate_witsml20__MeasureOrQuantity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:455 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray (-162)
/* complex XML schema type 'eml21:AbstractFloatingPointArray': */
class SOAP_CMAC eml21__AbstractFloatingPointArray : public eml21__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractFloatingPointArray, default initialized and not managed by a soap context
        virtual eml21__AbstractFloatingPointArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractFloatingPointArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractFloatingPointArray() { }
        virtual ~eml21__AbstractFloatingPointArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractFloatingPointArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractFloatingPointArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractFloatingPointArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:457 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray (-163)
/* complex XML schema type 'eml21:AbstractIntegerArray': */
class SOAP_CMAC eml21__AbstractIntegerArray : public eml21__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbstractIntegerArray, default initialized and not managed by a soap context
        virtual eml21__AbstractIntegerArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbstractIntegerArray); }
      public:
        /// Constructor with default initializations
        eml21__AbstractIntegerArray() { }
        virtual ~eml21__AbstractIntegerArray() { }
        /// Friend allocator used by soap_new_eml21__AbstractIntegerArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbstractIntegerArray * SOAP_FMAC2 soap_instantiate_eml21__AbstractIntegerArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:467 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray (-168)
/* complex XML schema type 'eml21:BooleanArrayFromIndexArray': */
class SOAP_CMAC eml21__BooleanArrayFromIndexArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:Indices' of XML schema type 'eml21:AbstractIntegerArray'
        eml21__AbstractIntegerArray *Indices;
        /// Required element 'eml21:IndexIsTrue' of XML schema type 'xsd:boolean'
        bool IndexIsTrue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanArrayFromIndexArray, default initialized and not managed by a soap context
        virtual eml21__BooleanArrayFromIndexArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanArrayFromIndexArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanArrayFromIndexArray() : Count(), Indices(), IndexIsTrue() { }
        virtual ~eml21__BooleanArrayFromIndexArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanArrayFromIndexArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanArrayFromIndexArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanArrayFromIndexArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:469 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray (-169)
/* complex XML schema type 'eml21:BooleanConstantArray': */
class SOAP_CMAC eml21__BooleanConstantArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:boolean'
        bool Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanConstantArray, default initialized and not managed by a soap context
        virtual eml21__BooleanConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanConstantArray() : Value(), Count() { }
        virtual ~eml21__BooleanConstantArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanConstantArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:471 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray (-170)
/* complex XML schema type 'eml21:BooleanExternalArray': */
class SOAP_CMAC eml21__BooleanExternalArray : public eml21__AbstractBooleanArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__BooleanExternalArray, default initialized and not managed by a soap context
        virtual eml21__BooleanExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__BooleanExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__BooleanExternalArray() : Values() { }
        virtual ~eml21__BooleanExternalArray() { }
        /// Friend allocator used by soap_new_eml21__BooleanExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__BooleanExternalArray * SOAP_FMAC2 soap_instantiate_eml21__BooleanExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:483 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure (-176)
/* simple XML schema type 'eml21:GenericMeasure': */
class SOAP_CMAC eml21__GenericMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__GenericMeasure, default initialized and not managed by a soap context
        virtual eml21__GenericMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__GenericMeasure); }
      public:
        /// Constructor with default initializations
        eml21__GenericMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__GenericMeasure() { }
        /// Friend allocator used by soap_new_eml21__GenericMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__GenericMeasure * SOAP_FMAC2 soap_instantiate_eml21__GenericMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:499 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray (-184)
/* complex XML schema type 'eml21:StringConstantArray': */
class SOAP_CMAC eml21__StringConstantArray : public eml21__AbstractStringArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'eml21:String2000'
        std::string Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringConstantArray, default initialized and not managed by a soap context
        virtual eml21__StringConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__StringConstantArray() : Value(), Count() { }
        virtual ~eml21__StringConstantArray() { }
        /// Friend allocator used by soap_new_eml21__StringConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringConstantArray * SOAP_FMAC2 soap_instantiate_eml21__StringConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:501 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray (-185)
/* complex XML schema type 'eml21:StringExternalArray': */
class SOAP_CMAC eml21__StringExternalArray : public eml21__AbstractStringArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringExternalArray, default initialized and not managed by a soap context
        virtual eml21__StringExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__StringExternalArray() : Values() { }
        virtual ~eml21__StringExternalArray() { }
        /// Friend allocator used by soap_new_eml21__StringExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringExternalArray * SOAP_FMAC2 soap_instantiate_eml21__StringExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:507 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure (-188)
/* simple XML schema type 'eml21:AbsorbedDoseMeasure': */
class SOAP_CMAC eml21__AbsorbedDoseMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AbsorbedDoseUom'
        enum eml21__AbsorbedDoseUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsorbedDoseMeasure, default initialized and not managed by a soap context
        virtual eml21__AbsorbedDoseMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsorbedDoseMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AbsorbedDoseMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AbsorbedDoseMeasure() { }
        /// Friend allocator used by soap_new_eml21__AbsorbedDoseMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsorbedDoseMeasure * SOAP_FMAC2 soap_instantiate_eml21__AbsorbedDoseMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:509 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt (-189)
/* simple XML schema type 'eml21:AbsorbedDoseMeasureExt': */
class SOAP_CMAC eml21__AbsorbedDoseMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AbsorbedDoseUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AbsorbedDoseMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AbsorbedDoseMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AbsorbedDoseMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AbsorbedDoseMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AbsorbedDoseMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AbsorbedDoseMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AbsorbedDoseMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AbsorbedDoseMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:511 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure (-190)
/* simple XML schema type 'eml21:ActivityOfRadioactivityMeasure': */
class SOAP_CMAC eml21__ActivityOfRadioactivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ActivityOfRadioactivityUom'
        enum eml21__ActivityOfRadioactivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityOfRadioactivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ActivityOfRadioactivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityOfRadioactivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ActivityOfRadioactivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ActivityOfRadioactivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ActivityOfRadioactivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityOfRadioactivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ActivityOfRadioactivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:513 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt (-191)
/* simple XML schema type 'eml21:ActivityOfRadioactivityMeasureExt': */
class SOAP_CMAC eml21__ActivityOfRadioactivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ActivityOfRadioactivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ActivityOfRadioactivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ActivityOfRadioactivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ActivityOfRadioactivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ActivityOfRadioactivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ActivityOfRadioactivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ActivityOfRadioactivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ActivityOfRadioactivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ActivityOfRadioactivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:515 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure (-192)
/* simple XML schema type 'eml21:AmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstanceUom'
        enum eml21__AmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:517 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt (-193)
/* simple XML schema type 'eml21:AmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:519 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure (-194)
/* simple XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceUom'
        enum eml21__AmountOfSubstancePerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:521 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-195)
/* simple XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:523 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure (-196)
/* simple XML schema type 'eml21:AmountOfSubstancePerAreaMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAreaUom'
        enum eml21__AmountOfSubstancePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:525 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt (-197)
/* simple XML schema type 'eml21:AmountOfSubstancePerAreaMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:527 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure (-198)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimeMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimeUom'
        enum eml21__AmountOfSubstancePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:529 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt (-199)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimeMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:531 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure (-200)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimePerAreaMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimePerAreaUom'
        enum eml21__AmountOfSubstancePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:533 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt (-201)
/* simple XML schema type 'eml21:AmountOfSubstancePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:535 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure (-202)
/* simple XML schema type 'eml21:AmountOfSubstancePerVolumeMeasure': */
class SOAP_CMAC eml21__AmountOfSubstancePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerVolumeUom'
        enum eml21__AmountOfSubstancePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:537 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt (-203)
/* simple XML schema type 'eml21:AmountOfSubstancePerVolumeMeasureExt': */
class SOAP_CMAC eml21__AmountOfSubstancePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AmountOfSubstancePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AmountOfSubstancePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AmountOfSubstancePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AmountOfSubstancePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AmountOfSubstancePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AmountOfSubstancePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AmountOfSubstancePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:539 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure (-204)
/* simple XML schema type 'eml21:AnglePerLengthMeasure': */
class SOAP_CMAC eml21__AnglePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerLengthUom'
        enum eml21__AnglePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__AnglePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__AnglePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__AnglePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:541 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt (-205)
/* simple XML schema type 'eml21:AnglePerLengthMeasureExt': */
class SOAP_CMAC eml21__AnglePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AnglePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AnglePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AnglePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:543 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure (-206)
/* simple XML schema type 'eml21:AnglePerVolumeMeasure': */
class SOAP_CMAC eml21__AnglePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerVolumeUom'
        enum eml21__AnglePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AnglePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AnglePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AnglePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:545 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt (-207)
/* simple XML schema type 'eml21:AnglePerVolumeMeasureExt': */
class SOAP_CMAC eml21__AnglePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AnglePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AnglePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AnglePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AnglePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AnglePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AnglePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AnglePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AnglePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AnglePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:547 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure (-208)
/* simple XML schema type 'eml21:AngularAccelerationMeasure': */
class SOAP_CMAC eml21__AngularAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularAccelerationUom'
        enum eml21__AngularAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml21__AngularAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AngularAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AngularAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml21__AngularAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml21__AngularAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:549 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt (-209)
/* simple XML schema type 'eml21:AngularAccelerationMeasureExt': */
class SOAP_CMAC eml21__AngularAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AngularAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AngularAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AngularAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AngularAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AngularAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:551 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure (-210)
/* simple XML schema type 'eml21:AngularVelocityMeasure': */
class SOAP_CMAC eml21__AngularVelocityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularVelocityUom'
        enum eml21__AngularVelocityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularVelocityMeasure, default initialized and not managed by a soap context
        virtual eml21__AngularVelocityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularVelocityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AngularVelocityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AngularVelocityMeasure() { }
        /// Friend allocator used by soap_new_eml21__AngularVelocityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularVelocityMeasure * SOAP_FMAC2 soap_instantiate_eml21__AngularVelocityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:553 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt (-211)
/* simple XML schema type 'eml21:AngularVelocityMeasureExt': */
class SOAP_CMAC eml21__AngularVelocityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AngularVelocityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AngularVelocityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AngularVelocityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AngularVelocityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AngularVelocityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AngularVelocityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AngularVelocityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AngularVelocityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AngularVelocityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:555 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure (-212)
/* simple XML schema type 'eml21:APIGammaRayMeasure': */
class SOAP_CMAC eml21__APIGammaRayMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGammaRayUom'
        enum eml21__APIGammaRayUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGammaRayMeasure, default initialized and not managed by a soap context
        virtual eml21__APIGammaRayMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGammaRayMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APIGammaRayMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APIGammaRayMeasure() { }
        /// Friend allocator used by soap_new_eml21__APIGammaRayMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGammaRayMeasure * SOAP_FMAC2 soap_instantiate_eml21__APIGammaRayMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:557 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt (-213)
/* simple XML schema type 'eml21:APIGammaRayMeasureExt': */
class SOAP_CMAC eml21__APIGammaRayMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGammaRayUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGammaRayMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APIGammaRayMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGammaRayMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APIGammaRayMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APIGammaRayMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APIGammaRayMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGammaRayMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APIGammaRayMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:559 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure (-214)
/* simple XML schema type 'eml21:APIGravityMeasure': */
class SOAP_CMAC eml21__APIGravityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGravityUom'
        enum eml21__APIGravityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGravityMeasure, default initialized and not managed by a soap context
        virtual eml21__APIGravityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGravityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APIGravityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APIGravityMeasure() { }
        /// Friend allocator used by soap_new_eml21__APIGravityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGravityMeasure * SOAP_FMAC2 soap_instantiate_eml21__APIGravityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:561 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt (-215)
/* simple XML schema type 'eml21:APIGravityMeasureExt': */
class SOAP_CMAC eml21__APIGravityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APIGravityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APIGravityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APIGravityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APIGravityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APIGravityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APIGravityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APIGravityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APIGravityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APIGravityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure (-216)
/* simple XML schema type 'eml21:APINeutronMeasure': */
class SOAP_CMAC eml21__APINeutronMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APINeutronUom'
        enum eml21__APINeutronUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APINeutronMeasure, default initialized and not managed by a soap context
        virtual eml21__APINeutronMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APINeutronMeasure); }
      public:
        /// Constructor with default initializations
        eml21__APINeutronMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__APINeutronMeasure() { }
        /// Friend allocator used by soap_new_eml21__APINeutronMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__APINeutronMeasure * SOAP_FMAC2 soap_instantiate_eml21__APINeutronMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:565 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt (-217)
/* simple XML schema type 'eml21:APINeutronMeasureExt': */
class SOAP_CMAC eml21__APINeutronMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:APINeutronUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__APINeutronMeasureExt, default initialized and not managed by a soap context
        virtual eml21__APINeutronMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__APINeutronMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__APINeutronMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__APINeutronMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__APINeutronMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__APINeutronMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__APINeutronMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:567 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure (-218)
/* simple XML schema type 'eml21:AreaMeasure': */
class SOAP_CMAC eml21__AreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaUom'
        enum eml21__AreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:569 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt (-219)
/* simple XML schema type 'eml21:AreaMeasureExt': */
class SOAP_CMAC eml21__AreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:571 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure (-220)
/* simple XML schema type 'eml21:AreaPerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml21__AreaPerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAmountOfSubstanceUom'
        enum eml21__AreaPerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:573 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt (-221)
/* simple XML schema type 'eml21:AreaPerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml21__AreaPerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:575 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure (-222)
/* simple XML schema type 'eml21:AreaPerAreaMeasure': */
class SOAP_CMAC eml21__AreaPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAreaUom'
        enum eml21__AreaPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:577 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt (-223)
/* simple XML schema type 'eml21:AreaPerAreaMeasureExt': */
class SOAP_CMAC eml21__AreaPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:579 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure (-224)
/* simple XML schema type 'eml21:AreaPerCountMeasure': */
class SOAP_CMAC eml21__AreaPerCountMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerCountUom'
        enum eml21__AreaPerCountUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerCountMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerCountMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerCountMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerCountMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerCountMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerCountMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerCountMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerCountMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:581 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt (-225)
/* simple XML schema type 'eml21:AreaPerCountMeasureExt': */
class SOAP_CMAC eml21__AreaPerCountMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerCountUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerCountMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerCountMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerCountMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerCountMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerCountMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerCountMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerCountMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerCountMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:583 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure (-226)
/* simple XML schema type 'eml21:AreaPerMassMeasure': */
class SOAP_CMAC eml21__AreaPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerMassUom'
        enum eml21__AreaPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:585 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt (-227)
/* simple XML schema type 'eml21:AreaPerMassMeasureExt': */
class SOAP_CMAC eml21__AreaPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure (-228)
/* simple XML schema type 'eml21:AreaPerTimeMeasure': */
class SOAP_CMAC eml21__AreaPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerTimeUom'
        enum eml21__AreaPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:589 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt (-229)
/* simple XML schema type 'eml21:AreaPerTimeMeasureExt': */
class SOAP_CMAC eml21__AreaPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:591 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure (-230)
/* simple XML schema type 'eml21:AreaPerVolumeMeasure': */
class SOAP_CMAC eml21__AreaPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerVolumeUom'
        enum eml21__AreaPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__AreaPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__AreaPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__AreaPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:593 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt (-231)
/* simple XML schema type 'eml21:AreaPerVolumeMeasureExt': */
class SOAP_CMAC eml21__AreaPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AreaPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AreaPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AreaPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AreaPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AreaPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AreaPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AreaPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AreaPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AreaPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:595 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure (-232)
/* simple XML schema type 'eml21:AttenuationPerFrequencyIntervalMeasure': */
class SOAP_CMAC eml21__AttenuationPerFrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AttenuationPerFrequencyIntervalUom'
        enum eml21__AttenuationPerFrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AttenuationPerFrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__AttenuationPerFrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AttenuationPerFrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__AttenuationPerFrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__AttenuationPerFrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__AttenuationPerFrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__AttenuationPerFrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__AttenuationPerFrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:597 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt (-233)
/* simple XML schema type 'eml21:AttenuationPerFrequencyIntervalMeasureExt': */
class SOAP_CMAC eml21__AttenuationPerFrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:AttenuationPerFrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AttenuationPerFrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__AttenuationPerFrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AttenuationPerFrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__AttenuationPerFrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__AttenuationPerFrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__AttenuationPerFrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:599 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure (-234)
/* simple XML schema type 'eml21:CapacitanceMeasure': */
class SOAP_CMAC eml21__CapacitanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CapacitanceUom'
        enum eml21__CapacitanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CapacitanceMeasure, default initialized and not managed by a soap context
        virtual eml21__CapacitanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CapacitanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__CapacitanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__CapacitanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__CapacitanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__CapacitanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__CapacitanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:601 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt (-235)
/* simple XML schema type 'eml21:CapacitanceMeasureExt': */
class SOAP_CMAC eml21__CapacitanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CapacitanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CapacitanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__CapacitanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CapacitanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__CapacitanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__CapacitanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__CapacitanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__CapacitanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__CapacitanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:603 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure (-236)
/* simple XML schema type 'eml21:CationExchangeCapacityMeasure': */
class SOAP_CMAC eml21__CationExchangeCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CationExchangeCapacityUom'
        enum eml21__CationExchangeCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CationExchangeCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__CationExchangeCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CationExchangeCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__CationExchangeCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__CationExchangeCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__CationExchangeCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__CationExchangeCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__CationExchangeCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:605 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt (-237)
/* simple XML schema type 'eml21:CationExchangeCapacityMeasureExt': */
class SOAP_CMAC eml21__CationExchangeCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:CationExchangeCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__CationExchangeCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__CationExchangeCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__CationExchangeCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__CationExchangeCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__CationExchangeCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__CationExchangeCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__CationExchangeCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__CationExchangeCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:607 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure (-238)
/* simple XML schema type 'eml21:DataTransferSpeedMeasure': */
class SOAP_CMAC eml21__DataTransferSpeedMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DataTransferSpeedUom'
        enum eml21__DataTransferSpeedUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataTransferSpeedMeasure, default initialized and not managed by a soap context
        virtual eml21__DataTransferSpeedMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataTransferSpeedMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DataTransferSpeedMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DataTransferSpeedMeasure() { }
        /// Friend allocator used by soap_new_eml21__DataTransferSpeedMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataTransferSpeedMeasure * SOAP_FMAC2 soap_instantiate_eml21__DataTransferSpeedMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:609 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt (-239)
/* simple XML schema type 'eml21:DataTransferSpeedMeasureExt': */
class SOAP_CMAC eml21__DataTransferSpeedMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DataTransferSpeedUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DataTransferSpeedMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DataTransferSpeedMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DataTransferSpeedMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DataTransferSpeedMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DataTransferSpeedMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DataTransferSpeedMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DataTransferSpeedMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DataTransferSpeedMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:611 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure (-240)
/* simple XML schema type 'eml21:DiffusionCoefficientMeasure': */
class SOAP_CMAC eml21__DiffusionCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusionCoefficientUom'
        enum eml21__DiffusionCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusionCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__DiffusionCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusionCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DiffusionCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusionCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__DiffusionCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusionCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__DiffusionCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:613 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt (-241)
/* simple XML schema type 'eml21:DiffusionCoefficientMeasureExt': */
class SOAP_CMAC eml21__DiffusionCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusionCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusionCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DiffusionCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusionCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DiffusionCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusionCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DiffusionCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusionCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DiffusionCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:615 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure (-242)
/* simple XML schema type 'eml21:DiffusiveTimeOfFlightMeasure': */
class SOAP_CMAC eml21__DiffusiveTimeOfFlightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusiveTimeOfFlightUom'
        enum eml21__DiffusiveTimeOfFlightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusiveTimeOfFlightMeasure, default initialized and not managed by a soap context
        virtual eml21__DiffusiveTimeOfFlightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusiveTimeOfFlightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DiffusiveTimeOfFlightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusiveTimeOfFlightMeasure() { }
        /// Friend allocator used by soap_new_eml21__DiffusiveTimeOfFlightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusiveTimeOfFlightMeasure * SOAP_FMAC2 soap_instantiate_eml21__DiffusiveTimeOfFlightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:617 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt (-243)
/* simple XML schema type 'eml21:DiffusiveTimeOfFlightMeasureExt': */
class SOAP_CMAC eml21__DiffusiveTimeOfFlightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DiffusiveTimeOfFlightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DiffusiveTimeOfFlightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DiffusiveTimeOfFlightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DiffusiveTimeOfFlightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DiffusiveTimeOfFlightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DiffusiveTimeOfFlightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DiffusiveTimeOfFlightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DiffusiveTimeOfFlightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DiffusiveTimeOfFlightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:619 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure (-244)
/* simple XML schema type 'eml21:DigitalStorageMeasure': */
class SOAP_CMAC eml21__DigitalStorageMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DigitalStorageUom'
        enum eml21__DigitalStorageUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DigitalStorageMeasure, default initialized and not managed by a soap context
        virtual eml21__DigitalStorageMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DigitalStorageMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DigitalStorageMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DigitalStorageMeasure() { }
        /// Friend allocator used by soap_new_eml21__DigitalStorageMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DigitalStorageMeasure * SOAP_FMAC2 soap_instantiate_eml21__DigitalStorageMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:621 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt (-245)
/* simple XML schema type 'eml21:DigitalStorageMeasureExt': */
class SOAP_CMAC eml21__DigitalStorageMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DigitalStorageUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DigitalStorageMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DigitalStorageMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DigitalStorageMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DigitalStorageMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DigitalStorageMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DigitalStorageMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DigitalStorageMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DigitalStorageMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:623 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure (-246)
/* simple XML schema type 'eml21:DimensionlessMeasure': */
class SOAP_CMAC eml21__DimensionlessMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DimensionlessUom'
        enum eml21__DimensionlessUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DimensionlessMeasure, default initialized and not managed by a soap context
        virtual eml21__DimensionlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DimensionlessMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DimensionlessMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DimensionlessMeasure() { }
        /// Friend allocator used by soap_new_eml21__DimensionlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DimensionlessMeasure * SOAP_FMAC2 soap_instantiate_eml21__DimensionlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:625 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt (-247)
/* simple XML schema type 'eml21:DimensionlessMeasureExt': */
class SOAP_CMAC eml21__DimensionlessMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DimensionlessUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DimensionlessMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DimensionlessMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DimensionlessMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DimensionlessMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DimensionlessMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DimensionlessMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DimensionlessMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DimensionlessMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:627 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure (-248)
/* simple XML schema type 'eml21:DipoleMomentMeasure': */
class SOAP_CMAC eml21__DipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DipoleMomentUom'
        enum eml21__DipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__DipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__DipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__DipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt (-249)
/* simple XML schema type 'eml21:DipoleMomentMeasureExt': */
class SOAP_CMAC eml21__DipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:631 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure (-250)
/* simple XML schema type 'eml21:DoseEquivalentMeasure': */
class SOAP_CMAC eml21__DoseEquivalentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DoseEquivalentUom'
        enum eml21__DoseEquivalentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoseEquivalentMeasure, default initialized and not managed by a soap context
        virtual eml21__DoseEquivalentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoseEquivalentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DoseEquivalentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DoseEquivalentMeasure() { }
        /// Friend allocator used by soap_new_eml21__DoseEquivalentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoseEquivalentMeasure * SOAP_FMAC2 soap_instantiate_eml21__DoseEquivalentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:633 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt (-251)
/* simple XML schema type 'eml21:DoseEquivalentMeasureExt': */
class SOAP_CMAC eml21__DoseEquivalentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DoseEquivalentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoseEquivalentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DoseEquivalentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoseEquivalentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DoseEquivalentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DoseEquivalentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DoseEquivalentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoseEquivalentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DoseEquivalentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:635 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure (-252)
/* simple XML schema type 'eml21:DynamicViscosityMeasure': */
class SOAP_CMAC eml21__DynamicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DynamicViscosityUom'
        enum eml21__DynamicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DynamicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml21__DynamicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DynamicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__DynamicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__DynamicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml21__DynamicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__DynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml21__DynamicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:637 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt (-253)
/* simple XML schema type 'eml21:DynamicViscosityMeasureExt': */
class SOAP_CMAC eml21__DynamicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:DynamicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DynamicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__DynamicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DynamicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__DynamicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__DynamicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__DynamicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__DynamicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__DynamicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:639 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure (-254)
/* simple XML schema type 'eml21:ElectricalResistivityMeasure': */
class SOAP_CMAC eml21__ElectricalResistivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricalResistivityUom'
        enum eml21__ElectricalResistivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricalResistivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricalResistivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricalResistivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricalResistivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricalResistivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricalResistivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricalResistivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricalResistivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:641 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt (-255)
/* simple XML schema type 'eml21:ElectricalResistivityMeasureExt': */
class SOAP_CMAC eml21__ElectricalResistivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricalResistivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricalResistivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricalResistivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricalResistivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricalResistivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricalResistivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricalResistivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricalResistivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricalResistivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:643 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure (-256)
/* simple XML schema type 'eml21:ElectricChargeMeasure': */
class SOAP_CMAC eml21__ElectricChargeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargeUom'
        enum eml21__ElectricChargeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargeMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:645 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt (-257)
/* simple XML schema type 'eml21:ElectricChargeMeasureExt': */
class SOAP_CMAC eml21__ElectricChargeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:647 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure (-258)
/* simple XML schema type 'eml21:ElectricChargePerAreaMeasure': */
class SOAP_CMAC eml21__ElectricChargePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerAreaUom'
        enum eml21__ElectricChargePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:649 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt (-259)
/* simple XML schema type 'eml21:ElectricChargePerAreaMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:651 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure (-260)
/* simple XML schema type 'eml21:ElectricChargePerMassMeasure': */
class SOAP_CMAC eml21__ElectricChargePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerMassUom'
        enum eml21__ElectricChargePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:653 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt (-261)
/* simple XML schema type 'eml21:ElectricChargePerMassMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:655 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure (-262)
/* simple XML schema type 'eml21:ElectricChargePerVolumeMeasure': */
class SOAP_CMAC eml21__ElectricChargePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerVolumeUom'
        enum eml21__ElectricChargePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:657 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt (-263)
/* simple XML schema type 'eml21:ElectricChargePerVolumeMeasureExt': */
class SOAP_CMAC eml21__ElectricChargePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricChargePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricChargePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricChargePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricChargePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricChargePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricChargePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricChargePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricChargePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricChargePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure (-264)
/* simple XML schema type 'eml21:ElectricConductanceMeasure': */
class SOAP_CMAC eml21__ElectricConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductanceUom'
        enum eml21__ElectricConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:661 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt (-265)
/* simple XML schema type 'eml21:ElectricConductanceMeasureExt': */
class SOAP_CMAC eml21__ElectricConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:663 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure (-266)
/* simple XML schema type 'eml21:ElectricConductivityMeasure': */
class SOAP_CMAC eml21__ElectricConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductivityUom'
        enum eml21__ElectricConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:665 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt (-267)
/* simple XML schema type 'eml21:ElectricConductivityMeasureExt': */
class SOAP_CMAC eml21__ElectricConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:667 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure (-268)
/* simple XML schema type 'eml21:ElectricCurrentDensityMeasure': */
class SOAP_CMAC eml21__ElectricCurrentDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentDensityUom'
        enum eml21__ElectricCurrentDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentDensityMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentDensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentDensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:669 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt (-269)
/* simple XML schema type 'eml21:ElectricCurrentDensityMeasureExt': */
class SOAP_CMAC eml21__ElectricCurrentDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:671 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure (-270)
/* simple XML schema type 'eml21:ElectricCurrentMeasure': */
class SOAP_CMAC eml21__ElectricCurrentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentUom'
        enum eml21__ElectricCurrentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:673 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt (-271)
/* simple XML schema type 'eml21:ElectricCurrentMeasureExt': */
class SOAP_CMAC eml21__ElectricCurrentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricCurrentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricCurrentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricCurrentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricCurrentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricCurrentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricCurrentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricCurrentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricCurrentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricCurrentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:675 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure (-272)
/* simple XML schema type 'eml21:ElectricFieldStrengthMeasure': */
class SOAP_CMAC eml21__ElectricFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricFieldStrengthUom'
        enum eml21__ElectricFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:677 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt (-273)
/* simple XML schema type 'eml21:ElectricFieldStrengthMeasureExt': */
class SOAP_CMAC eml21__ElectricFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:679 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure (-274)
/* simple XML schema type 'eml21:ElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml21__ElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricPotentialDifferenceUom'
        enum eml21__ElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:681 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt (-275)
/* simple XML schema type 'eml21:ElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml21__ElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:683 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure (-276)
/* simple XML schema type 'eml21:ElectricResistanceMeasure': */
class SOAP_CMAC eml21__ElectricResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistanceUom'
        enum eml21__ElectricResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:685 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt (-277)
/* simple XML schema type 'eml21:ElectricResistanceMeasureExt': */
class SOAP_CMAC eml21__ElectricResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:687 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure (-278)
/* simple XML schema type 'eml21:ElectricResistancePerLengthMeasure': */
class SOAP_CMAC eml21__ElectricResistancePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistancePerLengthUom'
        enum eml21__ElectricResistancePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistancePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectricResistancePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistancePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistancePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistancePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistancePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistancePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistancePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:689 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt (-279)
/* simple XML schema type 'eml21:ElectricResistancePerLengthMeasureExt': */
class SOAP_CMAC eml21__ElectricResistancePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectricResistancePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectricResistancePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectricResistancePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectricResistancePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectricResistancePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectricResistancePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectricResistancePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectricResistancePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectricResistancePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:691 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure (-280)
/* simple XML schema type 'eml21:ElectromagneticMomentMeasure': */
class SOAP_CMAC eml21__ElectromagneticMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectromagneticMomentUom'
        enum eml21__ElectromagneticMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectromagneticMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__ElectromagneticMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectromagneticMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ElectromagneticMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ElectromagneticMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__ElectromagneticMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectromagneticMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__ElectromagneticMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:693 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt (-281)
/* simple XML schema type 'eml21:ElectromagneticMomentMeasureExt': */
class SOAP_CMAC eml21__ElectromagneticMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ElectromagneticMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ElectromagneticMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ElectromagneticMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ElectromagneticMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ElectromagneticMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ElectromagneticMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ElectromagneticMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ElectromagneticMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ElectromagneticMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure (-282)
/* simple XML schema type 'eml21:EnergyLengthPerAreaMeasure': */
class SOAP_CMAC eml21__EnergyLengthPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerAreaUom'
        enum eml21__EnergyLengthPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:697 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt (-283)
/* simple XML schema type 'eml21:EnergyLengthPerAreaMeasureExt': */
class SOAP_CMAC eml21__EnergyLengthPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:699 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure (-284)
/* simple XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasure': */
class SOAP_CMAC eml21__EnergyLengthPerTimeAreaTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureUom'
        enum eml21__EnergyLengthPerTimeAreaTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerTimeAreaTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerTimeAreaTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerTimeAreaTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerTimeAreaTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerTimeAreaTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerTimeAreaTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:701 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt (-285)
/* simple XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasureExt': */
class SOAP_CMAC eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyLengthPerTimeAreaTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:703 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure (-286)
/* simple XML schema type 'eml21:EnergyMeasure': */
class SOAP_CMAC eml21__EnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyUom'
        enum eml21__EnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:705 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt (-287)
/* simple XML schema type 'eml21:EnergyMeasureExt': */
class SOAP_CMAC eml21__EnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:707 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure (-288)
/* simple XML schema type 'eml21:EnergyPerAreaMeasure': */
class SOAP_CMAC eml21__EnergyPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerAreaUom'
        enum eml21__EnergyPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:709 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt (-289)
/* simple XML schema type 'eml21:EnergyPerAreaMeasureExt': */
class SOAP_CMAC eml21__EnergyPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:711 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure (-290)
/* simple XML schema type 'eml21:EnergyPerLengthMeasure': */
class SOAP_CMAC eml21__EnergyPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerLengthUom'
        enum eml21__EnergyPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:713 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt (-291)
/* simple XML schema type 'eml21:EnergyPerLengthMeasureExt': */
class SOAP_CMAC eml21__EnergyPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:715 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure (-292)
/* simple XML schema type 'eml21:EnergyPerMassMeasure': */
class SOAP_CMAC eml21__EnergyPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassUom'
        enum eml21__EnergyPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:717 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt (-293)
/* simple XML schema type 'eml21:EnergyPerMassMeasureExt': */
class SOAP_CMAC eml21__EnergyPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:719 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure (-294)
/* simple XML schema type 'eml21:EnergyPerMassPerTimeMeasure': */
class SOAP_CMAC eml21__EnergyPerMassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassPerTimeUom'
        enum eml21__EnergyPerMassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:721 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt (-295)
/* simple XML schema type 'eml21:EnergyPerMassPerTimeMeasureExt': */
class SOAP_CMAC eml21__EnergyPerMassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerMassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerMassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerMassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerMassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerMassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerMassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerMassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerMassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerMassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:723 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure (-296)
/* simple XML schema type 'eml21:EnergyPerVolumeMeasure': */
class SOAP_CMAC eml21__EnergyPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerVolumeUom'
        enum eml21__EnergyPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__EnergyPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:725 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt (-297)
/* simple XML schema type 'eml21:EnergyPerVolumeMeasureExt': */
class SOAP_CMAC eml21__EnergyPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:EnergyPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__EnergyPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__EnergyPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__EnergyPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__EnergyPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__EnergyPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__EnergyPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__EnergyPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__EnergyPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:727 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure (-298)
/* simple XML schema type 'eml21:ForceAreaMeasure': */
class SOAP_CMAC eml21__ForceAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceAreaUom'
        enum eml21__ForceAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:729 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt (-299)
/* simple XML schema type 'eml21:ForceAreaMeasureExt': */
class SOAP_CMAC eml21__ForceAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:731 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure (-300)
/* simple XML schema type 'eml21:ForceLengthPerLengthMeasure': */
class SOAP_CMAC eml21__ForceLengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceLengthPerLengthUom'
        enum eml21__ForceLengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceLengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceLengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceLengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceLengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceLengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceLengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceLengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceLengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:733 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt (-301)
/* simple XML schema type 'eml21:ForceLengthPerLengthMeasureExt': */
class SOAP_CMAC eml21__ForceLengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceLengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceLengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceLengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceLengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceLengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceLengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceLengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceLengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceLengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:735 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure (-302)
/* simple XML schema type 'eml21:ForceMeasure': */
class SOAP_CMAC eml21__ForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceUom'
        enum eml21__ForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:737 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt (-303)
/* simple XML schema type 'eml21:ForceMeasureExt': */
class SOAP_CMAC eml21__ForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:739 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure (-304)
/* simple XML schema type 'eml21:ForcePerForceMeasure': */
class SOAP_CMAC eml21__ForcePerForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerForceUom'
        enum eml21__ForcePerForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:741 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt (-305)
/* simple XML schema type 'eml21:ForcePerForceMeasureExt': */
class SOAP_CMAC eml21__ForcePerForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:743 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure (-306)
/* simple XML schema type 'eml21:ForcePerLengthMeasure': */
class SOAP_CMAC eml21__ForcePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerLengthUom'
        enum eml21__ForcePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:745 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt (-307)
/* simple XML schema type 'eml21:ForcePerLengthMeasureExt': */
class SOAP_CMAC eml21__ForcePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:747 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure (-308)
/* simple XML schema type 'eml21:ForcePerVolumeMeasure': */
class SOAP_CMAC eml21__ForcePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerVolumeUom'
        enum eml21__ForcePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ForcePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ForcePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ForcePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:749 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt (-309)
/* simple XML schema type 'eml21:ForcePerVolumeMeasureExt': */
class SOAP_CMAC eml21__ForcePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ForcePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ForcePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ForcePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ForcePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ForcePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ForcePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ForcePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ForcePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ForcePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:751 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure (-310)
/* simple XML schema type 'eml21:FrequencyIntervalMeasure': */
class SOAP_CMAC eml21__FrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyIntervalUom'
        enum eml21__FrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__FrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__FrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__FrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:753 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt (-311)
/* simple XML schema type 'eml21:FrequencyIntervalMeasureExt': */
class SOAP_CMAC eml21__FrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__FrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__FrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__FrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:755 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure (-312)
/* simple XML schema type 'eml21:FrequencyMeasure': */
class SOAP_CMAC eml21__FrequencyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyUom'
        enum eml21__FrequencyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyMeasure, default initialized and not managed by a soap context
        virtual eml21__FrequencyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyMeasure() { }
        /// Friend allocator used by soap_new_eml21__FrequencyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyMeasure * SOAP_FMAC2 soap_instantiate_eml21__FrequencyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:757 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt (-313)
/* simple XML schema type 'eml21:FrequencyMeasureExt': */
class SOAP_CMAC eml21__FrequencyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:FrequencyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FrequencyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__FrequencyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FrequencyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__FrequencyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__FrequencyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__FrequencyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__FrequencyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__FrequencyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:759 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure (-314)
/* simple XML schema type 'eml21:HeatCapacityMeasure': */
class SOAP_CMAC eml21__HeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatCapacityUom'
        enum eml21__HeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:761 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt (-315)
/* simple XML schema type 'eml21:HeatCapacityMeasureExt': */
class SOAP_CMAC eml21__HeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:763 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure (-316)
/* simple XML schema type 'eml21:HeatFlowRateMeasure': */
class SOAP_CMAC eml21__HeatFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatFlowRateUom'
        enum eml21__HeatFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:765 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt (-317)
/* simple XML schema type 'eml21:HeatFlowRateMeasureExt': */
class SOAP_CMAC eml21__HeatFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:767 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure (-318)
/* simple XML schema type 'eml21:HeatTransferCoefficientMeasure': */
class SOAP_CMAC eml21__HeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatTransferCoefficientUom'
        enum eml21__HeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__HeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__HeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__HeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__HeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__HeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:769 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt (-319)
/* simple XML schema type 'eml21:HeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml21__HeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:HeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__HeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__HeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__HeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__HeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__HeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__HeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__HeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__HeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:771 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure (-320)
/* simple XML schema type 'eml21:IlluminanceMeasure': */
class SOAP_CMAC eml21__IlluminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IlluminanceUom'
        enum eml21__IlluminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IlluminanceMeasure, default initialized and not managed by a soap context
        virtual eml21__IlluminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IlluminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__IlluminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__IlluminanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__IlluminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__IlluminanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__IlluminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt (-321)
/* simple XML schema type 'eml21:IlluminanceMeasureExt': */
class SOAP_CMAC eml21__IlluminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IlluminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IlluminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__IlluminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IlluminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__IlluminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__IlluminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__IlluminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__IlluminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__IlluminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:775 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure (-322)
/* simple XML schema type 'eml21:InductanceMeasure': */
class SOAP_CMAC eml21__InductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:InductanceUom'
        enum eml21__InductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__InductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__InductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__InductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__InductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__InductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__InductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__InductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__InductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:777 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt (-323)
/* simple XML schema type 'eml21:InductanceMeasureExt': */
class SOAP_CMAC eml21__InductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:InductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__InductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__InductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__InductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__InductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__InductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__InductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__InductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__InductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:779 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure (-324)
/* simple XML schema type 'eml21:IsothermalCompressibilityMeasure': */
class SOAP_CMAC eml21__IsothermalCompressibilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IsothermalCompressibilityUom'
        enum eml21__IsothermalCompressibilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IsothermalCompressibilityMeasure, default initialized and not managed by a soap context
        virtual eml21__IsothermalCompressibilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IsothermalCompressibilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__IsothermalCompressibilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__IsothermalCompressibilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__IsothermalCompressibilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__IsothermalCompressibilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__IsothermalCompressibilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:781 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt (-325)
/* simple XML schema type 'eml21:IsothermalCompressibilityMeasureExt': */
class SOAP_CMAC eml21__IsothermalCompressibilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:IsothermalCompressibilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IsothermalCompressibilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__IsothermalCompressibilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IsothermalCompressibilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__IsothermalCompressibilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__IsothermalCompressibilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__IsothermalCompressibilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__IsothermalCompressibilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__IsothermalCompressibilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:783 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure (-326)
/* simple XML schema type 'eml21:KinematicViscosityMeasure': */
class SOAP_CMAC eml21__KinematicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:KinematicViscosityUom'
        enum eml21__KinematicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__KinematicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml21__KinematicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__KinematicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__KinematicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__KinematicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml21__KinematicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__KinematicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml21__KinematicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:785 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt (-327)
/* simple XML schema type 'eml21:KinematicViscosityMeasureExt': */
class SOAP_CMAC eml21__KinematicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:KinematicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__KinematicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__KinematicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__KinematicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__KinematicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__KinematicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__KinematicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__KinematicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__KinematicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:787 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure (-328)
/* simple XML schema type 'eml21:LengthMeasure': */
class SOAP_CMAC eml21__LengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUom'
        enum eml21__LengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:789 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt (-329)
/* simple XML schema type 'eml21:LengthMeasureExt': */
class SOAP_CMAC eml21__LengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:791 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure (-330)
/* simple XML schema type 'eml21:LengthPerLengthMeasure': */
class SOAP_CMAC eml21__LengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerLengthUom'
        enum eml21__LengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:793 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt (-331)
/* simple XML schema type 'eml21:LengthPerLengthMeasureExt': */
class SOAP_CMAC eml21__LengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:795 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure (-332)
/* simple XML schema type 'eml21:LengthPerMassMeasure': */
class SOAP_CMAC eml21__LengthPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerMassUom'
        enum eml21__LengthPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:797 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt (-333)
/* simple XML schema type 'eml21:LengthPerMassMeasureExt': */
class SOAP_CMAC eml21__LengthPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:799 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure (-334)
/* simple XML schema type 'eml21:LengthPerPressureMeasure': */
class SOAP_CMAC eml21__LengthPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerPressureUom'
        enum eml21__LengthPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:801 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt (-335)
/* simple XML schema type 'eml21:LengthPerPressureMeasureExt': */
class SOAP_CMAC eml21__LengthPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:803 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure (-336)
/* simple XML schema type 'eml21:LengthPerTemperatureMeasure': */
class SOAP_CMAC eml21__LengthPerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTemperatureUom'
        enum eml21__LengthPerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:805 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt (-337)
/* simple XML schema type 'eml21:LengthPerTemperatureMeasureExt': */
class SOAP_CMAC eml21__LengthPerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:807 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure (-338)
/* simple XML schema type 'eml21:LengthPerTimeMeasure': */
class SOAP_CMAC eml21__LengthPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTimeUom'
        enum eml21__LengthPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:809 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt (-339)
/* simple XML schema type 'eml21:LengthPerTimeMeasureExt': */
class SOAP_CMAC eml21__LengthPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:811 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure (-340)
/* simple XML schema type 'eml21:LengthPerVolumeMeasure': */
class SOAP_CMAC eml21__LengthPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerVolumeUom'
        enum eml21__LengthPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__LengthPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__LengthPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__LengthPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:813 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt (-341)
/* simple XML schema type 'eml21:LengthPerVolumeMeasureExt': */
class SOAP_CMAC eml21__LengthPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LengthPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LengthPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LengthPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LengthPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LengthPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LengthPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LengthPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LengthPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LengthPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:815 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure (-342)
/* simple XML schema type 'eml21:LightExposureMeasure': */
class SOAP_CMAC eml21__LightExposureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LightExposureUom'
        enum eml21__LightExposureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LightExposureMeasure, default initialized and not managed by a soap context
        virtual eml21__LightExposureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LightExposureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LightExposureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LightExposureMeasure() { }
        /// Friend allocator used by soap_new_eml21__LightExposureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LightExposureMeasure * SOAP_FMAC2 soap_instantiate_eml21__LightExposureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:817 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt (-343)
/* simple XML schema type 'eml21:LightExposureMeasureExt': */
class SOAP_CMAC eml21__LightExposureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LightExposureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LightExposureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LightExposureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LightExposureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LightExposureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LightExposureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LightExposureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LightExposureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LightExposureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:819 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure (-344)
/* simple XML schema type 'eml21:LinearAccelerationMeasure': */
class SOAP_CMAC eml21__LinearAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearAccelerationUom'
        enum eml21__LinearAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml21__LinearAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LinearAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LinearAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml21__LinearAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml21__LinearAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:821 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt (-345)
/* simple XML schema type 'eml21:LinearAccelerationMeasureExt': */
class SOAP_CMAC eml21__LinearAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LinearAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LinearAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LinearAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LinearAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LinearAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:823 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure (-346)
/* simple XML schema type 'eml21:LinearThermalExpansionMeasure': */
class SOAP_CMAC eml21__LinearThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearThermalExpansionUom'
        enum eml21__LinearThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml21__LinearThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LinearThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LinearThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml21__LinearThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml21__LinearThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:825 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt (-347)
/* simple XML schema type 'eml21:LinearThermalExpansionMeasureExt': */
class SOAP_CMAC eml21__LinearThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LinearThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LinearThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LinearThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LinearThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LinearThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LinearThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LinearThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LinearThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LinearThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:827 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure (-348)
/* simple XML schema type 'eml21:LogarithmicPowerRatioMeasure': */
class SOAP_CMAC eml21__LogarithmicPowerRatioMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioUom'
        enum eml21__LogarithmicPowerRatioUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioMeasure, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioMeasure() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioMeasure * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:829 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt (-349)
/* simple XML schema type 'eml21:LogarithmicPowerRatioMeasureExt': */
class SOAP_CMAC eml21__LogarithmicPowerRatioMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:831 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure (-350)
/* simple XML schema type 'eml21:LogarithmicPowerRatioPerLengthMeasure': */
class SOAP_CMAC eml21__LogarithmicPowerRatioPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioPerLengthUom'
        enum eml21__LogarithmicPowerRatioPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:833 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt (-351)
/* simple XML schema type 'eml21:LogarithmicPowerRatioPerLengthMeasureExt': */
class SOAP_CMAC eml21__LogarithmicPowerRatioPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LogarithmicPowerRatioPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LogarithmicPowerRatioPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LogarithmicPowerRatioPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LogarithmicPowerRatioPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LogarithmicPowerRatioPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LogarithmicPowerRatioPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LogarithmicPowerRatioPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:835 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure (-352)
/* simple XML schema type 'eml21:LuminanceMeasure': */
class SOAP_CMAC eml21__LuminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminanceUom'
        enum eml21__LuminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminanceMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:837 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt (-353)
/* simple XML schema type 'eml21:LuminanceMeasureExt': */
class SOAP_CMAC eml21__LuminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:839 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure (-354)
/* simple XML schema type 'eml21:LuminousEfficacyMeasure': */
class SOAP_CMAC eml21__LuminousEfficacyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousEfficacyUom'
        enum eml21__LuminousEfficacyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousEfficacyMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousEfficacyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousEfficacyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousEfficacyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousEfficacyMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousEfficacyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousEfficacyMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousEfficacyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:841 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt (-355)
/* simple XML schema type 'eml21:LuminousEfficacyMeasureExt': */
class SOAP_CMAC eml21__LuminousEfficacyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousEfficacyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousEfficacyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousEfficacyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousEfficacyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousEfficacyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousEfficacyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousEfficacyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousEfficacyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousEfficacyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:843 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure (-356)
/* simple XML schema type 'eml21:LuminousFluxMeasure': */
class SOAP_CMAC eml21__LuminousFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousFluxUom'
        enum eml21__LuminousFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousFluxMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousFluxMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousFluxMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:845 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt (-357)
/* simple XML schema type 'eml21:LuminousFluxMeasureExt': */
class SOAP_CMAC eml21__LuminousFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:847 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure (-358)
/* simple XML schema type 'eml21:LuminousIntensityMeasure': */
class SOAP_CMAC eml21__LuminousIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousIntensityUom'
        enum eml21__LuminousIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousIntensityMeasure, default initialized and not managed by a soap context
        virtual eml21__LuminousIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__LuminousIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__LuminousIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__LuminousIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:849 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt (-359)
/* simple XML schema type 'eml21:LuminousIntensityMeasureExt': */
class SOAP_CMAC eml21__LuminousIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:LuminousIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__LuminousIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__LuminousIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__LuminousIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__LuminousIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__LuminousIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__LuminousIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__LuminousIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__LuminousIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure (-360)
/* simple XML schema type 'eml21:MagneticDipoleMomentMeasure': */
class SOAP_CMAC eml21__MagneticDipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticDipoleMomentUom'
        enum eml21__MagneticDipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticDipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticDipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticDipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticDipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticDipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticDipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticDipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticDipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:853 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt (-361)
/* simple XML schema type 'eml21:MagneticDipoleMomentMeasureExt': */
class SOAP_CMAC eml21__MagneticDipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticDipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticDipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticDipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticDipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticDipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticDipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticDipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticDipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticDipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:855 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure (-362)
/* simple XML schema type 'eml21:MagneticFieldStrengthMeasure': */
class SOAP_CMAC eml21__MagneticFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFieldStrengthUom'
        enum eml21__MagneticFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:857 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt (-363)
/* simple XML schema type 'eml21:MagneticFieldStrengthMeasureExt': */
class SOAP_CMAC eml21__MagneticFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:859 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure (-364)
/* simple XML schema type 'eml21:MagneticFluxDensityMeasure': */
class SOAP_CMAC eml21__MagneticFluxDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityUom'
        enum eml21__MagneticFluxDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:861 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt (-365)
/* simple XML schema type 'eml21:MagneticFluxDensityMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure (-366)
/* simple XML schema type 'eml21:MagneticFluxDensityPerLengthMeasure': */
class SOAP_CMAC eml21__MagneticFluxDensityPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityPerLengthUom'
        enum eml21__MagneticFluxDensityPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:865 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt (-367)
/* simple XML schema type 'eml21:MagneticFluxDensityPerLengthMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxDensityPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxDensityPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxDensityPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxDensityPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxDensityPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxDensityPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxDensityPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxDensityPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:867 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure (-368)
/* simple XML schema type 'eml21:MagneticFluxMeasure': */
class SOAP_CMAC eml21__MagneticFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxUom'
        enum eml21__MagneticFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:869 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt (-369)
/* simple XML schema type 'eml21:MagneticFluxMeasureExt': */
class SOAP_CMAC eml21__MagneticFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:871 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure (-370)
/* simple XML schema type 'eml21:MagneticPermeabilityMeasure': */
class SOAP_CMAC eml21__MagneticPermeabilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticPermeabilityUom'
        enum eml21__MagneticPermeabilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticPermeabilityMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticPermeabilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticPermeabilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticPermeabilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticPermeabilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticPermeabilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticPermeabilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticPermeabilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:873 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt (-371)
/* simple XML schema type 'eml21:MagneticPermeabilityMeasureExt': */
class SOAP_CMAC eml21__MagneticPermeabilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticPermeabilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticPermeabilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticPermeabilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticPermeabilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticPermeabilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticPermeabilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticPermeabilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticPermeabilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticPermeabilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure (-372)
/* simple XML schema type 'eml21:MagneticVectorPotentialMeasure': */
class SOAP_CMAC eml21__MagneticVectorPotentialMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticVectorPotentialUom'
        enum eml21__MagneticVectorPotentialUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticVectorPotentialMeasure, default initialized and not managed by a soap context
        virtual eml21__MagneticVectorPotentialMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticVectorPotentialMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MagneticVectorPotentialMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticVectorPotentialMeasure() { }
        /// Friend allocator used by soap_new_eml21__MagneticVectorPotentialMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticVectorPotentialMeasure * SOAP_FMAC2 soap_instantiate_eml21__MagneticVectorPotentialMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:877 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt (-373)
/* simple XML schema type 'eml21:MagneticVectorPotentialMeasureExt': */
class SOAP_CMAC eml21__MagneticVectorPotentialMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MagneticVectorPotentialUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MagneticVectorPotentialMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MagneticVectorPotentialMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MagneticVectorPotentialMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MagneticVectorPotentialMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MagneticVectorPotentialMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MagneticVectorPotentialMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MagneticVectorPotentialMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MagneticVectorPotentialMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:879 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure (-374)
/* simple XML schema type 'eml21:MassLengthMeasure': */
class SOAP_CMAC eml21__MassLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassLengthUom'
        enum eml21__MassLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:881 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt (-375)
/* simple XML schema type 'eml21:MassLengthMeasureExt': */
class SOAP_CMAC eml21__MassLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:883 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure (-376)
/* simple XML schema type 'eml21:MassMeasure': */
class SOAP_CMAC eml21__MassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassUom'
        enum eml21__MassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassMeasure, default initialized and not managed by a soap context
        virtual eml21__MassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:885 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt (-377)
/* simple XML schema type 'eml21:MassMeasureExt': */
class SOAP_CMAC eml21__MassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:887 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure (-378)
/* simple XML schema type 'eml21:MassPerAreaMeasure': */
class SOAP_CMAC eml21__MassPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerAreaUom'
        enum eml21__MassPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:889 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt (-379)
/* simple XML schema type 'eml21:MassPerAreaMeasureExt': */
class SOAP_CMAC eml21__MassPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:891 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure (-380)
/* simple XML schema type 'eml21:MassPerEnergyMeasure': */
class SOAP_CMAC eml21__MassPerEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerEnergyUom'
        enum eml21__MassPerEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerEnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:893 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt (-381)
/* simple XML schema type 'eml21:MassPerEnergyMeasureExt': */
class SOAP_CMAC eml21__MassPerEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:895 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure (-382)
/* simple XML schema type 'eml21:MassPerLengthMeasure': */
class SOAP_CMAC eml21__MassPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerLengthUom'
        enum eml21__MassPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:897 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt (-383)
/* simple XML schema type 'eml21:MassPerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:899 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure (-384)
/* simple XML schema type 'eml21:MassPerMassMeasure': */
class SOAP_CMAC eml21__MassPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerMassUom'
        enum eml21__MassPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:901 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt (-385)
/* simple XML schema type 'eml21:MassPerMassMeasureExt': */
class SOAP_CMAC eml21__MassPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:903 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure (-386)
/* simple XML schema type 'eml21:MassPerTimeMeasure': */
class SOAP_CMAC eml21__MassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimeUom'
        enum eml21__MassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:905 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt (-387)
/* simple XML schema type 'eml21:MassPerTimeMeasureExt': */
class SOAP_CMAC eml21__MassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:907 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure (-388)
/* simple XML schema type 'eml21:MassPerTimePerAreaMeasure': */
class SOAP_CMAC eml21__MassPerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerAreaUom'
        enum eml21__MassPerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:909 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt (-389)
/* simple XML schema type 'eml21:MassPerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__MassPerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:911 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure (-390)
/* simple XML schema type 'eml21:MassPerTimePerLengthMeasure': */
class SOAP_CMAC eml21__MassPerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerLengthUom'
        enum eml21__MassPerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:913 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt (-391)
/* simple XML schema type 'eml21:MassPerTimePerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:915 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure (-392)
/* simple XML schema type 'eml21:MassPerVolumeMeasure': */
class SOAP_CMAC eml21__MassPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumeUom'
        enum eml21__MassPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:917 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt (-393)
/* simple XML schema type 'eml21:MassPerVolumeMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:919 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure (-394)
/* simple XML schema type 'eml21:MassPerVolumePerLengthMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerLengthUom'
        enum eml21__MassPerVolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:921 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt (-395)
/* simple XML schema type 'eml21:MassPerVolumePerLengthMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:923 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure (-396)
/* simple XML schema type 'eml21:MassPerVolumePerPressureMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerPressureUom'
        enum eml21__MassPerVolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:925 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt (-397)
/* simple XML schema type 'eml21:MassPerVolumePerPressureMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:927 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure (-398)
/* simple XML schema type 'eml21:MassPerVolumePerTemperatureMeasure': */
class SOAP_CMAC eml21__MassPerVolumePerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerTemperatureUom'
        enum eml21__MassPerVolumePerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:929 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt (-399)
/* simple XML schema type 'eml21:MassPerVolumePerTemperatureMeasureExt': */
class SOAP_CMAC eml21__MassPerVolumePerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MassPerVolumePerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MassPerVolumePerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MassPerVolumePerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MassPerVolumePerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MassPerVolumePerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MassPerVolumePerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MassPerVolumePerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MassPerVolumePerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MassPerVolumePerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:931 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure (-400)
/* simple XML schema type 'eml21:MobilityMeasure': */
class SOAP_CMAC eml21__MobilityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MobilityUom'
        enum eml21__MobilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MobilityMeasure, default initialized and not managed by a soap context
        virtual eml21__MobilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MobilityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MobilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MobilityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MobilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MobilityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MobilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:933 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt (-401)
/* simple XML schema type 'eml21:MobilityMeasureExt': */
class SOAP_CMAC eml21__MobilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MobilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MobilityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MobilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MobilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MobilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MobilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MobilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MobilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MobilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:935 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure (-402)
/* simple XML schema type 'eml21:MolarEnergyMeasure': */
class SOAP_CMAC eml21__MolarEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarEnergyUom'
        enum eml21__MolarEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarEnergyMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:937 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt (-403)
/* simple XML schema type 'eml21:MolarEnergyMeasureExt': */
class SOAP_CMAC eml21__MolarEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:939 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure (-404)
/* simple XML schema type 'eml21:MolarHeatCapacityMeasure': */
class SOAP_CMAC eml21__MolarHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarHeatCapacityUom'
        enum eml21__MolarHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:941 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt (-405)
/* simple XML schema type 'eml21:MolarHeatCapacityMeasureExt': */
class SOAP_CMAC eml21__MolarHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:943 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure (-406)
/* simple XML schema type 'eml21:MolarVolumeMeasure': */
class SOAP_CMAC eml21__MolarVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarVolumeUom'
        enum eml21__MolarVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__MolarVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolarVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolarVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolarVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolarVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:945 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt (-407)
/* simple XML schema type 'eml21:MolarVolumeMeasureExt': */
class SOAP_CMAC eml21__MolarVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolarVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolarVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolarVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolarVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolarVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolarVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolarVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolarVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolarVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:947 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure (-408)
/* simple XML schema type 'eml21:MolecularWeightMeasure': */
class SOAP_CMAC eml21__MolecularWeightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolecularWeightUom'
        enum eml21__MolecularWeightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolecularWeightMeasure, default initialized and not managed by a soap context
        virtual eml21__MolecularWeightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolecularWeightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MolecularWeightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MolecularWeightMeasure() { }
        /// Friend allocator used by soap_new_eml21__MolecularWeightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolecularWeightMeasure * SOAP_FMAC2 soap_instantiate_eml21__MolecularWeightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:949 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt (-409)
/* simple XML schema type 'eml21:MolecularWeightMeasureExt': */
class SOAP_CMAC eml21__MolecularWeightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MolecularWeightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MolecularWeightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MolecularWeightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MolecularWeightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MolecularWeightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MolecularWeightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MolecularWeightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MolecularWeightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MolecularWeightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:951 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure (-410)
/* simple XML schema type 'eml21:MomentOfForceMeasure': */
class SOAP_CMAC eml21__MomentOfForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfForceUom'
        enum eml21__MomentOfForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfForceMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentOfForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentOfForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentOfForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:953 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt (-411)
/* simple XML schema type 'eml21:MomentOfForceMeasureExt': */
class SOAP_CMAC eml21__MomentOfForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentOfForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentOfForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentOfForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:955 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure (-412)
/* simple XML schema type 'eml21:MomentOfInertiaMeasure': */
class SOAP_CMAC eml21__MomentOfInertiaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfInertiaUom'
        enum eml21__MomentOfInertiaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfInertiaMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentOfInertiaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfInertiaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfInertiaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfInertiaMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentOfInertiaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfInertiaMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentOfInertiaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:957 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt (-413)
/* simple XML schema type 'eml21:MomentOfInertiaMeasureExt': */
class SOAP_CMAC eml21__MomentOfInertiaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentOfInertiaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentOfInertiaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentOfInertiaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentOfInertiaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentOfInertiaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentOfInertiaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentOfInertiaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentOfInertiaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentOfInertiaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:959 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure (-414)
/* simple XML schema type 'eml21:MomentumMeasure': */
class SOAP_CMAC eml21__MomentumMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentumUom'
        enum eml21__MomentumUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentumMeasure, default initialized and not managed by a soap context
        virtual eml21__MomentumMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentumMeasure); }
      public:
        /// Constructor with default initializations
        eml21__MomentumMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__MomentumMeasure() { }
        /// Friend allocator used by soap_new_eml21__MomentumMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentumMeasure * SOAP_FMAC2 soap_instantiate_eml21__MomentumMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:961 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt (-415)
/* simple XML schema type 'eml21:MomentumMeasureExt': */
class SOAP_CMAC eml21__MomentumMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:MomentumUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__MomentumMeasureExt, default initialized and not managed by a soap context
        virtual eml21__MomentumMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__MomentumMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__MomentumMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__MomentumMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__MomentumMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__MomentumMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__MomentumMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure (-416)
/* simple XML schema type 'eml21:NormalizedPowerMeasure': */
class SOAP_CMAC eml21__NormalizedPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:NormalizedPowerUom'
        enum eml21__NormalizedPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__NormalizedPowerMeasure, default initialized and not managed by a soap context
        virtual eml21__NormalizedPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__NormalizedPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__NormalizedPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__NormalizedPowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__NormalizedPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__NormalizedPowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__NormalizedPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:965 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt (-417)
/* simple XML schema type 'eml21:NormalizedPowerMeasureExt': */
class SOAP_CMAC eml21__NormalizedPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:NormalizedPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__NormalizedPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__NormalizedPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__NormalizedPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__NormalizedPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__NormalizedPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__NormalizedPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__NormalizedPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__NormalizedPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:967 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure (-418)
/* simple XML schema type 'eml21:PermeabilityLengthMeasure': */
class SOAP_CMAC eml21__PermeabilityLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityLengthUom'
        enum eml21__PermeabilityLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__PermeabilityLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:969 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt (-419)
/* simple XML schema type 'eml21:PermeabilityLengthMeasureExt': */
class SOAP_CMAC eml21__PermeabilityLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermeabilityLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:971 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure (-420)
/* simple XML schema type 'eml21:PermeabilityRockMeasure': */
class SOAP_CMAC eml21__PermeabilityRockMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityRockUom'
        enum eml21__PermeabilityRockUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityRockMeasure, default initialized and not managed by a soap context
        virtual eml21__PermeabilityRockMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityRockMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityRockMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityRockMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityRockMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityRockMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:973 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt (-421)
/* simple XML schema type 'eml21:PermeabilityRockMeasureExt': */
class SOAP_CMAC eml21__PermeabilityRockMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermeabilityRockUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermeabilityRockMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermeabilityRockMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermeabilityRockMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermeabilityRockMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermeabilityRockMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermeabilityRockMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermeabilityRockMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermeabilityRockMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:975 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure (-422)
/* simple XML schema type 'eml21:PermittivityMeasure': */
class SOAP_CMAC eml21__PermittivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermittivityUom'
        enum eml21__PermittivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermittivityMeasure, default initialized and not managed by a soap context
        virtual eml21__PermittivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermittivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PermittivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PermittivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__PermittivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermittivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__PermittivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:977 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt (-423)
/* simple XML schema type 'eml21:PermittivityMeasureExt': */
class SOAP_CMAC eml21__PermittivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PermittivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PermittivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PermittivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PermittivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PermittivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PermittivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PermittivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PermittivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PermittivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:979 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure (-424)
/* simple XML schema type 'eml21:PlaneAngleMeasure': */
class SOAP_CMAC eml21__PlaneAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PlaneAngleUom'
        enum eml21__PlaneAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PlaneAngleMeasure, default initialized and not managed by a soap context
        virtual eml21__PlaneAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PlaneAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PlaneAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PlaneAngleMeasure() { }
        /// Friend allocator used by soap_new_eml21__PlaneAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PlaneAngleMeasure * SOAP_FMAC2 soap_instantiate_eml21__PlaneAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:981 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt (-425)
/* simple XML schema type 'eml21:PlaneAngleMeasureExt': */
class SOAP_CMAC eml21__PlaneAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PlaneAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PlaneAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PlaneAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PlaneAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PlaneAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PlaneAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PlaneAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PlaneAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PlaneAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:983 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure (-426)
/* simple XML schema type 'eml21:PotentialDifferencePerPowerDropMeasure': */
class SOAP_CMAC eml21__PotentialDifferencePerPowerDropMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PotentialDifferencePerPowerDropUom'
        enum eml21__PotentialDifferencePerPowerDropUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PotentialDifferencePerPowerDropMeasure, default initialized and not managed by a soap context
        virtual eml21__PotentialDifferencePerPowerDropMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PotentialDifferencePerPowerDropMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PotentialDifferencePerPowerDropMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PotentialDifferencePerPowerDropMeasure() { }
        /// Friend allocator used by soap_new_eml21__PotentialDifferencePerPowerDropMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PotentialDifferencePerPowerDropMeasure * SOAP_FMAC2 soap_instantiate_eml21__PotentialDifferencePerPowerDropMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:985 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt (-427)
/* simple XML schema type 'eml21:PotentialDifferencePerPowerDropMeasureExt': */
class SOAP_CMAC eml21__PotentialDifferencePerPowerDropMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PotentialDifferencePerPowerDropUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PotentialDifferencePerPowerDropMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PotentialDifferencePerPowerDropMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PotentialDifferencePerPowerDropMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PotentialDifferencePerPowerDropMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PotentialDifferencePerPowerDropMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PotentialDifferencePerPowerDropMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:987 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure (-428)
/* simple XML schema type 'eml21:PowerMeasure': */
class SOAP_CMAC eml21__PowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerUom'
        enum eml21__PowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:989 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt (-429)
/* simple XML schema type 'eml21:PowerMeasureExt': */
class SOAP_CMAC eml21__PowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:991 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure (-430)
/* simple XML schema type 'eml21:PowerPerAreaMeasure': */
class SOAP_CMAC eml21__PowerPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerAreaUom'
        enum eml21__PowerPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:993 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt (-431)
/* simple XML schema type 'eml21:PowerPerAreaMeasureExt': */
class SOAP_CMAC eml21__PowerPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:995 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure (-432)
/* simple XML schema type 'eml21:PowerPerPowerMeasure': */
class SOAP_CMAC eml21__PowerPerPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerPowerUom'
        enum eml21__PowerPerPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerPowerMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerPowerMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerPowerMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:997 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt (-433)
/* simple XML schema type 'eml21:PowerPerPowerMeasureExt': */
class SOAP_CMAC eml21__PowerPerPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:999 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure (-434)
/* simple XML schema type 'eml21:PowerPerVolumeMeasure': */
class SOAP_CMAC eml21__PowerPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerVolumeUom'
        enum eml21__PowerPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PowerPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PowerPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PowerPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1001 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt (-435)
/* simple XML schema type 'eml21:PowerPerVolumeMeasureExt': */
class SOAP_CMAC eml21__PowerPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PowerPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PowerPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PowerPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PowerPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PowerPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PowerPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PowerPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PowerPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PowerPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1003 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure (-436)
/* simple XML schema type 'eml21:PressureMeasure': */
class SOAP_CMAC eml21__PressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUom'
        enum eml21__PressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1005 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt (-437)
/* simple XML schema type 'eml21:PressureMeasureExt': */
class SOAP_CMAC eml21__PressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1007 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure (-438)
/* simple XML schema type 'eml21:PressurePerPressureMeasure': */
class SOAP_CMAC eml21__PressurePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerPressureUom'
        enum eml21__PressurePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1009 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt (-439)
/* simple XML schema type 'eml21:PressurePerPressureMeasureExt': */
class SOAP_CMAC eml21__PressurePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1011 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure (-440)
/* simple XML schema type 'eml21:PressurePerTimeMeasure': */
class SOAP_CMAC eml21__PressurePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerTimeUom'
        enum eml21__PressurePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1013 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt (-441)
/* simple XML schema type 'eml21:PressurePerTimeMeasureExt': */
class SOAP_CMAC eml21__PressurePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1015 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure (-442)
/* simple XML schema type 'eml21:PressurePerVolumeMeasure': */
class SOAP_CMAC eml21__PressurePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerVolumeUom'
        enum eml21__PressurePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressurePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressurePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressurePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1017 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt (-443)
/* simple XML schema type 'eml21:PressurePerVolumeMeasureExt': */
class SOAP_CMAC eml21__PressurePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressurePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressurePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressurePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressurePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressurePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressurePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressurePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressurePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressurePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1019 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure (-444)
/* simple XML schema type 'eml21:PressureSquaredMeasure': */
class SOAP_CMAC eml21__PressureSquaredMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredUom'
        enum eml21__PressureSquaredUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1021 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt (-445)
/* simple XML schema type 'eml21:PressureSquaredMeasureExt': */
class SOAP_CMAC eml21__PressureSquaredMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1023 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure (-446)
/* simple XML schema type 'eml21:PressureSquaredPerForceTimePerAreaMeasure': */
class SOAP_CMAC eml21__PressureSquaredPerForceTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredPerForceTimePerAreaUom'
        enum eml21__PressureSquaredPerForceTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredPerForceTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredPerForceTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredPerForceTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredPerForceTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredPerForceTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredPerForceTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1025 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt (-447)
/* simple XML schema type 'eml21:PressureSquaredPerForceTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__PressureSquaredPerForceTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureSquaredPerForceTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureSquaredPerForceTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureSquaredPerForceTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureSquaredPerForceTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureSquaredPerForceTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureSquaredPerForceTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureSquaredPerForceTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1027 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure (-448)
/* simple XML schema type 'eml21:PressureTimePerVolumeMeasure': */
class SOAP_CMAC eml21__PressureTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureTimePerVolumeUom'
        enum eml21__PressureTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__PressureTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__PressureTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__PressureTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__PressureTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__PressureTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1029 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt (-449)
/* simple XML schema type 'eml21:PressureTimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__PressureTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__PressureTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__PressureTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__PressureTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__PressureTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__PressureTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__PressureTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__PressureTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__PressureTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1031 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure (-450)
/* simple XML schema type 'eml21:QuantityOfLightMeasure': */
class SOAP_CMAC eml21__QuantityOfLightMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:QuantityOfLightUom'
        enum eml21__QuantityOfLightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__QuantityOfLightMeasure, default initialized and not managed by a soap context
        virtual eml21__QuantityOfLightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__QuantityOfLightMeasure); }
      public:
        /// Constructor with default initializations
        eml21__QuantityOfLightMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__QuantityOfLightMeasure() { }
        /// Friend allocator used by soap_new_eml21__QuantityOfLightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__QuantityOfLightMeasure * SOAP_FMAC2 soap_instantiate_eml21__QuantityOfLightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1033 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt (-451)
/* simple XML schema type 'eml21:QuantityOfLightMeasureExt': */
class SOAP_CMAC eml21__QuantityOfLightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:QuantityOfLightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__QuantityOfLightMeasureExt, default initialized and not managed by a soap context
        virtual eml21__QuantityOfLightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__QuantityOfLightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__QuantityOfLightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__QuantityOfLightMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__QuantityOfLightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__QuantityOfLightMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__QuantityOfLightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1035 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure (-452)
/* simple XML schema type 'eml21:RadianceMeasure': */
class SOAP_CMAC eml21__RadianceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadianceUom'
        enum eml21__RadianceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadianceMeasure, default initialized and not managed by a soap context
        virtual eml21__RadianceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadianceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__RadianceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__RadianceMeasure() { }
        /// Friend allocator used by soap_new_eml21__RadianceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadianceMeasure * SOAP_FMAC2 soap_instantiate_eml21__RadianceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1037 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt (-453)
/* simple XML schema type 'eml21:RadianceMeasureExt': */
class SOAP_CMAC eml21__RadianceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadianceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadianceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__RadianceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadianceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__RadianceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__RadianceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__RadianceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadianceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__RadianceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1039 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure (-454)
/* simple XML schema type 'eml21:RadiantIntensityMeasure': */
class SOAP_CMAC eml21__RadiantIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadiantIntensityUom'
        enum eml21__RadiantIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadiantIntensityMeasure, default initialized and not managed by a soap context
        virtual eml21__RadiantIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadiantIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__RadiantIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__RadiantIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml21__RadiantIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadiantIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml21__RadiantIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1041 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt (-455)
/* simple XML schema type 'eml21:RadiantIntensityMeasureExt': */
class SOAP_CMAC eml21__RadiantIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:RadiantIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__RadiantIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__RadiantIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__RadiantIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__RadiantIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__RadiantIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__RadiantIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__RadiantIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__RadiantIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1043 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure (-456)
/* simple XML schema type 'eml21:ReciprocalAreaMeasure': */
class SOAP_CMAC eml21__ReciprocalAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalAreaUom'
        enum eml21__ReciprocalAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1045 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt (-457)
/* simple XML schema type 'eml21:ReciprocalAreaMeasureExt': */
class SOAP_CMAC eml21__ReciprocalAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1047 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure (-458)
/* simple XML schema type 'eml21:ReciprocalElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml21__ReciprocalElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalElectricPotentialDifferenceUom'
        enum eml21__ReciprocalElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1049 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt (-459)
/* simple XML schema type 'eml21:ReciprocalElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml21__ReciprocalElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1051 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure (-460)
/* simple XML schema type 'eml21:ReciprocalForceMeasure': */
class SOAP_CMAC eml21__ReciprocalForceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalForceUom'
        enum eml21__ReciprocalForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalForceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalForceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalForceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalForceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1053 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt (-461)
/* simple XML schema type 'eml21:ReciprocalForceMeasureExt': */
class SOAP_CMAC eml21__ReciprocalForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalForceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1055 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure (-462)
/* simple XML schema type 'eml21:ReciprocalLengthMeasure': */
class SOAP_CMAC eml21__ReciprocalLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalLengthUom'
        enum eml21__ReciprocalLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1057 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt (-463)
/* simple XML schema type 'eml21:ReciprocalLengthMeasureExt': */
class SOAP_CMAC eml21__ReciprocalLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1059 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure (-464)
/* simple XML schema type 'eml21:ReciprocalMassMeasure': */
class SOAP_CMAC eml21__ReciprocalMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassUom'
        enum eml21__ReciprocalMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1061 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt (-465)
/* simple XML schema type 'eml21:ReciprocalMassMeasureExt': */
class SOAP_CMAC eml21__ReciprocalMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1063 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure (-466)
/* simple XML schema type 'eml21:ReciprocalMassTimeMeasure': */
class SOAP_CMAC eml21__ReciprocalMassTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassTimeUom'
        enum eml21__ReciprocalMassTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1065 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt (-467)
/* simple XML schema type 'eml21:ReciprocalMassTimeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalMassTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalMassTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalMassTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalMassTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalMassTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalMassTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalMassTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalMassTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalMassTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalMassTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1067 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure (-468)
/* simple XML schema type 'eml21:ReciprocalPressureMeasure': */
class SOAP_CMAC eml21__ReciprocalPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalPressureUom'
        enum eml21__ReciprocalPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1069 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt (-469)
/* simple XML schema type 'eml21:ReciprocalPressureMeasureExt': */
class SOAP_CMAC eml21__ReciprocalPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1071 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure (-470)
/* simple XML schema type 'eml21:ReciprocalTimeMeasure': */
class SOAP_CMAC eml21__ReciprocalTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalTimeUom'
        enum eml21__ReciprocalTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1073 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt (-471)
/* simple XML schema type 'eml21:ReciprocalTimeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1075 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure (-472)
/* simple XML schema type 'eml21:ReciprocalVolumeMeasure': */
class SOAP_CMAC eml21__ReciprocalVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalVolumeUom'
        enum eml21__ReciprocalVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__ReciprocalVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1077 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt (-473)
/* simple XML schema type 'eml21:ReciprocalVolumeMeasureExt': */
class SOAP_CMAC eml21__ReciprocalVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReciprocalVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReciprocalVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReciprocalVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReciprocalVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReciprocalVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReciprocalVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReciprocalVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReciprocalVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReciprocalVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1079 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure (-474)
/* simple XML schema type 'eml21:ReluctanceMeasure': */
class SOAP_CMAC eml21__ReluctanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReluctanceUom'
        enum eml21__ReluctanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReluctanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ReluctanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReluctanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ReluctanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ReluctanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ReluctanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReluctanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ReluctanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1081 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt (-475)
/* simple XML schema type 'eml21:ReluctanceMeasureExt': */
class SOAP_CMAC eml21__ReluctanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ReluctanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReluctanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ReluctanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReluctanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ReluctanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ReluctanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ReluctanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReluctanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ReluctanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1083 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure (-476)
/* simple XML schema type 'eml21:SecondMomentOfAreaMeasure': */
class SOAP_CMAC eml21__SecondMomentOfAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SecondMomentOfAreaUom'
        enum eml21__SecondMomentOfAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SecondMomentOfAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__SecondMomentOfAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SecondMomentOfAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SecondMomentOfAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SecondMomentOfAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__SecondMomentOfAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SecondMomentOfAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__SecondMomentOfAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1085 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt (-477)
/* simple XML schema type 'eml21:SecondMomentOfAreaMeasureExt': */
class SOAP_CMAC eml21__SecondMomentOfAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SecondMomentOfAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SecondMomentOfAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SecondMomentOfAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SecondMomentOfAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SecondMomentOfAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SecondMomentOfAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SecondMomentOfAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SecondMomentOfAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SecondMomentOfAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1087 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure (-478)
/* simple XML schema type 'eml21:SignalingEventPerTimeMeasure': */
class SOAP_CMAC eml21__SignalingEventPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SignalingEventPerTimeUom'
        enum eml21__SignalingEventPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SignalingEventPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__SignalingEventPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SignalingEventPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SignalingEventPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SignalingEventPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__SignalingEventPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SignalingEventPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__SignalingEventPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1089 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt (-479)
/* simple XML schema type 'eml21:SignalingEventPerTimeMeasureExt': */
class SOAP_CMAC eml21__SignalingEventPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SignalingEventPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SignalingEventPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SignalingEventPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SignalingEventPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SignalingEventPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SignalingEventPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SignalingEventPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SignalingEventPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SignalingEventPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1091 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure (-480)
/* simple XML schema type 'eml21:SolidAngleMeasure': */
class SOAP_CMAC eml21__SolidAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SolidAngleUom'
        enum eml21__SolidAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SolidAngleMeasure, default initialized and not managed by a soap context
        virtual eml21__SolidAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SolidAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SolidAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SolidAngleMeasure() { }
        /// Friend allocator used by soap_new_eml21__SolidAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SolidAngleMeasure * SOAP_FMAC2 soap_instantiate_eml21__SolidAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1093 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt (-481)
/* simple XML schema type 'eml21:SolidAngleMeasureExt': */
class SOAP_CMAC eml21__SolidAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SolidAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SolidAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SolidAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SolidAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SolidAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SolidAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SolidAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SolidAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SolidAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1095 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure (-482)
/* simple XML schema type 'eml21:SpecificHeatCapacityMeasure': */
class SOAP_CMAC eml21__SpecificHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SpecificHeatCapacityUom'
        enum eml21__SpecificHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SpecificHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml21__SpecificHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SpecificHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__SpecificHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__SpecificHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml21__SpecificHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__SpecificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml21__SpecificHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1097 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt (-483)
/* simple XML schema type 'eml21:SpecificHeatCapacityMeasureExt': */
class SOAP_CMAC eml21__SpecificHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:SpecificHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__SpecificHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__SpecificHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__SpecificHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__SpecificHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__SpecificHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__SpecificHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__SpecificHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__SpecificHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1099 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure (-484)
/* simple XML schema type 'eml21:TemperatureIntervalMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalUom'
        enum eml21__TemperatureIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1101 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt (-485)
/* simple XML schema type 'eml21:TemperatureIntervalMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1103 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure (-486)
/* simple XML schema type 'eml21:TemperatureIntervalPerLengthMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerLengthUom'
        enum eml21__TemperatureIntervalPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1105 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt (-487)
/* simple XML schema type 'eml21:TemperatureIntervalPerLengthMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1107 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure (-488)
/* simple XML schema type 'eml21:TemperatureIntervalPerPressureMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerPressureUom'
        enum eml21__TemperatureIntervalPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1109 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt (-489)
/* simple XML schema type 'eml21:TemperatureIntervalPerPressureMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1111 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure (-490)
/* simple XML schema type 'eml21:TemperatureIntervalPerTimeMeasure': */
class SOAP_CMAC eml21__TemperatureIntervalPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerTimeUom'
        enum eml21__TemperatureIntervalPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1113 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt (-491)
/* simple XML schema type 'eml21:TemperatureIntervalPerTimeMeasureExt': */
class SOAP_CMAC eml21__TemperatureIntervalPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TemperatureIntervalPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TemperatureIntervalPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TemperatureIntervalPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TemperatureIntervalPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TemperatureIntervalPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TemperatureIntervalPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TemperatureIntervalPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TemperatureIntervalPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TemperatureIntervalPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1115 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure (-492)
/* simple XML schema type 'eml21:ThermalConductanceMeasure': */
class SOAP_CMAC eml21__ThermalConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductanceUom'
        enum eml21__ThermalConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1117 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt (-493)
/* simple XML schema type 'eml21:ThermalConductanceMeasureExt': */
class SOAP_CMAC eml21__ThermalConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1119 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure (-494)
/* simple XML schema type 'eml21:ThermalConductivityMeasure': */
class SOAP_CMAC eml21__ThermalConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductivityUom'
        enum eml21__ThermalConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1121 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt (-495)
/* simple XML schema type 'eml21:ThermalConductivityMeasureExt': */
class SOAP_CMAC eml21__ThermalConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1123 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure (-496)
/* simple XML schema type 'eml21:ThermalDiffusivityMeasure': */
class SOAP_CMAC eml21__ThermalDiffusivityMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalDiffusivityUom'
        enum eml21__ThermalDiffusivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalDiffusivityMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalDiffusivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalDiffusivityMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalDiffusivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalDiffusivityMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalDiffusivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalDiffusivityMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalDiffusivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1125 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt (-497)
/* simple XML schema type 'eml21:ThermalDiffusivityMeasureExt': */
class SOAP_CMAC eml21__ThermalDiffusivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalDiffusivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalDiffusivityMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalDiffusivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalDiffusivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalDiffusivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalDiffusivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalDiffusivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalDiffusivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalDiffusivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1127 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure (-498)
/* simple XML schema type 'eml21:ThermalInsulanceMeasure': */
class SOAP_CMAC eml21__ThermalInsulanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalInsulanceUom'
        enum eml21__ThermalInsulanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalInsulanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalInsulanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalInsulanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalInsulanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalInsulanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalInsulanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalInsulanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalInsulanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1129 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt (-499)
/* simple XML schema type 'eml21:ThermalInsulanceMeasureExt': */
class SOAP_CMAC eml21__ThermalInsulanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalInsulanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalInsulanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalInsulanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalInsulanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalInsulanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalInsulanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalInsulanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalInsulanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalInsulanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1131 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure (-500)
/* simple XML schema type 'eml21:ThermalResistanceMeasure': */
class SOAP_CMAC eml21__ThermalResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalResistanceUom'
        enum eml21__ThermalResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalResistanceMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermalResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermalResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermalResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermalResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1133 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt (-501)
/* simple XML schema type 'eml21:ThermalResistanceMeasureExt': */
class SOAP_CMAC eml21__ThermalResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermalResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermalResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermalResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermalResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermalResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermalResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermalResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermalResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermalResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1135 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure (-502)
/* simple XML schema type 'eml21:ThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml21__ThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperatureUom'
        enum eml21__ThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1137 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt (-503)
/* simple XML schema type 'eml21:ThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml21__ThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1139 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-504)
/* simple XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom'
        enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1141 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-505)
/* simple XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1143 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure (-506)
/* simple XML schema type 'eml21:TimeMeasure': */
class SOAP_CMAC eml21__TimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimeUom'
        enum eml21__TimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1145 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt (-507)
/* simple XML schema type 'eml21:TimeMeasureExt': */
class SOAP_CMAC eml21__TimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1147 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure (-508)
/* simple XML schema type 'eml21:TimePerLengthMeasure': */
class SOAP_CMAC eml21__TimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerLengthUom'
        enum eml21__TimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1149 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt (-509)
/* simple XML schema type 'eml21:TimePerLengthMeasureExt': */
class SOAP_CMAC eml21__TimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1151 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure (-510)
/* simple XML schema type 'eml21:TimePerMassMeasure': */
class SOAP_CMAC eml21__TimePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerMassUom'
        enum eml21__TimePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1153 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt (-511)
/* simple XML schema type 'eml21:TimePerMassMeasureExt': */
class SOAP_CMAC eml21__TimePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1155 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure (-512)
/* simple XML schema type 'eml21:TimePerTimeMeasure': */
class SOAP_CMAC eml21__TimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerTimeUom'
        enum eml21__TimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1157 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt (-513)
/* simple XML schema type 'eml21:TimePerTimeMeasureExt': */
class SOAP_CMAC eml21__TimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1159 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure (-514)
/* simple XML schema type 'eml21:TimePerVolumeMeasure': */
class SOAP_CMAC eml21__TimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerVolumeUom'
        enum eml21__TimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__TimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__TimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__TimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__TimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1161 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt (-515)
/* simple XML schema type 'eml21:TimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__TimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:TimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__TimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__TimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__TimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__TimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__TimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__TimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__TimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__TimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1163 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure (-516)
/* simple XML schema type 'eml21:UnitlessMeasure': */
class SOAP_CMAC eml21__UnitlessMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__UnitlessMeasure, default initialized and not managed by a soap context
        virtual eml21__UnitlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__UnitlessMeasure); }
      public:
        /// Constructor with default initializations
        eml21__UnitlessMeasure() : __item(), soap() { }
        virtual ~eml21__UnitlessMeasure() { }
        /// Friend allocator used by soap_new_eml21__UnitlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__UnitlessMeasure * SOAP_FMAC2 soap_instantiate_eml21__UnitlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1165 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure (-517)
/* simple XML schema type 'eml21:VerticalCoordinateMeasure': */
class SOAP_CMAC eml21__VerticalCoordinateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VerticalCoordinateUom'
        enum eml21__VerticalCoordinateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCoordinateMeasure, default initialized and not managed by a soap context
        virtual eml21__VerticalCoordinateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCoordinateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCoordinateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VerticalCoordinateMeasure() { }
        /// Friend allocator used by soap_new_eml21__VerticalCoordinateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCoordinateMeasure * SOAP_FMAC2 soap_instantiate_eml21__VerticalCoordinateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1167 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt (-518)
/* simple XML schema type 'eml21:VerticalCoordinateMeasureExt': */
class SOAP_CMAC eml21__VerticalCoordinateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VerticalCoordinateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VerticalCoordinateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VerticalCoordinateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VerticalCoordinateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VerticalCoordinateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VerticalCoordinateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VerticalCoordinateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VerticalCoordinateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VerticalCoordinateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1169 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure (-519)
/* simple XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasure': */
class SOAP_CMAC eml21__VolumeFlowRatePerVolumeFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateUom'
        enum eml21__VolumeFlowRatePerVolumeFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeFlowRatePerVolumeFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumeFlowRatePerVolumeFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeFlowRatePerVolumeFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumeFlowRatePerVolumeFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeFlowRatePerVolumeFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeFlowRatePerVolumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1171 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt (-520)
/* simple XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasureExt': */
class SOAP_CMAC eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeFlowRatePerVolumeFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1173 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure (-521)
/* simple XML schema type 'eml21:VolumeMeasure': */
class SOAP_CMAC eml21__VolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeUom'
        enum eml21__VolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1175 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt (-522)
/* simple XML schema type 'eml21:VolumeMeasureExt': */
class SOAP_CMAC eml21__VolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1177 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure (-523)
/* simple XML schema type 'eml21:VolumePerAreaMeasure': */
class SOAP_CMAC eml21__VolumePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerAreaUom'
        enum eml21__VolumePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1179 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt (-524)
/* simple XML schema type 'eml21:VolumePerAreaMeasureExt': */
class SOAP_CMAC eml21__VolumePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1181 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure (-525)
/* simple XML schema type 'eml21:VolumePerLengthMeasure': */
class SOAP_CMAC eml21__VolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerLengthUom'
        enum eml21__VolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1183 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt (-526)
/* simple XML schema type 'eml21:VolumePerLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1185 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure (-527)
/* simple XML schema type 'eml21:VolumePerMassMeasure': */
class SOAP_CMAC eml21__VolumePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerMassUom'
        enum eml21__VolumePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerMassMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1187 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt (-528)
/* simple XML schema type 'eml21:VolumePerMassMeasureExt': */
class SOAP_CMAC eml21__VolumePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1189 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure (-529)
/* simple XML schema type 'eml21:VolumePerPressureMeasure': */
class SOAP_CMAC eml21__VolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerPressureUom'
        enum eml21__VolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1191 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt (-530)
/* simple XML schema type 'eml21:VolumePerPressureMeasureExt': */
class SOAP_CMAC eml21__VolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1193 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure (-531)
/* simple XML schema type 'eml21:VolumePerRotationMeasure': */
class SOAP_CMAC eml21__VolumePerRotationMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerRotationUom'
        enum eml21__VolumePerRotationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerRotationMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerRotationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerRotationMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerRotationMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerRotationMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerRotationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerRotationMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerRotationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1195 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt (-532)
/* simple XML schema type 'eml21:VolumePerRotationMeasureExt': */
class SOAP_CMAC eml21__VolumePerRotationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerRotationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerRotationMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerRotationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerRotationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerRotationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerRotationMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerRotationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerRotationMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerRotationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1197 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure (-533)
/* simple XML schema type 'eml21:VolumePerTimeLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimeLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeLengthUom'
        enum eml21__VolumePerTimeLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1199 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt (-534)
/* simple XML schema type 'eml21:VolumePerTimeLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimeLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1201 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure (-535)
/* simple XML schema type 'eml21:VolumePerTimeMeasure': */
class SOAP_CMAC eml21__VolumePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeUom'
        enum eml21__VolumePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1203 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt (-536)
/* simple XML schema type 'eml21:VolumePerTimeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1205 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure (-537)
/* simple XML schema type 'eml21:VolumePerTimePerAreaMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerAreaUom'
        enum eml21__VolumePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1207 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt (-538)
/* simple XML schema type 'eml21:VolumePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1209 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure (-539)
/* simple XML schema type 'eml21:VolumePerTimePerLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerLengthUom'
        enum eml21__VolumePerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1211 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt (-540)
/* simple XML schema type 'eml21:VolumePerTimePerLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1213 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure (-541)
/* simple XML schema type 'eml21:VolumePerTimePerPressureLengthMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerPressureLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureLengthUom'
        enum eml21__VolumePerTimePerPressureLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureLengthMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureLengthMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureLengthMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1215 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt (-542)
/* simple XML schema type 'eml21:VolumePerTimePerPressureLengthMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerPressureLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1217 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure (-543)
/* simple XML schema type 'eml21:VolumePerTimePerPressureMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureUom'
        enum eml21__VolumePerTimePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1219 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt (-544)
/* simple XML schema type 'eml21:VolumePerTimePerPressureMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1221 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure (-545)
/* simple XML schema type 'eml21:VolumePerTimePerTimeMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerTimeUom'
        enum eml21__VolumePerTimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1223 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt (-546)
/* simple XML schema type 'eml21:VolumePerTimePerTimeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1225 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure (-547)
/* simple XML schema type 'eml21:VolumePerTimePerVolumeMeasure': */
class SOAP_CMAC eml21__VolumePerTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerVolumeUom'
        enum eml21__VolumePerTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1227 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt (-548)
/* simple XML schema type 'eml21:VolumePerTimePerVolumeMeasureExt': */
class SOAP_CMAC eml21__VolumePerTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1229 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure (-549)
/* simple XML schema type 'eml21:VolumePerVolumeMeasure': */
class SOAP_CMAC eml21__VolumePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerVolumeUom'
        enum eml21__VolumePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1231 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt (-550)
/* simple XML schema type 'eml21:VolumePerVolumeMeasureExt': */
class SOAP_CMAC eml21__VolumePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1233 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure (-551)
/* simple XML schema type 'eml21:VolumetricHeatTransferCoefficientMeasure': */
class SOAP_CMAC eml21__VolumetricHeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricHeatTransferCoefficientUom'
        enum eml21__VolumetricHeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricHeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumetricHeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricHeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricHeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricHeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumetricHeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricHeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumetricHeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1235 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt (-552)
/* simple XML schema type 'eml21:VolumetricHeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml21__VolumetricHeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricHeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricHeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumetricHeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricHeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricHeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricHeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricHeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1237 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure (-553)
/* simple XML schema type 'eml21:VolumetricThermalExpansionMeasure': */
class SOAP_CMAC eml21__VolumetricThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricThermalExpansionUom'
        enum eml21__VolumetricThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml21__VolumetricThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml21__VolumetricThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml21__VolumetricThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1239 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt (-554)
/* simple XML schema type 'eml21:VolumetricThermalExpansionMeasureExt': */
class SOAP_CMAC eml21__VolumetricThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:VolumetricThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__VolumetricThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml21__VolumetricThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__VolumetricThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml21__VolumetricThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml21__VolumetricThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml21__VolumetricThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml21__VolumetricThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml21__VolumetricThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:1301 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure (-585)
/* simple XML schema type 'eml21:ReferencePressure': */
class SOAP_CMAC eml21__ReferencePressure {
      public:
        /// Simple content of XML schema type 'eml21:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml21:PressureUom'
        enum eml21__PressureUom uom;
        /// Optional attribute 'referencePressureKind' of XML schema type 'eml21:ReferencePressureKind'
        enum eml21__ReferencePressureKind *referencePressureKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__ReferencePressure, default initialized and not managed by a soap context
        virtual eml21__ReferencePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__ReferencePressure); }
      public:
        /// Constructor with default initializations
        eml21__ReferencePressure() : __item(), uom(), referencePressureKind(), soap() { }
        virtual ~eml21__ReferencePressure() { }
        /// Friend allocator used by soap_new_eml21__ReferencePressure(struct soap*, int)
        friend SOAP_FMAC1 eml21__ReferencePressure * SOAP_FMAC2 soap_instantiate_eml21__ReferencePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:353 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString (-111)
/* simple XML schema type 'witsml20:TimestampedCommentString': */
class SOAP_CMAC witsml20__TimestampedCommentString {
      public:
        /// Simple content of XML schema type 'eml21:String2000' wrapped by this struct
        std::string __item;
        /// Required attribute 'dTim' of XML schema type 'eml21:TimeStamp'
        std::string dTim;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__TimestampedCommentString, default initialized and not managed by a soap context
        virtual witsml20__TimestampedCommentString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__TimestampedCommentString); }
      public:
        /// Constructor with default initializations
        witsml20__TimestampedCommentString() : __item(), dTim(), soap() { }
        virtual ~witsml20__TimestampedCommentString() { }
        /// Friend allocator used by soap_new_witsml20__TimestampedCommentString(struct soap*, int)
        friend SOAP_FMAC1 witsml20__TimestampedCommentString * SOAP_FMAC2 soap_instantiate_witsml20__TimestampedCommentString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:397 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit (-133)
/* simple XML schema type 'witsml20:LithostratigraphicUnit': */
class SOAP_CMAC witsml20__LithostratigraphicUnit {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Required attribute 'kind' of XML schema type 'eml21:LithostratigraphicRank'
        enum eml21__LithostratigraphicRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__LithostratigraphicUnit, default initialized and not managed by a soap context
        virtual witsml20__LithostratigraphicUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__LithostratigraphicUnit); }
      public:
        /// Constructor with default initializations
        witsml20__LithostratigraphicUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml20__LithostratigraphicUnit() { }
        /// Friend allocator used by soap_new_witsml20__LithostratigraphicUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml20__LithostratigraphicUnit * SOAP_FMAC2 soap_instantiate_witsml20__LithostratigraphicUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:411 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit (-140)
/* simple XML schema type 'witsml20:GeochronologicalUnit': */
class SOAP_CMAC witsml20__GeochronologicalUnit {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Optional attribute 'authority' of XML schema type 'eml21:String64'
        std::string *authority;
        /// Required attribute 'kind' of XML schema type 'eml21:GeochronologicalRank'
        enum eml21__GeochronologicalRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml20__GeochronologicalUnit, default initialized and not managed by a soap context
        virtual witsml20__GeochronologicalUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml20__GeochronologicalUnit); }
      public:
        /// Constructor with default initializations
        witsml20__GeochronologicalUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml20__GeochronologicalUnit() { }
        /// Friend allocator used by soap_new_witsml20__GeochronologicalUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml20__GeochronologicalUnit * SOAP_FMAC2 soap_instantiate_witsml20__GeochronologicalUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:465 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName (-167)
/* simple XML schema type 'eml21:AuthorityQualifiedName': */
class SOAP_CMAC eml21__AuthorityQualifiedName {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'authority' of XML schema type 'eml21:String64'
        std::string authority;
        /// Optional attribute 'code' of XML schema type 'eml21:String64'
        std::string *code;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__AuthorityQualifiedName, default initialized and not managed by a soap context
        virtual eml21__AuthorityQualifiedName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__AuthorityQualifiedName); }
      public:
        /// Constructor with default initializations
        eml21__AuthorityQualifiedName() : __item(), authority(), code(), soap() { }
        virtual ~eml21__AuthorityQualifiedName() { }
        /// Friend allocator used by soap_new_eml21__AuthorityQualifiedName(struct soap*, int)
        friend SOAP_FMAC1 eml21__AuthorityQualifiedName * SOAP_FMAC2 soap_instantiate_eml21__AuthorityQualifiedName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:477 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray (-173)
/* complex XML schema type 'eml21:FloatingPointConstantArray': */
class SOAP_CMAC eml21__FloatingPointConstantArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointConstantArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointConstantArray() : Value(), Count() { }
        virtual ~eml21__FloatingPointConstantArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointConstantArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:479 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray (-174)
/* complex XML schema type 'eml21:FloatingPointExternalArray': */
class SOAP_CMAC eml21__FloatingPointExternalArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointExternalArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointExternalArray() : Values() { }
        virtual ~eml21__FloatingPointExternalArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointExternalArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:481 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray (-175)
/* complex XML schema type 'eml21:FloatingPointLatticeArray': */
class SOAP_CMAC eml21__FloatingPointLatticeArray : public eml21__AbstractFloatingPointArray {
      public:
        /// Required element 'eml21:StartValue' of XML schema type 'xsd:double'
        double StartValue;
        /// Required element 'eml21:Offset' of XML schema type 'eml21:FloatingPointConstantArray'
        std::vector<eml21__FloatingPointConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatingPointLatticeArray, default initialized and not managed by a soap context
        virtual eml21__FloatingPointLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatingPointLatticeArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatingPointLatticeArray() : StartValue(), Offset() { }
        virtual ~eml21__FloatingPointLatticeArray() { }
        /// Friend allocator used by soap_new_eml21__FloatingPointLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatingPointLatticeArray * SOAP_FMAC2 soap_instantiate_eml21__FloatingPointLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:485 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray (-177)
/* complex XML schema type 'eml21:IntegerArrayFromBooleanMaskArray': */
class SOAP_CMAC eml21__IntegerArrayFromBooleanMaskArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:TotalIndexCount' of XML schema type 'xsd:unsignedLong'
        ULONG64 TotalIndexCount;
        /// Required element 'eml21:Mask' of XML schema type 'eml21:AbstractBooleanArray'
        eml21__AbstractBooleanArray *Mask;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerArrayFromBooleanMaskArray, default initialized and not managed by a soap context
        virtual eml21__IntegerArrayFromBooleanMaskArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerArrayFromBooleanMaskArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerArrayFromBooleanMaskArray() : TotalIndexCount(), Mask() { }
        virtual ~eml21__IntegerArrayFromBooleanMaskArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerArrayFromBooleanMaskArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerArrayFromBooleanMaskArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerArrayFromBooleanMaskArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:487 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray (-178)
/* complex XML schema type 'eml21:IntegerConstantArray': */
class SOAP_CMAC eml21__IntegerConstantArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerConstantArray, default initialized and not managed by a soap context
        virtual eml21__IntegerConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerConstantArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerConstantArray() : Value(), Count() { }
        virtual ~eml21__IntegerConstantArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerConstantArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:489 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray (-179)
/* complex XML schema type 'eml21:IntegerExternalArray': */
class SOAP_CMAC eml21__IntegerExternalArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:NullValue' of XML schema type 'xsd:long'
        LONG64 NullValue;
        /// Required element 'eml21:Values' of XML schema type 'eml21:ExternalDataset'
        eml21__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerExternalArray, default initialized and not managed by a soap context
        virtual eml21__IntegerExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerExternalArray() : NullValue(), Values() { }
        virtual ~eml21__IntegerExternalArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerExternalArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:491 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray (-180)
/* complex XML schema type 'eml21:IntegerLatticeArray': */
class SOAP_CMAC eml21__IntegerLatticeArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:StartValue' of XML schema type 'xsd:long'
        LONG64 StartValue;
        /// Required element 'eml21:Offset' of XML schema type 'eml21:IntegerConstantArray'
        std::vector<eml21__IntegerConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerLatticeArray, default initialized and not managed by a soap context
        virtual eml21__IntegerLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerLatticeArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerLatticeArray() : StartValue(), Offset() { }
        virtual ~eml21__IntegerLatticeArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerLatticeArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:493 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray (-181)
/* complex XML schema type 'eml21:IntegerRangeArray': */
class SOAP_CMAC eml21__IntegerRangeArray : public eml21__AbstractIntegerArray {
      public:
        /// Required element 'eml21:Count' of XML schema type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml21:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__IntegerRangeArray, default initialized and not managed by a soap context
        virtual eml21__IntegerRangeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__IntegerRangeArray); }
      public:
        /// Constructor with default initializations
        eml21__IntegerRangeArray() : Count(), Value() { }
        virtual ~eml21__IntegerRangeArray() { }
        /// Friend allocator used by soap_new_eml21__IntegerRangeArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__IntegerRangeArray * SOAP_FMAC2 soap_instantiate_eml21__IntegerRangeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:503 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure (-186)
/* simple XML schema type 'eml21:StringMeasure': */
class SOAP_CMAC eml21__StringMeasure {
      public:
        /// Simple content of XML schema type 'eml21:String64' wrapped by this struct
        std::string __item;
        /// Optional attribute 'uom' of XML schema type 'eml21:UnitOfMeasure'
        enum eml21__UnitOfMeasure *uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__StringMeasure, default initialized and not managed by a soap context
        virtual eml21__StringMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__StringMeasure); }
      public:
        /// Constructor with default initializations
        eml21__StringMeasure() : __item(), uom(), soap() { }
        virtual ~eml21__StringMeasure() { }
        /// Friend allocator used by soap_new_eml21__StringMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml21__StringMeasure * SOAP_FMAC2 soap_instantiate_eml21__StringMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:473 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray (-171)
/* complex XML schema type 'eml21:DoubleExternalArray': */
class SOAP_CMAC eml21__DoubleExternalArray : public eml21__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__DoubleExternalArray, default initialized and not managed by a soap context
        virtual eml21__DoubleExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__DoubleExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__DoubleExternalArray() { }
        virtual ~eml21__DoubleExternalArray() { }
        /// Friend allocator used by soap_new_eml21__DoubleExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__DoubleExternalArray * SOAP_FMAC2 soap_instantiate_eml21__DoubleExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:475 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray (-172)
/* complex XML schema type 'eml21:FloatExternalArray': */
class SOAP_CMAC eml21__FloatExternalArray : public eml21__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml21__FloatExternalArray, default initialized and not managed by a soap context
        virtual eml21__FloatExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml21__FloatExternalArray); }
      public:
        /// Constructor with default initializations
        eml21__FloatExternalArray() { }
        virtual ~eml21__FloatExternalArray() { }
        /// Friend allocator used by soap_new_eml21__FloatExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml21__FloatExternalArray * SOAP_FMAC2 soap_instantiate_eml21__FloatExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_1ForGsoap.h:42754 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header (-845623296)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:42754 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code (-845623297)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:42754 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail (-845623299)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:42754 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason (-845623302)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_1ForGsoap.h:42754 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault (-845623303)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_1__XML
#define SOAP_TYPE_gsoap_eml2_1__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_1__QName
#define SOAP_TYPE_gsoap_eml2_1__QName (-6)

typedef char *_QName;
#endif

/* eml2_1ForGsoap.h:144 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_xsd__anyURI (-11)

typedef std::string xsd__anyURI;
#endif

/* eml2_1ForGsoap.h:147 */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__date
#define SOAP_TYPE_gsoap_eml2_1_xsd__date (-12)

typedef std::string xsd__date;
#endif

/* eml2_1ForGsoap.h:1366 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentTypeExt (-613)

typedef std::string witsml20__EquipmentTypeExt;
#endif

/* eml2_1ForGsoap.h:1377 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt (-614)

typedef std::string eml21__LithologyKindExt;
#endif

/* eml2_1ForGsoap.h:1380 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt (-615)

typedef std::string eml21__LithologyQualifierKindExt;
#endif

/* eml2_1ForGsoap.h:1383 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt (-616)

typedef std::string eml21__QuantityClassKindExt;
#endif

/* eml2_1ForGsoap.h:1386 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt (-617)

typedef std::string eml21__ReferenceConditionExt;
#endif

/* eml2_1ForGsoap.h:1389 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt (-618)

typedef std::string eml21__UnitOfMeasureExt;
#endif

/* eml2_1ForGsoap.h:1392 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt (-619)

typedef std::string eml21__AbsorbedDoseUomExt;
#endif

/* eml2_1ForGsoap.h:1395 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt (-620)

typedef std::string eml21__ActivityOfRadioactivityUomExt;
#endif

/* eml2_1ForGsoap.h:1398 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt (-621)

typedef std::string eml21__AmountOfSubstancePerAmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:1401 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt (-622)

typedef std::string eml21__AmountOfSubstancePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1404 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt (-623)

typedef std::string eml21__AmountOfSubstancePerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1407 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt (-624)

typedef std::string eml21__AmountOfSubstancePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1410 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt (-625)

typedef std::string eml21__AmountOfSubstancePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1413 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt (-626)

typedef std::string eml21__AmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:1416 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt (-627)

typedef std::string eml21__AnglePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1419 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt (-628)

typedef std::string eml21__AnglePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1422 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt (-629)

typedef std::string eml21__AngularAccelerationUomExt;
#endif

/* eml2_1ForGsoap.h:1425 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt (-630)

typedef std::string eml21__AngularVelocityUomExt;
#endif

/* eml2_1ForGsoap.h:1428 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt (-631)

typedef std::string eml21__APIGammaRayUomExt;
#endif

/* eml2_1ForGsoap.h:1431 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt (-632)

typedef std::string eml21__APIGravityUomExt;
#endif

/* eml2_1ForGsoap.h:1434 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt (-633)

typedef std::string eml21__APINeutronUomExt;
#endif

/* eml2_1ForGsoap.h:1437 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt (-634)

typedef std::string eml21__AreaPerAmountOfSubstanceUomExt;
#endif

/* eml2_1ForGsoap.h:1440 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt (-635)

typedef std::string eml21__AreaPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1443 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt (-636)

typedef std::string eml21__AreaPerCountUomExt;
#endif

/* eml2_1ForGsoap.h:1446 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt (-637)

typedef std::string eml21__AreaPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1449 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt (-638)

typedef std::string eml21__AreaPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1452 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt (-639)

typedef std::string eml21__AreaPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1455 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt (-640)

typedef std::string eml21__AreaUomExt;
#endif

/* eml2_1ForGsoap.h:1458 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt (-641)

typedef std::string eml21__AttenuationPerFrequencyIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:1461 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt (-642)

typedef std::string eml21__CapacitanceUomExt;
#endif

/* eml2_1ForGsoap.h:1464 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt (-643)

typedef std::string eml21__CationExchangeCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:1467 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt (-644)

typedef std::string eml21__DataTransferSpeedUomExt;
#endif

/* eml2_1ForGsoap.h:1470 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt (-645)

typedef std::string eml21__DiffusionCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:1473 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt (-646)

typedef std::string eml21__DiffusiveTimeOfFlightUomExt;
#endif

/* eml2_1ForGsoap.h:1476 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt (-647)

typedef std::string eml21__DigitalStorageUomExt;
#endif

/* eml2_1ForGsoap.h:1479 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt (-648)

typedef std::string eml21__DimensionlessUomExt;
#endif

/* eml2_1ForGsoap.h:1482 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt (-649)

typedef std::string eml21__DipoleMomentUomExt;
#endif

/* eml2_1ForGsoap.h:1485 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt (-650)

typedef std::string eml21__DoseEquivalentUomExt;
#endif

/* eml2_1ForGsoap.h:1488 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt (-651)

typedef std::string eml21__DynamicViscosityUomExt;
#endif

/* eml2_1ForGsoap.h:1491 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt (-652)

typedef std::string eml21__ElectricalResistivityUomExt;
#endif

/* eml2_1ForGsoap.h:1494 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt (-653)

typedef std::string eml21__ElectricChargePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1497 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt (-654)

typedef std::string eml21__ElectricChargePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1500 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt (-655)

typedef std::string eml21__ElectricChargePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1503 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt (-656)

typedef std::string eml21__ElectricChargeUomExt;
#endif

/* eml2_1ForGsoap.h:1506 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt (-657)

typedef std::string eml21__ElectricConductanceUomExt;
#endif

/* eml2_1ForGsoap.h:1509 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt (-658)

typedef std::string eml21__ElectricConductivityUomExt;
#endif

/* eml2_1ForGsoap.h:1512 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt (-659)

typedef std::string eml21__ElectricCurrentDensityUomExt;
#endif

/* eml2_1ForGsoap.h:1515 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt (-660)

typedef std::string eml21__ElectricCurrentUomExt;
#endif

/* eml2_1ForGsoap.h:1518 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt (-661)

typedef std::string eml21__ElectricFieldStrengthUomExt;
#endif

/* eml2_1ForGsoap.h:1521 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt (-662)

typedef std::string eml21__ElectricPotentialDifferenceUomExt;
#endif

/* eml2_1ForGsoap.h:1524 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt (-663)

typedef std::string eml21__ElectricResistancePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1527 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt (-664)

typedef std::string eml21__ElectricResistanceUomExt;
#endif

/* eml2_1ForGsoap.h:1530 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt (-665)

typedef std::string eml21__ElectromagneticMomentUomExt;
#endif

/* eml2_1ForGsoap.h:1533 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt (-666)

typedef std::string eml21__EnergyLengthPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1536 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt (-667)

typedef std::string eml21__EnergyLengthPerTimeAreaTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:1539 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt (-668)

typedef std::string eml21__EnergyPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1542 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt (-669)

typedef std::string eml21__EnergyPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1545 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt (-670)

typedef std::string eml21__EnergyPerMassPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1548 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt (-671)

typedef std::string eml21__EnergyPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1551 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt (-672)

typedef std::string eml21__EnergyPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1554 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt (-673)

typedef std::string eml21__EnergyUomExt;
#endif

/* eml2_1ForGsoap.h:1557 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt (-674)

typedef std::string eml21__ForceAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1560 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt (-675)

typedef std::string eml21__ForceLengthPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1563 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt (-676)

typedef std::string eml21__ForcePerForceUomExt;
#endif

/* eml2_1ForGsoap.h:1566 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt (-677)

typedef std::string eml21__ForcePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1569 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt (-678)

typedef std::string eml21__ForcePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1572 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt (-679)

typedef std::string eml21__ForceUomExt;
#endif

/* eml2_1ForGsoap.h:1575 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt (-680)

typedef std::string eml21__FrequencyIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:1578 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt (-681)

typedef std::string eml21__FrequencyUomExt;
#endif

/* eml2_1ForGsoap.h:1581 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt (-682)

typedef std::string eml21__HeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:1584 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt (-683)

typedef std::string eml21__HeatFlowRateUomExt;
#endif

/* eml2_1ForGsoap.h:1587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt (-684)

typedef std::string eml21__HeatTransferCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:1590 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt (-685)

typedef std::string eml21__IlluminanceUomExt;
#endif

/* eml2_1ForGsoap.h:1593 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt (-686)

typedef std::string eml21__InductanceUomExt;
#endif

/* eml2_1ForGsoap.h:1596 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt (-687)

typedef std::string eml21__IsothermalCompressibilityUomExt;
#endif

/* eml2_1ForGsoap.h:1599 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt (-688)

typedef std::string eml21__KinematicViscosityUomExt;
#endif

/* eml2_1ForGsoap.h:1602 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt (-689)

typedef std::string eml21__LengthPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1605 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt (-690)

typedef std::string eml21__LengthPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1608 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt (-691)

typedef std::string eml21__LengthPerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1611 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt (-692)

typedef std::string eml21__LengthPerTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:1614 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt (-693)

typedef std::string eml21__LengthPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1617 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt (-694)

typedef std::string eml21__LengthPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1620 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt (-695)

typedef std::string eml21__LengthUomExt;
#endif

/* eml2_1ForGsoap.h:1623 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt (-696)

typedef std::string eml21__LightExposureUomExt;
#endif

/* eml2_1ForGsoap.h:1626 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt (-697)

typedef std::string eml21__LinearAccelerationUomExt;
#endif

/* eml2_1ForGsoap.h:1629 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt (-698)

typedef std::string eml21__LinearThermalExpansionUomExt;
#endif

/* eml2_1ForGsoap.h:1632 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt (-699)

typedef std::string eml21__LogarithmicPowerRatioPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1635 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt (-700)

typedef std::string eml21__LogarithmicPowerRatioUomExt;
#endif

/* eml2_1ForGsoap.h:1638 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt (-701)

typedef std::string eml21__LuminanceUomExt;
#endif

/* eml2_1ForGsoap.h:1641 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt (-702)

typedef std::string eml21__LuminousEfficacyUomExt;
#endif

/* eml2_1ForGsoap.h:1644 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt (-703)

typedef std::string eml21__LuminousFluxUomExt;
#endif

/* eml2_1ForGsoap.h:1647 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt (-704)

typedef std::string eml21__LuminousIntensityUomExt;
#endif

/* eml2_1ForGsoap.h:1650 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt (-705)

typedef std::string eml21__MagneticDipoleMomentUomExt;
#endif

/* eml2_1ForGsoap.h:1653 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt (-706)

typedef std::string eml21__MagneticFieldStrengthUomExt;
#endif

/* eml2_1ForGsoap.h:1656 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt (-707)

typedef std::string eml21__MagneticFluxDensityPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1659 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt (-708)

typedef std::string eml21__MagneticFluxDensityUomExt;
#endif

/* eml2_1ForGsoap.h:1662 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt (-709)

typedef std::string eml21__MagneticFluxUomExt;
#endif

/* eml2_1ForGsoap.h:1665 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt (-710)

typedef std::string eml21__MagneticPermeabilityUomExt;
#endif

/* eml2_1ForGsoap.h:1668 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt (-711)

typedef std::string eml21__MagneticVectorPotentialUomExt;
#endif

/* eml2_1ForGsoap.h:1671 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt (-712)

typedef std::string eml21__MassLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1674 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt (-713)

typedef std::string eml21__MassPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1677 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt (-714)

typedef std::string eml21__MassPerEnergyUomExt;
#endif

/* eml2_1ForGsoap.h:1680 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt (-715)

typedef std::string eml21__MassPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1683 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt (-716)

typedef std::string eml21__MassPerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1686 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt (-717)

typedef std::string eml21__MassPerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1689 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt (-718)

typedef std::string eml21__MassPerTimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1692 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt (-719)

typedef std::string eml21__MassPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1695 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt (-720)

typedef std::string eml21__MassPerVolumePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1698 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt (-721)

typedef std::string eml21__MassPerVolumePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1701 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt (-722)

typedef std::string eml21__MassPerVolumePerTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:1704 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt (-723)

typedef std::string eml21__MassPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1707 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt (-724)

typedef std::string eml21__MassUomExt;
#endif

/* eml2_1ForGsoap.h:1710 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt (-725)

typedef std::string eml21__MobilityUomExt;
#endif

/* eml2_1ForGsoap.h:1713 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt (-726)

typedef std::string eml21__MolarEnergyUomExt;
#endif

/* eml2_1ForGsoap.h:1716 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt (-727)

typedef std::string eml21__MolarHeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:1719 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt (-728)

typedef std::string eml21__MolarVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1722 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt (-729)

typedef std::string eml21__MolecularWeightUomExt;
#endif

/* eml2_1ForGsoap.h:1725 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt (-730)

typedef std::string eml21__MomentOfForceUomExt;
#endif

/* eml2_1ForGsoap.h:1728 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt (-731)

typedef std::string eml21__MomentOfInertiaUomExt;
#endif

/* eml2_1ForGsoap.h:1731 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt (-732)

typedef std::string eml21__MomentumUomExt;
#endif

/* eml2_1ForGsoap.h:1734 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt (-733)

typedef std::string eml21__NormalizedPowerUomExt;
#endif

/* eml2_1ForGsoap.h:1737 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt (-734)

typedef std::string eml21__PermeabilityLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1740 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt (-735)

typedef std::string eml21__PermeabilityRockUomExt;
#endif

/* eml2_1ForGsoap.h:1743 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt (-736)

typedef std::string eml21__PermittivityUomExt;
#endif

/* eml2_1ForGsoap.h:1746 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt (-737)

typedef std::string eml21__PlaneAngleUomExt;
#endif

/* eml2_1ForGsoap.h:1749 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt (-738)

typedef std::string eml21__PotentialDifferencePerPowerDropUomExt;
#endif

/* eml2_1ForGsoap.h:1752 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt (-739)

typedef std::string eml21__PowerPerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1755 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt (-740)

typedef std::string eml21__PowerPerPowerUomExt;
#endif

/* eml2_1ForGsoap.h:1758 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt (-741)

typedef std::string eml21__PowerPerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1761 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt (-742)

typedef std::string eml21__PowerUomExt;
#endif

/* eml2_1ForGsoap.h:1764 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt (-743)

typedef std::string eml21__PressurePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1767 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt (-744)

typedef std::string eml21__PressurePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1770 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt (-745)

typedef std::string eml21__PressurePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1773 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt (-746)

typedef std::string eml21__PressureSquaredPerForceTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1776 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt (-747)

typedef std::string eml21__PressureSquaredUomExt;
#endif

/* eml2_1ForGsoap.h:1779 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt (-748)

typedef std::string eml21__PressureTimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1782 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt (-749)

typedef std::string eml21__PressureUomExt;
#endif

/* eml2_1ForGsoap.h:1785 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt (-750)

typedef std::string eml21__QuantityOfLightUomExt;
#endif

/* eml2_1ForGsoap.h:1788 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt (-751)

typedef std::string eml21__RadianceUomExt;
#endif

/* eml2_1ForGsoap.h:1791 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt (-752)

typedef std::string eml21__RadiantIntensityUomExt;
#endif

/* eml2_1ForGsoap.h:1794 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt (-753)

typedef std::string eml21__ReciprocalAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1797 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt (-754)

typedef std::string eml21__ReciprocalElectricPotentialDifferenceUomExt;
#endif

/* eml2_1ForGsoap.h:1800 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt (-755)

typedef std::string eml21__ReciprocalForceUomExt;
#endif

/* eml2_1ForGsoap.h:1803 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt (-756)

typedef std::string eml21__ReciprocalLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1806 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt (-757)

typedef std::string eml21__ReciprocalMassTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1809 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt (-758)

typedef std::string eml21__ReciprocalMassUomExt;
#endif

/* eml2_1ForGsoap.h:1812 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt (-759)

typedef std::string eml21__ReciprocalPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1815 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt (-760)

typedef std::string eml21__ReciprocalTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1818 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt (-761)

typedef std::string eml21__ReciprocalVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1821 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt (-762)

typedef std::string eml21__ReluctanceUomExt;
#endif

/* eml2_1ForGsoap.h:1824 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt (-763)

typedef std::string eml21__SecondMomentOfAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1827 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt (-764)

typedef std::string eml21__SignalingEventPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1830 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt (-765)

typedef std::string eml21__SolidAngleUomExt;
#endif

/* eml2_1ForGsoap.h:1833 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt (-766)

typedef std::string eml21__SpecificHeatCapacityUomExt;
#endif

/* eml2_1ForGsoap.h:1836 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt (-767)

typedef std::string eml21__TemperatureIntervalPerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1839 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt (-768)

typedef std::string eml21__TemperatureIntervalPerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1842 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt (-769)

typedef std::string eml21__TemperatureIntervalPerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1845 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt (-770)

typedef std::string eml21__TemperatureIntervalUomExt;
#endif

/* eml2_1ForGsoap.h:1848 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt (-771)

typedef std::string eml21__ThermalConductanceUomExt;
#endif

/* eml2_1ForGsoap.h:1851 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt (-772)

typedef std::string eml21__ThermalConductivityUomExt;
#endif

/* eml2_1ForGsoap.h:1854 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt (-773)

typedef std::string eml21__ThermalDiffusivityUomExt;
#endif

/* eml2_1ForGsoap.h:1857 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt (-774)

typedef std::string eml21__ThermalInsulanceUomExt;
#endif

/* eml2_1ForGsoap.h:1860 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt (-775)

typedef std::string eml21__ThermalResistanceUomExt;
#endif

/* eml2_1ForGsoap.h:1863 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-776)

typedef std::string eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:1866 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt (-777)

typedef std::string eml21__ThermodynamicTemperatureUomExt;
#endif

/* eml2_1ForGsoap.h:1869 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt (-778)

typedef std::string eml21__TimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1872 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt (-779)

typedef std::string eml21__TimePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1875 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt (-780)

typedef std::string eml21__TimePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1878 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt (-781)

typedef std::string eml21__TimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1881 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt (-782)

typedef std::string eml21__TimeUomExt;
#endif

/* eml2_1ForGsoap.h:1884 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt (-783)

typedef std::string eml21__VerticalCoordinateUomExt;
#endif

/* eml2_1ForGsoap.h:1887 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt (-784)

typedef std::string eml21__VolumeFlowRatePerVolumeFlowRateUomExt;
#endif

/* eml2_1ForGsoap.h:1890 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt (-785)

typedef std::string eml21__VolumePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1893 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt (-786)

typedef std::string eml21__VolumePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1896 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt (-787)

typedef std::string eml21__VolumePerMassUomExt;
#endif

/* eml2_1ForGsoap.h:1899 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt (-788)

typedef std::string eml21__VolumePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1902 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt (-789)

typedef std::string eml21__VolumePerRotationUomExt;
#endif

/* eml2_1ForGsoap.h:1905 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt (-790)

typedef std::string eml21__VolumePerTimeLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1908 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt (-791)

typedef std::string eml21__VolumePerTimePerAreaUomExt;
#endif

/* eml2_1ForGsoap.h:1911 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt (-792)

typedef std::string eml21__VolumePerTimePerLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1914 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt (-793)

typedef std::string eml21__VolumePerTimePerPressureLengthUomExt;
#endif

/* eml2_1ForGsoap.h:1917 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt (-794)

typedef std::string eml21__VolumePerTimePerPressureUomExt;
#endif

/* eml2_1ForGsoap.h:1920 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt (-795)

typedef std::string eml21__VolumePerTimePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1923 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt (-796)

typedef std::string eml21__VolumePerTimePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1926 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt (-797)

typedef std::string eml21__VolumePerTimeUomExt;
#endif

/* eml2_1ForGsoap.h:1929 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt (-798)

typedef std::string eml21__VolumePerVolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1932 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt (-799)

typedef std::string eml21__VolumetricHeatTransferCoefficientUomExt;
#endif

/* eml2_1ForGsoap.h:1935 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt (-800)

typedef std::string eml21__VolumetricThermalExpansionUomExt;
#endif

/* eml2_1ForGsoap.h:1938 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt (-801)

typedef std::string eml21__VolumeUomExt;
#endif

/* eml2_1ForGsoap.h:1947 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NonNegativeFraction (-803)

typedef double witsml20__NonNegativeFraction;
#endif

/* eml2_1ForGsoap.h:1963 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure (-804)

typedef double eml21__AbstractMeasure;
#endif

/* eml2_1ForGsoap.h:1971 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString (-805)

typedef std::string eml21__AbstractString;
#endif

/* eml2_1ForGsoap.h:1974 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger (-807)

typedef ULONG64 eml21__NonNegativeInteger;
#endif

/* eml2_1ForGsoap.h:1976 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger (-808)

typedef ULONG64 eml21__PositiveInteger;
#endif

/* eml2_1ForGsoap.h:2059 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern (-812)

typedef std::string eml21__EnumExtensionPattern;
#endif

/* eml2_1ForGsoap.h:2064 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_eml21__String2000 (-813)

typedef std::string eml21__String2000;
#endif

/* eml2_1ForGsoap.h:2069 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String64
#define SOAP_TYPE_gsoap_eml2_1_eml21__String64 (-814)

typedef std::string eml21__String64;
#endif

/* eml2_1ForGsoap.h:2074 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp (-815)

typedef std::string eml21__TimeStamp;
#endif

/* eml2_1ForGsoap.h:2084 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum (-816)

typedef std::string eml21__UomEnum;
#endif

/* eml2_1ForGsoap.h:2089 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UuidString
#define SOAP_TYPE_gsoap_eml2_1_eml21__UuidString (-817)

typedef std::string eml21__UuidString;
#endif

/* eml2_1ForGsoap.h:2098 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SectionNumber (-818)

typedef std::string witsml20__SectionNumber;
#endif

/* eml2_1ForGsoap.h:2107 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterSection (-819)

typedef std::string witsml20__PublicLandSurveySystemQuarterSection;
#endif

/* eml2_1ForGsoap.h:2116 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterTownship (-820)

typedef std::string witsml20__PublicLandSurveySystemQuarterTownship;
#endif

/* eml2_1ForGsoap.h:2121 */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractUidString (-821)

typedef std::string witsml20__AbstractUidString;
#endif

/* eml2_1ForGsoap.h:3587 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone (-823)

typedef std::string eml21__TimeZone;
#endif

/* eml2_1ForGsoap.h:3595 */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum (-824)

typedef eml21__String64 eml21__TypeEnum;
#endif

/* eml2_1ForGsoap.h:42010 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Well
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Well (-1474)

typedef witsml20__Well _witsml20__Well;
#endif

/* eml2_1ForGsoap.h:42013 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Wellbore
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Wellbore (-1475)

typedef witsml20__Wellbore _witsml20__Wellbore;
#endif

/* eml2_1ForGsoap.h:42016 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreCompletion (-1476)

typedef witsml20__WellboreCompletion _witsml20__WellboreCompletion;
#endif

/* eml2_1ForGsoap.h:42019 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1__witsml20__DownholeComponent (-1477)

typedef witsml20__DownholeComponent _witsml20__DownholeComponent;
#endif

/* eml2_1ForGsoap.h:42022 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Tubular
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Tubular (-1478)

typedef witsml20__Tubular _witsml20__Tubular;
#endif

/* eml2_1ForGsoap.h:42025 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellCompletion (-1479)

typedef witsml20__WellCompletion _witsml20__WellCompletion;
#endif

/* eml2_1ForGsoap.h:42032 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCOREWellboreGeometrySection (-1480)

typedef witsml20__WellboreGeometrySection _witsml20__part_USCOREWellboreGeometrySection;
#endif

/* eml2_1ForGsoap.h:42035 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeometry (-1481)

typedef witsml20__WellboreGeometry _witsml20__WellboreGeometry;
#endif

/* eml2_1ForGsoap.h:42038 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ChannelSet (-1482)

typedef witsml20__ChannelSet _witsml20__ChannelSet;
#endif

/* eml2_1ForGsoap.h:42041 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Log
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Log (-1483)

typedef witsml20__Log _witsml20__Log;
#endif

/* eml2_1ForGsoap.h:42044 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Channel (-1484)

typedef witsml20__Channel _witsml20__Channel;
#endif

/* eml2_1ForGsoap.h:42047 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__BhaRun
#define SOAP_TYPE_gsoap_eml2_1__witsml20__BhaRun (-1485)

typedef witsml20__BhaRun _witsml20__BhaRun;
#endif

/* eml2_1ForGsoap.h:42050 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml20__FluidsReport (-1486)

typedef witsml20__FluidsReport _witsml20__FluidsReport;
#endif

/* eml2_1ForGsoap.h:42053 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__DrillReport
#define SOAP_TYPE_gsoap_eml2_1__witsml20__DrillReport (-1487)

typedef witsml20__DrillReport _witsml20__DrillReport;
#endif

/* eml2_1ForGsoap.h:42056 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarker (-1488)

typedef witsml20__WellboreMarker _witsml20__WellboreMarker;
#endif

/* eml2_1ForGsoap.h:42059 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarkerSet (-1489)

typedef witsml20__WellboreMarkerSet _witsml20__WellboreMarkerSet;
#endif

/* eml2_1ForGsoap.h:42062 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeology (-1490)

typedef witsml20__WellboreGeology _witsml20__WellboreGeology;
#endif

/* eml2_1ForGsoap.h:42065 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluation (-1491)

typedef witsml20__ShowEvaluation _witsml20__ShowEvaluation;
#endif

/* eml2_1ForGsoap.h:42068 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeology (-1492)

typedef witsml20__InterpretedGeology _witsml20__InterpretedGeology;
#endif

/* eml2_1ForGsoap.h:42071 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluationInterval (-1493)

typedef witsml20__ShowEvaluationInterval _witsml20__ShowEvaluationInterval;
#endif

/* eml2_1ForGsoap.h:42074 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeologyInterval (-1494)

typedef witsml20__CuttingsGeologyInterval _witsml20__CuttingsGeologyInterval;
#endif

/* eml2_1ForGsoap.h:42077 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeology (-1495)

typedef witsml20__CuttingsGeology _witsml20__CuttingsGeology;
#endif

/* eml2_1ForGsoap.h:42080 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeologyInterval (-1496)

typedef witsml20__InterpretedGeologyInterval _witsml20__InterpretedGeologyInterval;
#endif

/* eml2_1ForGsoap.h:42083 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Trajectory
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Trajectory (-1497)

typedef witsml20__Trajectory _witsml20__Trajectory;
#endif

/* eml2_1ForGsoap.h:42090 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCORETrajectoryStation (-1498)

typedef witsml20__TrajectoryStation _witsml20__part_USCORETrajectoryStation;
#endif

/* eml2_1ForGsoap.h:42093 */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ToolErrorModel (-1499)

typedef witsml20__ToolErrorModel _witsml20__ToolErrorModel;
#endif

/* eml2_1ForGsoap.h:42116 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject (-1500)

typedef eml21__AbstractObject _eml21__AbstractContextualObject;
#endif

/* eml2_1ForGsoap.h:42123 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject (-1501)

typedef eml21__AbstractObject _eml21__AbstractDataObject;
#endif

/* eml2_1ForGsoap.h:42126 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference (-1502)

typedef eml21__EpcExternalPartReference _eml21__EpcExternalPartReference;
#endif

/* eml2_1ForGsoap.h:42129 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1__eml21__Activity (-1503)

typedef eml21__Activity _eml21__Activity;
#endif

/* eml2_1ForGsoap.h:42132 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate (-1504)

typedef eml21__ActivityTemplate _eml21__ActivityTemplate;
#endif

/* eml2_1ForGsoap.h:42135 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind (-1505)

typedef eml21__PropertyKind _eml21__PropertyKind;
#endif

/* eml2_1ForGsoap.h:42138 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary (-1506)

typedef eml21__PropertyKindDictionary _eml21__PropertyKindDictionary;
#endif

/* eml2_1ForGsoap.h:42141 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries (-1507)

typedef eml21__TimeSeries _eml21__TimeSeries;
#endif

/* eml2_1ForGsoap.h:42144 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord (-1508)

typedef eml21__DataAssuranceRecord _eml21__DataAssuranceRecord;
#endif

/* eml2_1ForGsoap.h:42147 */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet (-1509)

typedef eml21__GraphicalInformationSet _eml21__GraphicalInformationSet;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_gsoap_eml2_1_byte
#define SOAP_TYPE_gsoap_eml2_1_byte (-3)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_1_int
#define SOAP_TYPE_gsoap_eml2_1_int (-1)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_1_LONG64
#define SOAP_TYPE_gsoap_eml2_1_LONG64 (-1311)

#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_gsoap_eml2_1_float
#define SOAP_TYPE_gsoap_eml2_1_float (-1370)

#endif

/* eml21__AbstractMeasure has binding name 'eml21__AbstractMeasure' for type 'eml21:AbstractMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractMeasure (-804)

#endif

/* witsml20__NonNegativeFraction has binding name 'witsml20__NonNegativeFraction' for type 'witsml20:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NonNegativeFraction (-803)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_1_double
#define SOAP_TYPE_gsoap_eml2_1_double (-802)

#endif

/* eml21__PositiveInteger has binding name 'eml21__PositiveInteger' for type 'eml21:PositiveInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__PositiveInteger (-808)

#endif

/* eml21__NonNegativeInteger has binding name 'eml21__NonNegativeInteger' for type 'eml21:NonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_1_eml21__NonNegativeInteger (-807)

#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_1_ULONG64
#define SOAP_TYPE_gsoap_eml2_1_ULONG64 (-806)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_1_bool
#define SOAP_TYPE_gsoap_eml2_1_bool (-1118)

#endif

/* enum eml21__ReferencePressureKind has binding name 'eml21__ReferencePressureKind' for type 'eml21:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressureKind (-1103)

#endif

/* enum eml21__WellStatus has binding name 'eml21__WellStatus' for type 'eml21:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellStatus (-1102)

#endif

/* enum eml21__WellboreDatumReference has binding name 'eml21__WellboreDatumReference' for type 'eml21:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__WellboreDatumReference (-1101)

#endif

/* enum eml21__ReferenceCondition has binding name 'eml21__ReferenceCondition' for type 'eml21:ReferenceCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceCondition (-1100)

#endif

/* enum eml21__QuantityClassKind has binding name 'eml21__QuantityClassKind' for type 'eml21:QuantityClassKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKind (-1099)

#endif

/* enum eml21__MeasureClass has binding name 'eml21__MeasureClass' for type 'eml21:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_eml21__MeasureClass (-1098)

#endif

/* enum eml21__MatrixCementKind has binding name 'eml21__MatrixCementKind' for type 'eml21:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__MatrixCementKind (-1097)

#endif

/* enum eml21__LithostratigraphicRank has binding name 'eml21__LithostratigraphicRank' for type 'eml21:LithostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithostratigraphicRank (-1096)

#endif

/* enum eml21__LithologyQualifierKind has binding name 'eml21__LithologyQualifierKind' for type 'eml21:LithologyQualifierKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKind (-1095)

#endif

/* enum eml21__LithologyKind has binding name 'eml21__LithologyKind' for type 'eml21:LithologyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKind (-1094)

#endif

/* enum eml21__GeochronologicalRank has binding name 'eml21__GeochronologicalRank' for type 'eml21:GeochronologicalRank' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeochronologicalRank (-1093)

#endif

/* enum eml21__ExistenceKind has binding name 'eml21__ExistenceKind' for type 'eml21:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExistenceKind (-1092)

#endif

/* enum witsml20__AuthorizationStatus has binding name 'witsml20__AuthorizationStatus' for type 'witsml20:AuthorizationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AuthorizationStatus (-1091)

#endif

/* enum witsml20__ErrorPropagationMode has binding name 'witsml20__ErrorPropagationMode' for type 'witsml20:ErrorPropagationMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorPropagationMode (-1090)

#endif

/* enum witsml20__ErrorModelMisalignmentMode has binding name 'witsml20__ErrorModelMisalignmentMode' for type 'witsml20:ErrorModelMisalignmentMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorModelMisalignmentMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ErrorModelMisalignmentMode (-1089)

#endif

/* enum witsml20__SurveyToolOperatingMode has binding name 'witsml20__SurveyToolOperatingMode' for type 'witsml20:SurveyToolOperatingMode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SurveyToolOperatingMode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SurveyToolOperatingMode (-1088)

#endif

/* enum witsml20__TrajStationStatus has binding name 'witsml20__TrajStationStatus' for type 'witsml20:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationStatus (-1087)

#endif

/* enum witsml20__TrajStnCalcAlgorithm has binding name 'witsml20__TrajStnCalcAlgorithm' for type 'witsml20:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStnCalcAlgorithm (-1086)

#endif

/* enum witsml20__TypeSurveyTool has binding name 'witsml20__TypeSurveyTool' for type 'witsml20:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TypeSurveyTool (-1085)

#endif

/* enum witsml20__TrajStationType has binding name 'witsml20__TrajStationType' for type 'witsml20:TrajStationType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajStationType (-1084)

#endif

/* enum witsml20__AziRef has binding name 'witsml20__AziRef' for type 'witsml20:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AziRef
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AziRef (-1083)

#endif

/* enum witsml20__ShowFluid has binding name 'witsml20__ShowFluid' for type 'witsml20:ShowFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluid (-1082)

#endif

/* enum witsml20__ShowRating has binding name 'witsml20__ShowRating' for type 'witsml20:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowRating (-1081)

#endif

/* enum witsml20__ShowLevel has binding name 'witsml20__ShowLevel' for type 'witsml20:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowLevel (-1080)

#endif

/* enum witsml20__ShowSpeed has binding name 'witsml20__ShowSpeed' for type 'witsml20:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowSpeed (-1079)

#endif

/* enum witsml20__ShowFluorescence has binding name 'witsml20__ShowFluorescence' for type 'witsml20:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowFluorescence (-1078)

#endif

/* enum witsml20__WellKillingProcedureType has binding name 'witsml20__WellKillingProcedureType' for type 'witsml20:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellKillingProcedureType (-1077)

#endif

/* enum witsml20__WellControlIncidentType has binding name 'witsml20__WellControlIncidentType' for type 'witsml20:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellControlIncidentType (-1076)

#endif

/* enum witsml20__WellTestType has binding name 'witsml20__WellTestType' for type 'witsml20:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellTestType (-1075)

#endif

/* enum witsml20__InnerBarrelType has binding name 'witsml20__InnerBarrelType' for type 'witsml20:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InnerBarrelType (-1074)

#endif

/* enum witsml20__ItemState has binding name 'witsml20__ItemState' for type 'witsml20:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ItemState
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ItemState (-1073)

#endif

/* enum witsml20__StateDetailActivity has binding name 'witsml20__StateDetailActivity' for type 'witsml20:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StateDetailActivity (-1072)

#endif

/* enum witsml20__DrillActivityClassType has binding name 'witsml20__DrillActivityClassType' for type 'witsml20:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityClassType (-1071)

#endif

/* enum witsml20__DrillActivityCode has binding name 'witsml20__DrillActivityCode' for type 'witsml20:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivityCode (-1070)

#endif

/* enum witsml20__ReadingKind has binding name 'witsml20__ReadingKind' for type 'witsml20:ReadingKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReadingKind
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReadingKind (-1069)

#endif

/* enum witsml20__PresTestType has binding name 'witsml20__PresTestType' for type 'witsml20:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PresTestType (-1068)

#endif

/* enum witsml20__OpsReportVersion has binding name 'witsml20__OpsReportVersion' for type 'witsml20:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OpsReportVersion (-1067)

#endif

/* enum witsml20__GasPeakType has binding name 'witsml20__GasPeakType' for type 'witsml20:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GasPeakType (-1066)

#endif

/* enum witsml20__MudClass has binding name 'witsml20__MudClass' for type 'witsml20:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MudClass
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MudClass (-1065)

#endif

/* enum witsml20__MudSubClass has binding name 'witsml20__MudSubClass' for type 'witsml20:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MudSubClass (-1064)

#endif

/* enum witsml20__BhaStatus has binding name 'witsml20__BhaStatus' for type 'witsml20:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BhaStatus (-1063)

#endif

/* enum witsml20__ChannelDerivation has binding name 'witsml20__ChannelDerivation' for type 'witsml20:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelDerivation (-1062)

#endif

/* enum witsml20__ChannelStatus has binding name 'witsml20__ChannelStatus' for type 'witsml20:ChannelStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelStatus (-1061)

#endif

/* enum witsml20__EtpDataType has binding name 'witsml20__EtpDataType' for type 'witsml20:EtpDataType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EtpDataType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EtpDataType (-1060)

#endif

/* enum witsml20__ChannelState has binding name 'witsml20__ChannelState' for type 'witsml20:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelState (-1059)

#endif

/* enum witsml20__ChannelIndexType has binding name 'witsml20__ChannelIndexType' for type 'witsml20:ChannelIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndexType (-1058)

#endif

/* enum witsml20__LoggingMethod has binding name 'witsml20__LoggingMethod' for type 'witsml20:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LoggingMethod (-1057)

#endif

/* enum witsml20__IndexDirection has binding name 'witsml20__IndexDirection' for type 'witsml20:IndexDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IndexDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IndexDirection (-1056)

#endif

/* enum witsml20__HoleCasingType has binding name 'witsml20__HoleCasingType' for type 'witsml20:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleCasingType (-1055)

#endif

/* enum witsml20__CompletionStatus has binding name 'witsml20__CompletionStatus' for type 'witsml20:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatus (-1054)

#endif

/* enum witsml20__IadcIntegerCode has binding name 'witsml20__IadcIntegerCode' for type 'witsml20:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IadcIntegerCode (-1053)

#endif

/* enum witsml20__IadcBearingWearCode has binding name 'witsml20__IadcBearingWearCode' for type 'witsml20:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IadcBearingWearCode (-1052)

#endif

/* enum witsml20__TubularComponentType has binding name 'witsml20__TubularComponentType' for type 'witsml20:TubularComponentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponentType (-1051)

#endif

/* enum witsml20__DeflectionMethod has binding name 'witsml20__DeflectionMethod' for type 'witsml20:DeflectionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DeflectionMethod (-1050)

#endif

/* enum witsml20__HoleOpenerType has binding name 'witsml20__HoleOpenerType' for type 'witsml20:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpenerType (-1049)

#endif

/* enum witsml20__BladeType has binding name 'witsml20__BladeType' for type 'witsml20:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BladeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BladeType (-1048)

#endif

/* enum witsml20__BladeShapeType has binding name 'witsml20__BladeShapeType' for type 'witsml20:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BladeShapeType (-1047)

#endif

/* enum witsml20__BearingType has binding name 'witsml20__BearingType' for type 'witsml20:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BearingType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BearingType (-1046)

#endif

/* enum witsml20__MeasurementType has binding name 'witsml20__MeasurementType' for type 'witsml20:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasurementType (-1045)

#endif

/* enum witsml20__JarAction has binding name 'witsml20__JarAction' for type 'witsml20:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__JarAction
#define SOAP_TYPE_gsoap_eml2_1_witsml20__JarAction (-1044)

#endif

/* enum witsml20__JarType has binding name 'witsml20__JarType' for type 'witsml20:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__JarType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__JarType (-1043)

#endif

/* enum witsml20__ConnectionPosition has binding name 'witsml20__ConnectionPosition' for type 'witsml20:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionPosition (-1042)

#endif

/* enum witsml20__NozzleType has binding name 'witsml20__NozzleType' for type 'witsml20:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NozzleType (-1041)

#endif

/* enum witsml20__BitReasonPulled has binding name 'witsml20__BitReasonPulled' for type 'witsml20:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitReasonPulled (-1040)

#endif

/* enum witsml20__BitDullCode has binding name 'witsml20__BitDullCode' for type 'witsml20:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitDullCode (-1039)

#endif

/* enum witsml20__BitType has binding name 'witsml20__BitType' for type 'witsml20:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitType (-1038)

#endif

/* enum witsml20__MaterialType has binding name 'witsml20__MaterialType' for type 'witsml20:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MaterialType (-1037)

#endif

/* enum witsml20__BoxPinConfig has binding name 'witsml20__BoxPinConfig' for type 'witsml20:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoxPinConfig (-1036)

#endif

/* enum witsml20__TubularAssembly has binding name 'witsml20__TubularAssembly' for type 'witsml20:TubularAssembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularAssembly (-1035)

#endif

/* enum witsml20__PerforationToolType has binding name 'witsml20__PerforationToolType' for type 'witsml20:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationToolType (-1034)

#endif

/* enum witsml20__GeologyType has binding name 'witsml20__GeologyType' for type 'witsml20:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyType (-1033)

#endif

/* enum witsml20__SubStringType has binding name 'witsml20__SubStringType' for type 'witsml20:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SubStringType (-1032)

#endif

/* enum witsml20__DownholeStringType has binding name 'witsml20__DownholeStringType' for type 'witsml20:DownholeStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringType (-1031)

#endif

/* enum witsml20__Coating has binding name 'witsml20__Coating' for type 'witsml20:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Coating
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Coating (-1030)

#endif

/* enum witsml20__BoreholeType has binding name 'witsml20__BoreholeType' for type 'witsml20:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeType (-1029)

#endif

/* enum witsml20__GradeType has binding name 'witsml20__GradeType' for type 'witsml20:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GradeType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GradeType (-1028)

#endif

/* enum witsml20__EquipmentType has binding name 'witsml20__EquipmentType' for type 'witsml20:EquipmentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentType (-1027)

#endif

/* enum witsml20__ConnectionFormType has binding name 'witsml20__ConnectionFormType' for type 'witsml20:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ConnectionFormType (-1026)

#endif

/* enum witsml20__OtherConnectionTypes has binding name 'witsml20__OtherConnectionTypes' for type 'witsml20:OtherConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionTypes (-1025)

#endif

/* enum witsml20__RodConnectionTypes has binding name 'witsml20__RodConnectionTypes' for type 'witsml20:RodConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionTypes (-1024)

#endif

/* enum witsml20__TubingConnectionTypes has binding name 'witsml20__TubingConnectionTypes' for type 'witsml20:TubingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionTypes (-1023)

#endif

/* enum witsml20__CasingConnectionTypes has binding name 'witsml20__CasingConnectionTypes' for type 'witsml20:CasingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionTypes (-1022)

#endif

/* enum witsml20__PerforationStatus has binding name 'witsml20__PerforationStatus' for type 'witsml20:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatus (-1021)

#endif

/* enum witsml20__PhysicalStatus has binding name 'witsml20__PhysicalStatus' for type 'witsml20:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PhysicalStatus (-1020)

#endif

/* enum witsml20__WellboreShape has binding name 'witsml20__WellboreShape' for type 'witsml20:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreShape (-1019)

#endif

/* enum witsml20__WellboreType has binding name 'witsml20__WellboreType' for type 'witsml20:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreType (-1018)

#endif

/* enum witsml20__NameTagLocation has binding name 'witsml20__NameTagLocation' for type 'witsml20:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagLocation (-1017)

#endif

/* enum witsml20__NameTagTechnology has binding name 'witsml20__NameTagTechnology' for type 'witsml20:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagTechnology (-1016)

#endif

/* enum witsml20__NameTagNumberingScheme has binding name 'witsml20__NameTagNumberingScheme' for type 'witsml20:NameTagNumberingScheme' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTagNumberingScheme (-1015)

#endif

/* enum witsml20__ElevCodeEnum has binding name 'witsml20__ElevCodeEnum' for type 'witsml20:ElevCodeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ElevCodeEnum (-1014)

#endif

/* enum witsml20__WellDirection has binding name 'witsml20__WellDirection' for type 'witsml20:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellDirection (-1013)

#endif

/* enum witsml20__WellFluid has binding name 'witsml20__WellFluid' for type 'witsml20:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellFluid (-1012)

#endif

/* enum witsml20__WellPurpose has binding name 'witsml20__WellPurpose' for type 'witsml20:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellPurpose (-1011)

#endif

/* enum witsml20__NorthOrSouth has binding name 'witsml20__NorthOrSouth' for type 'witsml20:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NorthOrSouth (-1010)

#endif

/* enum witsml20__EastOrWest has binding name 'witsml20__EastOrWest' for type 'witsml20:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EastOrWest (-1009)

#endif

/* enum witsml20__PrincipalMeridian has binding name 'witsml20__PrincipalMeridian' for type 'witsml20:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PrincipalMeridian (-1008)

#endif

/* enum eml21__VolumeUom has binding name 'eml21__VolumeUom' for type 'eml21:VolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUom (-1007)

#endif

/* enum eml21__VolumetricThermalExpansionUom has binding name 'eml21__VolumetricThermalExpansionUom' for type 'eml21:VolumetricThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUom (-1006)

#endif

/* enum eml21__VolumetricHeatTransferCoefficientUom has binding name 'eml21__VolumetricHeatTransferCoefficientUom' for type 'eml21:VolumetricHeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUom (-1005)

#endif

/* enum eml21__VolumePerVolumeUom has binding name 'eml21__VolumePerVolumeUom' for type 'eml21:VolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUom (-1004)

#endif

/* enum eml21__VolumePerTimeUom has binding name 'eml21__VolumePerTimeUom' for type 'eml21:VolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUom (-1003)

#endif

/* enum eml21__VolumePerTimePerVolumeUom has binding name 'eml21__VolumePerTimePerVolumeUom' for type 'eml21:VolumePerTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUom (-1002)

#endif

/* enum eml21__VolumePerTimePerTimeUom has binding name 'eml21__VolumePerTimePerTimeUom' for type 'eml21:VolumePerTimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUom (-1001)

#endif

/* enum eml21__VolumePerTimePerPressureUom has binding name 'eml21__VolumePerTimePerPressureUom' for type 'eml21:VolumePerTimePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUom (-1000)

#endif

/* enum eml21__VolumePerTimePerPressureLengthUom has binding name 'eml21__VolumePerTimePerPressureLengthUom' for type 'eml21:VolumePerTimePerPressureLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUom (-999)

#endif

/* enum eml21__VolumePerTimePerLengthUom has binding name 'eml21__VolumePerTimePerLengthUom' for type 'eml21:VolumePerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUom (-998)

#endif

/* enum eml21__VolumePerTimePerAreaUom has binding name 'eml21__VolumePerTimePerAreaUom' for type 'eml21:VolumePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUom (-997)

#endif

/* enum eml21__VolumePerTimeLengthUom has binding name 'eml21__VolumePerTimeLengthUom' for type 'eml21:VolumePerTimeLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUom (-996)

#endif

/* enum eml21__VolumePerRotationUom has binding name 'eml21__VolumePerRotationUom' for type 'eml21:VolumePerRotationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUom (-995)

#endif

/* enum eml21__VolumePerPressureUom has binding name 'eml21__VolumePerPressureUom' for type 'eml21:VolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUom (-994)

#endif

/* enum eml21__VolumePerMassUom has binding name 'eml21__VolumePerMassUom' for type 'eml21:VolumePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUom (-993)

#endif

/* enum eml21__VolumePerLengthUom has binding name 'eml21__VolumePerLengthUom' for type 'eml21:VolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUom (-992)

#endif

/* enum eml21__VolumePerAreaUom has binding name 'eml21__VolumePerAreaUom' for type 'eml21:VolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUom (-991)

#endif

/* enum eml21__VolumeFlowRatePerVolumeFlowRateUom has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateUom' for type 'eml21:VolumeFlowRatePerVolumeFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUom (-990)

#endif

/* enum eml21__VerticalCoordinateUom has binding name 'eml21__VerticalCoordinateUom' for type 'eml21:VerticalCoordinateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUom (-989)

#endif

/* enum eml21__TimeUom has binding name 'eml21__TimeUom' for type 'eml21:TimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUom (-988)

#endif

/* enum eml21__TimePerVolumeUom has binding name 'eml21__TimePerVolumeUom' for type 'eml21:TimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUom (-987)

#endif

/* enum eml21__TimePerTimeUom has binding name 'eml21__TimePerTimeUom' for type 'eml21:TimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUom (-986)

#endif

/* enum eml21__TimePerMassUom has binding name 'eml21__TimePerMassUom' for type 'eml21:TimePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUom (-985)

#endif

/* enum eml21__TimePerLengthUom has binding name 'eml21__TimePerLengthUom' for type 'eml21:TimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUom (-984)

#endif

/* enum eml21__ThermodynamicTemperatureUom has binding name 'eml21__ThermodynamicTemperatureUom' for type 'eml21:ThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUom (-983)

#endif

/* enum eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-982)

#endif

/* enum eml21__ThermalResistanceUom has binding name 'eml21__ThermalResistanceUom' for type 'eml21:ThermalResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUom (-981)

#endif

/* enum eml21__ThermalInsulanceUom has binding name 'eml21__ThermalInsulanceUom' for type 'eml21:ThermalInsulanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUom (-980)

#endif

/* enum eml21__ThermalDiffusivityUom has binding name 'eml21__ThermalDiffusivityUom' for type 'eml21:ThermalDiffusivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUom (-979)

#endif

/* enum eml21__ThermalConductivityUom has binding name 'eml21__ThermalConductivityUom' for type 'eml21:ThermalConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUom (-978)

#endif

/* enum eml21__ThermalConductanceUom has binding name 'eml21__ThermalConductanceUom' for type 'eml21:ThermalConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUom (-977)

#endif

/* enum eml21__TemperatureIntervalUom has binding name 'eml21__TemperatureIntervalUom' for type 'eml21:TemperatureIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUom (-976)

#endif

/* enum eml21__TemperatureIntervalPerTimeUom has binding name 'eml21__TemperatureIntervalPerTimeUom' for type 'eml21:TemperatureIntervalPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUom (-975)

#endif

/* enum eml21__TemperatureIntervalPerPressureUom has binding name 'eml21__TemperatureIntervalPerPressureUom' for type 'eml21:TemperatureIntervalPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUom (-974)

#endif

/* enum eml21__TemperatureIntervalPerLengthUom has binding name 'eml21__TemperatureIntervalPerLengthUom' for type 'eml21:TemperatureIntervalPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUom (-973)

#endif

/* enum eml21__SpecificHeatCapacityUom has binding name 'eml21__SpecificHeatCapacityUom' for type 'eml21:SpecificHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUom (-972)

#endif

/* enum eml21__SolidAngleUom has binding name 'eml21__SolidAngleUom' for type 'eml21:SolidAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUom (-971)

#endif

/* enum eml21__SignalingEventPerTimeUom has binding name 'eml21__SignalingEventPerTimeUom' for type 'eml21:SignalingEventPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUom (-970)

#endif

/* enum eml21__SecondMomentOfAreaUom has binding name 'eml21__SecondMomentOfAreaUom' for type 'eml21:SecondMomentOfAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUom (-969)

#endif

/* enum eml21__ReluctanceUom has binding name 'eml21__ReluctanceUom' for type 'eml21:ReluctanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUom (-968)

#endif

/* enum eml21__ReciprocalVolumeUom has binding name 'eml21__ReciprocalVolumeUom' for type 'eml21:ReciprocalVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUom (-967)

#endif

/* enum eml21__ReciprocalTimeUom has binding name 'eml21__ReciprocalTimeUom' for type 'eml21:ReciprocalTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUom (-966)

#endif

/* enum eml21__ReciprocalPressureUom has binding name 'eml21__ReciprocalPressureUom' for type 'eml21:ReciprocalPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUom (-965)

#endif

/* enum eml21__ReciprocalMassUom has binding name 'eml21__ReciprocalMassUom' for type 'eml21:ReciprocalMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUom (-964)

#endif

/* enum eml21__ReciprocalMassTimeUom has binding name 'eml21__ReciprocalMassTimeUom' for type 'eml21:ReciprocalMassTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUom (-963)

#endif

/* enum eml21__ReciprocalLengthUom has binding name 'eml21__ReciprocalLengthUom' for type 'eml21:ReciprocalLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUom (-962)

#endif

/* enum eml21__ReciprocalForceUom has binding name 'eml21__ReciprocalForceUom' for type 'eml21:ReciprocalForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUom (-961)

#endif

/* enum eml21__ReciprocalElectricPotentialDifferenceUom has binding name 'eml21__ReciprocalElectricPotentialDifferenceUom' for type 'eml21:ReciprocalElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUom (-960)

#endif

/* enum eml21__ReciprocalAreaUom has binding name 'eml21__ReciprocalAreaUom' for type 'eml21:ReciprocalAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUom (-959)

#endif

/* enum eml21__RadiantIntensityUom has binding name 'eml21__RadiantIntensityUom' for type 'eml21:RadiantIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUom (-958)

#endif

/* enum eml21__RadianceUom has binding name 'eml21__RadianceUom' for type 'eml21:RadianceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUom (-957)

#endif

/* enum eml21__QuantityOfLightUom has binding name 'eml21__QuantityOfLightUom' for type 'eml21:QuantityOfLightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUom (-956)

#endif

/* enum eml21__PressureUom has binding name 'eml21__PressureUom' for type 'eml21:PressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUom (-955)

#endif

/* enum eml21__PressureTimePerVolumeUom has binding name 'eml21__PressureTimePerVolumeUom' for type 'eml21:PressureTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUom (-954)

#endif

/* enum eml21__PressureSquaredUom has binding name 'eml21__PressureSquaredUom' for type 'eml21:PressureSquaredUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUom (-953)

#endif

/* enum eml21__PressureSquaredPerForceTimePerAreaUom has binding name 'eml21__PressureSquaredPerForceTimePerAreaUom' for type 'eml21:PressureSquaredPerForceTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUom (-952)

#endif

/* enum eml21__PressurePerVolumeUom has binding name 'eml21__PressurePerVolumeUom' for type 'eml21:PressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUom (-951)

#endif

/* enum eml21__PressurePerTimeUom has binding name 'eml21__PressurePerTimeUom' for type 'eml21:PressurePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUom (-950)

#endif

/* enum eml21__PressurePerPressureUom has binding name 'eml21__PressurePerPressureUom' for type 'eml21:PressurePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUom (-949)

#endif

/* enum eml21__PowerUom has binding name 'eml21__PowerUom' for type 'eml21:PowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUom (-948)

#endif

/* enum eml21__PowerPerVolumeUom has binding name 'eml21__PowerPerVolumeUom' for type 'eml21:PowerPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUom (-947)

#endif

/* enum eml21__PowerPerPowerUom has binding name 'eml21__PowerPerPowerUom' for type 'eml21:PowerPerPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUom (-946)

#endif

/* enum eml21__PowerPerAreaUom has binding name 'eml21__PowerPerAreaUom' for type 'eml21:PowerPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUom (-945)

#endif

/* enum eml21__PotentialDifferencePerPowerDropUom has binding name 'eml21__PotentialDifferencePerPowerDropUom' for type 'eml21:PotentialDifferencePerPowerDropUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUom (-944)

#endif

/* enum eml21__PlaneAngleUom has binding name 'eml21__PlaneAngleUom' for type 'eml21:PlaneAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUom (-943)

#endif

/* enum eml21__PermittivityUom has binding name 'eml21__PermittivityUom' for type 'eml21:PermittivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUom (-942)

#endif

/* enum eml21__PermeabilityRockUom has binding name 'eml21__PermeabilityRockUom' for type 'eml21:PermeabilityRockUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUom (-941)

#endif

/* enum eml21__PermeabilityLengthUom has binding name 'eml21__PermeabilityLengthUom' for type 'eml21:PermeabilityLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUom (-940)

#endif

/* enum eml21__NormalizedPowerUom has binding name 'eml21__NormalizedPowerUom' for type 'eml21:NormalizedPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUom (-939)

#endif

/* enum eml21__MomentumUom has binding name 'eml21__MomentumUom' for type 'eml21:MomentumUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUom (-938)

#endif

/* enum eml21__MomentOfInertiaUom has binding name 'eml21__MomentOfInertiaUom' for type 'eml21:MomentOfInertiaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUom (-937)

#endif

/* enum eml21__MomentOfForceUom has binding name 'eml21__MomentOfForceUom' for type 'eml21:MomentOfForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUom (-936)

#endif

/* enum eml21__MolecularWeightUom has binding name 'eml21__MolecularWeightUom' for type 'eml21:MolecularWeightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUom (-935)

#endif

/* enum eml21__MolarVolumeUom has binding name 'eml21__MolarVolumeUom' for type 'eml21:MolarVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUom (-934)

#endif

/* enum eml21__MolarHeatCapacityUom has binding name 'eml21__MolarHeatCapacityUom' for type 'eml21:MolarHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUom (-933)

#endif

/* enum eml21__MolarEnergyUom has binding name 'eml21__MolarEnergyUom' for type 'eml21:MolarEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUom (-932)

#endif

/* enum eml21__MobilityUom has binding name 'eml21__MobilityUom' for type 'eml21:MobilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUom (-931)

#endif

/* enum eml21__MassUom has binding name 'eml21__MassUom' for type 'eml21:MassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUom (-930)

#endif

/* enum eml21__MassPerVolumeUom has binding name 'eml21__MassPerVolumeUom' for type 'eml21:MassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUom (-929)

#endif

/* enum eml21__MassPerVolumePerTemperatureUom has binding name 'eml21__MassPerVolumePerTemperatureUom' for type 'eml21:MassPerVolumePerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUom (-928)

#endif

/* enum eml21__MassPerVolumePerPressureUom has binding name 'eml21__MassPerVolumePerPressureUom' for type 'eml21:MassPerVolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUom (-927)

#endif

/* enum eml21__MassPerVolumePerLengthUom has binding name 'eml21__MassPerVolumePerLengthUom' for type 'eml21:MassPerVolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUom (-926)

#endif

/* enum eml21__MassPerTimeUom has binding name 'eml21__MassPerTimeUom' for type 'eml21:MassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUom (-925)

#endif

/* enum eml21__MassPerTimePerLengthUom has binding name 'eml21__MassPerTimePerLengthUom' for type 'eml21:MassPerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUom (-924)

#endif

/* enum eml21__MassPerTimePerAreaUom has binding name 'eml21__MassPerTimePerAreaUom' for type 'eml21:MassPerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUom (-923)

#endif

/* enum eml21__MassPerMassUom has binding name 'eml21__MassPerMassUom' for type 'eml21:MassPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUom (-922)

#endif

/* enum eml21__MassPerLengthUom has binding name 'eml21__MassPerLengthUom' for type 'eml21:MassPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUom (-921)

#endif

/* enum eml21__MassPerEnergyUom has binding name 'eml21__MassPerEnergyUom' for type 'eml21:MassPerEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUom (-920)

#endif

/* enum eml21__MassPerAreaUom has binding name 'eml21__MassPerAreaUom' for type 'eml21:MassPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUom (-919)

#endif

/* enum eml21__MassLengthUom has binding name 'eml21__MassLengthUom' for type 'eml21:MassLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUom (-918)

#endif

/* enum eml21__MagneticVectorPotentialUom has binding name 'eml21__MagneticVectorPotentialUom' for type 'eml21:MagneticVectorPotentialUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUom (-917)

#endif

/* enum eml21__MagneticPermeabilityUom has binding name 'eml21__MagneticPermeabilityUom' for type 'eml21:MagneticPermeabilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUom (-916)

#endif

/* enum eml21__MagneticFluxUom has binding name 'eml21__MagneticFluxUom' for type 'eml21:MagneticFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUom (-915)

#endif

/* enum eml21__MagneticFluxDensityUom has binding name 'eml21__MagneticFluxDensityUom' for type 'eml21:MagneticFluxDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUom (-914)

#endif

/* enum eml21__MagneticFluxDensityPerLengthUom has binding name 'eml21__MagneticFluxDensityPerLengthUom' for type 'eml21:MagneticFluxDensityPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUom (-913)

#endif

/* enum eml21__MagneticFieldStrengthUom has binding name 'eml21__MagneticFieldStrengthUom' for type 'eml21:MagneticFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUom (-912)

#endif

/* enum eml21__MagneticDipoleMomentUom has binding name 'eml21__MagneticDipoleMomentUom' for type 'eml21:MagneticDipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUom (-911)

#endif

/* enum eml21__LuminousIntensityUom has binding name 'eml21__LuminousIntensityUom' for type 'eml21:LuminousIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUom (-910)

#endif

/* enum eml21__LuminousFluxUom has binding name 'eml21__LuminousFluxUom' for type 'eml21:LuminousFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUom (-909)

#endif

/* enum eml21__LuminousEfficacyUom has binding name 'eml21__LuminousEfficacyUom' for type 'eml21:LuminousEfficacyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUom (-908)

#endif

/* enum eml21__LuminanceUom has binding name 'eml21__LuminanceUom' for type 'eml21:LuminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUom (-907)

#endif

/* enum eml21__LogarithmicPowerRatioUom has binding name 'eml21__LogarithmicPowerRatioUom' for type 'eml21:LogarithmicPowerRatioUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUom (-906)

#endif

/* enum eml21__LogarithmicPowerRatioPerLengthUom has binding name 'eml21__LogarithmicPowerRatioPerLengthUom' for type 'eml21:LogarithmicPowerRatioPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUom (-905)

#endif

/* enum eml21__LinearThermalExpansionUom has binding name 'eml21__LinearThermalExpansionUom' for type 'eml21:LinearThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUom (-904)

#endif

/* enum eml21__LinearAccelerationUom has binding name 'eml21__LinearAccelerationUom' for type 'eml21:LinearAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUom (-903)

#endif

/* enum eml21__LightExposureUom has binding name 'eml21__LightExposureUom' for type 'eml21:LightExposureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUom (-902)

#endif

/* enum eml21__LengthUom has binding name 'eml21__LengthUom' for type 'eml21:LengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUom (-901)

#endif

/* enum eml21__LengthPerVolumeUom has binding name 'eml21__LengthPerVolumeUom' for type 'eml21:LengthPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUom (-900)

#endif

/* enum eml21__LengthPerTimeUom has binding name 'eml21__LengthPerTimeUom' for type 'eml21:LengthPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUom (-899)

#endif

/* enum eml21__LengthPerTemperatureUom has binding name 'eml21__LengthPerTemperatureUom' for type 'eml21:LengthPerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUom (-898)

#endif

/* enum eml21__LengthPerPressureUom has binding name 'eml21__LengthPerPressureUom' for type 'eml21:LengthPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUom (-897)

#endif

/* enum eml21__LengthPerMassUom has binding name 'eml21__LengthPerMassUom' for type 'eml21:LengthPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUom (-896)

#endif

/* enum eml21__LengthPerLengthUom has binding name 'eml21__LengthPerLengthUom' for type 'eml21:LengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUom (-895)

#endif

/* enum eml21__KinematicViscosityUom has binding name 'eml21__KinematicViscosityUom' for type 'eml21:KinematicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUom (-894)

#endif

/* enum eml21__IsothermalCompressibilityUom has binding name 'eml21__IsothermalCompressibilityUom' for type 'eml21:IsothermalCompressibilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUom (-893)

#endif

/* enum eml21__InductanceUom has binding name 'eml21__InductanceUom' for type 'eml21:InductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUom (-892)

#endif

/* enum eml21__IlluminanceUom has binding name 'eml21__IlluminanceUom' for type 'eml21:IlluminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUom (-891)

#endif

/* enum eml21__HeatTransferCoefficientUom has binding name 'eml21__HeatTransferCoefficientUom' for type 'eml21:HeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUom (-890)

#endif

/* enum eml21__HeatFlowRateUom has binding name 'eml21__HeatFlowRateUom' for type 'eml21:HeatFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUom (-889)

#endif

/* enum eml21__HeatCapacityUom has binding name 'eml21__HeatCapacityUom' for type 'eml21:HeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUom (-888)

#endif

/* enum eml21__FrequencyUom has binding name 'eml21__FrequencyUom' for type 'eml21:FrequencyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUom (-887)

#endif

/* enum eml21__FrequencyIntervalUom has binding name 'eml21__FrequencyIntervalUom' for type 'eml21:FrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUom (-886)

#endif

/* enum eml21__ForceUom has binding name 'eml21__ForceUom' for type 'eml21:ForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUom (-885)

#endif

/* enum eml21__ForcePerVolumeUom has binding name 'eml21__ForcePerVolumeUom' for type 'eml21:ForcePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUom (-884)

#endif

/* enum eml21__ForcePerLengthUom has binding name 'eml21__ForcePerLengthUom' for type 'eml21:ForcePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUom (-883)

#endif

/* enum eml21__ForcePerForceUom has binding name 'eml21__ForcePerForceUom' for type 'eml21:ForcePerForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUom (-882)

#endif

/* enum eml21__ForceLengthPerLengthUom has binding name 'eml21__ForceLengthPerLengthUom' for type 'eml21:ForceLengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUom (-881)

#endif

/* enum eml21__ForceAreaUom has binding name 'eml21__ForceAreaUom' for type 'eml21:ForceAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUom (-880)

#endif

/* enum eml21__EnergyUom has binding name 'eml21__EnergyUom' for type 'eml21:EnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUom (-879)

#endif

/* enum eml21__EnergyPerVolumeUom has binding name 'eml21__EnergyPerVolumeUom' for type 'eml21:EnergyPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUom (-878)

#endif

/* enum eml21__EnergyPerMassUom has binding name 'eml21__EnergyPerMassUom' for type 'eml21:EnergyPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUom (-877)

#endif

/* enum eml21__EnergyPerMassPerTimeUom has binding name 'eml21__EnergyPerMassPerTimeUom' for type 'eml21:EnergyPerMassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUom (-876)

#endif

/* enum eml21__EnergyPerLengthUom has binding name 'eml21__EnergyPerLengthUom' for type 'eml21:EnergyPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUom (-875)

#endif

/* enum eml21__EnergyPerAreaUom has binding name 'eml21__EnergyPerAreaUom' for type 'eml21:EnergyPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUom (-874)

#endif

/* enum eml21__EnergyLengthPerTimeAreaTemperatureUom has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureUom' for type 'eml21:EnergyLengthPerTimeAreaTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUom (-873)

#endif

/* enum eml21__EnergyLengthPerAreaUom has binding name 'eml21__EnergyLengthPerAreaUom' for type 'eml21:EnergyLengthPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUom (-872)

#endif

/* enum eml21__ElectromagneticMomentUom has binding name 'eml21__ElectromagneticMomentUom' for type 'eml21:ElectromagneticMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUom (-871)

#endif

/* enum eml21__ElectricResistanceUom has binding name 'eml21__ElectricResistanceUom' for type 'eml21:ElectricResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUom (-870)

#endif

/* enum eml21__ElectricResistancePerLengthUom has binding name 'eml21__ElectricResistancePerLengthUom' for type 'eml21:ElectricResistancePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUom (-869)

#endif

/* enum eml21__ElectricPotentialDifferenceUom has binding name 'eml21__ElectricPotentialDifferenceUom' for type 'eml21:ElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUom (-868)

#endif

/* enum eml21__ElectricFieldStrengthUom has binding name 'eml21__ElectricFieldStrengthUom' for type 'eml21:ElectricFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUom (-867)

#endif

/* enum eml21__ElectricCurrentUom has binding name 'eml21__ElectricCurrentUom' for type 'eml21:ElectricCurrentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUom (-866)

#endif

/* enum eml21__ElectricCurrentDensityUom has binding name 'eml21__ElectricCurrentDensityUom' for type 'eml21:ElectricCurrentDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUom (-865)

#endif

/* enum eml21__ElectricConductivityUom has binding name 'eml21__ElectricConductivityUom' for type 'eml21:ElectricConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUom (-864)

#endif

/* enum eml21__ElectricConductanceUom has binding name 'eml21__ElectricConductanceUom' for type 'eml21:ElectricConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUom (-863)

#endif

/* enum eml21__ElectricChargeUom has binding name 'eml21__ElectricChargeUom' for type 'eml21:ElectricChargeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUom (-862)

#endif

/* enum eml21__ElectricChargePerVolumeUom has binding name 'eml21__ElectricChargePerVolumeUom' for type 'eml21:ElectricChargePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUom (-861)

#endif

/* enum eml21__ElectricChargePerMassUom has binding name 'eml21__ElectricChargePerMassUom' for type 'eml21:ElectricChargePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUom (-860)

#endif

/* enum eml21__ElectricChargePerAreaUom has binding name 'eml21__ElectricChargePerAreaUom' for type 'eml21:ElectricChargePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUom (-859)

#endif

/* enum eml21__ElectricalResistivityUom has binding name 'eml21__ElectricalResistivityUom' for type 'eml21:ElectricalResistivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUom (-858)

#endif

/* enum eml21__DynamicViscosityUom has binding name 'eml21__DynamicViscosityUom' for type 'eml21:DynamicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUom (-857)

#endif

/* enum eml21__DoseEquivalentUom has binding name 'eml21__DoseEquivalentUom' for type 'eml21:DoseEquivalentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUom (-856)

#endif

/* enum eml21__DipoleMomentUom has binding name 'eml21__DipoleMomentUom' for type 'eml21:DipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUom (-855)

#endif

/* enum eml21__DimensionlessUom has binding name 'eml21__DimensionlessUom' for type 'eml21:DimensionlessUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUom (-854)

#endif

/* enum eml21__DigitalStorageUom has binding name 'eml21__DigitalStorageUom' for type 'eml21:DigitalStorageUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUom (-853)

#endif

/* enum eml21__DiffusiveTimeOfFlightUom has binding name 'eml21__DiffusiveTimeOfFlightUom' for type 'eml21:DiffusiveTimeOfFlightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUom (-852)

#endif

/* enum eml21__DiffusionCoefficientUom has binding name 'eml21__DiffusionCoefficientUom' for type 'eml21:DiffusionCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUom (-851)

#endif

/* enum eml21__DataTransferSpeedUom has binding name 'eml21__DataTransferSpeedUom' for type 'eml21:DataTransferSpeedUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUom (-850)

#endif

/* enum eml21__CationExchangeCapacityUom has binding name 'eml21__CationExchangeCapacityUom' for type 'eml21:CationExchangeCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUom (-849)

#endif

/* enum eml21__CapacitanceUom has binding name 'eml21__CapacitanceUom' for type 'eml21:CapacitanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUom (-848)

#endif

/* enum eml21__AttenuationPerFrequencyIntervalUom has binding name 'eml21__AttenuationPerFrequencyIntervalUom' for type 'eml21:AttenuationPerFrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUom (-847)

#endif

/* enum eml21__AreaUom has binding name 'eml21__AreaUom' for type 'eml21:AreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUom (-846)

#endif

/* enum eml21__AreaPerVolumeUom has binding name 'eml21__AreaPerVolumeUom' for type 'eml21:AreaPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUom (-845)

#endif

/* enum eml21__AreaPerTimeUom has binding name 'eml21__AreaPerTimeUom' for type 'eml21:AreaPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUom (-844)

#endif

/* enum eml21__AreaPerMassUom has binding name 'eml21__AreaPerMassUom' for type 'eml21:AreaPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUom (-843)

#endif

/* enum eml21__AreaPerCountUom has binding name 'eml21__AreaPerCountUom' for type 'eml21:AreaPerCountUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUom (-842)

#endif

/* enum eml21__AreaPerAreaUom has binding name 'eml21__AreaPerAreaUom' for type 'eml21:AreaPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUom (-841)

#endif

/* enum eml21__AreaPerAmountOfSubstanceUom has binding name 'eml21__AreaPerAmountOfSubstanceUom' for type 'eml21:AreaPerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUom (-840)

#endif

/* enum eml21__APINeutronUom has binding name 'eml21__APINeutronUom' for type 'eml21:APINeutronUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUom (-839)

#endif

/* enum eml21__APIGravityUom has binding name 'eml21__APIGravityUom' for type 'eml21:APIGravityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUom (-838)

#endif

/* enum eml21__APIGammaRayUom has binding name 'eml21__APIGammaRayUom' for type 'eml21:APIGammaRayUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUom (-837)

#endif

/* enum eml21__AngularVelocityUom has binding name 'eml21__AngularVelocityUom' for type 'eml21:AngularVelocityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUom (-836)

#endif

/* enum eml21__AngularAccelerationUom has binding name 'eml21__AngularAccelerationUom' for type 'eml21:AngularAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUom (-835)

#endif

/* enum eml21__AnglePerVolumeUom has binding name 'eml21__AnglePerVolumeUom' for type 'eml21:AnglePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUom (-834)

#endif

/* enum eml21__AnglePerLengthUom has binding name 'eml21__AnglePerLengthUom' for type 'eml21:AnglePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUom (-833)

#endif

/* enum eml21__AmountOfSubstanceUom has binding name 'eml21__AmountOfSubstanceUom' for type 'eml21:AmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUom (-832)

#endif

/* enum eml21__AmountOfSubstancePerVolumeUom has binding name 'eml21__AmountOfSubstancePerVolumeUom' for type 'eml21:AmountOfSubstancePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUom (-831)

#endif

/* enum eml21__AmountOfSubstancePerTimeUom has binding name 'eml21__AmountOfSubstancePerTimeUom' for type 'eml21:AmountOfSubstancePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUom (-830)

#endif

/* enum eml21__AmountOfSubstancePerTimePerAreaUom has binding name 'eml21__AmountOfSubstancePerTimePerAreaUom' for type 'eml21:AmountOfSubstancePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUom (-829)

#endif

/* enum eml21__AmountOfSubstancePerAreaUom has binding name 'eml21__AmountOfSubstancePerAreaUom' for type 'eml21:AmountOfSubstancePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUom (-828)

#endif

/* enum eml21__AmountOfSubstancePerAmountOfSubstanceUom has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceUom' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUom (-827)

#endif

/* enum eml21__ActivityOfRadioactivityUom has binding name 'eml21__ActivityOfRadioactivityUom' for type 'eml21:ActivityOfRadioactivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUom (-826)

#endif

/* enum eml21__AbsorbedDoseUom has binding name 'eml21__AbsorbedDoseUom' for type 'eml21:AbsorbedDoseUom' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUom (-825)

#endif

/* enum eml21__UnitOfMeasure has binding name 'eml21__UnitOfMeasure' for type 'eml21:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasure (-822)

#endif

/* enum eml21__VerticalDirection has binding name 'eml21__VerticalDirection' for type 'eml21:VerticalDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalDirection (-811)

#endif

/* enum eml21__AxisOrder2d has binding name 'eml21__AxisOrder2d' for type 'eml21:AxisOrder2d' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_1_eml21__AxisOrder2d (-810)

#endif

/* enum eml21__ParameterKind has binding name 'eml21__ParameterKind' for type 'eml21:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterKind (-809)

#endif

/* _eml21__GraphicalInformationSet has binding name '_eml21__GraphicalInformationSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1__eml21__GraphicalInformationSet (-1509)

#endif

/* _eml21__DataAssuranceRecord has binding name '_eml21__DataAssuranceRecord' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1__eml21__DataAssuranceRecord (-1508)

#endif

/* _eml21__TimeSeries has binding name '_eml21__TimeSeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1__eml21__TimeSeries (-1507)

#endif

/* _eml21__PropertyKindDictionary has binding name '_eml21__PropertyKindDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKindDictionary (-1506)

#endif

/* _eml21__PropertyKind has binding name '_eml21__PropertyKind' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1__eml21__PropertyKind (-1505)

#endif

/* _eml21__ActivityTemplate has binding name '_eml21__ActivityTemplate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1__eml21__ActivityTemplate (-1504)

#endif

/* _eml21__Activity has binding name '_eml21__Activity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1__eml21__Activity (-1503)

#endif

/* _eml21__EpcExternalPartReference has binding name '_eml21__EpcExternalPartReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1__eml21__EpcExternalPartReference (-1502)

#endif

/* _eml21__AbstractDataObject has binding name '_eml21__AbstractDataObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractDataObject (-1501)

#endif

/* _eml21__AbstractContextualObject has binding name '_eml21__AbstractContextualObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_1__eml21__AbstractContextualObject (-1500)

#endif

/* _witsml20__ToolErrorModel has binding name '_witsml20__ToolErrorModel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ToolErrorModel (-1499)

#endif

/* _witsml20__part_USCORETrajectoryStation has binding name '_witsml20__part_USCORETrajectoryStation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCORETrajectoryStation (-1498)

#endif

/* _witsml20__Trajectory has binding name '_witsml20__Trajectory' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Trajectory
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Trajectory (-1497)

#endif

/* _witsml20__InterpretedGeologyInterval has binding name '_witsml20__InterpretedGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeologyInterval (-1496)

#endif

/* _witsml20__CuttingsGeology has binding name '_witsml20__CuttingsGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeology (-1495)

#endif

/* _witsml20__CuttingsGeologyInterval has binding name '_witsml20__CuttingsGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__CuttingsGeologyInterval (-1494)

#endif

/* _witsml20__ShowEvaluationInterval has binding name '_witsml20__ShowEvaluationInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluationInterval (-1493)

#endif

/* _witsml20__InterpretedGeology has binding name '_witsml20__InterpretedGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__InterpretedGeology (-1492)

#endif

/* _witsml20__ShowEvaluation has binding name '_witsml20__ShowEvaluation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ShowEvaluation (-1491)

#endif

/* _witsml20__WellboreGeology has binding name '_witsml20__WellboreGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeology (-1490)

#endif

/* _witsml20__WellboreMarkerSet has binding name '_witsml20__WellboreMarkerSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarkerSet (-1489)

#endif

/* _witsml20__WellboreMarker has binding name '_witsml20__WellboreMarker' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreMarker (-1488)

#endif

/* _witsml20__DrillReport has binding name '_witsml20__DrillReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__DrillReport
#define SOAP_TYPE_gsoap_eml2_1__witsml20__DrillReport (-1487)

#endif

/* _witsml20__FluidsReport has binding name '_witsml20__FluidsReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1__witsml20__FluidsReport (-1486)

#endif

/* _witsml20__BhaRun has binding name '_witsml20__BhaRun' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__BhaRun
#define SOAP_TYPE_gsoap_eml2_1__witsml20__BhaRun (-1485)

#endif

/* _witsml20__Channel has binding name '_witsml20__Channel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Channel (-1484)

#endif

/* _witsml20__Log has binding name '_witsml20__Log' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Log
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Log (-1483)

#endif

/* _witsml20__ChannelSet has binding name '_witsml20__ChannelSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1__witsml20__ChannelSet (-1482)

#endif

/* _witsml20__WellboreGeometry has binding name '_witsml20__WellboreGeometry' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreGeometry (-1481)

#endif

/* _witsml20__part_USCOREWellboreGeometrySection has binding name '_witsml20__part_USCOREWellboreGeometrySection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1__witsml20__part_USCOREWellboreGeometrySection (-1480)

#endif

/* _witsml20__WellCompletion has binding name '_witsml20__WellCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellCompletion (-1479)

#endif

/* _witsml20__Tubular has binding name '_witsml20__Tubular' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Tubular
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Tubular (-1478)

#endif

/* _witsml20__DownholeComponent has binding name '_witsml20__DownholeComponent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1__witsml20__DownholeComponent (-1477)

#endif

/* _witsml20__WellboreCompletion has binding name '_witsml20__WellboreCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1__witsml20__WellboreCompletion (-1476)

#endif

/* _witsml20__Wellbore has binding name '_witsml20__Wellbore' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Wellbore
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Wellbore (-1475)

#endif

/* _witsml20__Well has binding name '_witsml20__Well' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__witsml20__Well
#define SOAP_TYPE_gsoap_eml2_1__witsml20__Well (-1474)

#endif

/* eml21__TypeEnum has binding name 'eml21__TypeEnum' for type 'eml21:TypeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__TypeEnum (-824)

#endif

/* eml21__TimeZone has binding name 'eml21__TimeZone' for type 'eml21:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeZone (-823)

#endif

/* witsml20__AbstractUidString has binding name 'witsml20__AbstractUidString' for type 'witsml20:AbstractUidString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractUidString (-821)

#endif

/* witsml20__PublicLandSurveySystemQuarterTownship has binding name 'witsml20__PublicLandSurveySystemQuarterTownship' for type 'witsml20:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterTownship (-820)

#endif

/* witsml20__PublicLandSurveySystemQuarterSection has binding name 'witsml20__PublicLandSurveySystemQuarterSection' for type 'witsml20:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystemQuarterSection (-819)

#endif

/* witsml20__SectionNumber has binding name 'witsml20__SectionNumber' for type 'witsml20:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SectionNumber (-818)

#endif

/* eml21__UuidString has binding name 'eml21__UuidString' for type 'eml21:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UuidString
#define SOAP_TYPE_gsoap_eml2_1_eml21__UuidString (-817)

#endif

/* eml21__UomEnum has binding name 'eml21__UomEnum' for type 'eml21:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum
#define SOAP_TYPE_gsoap_eml2_1_eml21__UomEnum (-816)

#endif

/* eml21__TimeStamp has binding name 'eml21__TimeStamp' for type 'eml21:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeStamp (-815)

#endif

/* eml21__String64 has binding name 'eml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String64
#define SOAP_TYPE_gsoap_eml2_1_eml21__String64 (-814)

#endif

/* eml21__String2000 has binding name 'eml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_eml21__String2000 (-813)

#endif

/* eml21__EnumExtensionPattern has binding name 'eml21__EnumExtensionPattern' for type 'eml21:EnumExtensionPattern' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnumExtensionPattern (-812)

#endif

/* eml21__AbstractString has binding name 'eml21__AbstractString' for type 'eml21:AbstractString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractString (-805)

#endif

/* eml21__VolumeUomExt has binding name 'eml21__VolumeUomExt' for type 'eml21:VolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeUomExt (-801)

#endif

/* eml21__VolumetricThermalExpansionUomExt has binding name 'eml21__VolumetricThermalExpansionUomExt' for type 'eml21:VolumetricThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionUomExt (-800)

#endif

/* eml21__VolumetricHeatTransferCoefficientUomExt has binding name 'eml21__VolumetricHeatTransferCoefficientUomExt' for type 'eml21:VolumetricHeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientUomExt (-799)

#endif

/* eml21__VolumePerVolumeUomExt has binding name 'eml21__VolumePerVolumeUomExt' for type 'eml21:VolumePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeUomExt (-798)

#endif

/* eml21__VolumePerTimeUomExt has binding name 'eml21__VolumePerTimeUomExt' for type 'eml21:VolumePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeUomExt (-797)

#endif

/* eml21__VolumePerTimePerVolumeUomExt has binding name 'eml21__VolumePerTimePerVolumeUomExt' for type 'eml21:VolumePerTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeUomExt (-796)

#endif

/* eml21__VolumePerTimePerTimeUomExt has binding name 'eml21__VolumePerTimePerTimeUomExt' for type 'eml21:VolumePerTimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeUomExt (-795)

#endif

/* eml21__VolumePerTimePerPressureUomExt has binding name 'eml21__VolumePerTimePerPressureUomExt' for type 'eml21:VolumePerTimePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureUomExt (-794)

#endif

/* eml21__VolumePerTimePerPressureLengthUomExt has binding name 'eml21__VolumePerTimePerPressureLengthUomExt' for type 'eml21:VolumePerTimePerPressureLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthUomExt (-793)

#endif

/* eml21__VolumePerTimePerLengthUomExt has binding name 'eml21__VolumePerTimePerLengthUomExt' for type 'eml21:VolumePerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthUomExt (-792)

#endif

/* eml21__VolumePerTimePerAreaUomExt has binding name 'eml21__VolumePerTimePerAreaUomExt' for type 'eml21:VolumePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaUomExt (-791)

#endif

/* eml21__VolumePerTimeLengthUomExt has binding name 'eml21__VolumePerTimeLengthUomExt' for type 'eml21:VolumePerTimeLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthUomExt (-790)

#endif

/* eml21__VolumePerRotationUomExt has binding name 'eml21__VolumePerRotationUomExt' for type 'eml21:VolumePerRotationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationUomExt (-789)

#endif

/* eml21__VolumePerPressureUomExt has binding name 'eml21__VolumePerPressureUomExt' for type 'eml21:VolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureUomExt (-788)

#endif

/* eml21__VolumePerMassUomExt has binding name 'eml21__VolumePerMassUomExt' for type 'eml21:VolumePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassUomExt (-787)

#endif

/* eml21__VolumePerLengthUomExt has binding name 'eml21__VolumePerLengthUomExt' for type 'eml21:VolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthUomExt (-786)

#endif

/* eml21__VolumePerAreaUomExt has binding name 'eml21__VolumePerAreaUomExt' for type 'eml21:VolumePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaUomExt (-785)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateUomExt has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateUomExt' for type 'eml21:VolumeFlowRatePerVolumeFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateUomExt (-784)

#endif

/* eml21__VerticalCoordinateUomExt has binding name 'eml21__VerticalCoordinateUomExt' for type 'eml21:VerticalCoordinateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateUomExt (-783)

#endif

/* eml21__TimeUomExt has binding name 'eml21__TimeUomExt' for type 'eml21:TimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeUomExt (-782)

#endif

/* eml21__TimePerVolumeUomExt has binding name 'eml21__TimePerVolumeUomExt' for type 'eml21:TimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeUomExt (-781)

#endif

/* eml21__TimePerTimeUomExt has binding name 'eml21__TimePerTimeUomExt' for type 'eml21:TimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeUomExt (-780)

#endif

/* eml21__TimePerMassUomExt has binding name 'eml21__TimePerMassUomExt' for type 'eml21:TimePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassUomExt (-779)

#endif

/* eml21__TimePerLengthUomExt has binding name 'eml21__TimePerLengthUomExt' for type 'eml21:TimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthUomExt (-778)

#endif

/* eml21__ThermodynamicTemperatureUomExt has binding name 'eml21__ThermodynamicTemperatureUomExt' for type 'eml21:ThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureUomExt (-777)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-776)

#endif

/* eml21__ThermalResistanceUomExt has binding name 'eml21__ThermalResistanceUomExt' for type 'eml21:ThermalResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceUomExt (-775)

#endif

/* eml21__ThermalInsulanceUomExt has binding name 'eml21__ThermalInsulanceUomExt' for type 'eml21:ThermalInsulanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceUomExt (-774)

#endif

/* eml21__ThermalDiffusivityUomExt has binding name 'eml21__ThermalDiffusivityUomExt' for type 'eml21:ThermalDiffusivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityUomExt (-773)

#endif

/* eml21__ThermalConductivityUomExt has binding name 'eml21__ThermalConductivityUomExt' for type 'eml21:ThermalConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityUomExt (-772)

#endif

/* eml21__ThermalConductanceUomExt has binding name 'eml21__ThermalConductanceUomExt' for type 'eml21:ThermalConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceUomExt (-771)

#endif

/* eml21__TemperatureIntervalUomExt has binding name 'eml21__TemperatureIntervalUomExt' for type 'eml21:TemperatureIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalUomExt (-770)

#endif

/* eml21__TemperatureIntervalPerTimeUomExt has binding name 'eml21__TemperatureIntervalPerTimeUomExt' for type 'eml21:TemperatureIntervalPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeUomExt (-769)

#endif

/* eml21__TemperatureIntervalPerPressureUomExt has binding name 'eml21__TemperatureIntervalPerPressureUomExt' for type 'eml21:TemperatureIntervalPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureUomExt (-768)

#endif

/* eml21__TemperatureIntervalPerLengthUomExt has binding name 'eml21__TemperatureIntervalPerLengthUomExt' for type 'eml21:TemperatureIntervalPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthUomExt (-767)

#endif

/* eml21__SpecificHeatCapacityUomExt has binding name 'eml21__SpecificHeatCapacityUomExt' for type 'eml21:SpecificHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityUomExt (-766)

#endif

/* eml21__SolidAngleUomExt has binding name 'eml21__SolidAngleUomExt' for type 'eml21:SolidAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleUomExt (-765)

#endif

/* eml21__SignalingEventPerTimeUomExt has binding name 'eml21__SignalingEventPerTimeUomExt' for type 'eml21:SignalingEventPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeUomExt (-764)

#endif

/* eml21__SecondMomentOfAreaUomExt has binding name 'eml21__SecondMomentOfAreaUomExt' for type 'eml21:SecondMomentOfAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaUomExt (-763)

#endif

/* eml21__ReluctanceUomExt has binding name 'eml21__ReluctanceUomExt' for type 'eml21:ReluctanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceUomExt (-762)

#endif

/* eml21__ReciprocalVolumeUomExt has binding name 'eml21__ReciprocalVolumeUomExt' for type 'eml21:ReciprocalVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeUomExt (-761)

#endif

/* eml21__ReciprocalTimeUomExt has binding name 'eml21__ReciprocalTimeUomExt' for type 'eml21:ReciprocalTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeUomExt (-760)

#endif

/* eml21__ReciprocalPressureUomExt has binding name 'eml21__ReciprocalPressureUomExt' for type 'eml21:ReciprocalPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureUomExt (-759)

#endif

/* eml21__ReciprocalMassUomExt has binding name 'eml21__ReciprocalMassUomExt' for type 'eml21:ReciprocalMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassUomExt (-758)

#endif

/* eml21__ReciprocalMassTimeUomExt has binding name 'eml21__ReciprocalMassTimeUomExt' for type 'eml21:ReciprocalMassTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeUomExt (-757)

#endif

/* eml21__ReciprocalLengthUomExt has binding name 'eml21__ReciprocalLengthUomExt' for type 'eml21:ReciprocalLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthUomExt (-756)

#endif

/* eml21__ReciprocalForceUomExt has binding name 'eml21__ReciprocalForceUomExt' for type 'eml21:ReciprocalForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceUomExt (-755)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceUomExt has binding name 'eml21__ReciprocalElectricPotentialDifferenceUomExt' for type 'eml21:ReciprocalElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceUomExt (-754)

#endif

/* eml21__ReciprocalAreaUomExt has binding name 'eml21__ReciprocalAreaUomExt' for type 'eml21:ReciprocalAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaUomExt (-753)

#endif

/* eml21__RadiantIntensityUomExt has binding name 'eml21__RadiantIntensityUomExt' for type 'eml21:RadiantIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityUomExt (-752)

#endif

/* eml21__RadianceUomExt has binding name 'eml21__RadianceUomExt' for type 'eml21:RadianceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceUomExt (-751)

#endif

/* eml21__QuantityOfLightUomExt has binding name 'eml21__QuantityOfLightUomExt' for type 'eml21:QuantityOfLightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightUomExt (-750)

#endif

/* eml21__PressureUomExt has binding name 'eml21__PressureUomExt' for type 'eml21:PressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureUomExt (-749)

#endif

/* eml21__PressureTimePerVolumeUomExt has binding name 'eml21__PressureTimePerVolumeUomExt' for type 'eml21:PressureTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeUomExt (-748)

#endif

/* eml21__PressureSquaredUomExt has binding name 'eml21__PressureSquaredUomExt' for type 'eml21:PressureSquaredUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredUomExt (-747)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaUomExt has binding name 'eml21__PressureSquaredPerForceTimePerAreaUomExt' for type 'eml21:PressureSquaredPerForceTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaUomExt (-746)

#endif

/* eml21__PressurePerVolumeUomExt has binding name 'eml21__PressurePerVolumeUomExt' for type 'eml21:PressurePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeUomExt (-745)

#endif

/* eml21__PressurePerTimeUomExt has binding name 'eml21__PressurePerTimeUomExt' for type 'eml21:PressurePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeUomExt (-744)

#endif

/* eml21__PressurePerPressureUomExt has binding name 'eml21__PressurePerPressureUomExt' for type 'eml21:PressurePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureUomExt (-743)

#endif

/* eml21__PowerUomExt has binding name 'eml21__PowerUomExt' for type 'eml21:PowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerUomExt (-742)

#endif

/* eml21__PowerPerVolumeUomExt has binding name 'eml21__PowerPerVolumeUomExt' for type 'eml21:PowerPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeUomExt (-741)

#endif

/* eml21__PowerPerPowerUomExt has binding name 'eml21__PowerPerPowerUomExt' for type 'eml21:PowerPerPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerUomExt (-740)

#endif

/* eml21__PowerPerAreaUomExt has binding name 'eml21__PowerPerAreaUomExt' for type 'eml21:PowerPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaUomExt (-739)

#endif

/* eml21__PotentialDifferencePerPowerDropUomExt has binding name 'eml21__PotentialDifferencePerPowerDropUomExt' for type 'eml21:PotentialDifferencePerPowerDropUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropUomExt (-738)

#endif

/* eml21__PlaneAngleUomExt has binding name 'eml21__PlaneAngleUomExt' for type 'eml21:PlaneAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleUomExt (-737)

#endif

/* eml21__PermittivityUomExt has binding name 'eml21__PermittivityUomExt' for type 'eml21:PermittivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityUomExt (-736)

#endif

/* eml21__PermeabilityRockUomExt has binding name 'eml21__PermeabilityRockUomExt' for type 'eml21:PermeabilityRockUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockUomExt (-735)

#endif

/* eml21__PermeabilityLengthUomExt has binding name 'eml21__PermeabilityLengthUomExt' for type 'eml21:PermeabilityLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthUomExt (-734)

#endif

/* eml21__NormalizedPowerUomExt has binding name 'eml21__NormalizedPowerUomExt' for type 'eml21:NormalizedPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerUomExt (-733)

#endif

/* eml21__MomentumUomExt has binding name 'eml21__MomentumUomExt' for type 'eml21:MomentumUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumUomExt (-732)

#endif

/* eml21__MomentOfInertiaUomExt has binding name 'eml21__MomentOfInertiaUomExt' for type 'eml21:MomentOfInertiaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaUomExt (-731)

#endif

/* eml21__MomentOfForceUomExt has binding name 'eml21__MomentOfForceUomExt' for type 'eml21:MomentOfForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceUomExt (-730)

#endif

/* eml21__MolecularWeightUomExt has binding name 'eml21__MolecularWeightUomExt' for type 'eml21:MolecularWeightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightUomExt (-729)

#endif

/* eml21__MolarVolumeUomExt has binding name 'eml21__MolarVolumeUomExt' for type 'eml21:MolarVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeUomExt (-728)

#endif

/* eml21__MolarHeatCapacityUomExt has binding name 'eml21__MolarHeatCapacityUomExt' for type 'eml21:MolarHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityUomExt (-727)

#endif

/* eml21__MolarEnergyUomExt has binding name 'eml21__MolarEnergyUomExt' for type 'eml21:MolarEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyUomExt (-726)

#endif

/* eml21__MobilityUomExt has binding name 'eml21__MobilityUomExt' for type 'eml21:MobilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityUomExt (-725)

#endif

/* eml21__MassUomExt has binding name 'eml21__MassUomExt' for type 'eml21:MassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassUomExt (-724)

#endif

/* eml21__MassPerVolumeUomExt has binding name 'eml21__MassPerVolumeUomExt' for type 'eml21:MassPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeUomExt (-723)

#endif

/* eml21__MassPerVolumePerTemperatureUomExt has binding name 'eml21__MassPerVolumePerTemperatureUomExt' for type 'eml21:MassPerVolumePerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureUomExt (-722)

#endif

/* eml21__MassPerVolumePerPressureUomExt has binding name 'eml21__MassPerVolumePerPressureUomExt' for type 'eml21:MassPerVolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureUomExt (-721)

#endif

/* eml21__MassPerVolumePerLengthUomExt has binding name 'eml21__MassPerVolumePerLengthUomExt' for type 'eml21:MassPerVolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthUomExt (-720)

#endif

/* eml21__MassPerTimeUomExt has binding name 'eml21__MassPerTimeUomExt' for type 'eml21:MassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeUomExt (-719)

#endif

/* eml21__MassPerTimePerLengthUomExt has binding name 'eml21__MassPerTimePerLengthUomExt' for type 'eml21:MassPerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthUomExt (-718)

#endif

/* eml21__MassPerTimePerAreaUomExt has binding name 'eml21__MassPerTimePerAreaUomExt' for type 'eml21:MassPerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaUomExt (-717)

#endif

/* eml21__MassPerMassUomExt has binding name 'eml21__MassPerMassUomExt' for type 'eml21:MassPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassUomExt (-716)

#endif

/* eml21__MassPerLengthUomExt has binding name 'eml21__MassPerLengthUomExt' for type 'eml21:MassPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthUomExt (-715)

#endif

/* eml21__MassPerEnergyUomExt has binding name 'eml21__MassPerEnergyUomExt' for type 'eml21:MassPerEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyUomExt (-714)

#endif

/* eml21__MassPerAreaUomExt has binding name 'eml21__MassPerAreaUomExt' for type 'eml21:MassPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaUomExt (-713)

#endif

/* eml21__MassLengthUomExt has binding name 'eml21__MassLengthUomExt' for type 'eml21:MassLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthUomExt (-712)

#endif

/* eml21__MagneticVectorPotentialUomExt has binding name 'eml21__MagneticVectorPotentialUomExt' for type 'eml21:MagneticVectorPotentialUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialUomExt (-711)

#endif

/* eml21__MagneticPermeabilityUomExt has binding name 'eml21__MagneticPermeabilityUomExt' for type 'eml21:MagneticPermeabilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityUomExt (-710)

#endif

/* eml21__MagneticFluxUomExt has binding name 'eml21__MagneticFluxUomExt' for type 'eml21:MagneticFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxUomExt (-709)

#endif

/* eml21__MagneticFluxDensityUomExt has binding name 'eml21__MagneticFluxDensityUomExt' for type 'eml21:MagneticFluxDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityUomExt (-708)

#endif

/* eml21__MagneticFluxDensityPerLengthUomExt has binding name 'eml21__MagneticFluxDensityPerLengthUomExt' for type 'eml21:MagneticFluxDensityPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthUomExt (-707)

#endif

/* eml21__MagneticFieldStrengthUomExt has binding name 'eml21__MagneticFieldStrengthUomExt' for type 'eml21:MagneticFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthUomExt (-706)

#endif

/* eml21__MagneticDipoleMomentUomExt has binding name 'eml21__MagneticDipoleMomentUomExt' for type 'eml21:MagneticDipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentUomExt (-705)

#endif

/* eml21__LuminousIntensityUomExt has binding name 'eml21__LuminousIntensityUomExt' for type 'eml21:LuminousIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityUomExt (-704)

#endif

/* eml21__LuminousFluxUomExt has binding name 'eml21__LuminousFluxUomExt' for type 'eml21:LuminousFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxUomExt (-703)

#endif

/* eml21__LuminousEfficacyUomExt has binding name 'eml21__LuminousEfficacyUomExt' for type 'eml21:LuminousEfficacyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyUomExt (-702)

#endif

/* eml21__LuminanceUomExt has binding name 'eml21__LuminanceUomExt' for type 'eml21:LuminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceUomExt (-701)

#endif

/* eml21__LogarithmicPowerRatioUomExt has binding name 'eml21__LogarithmicPowerRatioUomExt' for type 'eml21:LogarithmicPowerRatioUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioUomExt (-700)

#endif

/* eml21__LogarithmicPowerRatioPerLengthUomExt has binding name 'eml21__LogarithmicPowerRatioPerLengthUomExt' for type 'eml21:LogarithmicPowerRatioPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthUomExt (-699)

#endif

/* eml21__LinearThermalExpansionUomExt has binding name 'eml21__LinearThermalExpansionUomExt' for type 'eml21:LinearThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionUomExt (-698)

#endif

/* eml21__LinearAccelerationUomExt has binding name 'eml21__LinearAccelerationUomExt' for type 'eml21:LinearAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationUomExt (-697)

#endif

/* eml21__LightExposureUomExt has binding name 'eml21__LightExposureUomExt' for type 'eml21:LightExposureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureUomExt (-696)

#endif

/* eml21__LengthUomExt has binding name 'eml21__LengthUomExt' for type 'eml21:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthUomExt (-695)

#endif

/* eml21__LengthPerVolumeUomExt has binding name 'eml21__LengthPerVolumeUomExt' for type 'eml21:LengthPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeUomExt (-694)

#endif

/* eml21__LengthPerTimeUomExt has binding name 'eml21__LengthPerTimeUomExt' for type 'eml21:LengthPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeUomExt (-693)

#endif

/* eml21__LengthPerTemperatureUomExt has binding name 'eml21__LengthPerTemperatureUomExt' for type 'eml21:LengthPerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureUomExt (-692)

#endif

/* eml21__LengthPerPressureUomExt has binding name 'eml21__LengthPerPressureUomExt' for type 'eml21:LengthPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureUomExt (-691)

#endif

/* eml21__LengthPerMassUomExt has binding name 'eml21__LengthPerMassUomExt' for type 'eml21:LengthPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassUomExt (-690)

#endif

/* eml21__LengthPerLengthUomExt has binding name 'eml21__LengthPerLengthUomExt' for type 'eml21:LengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthUomExt (-689)

#endif

/* eml21__KinematicViscosityUomExt has binding name 'eml21__KinematicViscosityUomExt' for type 'eml21:KinematicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityUomExt (-688)

#endif

/* eml21__IsothermalCompressibilityUomExt has binding name 'eml21__IsothermalCompressibilityUomExt' for type 'eml21:IsothermalCompressibilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityUomExt (-687)

#endif

/* eml21__InductanceUomExt has binding name 'eml21__InductanceUomExt' for type 'eml21:InductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceUomExt (-686)

#endif

/* eml21__IlluminanceUomExt has binding name 'eml21__IlluminanceUomExt' for type 'eml21:IlluminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceUomExt (-685)

#endif

/* eml21__HeatTransferCoefficientUomExt has binding name 'eml21__HeatTransferCoefficientUomExt' for type 'eml21:HeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientUomExt (-684)

#endif

/* eml21__HeatFlowRateUomExt has binding name 'eml21__HeatFlowRateUomExt' for type 'eml21:HeatFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateUomExt (-683)

#endif

/* eml21__HeatCapacityUomExt has binding name 'eml21__HeatCapacityUomExt' for type 'eml21:HeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityUomExt (-682)

#endif

/* eml21__FrequencyUomExt has binding name 'eml21__FrequencyUomExt' for type 'eml21:FrequencyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyUomExt (-681)

#endif

/* eml21__FrequencyIntervalUomExt has binding name 'eml21__FrequencyIntervalUomExt' for type 'eml21:FrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalUomExt (-680)

#endif

/* eml21__ForceUomExt has binding name 'eml21__ForceUomExt' for type 'eml21:ForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceUomExt (-679)

#endif

/* eml21__ForcePerVolumeUomExt has binding name 'eml21__ForcePerVolumeUomExt' for type 'eml21:ForcePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeUomExt (-678)

#endif

/* eml21__ForcePerLengthUomExt has binding name 'eml21__ForcePerLengthUomExt' for type 'eml21:ForcePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthUomExt (-677)

#endif

/* eml21__ForcePerForceUomExt has binding name 'eml21__ForcePerForceUomExt' for type 'eml21:ForcePerForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceUomExt (-676)

#endif

/* eml21__ForceLengthPerLengthUomExt has binding name 'eml21__ForceLengthPerLengthUomExt' for type 'eml21:ForceLengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthUomExt (-675)

#endif

/* eml21__ForceAreaUomExt has binding name 'eml21__ForceAreaUomExt' for type 'eml21:ForceAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaUomExt (-674)

#endif

/* eml21__EnergyUomExt has binding name 'eml21__EnergyUomExt' for type 'eml21:EnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyUomExt (-673)

#endif

/* eml21__EnergyPerVolumeUomExt has binding name 'eml21__EnergyPerVolumeUomExt' for type 'eml21:EnergyPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeUomExt (-672)

#endif

/* eml21__EnergyPerMassUomExt has binding name 'eml21__EnergyPerMassUomExt' for type 'eml21:EnergyPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassUomExt (-671)

#endif

/* eml21__EnergyPerMassPerTimeUomExt has binding name 'eml21__EnergyPerMassPerTimeUomExt' for type 'eml21:EnergyPerMassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeUomExt (-670)

#endif

/* eml21__EnergyPerLengthUomExt has binding name 'eml21__EnergyPerLengthUomExt' for type 'eml21:EnergyPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthUomExt (-669)

#endif

/* eml21__EnergyPerAreaUomExt has binding name 'eml21__EnergyPerAreaUomExt' for type 'eml21:EnergyPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaUomExt (-668)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureUomExt has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureUomExt' for type 'eml21:EnergyLengthPerTimeAreaTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureUomExt (-667)

#endif

/* eml21__EnergyLengthPerAreaUomExt has binding name 'eml21__EnergyLengthPerAreaUomExt' for type 'eml21:EnergyLengthPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaUomExt (-666)

#endif

/* eml21__ElectromagneticMomentUomExt has binding name 'eml21__ElectromagneticMomentUomExt' for type 'eml21:ElectromagneticMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentUomExt (-665)

#endif

/* eml21__ElectricResistanceUomExt has binding name 'eml21__ElectricResistanceUomExt' for type 'eml21:ElectricResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceUomExt (-664)

#endif

/* eml21__ElectricResistancePerLengthUomExt has binding name 'eml21__ElectricResistancePerLengthUomExt' for type 'eml21:ElectricResistancePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthUomExt (-663)

#endif

/* eml21__ElectricPotentialDifferenceUomExt has binding name 'eml21__ElectricPotentialDifferenceUomExt' for type 'eml21:ElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceUomExt (-662)

#endif

/* eml21__ElectricFieldStrengthUomExt has binding name 'eml21__ElectricFieldStrengthUomExt' for type 'eml21:ElectricFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthUomExt (-661)

#endif

/* eml21__ElectricCurrentUomExt has binding name 'eml21__ElectricCurrentUomExt' for type 'eml21:ElectricCurrentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentUomExt (-660)

#endif

/* eml21__ElectricCurrentDensityUomExt has binding name 'eml21__ElectricCurrentDensityUomExt' for type 'eml21:ElectricCurrentDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityUomExt (-659)

#endif

/* eml21__ElectricConductivityUomExt has binding name 'eml21__ElectricConductivityUomExt' for type 'eml21:ElectricConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityUomExt (-658)

#endif

/* eml21__ElectricConductanceUomExt has binding name 'eml21__ElectricConductanceUomExt' for type 'eml21:ElectricConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceUomExt (-657)

#endif

/* eml21__ElectricChargeUomExt has binding name 'eml21__ElectricChargeUomExt' for type 'eml21:ElectricChargeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeUomExt (-656)

#endif

/* eml21__ElectricChargePerVolumeUomExt has binding name 'eml21__ElectricChargePerVolumeUomExt' for type 'eml21:ElectricChargePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeUomExt (-655)

#endif

/* eml21__ElectricChargePerMassUomExt has binding name 'eml21__ElectricChargePerMassUomExt' for type 'eml21:ElectricChargePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassUomExt (-654)

#endif

/* eml21__ElectricChargePerAreaUomExt has binding name 'eml21__ElectricChargePerAreaUomExt' for type 'eml21:ElectricChargePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaUomExt (-653)

#endif

/* eml21__ElectricalResistivityUomExt has binding name 'eml21__ElectricalResistivityUomExt' for type 'eml21:ElectricalResistivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityUomExt (-652)

#endif

/* eml21__DynamicViscosityUomExt has binding name 'eml21__DynamicViscosityUomExt' for type 'eml21:DynamicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityUomExt (-651)

#endif

/* eml21__DoseEquivalentUomExt has binding name 'eml21__DoseEquivalentUomExt' for type 'eml21:DoseEquivalentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentUomExt (-650)

#endif

/* eml21__DipoleMomentUomExt has binding name 'eml21__DipoleMomentUomExt' for type 'eml21:DipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentUomExt (-649)

#endif

/* eml21__DimensionlessUomExt has binding name 'eml21__DimensionlessUomExt' for type 'eml21:DimensionlessUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessUomExt (-648)

#endif

/* eml21__DigitalStorageUomExt has binding name 'eml21__DigitalStorageUomExt' for type 'eml21:DigitalStorageUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageUomExt (-647)

#endif

/* eml21__DiffusiveTimeOfFlightUomExt has binding name 'eml21__DiffusiveTimeOfFlightUomExt' for type 'eml21:DiffusiveTimeOfFlightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightUomExt (-646)

#endif

/* eml21__DiffusionCoefficientUomExt has binding name 'eml21__DiffusionCoefficientUomExt' for type 'eml21:DiffusionCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientUomExt (-645)

#endif

/* eml21__DataTransferSpeedUomExt has binding name 'eml21__DataTransferSpeedUomExt' for type 'eml21:DataTransferSpeedUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedUomExt (-644)

#endif

/* eml21__CationExchangeCapacityUomExt has binding name 'eml21__CationExchangeCapacityUomExt' for type 'eml21:CationExchangeCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityUomExt (-643)

#endif

/* eml21__CapacitanceUomExt has binding name 'eml21__CapacitanceUomExt' for type 'eml21:CapacitanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceUomExt (-642)

#endif

/* eml21__AttenuationPerFrequencyIntervalUomExt has binding name 'eml21__AttenuationPerFrequencyIntervalUomExt' for type 'eml21:AttenuationPerFrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalUomExt (-641)

#endif

/* eml21__AreaUomExt has binding name 'eml21__AreaUomExt' for type 'eml21:AreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaUomExt (-640)

#endif

/* eml21__AreaPerVolumeUomExt has binding name 'eml21__AreaPerVolumeUomExt' for type 'eml21:AreaPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeUomExt (-639)

#endif

/* eml21__AreaPerTimeUomExt has binding name 'eml21__AreaPerTimeUomExt' for type 'eml21:AreaPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeUomExt (-638)

#endif

/* eml21__AreaPerMassUomExt has binding name 'eml21__AreaPerMassUomExt' for type 'eml21:AreaPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassUomExt (-637)

#endif

/* eml21__AreaPerCountUomExt has binding name 'eml21__AreaPerCountUomExt' for type 'eml21:AreaPerCountUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountUomExt (-636)

#endif

/* eml21__AreaPerAreaUomExt has binding name 'eml21__AreaPerAreaUomExt' for type 'eml21:AreaPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaUomExt (-635)

#endif

/* eml21__AreaPerAmountOfSubstanceUomExt has binding name 'eml21__AreaPerAmountOfSubstanceUomExt' for type 'eml21:AreaPerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceUomExt (-634)

#endif

/* eml21__APINeutronUomExt has binding name 'eml21__APINeutronUomExt' for type 'eml21:APINeutronUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronUomExt (-633)

#endif

/* eml21__APIGravityUomExt has binding name 'eml21__APIGravityUomExt' for type 'eml21:APIGravityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityUomExt (-632)

#endif

/* eml21__APIGammaRayUomExt has binding name 'eml21__APIGammaRayUomExt' for type 'eml21:APIGammaRayUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayUomExt (-631)

#endif

/* eml21__AngularVelocityUomExt has binding name 'eml21__AngularVelocityUomExt' for type 'eml21:AngularVelocityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityUomExt (-630)

#endif

/* eml21__AngularAccelerationUomExt has binding name 'eml21__AngularAccelerationUomExt' for type 'eml21:AngularAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationUomExt (-629)

#endif

/* eml21__AnglePerVolumeUomExt has binding name 'eml21__AnglePerVolumeUomExt' for type 'eml21:AnglePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeUomExt (-628)

#endif

/* eml21__AnglePerLengthUomExt has binding name 'eml21__AnglePerLengthUomExt' for type 'eml21:AnglePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthUomExt (-627)

#endif

/* eml21__AmountOfSubstanceUomExt has binding name 'eml21__AmountOfSubstanceUomExt' for type 'eml21:AmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceUomExt (-626)

#endif

/* eml21__AmountOfSubstancePerVolumeUomExt has binding name 'eml21__AmountOfSubstancePerVolumeUomExt' for type 'eml21:AmountOfSubstancePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeUomExt (-625)

#endif

/* eml21__AmountOfSubstancePerTimeUomExt has binding name 'eml21__AmountOfSubstancePerTimeUomExt' for type 'eml21:AmountOfSubstancePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeUomExt (-624)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaUomExt has binding name 'eml21__AmountOfSubstancePerTimePerAreaUomExt' for type 'eml21:AmountOfSubstancePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaUomExt (-623)

#endif

/* eml21__AmountOfSubstancePerAreaUomExt has binding name 'eml21__AmountOfSubstancePerAreaUomExt' for type 'eml21:AmountOfSubstancePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaUomExt (-622)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceUomExt has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceUomExt' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceUomExt (-621)

#endif

/* eml21__ActivityOfRadioactivityUomExt has binding name 'eml21__ActivityOfRadioactivityUomExt' for type 'eml21:ActivityOfRadioactivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityUomExt (-620)

#endif

/* eml21__AbsorbedDoseUomExt has binding name 'eml21__AbsorbedDoseUomExt' for type 'eml21:AbsorbedDoseUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseUomExt (-619)

#endif

/* eml21__UnitOfMeasureExt has binding name 'eml21__UnitOfMeasureExt' for type 'eml21:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitOfMeasureExt (-618)

#endif

/* eml21__ReferenceConditionExt has binding name 'eml21__ReferenceConditionExt' for type 'eml21:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceConditionExt (-617)

#endif

/* eml21__QuantityClassKindExt has binding name 'eml21__QuantityClassKindExt' for type 'eml21:QuantityClassKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityClassKindExt (-616)

#endif

/* eml21__LithologyQualifierKindExt has binding name 'eml21__LithologyQualifierKindExt' for type 'eml21:LithologyQualifierKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyQualifierKindExt (-615)

#endif

/* eml21__LithologyKindExt has binding name 'eml21__LithologyKindExt' for type 'eml21:LithologyKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LithologyKindExt (-614)

#endif

/* witsml20__EquipmentTypeExt has binding name 'witsml20__EquipmentTypeExt' for type 'witsml20:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentTypeExt (-613)

#endif

/* eml21__GraphicalInformationSet has binding name 'eml21__GraphicalInformationSet' for type 'eml21:GraphicalInformationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_1_eml21__GraphicalInformationSet (-612)

#endif

/* eml21__AbstractGraphicalInformation has binding name 'eml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGraphicalInformation (-611)

#endif

/* eml21__IndexRange has binding name 'eml21__IndexRange' for type 'eml21:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_eml21__IndexRange (-610)

#endif

/* eml21__FailingRule has binding name 'eml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_eml21__FailingRule (-609)

#endif

/* eml21__DataAssuranceRecord has binding name 'eml21__DataAssuranceRecord' for type 'eml21:DataAssuranceRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataAssuranceRecord (-608)

#endif

/* eml21__VerticalWktCrs has binding name 'eml21__VerticalWktCrs' for type 'eml21:VerticalWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalWktCrs (-607)

#endif

/* eml21__VerticalUnknownCrs has binding name 'eml21__VerticalUnknownCrs' for type 'eml21:VerticalUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalUnknownCrs (-606)

#endif

/* eml21__VerticalLocalAuthorityCrs has binding name 'eml21__VerticalLocalAuthorityCrs' for type 'eml21:VerticalLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalLocalAuthorityCrs (-605)

#endif

/* eml21__VerticalEpsgCrs has binding name 'eml21__VerticalEpsgCrs' for type 'eml21:VerticalEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalEpsgCrs (-604)

#endif

/* eml21__VerticalCrs has binding name 'eml21__VerticalCrs' for type 'eml21:VerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCrs (-603)

#endif

/* eml21__ProjectedWktCrs has binding name 'eml21__ProjectedWktCrs' for type 'eml21:ProjectedWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedWktCrs (-602)

#endif

/* eml21__ProjectedUnknownCrs has binding name 'eml21__ProjectedUnknownCrs' for type 'eml21:ProjectedUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedUnknownCrs (-601)

#endif

/* eml21__ProjectedLocalAuthorityCrs has binding name 'eml21__ProjectedLocalAuthorityCrs' for type 'eml21:ProjectedLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedLocalAuthorityCrs (-600)

#endif

/* eml21__ProjectedEpsgCrs has binding name 'eml21__ProjectedEpsgCrs' for type 'eml21:ProjectedEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedEpsgCrs (-599)

#endif

/* eml21__ProjectedCrs has binding name 'eml21__ProjectedCrs' for type 'eml21:ProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__ProjectedCrs (-598)

#endif

/* eml21__GeodeticWktCrs has binding name 'eml21__GeodeticWktCrs' for type 'eml21:GeodeticWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticWktCrs (-597)

#endif

/* eml21__GeodeticUnknownCrs has binding name 'eml21__GeodeticUnknownCrs' for type 'eml21:GeodeticUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticUnknownCrs (-596)

#endif

/* eml21__GeodeticLocalAuthorityCrs has binding name 'eml21__GeodeticLocalAuthorityCrs' for type 'eml21:GeodeticLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticLocalAuthorityCrs (-595)

#endif

/* eml21__GeodeticEpsgCrs has binding name 'eml21__GeodeticEpsgCrs' for type 'eml21:GeodeticEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticEpsgCrs (-594)

#endif

/* eml21__GeodeticCrs has binding name 'eml21__GeodeticCrs' for type 'eml21:GeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeodeticCrs (-593)

#endif

/* eml21__AbstractVerticalCrs has binding name 'eml21__AbstractVerticalCrs' for type 'eml21:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractVerticalCrs (-592)

#endif

/* eml21__AbstractProjectedCrs has binding name 'eml21__AbstractProjectedCrs' for type 'eml21:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractProjectedCrs (-591)

#endif

/* eml21__AbstractGeodeticCrs has binding name 'eml21__AbstractGeodeticCrs' for type 'eml21:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractGeodeticCrs (-590)

#endif

/* eml21__VolumeValue has binding name 'eml21__VolumeValue' for type 'eml21:VolumeValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeValue (-589)

#endif

/* eml21__TemperaturePressure has binding name 'eml21__TemperaturePressure' for type 'eml21:TemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperaturePressure (-588)

#endif

/* eml21__RelativePressure has binding name 'eml21__RelativePressure' for type 'eml21:RelativePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RelativePressure (-587)

#endif

/* eml21__ReferenceTemperaturePressure has binding name 'eml21__ReferenceTemperaturePressure' for type 'eml21:ReferenceTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferenceTemperaturePressure (-586)

#endif

/* eml21__ReferencePressure has binding name 'eml21__ReferencePressure' for type 'eml21:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReferencePressure (-585)

#endif

/* eml21__PressureValue has binding name 'eml21__PressureValue' for type 'eml21:PressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureValue (-584)

#endif

/* eml21__GaugePressure has binding name 'eml21__GaugePressure' for type 'eml21:GaugePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GaugePressure (-583)

#endif

/* eml21__FlowRateValue has binding name 'eml21__FlowRateValue' for type 'eml21:FlowRateValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__FlowRateValue (-582)

#endif

/* eml21__DensityValue has binding name 'eml21__DensityValue' for type 'eml21:DensityValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__DensityValue (-581)

#endif

/* eml21__AbstractTemperaturePressure has binding name 'eml21__AbstractTemperaturePressure' for type 'eml21:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractTemperaturePressure (-580)

#endif

/* eml21__AbstractPressureValue has binding name 'eml21__AbstractPressureValue' for type 'eml21:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractPressureValue (-579)

#endif

/* eml21__AbsolutePressure has binding name 'eml21__AbsolutePressure' for type 'eml21:AbsolutePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsolutePressure (-578)

#endif

/* eml21__TimeSeriesParentage has binding name 'eml21__TimeSeriesParentage' for type 'eml21:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeriesParentage (-577)

#endif

/* eml21__TimeSeries has binding name 'eml21__TimeSeries' for type 'eml21:TimeSeries' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeSeries (-576)

#endif

/* eml21__TimeIndices has binding name 'eml21__TimeIndices' for type 'eml21:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndices (-575)

#endif

/* eml21__TimeIndex has binding name 'eml21__TimeIndex' for type 'eml21:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndex (-574)

#endif

/* eml21__PropertyKindDictionary has binding name 'eml21__PropertyKindDictionary' for type 'eml21:PropertyKindDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKindDictionary (-573)

#endif

/* eml21__PropertyKind has binding name 'eml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_eml21__PropertyKind (-572)

#endif

/* eml21__GeologicTime has binding name 'eml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_eml21__GeologicTime (-571)

#endif

/* eml21__TimeIndexParameterKey has binding name 'eml21__TimeIndexParameterKey' for type 'eml21:TimeIndexParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameterKey (-570)

#endif

/* eml21__TimeIndexParameter has binding name 'eml21__TimeIndexParameter' for type 'eml21:TimeIndexParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeIndexParameter (-569)

#endif

/* eml21__StringParameter has binding name 'eml21__StringParameter' for type 'eml21:StringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringParameter (-568)

#endif

/* eml21__ParameterTemplate has binding name 'eml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ParameterTemplate (-567)

#endif

/* eml21__ObjectParameterKey has binding name 'eml21__ObjectParameterKey' for type 'eml21:ObjectParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectParameterKey (-566)

#endif

/* eml21__IntegerQuantityParameter has binding name 'eml21__IntegerQuantityParameter' for type 'eml21:IntegerQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerQuantityParameter (-565)

#endif

/* eml21__DoubleQuantityParameter has binding name 'eml21__DoubleQuantityParameter' for type 'eml21:DoubleQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleQuantityParameter (-564)

#endif

/* eml21__DataObjectParameter has binding name 'eml21__DataObjectParameter' for type 'eml21:DataObjectParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectParameter (-563)

#endif

/* eml21__ActivityTemplate has binding name 'eml21__ActivityTemplate' for type 'eml21:ActivityTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityTemplate (-562)

#endif

/* eml21__Activity has binding name 'eml21__Activity' for type 'eml21:Activity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Activity
#define SOAP_TYPE_gsoap_eml2_1_eml21__Activity (-561)

#endif

/* eml21__AbstractParameterKey has binding name 'eml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractParameterKey (-560)

#endif

/* eml21__AbstractActivityParameter has binding name 'eml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractActivityParameter (-559)

#endif

/* eml21__ExternalDatasetPart has binding name 'eml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDatasetPart (-558)

#endif

/* eml21__ExternalDataset has binding name 'eml21__ExternalDataset' for type 'eml21:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExternalDataset (-557)

#endif

/* eml21__EpcExternalPartReference has binding name 'eml21__EpcExternalPartReference' for type 'eml21:EpcExternalPartReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__EpcExternalPartReference (-556)

#endif

/* eml21__DataObjectReference has binding name 'eml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataObjectReference (-555)

#endif

/* eml21__VolumetricThermalExpansionMeasureExt has binding name 'eml21__VolumetricThermalExpansionMeasureExt' for type 'eml21:VolumetricThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasureExt (-554)

#endif

/* eml21__VolumetricThermalExpansionMeasure has binding name 'eml21__VolumetricThermalExpansionMeasure' for type 'eml21:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricThermalExpansionMeasure (-553)

#endif

/* eml21__VolumetricHeatTransferCoefficientMeasureExt has binding name 'eml21__VolumetricHeatTransferCoefficientMeasureExt' for type 'eml21:VolumetricHeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasureExt (-552)

#endif

/* eml21__VolumetricHeatTransferCoefficientMeasure has binding name 'eml21__VolumetricHeatTransferCoefficientMeasure' for type 'eml21:VolumetricHeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumetricHeatTransferCoefficientMeasure (-551)

#endif

/* eml21__VolumePerVolumeMeasureExt has binding name 'eml21__VolumePerVolumeMeasureExt' for type 'eml21:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasureExt (-550)

#endif

/* eml21__VolumePerVolumeMeasure has binding name 'eml21__VolumePerVolumeMeasure' for type 'eml21:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerVolumeMeasure (-549)

#endif

/* eml21__VolumePerTimePerVolumeMeasureExt has binding name 'eml21__VolumePerTimePerVolumeMeasureExt' for type 'eml21:VolumePerTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasureExt (-548)

#endif

/* eml21__VolumePerTimePerVolumeMeasure has binding name 'eml21__VolumePerTimePerVolumeMeasure' for type 'eml21:VolumePerTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerVolumeMeasure (-547)

#endif

/* eml21__VolumePerTimePerTimeMeasureExt has binding name 'eml21__VolumePerTimePerTimeMeasureExt' for type 'eml21:VolumePerTimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasureExt (-546)

#endif

/* eml21__VolumePerTimePerTimeMeasure has binding name 'eml21__VolumePerTimePerTimeMeasure' for type 'eml21:VolumePerTimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerTimeMeasure (-545)

#endif

/* eml21__VolumePerTimePerPressureMeasureExt has binding name 'eml21__VolumePerTimePerPressureMeasureExt' for type 'eml21:VolumePerTimePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasureExt (-544)

#endif

/* eml21__VolumePerTimePerPressureMeasure has binding name 'eml21__VolumePerTimePerPressureMeasure' for type 'eml21:VolumePerTimePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureMeasure (-543)

#endif

/* eml21__VolumePerTimePerPressureLengthMeasureExt has binding name 'eml21__VolumePerTimePerPressureLengthMeasureExt' for type 'eml21:VolumePerTimePerPressureLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasureExt (-542)

#endif

/* eml21__VolumePerTimePerPressureLengthMeasure has binding name 'eml21__VolumePerTimePerPressureLengthMeasure' for type 'eml21:VolumePerTimePerPressureLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerPressureLengthMeasure (-541)

#endif

/* eml21__VolumePerTimePerLengthMeasureExt has binding name 'eml21__VolumePerTimePerLengthMeasureExt' for type 'eml21:VolumePerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasureExt (-540)

#endif

/* eml21__VolumePerTimePerLengthMeasure has binding name 'eml21__VolumePerTimePerLengthMeasure' for type 'eml21:VolumePerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerLengthMeasure (-539)

#endif

/* eml21__VolumePerTimePerAreaMeasureExt has binding name 'eml21__VolumePerTimePerAreaMeasureExt' for type 'eml21:VolumePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasureExt (-538)

#endif

/* eml21__VolumePerTimePerAreaMeasure has binding name 'eml21__VolumePerTimePerAreaMeasure' for type 'eml21:VolumePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimePerAreaMeasure (-537)

#endif

/* eml21__VolumePerTimeMeasureExt has binding name 'eml21__VolumePerTimeMeasureExt' for type 'eml21:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasureExt (-536)

#endif

/* eml21__VolumePerTimeMeasure has binding name 'eml21__VolumePerTimeMeasure' for type 'eml21:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeMeasure (-535)

#endif

/* eml21__VolumePerTimeLengthMeasureExt has binding name 'eml21__VolumePerTimeLengthMeasureExt' for type 'eml21:VolumePerTimeLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasureExt (-534)

#endif

/* eml21__VolumePerTimeLengthMeasure has binding name 'eml21__VolumePerTimeLengthMeasure' for type 'eml21:VolumePerTimeLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerTimeLengthMeasure (-533)

#endif

/* eml21__VolumePerRotationMeasureExt has binding name 'eml21__VolumePerRotationMeasureExt' for type 'eml21:VolumePerRotationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasureExt (-532)

#endif

/* eml21__VolumePerRotationMeasure has binding name 'eml21__VolumePerRotationMeasure' for type 'eml21:VolumePerRotationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerRotationMeasure (-531)

#endif

/* eml21__VolumePerPressureMeasureExt has binding name 'eml21__VolumePerPressureMeasureExt' for type 'eml21:VolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasureExt (-530)

#endif

/* eml21__VolumePerPressureMeasure has binding name 'eml21__VolumePerPressureMeasure' for type 'eml21:VolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerPressureMeasure (-529)

#endif

/* eml21__VolumePerMassMeasureExt has binding name 'eml21__VolumePerMassMeasureExt' for type 'eml21:VolumePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasureExt (-528)

#endif

/* eml21__VolumePerMassMeasure has binding name 'eml21__VolumePerMassMeasure' for type 'eml21:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerMassMeasure (-527)

#endif

/* eml21__VolumePerLengthMeasureExt has binding name 'eml21__VolumePerLengthMeasureExt' for type 'eml21:VolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasureExt (-526)

#endif

/* eml21__VolumePerLengthMeasure has binding name 'eml21__VolumePerLengthMeasure' for type 'eml21:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerLengthMeasure (-525)

#endif

/* eml21__VolumePerAreaMeasureExt has binding name 'eml21__VolumePerAreaMeasureExt' for type 'eml21:VolumePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasureExt (-524)

#endif

/* eml21__VolumePerAreaMeasure has binding name 'eml21__VolumePerAreaMeasure' for type 'eml21:VolumePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumePerAreaMeasure (-523)

#endif

/* eml21__VolumeMeasureExt has binding name 'eml21__VolumeMeasureExt' for type 'eml21:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasureExt (-522)

#endif

/* eml21__VolumeMeasure has binding name 'eml21__VolumeMeasure' for type 'eml21:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeMeasure (-521)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt' for type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasureExt (-520)

#endif

/* eml21__VolumeFlowRatePerVolumeFlowRateMeasure has binding name 'eml21__VolumeFlowRatePerVolumeFlowRateMeasure' for type 'eml21:VolumeFlowRatePerVolumeFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VolumeFlowRatePerVolumeFlowRateMeasure (-519)

#endif

/* eml21__VerticalCoordinateMeasureExt has binding name 'eml21__VerticalCoordinateMeasureExt' for type 'eml21:VerticalCoordinateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasureExt (-518)

#endif

/* eml21__VerticalCoordinateMeasure has binding name 'eml21__VerticalCoordinateMeasure' for type 'eml21:VerticalCoordinateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__VerticalCoordinateMeasure (-517)

#endif

/* eml21__UnitlessMeasure has binding name 'eml21__UnitlessMeasure' for type 'eml21:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__UnitlessMeasure (-516)

#endif

/* eml21__TimePerVolumeMeasureExt has binding name 'eml21__TimePerVolumeMeasureExt' for type 'eml21:TimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasureExt (-515)

#endif

/* eml21__TimePerVolumeMeasure has binding name 'eml21__TimePerVolumeMeasure' for type 'eml21:TimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerVolumeMeasure (-514)

#endif

/* eml21__TimePerTimeMeasureExt has binding name 'eml21__TimePerTimeMeasureExt' for type 'eml21:TimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasureExt (-513)

#endif

/* eml21__TimePerTimeMeasure has binding name 'eml21__TimePerTimeMeasure' for type 'eml21:TimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerTimeMeasure (-512)

#endif

/* eml21__TimePerMassMeasureExt has binding name 'eml21__TimePerMassMeasureExt' for type 'eml21:TimePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasureExt (-511)

#endif

/* eml21__TimePerMassMeasure has binding name 'eml21__TimePerMassMeasure' for type 'eml21:TimePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerMassMeasure (-510)

#endif

/* eml21__TimePerLengthMeasureExt has binding name 'eml21__TimePerLengthMeasureExt' for type 'eml21:TimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasureExt (-509)

#endif

/* eml21__TimePerLengthMeasure has binding name 'eml21__TimePerLengthMeasure' for type 'eml21:TimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimePerLengthMeasure (-508)

#endif

/* eml21__TimeMeasureExt has binding name 'eml21__TimeMeasureExt' for type 'eml21:TimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasureExt (-507)

#endif

/* eml21__TimeMeasure has binding name 'eml21__TimeMeasure' for type 'eml21:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TimeMeasure (-506)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-505)

#endif

/* eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure has binding name 'eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-504)

#endif

/* eml21__ThermodynamicTemperatureMeasureExt has binding name 'eml21__ThermodynamicTemperatureMeasureExt' for type 'eml21:ThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasureExt (-503)

#endif

/* eml21__ThermodynamicTemperatureMeasure has binding name 'eml21__ThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermodynamicTemperatureMeasure (-502)

#endif

/* eml21__ThermalResistanceMeasureExt has binding name 'eml21__ThermalResistanceMeasureExt' for type 'eml21:ThermalResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasureExt (-501)

#endif

/* eml21__ThermalResistanceMeasure has binding name 'eml21__ThermalResistanceMeasure' for type 'eml21:ThermalResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalResistanceMeasure (-500)

#endif

/* eml21__ThermalInsulanceMeasureExt has binding name 'eml21__ThermalInsulanceMeasureExt' for type 'eml21:ThermalInsulanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasureExt (-499)

#endif

/* eml21__ThermalInsulanceMeasure has binding name 'eml21__ThermalInsulanceMeasure' for type 'eml21:ThermalInsulanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalInsulanceMeasure (-498)

#endif

/* eml21__ThermalDiffusivityMeasureExt has binding name 'eml21__ThermalDiffusivityMeasureExt' for type 'eml21:ThermalDiffusivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasureExt (-497)

#endif

/* eml21__ThermalDiffusivityMeasure has binding name 'eml21__ThermalDiffusivityMeasure' for type 'eml21:ThermalDiffusivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalDiffusivityMeasure (-496)

#endif

/* eml21__ThermalConductivityMeasureExt has binding name 'eml21__ThermalConductivityMeasureExt' for type 'eml21:ThermalConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasureExt (-495)

#endif

/* eml21__ThermalConductivityMeasure has binding name 'eml21__ThermalConductivityMeasure' for type 'eml21:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductivityMeasure (-494)

#endif

/* eml21__ThermalConductanceMeasureExt has binding name 'eml21__ThermalConductanceMeasureExt' for type 'eml21:ThermalConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasureExt (-493)

#endif

/* eml21__ThermalConductanceMeasure has binding name 'eml21__ThermalConductanceMeasure' for type 'eml21:ThermalConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ThermalConductanceMeasure (-492)

#endif

/* eml21__TemperatureIntervalPerTimeMeasureExt has binding name 'eml21__TemperatureIntervalPerTimeMeasureExt' for type 'eml21:TemperatureIntervalPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasureExt (-491)

#endif

/* eml21__TemperatureIntervalPerTimeMeasure has binding name 'eml21__TemperatureIntervalPerTimeMeasure' for type 'eml21:TemperatureIntervalPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerTimeMeasure (-490)

#endif

/* eml21__TemperatureIntervalPerPressureMeasureExt has binding name 'eml21__TemperatureIntervalPerPressureMeasureExt' for type 'eml21:TemperatureIntervalPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasureExt (-489)

#endif

/* eml21__TemperatureIntervalPerPressureMeasure has binding name 'eml21__TemperatureIntervalPerPressureMeasure' for type 'eml21:TemperatureIntervalPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerPressureMeasure (-488)

#endif

/* eml21__TemperatureIntervalPerLengthMeasureExt has binding name 'eml21__TemperatureIntervalPerLengthMeasureExt' for type 'eml21:TemperatureIntervalPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasureExt (-487)

#endif

/* eml21__TemperatureIntervalPerLengthMeasure has binding name 'eml21__TemperatureIntervalPerLengthMeasure' for type 'eml21:TemperatureIntervalPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalPerLengthMeasure (-486)

#endif

/* eml21__TemperatureIntervalMeasureExt has binding name 'eml21__TemperatureIntervalMeasureExt' for type 'eml21:TemperatureIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasureExt (-485)

#endif

/* eml21__TemperatureIntervalMeasure has binding name 'eml21__TemperatureIntervalMeasure' for type 'eml21:TemperatureIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__TemperatureIntervalMeasure (-484)

#endif

/* eml21__SpecificHeatCapacityMeasureExt has binding name 'eml21__SpecificHeatCapacityMeasureExt' for type 'eml21:SpecificHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasureExt (-483)

#endif

/* eml21__SpecificHeatCapacityMeasure has binding name 'eml21__SpecificHeatCapacityMeasure' for type 'eml21:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SpecificHeatCapacityMeasure (-482)

#endif

/* eml21__SolidAngleMeasureExt has binding name 'eml21__SolidAngleMeasureExt' for type 'eml21:SolidAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasureExt (-481)

#endif

/* eml21__SolidAngleMeasure has binding name 'eml21__SolidAngleMeasure' for type 'eml21:SolidAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SolidAngleMeasure (-480)

#endif

/* eml21__SignalingEventPerTimeMeasureExt has binding name 'eml21__SignalingEventPerTimeMeasureExt' for type 'eml21:SignalingEventPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasureExt (-479)

#endif

/* eml21__SignalingEventPerTimeMeasure has binding name 'eml21__SignalingEventPerTimeMeasure' for type 'eml21:SignalingEventPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SignalingEventPerTimeMeasure (-478)

#endif

/* eml21__SecondMomentOfAreaMeasureExt has binding name 'eml21__SecondMomentOfAreaMeasureExt' for type 'eml21:SecondMomentOfAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasureExt (-477)

#endif

/* eml21__SecondMomentOfAreaMeasure has binding name 'eml21__SecondMomentOfAreaMeasure' for type 'eml21:SecondMomentOfAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__SecondMomentOfAreaMeasure (-476)

#endif

/* eml21__ReluctanceMeasureExt has binding name 'eml21__ReluctanceMeasureExt' for type 'eml21:ReluctanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasureExt (-475)

#endif

/* eml21__ReluctanceMeasure has binding name 'eml21__ReluctanceMeasure' for type 'eml21:ReluctanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReluctanceMeasure (-474)

#endif

/* eml21__ReciprocalVolumeMeasureExt has binding name 'eml21__ReciprocalVolumeMeasureExt' for type 'eml21:ReciprocalVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasureExt (-473)

#endif

/* eml21__ReciprocalVolumeMeasure has binding name 'eml21__ReciprocalVolumeMeasure' for type 'eml21:ReciprocalVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalVolumeMeasure (-472)

#endif

/* eml21__ReciprocalTimeMeasureExt has binding name 'eml21__ReciprocalTimeMeasureExt' for type 'eml21:ReciprocalTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasureExt (-471)

#endif

/* eml21__ReciprocalTimeMeasure has binding name 'eml21__ReciprocalTimeMeasure' for type 'eml21:ReciprocalTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalTimeMeasure (-470)

#endif

/* eml21__ReciprocalPressureMeasureExt has binding name 'eml21__ReciprocalPressureMeasureExt' for type 'eml21:ReciprocalPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasureExt (-469)

#endif

/* eml21__ReciprocalPressureMeasure has binding name 'eml21__ReciprocalPressureMeasure' for type 'eml21:ReciprocalPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalPressureMeasure (-468)

#endif

/* eml21__ReciprocalMassTimeMeasureExt has binding name 'eml21__ReciprocalMassTimeMeasureExt' for type 'eml21:ReciprocalMassTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasureExt (-467)

#endif

/* eml21__ReciprocalMassTimeMeasure has binding name 'eml21__ReciprocalMassTimeMeasure' for type 'eml21:ReciprocalMassTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassTimeMeasure (-466)

#endif

/* eml21__ReciprocalMassMeasureExt has binding name 'eml21__ReciprocalMassMeasureExt' for type 'eml21:ReciprocalMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasureExt (-465)

#endif

/* eml21__ReciprocalMassMeasure has binding name 'eml21__ReciprocalMassMeasure' for type 'eml21:ReciprocalMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalMassMeasure (-464)

#endif

/* eml21__ReciprocalLengthMeasureExt has binding name 'eml21__ReciprocalLengthMeasureExt' for type 'eml21:ReciprocalLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasureExt (-463)

#endif

/* eml21__ReciprocalLengthMeasure has binding name 'eml21__ReciprocalLengthMeasure' for type 'eml21:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalLengthMeasure (-462)

#endif

/* eml21__ReciprocalForceMeasureExt has binding name 'eml21__ReciprocalForceMeasureExt' for type 'eml21:ReciprocalForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasureExt (-461)

#endif

/* eml21__ReciprocalForceMeasure has binding name 'eml21__ReciprocalForceMeasure' for type 'eml21:ReciprocalForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalForceMeasure (-460)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceMeasureExt has binding name 'eml21__ReciprocalElectricPotentialDifferenceMeasureExt' for type 'eml21:ReciprocalElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasureExt (-459)

#endif

/* eml21__ReciprocalElectricPotentialDifferenceMeasure has binding name 'eml21__ReciprocalElectricPotentialDifferenceMeasure' for type 'eml21:ReciprocalElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalElectricPotentialDifferenceMeasure (-458)

#endif

/* eml21__ReciprocalAreaMeasureExt has binding name 'eml21__ReciprocalAreaMeasureExt' for type 'eml21:ReciprocalAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasureExt (-457)

#endif

/* eml21__ReciprocalAreaMeasure has binding name 'eml21__ReciprocalAreaMeasure' for type 'eml21:ReciprocalAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ReciprocalAreaMeasure (-456)

#endif

/* eml21__RadiantIntensityMeasureExt has binding name 'eml21__RadiantIntensityMeasureExt' for type 'eml21:RadiantIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasureExt (-455)

#endif

/* eml21__RadiantIntensityMeasure has binding name 'eml21__RadiantIntensityMeasure' for type 'eml21:RadiantIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadiantIntensityMeasure (-454)

#endif

/* eml21__RadianceMeasureExt has binding name 'eml21__RadianceMeasureExt' for type 'eml21:RadianceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasureExt (-453)

#endif

/* eml21__RadianceMeasure has binding name 'eml21__RadianceMeasure' for type 'eml21:RadianceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__RadianceMeasure (-452)

#endif

/* eml21__QuantityOfLightMeasureExt has binding name 'eml21__QuantityOfLightMeasureExt' for type 'eml21:QuantityOfLightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasureExt (-451)

#endif

/* eml21__QuantityOfLightMeasure has binding name 'eml21__QuantityOfLightMeasure' for type 'eml21:QuantityOfLightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__QuantityOfLightMeasure (-450)

#endif

/* eml21__PressureTimePerVolumeMeasureExt has binding name 'eml21__PressureTimePerVolumeMeasureExt' for type 'eml21:PressureTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasureExt (-449)

#endif

/* eml21__PressureTimePerVolumeMeasure has binding name 'eml21__PressureTimePerVolumeMeasure' for type 'eml21:PressureTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureTimePerVolumeMeasure (-448)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaMeasureExt has binding name 'eml21__PressureSquaredPerForceTimePerAreaMeasureExt' for type 'eml21:PressureSquaredPerForceTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasureExt (-447)

#endif

/* eml21__PressureSquaredPerForceTimePerAreaMeasure has binding name 'eml21__PressureSquaredPerForceTimePerAreaMeasure' for type 'eml21:PressureSquaredPerForceTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredPerForceTimePerAreaMeasure (-446)

#endif

/* eml21__PressureSquaredMeasureExt has binding name 'eml21__PressureSquaredMeasureExt' for type 'eml21:PressureSquaredMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasureExt (-445)

#endif

/* eml21__PressureSquaredMeasure has binding name 'eml21__PressureSquaredMeasure' for type 'eml21:PressureSquaredMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureSquaredMeasure (-444)

#endif

/* eml21__PressurePerVolumeMeasureExt has binding name 'eml21__PressurePerVolumeMeasureExt' for type 'eml21:PressurePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasureExt (-443)

#endif

/* eml21__PressurePerVolumeMeasure has binding name 'eml21__PressurePerVolumeMeasure' for type 'eml21:PressurePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerVolumeMeasure (-442)

#endif

/* eml21__PressurePerTimeMeasureExt has binding name 'eml21__PressurePerTimeMeasureExt' for type 'eml21:PressurePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasureExt (-441)

#endif

/* eml21__PressurePerTimeMeasure has binding name 'eml21__PressurePerTimeMeasure' for type 'eml21:PressurePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerTimeMeasure (-440)

#endif

/* eml21__PressurePerPressureMeasureExt has binding name 'eml21__PressurePerPressureMeasureExt' for type 'eml21:PressurePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasureExt (-439)

#endif

/* eml21__PressurePerPressureMeasure has binding name 'eml21__PressurePerPressureMeasure' for type 'eml21:PressurePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressurePerPressureMeasure (-438)

#endif

/* eml21__PressureMeasureExt has binding name 'eml21__PressureMeasureExt' for type 'eml21:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasureExt (-437)

#endif

/* eml21__PressureMeasure has binding name 'eml21__PressureMeasure' for type 'eml21:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PressureMeasure (-436)

#endif

/* eml21__PowerPerVolumeMeasureExt has binding name 'eml21__PowerPerVolumeMeasureExt' for type 'eml21:PowerPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasureExt (-435)

#endif

/* eml21__PowerPerVolumeMeasure has binding name 'eml21__PowerPerVolumeMeasure' for type 'eml21:PowerPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerVolumeMeasure (-434)

#endif

/* eml21__PowerPerPowerMeasureExt has binding name 'eml21__PowerPerPowerMeasureExt' for type 'eml21:PowerPerPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasureExt (-433)

#endif

/* eml21__PowerPerPowerMeasure has binding name 'eml21__PowerPerPowerMeasure' for type 'eml21:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerPowerMeasure (-432)

#endif

/* eml21__PowerPerAreaMeasureExt has binding name 'eml21__PowerPerAreaMeasureExt' for type 'eml21:PowerPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasureExt (-431)

#endif

/* eml21__PowerPerAreaMeasure has binding name 'eml21__PowerPerAreaMeasure' for type 'eml21:PowerPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerPerAreaMeasure (-430)

#endif

/* eml21__PowerMeasureExt has binding name 'eml21__PowerMeasureExt' for type 'eml21:PowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasureExt (-429)

#endif

/* eml21__PowerMeasure has binding name 'eml21__PowerMeasure' for type 'eml21:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PowerMeasure (-428)

#endif

/* eml21__PotentialDifferencePerPowerDropMeasureExt has binding name 'eml21__PotentialDifferencePerPowerDropMeasureExt' for type 'eml21:PotentialDifferencePerPowerDropMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasureExt (-427)

#endif

/* eml21__PotentialDifferencePerPowerDropMeasure has binding name 'eml21__PotentialDifferencePerPowerDropMeasure' for type 'eml21:PotentialDifferencePerPowerDropMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PotentialDifferencePerPowerDropMeasure (-426)

#endif

/* eml21__PlaneAngleMeasureExt has binding name 'eml21__PlaneAngleMeasureExt' for type 'eml21:PlaneAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasureExt (-425)

#endif

/* eml21__PlaneAngleMeasure has binding name 'eml21__PlaneAngleMeasure' for type 'eml21:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PlaneAngleMeasure (-424)

#endif

/* eml21__PermittivityMeasureExt has binding name 'eml21__PermittivityMeasureExt' for type 'eml21:PermittivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasureExt (-423)

#endif

/* eml21__PermittivityMeasure has binding name 'eml21__PermittivityMeasure' for type 'eml21:PermittivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermittivityMeasure (-422)

#endif

/* eml21__PermeabilityRockMeasureExt has binding name 'eml21__PermeabilityRockMeasureExt' for type 'eml21:PermeabilityRockMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasureExt (-421)

#endif

/* eml21__PermeabilityRockMeasure has binding name 'eml21__PermeabilityRockMeasure' for type 'eml21:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityRockMeasure (-420)

#endif

/* eml21__PermeabilityLengthMeasureExt has binding name 'eml21__PermeabilityLengthMeasureExt' for type 'eml21:PermeabilityLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasureExt (-419)

#endif

/* eml21__PermeabilityLengthMeasure has binding name 'eml21__PermeabilityLengthMeasure' for type 'eml21:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__PermeabilityLengthMeasure (-418)

#endif

/* eml21__NormalizedPowerMeasureExt has binding name 'eml21__NormalizedPowerMeasureExt' for type 'eml21:NormalizedPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasureExt (-417)

#endif

/* eml21__NormalizedPowerMeasure has binding name 'eml21__NormalizedPowerMeasure' for type 'eml21:NormalizedPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__NormalizedPowerMeasure (-416)

#endif

/* eml21__MomentumMeasureExt has binding name 'eml21__MomentumMeasureExt' for type 'eml21:MomentumMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasureExt (-415)

#endif

/* eml21__MomentumMeasure has binding name 'eml21__MomentumMeasure' for type 'eml21:MomentumMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentumMeasure (-414)

#endif

/* eml21__MomentOfInertiaMeasureExt has binding name 'eml21__MomentOfInertiaMeasureExt' for type 'eml21:MomentOfInertiaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasureExt (-413)

#endif

/* eml21__MomentOfInertiaMeasure has binding name 'eml21__MomentOfInertiaMeasure' for type 'eml21:MomentOfInertiaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfInertiaMeasure (-412)

#endif

/* eml21__MomentOfForceMeasureExt has binding name 'eml21__MomentOfForceMeasureExt' for type 'eml21:MomentOfForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasureExt (-411)

#endif

/* eml21__MomentOfForceMeasure has binding name 'eml21__MomentOfForceMeasure' for type 'eml21:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MomentOfForceMeasure (-410)

#endif

/* eml21__MolecularWeightMeasureExt has binding name 'eml21__MolecularWeightMeasureExt' for type 'eml21:MolecularWeightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasureExt (-409)

#endif

/* eml21__MolecularWeightMeasure has binding name 'eml21__MolecularWeightMeasure' for type 'eml21:MolecularWeightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolecularWeightMeasure (-408)

#endif

/* eml21__MolarVolumeMeasureExt has binding name 'eml21__MolarVolumeMeasureExt' for type 'eml21:MolarVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasureExt (-407)

#endif

/* eml21__MolarVolumeMeasure has binding name 'eml21__MolarVolumeMeasure' for type 'eml21:MolarVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarVolumeMeasure (-406)

#endif

/* eml21__MolarHeatCapacityMeasureExt has binding name 'eml21__MolarHeatCapacityMeasureExt' for type 'eml21:MolarHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasureExt (-405)

#endif

/* eml21__MolarHeatCapacityMeasure has binding name 'eml21__MolarHeatCapacityMeasure' for type 'eml21:MolarHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarHeatCapacityMeasure (-404)

#endif

/* eml21__MolarEnergyMeasureExt has binding name 'eml21__MolarEnergyMeasureExt' for type 'eml21:MolarEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasureExt (-403)

#endif

/* eml21__MolarEnergyMeasure has binding name 'eml21__MolarEnergyMeasure' for type 'eml21:MolarEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MolarEnergyMeasure (-402)

#endif

/* eml21__MobilityMeasureExt has binding name 'eml21__MobilityMeasureExt' for type 'eml21:MobilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasureExt (-401)

#endif

/* eml21__MobilityMeasure has binding name 'eml21__MobilityMeasure' for type 'eml21:MobilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MobilityMeasure (-400)

#endif

/* eml21__MassPerVolumePerTemperatureMeasureExt has binding name 'eml21__MassPerVolumePerTemperatureMeasureExt' for type 'eml21:MassPerVolumePerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasureExt (-399)

#endif

/* eml21__MassPerVolumePerTemperatureMeasure has binding name 'eml21__MassPerVolumePerTemperatureMeasure' for type 'eml21:MassPerVolumePerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerTemperatureMeasure (-398)

#endif

/* eml21__MassPerVolumePerPressureMeasureExt has binding name 'eml21__MassPerVolumePerPressureMeasureExt' for type 'eml21:MassPerVolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasureExt (-397)

#endif

/* eml21__MassPerVolumePerPressureMeasure has binding name 'eml21__MassPerVolumePerPressureMeasure' for type 'eml21:MassPerVolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerPressureMeasure (-396)

#endif

/* eml21__MassPerVolumePerLengthMeasureExt has binding name 'eml21__MassPerVolumePerLengthMeasureExt' for type 'eml21:MassPerVolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasureExt (-395)

#endif

/* eml21__MassPerVolumePerLengthMeasure has binding name 'eml21__MassPerVolumePerLengthMeasure' for type 'eml21:MassPerVolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumePerLengthMeasure (-394)

#endif

/* eml21__MassPerVolumeMeasureExt has binding name 'eml21__MassPerVolumeMeasureExt' for type 'eml21:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasureExt (-393)

#endif

/* eml21__MassPerVolumeMeasure has binding name 'eml21__MassPerVolumeMeasure' for type 'eml21:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerVolumeMeasure (-392)

#endif

/* eml21__MassPerTimePerLengthMeasureExt has binding name 'eml21__MassPerTimePerLengthMeasureExt' for type 'eml21:MassPerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasureExt (-391)

#endif

/* eml21__MassPerTimePerLengthMeasure has binding name 'eml21__MassPerTimePerLengthMeasure' for type 'eml21:MassPerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerLengthMeasure (-390)

#endif

/* eml21__MassPerTimePerAreaMeasureExt has binding name 'eml21__MassPerTimePerAreaMeasureExt' for type 'eml21:MassPerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasureExt (-389)

#endif

/* eml21__MassPerTimePerAreaMeasure has binding name 'eml21__MassPerTimePerAreaMeasure' for type 'eml21:MassPerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimePerAreaMeasure (-388)

#endif

/* eml21__MassPerTimeMeasureExt has binding name 'eml21__MassPerTimeMeasureExt' for type 'eml21:MassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasureExt (-387)

#endif

/* eml21__MassPerTimeMeasure has binding name 'eml21__MassPerTimeMeasure' for type 'eml21:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerTimeMeasure (-386)

#endif

/* eml21__MassPerMassMeasureExt has binding name 'eml21__MassPerMassMeasureExt' for type 'eml21:MassPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasureExt (-385)

#endif

/* eml21__MassPerMassMeasure has binding name 'eml21__MassPerMassMeasure' for type 'eml21:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerMassMeasure (-384)

#endif

/* eml21__MassPerLengthMeasureExt has binding name 'eml21__MassPerLengthMeasureExt' for type 'eml21:MassPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasureExt (-383)

#endif

/* eml21__MassPerLengthMeasure has binding name 'eml21__MassPerLengthMeasure' for type 'eml21:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerLengthMeasure (-382)

#endif

/* eml21__MassPerEnergyMeasureExt has binding name 'eml21__MassPerEnergyMeasureExt' for type 'eml21:MassPerEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasureExt (-381)

#endif

/* eml21__MassPerEnergyMeasure has binding name 'eml21__MassPerEnergyMeasure' for type 'eml21:MassPerEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerEnergyMeasure (-380)

#endif

/* eml21__MassPerAreaMeasureExt has binding name 'eml21__MassPerAreaMeasureExt' for type 'eml21:MassPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasureExt (-379)

#endif

/* eml21__MassPerAreaMeasure has binding name 'eml21__MassPerAreaMeasure' for type 'eml21:MassPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassPerAreaMeasure (-378)

#endif

/* eml21__MassMeasureExt has binding name 'eml21__MassMeasureExt' for type 'eml21:MassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasureExt (-377)

#endif

/* eml21__MassMeasure has binding name 'eml21__MassMeasure' for type 'eml21:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassMeasure (-376)

#endif

/* eml21__MassLengthMeasureExt has binding name 'eml21__MassLengthMeasureExt' for type 'eml21:MassLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasureExt (-375)

#endif

/* eml21__MassLengthMeasure has binding name 'eml21__MassLengthMeasure' for type 'eml21:MassLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MassLengthMeasure (-374)

#endif

/* eml21__MagneticVectorPotentialMeasureExt has binding name 'eml21__MagneticVectorPotentialMeasureExt' for type 'eml21:MagneticVectorPotentialMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasureExt (-373)

#endif

/* eml21__MagneticVectorPotentialMeasure has binding name 'eml21__MagneticVectorPotentialMeasure' for type 'eml21:MagneticVectorPotentialMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticVectorPotentialMeasure (-372)

#endif

/* eml21__MagneticPermeabilityMeasureExt has binding name 'eml21__MagneticPermeabilityMeasureExt' for type 'eml21:MagneticPermeabilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasureExt (-371)

#endif

/* eml21__MagneticPermeabilityMeasure has binding name 'eml21__MagneticPermeabilityMeasure' for type 'eml21:MagneticPermeabilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticPermeabilityMeasure (-370)

#endif

/* eml21__MagneticFluxMeasureExt has binding name 'eml21__MagneticFluxMeasureExt' for type 'eml21:MagneticFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasureExt (-369)

#endif

/* eml21__MagneticFluxMeasure has binding name 'eml21__MagneticFluxMeasure' for type 'eml21:MagneticFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxMeasure (-368)

#endif

/* eml21__MagneticFluxDensityPerLengthMeasureExt has binding name 'eml21__MagneticFluxDensityPerLengthMeasureExt' for type 'eml21:MagneticFluxDensityPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasureExt (-367)

#endif

/* eml21__MagneticFluxDensityPerLengthMeasure has binding name 'eml21__MagneticFluxDensityPerLengthMeasure' for type 'eml21:MagneticFluxDensityPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityPerLengthMeasure (-366)

#endif

/* eml21__MagneticFluxDensityMeasureExt has binding name 'eml21__MagneticFluxDensityMeasureExt' for type 'eml21:MagneticFluxDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasureExt (-365)

#endif

/* eml21__MagneticFluxDensityMeasure has binding name 'eml21__MagneticFluxDensityMeasure' for type 'eml21:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFluxDensityMeasure (-364)

#endif

/* eml21__MagneticFieldStrengthMeasureExt has binding name 'eml21__MagneticFieldStrengthMeasureExt' for type 'eml21:MagneticFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasureExt (-363)

#endif

/* eml21__MagneticFieldStrengthMeasure has binding name 'eml21__MagneticFieldStrengthMeasure' for type 'eml21:MagneticFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticFieldStrengthMeasure (-362)

#endif

/* eml21__MagneticDipoleMomentMeasureExt has binding name 'eml21__MagneticDipoleMomentMeasureExt' for type 'eml21:MagneticDipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasureExt (-361)

#endif

/* eml21__MagneticDipoleMomentMeasure has binding name 'eml21__MagneticDipoleMomentMeasure' for type 'eml21:MagneticDipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__MagneticDipoleMomentMeasure (-360)

#endif

/* eml21__LuminousIntensityMeasureExt has binding name 'eml21__LuminousIntensityMeasureExt' for type 'eml21:LuminousIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasureExt (-359)

#endif

/* eml21__LuminousIntensityMeasure has binding name 'eml21__LuminousIntensityMeasure' for type 'eml21:LuminousIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousIntensityMeasure (-358)

#endif

/* eml21__LuminousFluxMeasureExt has binding name 'eml21__LuminousFluxMeasureExt' for type 'eml21:LuminousFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasureExt (-357)

#endif

/* eml21__LuminousFluxMeasure has binding name 'eml21__LuminousFluxMeasure' for type 'eml21:LuminousFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousFluxMeasure (-356)

#endif

/* eml21__LuminousEfficacyMeasureExt has binding name 'eml21__LuminousEfficacyMeasureExt' for type 'eml21:LuminousEfficacyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasureExt (-355)

#endif

/* eml21__LuminousEfficacyMeasure has binding name 'eml21__LuminousEfficacyMeasure' for type 'eml21:LuminousEfficacyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminousEfficacyMeasure (-354)

#endif

/* eml21__LuminanceMeasureExt has binding name 'eml21__LuminanceMeasureExt' for type 'eml21:LuminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasureExt (-353)

#endif

/* eml21__LuminanceMeasure has binding name 'eml21__LuminanceMeasure' for type 'eml21:LuminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LuminanceMeasure (-352)

#endif

/* eml21__LogarithmicPowerRatioPerLengthMeasureExt has binding name 'eml21__LogarithmicPowerRatioPerLengthMeasureExt' for type 'eml21:LogarithmicPowerRatioPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasureExt (-351)

#endif

/* eml21__LogarithmicPowerRatioPerLengthMeasure has binding name 'eml21__LogarithmicPowerRatioPerLengthMeasure' for type 'eml21:LogarithmicPowerRatioPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioPerLengthMeasure (-350)

#endif

/* eml21__LogarithmicPowerRatioMeasureExt has binding name 'eml21__LogarithmicPowerRatioMeasureExt' for type 'eml21:LogarithmicPowerRatioMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasureExt (-349)

#endif

/* eml21__LogarithmicPowerRatioMeasure has binding name 'eml21__LogarithmicPowerRatioMeasure' for type 'eml21:LogarithmicPowerRatioMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LogarithmicPowerRatioMeasure (-348)

#endif

/* eml21__LinearThermalExpansionMeasureExt has binding name 'eml21__LinearThermalExpansionMeasureExt' for type 'eml21:LinearThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasureExt (-347)

#endif

/* eml21__LinearThermalExpansionMeasure has binding name 'eml21__LinearThermalExpansionMeasure' for type 'eml21:LinearThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearThermalExpansionMeasure (-346)

#endif

/* eml21__LinearAccelerationMeasureExt has binding name 'eml21__LinearAccelerationMeasureExt' for type 'eml21:LinearAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasureExt (-345)

#endif

/* eml21__LinearAccelerationMeasure has binding name 'eml21__LinearAccelerationMeasure' for type 'eml21:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LinearAccelerationMeasure (-344)

#endif

/* eml21__LightExposureMeasureExt has binding name 'eml21__LightExposureMeasureExt' for type 'eml21:LightExposureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasureExt (-343)

#endif

/* eml21__LightExposureMeasure has binding name 'eml21__LightExposureMeasure' for type 'eml21:LightExposureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LightExposureMeasure (-342)

#endif

/* eml21__LengthPerVolumeMeasureExt has binding name 'eml21__LengthPerVolumeMeasureExt' for type 'eml21:LengthPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasureExt (-341)

#endif

/* eml21__LengthPerVolumeMeasure has binding name 'eml21__LengthPerVolumeMeasure' for type 'eml21:LengthPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerVolumeMeasure (-340)

#endif

/* eml21__LengthPerTimeMeasureExt has binding name 'eml21__LengthPerTimeMeasureExt' for type 'eml21:LengthPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasureExt (-339)

#endif

/* eml21__LengthPerTimeMeasure has binding name 'eml21__LengthPerTimeMeasure' for type 'eml21:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTimeMeasure (-338)

#endif

/* eml21__LengthPerTemperatureMeasureExt has binding name 'eml21__LengthPerTemperatureMeasureExt' for type 'eml21:LengthPerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasureExt (-337)

#endif

/* eml21__LengthPerTemperatureMeasure has binding name 'eml21__LengthPerTemperatureMeasure' for type 'eml21:LengthPerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerTemperatureMeasure (-336)

#endif

/* eml21__LengthPerPressureMeasureExt has binding name 'eml21__LengthPerPressureMeasureExt' for type 'eml21:LengthPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasureExt (-335)

#endif

/* eml21__LengthPerPressureMeasure has binding name 'eml21__LengthPerPressureMeasure' for type 'eml21:LengthPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerPressureMeasure (-334)

#endif

/* eml21__LengthPerMassMeasureExt has binding name 'eml21__LengthPerMassMeasureExt' for type 'eml21:LengthPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasureExt (-333)

#endif

/* eml21__LengthPerMassMeasure has binding name 'eml21__LengthPerMassMeasure' for type 'eml21:LengthPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerMassMeasure (-332)

#endif

/* eml21__LengthPerLengthMeasureExt has binding name 'eml21__LengthPerLengthMeasureExt' for type 'eml21:LengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasureExt (-331)

#endif

/* eml21__LengthPerLengthMeasure has binding name 'eml21__LengthPerLengthMeasure' for type 'eml21:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthPerLengthMeasure (-330)

#endif

/* eml21__LengthMeasureExt has binding name 'eml21__LengthMeasureExt' for type 'eml21:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasureExt (-329)

#endif

/* eml21__LengthMeasure has binding name 'eml21__LengthMeasure' for type 'eml21:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__LengthMeasure (-328)

#endif

/* eml21__KinematicViscosityMeasureExt has binding name 'eml21__KinematicViscosityMeasureExt' for type 'eml21:KinematicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasureExt (-327)

#endif

/* eml21__KinematicViscosityMeasure has binding name 'eml21__KinematicViscosityMeasure' for type 'eml21:KinematicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__KinematicViscosityMeasure (-326)

#endif

/* eml21__IsothermalCompressibilityMeasureExt has binding name 'eml21__IsothermalCompressibilityMeasureExt' for type 'eml21:IsothermalCompressibilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasureExt (-325)

#endif

/* eml21__IsothermalCompressibilityMeasure has binding name 'eml21__IsothermalCompressibilityMeasure' for type 'eml21:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IsothermalCompressibilityMeasure (-324)

#endif

/* eml21__InductanceMeasureExt has binding name 'eml21__InductanceMeasureExt' for type 'eml21:InductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasureExt (-323)

#endif

/* eml21__InductanceMeasure has binding name 'eml21__InductanceMeasure' for type 'eml21:InductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__InductanceMeasure (-322)

#endif

/* eml21__IlluminanceMeasureExt has binding name 'eml21__IlluminanceMeasureExt' for type 'eml21:IlluminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasureExt (-321)

#endif

/* eml21__IlluminanceMeasure has binding name 'eml21__IlluminanceMeasure' for type 'eml21:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__IlluminanceMeasure (-320)

#endif

/* eml21__HeatTransferCoefficientMeasureExt has binding name 'eml21__HeatTransferCoefficientMeasureExt' for type 'eml21:HeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasureExt (-319)

#endif

/* eml21__HeatTransferCoefficientMeasure has binding name 'eml21__HeatTransferCoefficientMeasure' for type 'eml21:HeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatTransferCoefficientMeasure (-318)

#endif

/* eml21__HeatFlowRateMeasureExt has binding name 'eml21__HeatFlowRateMeasureExt' for type 'eml21:HeatFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasureExt (-317)

#endif

/* eml21__HeatFlowRateMeasure has binding name 'eml21__HeatFlowRateMeasure' for type 'eml21:HeatFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatFlowRateMeasure (-316)

#endif

/* eml21__HeatCapacityMeasureExt has binding name 'eml21__HeatCapacityMeasureExt' for type 'eml21:HeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasureExt (-315)

#endif

/* eml21__HeatCapacityMeasure has binding name 'eml21__HeatCapacityMeasure' for type 'eml21:HeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__HeatCapacityMeasure (-314)

#endif

/* eml21__FrequencyMeasureExt has binding name 'eml21__FrequencyMeasureExt' for type 'eml21:FrequencyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasureExt (-313)

#endif

/* eml21__FrequencyMeasure has binding name 'eml21__FrequencyMeasure' for type 'eml21:FrequencyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyMeasure (-312)

#endif

/* eml21__FrequencyIntervalMeasureExt has binding name 'eml21__FrequencyIntervalMeasureExt' for type 'eml21:FrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasureExt (-311)

#endif

/* eml21__FrequencyIntervalMeasure has binding name 'eml21__FrequencyIntervalMeasure' for type 'eml21:FrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__FrequencyIntervalMeasure (-310)

#endif

/* eml21__ForcePerVolumeMeasureExt has binding name 'eml21__ForcePerVolumeMeasureExt' for type 'eml21:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasureExt (-309)

#endif

/* eml21__ForcePerVolumeMeasure has binding name 'eml21__ForcePerVolumeMeasure' for type 'eml21:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerVolumeMeasure (-308)

#endif

/* eml21__ForcePerLengthMeasureExt has binding name 'eml21__ForcePerLengthMeasureExt' for type 'eml21:ForcePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasureExt (-307)

#endif

/* eml21__ForcePerLengthMeasure has binding name 'eml21__ForcePerLengthMeasure' for type 'eml21:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerLengthMeasure (-306)

#endif

/* eml21__ForcePerForceMeasureExt has binding name 'eml21__ForcePerForceMeasureExt' for type 'eml21:ForcePerForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasureExt (-305)

#endif

/* eml21__ForcePerForceMeasure has binding name 'eml21__ForcePerForceMeasure' for type 'eml21:ForcePerForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForcePerForceMeasure (-304)

#endif

/* eml21__ForceMeasureExt has binding name 'eml21__ForceMeasureExt' for type 'eml21:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasureExt (-303)

#endif

/* eml21__ForceMeasure has binding name 'eml21__ForceMeasure' for type 'eml21:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceMeasure (-302)

#endif

/* eml21__ForceLengthPerLengthMeasureExt has binding name 'eml21__ForceLengthPerLengthMeasureExt' for type 'eml21:ForceLengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasureExt (-301)

#endif

/* eml21__ForceLengthPerLengthMeasure has binding name 'eml21__ForceLengthPerLengthMeasure' for type 'eml21:ForceLengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceLengthPerLengthMeasure (-300)

#endif

/* eml21__ForceAreaMeasureExt has binding name 'eml21__ForceAreaMeasureExt' for type 'eml21:ForceAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasureExt (-299)

#endif

/* eml21__ForceAreaMeasure has binding name 'eml21__ForceAreaMeasure' for type 'eml21:ForceAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ForceAreaMeasure (-298)

#endif

/* eml21__EnergyPerVolumeMeasureExt has binding name 'eml21__EnergyPerVolumeMeasureExt' for type 'eml21:EnergyPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasureExt (-297)

#endif

/* eml21__EnergyPerVolumeMeasure has binding name 'eml21__EnergyPerVolumeMeasure' for type 'eml21:EnergyPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerVolumeMeasure (-296)

#endif

/* eml21__EnergyPerMassPerTimeMeasureExt has binding name 'eml21__EnergyPerMassPerTimeMeasureExt' for type 'eml21:EnergyPerMassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasureExt (-295)

#endif

/* eml21__EnergyPerMassPerTimeMeasure has binding name 'eml21__EnergyPerMassPerTimeMeasure' for type 'eml21:EnergyPerMassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassPerTimeMeasure (-294)

#endif

/* eml21__EnergyPerMassMeasureExt has binding name 'eml21__EnergyPerMassMeasureExt' for type 'eml21:EnergyPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasureExt (-293)

#endif

/* eml21__EnergyPerMassMeasure has binding name 'eml21__EnergyPerMassMeasure' for type 'eml21:EnergyPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerMassMeasure (-292)

#endif

/* eml21__EnergyPerLengthMeasureExt has binding name 'eml21__EnergyPerLengthMeasureExt' for type 'eml21:EnergyPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasureExt (-291)

#endif

/* eml21__EnergyPerLengthMeasure has binding name 'eml21__EnergyPerLengthMeasure' for type 'eml21:EnergyPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerLengthMeasure (-290)

#endif

/* eml21__EnergyPerAreaMeasureExt has binding name 'eml21__EnergyPerAreaMeasureExt' for type 'eml21:EnergyPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasureExt (-289)

#endif

/* eml21__EnergyPerAreaMeasure has binding name 'eml21__EnergyPerAreaMeasure' for type 'eml21:EnergyPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyPerAreaMeasure (-288)

#endif

/* eml21__EnergyMeasureExt has binding name 'eml21__EnergyMeasureExt' for type 'eml21:EnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasureExt (-287)

#endif

/* eml21__EnergyMeasure has binding name 'eml21__EnergyMeasure' for type 'eml21:EnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyMeasure (-286)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt' for type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasureExt (-285)

#endif

/* eml21__EnergyLengthPerTimeAreaTemperatureMeasure has binding name 'eml21__EnergyLengthPerTimeAreaTemperatureMeasure' for type 'eml21:EnergyLengthPerTimeAreaTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerTimeAreaTemperatureMeasure (-284)

#endif

/* eml21__EnergyLengthPerAreaMeasureExt has binding name 'eml21__EnergyLengthPerAreaMeasureExt' for type 'eml21:EnergyLengthPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasureExt (-283)

#endif

/* eml21__EnergyLengthPerAreaMeasure has binding name 'eml21__EnergyLengthPerAreaMeasure' for type 'eml21:EnergyLengthPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__EnergyLengthPerAreaMeasure (-282)

#endif

/* eml21__ElectromagneticMomentMeasureExt has binding name 'eml21__ElectromagneticMomentMeasureExt' for type 'eml21:ElectromagneticMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasureExt (-281)

#endif

/* eml21__ElectromagneticMomentMeasure has binding name 'eml21__ElectromagneticMomentMeasure' for type 'eml21:ElectromagneticMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectromagneticMomentMeasure (-280)

#endif

/* eml21__ElectricResistancePerLengthMeasureExt has binding name 'eml21__ElectricResistancePerLengthMeasureExt' for type 'eml21:ElectricResistancePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasureExt (-279)

#endif

/* eml21__ElectricResistancePerLengthMeasure has binding name 'eml21__ElectricResistancePerLengthMeasure' for type 'eml21:ElectricResistancePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistancePerLengthMeasure (-278)

#endif

/* eml21__ElectricResistanceMeasureExt has binding name 'eml21__ElectricResistanceMeasureExt' for type 'eml21:ElectricResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasureExt (-277)

#endif

/* eml21__ElectricResistanceMeasure has binding name 'eml21__ElectricResistanceMeasure' for type 'eml21:ElectricResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricResistanceMeasure (-276)

#endif

/* eml21__ElectricPotentialDifferenceMeasureExt has binding name 'eml21__ElectricPotentialDifferenceMeasureExt' for type 'eml21:ElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasureExt (-275)

#endif

/* eml21__ElectricPotentialDifferenceMeasure has binding name 'eml21__ElectricPotentialDifferenceMeasure' for type 'eml21:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricPotentialDifferenceMeasure (-274)

#endif

/* eml21__ElectricFieldStrengthMeasureExt has binding name 'eml21__ElectricFieldStrengthMeasureExt' for type 'eml21:ElectricFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasureExt (-273)

#endif

/* eml21__ElectricFieldStrengthMeasure has binding name 'eml21__ElectricFieldStrengthMeasure' for type 'eml21:ElectricFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricFieldStrengthMeasure (-272)

#endif

/* eml21__ElectricCurrentMeasureExt has binding name 'eml21__ElectricCurrentMeasureExt' for type 'eml21:ElectricCurrentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasureExt (-271)

#endif

/* eml21__ElectricCurrentMeasure has binding name 'eml21__ElectricCurrentMeasure' for type 'eml21:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentMeasure (-270)

#endif

/* eml21__ElectricCurrentDensityMeasureExt has binding name 'eml21__ElectricCurrentDensityMeasureExt' for type 'eml21:ElectricCurrentDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasureExt (-269)

#endif

/* eml21__ElectricCurrentDensityMeasure has binding name 'eml21__ElectricCurrentDensityMeasure' for type 'eml21:ElectricCurrentDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricCurrentDensityMeasure (-268)

#endif

/* eml21__ElectricConductivityMeasureExt has binding name 'eml21__ElectricConductivityMeasureExt' for type 'eml21:ElectricConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasureExt (-267)

#endif

/* eml21__ElectricConductivityMeasure has binding name 'eml21__ElectricConductivityMeasure' for type 'eml21:ElectricConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductivityMeasure (-266)

#endif

/* eml21__ElectricConductanceMeasureExt has binding name 'eml21__ElectricConductanceMeasureExt' for type 'eml21:ElectricConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasureExt (-265)

#endif

/* eml21__ElectricConductanceMeasure has binding name 'eml21__ElectricConductanceMeasure' for type 'eml21:ElectricConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricConductanceMeasure (-264)

#endif

/* eml21__ElectricChargePerVolumeMeasureExt has binding name 'eml21__ElectricChargePerVolumeMeasureExt' for type 'eml21:ElectricChargePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasureExt (-263)

#endif

/* eml21__ElectricChargePerVolumeMeasure has binding name 'eml21__ElectricChargePerVolumeMeasure' for type 'eml21:ElectricChargePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerVolumeMeasure (-262)

#endif

/* eml21__ElectricChargePerMassMeasureExt has binding name 'eml21__ElectricChargePerMassMeasureExt' for type 'eml21:ElectricChargePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasureExt (-261)

#endif

/* eml21__ElectricChargePerMassMeasure has binding name 'eml21__ElectricChargePerMassMeasure' for type 'eml21:ElectricChargePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerMassMeasure (-260)

#endif

/* eml21__ElectricChargePerAreaMeasureExt has binding name 'eml21__ElectricChargePerAreaMeasureExt' for type 'eml21:ElectricChargePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasureExt (-259)

#endif

/* eml21__ElectricChargePerAreaMeasure has binding name 'eml21__ElectricChargePerAreaMeasure' for type 'eml21:ElectricChargePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargePerAreaMeasure (-258)

#endif

/* eml21__ElectricChargeMeasureExt has binding name 'eml21__ElectricChargeMeasureExt' for type 'eml21:ElectricChargeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasureExt (-257)

#endif

/* eml21__ElectricChargeMeasure has binding name 'eml21__ElectricChargeMeasure' for type 'eml21:ElectricChargeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricChargeMeasure (-256)

#endif

/* eml21__ElectricalResistivityMeasureExt has binding name 'eml21__ElectricalResistivityMeasureExt' for type 'eml21:ElectricalResistivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasureExt (-255)

#endif

/* eml21__ElectricalResistivityMeasure has binding name 'eml21__ElectricalResistivityMeasure' for type 'eml21:ElectricalResistivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ElectricalResistivityMeasure (-254)

#endif

/* eml21__DynamicViscosityMeasureExt has binding name 'eml21__DynamicViscosityMeasureExt' for type 'eml21:DynamicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasureExt (-253)

#endif

/* eml21__DynamicViscosityMeasure has binding name 'eml21__DynamicViscosityMeasure' for type 'eml21:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DynamicViscosityMeasure (-252)

#endif

/* eml21__DoseEquivalentMeasureExt has binding name 'eml21__DoseEquivalentMeasureExt' for type 'eml21:DoseEquivalentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasureExt (-251)

#endif

/* eml21__DoseEquivalentMeasure has binding name 'eml21__DoseEquivalentMeasure' for type 'eml21:DoseEquivalentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoseEquivalentMeasure (-250)

#endif

/* eml21__DipoleMomentMeasureExt has binding name 'eml21__DipoleMomentMeasureExt' for type 'eml21:DipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasureExt (-249)

#endif

/* eml21__DipoleMomentMeasure has binding name 'eml21__DipoleMomentMeasure' for type 'eml21:DipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DipoleMomentMeasure (-248)

#endif

/* eml21__DimensionlessMeasureExt has binding name 'eml21__DimensionlessMeasureExt' for type 'eml21:DimensionlessMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasureExt (-247)

#endif

/* eml21__DimensionlessMeasure has binding name 'eml21__DimensionlessMeasure' for type 'eml21:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DimensionlessMeasure (-246)

#endif

/* eml21__DigitalStorageMeasureExt has binding name 'eml21__DigitalStorageMeasureExt' for type 'eml21:DigitalStorageMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasureExt (-245)

#endif

/* eml21__DigitalStorageMeasure has binding name 'eml21__DigitalStorageMeasure' for type 'eml21:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DigitalStorageMeasure (-244)

#endif

/* eml21__DiffusiveTimeOfFlightMeasureExt has binding name 'eml21__DiffusiveTimeOfFlightMeasureExt' for type 'eml21:DiffusiveTimeOfFlightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasureExt (-243)

#endif

/* eml21__DiffusiveTimeOfFlightMeasure has binding name 'eml21__DiffusiveTimeOfFlightMeasure' for type 'eml21:DiffusiveTimeOfFlightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusiveTimeOfFlightMeasure (-242)

#endif

/* eml21__DiffusionCoefficientMeasureExt has binding name 'eml21__DiffusionCoefficientMeasureExt' for type 'eml21:DiffusionCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasureExt (-241)

#endif

/* eml21__DiffusionCoefficientMeasure has binding name 'eml21__DiffusionCoefficientMeasure' for type 'eml21:DiffusionCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DiffusionCoefficientMeasure (-240)

#endif

/* eml21__DataTransferSpeedMeasureExt has binding name 'eml21__DataTransferSpeedMeasureExt' for type 'eml21:DataTransferSpeedMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasureExt (-239)

#endif

/* eml21__DataTransferSpeedMeasure has binding name 'eml21__DataTransferSpeedMeasure' for type 'eml21:DataTransferSpeedMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__DataTransferSpeedMeasure (-238)

#endif

/* eml21__CationExchangeCapacityMeasureExt has binding name 'eml21__CationExchangeCapacityMeasureExt' for type 'eml21:CationExchangeCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasureExt (-237)

#endif

/* eml21__CationExchangeCapacityMeasure has binding name 'eml21__CationExchangeCapacityMeasure' for type 'eml21:CationExchangeCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CationExchangeCapacityMeasure (-236)

#endif

/* eml21__CapacitanceMeasureExt has binding name 'eml21__CapacitanceMeasureExt' for type 'eml21:CapacitanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasureExt (-235)

#endif

/* eml21__CapacitanceMeasure has binding name 'eml21__CapacitanceMeasure' for type 'eml21:CapacitanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__CapacitanceMeasure (-234)

#endif

/* eml21__AttenuationPerFrequencyIntervalMeasureExt has binding name 'eml21__AttenuationPerFrequencyIntervalMeasureExt' for type 'eml21:AttenuationPerFrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasureExt (-233)

#endif

/* eml21__AttenuationPerFrequencyIntervalMeasure has binding name 'eml21__AttenuationPerFrequencyIntervalMeasure' for type 'eml21:AttenuationPerFrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AttenuationPerFrequencyIntervalMeasure (-232)

#endif

/* eml21__AreaPerVolumeMeasureExt has binding name 'eml21__AreaPerVolumeMeasureExt' for type 'eml21:AreaPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasureExt (-231)

#endif

/* eml21__AreaPerVolumeMeasure has binding name 'eml21__AreaPerVolumeMeasure' for type 'eml21:AreaPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerVolumeMeasure (-230)

#endif

/* eml21__AreaPerTimeMeasureExt has binding name 'eml21__AreaPerTimeMeasureExt' for type 'eml21:AreaPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasureExt (-229)

#endif

/* eml21__AreaPerTimeMeasure has binding name 'eml21__AreaPerTimeMeasure' for type 'eml21:AreaPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerTimeMeasure (-228)

#endif

/* eml21__AreaPerMassMeasureExt has binding name 'eml21__AreaPerMassMeasureExt' for type 'eml21:AreaPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasureExt (-227)

#endif

/* eml21__AreaPerMassMeasure has binding name 'eml21__AreaPerMassMeasure' for type 'eml21:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerMassMeasure (-226)

#endif

/* eml21__AreaPerCountMeasureExt has binding name 'eml21__AreaPerCountMeasureExt' for type 'eml21:AreaPerCountMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasureExt (-225)

#endif

/* eml21__AreaPerCountMeasure has binding name 'eml21__AreaPerCountMeasure' for type 'eml21:AreaPerCountMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerCountMeasure (-224)

#endif

/* eml21__AreaPerAreaMeasureExt has binding name 'eml21__AreaPerAreaMeasureExt' for type 'eml21:AreaPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasureExt (-223)

#endif

/* eml21__AreaPerAreaMeasure has binding name 'eml21__AreaPerAreaMeasure' for type 'eml21:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAreaMeasure (-222)

#endif

/* eml21__AreaPerAmountOfSubstanceMeasureExt has binding name 'eml21__AreaPerAmountOfSubstanceMeasureExt' for type 'eml21:AreaPerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasureExt (-221)

#endif

/* eml21__AreaPerAmountOfSubstanceMeasure has binding name 'eml21__AreaPerAmountOfSubstanceMeasure' for type 'eml21:AreaPerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaPerAmountOfSubstanceMeasure (-220)

#endif

/* eml21__AreaMeasureExt has binding name 'eml21__AreaMeasureExt' for type 'eml21:AreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasureExt (-219)

#endif

/* eml21__AreaMeasure has binding name 'eml21__AreaMeasure' for type 'eml21:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AreaMeasure (-218)

#endif

/* eml21__APINeutronMeasureExt has binding name 'eml21__APINeutronMeasureExt' for type 'eml21:APINeutronMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasureExt (-217)

#endif

/* eml21__APINeutronMeasure has binding name 'eml21__APINeutronMeasure' for type 'eml21:APINeutronMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APINeutronMeasure (-216)

#endif

/* eml21__APIGravityMeasureExt has binding name 'eml21__APIGravityMeasureExt' for type 'eml21:APIGravityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasureExt (-215)

#endif

/* eml21__APIGravityMeasure has binding name 'eml21__APIGravityMeasure' for type 'eml21:APIGravityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGravityMeasure (-214)

#endif

/* eml21__APIGammaRayMeasureExt has binding name 'eml21__APIGammaRayMeasureExt' for type 'eml21:APIGammaRayMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasureExt (-213)

#endif

/* eml21__APIGammaRayMeasure has binding name 'eml21__APIGammaRayMeasure' for type 'eml21:APIGammaRayMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__APIGammaRayMeasure (-212)

#endif

/* eml21__AngularVelocityMeasureExt has binding name 'eml21__AngularVelocityMeasureExt' for type 'eml21:AngularVelocityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasureExt (-211)

#endif

/* eml21__AngularVelocityMeasure has binding name 'eml21__AngularVelocityMeasure' for type 'eml21:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularVelocityMeasure (-210)

#endif

/* eml21__AngularAccelerationMeasureExt has binding name 'eml21__AngularAccelerationMeasureExt' for type 'eml21:AngularAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasureExt (-209)

#endif

/* eml21__AngularAccelerationMeasure has binding name 'eml21__AngularAccelerationMeasure' for type 'eml21:AngularAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AngularAccelerationMeasure (-208)

#endif

/* eml21__AnglePerVolumeMeasureExt has binding name 'eml21__AnglePerVolumeMeasureExt' for type 'eml21:AnglePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasureExt (-207)

#endif

/* eml21__AnglePerVolumeMeasure has binding name 'eml21__AnglePerVolumeMeasure' for type 'eml21:AnglePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerVolumeMeasure (-206)

#endif

/* eml21__AnglePerLengthMeasureExt has binding name 'eml21__AnglePerLengthMeasureExt' for type 'eml21:AnglePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasureExt (-205)

#endif

/* eml21__AnglePerLengthMeasure has binding name 'eml21__AnglePerLengthMeasure' for type 'eml21:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AnglePerLengthMeasure (-204)

#endif

/* eml21__AmountOfSubstancePerVolumeMeasureExt has binding name 'eml21__AmountOfSubstancePerVolumeMeasureExt' for type 'eml21:AmountOfSubstancePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasureExt (-203)

#endif

/* eml21__AmountOfSubstancePerVolumeMeasure has binding name 'eml21__AmountOfSubstancePerVolumeMeasure' for type 'eml21:AmountOfSubstancePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerVolumeMeasure (-202)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaMeasureExt has binding name 'eml21__AmountOfSubstancePerTimePerAreaMeasureExt' for type 'eml21:AmountOfSubstancePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasureExt (-201)

#endif

/* eml21__AmountOfSubstancePerTimePerAreaMeasure has binding name 'eml21__AmountOfSubstancePerTimePerAreaMeasure' for type 'eml21:AmountOfSubstancePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimePerAreaMeasure (-200)

#endif

/* eml21__AmountOfSubstancePerTimeMeasureExt has binding name 'eml21__AmountOfSubstancePerTimeMeasureExt' for type 'eml21:AmountOfSubstancePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasureExt (-199)

#endif

/* eml21__AmountOfSubstancePerTimeMeasure has binding name 'eml21__AmountOfSubstancePerTimeMeasure' for type 'eml21:AmountOfSubstancePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerTimeMeasure (-198)

#endif

/* eml21__AmountOfSubstancePerAreaMeasureExt has binding name 'eml21__AmountOfSubstancePerAreaMeasureExt' for type 'eml21:AmountOfSubstancePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasureExt (-197)

#endif

/* eml21__AmountOfSubstancePerAreaMeasure has binding name 'eml21__AmountOfSubstancePerAreaMeasure' for type 'eml21:AmountOfSubstancePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAreaMeasure (-196)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-195)

#endif

/* eml21__AmountOfSubstancePerAmountOfSubstanceMeasure has binding name 'eml21__AmountOfSubstancePerAmountOfSubstanceMeasure' for type 'eml21:AmountOfSubstancePerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstancePerAmountOfSubstanceMeasure (-194)

#endif

/* eml21__AmountOfSubstanceMeasureExt has binding name 'eml21__AmountOfSubstanceMeasureExt' for type 'eml21:AmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasureExt (-193)

#endif

/* eml21__AmountOfSubstanceMeasure has binding name 'eml21__AmountOfSubstanceMeasure' for type 'eml21:AmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AmountOfSubstanceMeasure (-192)

#endif

/* eml21__ActivityOfRadioactivityMeasureExt has binding name 'eml21__ActivityOfRadioactivityMeasureExt' for type 'eml21:ActivityOfRadioactivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasureExt (-191)

#endif

/* eml21__ActivityOfRadioactivityMeasure has binding name 'eml21__ActivityOfRadioactivityMeasure' for type 'eml21:ActivityOfRadioactivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__ActivityOfRadioactivityMeasure (-190)

#endif

/* eml21__AbsorbedDoseMeasureExt has binding name 'eml21__AbsorbedDoseMeasureExt' for type 'eml21:AbsorbedDoseMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasureExt (-189)

#endif

/* eml21__AbsorbedDoseMeasure has binding name 'eml21__AbsorbedDoseMeasure' for type 'eml21:AbsorbedDoseMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbsorbedDoseMeasure (-188)

#endif

/* eml21__TvdInterval has binding name 'eml21__TvdInterval' for type 'eml21:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__TvdInterval (-187)

#endif

/* eml21__StringMeasure has binding name 'eml21__StringMeasure' for type 'eml21:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringMeasure (-186)

#endif

/* eml21__StringExternalArray has binding name 'eml21__StringExternalArray' for type 'eml21:StringExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringExternalArray (-185)

#endif

/* eml21__StringConstantArray has binding name 'eml21__StringConstantArray' for type 'eml21:StringConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__StringConstantArray (-184)

#endif

/* eml21__MdInterval has binding name 'eml21__MdInterval' for type 'eml21:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_eml21__MdInterval (-183)

#endif

/* eml21__JaggedArray has binding name 'eml21__JaggedArray' for type 'eml21:JaggedArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__JaggedArray (-182)

#endif

/* eml21__IntegerRangeArray has binding name 'eml21__IntegerRangeArray' for type 'eml21:IntegerRangeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerRangeArray (-181)

#endif

/* eml21__IntegerLatticeArray has binding name 'eml21__IntegerLatticeArray' for type 'eml21:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerLatticeArray (-180)

#endif

/* eml21__IntegerExternalArray has binding name 'eml21__IntegerExternalArray' for type 'eml21:IntegerExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerExternalArray (-179)

#endif

/* eml21__IntegerConstantArray has binding name 'eml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerConstantArray (-178)

#endif

/* eml21__IntegerArrayFromBooleanMaskArray has binding name 'eml21__IntegerArrayFromBooleanMaskArray' for type 'eml21:IntegerArrayFromBooleanMaskArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__IntegerArrayFromBooleanMaskArray (-177)

#endif

/* eml21__GenericMeasure has binding name 'eml21__GenericMeasure' for type 'eml21:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_eml21__GenericMeasure (-176)

#endif

/* eml21__FloatingPointLatticeArray has binding name 'eml21__FloatingPointLatticeArray' for type 'eml21:FloatingPointLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointLatticeArray (-175)

#endif

/* eml21__FloatingPointExternalArray has binding name 'eml21__FloatingPointExternalArray' for type 'eml21:FloatingPointExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointExternalArray (-174)

#endif

/* eml21__FloatingPointConstantArray has binding name 'eml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatingPointConstantArray (-173)

#endif

/* eml21__FloatExternalArray has binding name 'eml21__FloatExternalArray' for type 'eml21:FloatExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__FloatExternalArray (-172)

#endif

/* eml21__DoubleExternalArray has binding name 'eml21__DoubleExternalArray' for type 'eml21:DoubleExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__DoubleExternalArray (-171)

#endif

/* eml21__BooleanExternalArray has binding name 'eml21__BooleanExternalArray' for type 'eml21:BooleanExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanExternalArray (-170)

#endif

/* eml21__BooleanConstantArray has binding name 'eml21__BooleanConstantArray' for type 'eml21:BooleanConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanConstantArray (-169)

#endif

/* eml21__BooleanArrayFromIndexArray has binding name 'eml21__BooleanArrayFromIndexArray' for type 'eml21:BooleanArrayFromIndexArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__BooleanArrayFromIndexArray (-168)

#endif

/* eml21__AuthorityQualifiedName has binding name 'eml21__AuthorityQualifiedName' for type 'eml21:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_eml21__AuthorityQualifiedName (-167)

#endif

/* eml21__AbstractValueArray has binding name 'eml21__AbstractValueArray' for type 'eml21:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractValueArray (-166)

#endif

/* eml21__AbstractStringArray has binding name 'eml21__AbstractStringArray' for type 'eml21:AbstractStringArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractStringArray (-165)

#endif

/* eml21__AbstractNumericArray has binding name 'eml21__AbstractNumericArray' for type 'eml21:AbstractNumericArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractNumericArray (-164)

#endif

/* eml21__AbstractIntegerArray has binding name 'eml21__AbstractIntegerArray' for type 'eml21:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractIntegerArray (-163)

#endif

/* eml21__AbstractFloatingPointArray has binding name 'eml21__AbstractFloatingPointArray' for type 'eml21:AbstractFloatingPointArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractFloatingPointArray (-162)

#endif

/* eml21__AbstractBooleanArray has binding name 'eml21__AbstractBooleanArray' for type 'eml21:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractBooleanArray (-161)

#endif

/* eml21__ObjectAlias has binding name 'eml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_eml21__ObjectAlias (-160)

#endif

/* eml21__ExtensionNameValue has binding name 'eml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_eml21__ExtensionNameValue (-159)

#endif

/* eml21__CustomData has binding name 'eml21__CustomData' for type 'eml21:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_eml21__CustomData (-158)

#endif

/* eml21__Citation has binding name 'eml21__Citation' for type 'eml21:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_eml21__Citation (-157)

#endif

/* eml21__AbstractObject has binding name 'eml21__AbstractObject' for type 'eml21:AbstractObject' */
#ifndef SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject
#define SOAP_TYPE_gsoap_eml2_1_eml21__AbstractObject (-156)

#endif

/* witsml20__IscwsaAuthorizationData has binding name 'witsml20__IscwsaAuthorizationData' for type 'witsml20:IscwsaAuthorizationData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaAuthorizationData (-155)

#endif

/* witsml20__ToolErrorModel has binding name 'witsml20__ToolErrorModel' for type 'witsml20:ToolErrorModel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ToolErrorModel (-154)

#endif

/* witsml20__MeasureOrQuantity has binding name 'witsml20__MeasureOrQuantity' for type 'witsml20:MeasureOrQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasureOrQuantity (-153)

#endif

/* witsml20__IscwsaErrorTermValue has binding name 'witsml20__IscwsaErrorTermValue' for type 'witsml20:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaErrorTermValue (-152)

#endif

/* witsml20__IscwsaModelParameters has binding name 'witsml20__IscwsaModelParameters' for type 'witsml20:IscwsaModelParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaModelParameters (-151)

#endif

/* witsml20__IscwsaSurveyToolOperatingInterval has binding name 'witsml20__IscwsaSurveyToolOperatingInterval' for type 'witsml20:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingInterval (-150)

#endif

/* witsml20__IscwsaSurveyToolOperatingCondition has binding name 'witsml20__IscwsaSurveyToolOperatingCondition' for type 'witsml20:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IscwsaSurveyToolOperatingCondition (-149)

#endif

/* witsml20__RefWellboreTrajectoryStation has binding name 'witsml20__RefWellboreTrajectoryStation' for type 'witsml20:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreTrajectoryStation (-148)

#endif

/* witsml20__StnTrajMatrixCov has binding name 'witsml20__StnTrajMatrixCov' for type 'witsml20:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajMatrixCov (-147)

#endif

/* witsml20__StnTrajValid has binding name 'witsml20__StnTrajValid' for type 'witsml20:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajValid (-146)

#endif

/* witsml20__StnTrajCorUsed has binding name 'witsml20__StnTrajCorUsed' for type 'witsml20:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajCorUsed (-145)

#endif

/* witsml20__StnTrajRawData has binding name 'witsml20__StnTrajRawData' for type 'witsml20:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StnTrajRawData (-144)

#endif

/* witsml20__TrajectoryStation has binding name 'witsml20__TrajectoryStation' for type 'witsml20:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TrajectoryStation (-143)

#endif

/* witsml20__Trajectory has binding name 'witsml20__Trajectory' for type 'witsml20:Trajectory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Trajectory (-142)

#endif

/* witsml20__InterpretedGeologyInterval has binding name 'witsml20__InterpretedGeologyInterval' for type 'witsml20:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeologyInterval (-141)

#endif

/* witsml20__GeochronologicalUnit has binding name 'witsml20__GeochronologicalUnit' for type 'witsml20:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeochronologicalUnit (-140)

#endif

/* witsml20__CuttingsGeology has binding name 'witsml20__CuttingsGeology' for type 'witsml20:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeology (-139)

#endif

/* witsml20__CuttingsGeologyInterval has binding name 'witsml20__CuttingsGeologyInterval' for type 'witsml20:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsGeologyInterval (-138)

#endif

/* witsml20__InterpretedIntervalLithology has binding name 'witsml20__InterpretedIntervalLithology' for type 'witsml20:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedIntervalLithology (-137)

#endif

/* witsml20__ShowEvaluationInterval has binding name 'witsml20__ShowEvaluationInterval' for type 'witsml20:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluationInterval (-136)

#endif

/* witsml20__CuttingsIntervalLithology has binding name 'witsml20__CuttingsIntervalLithology' for type 'witsml20:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalLithology (-135)

#endif

/* witsml20__LithologyQualifier has binding name 'witsml20__LithologyQualifier' for type 'witsml20:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LithologyQualifier (-134)

#endif

/* witsml20__LithostratigraphicUnit has binding name 'witsml20__LithostratigraphicUnit' for type 'witsml20:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LithostratigraphicUnit (-133)

#endif

/* witsml20__InterpretedGeology has binding name 'witsml20__InterpretedGeology' for type 'witsml20:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__InterpretedGeology (-132)

#endif

/* witsml20__ShowEvaluation has binding name 'witsml20__ShowEvaluation' for type 'witsml20:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ShowEvaluation (-131)

#endif

/* witsml20__WellboreGeology has binding name 'witsml20__WellboreGeology' for type 'witsml20:WellboreGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeology (-130)

#endif

/* witsml20__CuttingsIntervalShow has binding name 'witsml20__CuttingsIntervalShow' for type 'witsml20:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CuttingsIntervalShow (-129)

#endif

/* witsml20__WellboreMarkerSet has binding name 'witsml20__WellboreMarkerSet' for type 'witsml20:WellboreMarkerSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarkerSet (-128)

#endif

/* witsml20__WellboreMarker has binding name 'witsml20__WellboreMarker' for type 'witsml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreMarker (-127)

#endif

/* witsml20__BottomHoleStaticTemperature has binding name 'witsml20__BottomHoleStaticTemperature' for type 'witsml20:BottomHoleStaticTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleStaticTemperature (-126)

#endif

/* witsml20__BottomHoleCirculatingTemperature has binding name 'witsml20__BottomHoleCirculatingTemperature' for type 'witsml20:BottomHoleCirculatingTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BottomHoleCirculatingTemperature (-125)

#endif

/* witsml20__AbstractBottomHoleTemperature has binding name 'witsml20__AbstractBottomHoleTemperature' for type 'witsml20:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractBottomHoleTemperature (-124)

#endif

/* witsml20__DrillReportGasReadingInfo has binding name 'witsml20__DrillReportGasReadingInfo' for type 'witsml20:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportGasReadingInfo (-123)

#endif

/* witsml20__DrillReportPerfInfo has binding name 'witsml20__DrillReportPerfInfo' for type 'witsml20:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPerfInfo (-122)

#endif

/* witsml20__DrillReportStratInfo has binding name 'witsml20__DrillReportStratInfo' for type 'witsml20:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStratInfo (-121)

#endif

/* witsml20__DrillReportControlIncidentInfo has binding name 'witsml20__DrillReportControlIncidentInfo' for type 'witsml20:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportControlIncidentInfo (-120)

#endif

/* witsml20__DrillReportEquipFailureInfo has binding name 'witsml20__DrillReportEquipFailureInfo' for type 'witsml20:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportEquipFailureInfo (-119)

#endif

/* witsml20__DrillReportLithShowInfo has binding name 'witsml20__DrillReportLithShowInfo' for type 'witsml20:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLithShowInfo (-118)

#endif

/* witsml20__DrillReportFormTestInfo has binding name 'witsml20__DrillReportFormTestInfo' for type 'witsml20:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportFormTestInfo (-117)

#endif

/* witsml20__DrillReportWellTestInfo has binding name 'witsml20__DrillReportWellTestInfo' for type 'witsml20:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellTestInfo (-116)

#endif

/* witsml20__DrillReportCoreInfo has binding name 'witsml20__DrillReportCoreInfo' for type 'witsml20:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportCoreInfo (-115)

#endif

/* witsml20__DrillReportLogInfo has binding name 'witsml20__DrillReportLogInfo' for type 'witsml20:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportLogInfo (-114)

#endif

/* witsml20__DrillActivity has binding name 'witsml20__DrillActivity' for type 'witsml20:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillActivity (-113)

#endif

/* witsml20__DrillReportSurveyStation has binding name 'witsml20__DrillReportSurveyStation' for type 'witsml20:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportSurveyStation (-112)

#endif

/* witsml20__TimestampedCommentString has binding name 'witsml20__TimestampedCommentString' for type 'witsml20:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TimestampedCommentString (-111)

#endif

/* witsml20__DrillReportPorePressure has binding name 'witsml20__DrillReportPorePressure' for type 'witsml20:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportPorePressure (-110)

#endif

/* witsml20__Rheometer has binding name 'witsml20__Rheometer' for type 'witsml20:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Rheometer (-109)

#endif

/* witsml20__DrillReportStatusInfo has binding name 'witsml20__DrillReportStatusInfo' for type 'witsml20:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportStatusInfo (-108)

#endif

/* witsml20__DrillReportWellboreInfo has binding name 'witsml20__DrillReportWellboreInfo' for type 'witsml20:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReportWellboreInfo (-107)

#endif

/* witsml20__DrillReport has binding name 'witsml20__DrillReport' for type 'witsml20:DrillReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillReport (-106)

#endif

/* witsml20__FluidsReport has binding name 'witsml20__FluidsReport' for type 'witsml20:FluidsReport' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport
#define SOAP_TYPE_gsoap_eml2_1_witsml20__FluidsReport (-105)

#endif

/* witsml20__RheometerViscosity has binding name 'witsml20__RheometerViscosity' for type 'witsml20:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RheometerViscosity (-104)

#endif

/* witsml20__Fluid has binding name 'witsml20__Fluid' for type 'witsml20:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Fluid (-103)

#endif

/* witsml20__DrillingParams has binding name 'witsml20__DrillingParams' for type 'witsml20:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DrillingParams (-102)

#endif

/* witsml20__BhaRun has binding name 'witsml20__BhaRun' for type 'witsml20:BhaRun' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BhaRun (-101)

#endif

/* witsml20__ChannelValueContext has binding name 'witsml20__ChannelValueContext' for type 'witsml20:ChannelValueContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelValueContext (-100)

#endif

/* witsml20__LogChannelAxis has binding name 'witsml20__LogChannelAxis' for type 'witsml20:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_witsml20__LogChannelAxis (-99)

#endif

/* witsml20__ObjectContext has binding name 'witsml20__ObjectContext' for type 'witsml20:ObjectContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectContext (-98)

#endif

/* witsml20__IndexRangeContext has binding name 'witsml20__IndexRangeContext' for type 'witsml20:IndexRangeContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IndexRangeContext (-97)

#endif

/* witsml20__AbstractLogDataContext has binding name 'witsml20__AbstractLogDataContext' for type 'witsml20:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractLogDataContext (-96)

#endif

/* witsml20__Channel has binding name 'witsml20__Channel' for type 'witsml20:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Channel (-95)

#endif

/* witsml20__DepthIndexValue has binding name 'witsml20__DepthIndexValue' for type 'witsml20:DepthIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DepthIndexValue (-94)

#endif

/* witsml20__TimeIndexValue has binding name 'witsml20__TimeIndexValue' for type 'witsml20:TimeIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TimeIndexValue (-93)

#endif

/* witsml20__AbstractIndexValue has binding name 'witsml20__AbstractIndexValue' for type 'witsml20:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractIndexValue (-92)

#endif

/* witsml20__Log has binding name 'witsml20__Log' for type 'witsml20:Log' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Log
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Log (-91)

#endif

/* witsml20__ChannelIndex has binding name 'witsml20__ChannelIndex' for type 'witsml20:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelIndex (-90)

#endif

/* witsml20__PassIndexedDepth has binding name 'witsml20__PassIndexedDepth' for type 'witsml20:PassIndexedDepth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PassIndexedDepth (-89)

#endif

/* witsml20__PointMetadata has binding name 'witsml20__PointMetadata' for type 'witsml20:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PointMetadata (-88)

#endif

/* witsml20__ChannelData has binding name 'witsml20__ChannelData' for type 'witsml20:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelData (-87)

#endif

/* witsml20__ChannelSet has binding name 'witsml20__ChannelSet' for type 'witsml20:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ChannelSet (-86)

#endif

/* witsml20__WellboreGeometrySection has binding name 'witsml20__WellboreGeometrySection' for type 'witsml20:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometrySection (-85)

#endif

/* witsml20__WellboreGeometry has binding name 'witsml20__WellboreGeometry' for type 'witsml20:WellboreGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreGeometry (-84)

#endif

/* witsml20__CompletionStatusHistory has binding name 'witsml20__CompletionStatusHistory' for type 'witsml20:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CompletionStatusHistory (-83)

#endif

/* witsml20__WellCompletion has binding name 'witsml20__WellCompletion' for type 'witsml20:WellCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellCompletion (-82)

#endif

/* witsml20__BendOffset has binding name 'witsml20__BendOffset' for type 'witsml20:BendOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BendOffset (-81)

#endif

/* witsml20__BendAngle has binding name 'witsml20__BendAngle' for type 'witsml20:BendAngle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BendAngle (-80)

#endif

/* witsml20__AbstractRotarySteerableTool has binding name 'witsml20__AbstractRotarySteerableTool' for type 'witsml20:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractRotarySteerableTool (-79)

#endif

/* witsml20__RotarySteerableTool has binding name 'witsml20__RotarySteerableTool' for type 'witsml20:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RotarySteerableTool (-78)

#endif

/* witsml20__HoleOpener has binding name 'witsml20__HoleOpener' for type 'witsml20:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_witsml20__HoleOpener (-77)

#endif

/* witsml20__Bend has binding name 'witsml20__Bend' for type 'witsml20:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Bend
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Bend (-76)

#endif

/* witsml20__Stabilizer has binding name 'witsml20__Stabilizer' for type 'witsml20:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Stabilizer (-75)

#endif

/* witsml20__Motor has binding name 'witsml20__Motor' for type 'witsml20:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Motor
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Motor (-74)

#endif

/* witsml20__Sensor has binding name 'witsml20__Sensor' for type 'witsml20:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Sensor (-73)

#endif

/* witsml20__MwdTool has binding name 'witsml20__MwdTool' for type 'witsml20:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MwdTool (-72)

#endif

/* witsml20__Jar has binding name 'witsml20__Jar' for type 'witsml20:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Jar
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Jar (-71)

#endif

/* witsml20__Connection has binding name 'witsml20__Connection' for type 'witsml20:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Connection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Connection (-70)

#endif

/* witsml20__Nozzle has binding name 'witsml20__Nozzle' for type 'witsml20:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Nozzle (-69)

#endif

/* witsml20__BitRecord has binding name 'witsml20__BitRecord' for type 'witsml20:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BitRecord (-68)

#endif

/* witsml20__TubularComponent has binding name 'witsml20__TubularComponent' for type 'witsml20:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubularComponent (-67)

#endif

/* witsml20__Tubular has binding name 'witsml20__Tubular' for type 'witsml20:Tubular' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Tubular (-66)

#endif

/* witsml20__OtherConnectionType has binding name 'witsml20__OtherConnectionType' for type 'witsml20:OtherConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OtherConnectionType (-65)

#endif

/* witsml20__RodConnectionType has binding name 'witsml20__RodConnectionType' for type 'witsml20:RodConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RodConnectionType (-64)

#endif

/* witsml20__TubingConnectionType has binding name 'witsml20__TubingConnectionType' for type 'witsml20:TubingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__TubingConnectionType (-63)

#endif

/* witsml20__CasingConnectionType has binding name 'witsml20__CasingConnectionType' for type 'witsml20:CasingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__CasingConnectionType (-62)

#endif

/* witsml20__AbstractConnectionType has binding name 'witsml20__AbstractConnectionType' for type 'witsml20:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractConnectionType (-61)

#endif

/* witsml20__PerforationSet has binding name 'witsml20__PerforationSet' for type 'witsml20:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSet (-60)

#endif

/* witsml20__PerforationSets has binding name 'witsml20__PerforationSets' for type 'witsml20:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSets (-59)

#endif

/* witsml20__PerfHole has binding name 'witsml20__PerfHole' for type 'witsml20:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerfHole (-58)

#endif

/* witsml20__PerfSlot has binding name 'witsml20__PerfSlot' for type 'witsml20:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerfSlot (-57)

#endif

/* witsml20__ExtPropNameValue has binding name 'witsml20__ExtPropNameValue' for type 'witsml20:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ExtPropNameValue (-56)

#endif

/* witsml20__Equipment has binding name 'witsml20__Equipment' for type 'witsml20:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Equipment (-55)

#endif

/* witsml20__EquipmentSet has binding name 'witsml20__EquipmentSet' for type 'witsml20:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentSet (-54)

#endif

/* witsml20__DownholeStringSet has binding name 'witsml20__DownholeStringSet' for type 'witsml20:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeStringSet (-53)

#endif

/* witsml20__GeologyFeature has binding name 'witsml20__GeologyFeature' for type 'witsml20:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeologyFeature (-52)

#endif

/* witsml20__Borehole has binding name 'witsml20__Borehole' for type 'witsml20:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Borehole (-51)

#endif

/* witsml20__BoreholeString has binding name 'witsml20__BoreholeString' for type 'witsml20:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeString (-50)

#endif

/* witsml20__BoreholeStringSet has binding name 'witsml20__BoreholeStringSet' for type 'witsml20:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__BoreholeStringSet (-49)

#endif

/* witsml20__StringAccessory has binding name 'witsml20__StringAccessory' for type 'witsml20:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringAccessory (-48)

#endif

/* witsml20__Assembly has binding name 'witsml20__Assembly' for type 'witsml20:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Assembly (-47)

#endif

/* witsml20__EquipmentConnection has binding name 'witsml20__EquipmentConnection' for type 'witsml20:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EquipmentConnection (-46)

#endif

/* witsml20__ReferenceContainer has binding name 'witsml20__ReferenceContainer' for type 'witsml20:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReferenceContainer (-45)

#endif

/* witsml20__ObjectSequence has binding name 'witsml20__ObjectSequence' for type 'witsml20:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ObjectSequence (-44)

#endif

/* witsml20__EventRefInfo has binding name 'witsml20__EventRefInfo' for type 'witsml20:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EventRefInfo (-43)

#endif

/* witsml20__EventInfo has binding name 'witsml20__EventInfo' for type 'witsml20:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_witsml20__EventInfo (-42)

#endif

/* witsml20__StringEquipment has binding name 'witsml20__StringEquipment' for type 'witsml20:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipment (-41)

#endif

/* witsml20__StringEquipmentSet has binding name 'witsml20__StringEquipmentSet' for type 'witsml20:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__StringEquipmentSet (-40)

#endif

/* witsml20__DownholeString has binding name 'witsml20__DownholeString' for type 'witsml20:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeString (-39)

#endif

/* witsml20__DownholeComponent has binding name 'witsml20__DownholeComponent' for type 'witsml20:DownholeComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DownholeComponent (-38)

#endif

/* witsml20__SlotsInterval has binding name 'witsml20__SlotsInterval' for type 'witsml20:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__SlotsInterval (-37)

#endif

/* witsml20__PerforationStatusHistory has binding name 'witsml20__PerforationStatusHistory' for type 'witsml20:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationStatusHistory (-36)

#endif

/* witsml20__PerforationSetInterval has binding name 'witsml20__PerforationSetInterval' for type 'witsml20:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PerforationSetInterval (-35)

#endif

/* witsml20__OpenHoleInterval has binding name 'witsml20__OpenHoleInterval' for type 'witsml20:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__OpenHoleInterval (-34)

#endif

/* witsml20__IntervalStatusHistory has binding name 'witsml20__IntervalStatusHistory' for type 'witsml20:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_witsml20__IntervalStatusHistory (-33)

#endif

/* witsml20__GravelPackInterval has binding name 'witsml20__GravelPackInterval' for type 'witsml20:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GravelPackInterval (-32)

#endif

/* witsml20__ContactIntervalSet has binding name 'witsml20__ContactIntervalSet' for type 'witsml20:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ContactIntervalSet (-31)

#endif

/* witsml20__WellboreCompletion has binding name 'witsml20__WellboreCompletion' for type 'witsml20:WellboreCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellboreCompletion (-30)

#endif

/* witsml20__Wellbore has binding name 'witsml20__Wellbore' for type 'witsml20:Wellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Wellbore (-29)

#endif

/* witsml20__MeasuredDepthCoord has binding name 'witsml20__MeasuredDepthCoord' for type 'witsml20:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__MeasuredDepthCoord (-28)

#endif

/* witsml20__Cost has binding name 'witsml20__Cost' for type 'witsml20:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Cost
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Cost (-27)

#endif

/* witsml20__NameTag has binding name 'witsml20__NameTag' for type 'witsml20:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag
#define SOAP_TYPE_gsoap_eml2_1_witsml20__NameTag (-26)

#endif

/* witsml20__WellVerticalDepthCoord has binding name 'witsml20__WellVerticalDepthCoord' for type 'witsml20:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellVerticalDepthCoord (-25)

#endif

/* witsml20__PublicLandSurveySystem has binding name 'witsml20__PublicLandSurveySystem' for type 'witsml20:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_witsml20__PublicLandSurveySystem (-24)

#endif

/* witsml20__AbstractWellLocation has binding name 'witsml20__AbstractWellLocation' for type 'witsml20:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__AbstractWellLocation (-23)

#endif

/* witsml20__RefWellboreRig has binding name 'witsml20__RefWellboreRig' for type 'witsml20:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellboreRig (-22)

#endif

/* witsml20__RefWellbore has binding name 'witsml20__RefWellbore' for type 'witsml20:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_witsml20__RefWellbore (-21)

#endif

/* witsml20__WellDatum has binding name 'witsml20__WellDatum' for type 'witsml20:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellDatum (-20)

#endif

/* witsml20__WellElevationCoord has binding name 'witsml20__WellElevationCoord' for type 'witsml20:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_witsml20__WellElevationCoord (-19)

#endif

/* witsml20__Well has binding name 'witsml20__Well' for type 'witsml20:Well' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__Well
#define SOAP_TYPE_gsoap_eml2_1_witsml20__Well (-18)

#endif

/* witsml20__ProjectedWellLocation has binding name 'witsml20__ProjectedWellLocation' for type 'witsml20:ProjectedWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ProjectedWellLocation (-17)

#endif

/* witsml20__GeodeticWellLocation has binding name 'witsml20__GeodeticWellLocation' for type 'witsml20:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_witsml20__GeodeticWellLocation (-16)

#endif

/* witsml20__ReferencePoint has binding name 'witsml20__ReferencePoint' for type 'witsml20:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_witsml20__ReferencePoint (-15)

#endif

/* witsml20__DistanceEastWest has binding name 'witsml20__DistanceEastWest' for type 'witsml20:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceEastWest (-14)

#endif

/* witsml20__DistanceNorthSouth has binding name 'witsml20__DistanceNorthSouth' for type 'witsml20:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_witsml20__DistanceNorthSouth (-13)

#endif

/* xsd__date has binding name 'xsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__date
#define SOAP_TYPE_gsoap_eml2_1_xsd__date (-12)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_1_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_xsd__anyURI (-11)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__string
#define SOAP_TYPE_gsoap_eml2_1_std__string (-10)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Fault (-845623303)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Reason (-845623302)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Detail (-845623299)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Code (-845623297)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_1_SOAP_ENV__Header (-845623296)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

#endif

/* struct tm has binding name 'tm' for type 'tm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_tm
#define SOAP_TYPE_gsoap_eml2_1_tm (-8)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Reason (-845623305)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Detail (-845623304)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_1_PointerToSOAP_ENV__Code (-845623298)

#endif

/* enum eml21__UnitOfMeasure * has binding name 'PointerToeml21__UnitOfMeasure' for type 'eml21:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__UnitOfMeasure (-1473)

#endif

/* eml21__IntegerConstantArray * has binding name 'PointerToeml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IntegerConstantArray (-1471)

#endif

/* eml21__AbstractBooleanArray * has binding name 'PointerToeml21__AbstractBooleanArray' for type 'eml21:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractBooleanArray (-1470)

#endif

/* eml21__FloatingPointConstantArray * has binding name 'PointerToeml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FloatingPointConstantArray (-1468)

#endif

/* enum eml21__ReferencePressureKind * has binding name 'PointerToeml21__ReferencePressureKind' for type 'eml21:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressureKind (-1467)

#endif

/* eml21__ExternalDataset * has binding name 'PointerToeml21__ExternalDataset' for type 'eml21:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDataset (-1466)

#endif

/* eml21__AbstractGraphicalInformation * has binding name 'PointerToeml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGraphicalInformation (-1464)

#endif

/* eml21__IndexRange * has binding name 'PointerToeml21__IndexRange' for type 'eml21:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IndexRange
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IndexRange (-1463)

#endif

/* eml21__FailingRule * has binding name 'PointerToeml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__FailingRule (-1461)

#endif

/* std::string * has binding name 'PointerToeml21__LengthUomExt' for type 'eml21:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthUomExt (-1460)

#endif

/* eml21__AuthorityQualifiedName * has binding name 'PointerToeml21__AuthorityQualifiedName' for type 'eml21:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AuthorityQualifiedName (-1459)

#endif

/* std::string * has binding name 'PointerToeml21__ReferenceConditionExt' for type 'eml21:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferenceConditionExt (-1458)

#endif

/* eml21__ReferencePressure * has binding name 'PointerToeml21__ReferencePressure' for type 'eml21:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReferencePressure (-1456)

#endif

/* eml21__PressureMeasureExt * has binding name 'PointerToeml21__PressureMeasureExt' for type 'eml21:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasureExt (-1455)

#endif

/* eml21__TimeSeriesParentage * has binding name 'PointerToeml21__TimeSeriesParentage' for type 'eml21:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeSeriesParentage (-1454)

#endif

/* eml21__GeologicTime * has binding name 'PointerToeml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GeologicTime (-1452)

#endif

/* eml21__PropertyKind * has binding name 'PointerToeml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PropertyKind (-1450)

#endif

/* eml21__ParameterTemplate * has binding name 'PointerToeml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ParameterTemplate (-1448)

#endif

/* witsml20__IscwsaErrorTermValue * has binding name 'PointerTowitsml20__IscwsaErrorTermValue' for type 'witsml20:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaErrorTermValue (-1446)

#endif

/* witsml20__IscwsaModelParameters * has binding name 'PointerTowitsml20__IscwsaModelParameters' for type 'witsml20:IscwsaModelParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaModelParameters
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaModelParameters (-1445)

#endif

/* witsml20__IscwsaSurveyToolOperatingInterval * has binding name 'PointerTowitsml20__IscwsaSurveyToolOperatingInterval' for type 'witsml20:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaSurveyToolOperatingInterval (-1443)

#endif

/* witsml20__IscwsaSurveyToolOperatingCondition * has binding name 'PointerTowitsml20__IscwsaSurveyToolOperatingCondition' for type 'witsml20:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaSurveyToolOperatingCondition (-1441)

#endif

/* witsml20__IscwsaAuthorizationData * has binding name 'PointerTowitsml20__IscwsaAuthorizationData' for type 'witsml20:IscwsaAuthorizationData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaAuthorizationData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IscwsaAuthorizationData (-1440)

#endif

/* witsml20__TrajectoryStation * has binding name 'PointerTowitsml20__TrajectoryStation' for type 'witsml20:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajectoryStation (-1438)

#endif

/* enum witsml20__AziRef * has binding name 'PointerTowitsml20__AziRef' for type 'witsml20:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AziRef
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AziRef (-1437)

#endif

/* witsml20__InterpretedIntervalLithology * has binding name 'PointerTowitsml20__InterpretedIntervalLithology' for type 'witsml20:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedIntervalLithology (-1436)

#endif

/* witsml20__CuttingsGeologyInterval * has binding name 'PointerTowitsml20__CuttingsGeologyInterval' for type 'witsml20:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsGeologyInterval (-1432)

#endif

/* witsml20__CuttingsIntervalLithology * has binding name 'PointerTowitsml20__CuttingsIntervalLithology' for type 'witsml20:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsIntervalLithology (-1430)

#endif

/* eml21__IlluminanceMeasure * has binding name 'PointerToeml21__IlluminanceMeasure' for type 'eml21:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__IlluminanceMeasure (-1429)

#endif

/* witsml20__InterpretedGeologyInterval * has binding name 'PointerTowitsml20__InterpretedGeologyInterval' for type 'witsml20:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedGeologyInterval (-1427)

#endif

/* witsml20__ShowEvaluationInterval * has binding name 'PointerTowitsml20__ShowEvaluationInterval' for type 'witsml20:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowEvaluationInterval (-1425)

#endif

/* witsml20__CuttingsGeology * has binding name 'PointerTowitsml20__CuttingsGeology' for type 'witsml20:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsGeology (-1424)

#endif

/* witsml20__InterpretedGeology * has binding name 'PointerTowitsml20__InterpretedGeology' for type 'witsml20:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InterpretedGeology (-1423)

#endif

/* witsml20__ShowEvaluation * has binding name 'PointerTowitsml20__ShowEvaluation' for type 'witsml20:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowEvaluation (-1422)

#endif

/* witsml20__WellboreMarker * has binding name 'PointerTowitsml20__WellboreMarker' for type 'witsml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreMarker (-1420)

#endif

/* witsml20__LithostratigraphicUnit * has binding name 'PointerTowitsml20__LithostratigraphicUnit' for type 'witsml20:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LithostratigraphicUnit (-1419)

#endif

/* witsml20__GeochronologicalUnit * has binding name 'PointerTowitsml20__GeochronologicalUnit' for type 'witsml20:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeochronologicalUnit (-1418)

#endif

/* struct __witsml20__BottomHoleStaticTemperature_sequence_ * has binding name 'PointerTo__witsml20__BottomHoleStaticTemperature_sequence_' for type '-witsml20:BottomHoleStaticTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BottomHoleStaticTemperature_sequence_ (-1417)

#endif

/* struct __witsml20__BottomHoleCirculatingTemperature_sequence_ * has binding name 'PointerTo__witsml20__BottomHoleCirculatingTemperature_sequence_' for type '-witsml20:BottomHoleCirculatingTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BottomHoleCirculatingTemperature_sequence_ (-1415)

#endif

/* witsml20__DrillReportSurveyStation * has binding name 'PointerTowitsml20__DrillReportSurveyStation' for type 'witsml20:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportSurveyStation (-1412)

#endif

/* witsml20__TimestampedCommentString * has binding name 'PointerTowitsml20__TimestampedCommentString' for type 'witsml20:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TimestampedCommentString (-1411)

#endif

/* witsml20__DrillReportPorePressure * has binding name 'PointerTowitsml20__DrillReportPorePressure' for type 'witsml20:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportPorePressure (-1409)

#endif

/* witsml20__DrillReportStatusInfo * has binding name 'PointerTowitsml20__DrillReportStatusInfo' for type 'witsml20:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportStatusInfo (-1407)

#endif

/* witsml20__DrillReportWellboreInfo * has binding name 'PointerTowitsml20__DrillReportWellboreInfo' for type 'witsml20:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportWellboreInfo (-1406)

#endif

/* witsml20__DrillReportGasReadingInfo * has binding name 'PointerTowitsml20__DrillReportGasReadingInfo' for type 'witsml20:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportGasReadingInfo (-1404)

#endif

/* witsml20__DrillReportPerfInfo * has binding name 'PointerTowitsml20__DrillReportPerfInfo' for type 'witsml20:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportPerfInfo (-1402)

#endif

/* witsml20__DrillReportStratInfo * has binding name 'PointerTowitsml20__DrillReportStratInfo' for type 'witsml20:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportStratInfo (-1400)

#endif

/* witsml20__DrillReportControlIncidentInfo * has binding name 'PointerTowitsml20__DrillReportControlIncidentInfo' for type 'witsml20:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportControlIncidentInfo (-1398)

#endif

/* witsml20__DrillReportEquipFailureInfo * has binding name 'PointerTowitsml20__DrillReportEquipFailureInfo' for type 'witsml20:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportEquipFailureInfo (-1396)

#endif

/* witsml20__DrillReportLithShowInfo * has binding name 'PointerTowitsml20__DrillReportLithShowInfo' for type 'witsml20:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportLithShowInfo (-1394)

#endif

/* witsml20__DrillReportFormTestInfo * has binding name 'PointerTowitsml20__DrillReportFormTestInfo' for type 'witsml20:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportFormTestInfo (-1392)

#endif

/* witsml20__DrillReportWellTestInfo * has binding name 'PointerTowitsml20__DrillReportWellTestInfo' for type 'witsml20:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportWellTestInfo (-1390)

#endif

/* witsml20__DrillReportCoreInfo * has binding name 'PointerTowitsml20__DrillReportCoreInfo' for type 'witsml20:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportCoreInfo (-1388)

#endif

/* witsml20__DrillReportLogInfo * has binding name 'PointerTowitsml20__DrillReportLogInfo' for type 'witsml20:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillReportLogInfo (-1386)

#endif

/* witsml20__DrillActivity * has binding name 'PointerTowitsml20__DrillActivity' for type 'witsml20:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivity (-1384)

#endif

/* enum witsml20__OpsReportVersion * has binding name 'PointerTowitsml20__OpsReportVersion' for type 'witsml20:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__OpsReportVersion (-1382)

#endif

/* witsml20__Fluid * has binding name 'PointerTowitsml20__Fluid' for type 'witsml20:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Fluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Fluid (-1380)

#endif

/* witsml20__DrillingParams * has binding name 'PointerTowitsml20__DrillingParams' for type 'witsml20:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillingParams (-1378)

#endif

/* enum witsml20__BhaStatus * has binding name 'PointerTowitsml20__BhaStatus' for type 'witsml20:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BhaStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BhaStatus (-1377)

#endif

/* witsml20__PointMetadata * has binding name 'PointerTowitsml20__PointMetadata' for type 'witsml20:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PointMetadata (-1375)

#endif

/* witsml20__LogChannelAxis * has binding name 'PointerTowitsml20__LogChannelAxis' for type 'witsml20:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LogChannelAxis (-1373)

#endif

/* witsml20__ChannelSet * has binding name 'PointerTowitsml20__ChannelSet' for type 'witsml20:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelSet (-1371)

#endif

/* witsml20__AbstractLogDataContext * has binding name 'PointerTowitsml20__AbstractLogDataContext' for type 'witsml20:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractLogDataContext (-1369)

#endif

/* eml21__LengthMeasureExt * has binding name 'PointerToeml21__LengthMeasureExt' for type 'eml21:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasureExt (-1368)

#endif

/* enum witsml20__LoggingMethod * has binding name 'PointerTowitsml20__LoggingMethod' for type 'witsml20:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LoggingMethod (-1367)

#endif

/* enum witsml20__ChannelDerivation * has binding name 'PointerTowitsml20__ChannelDerivation' for type 'witsml20:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelDerivation (-1366)

#endif

/* witsml20__AbstractIndexValue * has binding name 'PointerTowitsml20__AbstractIndexValue' for type 'witsml20:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractIndexValue (-1365)

#endif

/* enum witsml20__ChannelState * has binding name 'PointerTowitsml20__ChannelState' for type 'witsml20:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelState
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelState (-1364)

#endif

/* witsml20__ChannelData * has binding name 'PointerTowitsml20__ChannelData' for type 'witsml20:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelData (-1363)

#endif

/* witsml20__Channel * has binding name 'PointerTowitsml20__Channel' for type 'witsml20:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Channel (-1361)

#endif

/* witsml20__ChannelIndex * has binding name 'PointerTowitsml20__ChannelIndex' for type 'witsml20:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ChannelIndex (-1359)

#endif

/* witsml20__WellboreGeometrySection * has binding name 'PointerTowitsml20__WellboreGeometrySection' for type 'witsml20:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreGeometrySection (-1357)

#endif

/* struct __witsml20__BendOffset_sequence * has binding name 'PointerTo__witsml20__BendOffset_sequence' for type '-witsml20:BendOffset-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BendOffset_sequence (-1356)

#endif

/* struct __witsml20__BendAngle_sequence * has binding name 'PointerTo__witsml20__BendAngle_sequence' for type '-witsml20:BendAngle-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__BendAngle_sequence (-1354)

#endif

/* witsml20__TubularComponent * has binding name 'PointerTowitsml20__TubularComponent' for type 'witsml20:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TubularComponent (-1351)

#endif

/* witsml20__AbstractConnectionType * has binding name 'PointerTowitsml20__AbstractConnectionType' for type 'witsml20:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractConnectionType (-1350)

#endif

/* enum witsml20__ConnectionFormType * has binding name 'PointerTowitsml20__ConnectionFormType' for type 'witsml20:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ConnectionFormType (-1349)

#endif

/* witsml20__BoreholeStringSet * has binding name 'PointerTowitsml20__BoreholeStringSet' for type 'witsml20:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeStringSet (-1348)

#endif

/* witsml20__EquipmentSet * has binding name 'PointerTowitsml20__EquipmentSet' for type 'witsml20:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentSet (-1347)

#endif

/* witsml20__PerforationSets * has binding name 'PointerTowitsml20__PerforationSets' for type 'witsml20:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSets
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSets (-1346)

#endif

/* witsml20__DownholeStringSet * has binding name 'PointerTowitsml20__DownholeStringSet' for type 'witsml20:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DownholeStringSet (-1345)

#endif

/* witsml20__ContactIntervalSet * has binding name 'PointerTowitsml20__ContactIntervalSet' for type 'witsml20:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ContactIntervalSet (-1344)

#endif

/* witsml20__CompletionStatusHistory * has binding name 'PointerTowitsml20__CompletionStatusHistory' for type 'witsml20:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CompletionStatusHistory (-1342)

#endif

/* enum witsml20__WellboreShape * has binding name 'PointerTowitsml20__WellboreShape' for type 'witsml20:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreShape
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreShape (-1341)

#endif

/* witsml20__WellDatum * has binding name 'PointerTowitsml20__WellDatum' for type 'witsml20:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellDatum (-1339)

#endif

/* witsml20__ReferencePoint * has binding name 'PointerTowitsml20__ReferencePoint' for type 'witsml20:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ReferencePoint (-1337)

#endif

/* witsml20__PublicLandSurveySystem * has binding name 'PointerTowitsml20__PublicLandSurveySystem' for type 'witsml20:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystem (-1336)

#endif

/* witsml20__GeodeticWellLocation * has binding name 'PointerTowitsml20__GeodeticWellLocation' for type 'witsml20:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeodeticWellLocation (-1335)

#endif

/* enum witsml20__WellDirection * has binding name 'PointerTowitsml20__WellDirection' for type 'witsml20:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellDirection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellDirection (-1334)

#endif

/* enum witsml20__WellFluid * has binding name 'PointerTowitsml20__WellFluid' for type 'witsml20:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellFluid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellFluid (-1333)

#endif

/* enum witsml20__WellPurpose * has binding name 'PointerTowitsml20__WellPurpose' for type 'witsml20:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellPurpose
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellPurpose (-1332)

#endif

/* enum eml21__WellStatus * has binding name 'PointerToeml21__WellStatus' for type 'eml21:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellStatus (-1331)

#endif

/* eml21__DimensionlessMeasure * has binding name 'PointerToeml21__DimensionlessMeasure' for type 'eml21:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DimensionlessMeasure (-1330)

#endif

/* std::string * has binding name 'PointerToeml21__TimeZone' for type 'eml21:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeZone
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeZone (-1329)

#endif

/* eml21__AbstractProjectedCrs * has binding name 'PointerToeml21__AbstractProjectedCrs' for type 'eml21:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractProjectedCrs (-1328)

#endif

/* eml21__AbstractGeodeticCrs * has binding name 'PointerToeml21__AbstractGeodeticCrs' for type 'eml21:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractGeodeticCrs (-1327)

#endif

/* eml21__VolumeMeasureExt * has binding name 'PointerToeml21__VolumeMeasureExt' for type 'eml21:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasureExt (-1326)

#endif

/* eml21__AbstractPressureValue * has binding name 'PointerToeml21__AbstractPressureValue' for type 'eml21:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractPressureValue (-1325)

#endif

/* eml21__VolumePerTimeMeasureExt * has binding name 'PointerToeml21__VolumePerTimeMeasureExt' for type 'eml21:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasureExt (-1324)

#endif

/* eml21__AbstractTemperaturePressure * has binding name 'PointerToeml21__AbstractTemperaturePressure' for type 'eml21:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractTemperaturePressure (-1323)

#endif

/* eml21__MassPerVolumeMeasureExt * has binding name 'PointerToeml21__MassPerVolumeMeasureExt' for type 'eml21:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasureExt (-1322)

#endif

/* eml21__TimeIndex * has binding name 'PointerToeml21__TimeIndex' for type 'eml21:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeIndex
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeIndex (-1320)

#endif

/* ULONG64 * has binding name 'PointerToULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToULONG64
#define SOAP_TYPE_gsoap_eml2_1_PointerToULONG64 (-1319)

#endif

/* eml21__AbstractActivityParameter * has binding name 'PointerToeml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractActivityParameter (-1317)

#endif

/* eml21__AbstractParameterKey * has binding name 'PointerToeml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractParameterKey (-1313)

#endif

/* LONG64 * has binding name 'PointerToLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToLONG64
#define SOAP_TYPE_gsoap_eml2_1_PointerToLONG64 (-1312)

#endif

/* eml21__ExternalDatasetPart * has binding name 'PointerToeml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExternalDatasetPart (-1309)

#endif

/* eml21__AbstractIntegerArray * has binding name 'PointerToeml21__AbstractIntegerArray' for type 'eml21:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractIntegerArray (-1308)

#endif

/* eml21__AbstractValueArray * has binding name 'PointerToeml21__AbstractValueArray' for type 'eml21:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractValueArray (-1307)

#endif

/* enum eml21__MeasureClass * has binding name 'PointerToeml21__MeasureClass' for type 'eml21:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MeasureClass
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MeasureClass (-1306)

#endif

/* eml21__StringMeasure * has binding name 'PointerToeml21__StringMeasure' for type 'eml21:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__StringMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__StringMeasure (-1305)

#endif

/* struct tm * has binding name 'PointerToxsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__dateTime
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__dateTime (-1303)

#endif

/* enum eml21__ExistenceKind * has binding name 'PointerToeml21__ExistenceKind' for type 'eml21:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExistenceKind (-1302)

#endif

/* witsml20__MeasureOrQuantity * has binding name 'PointerTowitsml20__MeasureOrQuantity' for type 'witsml20:MeasureOrQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasureOrQuantity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasureOrQuantity (-1301)

#endif

/* witsml20__StnTrajCorUsed * has binding name 'PointerTowitsml20__StnTrajCorUsed' for type 'witsml20:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajCorUsed (-1300)

#endif

/* witsml20__StnTrajRawData * has binding name 'PointerTowitsml20__StnTrajRawData' for type 'witsml20:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajRawData (-1299)

#endif

/* witsml20__RefWellboreTrajectoryStation * has binding name 'PointerTowitsml20__RefWellboreTrajectoryStation' for type 'witsml20:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellboreTrajectoryStation (-1298)

#endif

/* witsml20__StnTrajMatrixCov * has binding name 'PointerTowitsml20__StnTrajMatrixCov' for type 'witsml20:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajMatrixCov (-1297)

#endif

/* witsml20__StnTrajValid * has binding name 'PointerTowitsml20__StnTrajValid' for type 'witsml20:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StnTrajValid (-1296)

#endif

/* enum witsml20__TrajStationStatus * has binding name 'PointerTowitsml20__TrajStationStatus' for type 'witsml20:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajStationStatus (-1295)

#endif

/* eml21__MagneticFluxDensityMeasure * has binding name 'PointerToeml21__MagneticFluxDensityMeasure' for type 'eml21:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MagneticFluxDensityMeasure (-1294)

#endif

/* eml21__LinearAccelerationMeasure * has binding name 'PointerToeml21__LinearAccelerationMeasure' for type 'eml21:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LinearAccelerationMeasure (-1293)

#endif

/* enum witsml20__TrajStnCalcAlgorithm * has binding name 'PointerTowitsml20__TrajStnCalcAlgorithm' for type 'witsml20:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TrajStnCalcAlgorithm (-1292)

#endif

/* enum witsml20__TypeSurveyTool * has binding name 'PointerTowitsml20__TypeSurveyTool' for type 'witsml20:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__TypeSurveyTool (-1291)

#endif

/* witsml20__LithologyQualifier * has binding name 'PointerTowitsml20__LithologyQualifier' for type 'witsml20:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__LithologyQualifier (-1289)

#endif

/* witsml20__CuttingsIntervalShow * has binding name 'PointerTowitsml20__CuttingsIntervalShow' for type 'witsml20:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CuttingsIntervalShow (-1287)

#endif

/* enum eml21__MatrixCementKind * has binding name 'PointerToeml21__MatrixCementKind' for type 'eml21:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MatrixCementKind (-1286)

#endif

/* enum witsml20__ShowFluorescence * has binding name 'PointerTowitsml20__ShowFluorescence' for type 'witsml20:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowFluorescence (-1285)

#endif

/* enum witsml20__ShowLevel * has binding name 'PointerTowitsml20__ShowLevel' for type 'witsml20:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowLevel
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowLevel (-1284)

#endif

/* enum witsml20__ShowSpeed * has binding name 'PointerTowitsml20__ShowSpeed' for type 'witsml20:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowSpeed (-1283)

#endif

/* eml21__AreaPerAreaMeasure * has binding name 'PointerToeml21__AreaPerAreaMeasure' for type 'eml21:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaPerAreaMeasure (-1282)

#endif

/* enum witsml20__ShowRating * has binding name 'PointerTowitsml20__ShowRating' for type 'witsml20:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowRating
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ShowRating (-1281)

#endif

/* struct __witsml20__AbstractBottomHoleTemperature_sequence * has binding name 'PointerTo__witsml20__AbstractBottomHoleTemperature_sequence' for type '-witsml20:AbstractBottomHoleTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTo__witsml20__AbstractBottomHoleTemperature_sequence (-1280)

#endif

/* enum witsml20__GasPeakType * has binding name 'PointerTowitsml20__GasPeakType' for type 'witsml20:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GasPeakType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GasPeakType (-1278)

#endif

/* enum witsml20__WellKillingProcedureType * has binding name 'PointerTowitsml20__WellKillingProcedureType' for type 'witsml20:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellKillingProcedureType (-1277)

#endif

/* enum witsml20__WellControlIncidentType * has binding name 'PointerTowitsml20__WellControlIncidentType' for type 'witsml20:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellControlIncidentType (-1276)

#endif

/* enum witsml20__WellTestType * has binding name 'PointerTowitsml20__WellTestType' for type 'witsml20:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellTestType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellTestType (-1275)

#endif

/* enum witsml20__InnerBarrelType * has binding name 'PointerTowitsml20__InnerBarrelType' for type 'witsml20:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__InnerBarrelType (-1274)

#endif

/* witsml20__AbstractBottomHoleTemperature * has binding name 'PointerTowitsml20__AbstractBottomHoleTemperature' for type 'witsml20:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractBottomHoleTemperature (-1273)

#endif

/* enum witsml20__ItemState * has binding name 'PointerTowitsml20__ItemState' for type 'witsml20:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ItemState
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ItemState (-1272)

#endif

/* enum witsml20__StateDetailActivity * has binding name 'PointerTowitsml20__StateDetailActivity' for type 'witsml20:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StateDetailActivity (-1271)

#endif

/* enum witsml20__DrillActivityClassType * has binding name 'PointerTowitsml20__DrillActivityClassType' for type 'witsml20:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivityClassType (-1270)

#endif

/* enum witsml20__DrillActivityCode * has binding name 'PointerTowitsml20__DrillActivityCode' for type 'witsml20:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DrillActivityCode (-1269)

#endif

/* witsml20__RheometerViscosity * has binding name 'PointerTowitsml20__RheometerViscosity' for type 'witsml20:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RheometerViscosity (-1267)

#endif

/* enum witsml20__PresTestType * has binding name 'PointerTowitsml20__PresTestType' for type 'witsml20:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PresTestType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PresTestType (-1266)

#endif

/* enum witsml20__WellboreType * has binding name 'PointerTowitsml20__WellboreType' for type 'witsml20:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellboreType (-1265)

#endif

/* eml21__ObjectAlias * has binding name 'PointerToeml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ObjectAlias (-1263)

#endif

/* std::string * has binding name 'PointerToxsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__date
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__date (-1262)

#endif

/* witsml20__Rheometer * has binding name 'PointerTowitsml20__Rheometer' for type 'witsml20:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Rheometer (-1260)

#endif

/* eml21__MassMeasure * has binding name 'PointerToeml21__MassMeasure' for type 'eml21:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassMeasure (-1259)

#endif

/* eml21__MassPerMassMeasure * has binding name 'PointerToeml21__MassPerMassMeasure' for type 'eml21:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerMassMeasure (-1258)

#endif

/* eml21__ElectricPotentialDifferenceMeasure * has binding name 'PointerToeml21__ElectricPotentialDifferenceMeasure' for type 'eml21:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ElectricPotentialDifferenceMeasure (-1257)

#endif

/* eml21__GenericMeasure * has binding name 'PointerToeml21__GenericMeasure' for type 'eml21:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__GenericMeasure (-1256)

#endif

/* eml21__VolumePerVolumeMeasure * has binding name 'PointerToeml21__VolumePerVolumeMeasure' for type 'eml21:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerVolumeMeasure (-1255)

#endif

/* eml21__DynamicViscosityMeasure * has binding name 'PointerToeml21__DynamicViscosityMeasure' for type 'eml21:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DynamicViscosityMeasure (-1254)

#endif

/* witsml20__WellVerticalDepthCoord * has binding name 'PointerTowitsml20__WellVerticalDepthCoord' for type 'witsml20:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellVerticalDepthCoord (-1253)

#endif

/* enum witsml20__MudSubClass * has binding name 'PointerTowitsml20__MudSubClass' for type 'witsml20:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MudSubClass
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MudSubClass (-1252)

#endif

/* enum witsml20__MudClass * has binding name 'PointerTowitsml20__MudClass' for type 'witsml20:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MudClass
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MudClass (-1251)

#endif

/* eml21__PowerMeasure * has binding name 'PointerToeml21__PowerMeasure' for type 'eml21:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PowerMeasure (-1250)

#endif

/* eml21__LengthPerTimeMeasure * has binding name 'PointerToeml21__LengthPerTimeMeasure' for type 'eml21:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerTimeMeasure (-1249)

#endif

/* eml21__MassPerVolumeMeasure * has binding name 'PointerToeml21__MassPerVolumeMeasure' for type 'eml21:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerVolumeMeasure (-1248)

#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToxsd__anyURI
#define SOAP_TYPE_gsoap_eml2_1_PointerToxsd__anyURI (-1247)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTostd__string
#define SOAP_TYPE_gsoap_eml2_1_PointerTostd__string (-1246)

#endif

/* enum witsml20__HoleCasingType * has binding name 'PointerTowitsml20__HoleCasingType' for type 'witsml20:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleCasingType (-1244)

#endif

/* eml21__Citation * has binding name 'PointerToeml21__Citation' for type 'eml21:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__Citation
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__Citation (-1243)

#endif

/* enum witsml20__CompletionStatus * has binding name 'PointerTowitsml20__CompletionStatus' for type 'witsml20:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__CompletionStatus (-1242)

#endif

/* witsml20__AbstractRotarySteerableTool * has binding name 'PointerTowitsml20__AbstractRotarySteerableTool' for type 'witsml20:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractRotarySteerableTool (-1241)

#endif

/* eml21__AngularVelocityMeasure * has binding name 'PointerToeml21__AngularVelocityMeasure' for type 'eml21:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AngularVelocityMeasure (-1240)

#endif

/* enum witsml20__HoleOpenerType * has binding name 'PointerTowitsml20__HoleOpenerType' for type 'witsml20:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleOpenerType (-1239)

#endif

/* enum witsml20__BladeType * has binding name 'PointerTowitsml20__BladeType' for type 'witsml20:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BladeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BladeType (-1238)

#endif

/* enum witsml20__BladeShapeType * has binding name 'PointerTowitsml20__BladeShapeType' for type 'witsml20:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BladeShapeType (-1237)

#endif

/* enum witsml20__BearingType * has binding name 'PointerTowitsml20__BearingType' for type 'witsml20:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BearingType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BearingType (-1236)

#endif

/* enum witsml20__MeasurementType * has binding name 'PointerTowitsml20__MeasurementType' for type 'witsml20:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasurementType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasurementType (-1235)

#endif

/* witsml20__Sensor * has binding name 'PointerTowitsml20__Sensor' for type 'witsml20:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Sensor
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Sensor (-1233)

#endif

/* eml21__VolumePerTimeMeasure * has binding name 'PointerToeml21__VolumePerTimeMeasure' for type 'eml21:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumePerTimeMeasure (-1232)

#endif

/* enum witsml20__JarAction * has binding name 'PointerTowitsml20__JarAction' for type 'witsml20:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__JarAction
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__JarAction (-1231)

#endif

/* enum witsml20__JarType * has binding name 'PointerTowitsml20__JarType' for type 'witsml20:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__JarType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__JarType (-1230)

#endif

/* enum witsml20__ConnectionPosition * has binding name 'PointerTowitsml20__ConnectionPosition' for type 'witsml20:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ConnectionPosition (-1229)

#endif

/* enum witsml20__NozzleType * has binding name 'PointerTowitsml20__NozzleType' for type 'witsml20:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NozzleType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NozzleType (-1228)

#endif

/* witsml20__Cost * has binding name 'PointerTowitsml20__Cost' for type 'witsml20:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Cost
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Cost (-1227)

#endif

/* enum witsml20__BitReasonPulled * has binding name 'PointerTowitsml20__BitReasonPulled' for type 'witsml20:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitReasonPulled (-1226)

#endif

/* enum witsml20__IadcBearingWearCode * has binding name 'PointerTowitsml20__IadcBearingWearCode' for type 'witsml20:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IadcBearingWearCode (-1225)

#endif

/* enum witsml20__BitDullCode * has binding name 'PointerTowitsml20__BitDullCode' for type 'witsml20:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitDullCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitDullCode (-1224)

#endif

/* enum witsml20__IadcIntegerCode * has binding name 'PointerTowitsml20__IadcIntegerCode' for type 'witsml20:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IadcIntegerCode (-1223)

#endif

/* enum witsml20__BitType * has binding name 'PointerTowitsml20__BitType' for type 'witsml20:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitType (-1222)

#endif

/* witsml20__Nozzle * has binding name 'PointerTowitsml20__Nozzle' for type 'witsml20:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Nozzle (-1220)

#endif

/* witsml20__RotarySteerableTool * has binding name 'PointerTowitsml20__RotarySteerableTool' for type 'witsml20:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RotarySteerableTool (-1219)

#endif

/* witsml20__HoleOpener * has binding name 'PointerTowitsml20__HoleOpener' for type 'witsml20:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleOpener
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__HoleOpener (-1218)

#endif

/* witsml20__Bend * has binding name 'PointerTowitsml20__Bend' for type 'witsml20:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Bend
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Bend (-1216)

#endif

/* witsml20__Stabilizer * has binding name 'PointerTowitsml20__Stabilizer' for type 'witsml20:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Stabilizer (-1214)

#endif

/* witsml20__Motor * has binding name 'PointerTowitsml20__Motor' for type 'witsml20:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Motor
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Motor (-1213)

#endif

/* witsml20__BitRecord * has binding name 'PointerTowitsml20__BitRecord' for type 'witsml20:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BitRecord (-1212)

#endif

/* witsml20__MwdTool * has binding name 'PointerTowitsml20__MwdTool' for type 'witsml20:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MwdTool
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MwdTool (-1211)

#endif

/* witsml20__Jar * has binding name 'PointerTowitsml20__Jar' for type 'witsml20:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Jar
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Jar (-1210)

#endif

/* witsml20__Connection * has binding name 'PointerTowitsml20__Connection' for type 'witsml20:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Connection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Connection (-1208)

#endif

/* eml21__AreaMeasure * has binding name 'PointerToeml21__AreaMeasure' for type 'eml21:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AreaMeasure (-1207)

#endif

/* witsml20__NameTag * has binding name 'PointerTowitsml20__NameTag' for type 'witsml20:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTag
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTag (-1205)

#endif

/* eml21__AnglePerLengthMeasure * has binding name 'PointerToeml21__AnglePerLengthMeasure' for type 'eml21:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AnglePerLengthMeasure (-1204)

#endif

/* enum witsml20__MaterialType * has binding name 'PointerTowitsml20__MaterialType' for type 'witsml20:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MaterialType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MaterialType (-1203)

#endif

/* eml21__ForcePerLengthMeasure * has binding name 'PointerToeml21__ForcePerLengthMeasure' for type 'eml21:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForcePerLengthMeasure (-1202)

#endif

/* enum witsml20__BoxPinConfig * has binding name 'PointerTowitsml20__BoxPinConfig' for type 'witsml20:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoxPinConfig (-1201)

#endif

/* eml21__LengthPerLengthMeasure * has binding name 'PointerToeml21__LengthPerLengthMeasure' for type 'eml21:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthPerLengthMeasure (-1200)

#endif

/* eml21__VolumeMeasure * has binding name 'PointerToeml21__VolumeMeasure' for type 'eml21:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__VolumeMeasure (-1199)

#endif

/* eml21__MomentOfForceMeasure * has binding name 'PointerToeml21__MomentOfForceMeasure' for type 'eml21:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MomentOfForceMeasure (-1198)

#endif

/* enum witsml20__PerforationToolType * has binding name 'PointerTowitsml20__PerforationToolType' for type 'witsml20:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationToolType (-1197)

#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTodouble
#define SOAP_TYPE_gsoap_eml2_1_PointerTodouble (-1196)

#endif

/* witsml20__PerforationSet * has binding name 'PointerTowitsml20__PerforationSet' for type 'witsml20:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSet (-1194)

#endif

/* eml21__ReciprocalLengthMeasure * has binding name 'PointerToeml21__ReciprocalLengthMeasure' for type 'eml21:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ReciprocalLengthMeasure (-1193)

#endif

/* eml21__PlaneAngleMeasure * has binding name 'PointerToeml21__PlaneAngleMeasure' for type 'eml21:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PlaneAngleMeasure (-1192)

#endif

/* witsml20__PerfHole * has binding name 'PointerTowitsml20__PerfHole' for type 'witsml20:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerfHole (-1190)

#endif

/* witsml20__PerfSlot * has binding name 'PointerTowitsml20__PerfSlot' for type 'witsml20:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerfSlot (-1188)

#endif

/* witsml20__ExtPropNameValue * has binding name 'PointerTowitsml20__ExtPropNameValue' for type 'witsml20:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ExtPropNameValue (-1186)

#endif

/* enum witsml20__Coating * has binding name 'PointerTowitsml20__Coating' for type 'witsml20:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Coating
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Coating (-1185)

#endif

/* eml21__MassPerLengthMeasure * has binding name 'PointerToeml21__MassPerLengthMeasure' for type 'eml21:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MassPerLengthMeasure (-1184)

#endif

/* enum witsml20__GradeType * has binding name 'PointerTowitsml20__GradeType' for type 'witsml20:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GradeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GradeType (-1183)

#endif

/* witsml20__Equipment * has binding name 'PointerTowitsml20__Equipment' for type 'witsml20:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Equipment
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Equipment (-1181)

#endif

/* enum witsml20__GeologyType * has binding name 'PointerTowitsml20__GeologyType' for type 'witsml20:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeologyType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeologyType (-1179)

#endif

/* enum witsml20__BoreholeType * has binding name 'PointerTowitsml20__BoreholeType' for type 'witsml20:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeType (-1178)

#endif

/* witsml20__GeologyFeature * has binding name 'PointerTowitsml20__GeologyFeature' for type 'witsml20:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GeologyFeature (-1176)

#endif

/* witsml20__Borehole * has binding name 'PointerTowitsml20__Borehole' for type 'witsml20:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Borehole
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Borehole (-1174)

#endif

/* witsml20__BoreholeString * has binding name 'PointerTowitsml20__BoreholeString' for type 'witsml20:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__BoreholeString (-1172)

#endif

/* witsml20__EventRefInfo * has binding name 'PointerTowitsml20__EventRefInfo' for type 'witsml20:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EventRefInfo (-1171)

#endif

/* witsml20__EquipmentConnection * has binding name 'PointerTowitsml20__EquipmentConnection' for type 'witsml20:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentConnection (-1169)

#endif

/* witsml20__ReferenceContainer * has binding name 'PointerTowitsml20__ReferenceContainer' for type 'witsml20:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ReferenceContainer (-1167)

#endif

/* witsml20__ObjectSequence * has binding name 'PointerTowitsml20__ObjectSequence' for type 'witsml20:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__ObjectSequence (-1166)

#endif

/* witsml20__Assembly * has binding name 'PointerTowitsml20__Assembly' for type 'witsml20:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Assembly
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__Assembly (-1165)

#endif

/* eml21__ThermodynamicTemperatureMeasure * has binding name 'PointerToeml21__ThermodynamicTemperatureMeasure' for type 'eml21:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ThermodynamicTemperatureMeasure (-1164)

#endif

/* eml21__PressureMeasure * has binding name 'PointerToeml21__PressureMeasure' for type 'eml21:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__PressureMeasure (-1163)

#endif

/* eml21__ForceMeasure * has binding name 'PointerToeml21__ForceMeasure' for type 'eml21:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ForceMeasure (-1162)

#endif

/* eml21__TimeMeasure * has binding name 'PointerToeml21__TimeMeasure' for type 'eml21:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeMeasure (-1161)

#endif

/* std::string * has binding name 'PointerTowitsml20__EquipmentTypeExt' for type 'witsml20:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EquipmentTypeExt (-1159)

#endif

/* witsml20__StringEquipment * has binding name 'PointerTowitsml20__StringEquipment' for type 'witsml20:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringEquipment (-1157)

#endif

/* witsml20__DownholeString * has binding name 'PointerTowitsml20__DownholeString' for type 'witsml20:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DownholeString (-1156)

#endif

/* eml21__DataObjectReference * has binding name 'PointerToeml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__DataObjectReference (-1155)

#endif

/* eml21__CustomData * has binding name 'PointerToeml21__CustomData' for type 'eml21:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__CustomData
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__CustomData (-1154)

#endif

/* witsml20__StringEquipmentSet * has binding name 'PointerTowitsml20__StringEquipmentSet' for type 'witsml20:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringEquipmentSet (-1153)

#endif

/* witsml20__StringAccessory * has binding name 'PointerTowitsml20__StringAccessory' for type 'witsml20:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringAccessory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__StringAccessory (-1152)

#endif

/* eml21__LengthMeasure * has binding name 'PointerToeml21__LengthMeasure' for type 'eml21:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__LengthMeasure (-1151)

#endif

/* enum witsml20__SubStringType * has binding name 'PointerTowitsml20__SubStringType' for type 'witsml20:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SubStringType
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SubStringType (-1150)

#endif

/* enum witsml20__PerforationStatus * has binding name 'PointerTowitsml20__PerforationStatus' for type 'witsml20:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationStatus (-1149)

#endif

/* witsml20__PerforationStatusHistory * has binding name 'PointerTowitsml20__PerforationStatusHistory' for type 'witsml20:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationStatusHistory (-1147)

#endif

/* double * has binding name 'PointerTowitsml20__NonNegativeFraction' for type 'witsml20:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NonNegativeFraction (-1146)

#endif

/* enum witsml20__PhysicalStatus * has binding name 'PointerTowitsml20__PhysicalStatus' for type 'witsml20:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PhysicalStatus (-1145)

#endif

/* witsml20__IntervalStatusHistory * has binding name 'PointerTowitsml20__IntervalStatusHistory' for type 'witsml20:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__IntervalStatusHistory (-1143)

#endif

/* witsml20__EventInfo * has binding name 'PointerTowitsml20__EventInfo' for type 'witsml20:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EventInfo (-1142)

#endif

/* eml21__TvdInterval * has binding name 'PointerToeml21__TvdInterval' for type 'eml21:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TvdInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TvdInterval (-1141)

#endif

/* eml21__MdInterval * has binding name 'PointerToeml21__MdInterval' for type 'eml21:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MdInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__MdInterval (-1140)

#endif

/* witsml20__GravelPackInterval * has binding name 'PointerTowitsml20__GravelPackInterval' for type 'witsml20:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__GravelPackInterval (-1138)

#endif

/* witsml20__PerforationSetInterval * has binding name 'PointerTowitsml20__PerforationSetInterval' for type 'witsml20:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PerforationSetInterval (-1136)

#endif

/* witsml20__OpenHoleInterval * has binding name 'PointerTowitsml20__OpenHoleInterval' for type 'witsml20:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__OpenHoleInterval (-1134)

#endif

/* witsml20__SlotsInterval * has binding name 'PointerTowitsml20__SlotsInterval' for type 'witsml20:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SlotsInterval (-1132)

#endif

/* std::string * has binding name 'PointerToeml21__TimeStamp' for type 'eml21:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeStamp
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__TimeStamp (-1131)

#endif

/* enum witsml20__NameTagLocation * has binding name 'PointerTowitsml20__NameTagLocation' for type 'witsml20:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTagLocation (-1130)

#endif

/* enum witsml20__NameTagTechnology * has binding name 'PointerTowitsml20__NameTagTechnology' for type 'witsml20:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NameTagTechnology (-1129)

#endif

/* witsml20__DistanceEastWest * has binding name 'PointerTowitsml20__DistanceEastWest' for type 'witsml20:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DistanceEastWest (-1128)

#endif

/* witsml20__DistanceNorthSouth * has binding name 'PointerTowitsml20__DistanceNorthSouth' for type 'witsml20:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__DistanceNorthSouth (-1127)

#endif

/* std::string * has binding name 'PointerTowitsml20__PublicLandSurveySystemQuarterTownship' for type 'witsml20:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystemQuarterTownship (-1126)

#endif

/* std::string * has binding name 'PointerTowitsml20__PublicLandSurveySystemQuarterSection' for type 'witsml20:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PublicLandSurveySystemQuarterSection (-1125)

#endif

/* std::string * has binding name 'PointerTowitsml20__SectionNumber' for type 'witsml20:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SectionNumber
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__SectionNumber (-1124)

#endif

/* enum witsml20__NorthOrSouth * has binding name 'PointerTowitsml20__NorthOrSouth' for type 'witsml20:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__NorthOrSouth (-1123)

#endif

/* enum witsml20__EastOrWest * has binding name 'PointerTowitsml20__EastOrWest' for type 'witsml20:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EastOrWest
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__EastOrWest (-1122)

#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToint
#define SOAP_TYPE_gsoap_eml2_1_PointerToint (-1121)

#endif

/* enum witsml20__PrincipalMeridian * has binding name 'PointerTowitsml20__PrincipalMeridian' for type 'witsml20:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__PrincipalMeridian (-1120)

#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTobool
#define SOAP_TYPE_gsoap_eml2_1_PointerTobool (-1119)

#endif

/* eml21__AbstractVerticalCrs * has binding name 'PointerToeml21__AbstractVerticalCrs' for type 'eml21:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__AbstractVerticalCrs (-1117)

#endif

/* witsml20__RefWellboreRig * has binding name 'PointerTowitsml20__RefWellboreRig' for type 'witsml20:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellboreRig (-1116)

#endif

/* witsml20__RefWellbore * has binding name 'PointerTowitsml20__RefWellbore' for type 'witsml20:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellbore
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__RefWellbore (-1115)

#endif

/* enum eml21__WellboreDatumReference * has binding name 'PointerToeml21__WellboreDatumReference' for type 'eml21:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__WellboreDatumReference (-1113)

#endif

/* witsml20__AbstractWellLocation * has binding name 'PointerTowitsml20__AbstractWellLocation' for type 'witsml20:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__AbstractWellLocation (-1110)

#endif

/* witsml20__WellElevationCoord * has binding name 'PointerTowitsml20__WellElevationCoord' for type 'witsml20:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__WellElevationCoord (-1109)

#endif

/* eml21__ExtensionNameValue * has binding name 'PointerToeml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__ExtensionNameValue (-1107)

#endif

/* std::string * has binding name 'PointerToeml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String2000 (-1106)

#endif

/* witsml20__MeasuredDepthCoord * has binding name 'PointerTowitsml20__MeasuredDepthCoord' for type 'witsml20:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_1_PointerTowitsml20__MeasuredDepthCoord (-1105)

#endif

/* std::string * has binding name 'PointerToeml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String64
#define SOAP_TYPE_gsoap_eml2_1_PointerToeml21__String64 (-1104)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_gsoap_eml2_1__QName
#define SOAP_TYPE_gsoap_eml2_1__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1__XML
#define SOAP_TYPE_gsoap_eml2_1__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_1_string
#define SOAP_TYPE_gsoap_eml2_1_string (-4)

#endif

/* std::vector<eml21__IntegerConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml21__IntegerConstantArray' for type 'eml21:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__IntegerConstantArray (-1472)

#endif

/* std::vector<eml21__FloatingPointConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray' for type 'eml21:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FloatingPointConstantArray (-1469)

#endif

/* std::vector<eml21__AbstractGraphicalInformation *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation' for type 'eml21:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractGraphicalInformation (-1465)

#endif

/* std::vector<eml21__FailingRule *>  has binding name 'std__vectorTemplateOfPointerToeml21__FailingRule' for type 'eml21:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FailingRule
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__FailingRule (-1462)

#endif

/* std::vector<eml21__GeologicTime *>  has binding name 'std__vectorTemplateOfPointerToeml21__GeologicTime' for type 'eml21:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__GeologicTime
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__GeologicTime (-1453)

#endif

/* std::vector<eml21__PropertyKind *>  has binding name 'std__vectorTemplateOfPointerToeml21__PropertyKind' for type 'eml21:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__PropertyKind
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__PropertyKind (-1451)

#endif

/* std::vector<eml21__ParameterTemplate *>  has binding name 'std__vectorTemplateOfPointerToeml21__ParameterTemplate' for type 'eml21:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ParameterTemplate (-1449)

#endif

/* std::vector<witsml20__IscwsaErrorTermValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__IscwsaErrorTermValue' for type 'witsml20:IscwsaErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaErrorTermValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaErrorTermValue (-1447)

#endif

/* std::vector<witsml20__IscwsaSurveyToolOperatingInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingInterval' for type 'witsml20:IscwsaSurveyToolOperatingInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingInterval (-1444)

#endif

/* std::vector<witsml20__IscwsaSurveyToolOperatingCondition *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingCondition' for type 'witsml20:IscwsaSurveyToolOperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingCondition
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IscwsaSurveyToolOperatingCondition (-1442)

#endif

/* std::vector<witsml20__TrajectoryStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__TrajectoryStation' for type 'witsml20:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__TrajectoryStation (-1439)

#endif

/* std::vector<witsml20__LithostratigraphicUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__LithostratigraphicUnit' for type 'witsml20:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LithostratigraphicUnit (-1435)

#endif

/* std::vector<witsml20__GeochronologicalUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__GeochronologicalUnit' for type 'witsml20:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GeochronologicalUnit (-1434)

#endif

/* std::vector<witsml20__CuttingsGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__CuttingsGeologyInterval' for type 'witsml20:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsGeologyInterval (-1433)

#endif

/* std::vector<witsml20__CuttingsIntervalLithology *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalLithology' for type 'witsml20:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalLithology (-1431)

#endif

/* std::vector<witsml20__InterpretedGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__InterpretedGeologyInterval' for type 'witsml20:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__InterpretedGeologyInterval (-1428)

#endif

/* std::vector<witsml20__ShowEvaluationInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ShowEvaluationInterval' for type 'witsml20:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ShowEvaluationInterval (-1426)

#endif

/* std::vector<witsml20__WellboreMarker *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__WellboreMarker' for type 'witsml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellboreMarker (-1421)

#endif

/* std::vector<witsml20__DrillReportSurveyStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportSurveyStation' for type 'witsml20:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportSurveyStation (-1413)

#endif

/* std::vector<witsml20__DrillReportPorePressure *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportPorePressure' for type 'witsml20:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportPorePressure (-1410)

#endif

/* std::vector<witsml20__DrillReportStatusInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportStatusInfo' for type 'witsml20:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportStatusInfo (-1408)

#endif

/* std::vector<witsml20__DrillReportGasReadingInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportGasReadingInfo' for type 'witsml20:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportGasReadingInfo (-1405)

#endif

/* std::vector<witsml20__DrillReportPerfInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportPerfInfo' for type 'witsml20:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportPerfInfo (-1403)

#endif

/* std::vector<witsml20__DrillReportStratInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportStratInfo' for type 'witsml20:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportStratInfo (-1401)

#endif

/* std::vector<witsml20__DrillReportControlIncidentInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportControlIncidentInfo' for type 'witsml20:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportControlIncidentInfo (-1399)

#endif

/* std::vector<witsml20__DrillReportEquipFailureInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportEquipFailureInfo' for type 'witsml20:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportEquipFailureInfo (-1397)

#endif

/* std::vector<witsml20__DrillReportLithShowInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportLithShowInfo' for type 'witsml20:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportLithShowInfo (-1395)

#endif

/* std::vector<witsml20__DrillReportFormTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportFormTestInfo' for type 'witsml20:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportFormTestInfo (-1393)

#endif

/* std::vector<witsml20__DrillReportWellTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportWellTestInfo' for type 'witsml20:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportWellTestInfo (-1391)

#endif

/* std::vector<witsml20__DrillReportCoreInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportCoreInfo' for type 'witsml20:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportCoreInfo (-1389)

#endif

/* std::vector<witsml20__DrillReportLogInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillReportLogInfo' for type 'witsml20:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillReportLogInfo (-1387)

#endif

/* std::vector<witsml20__DrillActivity *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillActivity' for type 'witsml20:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillActivity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillActivity (-1385)

#endif

/* std::vector<witsml20__BitRecord *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__BitRecord' for type 'witsml20:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__BitRecord
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__BitRecord (-1383)

#endif

/* std::vector<witsml20__Fluid *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Fluid' for type 'witsml20:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Fluid
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Fluid (-1381)

#endif

/* std::vector<witsml20__DrillingParams *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DrillingParams' for type 'witsml20:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillingParams
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DrillingParams (-1379)

#endif

/* std::vector<witsml20__PointMetadata *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PointMetadata' for type 'witsml20:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PointMetadata
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PointMetadata (-1376)

#endif

/* std::vector<witsml20__LogChannelAxis *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__LogChannelAxis' for type 'witsml20:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LogChannelAxis (-1374)

#endif

/* std::vector<witsml20__ChannelSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ChannelSet' for type 'witsml20:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ChannelSet
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ChannelSet (-1372)

#endif

/* std::vector<witsml20__Channel *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Channel' for type 'witsml20:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Channel
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Channel (-1362)

#endif

/* std::vector<witsml20__ChannelIndex *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ChannelIndex' for type 'witsml20:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ChannelIndex (-1360)

#endif

/* std::vector<witsml20__WellboreGeometrySection *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__WellboreGeometrySection' for type 'witsml20:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellboreGeometrySection (-1358)

#endif

/* std::vector<witsml20__TubularComponent *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__TubularComponent' for type 'witsml20:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__TubularComponent
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__TubularComponent (-1352)

#endif

/* std::vector<witsml20__CompletionStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__CompletionStatusHistory' for type 'witsml20:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CompletionStatusHistory (-1343)

#endif

/* std::vector<witsml20__WellDatum *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__WellDatum' for type 'witsml20:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellDatum
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__WellDatum (-1340)

#endif

/* std::vector<witsml20__ReferencePoint *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ReferencePoint' for type 'witsml20:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ReferencePoint (-1338)

#endif

/* std::vector<eml21__AbstractActivityParameter *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractActivityParameter' for type 'eml21:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractActivityParameter (-1318)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml21__String2000' for type 'eml21:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String2000
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String2000 (-1316)

#endif

/* std::vector<enum eml21__ParameterKind>  has binding name 'std__vectorTemplateOfeml21__ParameterKind' for type 'eml21:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__ParameterKind
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__ParameterKind (-1315)

#endif

/* std::vector<eml21__AbstractParameterKey *>  has binding name 'std__vectorTemplateOfPointerToeml21__AbstractParameterKey' for type 'eml21:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__AbstractParameterKey (-1314)

#endif

/* std::vector<eml21__ExternalDatasetPart *>  has binding name 'std__vectorTemplateOfPointerToeml21__ExternalDatasetPart' for type 'eml21:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExternalDatasetPart (-1310)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOf_XML
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOf_XML (-1304)

#endif

/* std::vector<witsml20__LithologyQualifier *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__LithologyQualifier' for type 'witsml20:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__LithologyQualifier (-1290)

#endif

/* std::vector<witsml20__CuttingsIntervalShow *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalShow' for type 'witsml20:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__CuttingsIntervalShow (-1288)

#endif

/* std::vector<witsml20__RheometerViscosity *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__RheometerViscosity' for type 'witsml20:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__RheometerViscosity (-1268)

#endif

/* std::vector<eml21__ObjectAlias *>  has binding name 'std__vectorTemplateOfPointerToeml21__ObjectAlias' for type 'eml21:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ObjectAlias (-1264)

#endif

/* std::vector<witsml20__Rheometer *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Rheometer' for type 'witsml20:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Rheometer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Rheometer (-1261)

#endif

/* std::vector<eml21__DataObjectReference *>  has binding name 'std__vectorTemplateOfPointerToeml21__DataObjectReference' for type 'eml21:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__DataObjectReference (-1245)

#endif

/* std::vector<witsml20__Sensor *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Sensor' for type 'witsml20:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Sensor
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Sensor (-1234)

#endif

/* std::vector<witsml20__Nozzle *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Nozzle' for type 'witsml20:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Nozzle
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Nozzle (-1221)

#endif

/* std::vector<witsml20__Bend *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Bend' for type 'witsml20:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Bend
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Bend (-1217)

#endif

/* std::vector<witsml20__Stabilizer *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Stabilizer' for type 'witsml20:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Stabilizer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Stabilizer (-1215)

#endif

/* std::vector<witsml20__Connection *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Connection' for type 'witsml20:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Connection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Connection (-1209)

#endif

/* std::vector<witsml20__NameTag *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__NameTag' for type 'witsml20:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__NameTag
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__NameTag (-1206)

#endif

/* std::vector<witsml20__PerforationSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PerforationSet' for type 'witsml20:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationSet
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationSet (-1195)

#endif

/* std::vector<witsml20__PerfHole *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PerfHole' for type 'witsml20:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerfHole
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerfHole (-1191)

#endif

/* std::vector<witsml20__PerfSlot *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PerfSlot' for type 'witsml20:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerfSlot
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerfSlot (-1189)

#endif

/* std::vector<witsml20__ExtPropNameValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ExtPropNameValue' for type 'witsml20:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ExtPropNameValue (-1187)

#endif

/* std::vector<witsml20__Equipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Equipment' for type 'witsml20:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Equipment
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Equipment (-1182)

#endif

/* std::vector<witsml20__DownholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__DownholeString' for type 'witsml20:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DownholeString
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__DownholeString (-1180)

#endif

/* std::vector<witsml20__GeologyFeature *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__GeologyFeature' for type 'witsml20:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GeologyFeature (-1177)

#endif

/* std::vector<witsml20__Borehole *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__Borehole' for type 'witsml20:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Borehole
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__Borehole (-1175)

#endif

/* std::vector<witsml20__BoreholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__BoreholeString' for type 'witsml20:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__BoreholeString
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__BoreholeString (-1173)

#endif

/* std::vector<witsml20__EquipmentConnection *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__EquipmentConnection' for type 'witsml20:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__EquipmentConnection (-1170)

#endif

/* std::vector<witsml20__ReferenceContainer *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__ReferenceContainer' for type 'witsml20:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__ReferenceContainer (-1168)

#endif

/* std::vector<witsml20__EventInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__EventInfo' for type 'witsml20:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__EventInfo
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__EventInfo (-1160)

#endif

/* std::vector<witsml20__StringEquipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__StringEquipment' for type 'witsml20:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__StringEquipment
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__StringEquipment (-1158)

#endif

/* std::vector<witsml20__PerforationStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PerforationStatusHistory' for type 'witsml20:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationStatusHistory (-1148)

#endif

/* std::vector<witsml20__IntervalStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__IntervalStatusHistory' for type 'witsml20:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__IntervalStatusHistory (-1144)

#endif

/* std::vector<witsml20__GravelPackInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__GravelPackInterval' for type 'witsml20:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__GravelPackInterval (-1139)

#endif

/* std::vector<witsml20__PerforationSetInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__PerforationSetInterval' for type 'witsml20:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__PerforationSetInterval (-1137)

#endif

/* std::vector<witsml20__OpenHoleInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__OpenHoleInterval' for type 'witsml20:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__OpenHoleInterval (-1135)

#endif

/* std::vector<witsml20__SlotsInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__SlotsInterval' for type 'witsml20:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__SlotsInterval (-1133)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml21__String64' for type 'eml21:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String64
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfeml21__String64 (-1114)

#endif

/* std::vector<witsml20__AbstractWellLocation *>  has binding name 'std__vectorTemplateOfPointerTowitsml20__AbstractWellLocation' for type 'witsml20:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerTowitsml20__AbstractWellLocation (-1111)

#endif

/* std::vector<eml21__ExtensionNameValue *>  has binding name 'std__vectorTemplateOfPointerToeml21__ExtensionNameValue' for type 'eml21:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_1_std__vectorTemplateOfPointerToeml21__ExtensionNameValue (-1108)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace gsoap_eml2_1


#endif

/* End of gsoap_eml2_1Stub.h */
