/* gsoap_witsml1_4C.cpp
   Generated by gSOAP 2.8.111E for witsml1_4ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool is licensed for commercial use, no resale/redistribution.
--------------------------------------------------------------------------------
Product and source code licensed by Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "gsoap_witsml1_4H.h"

#if defined(__clang__)
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic ignored "-Wcast-qual"
#elif defined(_MSC_VER)
#pragma warning(disable : 4706) /* assignment within conditional expression */
#pragma warning(disable : 4458) /* eclaration hides class member */
#endif

namespace gsoap_witsml1_4 {

SOAP_SOURCE_STAMP("@(#) gsoap_witsml1_4C.cpp ver 2.8.111E 2021-08-04 09:36:05 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_gsoap_witsml1_4_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount:
		return soap_in_witsml14__positiveCount(soap, tag, NULL, "witsml14:positiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractPositiveCount:
		return soap_in_witsml14__abstractPositiveCount(soap, tag, NULL, "witsml14:abstractPositiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__levelIntegerCode:
		return soap_in_witsml14__levelIntegerCode(soap, tag, NULL, "witsml14:levelIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcIntegerCode:
		return soap_in_witsml14__iadcIntegerCode(soap, tag, NULL, "witsml14:iadcIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pumpActionIntegerCode:
		return soap_in_witsml14__pumpActionIntegerCode(soap, tag, NULL, "witsml14:pumpActionIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__beaufortScaleIntegerCode:
		return soap_in_witsml14__beaufortScaleIntegerCode(soap, tag, NULL, "witsml14:beaufortScaleIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nonNegativeCount:
		return soap_in_witsml14__nonNegativeCount(soap, tag, NULL, "witsml14:nonNegativeCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractShort:
		return soap_in_witsml14__abstractShort(soap, tag, NULL, "witsml14:abstractShort");
	case SOAP_TYPE_gsoap_witsml1_4_short:
		return soap_in_short(soap, tag, NULL, "xsd:short");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__integerCount:
		return soap_in_witsml14__integerCount(soap, tag, NULL, "witsml14:integerCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveBigCount:
		return soap_in_witsml14__positiveBigCount(soap, tag, NULL, "witsml14:positiveBigCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__calendarYear:
		return soap_in_witsml14__calendarYear(soap, tag, NULL, "witsml14:calendarYear");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractInt:
		return soap_in_witsml14__abstractInt(soap, tag, NULL, "witsml14:abstractInt");
	case SOAP_TYPE_gsoap_witsml1_4_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__gtZeroAndLeOne:
		return soap_in_witsml14__gtZeroAndLeOne(soap, tag, NULL, "witsml14:gtZeroAndLeOne");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity:
		return soap_in_witsml14__unitlessQuantity(soap, tag, NULL, "witsml14:unitlessQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDouble:
		return soap_in_witsml14__abstractDouble(soap, tag, NULL, "witsml14:abstractDouble");
	case SOAP_TYPE_gsoap_witsml1_4_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean:
		return soap_in_witsml14__logicalBoolean(soap, tag, NULL, "witsml14:logicalBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean:
		return soap_in_witsml14__abstractBoolean(soap, tag, NULL, "witsml14:abstractBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus:
		return soap_in_witsml14__WellStatus(soap, tag, NULL, "witsml14:WellStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose:
		return soap_in_witsml14__WellPurpose(soap, tag, NULL, "witsml14:WellPurpose");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType:
		return soap_in_witsml14__WellboreType(soap, tag, NULL, "witsml14:WellboreType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape:
		return soap_in_witsml14__WellboreShape(soap, tag, NULL, "witsml14:WellboreShape");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType:
		return soap_in_witsml14__WellTestType(soap, tag, NULL, "witsml14:WellTestType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem:
		return soap_in_witsml14__WellNamingSystem(soap, tag, NULL, "witsml14:WellNamingSystem");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType:
		return soap_in_witsml14__WellKillingProcedureType(soap, tag, NULL, "witsml14:WellKillingProcedureType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid:
		return soap_in_witsml14__WellFluid(soap, tag, NULL, "witsml14:WellFluid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection:
		return soap_in_witsml14__WellDirection(soap, tag, NULL, "witsml14:WellDirection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType:
		return soap_in_witsml14__WellControlIncidentType(soap, tag, NULL, "witsml14:WellControlIncidentType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent:
		return soap_in_witsml14__TubularComponent(soap, tag, NULL, "witsml14:TubularComponent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly:
		return soap_in_witsml14__TubularAssembly(soap, tag, NULL, "witsml14:TubularAssembly");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType:
		return soap_in_witsml14__TrajStationType(soap, tag, NULL, "witsml14:TrajStationType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus:
		return soap_in_witsml14__TrajStationStatus(soap, tag, NULL, "witsml14:TrajStationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope:
		return soap_in_witsml14__TargetSectionScope(soap, tag, NULL, "witsml14:TargetSectionScope");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope:
		return soap_in_witsml14__TargetScope(soap, tag, NULL, "witsml14:TargetScope");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory:
		return soap_in_witsml14__TargetCategory(soap, tag, NULL, "witsml14:TargetCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode:
		return soap_in_witsml14__SurveyToolOperatingMode(soap, tag, NULL, "witsml14:SurveyToolOperatingMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType:
		return soap_in_witsml14__SurfEquipType(soap, tag, NULL, "witsml14:SurfEquipType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft:
		return soap_in_witsml14__SupportCraft(soap, tag, NULL, "witsml14:SupportCraft");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType:
		return soap_in_witsml14__StimStageType(soap, tag, NULL, "witsml14:StimStageType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType:
		return soap_in_witsml14__StimStageFlowPathType(soap, tag, NULL, "witsml14:StimStageFlowPathType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType:
		return soap_in_witsml14__StimProppantType(soap, tag, NULL, "witsml14:StimProppantType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType:
		return soap_in_witsml14__StimFluidType(soap, tag, NULL, "witsml14:StimFluidType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype:
		return soap_in_witsml14__StimFluidSubtype(soap, tag, NULL, "witsml14:StimFluidSubtype");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod:
		return soap_in_witsml14__StimAnalysisMethod(soap, tag, NULL, "witsml14:StimAnalysisMethod");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType:
		return soap_in_witsml14__StimAdditiveType(soap, tag, NULL, "witsml14:StimAdditiveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity:
		return soap_in_witsml14__StateDetailActivity(soap, tag, NULL, "witsml14:StateDetailActivity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed:
		return soap_in_witsml14__ShowSpeed(soap, tag, NULL, "witsml14:ShowSpeed");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating:
		return soap_in_witsml14__ShowRating(soap, tag, NULL, "witsml14:ShowRating");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel:
		return soap_in_witsml14__ShowLevel(soap, tag, NULL, "witsml14:ShowLevel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence:
		return soap_in_witsml14__ShowFluorescence(soap, tag, NULL, "witsml14:ShowFluorescence");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType:
		return soap_in_witsml14__ScrType(soap, tag, NULL, "witsml14:ScrType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType:
		return soap_in_witsml14__RiskType(soap, tag, NULL, "witsml14:RiskType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory:
		return soap_in_witsml14__RiskSubCategory(soap, tag, NULL, "witsml14:RiskSubCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory:
		return soap_in_witsml14__RiskCategory(soap, tag, NULL, "witsml14:RiskCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel:
		return soap_in_witsml14__RiskAffectedPersonnel(soap, tag, NULL, "witsml14:RiskAffectedPersonnel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType:
		return soap_in_witsml14__RigType(soap, tag, NULL, "witsml14:RigType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind:
		return soap_in_witsml14__ReadingKind(soap, tag, NULL, "witsml14:ReadingKind");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType:
		return soap_in_witsml14__PumpOpType(soap, tag, NULL, "witsml14:PumpOpType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType:
		return soap_in_witsml14__PumpType(soap, tag, NULL, "witsml14:PumpType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian:
		return soap_in_witsml14__PrincipalMeridian(soap, tag, NULL, "witsml14:PrincipalMeridian");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType:
		return soap_in_witsml14__PresTestType(soap, tag, NULL, "witsml14:PresTestType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator:
		return soap_in_witsml14__ProjectionVariantsObliqueMercator(soap, tag, NULL, "witsml14:ProjectionVariantsObliqueMercator");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection:
		return soap_in_witsml14__Projection(soap, tag, NULL, "witsml14:Projection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType:
		return soap_in_witsml14__PrimitiveType(soap, tag, NULL, "witsml14:PrimitiveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType:
		return soap_in_witsml14__PitType(soap, tag, NULL, "witsml14:PitType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode:
		return soap_in_witsml14__PIDXCommodityCode(soap, tag, NULL, "witsml14:PIDXCommodityCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion:
		return soap_in_witsml14__OpsReportVersion(soap, tag, NULL, "witsml14:OpsReportVersion");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType:
		return soap_in_witsml14__NozzleType(soap, tag, NULL, "witsml14:NozzleType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth:
		return soap_in_witsml14__NorthOrSouth(soap, tag, NULL, "witsml14:NorthOrSouth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes:
		return soap_in_witsml14__NADTypes(soap, tag, NULL, "witsml14:NADTypes");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType:
		return soap_in_witsml14__MudLogParameterType(soap, tag, NULL, "witsml14:MudLogParameterType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass:
		return soap_in_witsml14__MudClass(soap, tag, NULL, "witsml14:MudClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType:
		return soap_in_witsml14__MessageType(soap, tag, NULL, "witsml14:MessageType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity:
		return soap_in_witsml14__MessageSeverity(soap, tag, NULL, "witsml14:MessageSeverity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability:
		return soap_in_witsml14__MessageProbability(soap, tag, NULL, "witsml14:MessageProbability");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType:
		return soap_in_witsml14__MeasurementType(soap, tag, NULL, "witsml14:MeasurementType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType:
		return soap_in_witsml14__MaterialType(soap, tag, NULL, "witsml14:MaterialType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState:
		return soap_in_witsml14__LogTraceState(soap, tag, NULL, "witsml14:LogTraceState");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin:
		return soap_in_witsml14__LogTraceOrigin(soap, tag, NULL, "witsml14:LogTraceOrigin");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType:
		return soap_in_witsml14__LogIndexType(soap, tag, NULL, "witsml14:LogIndexType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection:
		return soap_in_witsml14__LogIndexDirection(soap, tag, NULL, "witsml14:LogIndexDirection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType:
		return soap_in_witsml14__LogDataType(soap, tag, NULL, "witsml14:LogDataType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit:
		return soap_in_witsml14__LithostratigraphyUnit(soap, tag, NULL, "witsml14:LithostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource:
		return soap_in_witsml14__LithologySource(soap, tag, NULL, "witsml14:LithologySource");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction:
		return soap_in_witsml14__JarAction(soap, tag, NULL, "witsml14:JarAction");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType:
		return soap_in_witsml14__JarType(soap, tag, NULL, "witsml14:JarType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState:
		return soap_in_witsml14__ItemState(soap, tag, NULL, "witsml14:ItemState");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType:
		return soap_in_witsml14__InnerBarrelType(soap, tag, NULL, "witsml14:InnerBarrelType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType:
		return soap_in_witsml14__HoleOpenerType(soap, tag, NULL, "witsml14:HoleOpenerType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType:
		return soap_in_witsml14__HoleCasingType(soap, tag, NULL, "witsml14:HoleCasingType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres:
		return soap_in_witsml14__Hemispheres(soap, tag, NULL, "witsml14:Hemispheres");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum:
		return soap_in_witsml14__GeodeticDatum(soap, tag, NULL, "witsml14:GeodeticDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType:
		return soap_in_witsml14__GasPeakType(soap, tag, NULL, "witsml14:GasPeakType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode:
		return soap_in_witsml14__ErrorModelMisalignmentMode(soap, tag, NULL, "witsml14:ErrorModelMisalignmentMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode:
		return soap_in_witsml14__ErrorPropagationMode(soap, tag, NULL, "witsml14:ErrorPropagationMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource:
		return soap_in_witsml14__ErrorTermSource(soap, tag, NULL, "witsml14:ErrorTermSource");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid:
		return soap_in_witsml14__Ellipsoid(soap, tag, NULL, "witsml14:Ellipsoid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum:
		return soap_in_witsml14__ElevCodeEnum(soap, tag, NULL, "witsml14:ElevCodeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest:
		return soap_in_witsml14__EastOrWest(soap, tag, NULL, "witsml14:EastOrWest");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType:
		return soap_in_witsml14__DriveType(soap, tag, NULL, "witsml14:DriveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType:
		return soap_in_witsml14__DrawWorksType(soap, tag, NULL, "witsml14:DrawWorksType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType:
		return soap_in_witsml14__DerrickType(soap, tag, NULL, "witsml14:DerrickType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod:
		return soap_in_witsml14__DeflectionMethod(soap, tag, NULL, "witsml14:DeflectionMethod");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition:
		return soap_in_witsml14__ConnectionPosition(soap, tag, NULL, "witsml14:ConnectionPosition");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit:
		return soap_in_witsml14__ChronostratigraphyUnit(soap, tag, NULL, "witsml14:ChronostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType:
		return soap_in_witsml14__ChangeInfoType(soap, tag, NULL, "witsml14:ChangeInfoType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType:
		return soap_in_witsml14__CementJobType(soap, tag, NULL, "witsml14:CementJobType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig:
		return soap_in_witsml14__BoxPinConfig(soap, tag, NULL, "witsml14:BoxPinConfig");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType:
		return soap_in_witsml14__BopType(soap, tag, NULL, "witsml14:BopType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType:
		return soap_in_witsml14__BladeType(soap, tag, NULL, "witsml14:BladeType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType:
		return soap_in_witsml14__BladeShapeType(soap, tag, NULL, "witsml14:BladeShapeType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus:
		return soap_in_witsml14__BhaStatus(soap, tag, NULL, "witsml14:BhaStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType:
		return soap_in_witsml14__BitType(soap, tag, NULL, "witsml14:BitType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled:
		return soap_in_witsml14__BitReasonPulled(soap, tag, NULL, "witsml14:BitReasonPulled");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode:
		return soap_in_witsml14__BitDullCode(soap, tag, NULL, "witsml14:BitDullCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType:
		return soap_in_witsml14__BearingType(soap, tag, NULL, "witsml14:BearingType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef:
		return soap_in_witsml14__AziRef(soap, tag, NULL, "witsml14:AziRef");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus:
		return soap_in_witsml14__AuthorizationStatus(soap, tag, NULL, "witsml14:AuthorizationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType:
		return soap_in_witsml14__ActivityClassType(soap, tag, NULL, "witsml14:ActivityClassType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom:
		return soap_in_witsml14__VolumePerVolumeUom(soap, tag, NULL, "witsml14:VolumePerVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom:
		return soap_in_witsml14__VolumePerLengthUom(soap, tag, NULL, "witsml14:VolumePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom:
		return soap_in_witsml14__VolumeFlowRateUom(soap, tag, NULL, "witsml14:VolumeFlowRateUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom:
		return soap_in_witsml14__VolumeUom(soap, tag, NULL, "witsml14:VolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom:
		return soap_in_witsml14__VelocityUom(soap, tag, NULL, "witsml14:VelocityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom:
		return soap_in_witsml14__TimeUom(soap, tag, NULL, "witsml14:TimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom:
		return soap_in_witsml14__ThermodynamicTemperatureUom(soap, tag, NULL, "witsml14:ThermodynamicTemperatureUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom:
		return soap_in_witsml14__ThermalVolumetricExpansionUom(soap, tag, NULL, "witsml14:ThermalVolumetricExpansionUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom:
		return soap_in_witsml14__ThermalConductivityUom(soap, tag, NULL, "witsml14:ThermalConductivityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom:
		return soap_in_witsml14__StandardVolumePerTimeUom(soap, tag, NULL, "witsml14:StandardVolumePerTimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom:
		return soap_in_witsml14__StandardVolumeUom(soap, tag, NULL, "witsml14:StandardVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom:
		return soap_in_witsml14__SpecificVolumeUom(soap, tag, NULL, "witsml14:SpecificVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom:
		return soap_in_witsml14__SpecificHeatCapacityUom(soap, tag, NULL, "witsml14:SpecificHeatCapacityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom:
		return soap_in_witsml14__RelativePowerUom(soap, tag, NULL, "witsml14:RelativePowerUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom:
		return soap_in_witsml14__PressureUom(soap, tag, NULL, "witsml14:PressureUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom:
		return soap_in_witsml14__PowerUom(soap, tag, NULL, "witsml14:PowerUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom:
		return soap_in_witsml14__PlaneAngleUom(soap, tag, NULL, "witsml14:PlaneAngleUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom:
		return soap_in_witsml14__PermeabilityRockUom(soap, tag, NULL, "witsml14:PermeabilityRockUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom:
		return soap_in_witsml14__PerLengthUom(soap, tag, NULL, "witsml14:PerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom:
		return soap_in_witsml14__MomentOfForceUom(soap, tag, NULL, "witsml14:MomentOfForceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom:
		return soap_in_witsml14__MassPerLengthUom(soap, tag, NULL, "witsml14:MassPerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom:
		return soap_in_witsml14__MassUom(soap, tag, NULL, "witsml14:MassUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom:
		return soap_in_witsml14__MassConcentrationUom(soap, tag, NULL, "witsml14:MassConcentrationUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom:
		return soap_in_witsml14__MagneticInductionUom(soap, tag, NULL, "witsml14:MagneticInductionUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom:
		return soap_in_witsml14__LengthPerLengthUom(soap, tag, NULL, "witsml14:LengthPerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom:
		return soap_in_witsml14__LengthUom(soap, tag, NULL, "witsml14:LengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom:
		return soap_in_witsml14__IlluminanceUom(soap, tag, NULL, "witsml14:IlluminanceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom:
		return soap_in_witsml14__ForcePerVolumeUom(soap, tag, NULL, "witsml14:ForcePerVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom:
		return soap_in_witsml14__ForcePerLengthUom(soap, tag, NULL, "witsml14:ForcePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom:
		return soap_in_witsml14__ForceUom(soap, tag, NULL, "witsml14:ForceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom:
		return soap_in_witsml14__EquivalentPerMassUom(soap, tag, NULL, "witsml14:EquivalentPerMassUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom:
		return soap_in_witsml14__ElectricPotentialUom(soap, tag, NULL, "witsml14:ElectricPotentialUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom:
		return soap_in_witsml14__ElectricCurrentUom(soap, tag, NULL, "witsml14:ElectricCurrentUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom:
		return soap_in_witsml14__DynamicViscosityUom(soap, tag, NULL, "witsml14:DynamicViscosityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom:
		return soap_in_witsml14__DimensionlessUom(soap, tag, NULL, "witsml14:DimensionlessUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom:
		return soap_in_witsml14__DensityUom(soap, tag, NULL, "witsml14:DensityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom:
		return soap_in_witsml14__CompressibilityUom(soap, tag, NULL, "witsml14:CompressibilityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom:
		return soap_in_witsml14__AreaPerAreaUom(soap, tag, NULL, "witsml14:AreaPerAreaUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom:
		return soap_in_witsml14__AreaUom(soap, tag, NULL, "witsml14:AreaUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom:
		return soap_in_witsml14__AnglePerTimeUom(soap, tag, NULL, "witsml14:AnglePerTimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom:
		return soap_in_witsml14__AnglePerLengthUom(soap, tag, NULL, "witsml14:AnglePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom:
		return soap_in_witsml14__AccelerationLinearUom(soap, tag, NULL, "witsml14:AccelerationLinearUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom:
		return soap_in_witsml14__WellVerticalCoordinateUom(soap, tag, NULL, "witsml14:WellVerticalCoordinateUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom:
		return soap_in_witsml14__MeasuredDepthUom(soap, tag, NULL, "witsml14:MeasuredDepthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom:
		return soap_in_witsml14__PercentUom(soap, tag, NULL, "witsml14:PercentUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		return soap_in_witsml14__commentString(soap, tag, NULL, "witsml14:commentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		return soap_in_witsml14__TypeSurveyTool(soap, tag, NULL, "witsml14:TypeSurveyTool");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		return soap_in_witsml14__TrajStnCalcAlgorithm(soap, tag, NULL, "witsml14:TrajStnCalcAlgorithm");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		return soap_in_witsml14__QualifierType(soap, tag, NULL, "witsml14:QualifierType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		return soap_in_witsml14__NameTagTechnology(soap, tag, NULL, "witsml14:NameTagTechnology");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		return soap_in_witsml14__NameTagNumberingScheme(soap, tag, NULL, "witsml14:NameTagNumberingScheme");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		return soap_in_witsml14__NameTagLocation(soap, tag, NULL, "witsml14:NameTagLocation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		return soap_in_witsml14__MudSubClass(soap, tag, NULL, "witsml14:MudSubClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		return soap_in_witsml14__MeasureClass(soap, tag, NULL, "witsml14:MeasureClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		return soap_in_witsml14__MatrixCementType(soap, tag, NULL, "witsml14:MatrixCementType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		return soap_in_witsml14__LithologyType(soap, tag, NULL, "witsml14:LithologyType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		return soap_in_witsml14__ExtensionName(soap, tag, NULL, "witsml14:ExtensionName");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		return soap_in_witsml14__ActivityCode(soap, tag, NULL, "witsml14:ActivityCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		return soap_in_witsml14__abstractCommentString(soap, tag, NULL, "witsml14:abstractCommentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		return soap_in_witsml14__str32(soap, tag, NULL, "witsml14:str32");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		return soap_in_witsml14__uomString(soap, tag, NULL, "witsml14:uomString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		return soap_in_witsml14__kindString(soap, tag, NULL, "witsml14:kindString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		return soap_in_witsml14__encodedValueString(soap, tag, NULL, "witsml14:encodedValueString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		return soap_in_witsml14__descriptionString(soap, tag, NULL, "witsml14:descriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		return soap_in_witsml14__nameString(soap, tag, NULL, "witsml14:nameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		return soap_in_witsml14__refWellDatum(soap, tag, NULL, "witsml14:refWellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		return soap_in_witsml14__refString(soap, tag, NULL, "witsml14:refString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		return soap_in_witsml14__uidParentString(soap, tag, NULL, "witsml14:uidParentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		return soap_in_witsml14__uidString(soap, tag, NULL, "witsml14:uidString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		return soap_in_witsml14__timeZone(soap, tag, NULL, "witsml14:timeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		return soap_in_witsml14__abstractUomEnum(soap, tag, NULL, "witsml14:abstractUomEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		return soap_in_witsml14__abstractTypeEnum(soap, tag, NULL, "witsml14:abstractTypeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		return soap_in_witsml14__abstractString32(soap, tag, NULL, "witsml14:abstractString32");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		return soap_in_witsml14__abstractDescriptionString(soap, tag, NULL, "witsml14:abstractDescriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		return soap_in_witsml14__abstractUidString(soap, tag, NULL, "witsml14:abstractUidString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		return soap_in_witsml14__abstractNameString(soap, tag, NULL, "witsml14:abstractNameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		return soap_in_witsml14__abstractTimeZone(soap, tag, NULL, "witsml14:abstractTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		return soap_in_witsml14__abstractMaximumLengthString(soap, tag, NULL, "witsml14:abstractMaximumLengthString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		return soap_in_witsml14__str16(soap, tag, NULL, "witsml14:str16");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		return soap_in_witsml14__str2(soap, tag, NULL, "witsml14:str2");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		return soap_in_witsml14__publicLandSurveySystemQuarterSection(soap, tag, NULL, "witsml14:publicLandSurveySystemQuarterSection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		return soap_in_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, NULL, "witsml14:publicLandSurveySystemQuarterTownship");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		return soap_in_witsml14__sectionNumber(soap, tag, NULL, "witsml14:sectionNumber");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		return soap_in_witsml14__geodeticZoneString(soap, tag, NULL, "witsml14:geodeticZoneString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		return soap_in_witsml14__iadcBearingWearCode(soap, tag, NULL, "witsml14:iadcBearingWearCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		return soap_in_witsml14__uncollapsedString(soap, tag, NULL, "witsml14:uncollapsedString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		return soap_in_witsml14__schemaVersionString(soap, tag, NULL, "witsml14:schemaVersionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		return soap_in_witsml14__shortDescriptionString(soap, tag, NULL, "witsml14:shortDescriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		return soap_in_witsml14__date(soap, tag, NULL, "witsml14:date");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		return soap_in_witsml14__abstractUncollapsedString(soap, tag, NULL, "witsml14:abstractUncollapsedString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		return soap_in_witsml14__abstractString(soap, tag, NULL, "witsml14:abstractString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		return soap_in_witsml14__abstractDate(soap, tag, NULL, "witsml14:abstractDate");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		return soap_in_witsml14__listOfString(soap, tag, NULL, "witsml14:listOfString");
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		return soap_in_abstract__abstractObject(soap, tag, NULL, "abstract:abstractObject");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		return soap_in_witsml14__cs_USCORErefWellboreTrajectory(soap, tag, NULL, "witsml14:cs_refWellboreTrajectory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		return soap_in_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, NULL, "witsml14:cs_refWellboreTrajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		return soap_in_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag, NULL, "witsml14:cs_stnTrajMatrixCov");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		return soap_in_witsml14__cs_USCOREstnTrajValid(soap, tag, NULL, "witsml14:cs_stnTrajValid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		return soap_in_witsml14__cs_USCOREstnTrajCorUsed(soap, tag, NULL, "witsml14:cs_stnTrajCorUsed");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		return soap_in_witsml14__cs_USCOREstnTrajRawData(soap, tag, NULL, "witsml14:cs_stnTrajRawData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		return soap_in_witsml14__cs_USCOREtrajectoryStation(soap, tag, NULL, "witsml14:cs_trajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		return soap_in_witsml14__obj_USCOREtrajectory(soap, tag, NULL, "witsml14:obj_trajectory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		return soap_in_witsml14__obj_USCOREtrajectorys(soap, tag, NULL, "witsml14:obj_trajectorys");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		return soap_in_witsml14__obj_USCOREwellbore(soap, tag, NULL, "witsml14:obj_wellbore");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		return soap_in_witsml14__obj_USCOREwellbores(soap, tag, NULL, "witsml14:obj_wellbores");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		return soap_in_witsml14__cs_USCOREcustomData(soap, tag, NULL, "witsml14:cs_customData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		return soap_in_witsml14__cs_USCOREextensionAny(soap, tag, NULL, "witsml14:cs_extensionAny");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		return soap_in_witsml14__cs_USCOREcommonData(soap, tag, NULL, "witsml14:cs_commonData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		return soap_in_witsml14__cs_USCORElocalCRS(soap, tag, NULL, "witsml14:cs_localCRS");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		return soap_in_witsml14__cs_USCOREprojectionx(soap, tag, NULL, "witsml14:cs_projectionx");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		return soap_in_witsml14__cs_USCOREgeodeticModel(soap, tag, NULL, "witsml14:cs_geodeticModel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		return soap_in_witsml14__cs_USCOREwellCRS(soap, tag, NULL, "witsml14:cs_wellCRS");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		return soap_in_witsml14__cs_USCOREreferencePoint(soap, tag, NULL, "witsml14:cs_referencePoint");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		return soap_in_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag, NULL, "witsml14:cs_publicLandSurveySystem");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		return soap_in_witsml14__cs_USCORErefWellWellboreRig(soap, tag, NULL, "witsml14:cs_refWellWellboreRig");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		return soap_in_witsml14__cs_USCORErefWellWellbore(soap, tag, NULL, "witsml14:cs_refWellWellbore");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		return soap_in_witsml14__cs_USCOREwellDatum(soap, tag, NULL, "witsml14:cs_wellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		return soap_in_witsml14__cs_USCORElocation(soap, tag, NULL, "witsml14:cs_location");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		return soap_in_witsml14__cs_USCOREdocumentEvent(soap, tag, NULL, "witsml14:cs_documentEvent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		return soap_in_witsml14__cs_USCOREdocumentAudit(soap, tag, NULL, "witsml14:cs_documentAudit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		return soap_in_witsml14__cs_USCOREextensionNameValue(soap, tag, NULL, "witsml14:cs_extensionNameValue");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		return soap_in_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag, NULL, "witsml14:cs_documentSecurityInfo");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		return soap_in_witsml14__abstractMeasure(soap, tag, NULL, "witsml14:abstractMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		return soap_in_witsml14__volumePerVolumeMeasure(soap, tag, NULL, "witsml14:volumePerVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		return soap_in_witsml14__volumePerLengthMeasure(soap, tag, NULL, "witsml14:volumePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		return soap_in_witsml14__volumeFlowRateMeasure(soap, tag, NULL, "witsml14:volumeFlowRateMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		return soap_in_witsml14__volumeMeasure(soap, tag, NULL, "witsml14:volumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		return soap_in_witsml14__velocityMeasure(soap, tag, NULL, "witsml14:velocityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		return soap_in_witsml14__timeMeasure(soap, tag, NULL, "witsml14:timeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		return soap_in_witsml14__thermodynamicTemperatureMeasure(soap, tag, NULL, "witsml14:thermodynamicTemperatureMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		return soap_in_witsml14__thermalVolumetricExpansionMeasure(soap, tag, NULL, "witsml14:thermalVolumetricExpansionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		return soap_in_witsml14__thermalConductivityMeasure(soap, tag, NULL, "witsml14:thermalConductivityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		return soap_in_witsml14__standardVolumePerTimeMeasure(soap, tag, NULL, "witsml14:standardVolumePerTimeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		return soap_in_witsml14__standardVolumeMeasure(soap, tag, NULL, "witsml14:standardVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		return soap_in_witsml14__specificVolumeMeasure(soap, tag, NULL, "witsml14:specificVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		return soap_in_witsml14__specificHeatCapacityMeasure(soap, tag, NULL, "witsml14:specificHeatCapacityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		return soap_in_witsml14__relativePowerMeasure(soap, tag, NULL, "witsml14:relativePowerMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		return soap_in_witsml14__pressureMeasure(soap, tag, NULL, "witsml14:pressureMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		return soap_in_witsml14__powerMeasure(soap, tag, NULL, "witsml14:powerMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		return soap_in_witsml14__planeAngleMeasure(soap, tag, NULL, "witsml14:planeAngleMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		return soap_in_witsml14__permeabilityRockMeasure(soap, tag, NULL, "witsml14:permeabilityRockMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		return soap_in_witsml14__perLengthMeasure(soap, tag, NULL, "witsml14:perLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		return soap_in_witsml14__momentOfForceMeasure(soap, tag, NULL, "witsml14:momentOfForceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		return soap_in_witsml14__massPerLengthMeasure(soap, tag, NULL, "witsml14:massPerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		return soap_in_witsml14__massMeasure(soap, tag, NULL, "witsml14:massMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		return soap_in_witsml14__massConcentrationMeasure(soap, tag, NULL, "witsml14:massConcentrationMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		return soap_in_witsml14__magneticInductionMeasure(soap, tag, NULL, "witsml14:magneticInductionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		return soap_in_witsml14__lengthPerLengthMeasure(soap, tag, NULL, "witsml14:lengthPerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		return soap_in_witsml14__lengthMeasure(soap, tag, NULL, "witsml14:lengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		return soap_in_witsml14__illuminanceMeasure(soap, tag, NULL, "witsml14:illuminanceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		return soap_in_witsml14__forcePerVolumeMeasure(soap, tag, NULL, "witsml14:forcePerVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		return soap_in_witsml14__forcePerLengthMeasure(soap, tag, NULL, "witsml14:forcePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		return soap_in_witsml14__forceMeasure(soap, tag, NULL, "witsml14:forceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		return soap_in_witsml14__equivalentPerMassMeasure(soap, tag, NULL, "witsml14:equivalentPerMassMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		return soap_in_witsml14__electricPotentialMeasure(soap, tag, NULL, "witsml14:electricPotentialMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		return soap_in_witsml14__electricCurrentMeasure(soap, tag, NULL, "witsml14:electricCurrentMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		return soap_in_witsml14__dynamicViscosityMeasure(soap, tag, NULL, "witsml14:dynamicViscosityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		return soap_in_witsml14__dimensionlessMeasure(soap, tag, NULL, "witsml14:dimensionlessMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		return soap_in_witsml14__densityMeasure(soap, tag, NULL, "witsml14:densityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		return soap_in_witsml14__compressibilityMeasure(soap, tag, NULL, "witsml14:compressibilityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		return soap_in_witsml14__areaPerAreaMeasure(soap, tag, NULL, "witsml14:areaPerAreaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		return soap_in_witsml14__areaMeasure(soap, tag, NULL, "witsml14:areaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		return soap_in_witsml14__anglePerTimeMeasure(soap, tag, NULL, "witsml14:anglePerTimeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		return soap_in_witsml14__anglePerLengthMeasure(soap, tag, NULL, "witsml14:anglePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		return soap_in_witsml14__accelerationLinearMeasure(soap, tag, NULL, "witsml14:accelerationLinearMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		return soap_in_witsml14__indexedObject(soap, tag, NULL, "witsml14:indexedObject");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		return soap_in_witsml14__cost(soap, tag, NULL, "witsml14:cost");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		return soap_in_witsml14__footageEastWest(soap, tag, NULL, "witsml14:footageEastWest");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		return soap_in_witsml14__footageNorthSouth(soap, tag, NULL, "witsml14:footageNorthSouth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		return soap_in_witsml14__wellElevationCoord(soap, tag, NULL, "witsml14:wellElevationCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		return soap_in_witsml14__wellVerticalDepthCoord(soap, tag, NULL, "witsml14:wellVerticalDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		return soap_in_witsml14__measuredDepthCoord(soap, tag, NULL, "witsml14:measuredDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		return soap_in_witsml14__chronostratigraphyStruct(soap, tag, NULL, "witsml14:chronostratigraphyStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		return soap_in_witsml14__lithostratigraphyStruct(soap, tag, NULL, "witsml14:lithostratigraphyStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		return soap_in_witsml14__objectSequence(soap, tag, NULL, "witsml14:objectSequence");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		return soap_in_witsml14__wellKnownNameStruct(soap, tag, NULL, "witsml14:wellKnownNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		return soap_in_witsml14__shortNameStruct(soap, tag, NULL, "witsml14:shortNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		return soap_in_witsml14__nameStruct(soap, tag, NULL, "witsml14:nameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		return soap_in_witsml14__extensionvalue(soap, tag, NULL, "witsml14:extensionvalue");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		return soap_in_witsml14__timestampedCommentString(soap, tag, NULL, "witsml14:timestampedCommentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		return soap_in_witsml14__refPositiveCount(soap, tag, NULL, "witsml14:refPositiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		return soap_in_witsml14__refObjectString(soap, tag, NULL, "witsml14:refObjectString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		return soap_in_witsml14__refNameString(soap, tag, NULL, "witsml14:refNameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		return soap_in_witsml14__ratioGenericMeasure(soap, tag, NULL, "witsml14:ratioGenericMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		return soap_in_witsml14__genericMeasure(soap, tag, NULL, "witsml14:genericMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		return soap_in_witsml14__measureOrQuantity(soap, tag, NULL, "witsml14:measureOrQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		return soap_in_witsml14__volumePerVolumeMeasurePercent(soap, tag, NULL, "witsml14:volumePerVolumeMeasurePercent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		return soap_in_witsml14__yAxisAzimuth(soap, tag, NULL, "witsml14:yAxisAzimuth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		return soap_in_witsml14__timestampedTimeZone(soap, tag, NULL, "witsml14:timestampedTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		return soap_in_witsml14__cs_USCOREdocumentFileCreation(soap, tag, NULL, "witsml14:cs_documentFileCreation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		return soap_in_witsml14__cs_USCOREdocumentInfo(soap, tag, NULL, "witsml14:cs_documentInfo");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		return soap_in_witsml14__obj_USCOREwell(soap, tag, NULL, "witsml14:obj_well");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		return soap_in_witsml14__obj_USCOREwells(soap, tag, NULL, "witsml14:obj_wells");
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		return soap_in_xsd__date(soap, tag, NULL, "xsd:date");
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_witsml14__timestamp:
		return soap_in_witsml14__timestamp(soap, tag, NULL, "witsml14:timestamp");
	case SOAP_TYPE_witsml14__abstractDateTime:
		return soap_in_witsml14__abstractDateTime(soap, tag, NULL, "witsml14:abstractDateTime");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		return soap_in_tm(soap, tag, NULL, "tm");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refWellDatum:
		return soap_in_PointerTowitsml14__refWellDatum(soap, tag, NULL, "witsml14:refWellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ChronostratigraphyUnit:
		return soap_in_PointerTowitsml14__ChronostratigraphyUnit(soap, tag, NULL, "witsml14:ChronostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__LithostratigraphyUnit:
		return soap_in_PointerTowitsml14__LithostratigraphyUnit(soap, tag, NULL, "witsml14:LithostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refString:
		return soap_in_PointerTowitsml14__refString(soap, tag, NULL, "witsml14:refString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uomString:
		return soap_in_PointerTowitsml14__uomString(soap, tag, NULL, "witsml14:uomString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREtrajectory:
		return soap_in_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, NULL, "witsml14:obj_trajectory");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwellbore:
		return soap_in_PointerTowitsml14__obj_USCOREwellbore(soap, tag, NULL, "witsml14:obj_wellbore");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwell:
		return soap_in_PointerTowitsml14__obj_USCOREwell(soap, tag, NULL, "witsml14:obj_well");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentInfo:
		return soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(soap, tag, NULL, "witsml14:cs_documentInfo");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__areaMeasure:
		return soap_in_PointerTowitsml14__areaMeasure(soap, tag, NULL, "witsml14:areaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation:
		return soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, NULL, "witsml14:cs_refWellboreTrajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajMatrixCov:
		return soap_in_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, tag, NULL, "witsml14:cs_stnTrajMatrixCov");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajValid:
		return soap_in_PointerTowitsml14__cs_USCOREstnTrajValid(soap, tag, NULL, "witsml14:cs_stnTrajValid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajCorUsed:
		return soap_in_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, tag, NULL, "witsml14:cs_stnTrajCorUsed");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajRawData:
		return soap_in_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, tag, NULL, "witsml14:cs_stnTrajRawData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStationStatus:
		return soap_in_PointerTowitsml14__TrajStationStatus(soap, tag, NULL, "witsml14:TrajStationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__magneticInductionMeasure:
		return soap_in_PointerTowitsml14__magneticInductionMeasure(soap, tag, NULL, "witsml14:magneticInductionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__accelerationLinearMeasure:
		return soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, tag, NULL, "witsml14:accelerationLinearMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__anglePerLengthMeasure:
		return soap_in_PointerTowitsml14__anglePerLengthMeasure(soap, tag, NULL, "witsml14:anglePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStnCalcAlgorithm:
		return soap_in_PointerTowitsml14__TrajStnCalcAlgorithm(soap, tag, NULL, "witsml14:TrajStnCalcAlgorithm");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TypeSurveyTool:
		return soap_in_PointerTowitsml14__TypeSurveyTool(soap, tag, NULL, "witsml14:TypeSurveyTool");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREtrajectoryStation:
		return soap_in_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, NULL, "witsml14:cs_trajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__AziRef:
		return soap_in_PointerTowitsml14__AziRef(soap, tag, NULL, "witsml14:AziRef");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectory:
		return soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, tag, NULL, "witsml14:cs_refWellboreTrajectory");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidParentString:
		return soap_in_PointerTowitsml14__uidParentString(soap, tag, NULL, "witsml14:uidParentString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timeMeasure:
		return soap_in_PointerTowitsml14__timeMeasure(soap, tag, NULL, "witsml14:timeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellVerticalDepthCoord:
		return soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, tag, NULL, "witsml14:wellVerticalDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreShape:
		return soap_in_PointerTowitsml14__WellboreShape(soap, tag, NULL, "witsml14:WellboreShape");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreType:
		return soap_in_PointerTowitsml14__WellboreType(soap, tag, NULL, "witsml14:WellboreType");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionAny:
		return soap_in_PointerTowitsml14__cs_USCOREextensionAny(soap, tag, NULL, "witsml14:cs_extensionAny");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTobool:
		return soap_in_PointerTobool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestampedTimeZone:
		return soap_in_PointerTowitsml14__timestampedTimeZone(soap, tag, NULL, "witsml14:timestampedTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ItemState:
		return soap_in_PointerTowitsml14__ItemState(soap, tag, NULL, "witsml14:ItemState");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__yAxisAzimuth:
		return soap_in_PointerTowitsml14__yAxisAzimuth(soap, tag, NULL, "witsml14:yAxisAzimuth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__indexedObject:
		return soap_in_PointerTowitsml14__indexedObject(soap, tag, NULL, "witsml14:indexedObject");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Hemispheres:
		return soap_in_PointerTowitsml14__Hemispheres(soap, tag, NULL, "witsml14:Hemispheres");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NADTypes:
		return soap_in_PointerTowitsml14__NADTypes(soap, tag, NULL, "witsml14:NADTypes");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__geodeticZoneString:
		return soap_in_PointerTowitsml14__geodeticZoneString(soap, tag, NULL, "witsml14:geodeticZoneString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ProjectionVariantsObliqueMercator:
		return soap_in_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, tag, NULL, "witsml14:ProjectionVariantsObliqueMercator");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Projection:
		return soap_in_PointerTowitsml14__Projection(soap, tag, NULL, "witsml14:Projection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Ellipsoid:
		return soap_in_PointerTowitsml14__Ellipsoid(soap, tag, NULL, "witsml14:Ellipsoid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__unitlessQuantity:
		return soap_in_PointerTowitsml14__unitlessQuantity(soap, tag, NULL, "witsml14:unitlessQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__GeodeticDatum:
		return soap_in_PointerTowitsml14__GeodeticDatum(soap, tag, NULL, "witsml14:GeodeticDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocalCRS:
		return soap_in_PointerTowitsml14__cs_USCORElocalCRS(soap, tag, NULL, "witsml14:cs_localCRS");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREgeodeticModel:
		return soap_in_PointerTowitsml14__cs_USCOREgeodeticModel(soap, tag, NULL, "witsml14:cs_geodeticModel");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREprojectionx:
		return soap_in_PointerTowitsml14__cs_USCOREprojectionx(soap, tag, NULL, "witsml14:cs_projectionx");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageEastWest:
		return soap_in_PointerTowitsml14__footageEastWest(soap, tag, NULL, "witsml14:footageEastWest");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageNorthSouth:
		return soap_in_PointerTowitsml14__footageNorthSouth(soap, tag, NULL, "witsml14:footageNorthSouth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterTownship:
		return soap_in_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, tag, NULL, "witsml14:publicLandSurveySystemQuarterTownship");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterSection:
		return soap_in_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, tag, NULL, "witsml14:publicLandSurveySystemQuarterSection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__sectionNumber:
		return soap_in_PointerTowitsml14__sectionNumber(soap, tag, NULL, "witsml14:sectionNumber");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NorthOrSouth:
		return soap_in_PointerTowitsml14__NorthOrSouth(soap, tag, NULL, "witsml14:NorthOrSouth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__EastOrWest:
		return soap_in_PointerTowitsml14__EastOrWest(soap, tag, NULL, "witsml14:EastOrWest");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__PrincipalMeridian:
		return soap_in_PointerTowitsml14__PrincipalMeridian(soap, tag, NULL, "witsml14:PrincipalMeridian");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellboreRig:
		return soap_in_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, tag, NULL, "witsml14:cs_refWellWellboreRig");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellbore:
		return soap_in_PointerTowitsml14__cs_USCORErefWellWellbore(soap, tag, NULL, "witsml14:cs_refWellWellbore");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellKnownNameStruct:
		return soap_in_PointerTowitsml14__wellKnownNameStruct(soap, tag, NULL, "witsml14:wellKnownNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ElevCodeEnum:
		return soap_in_PointerTowitsml14__ElevCodeEnum(soap, tag, NULL, "witsml14:ElevCodeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__logicalBoolean:
		return soap_in_PointerTowitsml14__logicalBoolean(soap, tag, NULL, "witsml14:logicalBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__planeAngleMeasure:
		return soap_in_PointerTowitsml14__planeAngleMeasure(soap, tag, NULL, "witsml14:planeAngleMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refNameString:
		return soap_in_PointerTowitsml14__refNameString(soap, tag, NULL, "witsml14:refNameString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentEvent:
		return soap_in_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, NULL, "witsml14:cs_documentEvent");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__descriptionString:
		return soap_in_PointerTowitsml14__descriptionString(soap, tag, NULL, "witsml14:descriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__MeasureClass:
		return soap_in_PointerTowitsml14__MeasureClass(soap, tag, NULL, "witsml14:MeasureClass");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__positiveCount:
		return soap_in_PointerTowitsml14__positiveCount(soap, tag, NULL, "witsml14:positiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__measuredDepthCoord:
		return soap_in_PointerTowitsml14__measuredDepthCoord(soap, tag, NULL, "witsml14:measuredDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__extensionvalue:
		return soap_in_PointerTowitsml14__extensionvalue(soap, tag, NULL, "witsml14:extensionvalue");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionNameValue:
		return soap_in_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, NULL, "witsml14:cs_extensionNameValue");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__kindString:
		return soap_in_PointerTowitsml14__kindString(soap, tag, NULL, "witsml14:kindString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentAudit:
		return soap_in_PointerTowitsml14__cs_USCOREdocumentAudit(soap, tag, NULL, "witsml14:cs_documentAudit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__commentString:
		return soap_in_PointerTowitsml14__commentString(soap, tag, NULL, "witsml14:commentString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		return soap_in_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, NULL, "witsml14:cs_documentSecurityInfo");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentFileCreation:
		return soap_in_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, tag, NULL, "witsml14:cs_documentFileCreation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameStruct:
		return soap_in_PointerTowitsml14__nameStruct(soap, tag, NULL, "witsml14:nameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidString:
		return soap_in_PointerTowitsml14__uidString(soap, tag, NULL, "witsml14:uidString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcustomData:
		return soap_in_PointerTowitsml14__cs_USCOREcustomData(soap, tag, NULL, "witsml14:cs_customData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcommonData:
		return soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, tag, NULL, "witsml14:cs_commonData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellCRS:
		return soap_in_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, NULL, "witsml14:cs_wellCRS");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREreferencePoint:
		return soap_in_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, NULL, "witsml14:cs_referencePoint");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREpublicLandSurveySystem:
		return soap_in_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, tag, NULL, "witsml14:cs_publicLandSurveySystem");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocation:
		return soap_in_PointerTowitsml14__cs_USCORElocation(soap, tag, NULL, "witsml14:cs_location");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__lengthMeasure:
		return soap_in_PointerTowitsml14__lengthMeasure(soap, tag, NULL, "witsml14:lengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellDatum:
		return soap_in_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, NULL, "witsml14:cs_wellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellElevationCoord:
		return soap_in_PointerTowitsml14__wellElevationCoord(soap, tag, NULL, "witsml14:wellElevationCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellDirection:
		return soap_in_PointerTowitsml14__WellDirection(soap, tag, NULL, "witsml14:WellDirection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellFluid:
		return soap_in_PointerTowitsml14__WellFluid(soap, tag, NULL, "witsml14:WellFluid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellPurpose:
		return soap_in_PointerTowitsml14__WellPurpose(soap, tag, NULL, "witsml14:WellPurpose");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellStatus:
		return soap_in_PointerTowitsml14__WellStatus(soap, tag, NULL, "witsml14:WellStatus");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__dimensionlessMeasure:
		return soap_in_PointerTowitsml14__dimensionlessMeasure(soap, tag, NULL, "witsml14:dimensionlessMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__str32:
		return soap_in_PointerTowitsml14__str32(soap, tag, NULL, "witsml14:str32");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestamp:
		return soap_in_PointerTowitsml14__timestamp(soap, tag, NULL, "witsml14:timestamp");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameString:
		return soap_in_PointerTowitsml14__nameString(soap, tag, NULL, "witsml14:nameString");
	case SOAP_TYPE_gsoap_witsml1_4__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_gsoap_witsml1_4_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "witsml14:commentString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString;
			return soap_in_witsml14__commentString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TypeSurveyTool"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool;
			return soap_in_witsml14__TypeSurveyTool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TrajStnCalcAlgorithm"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm;
			return soap_in_witsml14__TrajStnCalcAlgorithm(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:QualifierType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType;
			return soap_in_witsml14__QualifierType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NameTagTechnology"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology;
			return soap_in_witsml14__NameTagTechnology(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NameTagNumberingScheme"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme;
			return soap_in_witsml14__NameTagNumberingScheme(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NameTagLocation"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation;
			return soap_in_witsml14__NameTagLocation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MudSubClass"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass;
			return soap_in_witsml14__MudSubClass(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MeasureClass"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass;
			return soap_in_witsml14__MeasureClass(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MatrixCementType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType;
			return soap_in_witsml14__MatrixCementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LithologyType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType;
			return soap_in_witsml14__LithologyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ExtensionName"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName;
			return soap_in_witsml14__ExtensionName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ActivityCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode;
			return soap_in_witsml14__ActivityCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractCommentString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString;
			return soap_in_witsml14__abstractCommentString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:str32"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__str32;
			return soap_in_witsml14__str32(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:uomString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString;
			return soap_in_witsml14__uomString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:kindString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString;
			return soap_in_witsml14__kindString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:encodedValueString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString;
			return soap_in_witsml14__encodedValueString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:descriptionString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString;
			return soap_in_witsml14__descriptionString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:nameString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString;
			return soap_in_witsml14__nameString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:refWellDatum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum;
			return soap_in_witsml14__refWellDatum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:refString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__refString;
			return soap_in_witsml14__refString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:uidParentString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString;
			return soap_in_witsml14__uidParentString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:uidString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString;
			return soap_in_witsml14__uidString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:timeZone"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone;
			return soap_in_witsml14__timeZone(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractUomEnum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum;
			return soap_in_witsml14__abstractUomEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractTypeEnum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum;
			return soap_in_witsml14__abstractTypeEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractString32"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32;
			return soap_in_witsml14__abstractString32(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractDescriptionString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString;
			return soap_in_witsml14__abstractDescriptionString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractUidString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString;
			return soap_in_witsml14__abstractUidString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractNameString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString;
			return soap_in_witsml14__abstractNameString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractTimeZone"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone;
			return soap_in_witsml14__abstractTimeZone(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractMaximumLengthString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString;
			return soap_in_witsml14__abstractMaximumLengthString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:str16"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__str16;
			return soap_in_witsml14__str16(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:str2"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__str2;
			return soap_in_witsml14__str2(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:publicLandSurveySystemQuarterSection"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection;
			return soap_in_witsml14__publicLandSurveySystemQuarterSection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:publicLandSurveySystemQuarterTownship"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship;
			return soap_in_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:sectionNumber"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber;
			return soap_in_witsml14__sectionNumber(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:geodeticZoneString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString;
			return soap_in_witsml14__geodeticZoneString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:iadcBearingWearCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode;
			return soap_in_witsml14__iadcBearingWearCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:uncollapsedString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString;
			return soap_in_witsml14__uncollapsedString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:schemaVersionString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString;
			return soap_in_witsml14__schemaVersionString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:shortDescriptionString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString;
			return soap_in_witsml14__shortDescriptionString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:date"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__date;
			return soap_in_witsml14__date(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractUncollapsedString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString;
			return soap_in_witsml14__abstractUncollapsedString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString;
			return soap_in_witsml14__abstractString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractDate"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate;
			return soap_in_witsml14__abstractDate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:listOfString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString;
			return soap_in_witsml14__listOfString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "abstract:abstractObject"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject;
			return soap_in_abstract__abstractObject(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_refWellboreTrajectory"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory;
			return soap_in_witsml14__cs_USCORErefWellboreTrajectory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_refWellboreTrajectoryStation"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation;
			return soap_in_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_stnTrajMatrixCov"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov;
			return soap_in_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_stnTrajValid"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid;
			return soap_in_witsml14__cs_USCOREstnTrajValid(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_stnTrajCorUsed"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed;
			return soap_in_witsml14__cs_USCOREstnTrajCorUsed(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_stnTrajRawData"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData;
			return soap_in_witsml14__cs_USCOREstnTrajRawData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_trajectoryStation"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation;
			return soap_in_witsml14__cs_USCOREtrajectoryStation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_trajectory"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory;
			return soap_in_witsml14__obj_USCOREtrajectory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_trajectorys"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys;
			return soap_in_witsml14__obj_USCOREtrajectorys(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_wellbore"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore;
			return soap_in_witsml14__obj_USCOREwellbore(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_wellbores"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores;
			return soap_in_witsml14__obj_USCOREwellbores(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_customData"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData;
			return soap_in_witsml14__cs_USCOREcustomData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_extensionAny"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny;
			return soap_in_witsml14__cs_USCOREextensionAny(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_commonData"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData;
			return soap_in_witsml14__cs_USCOREcommonData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_localCRS"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS;
			return soap_in_witsml14__cs_USCORElocalCRS(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_projectionx"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx;
			return soap_in_witsml14__cs_USCOREprojectionx(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_geodeticModel"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel;
			return soap_in_witsml14__cs_USCOREgeodeticModel(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_wellCRS"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS;
			return soap_in_witsml14__cs_USCOREwellCRS(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_referencePoint"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint;
			return soap_in_witsml14__cs_USCOREreferencePoint(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_publicLandSurveySystem"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem;
			return soap_in_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_refWellWellboreRig"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig;
			return soap_in_witsml14__cs_USCORErefWellWellboreRig(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_refWellWellbore"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore;
			return soap_in_witsml14__cs_USCORErefWellWellbore(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_wellDatum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum;
			return soap_in_witsml14__cs_USCOREwellDatum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_location"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation;
			return soap_in_witsml14__cs_USCORElocation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_documentEvent"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent;
			return soap_in_witsml14__cs_USCOREdocumentEvent(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_documentAudit"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit;
			return soap_in_witsml14__cs_USCOREdocumentAudit(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_extensionNameValue"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue;
			return soap_in_witsml14__cs_USCOREextensionNameValue(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_documentSecurityInfo"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo;
			return soap_in_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure;
			return soap_in_witsml14__abstractMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:volumePerVolumeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure;
			return soap_in_witsml14__volumePerVolumeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:volumePerLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure;
			return soap_in_witsml14__volumePerLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:volumeFlowRateMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure;
			return soap_in_witsml14__volumeFlowRateMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:volumeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure;
			return soap_in_witsml14__volumeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:velocityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure;
			return soap_in_witsml14__velocityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:timeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure;
			return soap_in_witsml14__timeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:thermodynamicTemperatureMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure;
			return soap_in_witsml14__thermodynamicTemperatureMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:thermalVolumetricExpansionMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure;
			return soap_in_witsml14__thermalVolumetricExpansionMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:thermalConductivityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure;
			return soap_in_witsml14__thermalConductivityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:standardVolumePerTimeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure;
			return soap_in_witsml14__standardVolumePerTimeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:standardVolumeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure;
			return soap_in_witsml14__standardVolumeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:specificVolumeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure;
			return soap_in_witsml14__specificVolumeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:specificHeatCapacityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure;
			return soap_in_witsml14__specificHeatCapacityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:relativePowerMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure;
			return soap_in_witsml14__relativePowerMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:pressureMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure;
			return soap_in_witsml14__pressureMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:powerMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure;
			return soap_in_witsml14__powerMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:planeAngleMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure;
			return soap_in_witsml14__planeAngleMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:permeabilityRockMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure;
			return soap_in_witsml14__permeabilityRockMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:perLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure;
			return soap_in_witsml14__perLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:momentOfForceMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure;
			return soap_in_witsml14__momentOfForceMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:massPerLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure;
			return soap_in_witsml14__massPerLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:massMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure;
			return soap_in_witsml14__massMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:massConcentrationMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure;
			return soap_in_witsml14__massConcentrationMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:magneticInductionMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure;
			return soap_in_witsml14__magneticInductionMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:lengthPerLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure;
			return soap_in_witsml14__lengthPerLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:lengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure;
			return soap_in_witsml14__lengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:illuminanceMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure;
			return soap_in_witsml14__illuminanceMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:forcePerVolumeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure;
			return soap_in_witsml14__forcePerVolumeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:forcePerLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure;
			return soap_in_witsml14__forcePerLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:forceMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure;
			return soap_in_witsml14__forceMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:equivalentPerMassMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure;
			return soap_in_witsml14__equivalentPerMassMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:electricPotentialMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure;
			return soap_in_witsml14__electricPotentialMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:electricCurrentMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure;
			return soap_in_witsml14__electricCurrentMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:dynamicViscosityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure;
			return soap_in_witsml14__dynamicViscosityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:dimensionlessMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure;
			return soap_in_witsml14__dimensionlessMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:densityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure;
			return soap_in_witsml14__densityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:compressibilityMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure;
			return soap_in_witsml14__compressibilityMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:areaPerAreaMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure;
			return soap_in_witsml14__areaPerAreaMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:areaMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure;
			return soap_in_witsml14__areaMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:anglePerTimeMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure;
			return soap_in_witsml14__anglePerTimeMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:anglePerLengthMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure;
			return soap_in_witsml14__anglePerLengthMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:accelerationLinearMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure;
			return soap_in_witsml14__accelerationLinearMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:indexedObject"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject;
			return soap_in_witsml14__indexedObject(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cost"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cost;
			return soap_in_witsml14__cost(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:footageEastWest"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest;
			return soap_in_witsml14__footageEastWest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:footageNorthSouth"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth;
			return soap_in_witsml14__footageNorthSouth(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:wellElevationCoord"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord;
			return soap_in_witsml14__wellElevationCoord(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:wellVerticalDepthCoord"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord;
			return soap_in_witsml14__wellVerticalDepthCoord(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:measuredDepthCoord"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord;
			return soap_in_witsml14__measuredDepthCoord(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:chronostratigraphyStruct"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct;
			return soap_in_witsml14__chronostratigraphyStruct(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:lithostratigraphyStruct"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct;
			return soap_in_witsml14__lithostratigraphyStruct(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:objectSequence"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence;
			return soap_in_witsml14__objectSequence(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:wellKnownNameStruct"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct;
			return soap_in_witsml14__wellKnownNameStruct(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:shortNameStruct"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct;
			return soap_in_witsml14__shortNameStruct(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:nameStruct"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct;
			return soap_in_witsml14__nameStruct(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:extensionvalue"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue;
			return soap_in_witsml14__extensionvalue(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:timestampedCommentString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString;
			return soap_in_witsml14__timestampedCommentString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:refPositiveCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount;
			return soap_in_witsml14__refPositiveCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:refObjectString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString;
			return soap_in_witsml14__refObjectString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:refNameString"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString;
			return soap_in_witsml14__refNameString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ratioGenericMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure;
			return soap_in_witsml14__ratioGenericMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:genericMeasure"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure;
			return soap_in_witsml14__genericMeasure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:measureOrQuantity"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity;
			return soap_in_witsml14__measureOrQuantity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:volumePerVolumeMeasurePercent"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent;
			return soap_in_witsml14__volumePerVolumeMeasurePercent(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:yAxisAzimuth"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth;
			return soap_in_witsml14__yAxisAzimuth(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:timestampedTimeZone"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone;
			return soap_in_witsml14__timestampedTimeZone(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_documentFileCreation"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation;
			return soap_in_witsml14__cs_USCOREdocumentFileCreation(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:cs_documentInfo"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo;
			return soap_in_witsml14__cs_USCOREdocumentInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_well"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell;
			return soap_in_witsml14__obj_USCOREwell(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:obj_wells"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells;
			return soap_in_witsml14__obj_USCOREwells(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:date"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_xsd__date;
			return soap_in_xsd__date(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:positiveCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount;
			return soap_in_witsml14__positiveCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractPositiveCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractPositiveCount;
			return soap_in_witsml14__abstractPositiveCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:levelIntegerCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__levelIntegerCode;
			return soap_in_witsml14__levelIntegerCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:iadcIntegerCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcIntegerCode;
			return soap_in_witsml14__iadcIntegerCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:pumpActionIntegerCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__pumpActionIntegerCode;
			return soap_in_witsml14__pumpActionIntegerCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:beaufortScaleIntegerCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__beaufortScaleIntegerCode;
			return soap_in_witsml14__beaufortScaleIntegerCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:nonNegativeCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__nonNegativeCount;
			return soap_in_witsml14__nonNegativeCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractShort"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractShort;
			return soap_in_witsml14__abstractShort(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_short;
			return soap_in_short(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:integerCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__integerCount;
			return soap_in_witsml14__integerCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:positiveBigCount"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveBigCount;
			return soap_in_witsml14__positiveBigCount(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:calendarYear"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__calendarYear;
			return soap_in_witsml14__calendarYear(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractInt"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractInt;
			return soap_in_witsml14__abstractInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:gtZeroAndLeOne"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__gtZeroAndLeOne;
			return soap_in_witsml14__gtZeroAndLeOne(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:unitlessQuantity"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity;
			return soap_in_witsml14__unitlessQuantity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractDouble"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDouble;
			return soap_in_witsml14__abstractDouble(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:logicalBoolean"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean;
			return soap_in_witsml14__logicalBoolean(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractBoolean"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean;
			return soap_in_witsml14__abstractBoolean(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellStatus"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus;
			return soap_in_witsml14__WellStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellPurpose"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose;
			return soap_in_witsml14__WellPurpose(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellboreType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType;
			return soap_in_witsml14__WellboreType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellboreShape"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape;
			return soap_in_witsml14__WellboreShape(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellTestType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType;
			return soap_in_witsml14__WellTestType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellNamingSystem"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem;
			return soap_in_witsml14__WellNamingSystem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellKillingProcedureType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType;
			return soap_in_witsml14__WellKillingProcedureType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellFluid"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid;
			return soap_in_witsml14__WellFluid(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellDirection"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection;
			return soap_in_witsml14__WellDirection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellControlIncidentType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType;
			return soap_in_witsml14__WellControlIncidentType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TubularComponent"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent;
			return soap_in_witsml14__TubularComponent(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TubularAssembly"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly;
			return soap_in_witsml14__TubularAssembly(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TrajStationType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType;
			return soap_in_witsml14__TrajStationType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TrajStationStatus"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus;
			return soap_in_witsml14__TrajStationStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TargetSectionScope"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope;
			return soap_in_witsml14__TargetSectionScope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TargetScope"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope;
			return soap_in_witsml14__TargetScope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TargetCategory"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory;
			return soap_in_witsml14__TargetCategory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:SurveyToolOperatingMode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode;
			return soap_in_witsml14__SurveyToolOperatingMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:SurfEquipType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType;
			return soap_in_witsml14__SurfEquipType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:SupportCraft"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft;
			return soap_in_witsml14__SupportCraft(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimStageType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType;
			return soap_in_witsml14__StimStageType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimStageFlowPathType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType;
			return soap_in_witsml14__StimStageFlowPathType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimProppantType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType;
			return soap_in_witsml14__StimProppantType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimFluidType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType;
			return soap_in_witsml14__StimFluidType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimFluidSubtype"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype;
			return soap_in_witsml14__StimFluidSubtype(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimAnalysisMethod"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod;
			return soap_in_witsml14__StimAnalysisMethod(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StimAdditiveType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType;
			return soap_in_witsml14__StimAdditiveType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StateDetailActivity"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity;
			return soap_in_witsml14__StateDetailActivity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ShowSpeed"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed;
			return soap_in_witsml14__ShowSpeed(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ShowRating"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating;
			return soap_in_witsml14__ShowRating(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ShowLevel"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel;
			return soap_in_witsml14__ShowLevel(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ShowFluorescence"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence;
			return soap_in_witsml14__ShowFluorescence(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ScrType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType;
			return soap_in_witsml14__ScrType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RiskType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType;
			return soap_in_witsml14__RiskType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RiskSubCategory"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory;
			return soap_in_witsml14__RiskSubCategory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RiskCategory"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory;
			return soap_in_witsml14__RiskCategory(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RiskAffectedPersonnel"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel;
			return soap_in_witsml14__RiskAffectedPersonnel(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RigType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType;
			return soap_in_witsml14__RigType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ReadingKind"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind;
			return soap_in_witsml14__ReadingKind(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PumpOpType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType;
			return soap_in_witsml14__PumpOpType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PumpType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType;
			return soap_in_witsml14__PumpType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PrincipalMeridian"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian;
			return soap_in_witsml14__PrincipalMeridian(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PresTestType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType;
			return soap_in_witsml14__PresTestType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ProjectionVariantsObliqueMercator"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator;
			return soap_in_witsml14__ProjectionVariantsObliqueMercator(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:Projection"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection;
			return soap_in_witsml14__Projection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PrimitiveType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType;
			return soap_in_witsml14__PrimitiveType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PitType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType;
			return soap_in_witsml14__PitType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PIDXCommodityCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode;
			return soap_in_witsml14__PIDXCommodityCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:OpsReportVersion"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion;
			return soap_in_witsml14__OpsReportVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NozzleType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType;
			return soap_in_witsml14__NozzleType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NorthOrSouth"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth;
			return soap_in_witsml14__NorthOrSouth(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:NADTypes"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes;
			return soap_in_witsml14__NADTypes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MudLogParameterType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType;
			return soap_in_witsml14__MudLogParameterType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MudClass"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass;
			return soap_in_witsml14__MudClass(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MessageType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType;
			return soap_in_witsml14__MessageType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MessageSeverity"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity;
			return soap_in_witsml14__MessageSeverity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MessageProbability"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability;
			return soap_in_witsml14__MessageProbability(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MeasurementType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType;
			return soap_in_witsml14__MeasurementType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MaterialType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType;
			return soap_in_witsml14__MaterialType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LogTraceState"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState;
			return soap_in_witsml14__LogTraceState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LogTraceOrigin"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin;
			return soap_in_witsml14__LogTraceOrigin(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LogIndexType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType;
			return soap_in_witsml14__LogIndexType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LogIndexDirection"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection;
			return soap_in_witsml14__LogIndexDirection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LogDataType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType;
			return soap_in_witsml14__LogDataType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LithostratigraphyUnit"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit;
			return soap_in_witsml14__LithostratigraphyUnit(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LithologySource"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource;
			return soap_in_witsml14__LithologySource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:JarAction"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction;
			return soap_in_witsml14__JarAction(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:JarType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType;
			return soap_in_witsml14__JarType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ItemState"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState;
			return soap_in_witsml14__ItemState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:InnerBarrelType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType;
			return soap_in_witsml14__InnerBarrelType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:HoleOpenerType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType;
			return soap_in_witsml14__HoleOpenerType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:HoleCasingType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType;
			return soap_in_witsml14__HoleCasingType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:Hemispheres"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres;
			return soap_in_witsml14__Hemispheres(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:GeodeticDatum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum;
			return soap_in_witsml14__GeodeticDatum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:GasPeakType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType;
			return soap_in_witsml14__GasPeakType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ErrorModelMisalignmentMode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode;
			return soap_in_witsml14__ErrorModelMisalignmentMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ErrorPropagationMode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode;
			return soap_in_witsml14__ErrorPropagationMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ErrorTermSource"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource;
			return soap_in_witsml14__ErrorTermSource(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:Ellipsoid"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid;
			return soap_in_witsml14__Ellipsoid(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ElevCodeEnum"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum;
			return soap_in_witsml14__ElevCodeEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:EastOrWest"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest;
			return soap_in_witsml14__EastOrWest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DriveType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType;
			return soap_in_witsml14__DriveType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DrawWorksType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType;
			return soap_in_witsml14__DrawWorksType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DerrickType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType;
			return soap_in_witsml14__DerrickType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DeflectionMethod"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod;
			return soap_in_witsml14__DeflectionMethod(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ConnectionPosition"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition;
			return soap_in_witsml14__ConnectionPosition(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ChronostratigraphyUnit"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit;
			return soap_in_witsml14__ChronostratigraphyUnit(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ChangeInfoType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType;
			return soap_in_witsml14__ChangeInfoType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:CementJobType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType;
			return soap_in_witsml14__CementJobType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BoxPinConfig"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig;
			return soap_in_witsml14__BoxPinConfig(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BopType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType;
			return soap_in_witsml14__BopType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BladeType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType;
			return soap_in_witsml14__BladeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BladeShapeType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType;
			return soap_in_witsml14__BladeShapeType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BhaStatus"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus;
			return soap_in_witsml14__BhaStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BitType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType;
			return soap_in_witsml14__BitType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BitReasonPulled"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled;
			return soap_in_witsml14__BitReasonPulled(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BitDullCode"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode;
			return soap_in_witsml14__BitDullCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:BearingType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType;
			return soap_in_witsml14__BearingType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AziRef"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef;
			return soap_in_witsml14__AziRef(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AuthorizationStatus"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus;
			return soap_in_witsml14__AuthorizationStatus(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ActivityClassType"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType;
			return soap_in_witsml14__ActivityClassType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:VolumePerVolumeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom;
			return soap_in_witsml14__VolumePerVolumeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:VolumePerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom;
			return soap_in_witsml14__VolumePerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:VolumeFlowRateUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom;
			return soap_in_witsml14__VolumeFlowRateUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:VolumeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom;
			return soap_in_witsml14__VolumeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:VelocityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom;
			return soap_in_witsml14__VelocityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:TimeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom;
			return soap_in_witsml14__TimeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ThermodynamicTemperatureUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom;
			return soap_in_witsml14__ThermodynamicTemperatureUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ThermalVolumetricExpansionUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom;
			return soap_in_witsml14__ThermalVolumetricExpansionUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ThermalConductivityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom;
			return soap_in_witsml14__ThermalConductivityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StandardVolumePerTimeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom;
			return soap_in_witsml14__StandardVolumePerTimeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:StandardVolumeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom;
			return soap_in_witsml14__StandardVolumeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:SpecificVolumeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom;
			return soap_in_witsml14__SpecificVolumeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:SpecificHeatCapacityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom;
			return soap_in_witsml14__SpecificHeatCapacityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:RelativePowerUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom;
			return soap_in_witsml14__RelativePowerUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PressureUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom;
			return soap_in_witsml14__PressureUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PowerUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom;
			return soap_in_witsml14__PowerUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PlaneAngleUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom;
			return soap_in_witsml14__PlaneAngleUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PermeabilityRockUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom;
			return soap_in_witsml14__PermeabilityRockUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom;
			return soap_in_witsml14__PerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MomentOfForceUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom;
			return soap_in_witsml14__MomentOfForceUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MassPerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom;
			return soap_in_witsml14__MassPerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MassUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom;
			return soap_in_witsml14__MassUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MassConcentrationUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom;
			return soap_in_witsml14__MassConcentrationUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MagneticInductionUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom;
			return soap_in_witsml14__MagneticInductionUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LengthPerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom;
			return soap_in_witsml14__LengthPerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:LengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom;
			return soap_in_witsml14__LengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:IlluminanceUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom;
			return soap_in_witsml14__IlluminanceUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ForcePerVolumeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom;
			return soap_in_witsml14__ForcePerVolumeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ForcePerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom;
			return soap_in_witsml14__ForcePerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ForceUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom;
			return soap_in_witsml14__ForceUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:EquivalentPerMassUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom;
			return soap_in_witsml14__EquivalentPerMassUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ElectricPotentialUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom;
			return soap_in_witsml14__ElectricPotentialUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:ElectricCurrentUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom;
			return soap_in_witsml14__ElectricCurrentUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DynamicViscosityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom;
			return soap_in_witsml14__DynamicViscosityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DimensionlessUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom;
			return soap_in_witsml14__DimensionlessUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:DensityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom;
			return soap_in_witsml14__DensityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:CompressibilityUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom;
			return soap_in_witsml14__CompressibilityUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AreaPerAreaUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom;
			return soap_in_witsml14__AreaPerAreaUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AreaUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom;
			return soap_in_witsml14__AreaUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AnglePerTimeUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom;
			return soap_in_witsml14__AnglePerTimeUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AnglePerLengthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom;
			return soap_in_witsml14__AnglePerLengthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:AccelerationLinearUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom;
			return soap_in_witsml14__AccelerationLinearUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:WellVerticalCoordinateUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom;
			return soap_in_witsml14__WellVerticalCoordinateUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:MeasuredDepthUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom;
			return soap_in_witsml14__MeasuredDepthUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:PercentUom"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom;
			return soap_in_witsml14__PercentUom(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:timestamp"))
		{	*type = SOAP_TYPE_witsml14__timestamp;
			return soap_in_witsml14__timestamp(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:abstractDateTime"))
		{	*type = SOAP_TYPE_witsml14__abstractDateTime;
			return soap_in_witsml14__abstractDateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tm"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4_tm;
			return soap_in_tm(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_gsoap_witsml1_4__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_gsoap_witsml1_4_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "witsml14:trajectorys"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys;
			return soap_in__witsml14__trajectorys(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:wellbores"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores;
			return soap_in__witsml14__wellbores(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "witsml14:wells"))
		{	*type = SOAP_TYPE_gsoap_witsml1_4__witsml14__wells;
			return soap_in__witsml14__wells(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if ((!soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_gsoap_witsml1_4_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount:
		return soap_out_witsml14__positiveCount(soap, tag, id, (const short *)ptr, "witsml14:positiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractPositiveCount:
		return soap_out_witsml14__abstractPositiveCount(soap, tag, id, (const short *)ptr, "witsml14:abstractPositiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__levelIntegerCode:
		return soap_out_witsml14__levelIntegerCode(soap, tag, id, (const short *)ptr, "witsml14:levelIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcIntegerCode:
		return soap_out_witsml14__iadcIntegerCode(soap, tag, id, (const short *)ptr, "witsml14:iadcIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pumpActionIntegerCode:
		return soap_out_witsml14__pumpActionIntegerCode(soap, tag, id, (const short *)ptr, "witsml14:pumpActionIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__beaufortScaleIntegerCode:
		return soap_out_witsml14__beaufortScaleIntegerCode(soap, tag, id, (const short *)ptr, "witsml14:beaufortScaleIntegerCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nonNegativeCount:
		return soap_out_witsml14__nonNegativeCount(soap, tag, id, (const short *)ptr, "witsml14:nonNegativeCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractShort:
		return soap_out_witsml14__abstractShort(soap, tag, id, (const short *)ptr, "witsml14:abstractShort");
	case SOAP_TYPE_gsoap_witsml1_4_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__integerCount:
		return soap_out_witsml14__integerCount(soap, tag, id, (const int *)ptr, "witsml14:integerCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveBigCount:
		return soap_out_witsml14__positiveBigCount(soap, tag, id, (const int *)ptr, "witsml14:positiveBigCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__calendarYear:
		return soap_out_witsml14__calendarYear(soap, tag, id, (const int *)ptr, "witsml14:calendarYear");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractInt:
		return soap_out_witsml14__abstractInt(soap, tag, id, (const int *)ptr, "witsml14:abstractInt");
	case SOAP_TYPE_gsoap_witsml1_4_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__gtZeroAndLeOne:
		return soap_out_witsml14__gtZeroAndLeOne(soap, tag, id, (const double *)ptr, "witsml14:gtZeroAndLeOne");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity:
		return soap_out_witsml14__unitlessQuantity(soap, tag, id, (const double *)ptr, "witsml14:unitlessQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDouble:
		return soap_out_witsml14__abstractDouble(soap, tag, id, (const double *)ptr, "witsml14:abstractDouble");
	case SOAP_TYPE_gsoap_witsml1_4_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean:
		return soap_out_witsml14__logicalBoolean(soap, tag, id, (const bool *)ptr, "witsml14:logicalBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean:
		return soap_out_witsml14__abstractBoolean(soap, tag, id, (const bool *)ptr, "witsml14:abstractBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus:
		return soap_out_witsml14__WellStatus(soap, tag, id, (const witsml14__WellStatus *)ptr, "witsml14:WellStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose:
		return soap_out_witsml14__WellPurpose(soap, tag, id, (const witsml14__WellPurpose *)ptr, "witsml14:WellPurpose");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType:
		return soap_out_witsml14__WellboreType(soap, tag, id, (const witsml14__WellboreType *)ptr, "witsml14:WellboreType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape:
		return soap_out_witsml14__WellboreShape(soap, tag, id, (const witsml14__WellboreShape *)ptr, "witsml14:WellboreShape");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType:
		return soap_out_witsml14__WellTestType(soap, tag, id, (const witsml14__WellTestType *)ptr, "witsml14:WellTestType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem:
		return soap_out_witsml14__WellNamingSystem(soap, tag, id, (const witsml14__WellNamingSystem *)ptr, "witsml14:WellNamingSystem");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType:
		return soap_out_witsml14__WellKillingProcedureType(soap, tag, id, (const witsml14__WellKillingProcedureType *)ptr, "witsml14:WellKillingProcedureType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid:
		return soap_out_witsml14__WellFluid(soap, tag, id, (const witsml14__WellFluid *)ptr, "witsml14:WellFluid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection:
		return soap_out_witsml14__WellDirection(soap, tag, id, (const witsml14__WellDirection *)ptr, "witsml14:WellDirection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType:
		return soap_out_witsml14__WellControlIncidentType(soap, tag, id, (const witsml14__WellControlIncidentType *)ptr, "witsml14:WellControlIncidentType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent:
		return soap_out_witsml14__TubularComponent(soap, tag, id, (const witsml14__TubularComponent *)ptr, "witsml14:TubularComponent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly:
		return soap_out_witsml14__TubularAssembly(soap, tag, id, (const witsml14__TubularAssembly *)ptr, "witsml14:TubularAssembly");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType:
		return soap_out_witsml14__TrajStationType(soap, tag, id, (const witsml14__TrajStationType *)ptr, "witsml14:TrajStationType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus:
		return soap_out_witsml14__TrajStationStatus(soap, tag, id, (const witsml14__TrajStationStatus *)ptr, "witsml14:TrajStationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope:
		return soap_out_witsml14__TargetSectionScope(soap, tag, id, (const witsml14__TargetSectionScope *)ptr, "witsml14:TargetSectionScope");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope:
		return soap_out_witsml14__TargetScope(soap, tag, id, (const witsml14__TargetScope *)ptr, "witsml14:TargetScope");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory:
		return soap_out_witsml14__TargetCategory(soap, tag, id, (const witsml14__TargetCategory *)ptr, "witsml14:TargetCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode:
		return soap_out_witsml14__SurveyToolOperatingMode(soap, tag, id, (const witsml14__SurveyToolOperatingMode *)ptr, "witsml14:SurveyToolOperatingMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType:
		return soap_out_witsml14__SurfEquipType(soap, tag, id, (const witsml14__SurfEquipType *)ptr, "witsml14:SurfEquipType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft:
		return soap_out_witsml14__SupportCraft(soap, tag, id, (const witsml14__SupportCraft *)ptr, "witsml14:SupportCraft");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType:
		return soap_out_witsml14__StimStageType(soap, tag, id, (const witsml14__StimStageType *)ptr, "witsml14:StimStageType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType:
		return soap_out_witsml14__StimStageFlowPathType(soap, tag, id, (const witsml14__StimStageFlowPathType *)ptr, "witsml14:StimStageFlowPathType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType:
		return soap_out_witsml14__StimProppantType(soap, tag, id, (const witsml14__StimProppantType *)ptr, "witsml14:StimProppantType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType:
		return soap_out_witsml14__StimFluidType(soap, tag, id, (const witsml14__StimFluidType *)ptr, "witsml14:StimFluidType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype:
		return soap_out_witsml14__StimFluidSubtype(soap, tag, id, (const witsml14__StimFluidSubtype *)ptr, "witsml14:StimFluidSubtype");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod:
		return soap_out_witsml14__StimAnalysisMethod(soap, tag, id, (const witsml14__StimAnalysisMethod *)ptr, "witsml14:StimAnalysisMethod");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType:
		return soap_out_witsml14__StimAdditiveType(soap, tag, id, (const witsml14__StimAdditiveType *)ptr, "witsml14:StimAdditiveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity:
		return soap_out_witsml14__StateDetailActivity(soap, tag, id, (const witsml14__StateDetailActivity *)ptr, "witsml14:StateDetailActivity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed:
		return soap_out_witsml14__ShowSpeed(soap, tag, id, (const witsml14__ShowSpeed *)ptr, "witsml14:ShowSpeed");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating:
		return soap_out_witsml14__ShowRating(soap, tag, id, (const witsml14__ShowRating *)ptr, "witsml14:ShowRating");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel:
		return soap_out_witsml14__ShowLevel(soap, tag, id, (const witsml14__ShowLevel *)ptr, "witsml14:ShowLevel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence:
		return soap_out_witsml14__ShowFluorescence(soap, tag, id, (const witsml14__ShowFluorescence *)ptr, "witsml14:ShowFluorescence");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType:
		return soap_out_witsml14__ScrType(soap, tag, id, (const witsml14__ScrType *)ptr, "witsml14:ScrType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType:
		return soap_out_witsml14__RiskType(soap, tag, id, (const witsml14__RiskType *)ptr, "witsml14:RiskType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory:
		return soap_out_witsml14__RiskSubCategory(soap, tag, id, (const witsml14__RiskSubCategory *)ptr, "witsml14:RiskSubCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory:
		return soap_out_witsml14__RiskCategory(soap, tag, id, (const witsml14__RiskCategory *)ptr, "witsml14:RiskCategory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel:
		return soap_out_witsml14__RiskAffectedPersonnel(soap, tag, id, (const witsml14__RiskAffectedPersonnel *)ptr, "witsml14:RiskAffectedPersonnel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType:
		return soap_out_witsml14__RigType(soap, tag, id, (const witsml14__RigType *)ptr, "witsml14:RigType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind:
		return soap_out_witsml14__ReadingKind(soap, tag, id, (const witsml14__ReadingKind *)ptr, "witsml14:ReadingKind");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType:
		return soap_out_witsml14__PumpOpType(soap, tag, id, (const witsml14__PumpOpType *)ptr, "witsml14:PumpOpType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType:
		return soap_out_witsml14__PumpType(soap, tag, id, (const witsml14__PumpType *)ptr, "witsml14:PumpType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian:
		return soap_out_witsml14__PrincipalMeridian(soap, tag, id, (const witsml14__PrincipalMeridian *)ptr, "witsml14:PrincipalMeridian");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType:
		return soap_out_witsml14__PresTestType(soap, tag, id, (const witsml14__PresTestType *)ptr, "witsml14:PresTestType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator:
		return soap_out_witsml14__ProjectionVariantsObliqueMercator(soap, tag, id, (const witsml14__ProjectionVariantsObliqueMercator *)ptr, "witsml14:ProjectionVariantsObliqueMercator");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection:
		return soap_out_witsml14__Projection(soap, tag, id, (const witsml14__Projection *)ptr, "witsml14:Projection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType:
		return soap_out_witsml14__PrimitiveType(soap, tag, id, (const witsml14__PrimitiveType *)ptr, "witsml14:PrimitiveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType:
		return soap_out_witsml14__PitType(soap, tag, id, (const witsml14__PitType *)ptr, "witsml14:PitType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode:
		return soap_out_witsml14__PIDXCommodityCode(soap, tag, id, (const witsml14__PIDXCommodityCode *)ptr, "witsml14:PIDXCommodityCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion:
		return soap_out_witsml14__OpsReportVersion(soap, tag, id, (const witsml14__OpsReportVersion *)ptr, "witsml14:OpsReportVersion");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType:
		return soap_out_witsml14__NozzleType(soap, tag, id, (const witsml14__NozzleType *)ptr, "witsml14:NozzleType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth:
		return soap_out_witsml14__NorthOrSouth(soap, tag, id, (const witsml14__NorthOrSouth *)ptr, "witsml14:NorthOrSouth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes:
		return soap_out_witsml14__NADTypes(soap, tag, id, (const witsml14__NADTypes *)ptr, "witsml14:NADTypes");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType:
		return soap_out_witsml14__MudLogParameterType(soap, tag, id, (const witsml14__MudLogParameterType *)ptr, "witsml14:MudLogParameterType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass:
		return soap_out_witsml14__MudClass(soap, tag, id, (const witsml14__MudClass *)ptr, "witsml14:MudClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType:
		return soap_out_witsml14__MessageType(soap, tag, id, (const witsml14__MessageType *)ptr, "witsml14:MessageType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity:
		return soap_out_witsml14__MessageSeverity(soap, tag, id, (const witsml14__MessageSeverity *)ptr, "witsml14:MessageSeverity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability:
		return soap_out_witsml14__MessageProbability(soap, tag, id, (const witsml14__MessageProbability *)ptr, "witsml14:MessageProbability");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType:
		return soap_out_witsml14__MeasurementType(soap, tag, id, (const witsml14__MeasurementType *)ptr, "witsml14:MeasurementType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType:
		return soap_out_witsml14__MaterialType(soap, tag, id, (const witsml14__MaterialType *)ptr, "witsml14:MaterialType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState:
		return soap_out_witsml14__LogTraceState(soap, tag, id, (const witsml14__LogTraceState *)ptr, "witsml14:LogTraceState");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin:
		return soap_out_witsml14__LogTraceOrigin(soap, tag, id, (const witsml14__LogTraceOrigin *)ptr, "witsml14:LogTraceOrigin");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType:
		return soap_out_witsml14__LogIndexType(soap, tag, id, (const witsml14__LogIndexType *)ptr, "witsml14:LogIndexType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection:
		return soap_out_witsml14__LogIndexDirection(soap, tag, id, (const witsml14__LogIndexDirection *)ptr, "witsml14:LogIndexDirection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType:
		return soap_out_witsml14__LogDataType(soap, tag, id, (const witsml14__LogDataType *)ptr, "witsml14:LogDataType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit:
		return soap_out_witsml14__LithostratigraphyUnit(soap, tag, id, (const witsml14__LithostratigraphyUnit *)ptr, "witsml14:LithostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource:
		return soap_out_witsml14__LithologySource(soap, tag, id, (const witsml14__LithologySource *)ptr, "witsml14:LithologySource");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction:
		return soap_out_witsml14__JarAction(soap, tag, id, (const witsml14__JarAction *)ptr, "witsml14:JarAction");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType:
		return soap_out_witsml14__JarType(soap, tag, id, (const witsml14__JarType *)ptr, "witsml14:JarType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState:
		return soap_out_witsml14__ItemState(soap, tag, id, (const witsml14__ItemState *)ptr, "witsml14:ItemState");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType:
		return soap_out_witsml14__InnerBarrelType(soap, tag, id, (const witsml14__InnerBarrelType *)ptr, "witsml14:InnerBarrelType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType:
		return soap_out_witsml14__HoleOpenerType(soap, tag, id, (const witsml14__HoleOpenerType *)ptr, "witsml14:HoleOpenerType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType:
		return soap_out_witsml14__HoleCasingType(soap, tag, id, (const witsml14__HoleCasingType *)ptr, "witsml14:HoleCasingType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres:
		return soap_out_witsml14__Hemispheres(soap, tag, id, (const witsml14__Hemispheres *)ptr, "witsml14:Hemispheres");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum:
		return soap_out_witsml14__GeodeticDatum(soap, tag, id, (const witsml14__GeodeticDatum *)ptr, "witsml14:GeodeticDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType:
		return soap_out_witsml14__GasPeakType(soap, tag, id, (const witsml14__GasPeakType *)ptr, "witsml14:GasPeakType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode:
		return soap_out_witsml14__ErrorModelMisalignmentMode(soap, tag, id, (const witsml14__ErrorModelMisalignmentMode *)ptr, "witsml14:ErrorModelMisalignmentMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode:
		return soap_out_witsml14__ErrorPropagationMode(soap, tag, id, (const witsml14__ErrorPropagationMode *)ptr, "witsml14:ErrorPropagationMode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource:
		return soap_out_witsml14__ErrorTermSource(soap, tag, id, (const witsml14__ErrorTermSource *)ptr, "witsml14:ErrorTermSource");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid:
		return soap_out_witsml14__Ellipsoid(soap, tag, id, (const witsml14__Ellipsoid *)ptr, "witsml14:Ellipsoid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum:
		return soap_out_witsml14__ElevCodeEnum(soap, tag, id, (const witsml14__ElevCodeEnum *)ptr, "witsml14:ElevCodeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest:
		return soap_out_witsml14__EastOrWest(soap, tag, id, (const witsml14__EastOrWest *)ptr, "witsml14:EastOrWest");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType:
		return soap_out_witsml14__DriveType(soap, tag, id, (const witsml14__DriveType *)ptr, "witsml14:DriveType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType:
		return soap_out_witsml14__DrawWorksType(soap, tag, id, (const witsml14__DrawWorksType *)ptr, "witsml14:DrawWorksType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType:
		return soap_out_witsml14__DerrickType(soap, tag, id, (const witsml14__DerrickType *)ptr, "witsml14:DerrickType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod:
		return soap_out_witsml14__DeflectionMethod(soap, tag, id, (const witsml14__DeflectionMethod *)ptr, "witsml14:DeflectionMethod");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition:
		return soap_out_witsml14__ConnectionPosition(soap, tag, id, (const witsml14__ConnectionPosition *)ptr, "witsml14:ConnectionPosition");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit:
		return soap_out_witsml14__ChronostratigraphyUnit(soap, tag, id, (const witsml14__ChronostratigraphyUnit *)ptr, "witsml14:ChronostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType:
		return soap_out_witsml14__ChangeInfoType(soap, tag, id, (const witsml14__ChangeInfoType *)ptr, "witsml14:ChangeInfoType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType:
		return soap_out_witsml14__CementJobType(soap, tag, id, (const witsml14__CementJobType *)ptr, "witsml14:CementJobType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig:
		return soap_out_witsml14__BoxPinConfig(soap, tag, id, (const witsml14__BoxPinConfig *)ptr, "witsml14:BoxPinConfig");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType:
		return soap_out_witsml14__BopType(soap, tag, id, (const witsml14__BopType *)ptr, "witsml14:BopType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType:
		return soap_out_witsml14__BladeType(soap, tag, id, (const witsml14__BladeType *)ptr, "witsml14:BladeType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType:
		return soap_out_witsml14__BladeShapeType(soap, tag, id, (const witsml14__BladeShapeType *)ptr, "witsml14:BladeShapeType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus:
		return soap_out_witsml14__BhaStatus(soap, tag, id, (const witsml14__BhaStatus *)ptr, "witsml14:BhaStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType:
		return soap_out_witsml14__BitType(soap, tag, id, (const witsml14__BitType *)ptr, "witsml14:BitType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled:
		return soap_out_witsml14__BitReasonPulled(soap, tag, id, (const witsml14__BitReasonPulled *)ptr, "witsml14:BitReasonPulled");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode:
		return soap_out_witsml14__BitDullCode(soap, tag, id, (const witsml14__BitDullCode *)ptr, "witsml14:BitDullCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType:
		return soap_out_witsml14__BearingType(soap, tag, id, (const witsml14__BearingType *)ptr, "witsml14:BearingType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef:
		return soap_out_witsml14__AziRef(soap, tag, id, (const witsml14__AziRef *)ptr, "witsml14:AziRef");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus:
		return soap_out_witsml14__AuthorizationStatus(soap, tag, id, (const witsml14__AuthorizationStatus *)ptr, "witsml14:AuthorizationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType:
		return soap_out_witsml14__ActivityClassType(soap, tag, id, (const witsml14__ActivityClassType *)ptr, "witsml14:ActivityClassType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom:
		return soap_out_witsml14__VolumePerVolumeUom(soap, tag, id, (const witsml14__VolumePerVolumeUom *)ptr, "witsml14:VolumePerVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom:
		return soap_out_witsml14__VolumePerLengthUom(soap, tag, id, (const witsml14__VolumePerLengthUom *)ptr, "witsml14:VolumePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom:
		return soap_out_witsml14__VolumeFlowRateUom(soap, tag, id, (const witsml14__VolumeFlowRateUom *)ptr, "witsml14:VolumeFlowRateUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom:
		return soap_out_witsml14__VolumeUom(soap, tag, id, (const witsml14__VolumeUom *)ptr, "witsml14:VolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom:
		return soap_out_witsml14__VelocityUom(soap, tag, id, (const witsml14__VelocityUom *)ptr, "witsml14:VelocityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom:
		return soap_out_witsml14__TimeUom(soap, tag, id, (const witsml14__TimeUom *)ptr, "witsml14:TimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom:
		return soap_out_witsml14__ThermodynamicTemperatureUom(soap, tag, id, (const witsml14__ThermodynamicTemperatureUom *)ptr, "witsml14:ThermodynamicTemperatureUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom:
		return soap_out_witsml14__ThermalVolumetricExpansionUom(soap, tag, id, (const witsml14__ThermalVolumetricExpansionUom *)ptr, "witsml14:ThermalVolumetricExpansionUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom:
		return soap_out_witsml14__ThermalConductivityUom(soap, tag, id, (const witsml14__ThermalConductivityUom *)ptr, "witsml14:ThermalConductivityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom:
		return soap_out_witsml14__StandardVolumePerTimeUom(soap, tag, id, (const witsml14__StandardVolumePerTimeUom *)ptr, "witsml14:StandardVolumePerTimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom:
		return soap_out_witsml14__StandardVolumeUom(soap, tag, id, (const witsml14__StandardVolumeUom *)ptr, "witsml14:StandardVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom:
		return soap_out_witsml14__SpecificVolumeUom(soap, tag, id, (const witsml14__SpecificVolumeUom *)ptr, "witsml14:SpecificVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom:
		return soap_out_witsml14__SpecificHeatCapacityUom(soap, tag, id, (const witsml14__SpecificHeatCapacityUom *)ptr, "witsml14:SpecificHeatCapacityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom:
		return soap_out_witsml14__RelativePowerUom(soap, tag, id, (const witsml14__RelativePowerUom *)ptr, "witsml14:RelativePowerUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom:
		return soap_out_witsml14__PressureUom(soap, tag, id, (const witsml14__PressureUom *)ptr, "witsml14:PressureUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom:
		return soap_out_witsml14__PowerUom(soap, tag, id, (const witsml14__PowerUom *)ptr, "witsml14:PowerUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom:
		return soap_out_witsml14__PlaneAngleUom(soap, tag, id, (const witsml14__PlaneAngleUom *)ptr, "witsml14:PlaneAngleUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom:
		return soap_out_witsml14__PermeabilityRockUom(soap, tag, id, (const witsml14__PermeabilityRockUom *)ptr, "witsml14:PermeabilityRockUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom:
		return soap_out_witsml14__PerLengthUom(soap, tag, id, (const witsml14__PerLengthUom *)ptr, "witsml14:PerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom:
		return soap_out_witsml14__MomentOfForceUom(soap, tag, id, (const witsml14__MomentOfForceUom *)ptr, "witsml14:MomentOfForceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom:
		return soap_out_witsml14__MassPerLengthUom(soap, tag, id, (const witsml14__MassPerLengthUom *)ptr, "witsml14:MassPerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom:
		return soap_out_witsml14__MassUom(soap, tag, id, (const witsml14__MassUom *)ptr, "witsml14:MassUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom:
		return soap_out_witsml14__MassConcentrationUom(soap, tag, id, (const witsml14__MassConcentrationUom *)ptr, "witsml14:MassConcentrationUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom:
		return soap_out_witsml14__MagneticInductionUom(soap, tag, id, (const witsml14__MagneticInductionUom *)ptr, "witsml14:MagneticInductionUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom:
		return soap_out_witsml14__LengthPerLengthUom(soap, tag, id, (const witsml14__LengthPerLengthUom *)ptr, "witsml14:LengthPerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom:
		return soap_out_witsml14__LengthUom(soap, tag, id, (const witsml14__LengthUom *)ptr, "witsml14:LengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom:
		return soap_out_witsml14__IlluminanceUom(soap, tag, id, (const witsml14__IlluminanceUom *)ptr, "witsml14:IlluminanceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom:
		return soap_out_witsml14__ForcePerVolumeUom(soap, tag, id, (const witsml14__ForcePerVolumeUom *)ptr, "witsml14:ForcePerVolumeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom:
		return soap_out_witsml14__ForcePerLengthUom(soap, tag, id, (const witsml14__ForcePerLengthUom *)ptr, "witsml14:ForcePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom:
		return soap_out_witsml14__ForceUom(soap, tag, id, (const witsml14__ForceUom *)ptr, "witsml14:ForceUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom:
		return soap_out_witsml14__EquivalentPerMassUom(soap, tag, id, (const witsml14__EquivalentPerMassUom *)ptr, "witsml14:EquivalentPerMassUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom:
		return soap_out_witsml14__ElectricPotentialUom(soap, tag, id, (const witsml14__ElectricPotentialUom *)ptr, "witsml14:ElectricPotentialUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom:
		return soap_out_witsml14__ElectricCurrentUom(soap, tag, id, (const witsml14__ElectricCurrentUom *)ptr, "witsml14:ElectricCurrentUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom:
		return soap_out_witsml14__DynamicViscosityUom(soap, tag, id, (const witsml14__DynamicViscosityUom *)ptr, "witsml14:DynamicViscosityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom:
		return soap_out_witsml14__DimensionlessUom(soap, tag, id, (const witsml14__DimensionlessUom *)ptr, "witsml14:DimensionlessUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom:
		return soap_out_witsml14__DensityUom(soap, tag, id, (const witsml14__DensityUom *)ptr, "witsml14:DensityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom:
		return soap_out_witsml14__CompressibilityUom(soap, tag, id, (const witsml14__CompressibilityUom *)ptr, "witsml14:CompressibilityUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom:
		return soap_out_witsml14__AreaPerAreaUom(soap, tag, id, (const witsml14__AreaPerAreaUom *)ptr, "witsml14:AreaPerAreaUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom:
		return soap_out_witsml14__AreaUom(soap, tag, id, (const witsml14__AreaUom *)ptr, "witsml14:AreaUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom:
		return soap_out_witsml14__AnglePerTimeUom(soap, tag, id, (const witsml14__AnglePerTimeUom *)ptr, "witsml14:AnglePerTimeUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom:
		return soap_out_witsml14__AnglePerLengthUom(soap, tag, id, (const witsml14__AnglePerLengthUom *)ptr, "witsml14:AnglePerLengthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom:
		return soap_out_witsml14__AccelerationLinearUom(soap, tag, id, (const witsml14__AccelerationLinearUom *)ptr, "witsml14:AccelerationLinearUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom:
		return soap_out_witsml14__WellVerticalCoordinateUom(soap, tag, id, (const witsml14__WellVerticalCoordinateUom *)ptr, "witsml14:WellVerticalCoordinateUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom:
		return soap_out_witsml14__MeasuredDepthUom(soap, tag, id, (const witsml14__MeasuredDepthUom *)ptr, "witsml14:MeasuredDepthUom");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom:
		return soap_out_witsml14__PercentUom(soap, tag, id, (const witsml14__PercentUom *)ptr, "witsml14:PercentUom");
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys:
		return soap_out__witsml14__trajectorys(soap, "witsml14:trajectorys", id, (const witsml14__obj_USCOREtrajectorys *)ptr, "");
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores:
		return soap_out__witsml14__wellbores(soap, "witsml14:wellbores", id, (const witsml14__obj_USCOREwellbores *)ptr, "");
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wells:
		return soap_out__witsml14__wells(soap, "witsml14:wells", id, (const witsml14__obj_USCOREwells *)ptr, "");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		return soap_out_witsml14__commentString(soap, tag, id, (const std::string *)ptr, "witsml14:commentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		return soap_out_witsml14__TypeSurveyTool(soap, tag, id, (const std::string *)ptr, "witsml14:TypeSurveyTool");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		return soap_out_witsml14__TrajStnCalcAlgorithm(soap, tag, id, (const std::string *)ptr, "witsml14:TrajStnCalcAlgorithm");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		return soap_out_witsml14__QualifierType(soap, tag, id, (const std::string *)ptr, "witsml14:QualifierType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		return soap_out_witsml14__NameTagTechnology(soap, tag, id, (const std::string *)ptr, "witsml14:NameTagTechnology");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		return soap_out_witsml14__NameTagNumberingScheme(soap, tag, id, (const std::string *)ptr, "witsml14:NameTagNumberingScheme");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		return soap_out_witsml14__NameTagLocation(soap, tag, id, (const std::string *)ptr, "witsml14:NameTagLocation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		return soap_out_witsml14__MudSubClass(soap, tag, id, (const std::string *)ptr, "witsml14:MudSubClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		return soap_out_witsml14__MeasureClass(soap, tag, id, (const std::string *)ptr, "witsml14:MeasureClass");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		return soap_out_witsml14__MatrixCementType(soap, tag, id, (const std::string *)ptr, "witsml14:MatrixCementType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		return soap_out_witsml14__LithologyType(soap, tag, id, (const std::string *)ptr, "witsml14:LithologyType");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		return soap_out_witsml14__ExtensionName(soap, tag, id, (const std::string *)ptr, "witsml14:ExtensionName");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		return soap_out_witsml14__ActivityCode(soap, tag, id, (const std::string *)ptr, "witsml14:ActivityCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		return soap_out_witsml14__abstractCommentString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractCommentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		return soap_out_witsml14__str32(soap, tag, id, (const std::string *)ptr, "witsml14:str32");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		return soap_out_witsml14__uomString(soap, tag, id, (const std::string *)ptr, "witsml14:uomString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		return soap_out_witsml14__kindString(soap, tag, id, (const std::string *)ptr, "witsml14:kindString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		return soap_out_witsml14__encodedValueString(soap, tag, id, (const std::string *)ptr, "witsml14:encodedValueString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		return soap_out_witsml14__descriptionString(soap, tag, id, (const std::string *)ptr, "witsml14:descriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		return soap_out_witsml14__nameString(soap, tag, id, (const std::string *)ptr, "witsml14:nameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		return soap_out_witsml14__refWellDatum(soap, tag, id, (const std::string *)ptr, "witsml14:refWellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		return soap_out_witsml14__refString(soap, tag, id, (const std::string *)ptr, "witsml14:refString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		return soap_out_witsml14__uidParentString(soap, tag, id, (const std::string *)ptr, "witsml14:uidParentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		return soap_out_witsml14__uidString(soap, tag, id, (const std::string *)ptr, "witsml14:uidString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		return soap_out_witsml14__timeZone(soap, tag, id, (const std::string *)ptr, "witsml14:timeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		return soap_out_witsml14__abstractUomEnum(soap, tag, id, (const std::string *)ptr, "witsml14:abstractUomEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		return soap_out_witsml14__abstractTypeEnum(soap, tag, id, (const std::string *)ptr, "witsml14:abstractTypeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		return soap_out_witsml14__abstractString32(soap, tag, id, (const std::string *)ptr, "witsml14:abstractString32");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		return soap_out_witsml14__abstractDescriptionString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractDescriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		return soap_out_witsml14__abstractUidString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractUidString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		return soap_out_witsml14__abstractNameString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractNameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		return soap_out_witsml14__abstractTimeZone(soap, tag, id, (const std::string *)ptr, "witsml14:abstractTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		return soap_out_witsml14__abstractMaximumLengthString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractMaximumLengthString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		return soap_out_witsml14__str16(soap, tag, id, (const std::string *)ptr, "witsml14:str16");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		return soap_out_witsml14__str2(soap, tag, id, (const std::string *)ptr, "witsml14:str2");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		return soap_out_witsml14__publicLandSurveySystemQuarterSection(soap, tag, id, (const std::string *)ptr, "witsml14:publicLandSurveySystemQuarterSection");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		return soap_out_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, id, (const std::string *)ptr, "witsml14:publicLandSurveySystemQuarterTownship");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		return soap_out_witsml14__sectionNumber(soap, tag, id, (const std::string *)ptr, "witsml14:sectionNumber");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		return soap_out_witsml14__geodeticZoneString(soap, tag, id, (const std::string *)ptr, "witsml14:geodeticZoneString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		return soap_out_witsml14__iadcBearingWearCode(soap, tag, id, (const std::string *)ptr, "witsml14:iadcBearingWearCode");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		return soap_out_witsml14__uncollapsedString(soap, tag, id, (const std::string *)ptr, "witsml14:uncollapsedString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		return soap_out_witsml14__schemaVersionString(soap, tag, id, (const std::string *)ptr, "witsml14:schemaVersionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		return soap_out_witsml14__shortDescriptionString(soap, tag, id, (const std::string *)ptr, "witsml14:shortDescriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		return soap_out_witsml14__date(soap, tag, id, (const std::string *)ptr, "witsml14:date");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		return soap_out_witsml14__abstractUncollapsedString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractUncollapsedString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		return soap_out_witsml14__abstractString(soap, tag, id, (const std::string *)ptr, "witsml14:abstractString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		return soap_out_witsml14__abstractDate(soap, tag, id, (const std::string *)ptr, "witsml14:abstractDate");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		return soap_out_witsml14__listOfString(soap, tag, id, (const std::string *)ptr, "witsml14:listOfString");
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		return ((abstract__abstractObject *)ptr)->soap_out(soap, tag, id, "abstract:abstractObject");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		return ((witsml14__cs_USCORErefWellboreTrajectory *)ptr)->soap_out(soap, tag, id, "witsml14:cs_refWellboreTrajectory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		return ((witsml14__cs_USCORErefWellboreTrajectoryStation *)ptr)->soap_out(soap, tag, id, "witsml14:cs_refWellboreTrajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		return ((witsml14__cs_USCOREstnTrajMatrixCov *)ptr)->soap_out(soap, tag, id, "witsml14:cs_stnTrajMatrixCov");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		return ((witsml14__cs_USCOREstnTrajValid *)ptr)->soap_out(soap, tag, id, "witsml14:cs_stnTrajValid");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		return ((witsml14__cs_USCOREstnTrajCorUsed *)ptr)->soap_out(soap, tag, id, "witsml14:cs_stnTrajCorUsed");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		return ((witsml14__cs_USCOREstnTrajRawData *)ptr)->soap_out(soap, tag, id, "witsml14:cs_stnTrajRawData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		return ((witsml14__cs_USCOREtrajectoryStation *)ptr)->soap_out(soap, tag, id, "witsml14:cs_trajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		return ((witsml14__obj_USCOREtrajectory *)ptr)->soap_out(soap, tag, id, "witsml14:obj_trajectory");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		return ((witsml14__obj_USCOREtrajectorys *)ptr)->soap_out(soap, tag, id, "witsml14:obj_trajectorys");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		return ((witsml14__obj_USCOREwellbore *)ptr)->soap_out(soap, tag, id, "witsml14:obj_wellbore");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		return ((witsml14__obj_USCOREwellbores *)ptr)->soap_out(soap, tag, id, "witsml14:obj_wellbores");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		return ((witsml14__cs_USCOREcustomData *)ptr)->soap_out(soap, tag, id, "witsml14:cs_customData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		return ((witsml14__cs_USCOREextensionAny *)ptr)->soap_out(soap, tag, id, "witsml14:cs_extensionAny");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		return ((witsml14__cs_USCOREcommonData *)ptr)->soap_out(soap, tag, id, "witsml14:cs_commonData");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		return ((witsml14__cs_USCORElocalCRS *)ptr)->soap_out(soap, tag, id, "witsml14:cs_localCRS");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		return ((witsml14__cs_USCOREprojectionx *)ptr)->soap_out(soap, tag, id, "witsml14:cs_projectionx");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		return ((witsml14__cs_USCOREgeodeticModel *)ptr)->soap_out(soap, tag, id, "witsml14:cs_geodeticModel");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		return ((witsml14__cs_USCOREwellCRS *)ptr)->soap_out(soap, tag, id, "witsml14:cs_wellCRS");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		return ((witsml14__cs_USCOREreferencePoint *)ptr)->soap_out(soap, tag, id, "witsml14:cs_referencePoint");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		return ((witsml14__cs_USCOREpublicLandSurveySystem *)ptr)->soap_out(soap, tag, id, "witsml14:cs_publicLandSurveySystem");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		return ((witsml14__cs_USCORErefWellWellboreRig *)ptr)->soap_out(soap, tag, id, "witsml14:cs_refWellWellboreRig");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		return ((witsml14__cs_USCORErefWellWellbore *)ptr)->soap_out(soap, tag, id, "witsml14:cs_refWellWellbore");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		return ((witsml14__cs_USCOREwellDatum *)ptr)->soap_out(soap, tag, id, "witsml14:cs_wellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		return ((witsml14__cs_USCORElocation *)ptr)->soap_out(soap, tag, id, "witsml14:cs_location");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		return ((witsml14__cs_USCOREdocumentEvent *)ptr)->soap_out(soap, tag, id, "witsml14:cs_documentEvent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		return ((witsml14__cs_USCOREdocumentAudit *)ptr)->soap_out(soap, tag, id, "witsml14:cs_documentAudit");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		return ((witsml14__cs_USCOREextensionNameValue *)ptr)->soap_out(soap, tag, id, "witsml14:cs_extensionNameValue");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		return ((witsml14__cs_USCOREdocumentSecurityInfo *)ptr)->soap_out(soap, tag, id, "witsml14:cs_documentSecurityInfo");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		return ((witsml14__abstractMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:abstractMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		return ((witsml14__volumePerVolumeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:volumePerVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		return ((witsml14__volumePerLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:volumePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		return ((witsml14__volumeFlowRateMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:volumeFlowRateMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		return ((witsml14__volumeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:volumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		return ((witsml14__velocityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:velocityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		return ((witsml14__timeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:timeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		return ((witsml14__thermodynamicTemperatureMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:thermodynamicTemperatureMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		return ((witsml14__thermalVolumetricExpansionMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:thermalVolumetricExpansionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		return ((witsml14__thermalConductivityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:thermalConductivityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		return ((witsml14__standardVolumePerTimeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:standardVolumePerTimeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		return ((witsml14__standardVolumeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:standardVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		return ((witsml14__specificVolumeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:specificVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		return ((witsml14__specificHeatCapacityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:specificHeatCapacityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		return ((witsml14__relativePowerMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:relativePowerMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		return ((witsml14__pressureMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:pressureMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		return ((witsml14__powerMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:powerMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		return ((witsml14__planeAngleMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:planeAngleMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		return ((witsml14__permeabilityRockMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:permeabilityRockMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		return ((witsml14__perLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:perLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		return ((witsml14__momentOfForceMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:momentOfForceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		return ((witsml14__massPerLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:massPerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		return ((witsml14__massMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:massMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		return ((witsml14__massConcentrationMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:massConcentrationMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		return ((witsml14__magneticInductionMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:magneticInductionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		return ((witsml14__lengthPerLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:lengthPerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		return ((witsml14__lengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:lengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		return ((witsml14__illuminanceMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:illuminanceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		return ((witsml14__forcePerVolumeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:forcePerVolumeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		return ((witsml14__forcePerLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:forcePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		return ((witsml14__forceMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:forceMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		return ((witsml14__equivalentPerMassMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:equivalentPerMassMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		return ((witsml14__electricPotentialMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:electricPotentialMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		return ((witsml14__electricCurrentMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:electricCurrentMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		return ((witsml14__dynamicViscosityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:dynamicViscosityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		return ((witsml14__dimensionlessMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:dimensionlessMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		return ((witsml14__densityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:densityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		return ((witsml14__compressibilityMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:compressibilityMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		return ((witsml14__areaPerAreaMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:areaPerAreaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		return ((witsml14__areaMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:areaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		return ((witsml14__anglePerTimeMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:anglePerTimeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		return ((witsml14__anglePerLengthMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:anglePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		return ((witsml14__accelerationLinearMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:accelerationLinearMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		return ((witsml14__indexedObject *)ptr)->soap_out(soap, tag, id, "witsml14:indexedObject");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		return ((witsml14__cost *)ptr)->soap_out(soap, tag, id, "witsml14:cost");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		return ((witsml14__footageEastWest *)ptr)->soap_out(soap, tag, id, "witsml14:footageEastWest");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		return ((witsml14__footageNorthSouth *)ptr)->soap_out(soap, tag, id, "witsml14:footageNorthSouth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		return ((witsml14__wellElevationCoord *)ptr)->soap_out(soap, tag, id, "witsml14:wellElevationCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		return ((witsml14__wellVerticalDepthCoord *)ptr)->soap_out(soap, tag, id, "witsml14:wellVerticalDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		return ((witsml14__measuredDepthCoord *)ptr)->soap_out(soap, tag, id, "witsml14:measuredDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		return ((witsml14__chronostratigraphyStruct *)ptr)->soap_out(soap, tag, id, "witsml14:chronostratigraphyStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		return ((witsml14__lithostratigraphyStruct *)ptr)->soap_out(soap, tag, id, "witsml14:lithostratigraphyStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		return ((witsml14__objectSequence *)ptr)->soap_out(soap, tag, id, "witsml14:objectSequence");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		return ((witsml14__wellKnownNameStruct *)ptr)->soap_out(soap, tag, id, "witsml14:wellKnownNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		return ((witsml14__shortNameStruct *)ptr)->soap_out(soap, tag, id, "witsml14:shortNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		return ((witsml14__nameStruct *)ptr)->soap_out(soap, tag, id, "witsml14:nameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		return ((witsml14__extensionvalue *)ptr)->soap_out(soap, tag, id, "witsml14:extensionvalue");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		return ((witsml14__timestampedCommentString *)ptr)->soap_out(soap, tag, id, "witsml14:timestampedCommentString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		return ((witsml14__refPositiveCount *)ptr)->soap_out(soap, tag, id, "witsml14:refPositiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		return ((witsml14__refObjectString *)ptr)->soap_out(soap, tag, id, "witsml14:refObjectString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		return ((witsml14__refNameString *)ptr)->soap_out(soap, tag, id, "witsml14:refNameString");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		return ((witsml14__ratioGenericMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:ratioGenericMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		return ((witsml14__genericMeasure *)ptr)->soap_out(soap, tag, id, "witsml14:genericMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		return ((witsml14__measureOrQuantity *)ptr)->soap_out(soap, tag, id, "witsml14:measureOrQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		return ((witsml14__volumePerVolumeMeasurePercent *)ptr)->soap_out(soap, tag, id, "witsml14:volumePerVolumeMeasurePercent");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		return ((witsml14__yAxisAzimuth *)ptr)->soap_out(soap, tag, id, "witsml14:yAxisAzimuth");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		return ((witsml14__timestampedTimeZone *)ptr)->soap_out(soap, tag, id, "witsml14:timestampedTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		return ((witsml14__cs_USCOREdocumentFileCreation *)ptr)->soap_out(soap, tag, id, "witsml14:cs_documentFileCreation");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		return ((witsml14__cs_USCOREdocumentInfo *)ptr)->soap_out(soap, tag, id, "witsml14:cs_documentInfo");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		return ((witsml14__obj_USCOREwell *)ptr)->soap_out(soap, tag, id, "witsml14:obj_well");
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		return ((witsml14__obj_USCOREwells *)ptr)->soap_out(soap, tag, id, "witsml14:obj_wells");
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		return soap_out_xsd__date(soap, tag, id, (const std::string *)ptr, "xsd:date");
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_witsml14__timestamp:
		return soap_out_witsml14__timestamp(soap, tag, id, (const struct tm *)ptr, "witsml14:timestamp");
	case SOAP_TYPE_witsml14__abstractDateTime:
		return soap_out_witsml14__abstractDateTime(soap, tag, id, (const struct tm *)ptr, "witsml14:abstractDateTime");
	case SOAP_TYPE_xsd__dateTime:
		return soap_out_xsd__dateTime(soap, tag, id, (const struct tm *)ptr, "xsd:dateTime");
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		return soap_out_tm(soap, tag, id, (const struct tm *)ptr, "tm");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refWellDatum:
		return soap_out_PointerTowitsml14__refWellDatum(soap, tag, id, (std::string *const*)ptr, "witsml14:refWellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ChronostratigraphyUnit:
		return soap_out_PointerTowitsml14__ChronostratigraphyUnit(soap, tag, id, (witsml14__ChronostratigraphyUnit *const*)ptr, "witsml14:ChronostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__LithostratigraphyUnit:
		return soap_out_PointerTowitsml14__LithostratigraphyUnit(soap, tag, id, (witsml14__LithostratigraphyUnit *const*)ptr, "witsml14:LithostratigraphyUnit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refString:
		return soap_out_PointerTowitsml14__refString(soap, tag, id, (std::string *const*)ptr, "witsml14:refString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uomString:
		return soap_out_PointerTowitsml14__uomString(soap, tag, id, (std::string *const*)ptr, "witsml14:uomString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREtrajectory:
		return soap_out_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, id, (witsml14__obj_USCOREtrajectory *const*)ptr, "witsml14:obj_trajectory");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwellbore:
		return soap_out_PointerTowitsml14__obj_USCOREwellbore(soap, tag, id, (witsml14__obj_USCOREwellbore *const*)ptr, "witsml14:obj_wellbore");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwell:
		return soap_out_PointerTowitsml14__obj_USCOREwell(soap, tag, id, (witsml14__obj_USCOREwell *const*)ptr, "witsml14:obj_well");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentInfo:
		return soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(soap, tag, id, (witsml14__cs_USCOREdocumentInfo *const*)ptr, "witsml14:cs_documentInfo");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__areaMeasure:
		return soap_out_PointerTowitsml14__areaMeasure(soap, tag, id, (witsml14__areaMeasure *const*)ptr, "witsml14:areaMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation:
		return soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, id, (witsml14__cs_USCORErefWellboreTrajectoryStation *const*)ptr, "witsml14:cs_refWellboreTrajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajMatrixCov:
		return soap_out_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, tag, id, (witsml14__cs_USCOREstnTrajMatrixCov *const*)ptr, "witsml14:cs_stnTrajMatrixCov");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajValid:
		return soap_out_PointerTowitsml14__cs_USCOREstnTrajValid(soap, tag, id, (witsml14__cs_USCOREstnTrajValid *const*)ptr, "witsml14:cs_stnTrajValid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajCorUsed:
		return soap_out_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, tag, id, (witsml14__cs_USCOREstnTrajCorUsed *const*)ptr, "witsml14:cs_stnTrajCorUsed");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajRawData:
		return soap_out_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, tag, id, (witsml14__cs_USCOREstnTrajRawData *const*)ptr, "witsml14:cs_stnTrajRawData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStationStatus:
		return soap_out_PointerTowitsml14__TrajStationStatus(soap, tag, id, (witsml14__TrajStationStatus *const*)ptr, "witsml14:TrajStationStatus");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__magneticInductionMeasure:
		return soap_out_PointerTowitsml14__magneticInductionMeasure(soap, tag, id, (witsml14__magneticInductionMeasure *const*)ptr, "witsml14:magneticInductionMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__accelerationLinearMeasure:
		return soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, tag, id, (witsml14__accelerationLinearMeasure *const*)ptr, "witsml14:accelerationLinearMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__anglePerLengthMeasure:
		return soap_out_PointerTowitsml14__anglePerLengthMeasure(soap, tag, id, (witsml14__anglePerLengthMeasure *const*)ptr, "witsml14:anglePerLengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStnCalcAlgorithm:
		return soap_out_PointerTowitsml14__TrajStnCalcAlgorithm(soap, tag, id, (std::string *const*)ptr, "witsml14:TrajStnCalcAlgorithm");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TypeSurveyTool:
		return soap_out_PointerTowitsml14__TypeSurveyTool(soap, tag, id, (std::string *const*)ptr, "witsml14:TypeSurveyTool");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREtrajectoryStation:
		return soap_out_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, id, (witsml14__cs_USCOREtrajectoryStation *const*)ptr, "witsml14:cs_trajectoryStation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__AziRef:
		return soap_out_PointerTowitsml14__AziRef(soap, tag, id, (witsml14__AziRef *const*)ptr, "witsml14:AziRef");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectory:
		return soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, tag, id, (witsml14__cs_USCORErefWellboreTrajectory *const*)ptr, "witsml14:cs_refWellboreTrajectory");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidParentString:
		return soap_out_PointerTowitsml14__uidParentString(soap, tag, id, (std::string *const*)ptr, "witsml14:uidParentString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timeMeasure:
		return soap_out_PointerTowitsml14__timeMeasure(soap, tag, id, (witsml14__timeMeasure *const*)ptr, "witsml14:timeMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellVerticalDepthCoord:
		return soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, tag, id, (witsml14__wellVerticalDepthCoord *const*)ptr, "witsml14:wellVerticalDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreShape:
		return soap_out_PointerTowitsml14__WellboreShape(soap, tag, id, (witsml14__WellboreShape *const*)ptr, "witsml14:WellboreShape");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreType:
		return soap_out_PointerTowitsml14__WellboreType(soap, tag, id, (witsml14__WellboreType *const*)ptr, "witsml14:WellboreType");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionAny:
		return soap_out_PointerTowitsml14__cs_USCOREextensionAny(soap, tag, id, (witsml14__cs_USCOREextensionAny *const*)ptr, "witsml14:cs_extensionAny");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestampedTimeZone:
		return soap_out_PointerTowitsml14__timestampedTimeZone(soap, tag, id, (witsml14__timestampedTimeZone *const*)ptr, "witsml14:timestampedTimeZone");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ItemState:
		return soap_out_PointerTowitsml14__ItemState(soap, tag, id, (witsml14__ItemState *const*)ptr, "witsml14:ItemState");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__yAxisAzimuth:
		return soap_out_PointerTowitsml14__yAxisAzimuth(soap, tag, id, (witsml14__yAxisAzimuth *const*)ptr, "witsml14:yAxisAzimuth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__indexedObject:
		return soap_out_PointerTowitsml14__indexedObject(soap, tag, id, (witsml14__indexedObject *const*)ptr, "witsml14:indexedObject");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Hemispheres:
		return soap_out_PointerTowitsml14__Hemispheres(soap, tag, id, (witsml14__Hemispheres *const*)ptr, "witsml14:Hemispheres");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NADTypes:
		return soap_out_PointerTowitsml14__NADTypes(soap, tag, id, (witsml14__NADTypes *const*)ptr, "witsml14:NADTypes");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__geodeticZoneString:
		return soap_out_PointerTowitsml14__geodeticZoneString(soap, tag, id, (std::string *const*)ptr, "witsml14:geodeticZoneString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ProjectionVariantsObliqueMercator:
		return soap_out_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, tag, id, (witsml14__ProjectionVariantsObliqueMercator *const*)ptr, "witsml14:ProjectionVariantsObliqueMercator");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Projection:
		return soap_out_PointerTowitsml14__Projection(soap, tag, id, (witsml14__Projection *const*)ptr, "witsml14:Projection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Ellipsoid:
		return soap_out_PointerTowitsml14__Ellipsoid(soap, tag, id, (witsml14__Ellipsoid *const*)ptr, "witsml14:Ellipsoid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__unitlessQuantity:
		return soap_out_PointerTowitsml14__unitlessQuantity(soap, tag, id, (double *const*)ptr, "witsml14:unitlessQuantity");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__GeodeticDatum:
		return soap_out_PointerTowitsml14__GeodeticDatum(soap, tag, id, (witsml14__GeodeticDatum *const*)ptr, "witsml14:GeodeticDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocalCRS:
		return soap_out_PointerTowitsml14__cs_USCORElocalCRS(soap, tag, id, (witsml14__cs_USCORElocalCRS *const*)ptr, "witsml14:cs_localCRS");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREgeodeticModel:
		return soap_out_PointerTowitsml14__cs_USCOREgeodeticModel(soap, tag, id, (witsml14__cs_USCOREgeodeticModel *const*)ptr, "witsml14:cs_geodeticModel");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREprojectionx:
		return soap_out_PointerTowitsml14__cs_USCOREprojectionx(soap, tag, id, (witsml14__cs_USCOREprojectionx *const*)ptr, "witsml14:cs_projectionx");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageEastWest:
		return soap_out_PointerTowitsml14__footageEastWest(soap, tag, id, (witsml14__footageEastWest *const*)ptr, "witsml14:footageEastWest");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageNorthSouth:
		return soap_out_PointerTowitsml14__footageNorthSouth(soap, tag, id, (witsml14__footageNorthSouth *const*)ptr, "witsml14:footageNorthSouth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterTownship:
		return soap_out_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, tag, id, (std::string *const*)ptr, "witsml14:publicLandSurveySystemQuarterTownship");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterSection:
		return soap_out_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, tag, id, (std::string *const*)ptr, "witsml14:publicLandSurveySystemQuarterSection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__sectionNumber:
		return soap_out_PointerTowitsml14__sectionNumber(soap, tag, id, (std::string *const*)ptr, "witsml14:sectionNumber");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NorthOrSouth:
		return soap_out_PointerTowitsml14__NorthOrSouth(soap, tag, id, (witsml14__NorthOrSouth *const*)ptr, "witsml14:NorthOrSouth");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__EastOrWest:
		return soap_out_PointerTowitsml14__EastOrWest(soap, tag, id, (witsml14__EastOrWest *const*)ptr, "witsml14:EastOrWest");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__PrincipalMeridian:
		return soap_out_PointerTowitsml14__PrincipalMeridian(soap, tag, id, (witsml14__PrincipalMeridian *const*)ptr, "witsml14:PrincipalMeridian");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellboreRig:
		return soap_out_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, tag, id, (witsml14__cs_USCORErefWellWellboreRig *const*)ptr, "witsml14:cs_refWellWellboreRig");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellbore:
		return soap_out_PointerTowitsml14__cs_USCORErefWellWellbore(soap, tag, id, (witsml14__cs_USCORErefWellWellbore *const*)ptr, "witsml14:cs_refWellWellbore");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellKnownNameStruct:
		return soap_out_PointerTowitsml14__wellKnownNameStruct(soap, tag, id, (witsml14__wellKnownNameStruct *const*)ptr, "witsml14:wellKnownNameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ElevCodeEnum:
		return soap_out_PointerTowitsml14__ElevCodeEnum(soap, tag, id, (witsml14__ElevCodeEnum *const*)ptr, "witsml14:ElevCodeEnum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__logicalBoolean:
		return soap_out_PointerTowitsml14__logicalBoolean(soap, tag, id, (bool *const*)ptr, "witsml14:logicalBoolean");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__planeAngleMeasure:
		return soap_out_PointerTowitsml14__planeAngleMeasure(soap, tag, id, (witsml14__planeAngleMeasure *const*)ptr, "witsml14:planeAngleMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refNameString:
		return soap_out_PointerTowitsml14__refNameString(soap, tag, id, (witsml14__refNameString *const*)ptr, "witsml14:refNameString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentEvent:
		return soap_out_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, id, (witsml14__cs_USCOREdocumentEvent *const*)ptr, "witsml14:cs_documentEvent");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__descriptionString:
		return soap_out_PointerTowitsml14__descriptionString(soap, tag, id, (std::string *const*)ptr, "witsml14:descriptionString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__MeasureClass:
		return soap_out_PointerTowitsml14__MeasureClass(soap, tag, id, (std::string *const*)ptr, "witsml14:MeasureClass");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__positiveCount:
		return soap_out_PointerTowitsml14__positiveCount(soap, tag, id, (short *const*)ptr, "witsml14:positiveCount");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__measuredDepthCoord:
		return soap_out_PointerTowitsml14__measuredDepthCoord(soap, tag, id, (witsml14__measuredDepthCoord *const*)ptr, "witsml14:measuredDepthCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__extensionvalue:
		return soap_out_PointerTowitsml14__extensionvalue(soap, tag, id, (witsml14__extensionvalue *const*)ptr, "witsml14:extensionvalue");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionNameValue:
		return soap_out_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, id, (witsml14__cs_USCOREextensionNameValue *const*)ptr, "witsml14:cs_extensionNameValue");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__kindString:
		return soap_out_PointerTowitsml14__kindString(soap, tag, id, (std::string *const*)ptr, "witsml14:kindString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentAudit:
		return soap_out_PointerTowitsml14__cs_USCOREdocumentAudit(soap, tag, id, (witsml14__cs_USCOREdocumentAudit *const*)ptr, "witsml14:cs_documentAudit");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__commentString:
		return soap_out_PointerTowitsml14__commentString(soap, tag, id, (std::string *const*)ptr, "witsml14:commentString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		return soap_out_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, id, (witsml14__cs_USCOREdocumentSecurityInfo *const*)ptr, "witsml14:cs_documentSecurityInfo");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentFileCreation:
		return soap_out_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, tag, id, (witsml14__cs_USCOREdocumentFileCreation *const*)ptr, "witsml14:cs_documentFileCreation");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameStruct:
		return soap_out_PointerTowitsml14__nameStruct(soap, tag, id, (witsml14__nameStruct *const*)ptr, "witsml14:nameStruct");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidString:
		return soap_out_PointerTowitsml14__uidString(soap, tag, id, (std::string *const*)ptr, "witsml14:uidString");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcustomData:
		return soap_out_PointerTowitsml14__cs_USCOREcustomData(soap, tag, id, (witsml14__cs_USCOREcustomData *const*)ptr, "witsml14:cs_customData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcommonData:
		return soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, tag, id, (witsml14__cs_USCOREcommonData *const*)ptr, "witsml14:cs_commonData");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellCRS:
		return soap_out_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, id, (witsml14__cs_USCOREwellCRS *const*)ptr, "witsml14:cs_wellCRS");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREreferencePoint:
		return soap_out_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, id, (witsml14__cs_USCOREreferencePoint *const*)ptr, "witsml14:cs_referencePoint");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREpublicLandSurveySystem:
		return soap_out_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, tag, id, (witsml14__cs_USCOREpublicLandSurveySystem *const*)ptr, "witsml14:cs_publicLandSurveySystem");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocation:
		return soap_out_PointerTowitsml14__cs_USCORElocation(soap, tag, id, (witsml14__cs_USCORElocation *const*)ptr, "witsml14:cs_location");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__lengthMeasure:
		return soap_out_PointerTowitsml14__lengthMeasure(soap, tag, id, (witsml14__lengthMeasure *const*)ptr, "witsml14:lengthMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellDatum:
		return soap_out_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, id, (witsml14__cs_USCOREwellDatum *const*)ptr, "witsml14:cs_wellDatum");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellElevationCoord:
		return soap_out_PointerTowitsml14__wellElevationCoord(soap, tag, id, (witsml14__wellElevationCoord *const*)ptr, "witsml14:wellElevationCoord");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellDirection:
		return soap_out_PointerTowitsml14__WellDirection(soap, tag, id, (witsml14__WellDirection *const*)ptr, "witsml14:WellDirection");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellFluid:
		return soap_out_PointerTowitsml14__WellFluid(soap, tag, id, (witsml14__WellFluid *const*)ptr, "witsml14:WellFluid");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellPurpose:
		return soap_out_PointerTowitsml14__WellPurpose(soap, tag, id, (witsml14__WellPurpose *const*)ptr, "witsml14:WellPurpose");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellStatus:
		return soap_out_PointerTowitsml14__WellStatus(soap, tag, id, (witsml14__WellStatus *const*)ptr, "witsml14:WellStatus");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__dimensionlessMeasure:
		return soap_out_PointerTowitsml14__dimensionlessMeasure(soap, tag, id, (witsml14__dimensionlessMeasure *const*)ptr, "witsml14:dimensionlessMeasure");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__str32:
		return soap_out_PointerTowitsml14__str32(soap, tag, id, (std::string *const*)ptr, "witsml14:str32");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestamp:
		return soap_out_PointerTowitsml14__timestamp(soap, tag, id, (struct tm *const*)ptr, "witsml14:timestamp");
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameString:
		return soap_out_PointerTowitsml14__nameString(soap, tag, id, (std::string *const*)ptr, "witsml14:nameString");
	case SOAP_TYPE_gsoap_witsml1_4__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_gsoap_witsml1_4_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in gsoap_witsml1_4C.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys:
		soap_serialize__witsml14__trajectorys(soap, (const witsml14__obj_USCOREtrajectorys *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores:
		soap_serialize__witsml14__wellbores(soap, (const witsml14__obj_USCOREwellbores *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wells:
		soap_serialize__witsml14__wells(soap, (const witsml14__obj_USCOREwells *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		soap_serialize_witsml14__commentString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		soap_serialize_witsml14__TypeSurveyTool(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		soap_serialize_witsml14__TrajStnCalcAlgorithm(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		soap_serialize_witsml14__QualifierType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		soap_serialize_witsml14__NameTagTechnology(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		soap_serialize_witsml14__NameTagNumberingScheme(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		soap_serialize_witsml14__NameTagLocation(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		soap_serialize_witsml14__MudSubClass(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		soap_serialize_witsml14__MeasureClass(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		soap_serialize_witsml14__MatrixCementType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		soap_serialize_witsml14__LithologyType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		soap_serialize_witsml14__ExtensionName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		soap_serialize_witsml14__ActivityCode(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		soap_serialize_witsml14__abstractCommentString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		soap_serialize_witsml14__str32(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		soap_serialize_witsml14__uomString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		soap_serialize_witsml14__kindString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		soap_serialize_witsml14__encodedValueString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		soap_serialize_witsml14__descriptionString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		soap_serialize_witsml14__nameString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		soap_serialize_witsml14__refWellDatum(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		soap_serialize_witsml14__refString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		soap_serialize_witsml14__uidParentString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		soap_serialize_witsml14__uidString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		soap_serialize_witsml14__timeZone(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		soap_serialize_witsml14__abstractUomEnum(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		soap_serialize_witsml14__abstractTypeEnum(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		soap_serialize_witsml14__abstractString32(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		soap_serialize_witsml14__abstractDescriptionString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		soap_serialize_witsml14__abstractUidString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		soap_serialize_witsml14__abstractNameString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		soap_serialize_witsml14__abstractTimeZone(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		soap_serialize_witsml14__abstractMaximumLengthString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		soap_serialize_witsml14__str16(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		soap_serialize_witsml14__str2(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		soap_serialize_witsml14__publicLandSurveySystemQuarterSection(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		soap_serialize_witsml14__publicLandSurveySystemQuarterTownship(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		soap_serialize_witsml14__sectionNumber(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		soap_serialize_witsml14__geodeticZoneString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		soap_serialize_witsml14__iadcBearingWearCode(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		soap_serialize_witsml14__uncollapsedString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		soap_serialize_witsml14__schemaVersionString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		soap_serialize_witsml14__shortDescriptionString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		soap_serialize_witsml14__date(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		soap_serialize_witsml14__abstractUncollapsedString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		soap_serialize_witsml14__abstractString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		soap_serialize_witsml14__abstractDate(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		soap_serialize_witsml14__listOfString(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		((abstract__abstractObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		((witsml14__cs_USCORErefWellboreTrajectory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		((witsml14__cs_USCORErefWellboreTrajectoryStation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		((witsml14__cs_USCOREstnTrajMatrixCov *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		((witsml14__cs_USCOREstnTrajValid *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		((witsml14__cs_USCOREstnTrajCorUsed *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		((witsml14__cs_USCOREstnTrajRawData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		((witsml14__cs_USCOREtrajectoryStation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		((witsml14__obj_USCOREtrajectory *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		((witsml14__obj_USCOREtrajectorys *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		((witsml14__obj_USCOREwellbore *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		((witsml14__obj_USCOREwellbores *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		((witsml14__cs_USCOREcustomData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		((witsml14__cs_USCOREextensionAny *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		((witsml14__cs_USCOREcommonData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		((witsml14__cs_USCORElocalCRS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		((witsml14__cs_USCOREprojectionx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		((witsml14__cs_USCOREgeodeticModel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		((witsml14__cs_USCOREwellCRS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		((witsml14__cs_USCOREreferencePoint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		((witsml14__cs_USCOREpublicLandSurveySystem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		((witsml14__cs_USCORErefWellWellboreRig *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		((witsml14__cs_USCORErefWellWellbore *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		((witsml14__cs_USCOREwellDatum *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		((witsml14__cs_USCORElocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		((witsml14__cs_USCOREdocumentEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		((witsml14__cs_USCOREdocumentAudit *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		((witsml14__cs_USCOREextensionNameValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		((witsml14__cs_USCOREdocumentSecurityInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		((witsml14__abstractMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		((witsml14__volumePerVolumeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		((witsml14__volumePerLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		((witsml14__volumeFlowRateMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		((witsml14__volumeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		((witsml14__velocityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		((witsml14__timeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		((witsml14__thermodynamicTemperatureMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		((witsml14__thermalVolumetricExpansionMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		((witsml14__thermalConductivityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		((witsml14__standardVolumePerTimeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		((witsml14__standardVolumeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		((witsml14__specificVolumeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		((witsml14__specificHeatCapacityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		((witsml14__relativePowerMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		((witsml14__pressureMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		((witsml14__powerMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		((witsml14__planeAngleMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		((witsml14__permeabilityRockMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		((witsml14__perLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		((witsml14__momentOfForceMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		((witsml14__massPerLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		((witsml14__massMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		((witsml14__massConcentrationMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		((witsml14__magneticInductionMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		((witsml14__lengthPerLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		((witsml14__lengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		((witsml14__illuminanceMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		((witsml14__forcePerVolumeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		((witsml14__forcePerLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		((witsml14__forceMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		((witsml14__equivalentPerMassMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		((witsml14__electricPotentialMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		((witsml14__electricCurrentMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		((witsml14__dynamicViscosityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		((witsml14__dimensionlessMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		((witsml14__densityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		((witsml14__compressibilityMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		((witsml14__areaPerAreaMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		((witsml14__areaMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		((witsml14__anglePerTimeMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		((witsml14__anglePerLengthMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		((witsml14__accelerationLinearMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		((witsml14__indexedObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		((witsml14__cost *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		((witsml14__footageEastWest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		((witsml14__footageNorthSouth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		((witsml14__wellElevationCoord *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		((witsml14__wellVerticalDepthCoord *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		((witsml14__measuredDepthCoord *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		((witsml14__chronostratigraphyStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		((witsml14__lithostratigraphyStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		((witsml14__objectSequence *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		((witsml14__wellKnownNameStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		((witsml14__shortNameStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		((witsml14__nameStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		((witsml14__extensionvalue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		((witsml14__timestampedCommentString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		((witsml14__refPositiveCount *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		((witsml14__refObjectString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		((witsml14__refNameString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		((witsml14__ratioGenericMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		((witsml14__genericMeasure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		((witsml14__measureOrQuantity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		((witsml14__volumePerVolumeMeasurePercent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		((witsml14__yAxisAzimuth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		((witsml14__timestampedTimeZone *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		((witsml14__cs_USCOREdocumentFileCreation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		((witsml14__cs_USCOREdocumentInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		((witsml14__obj_USCOREwell *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		((witsml14__obj_USCOREwells *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		soap_serialize_xsd__date(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence:
		soap_serialize___witsml14__obj_USCOREtrajectory_sequence(soap, (const struct __witsml14__obj_USCOREtrajectory_sequence *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence:
		soap_serialize___witsml14__obj_USCOREwellbore_sequence(soap, (const struct __witsml14__obj_USCOREwellbore_sequence *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence:
		soap_serialize___witsml14__obj_USCOREwell_sequence(soap, (const struct __witsml14__obj_USCOREwell_sequence *)ptr);
		break;
	case SOAP_TYPE_witsml14__timestamp:
		soap_serialize_witsml14__timestamp(soap, (const struct tm *)ptr);
		break;
	case SOAP_TYPE_witsml14__abstractDateTime:
		soap_serialize_witsml14__abstractDateTime(soap, (const struct tm *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		soap_serialize_xsd__dateTime(soap, (const struct tm *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		soap_serialize_tm(soap, (const struct tm *)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refWellDatum:
		soap_serialize_PointerTowitsml14__refWellDatum(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ChronostratigraphyUnit:
		soap_serialize_PointerTowitsml14__ChronostratigraphyUnit(soap, (witsml14__ChronostratigraphyUnit *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__LithostratigraphyUnit:
		soap_serialize_PointerTowitsml14__LithostratigraphyUnit(soap, (witsml14__LithostratigraphyUnit *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refString:
		soap_serialize_PointerTowitsml14__refString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uomString:
		soap_serialize_PointerTowitsml14__uomString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREtrajectory:
		soap_serialize_PointerTowitsml14__obj_USCOREtrajectory(soap, (witsml14__obj_USCOREtrajectory *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwellbore:
		soap_serialize_PointerTowitsml14__obj_USCOREwellbore(soap, (witsml14__obj_USCOREwellbore *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__obj_USCOREwell:
		soap_serialize_PointerTowitsml14__obj_USCOREwell(soap, (witsml14__obj_USCOREwell *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentInfo:
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentInfo(soap, (witsml14__cs_USCOREdocumentInfo *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__areaMeasure:
		soap_serialize_PointerTowitsml14__areaMeasure(soap, (witsml14__areaMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation:
		soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, (witsml14__cs_USCORErefWellboreTrajectoryStation *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajMatrixCov:
		soap_serialize_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, (witsml14__cs_USCOREstnTrajMatrixCov *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajValid:
		soap_serialize_PointerTowitsml14__cs_USCOREstnTrajValid(soap, (witsml14__cs_USCOREstnTrajValid *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajCorUsed:
		soap_serialize_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, (witsml14__cs_USCOREstnTrajCorUsed *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREstnTrajRawData:
		soap_serialize_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, (witsml14__cs_USCOREstnTrajRawData *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStationStatus:
		soap_serialize_PointerTowitsml14__TrajStationStatus(soap, (witsml14__TrajStationStatus *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__magneticInductionMeasure:
		soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, (witsml14__magneticInductionMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__accelerationLinearMeasure:
		soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, (witsml14__accelerationLinearMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__anglePerLengthMeasure:
		soap_serialize_PointerTowitsml14__anglePerLengthMeasure(soap, (witsml14__anglePerLengthMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TrajStnCalcAlgorithm:
		soap_serialize_PointerTowitsml14__TrajStnCalcAlgorithm(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__TypeSurveyTool:
		soap_serialize_PointerTowitsml14__TypeSurveyTool(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTo__witsml14__obj_USCOREtrajectory_sequence:
		soap_serialize_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, (struct __witsml14__obj_USCOREtrajectory_sequence *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREtrajectoryStation:
		soap_serialize_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, (witsml14__cs_USCOREtrajectoryStation *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__AziRef:
		soap_serialize_PointerTowitsml14__AziRef(soap, (witsml14__AziRef *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellboreTrajectory:
		soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, (witsml14__cs_USCORErefWellboreTrajectory *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidParentString:
		soap_serialize_PointerTowitsml14__uidParentString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTo__witsml14__obj_USCOREwellbore_sequence:
		soap_serialize_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, (struct __witsml14__obj_USCOREwellbore_sequence *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timeMeasure:
		soap_serialize_PointerTowitsml14__timeMeasure(soap, (witsml14__timeMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellVerticalDepthCoord:
		soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, (witsml14__wellVerticalDepthCoord *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreShape:
		soap_serialize_PointerTowitsml14__WellboreShape(soap, (witsml14__WellboreShape *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellboreType:
		soap_serialize_PointerTowitsml14__WellboreType(soap, (witsml14__WellboreType *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionAny:
		soap_serialize_PointerTowitsml14__cs_USCOREextensionAny(soap, (witsml14__cs_USCOREextensionAny *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestampedTimeZone:
		soap_serialize_PointerTowitsml14__timestampedTimeZone(soap, (witsml14__timestampedTimeZone *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ItemState:
		soap_serialize_PointerTowitsml14__ItemState(soap, (witsml14__ItemState *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__yAxisAzimuth:
		soap_serialize_PointerTowitsml14__yAxisAzimuth(soap, (witsml14__yAxisAzimuth *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__indexedObject:
		soap_serialize_PointerTowitsml14__indexedObject(soap, (witsml14__indexedObject *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Hemispheres:
		soap_serialize_PointerTowitsml14__Hemispheres(soap, (witsml14__Hemispheres *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NADTypes:
		soap_serialize_PointerTowitsml14__NADTypes(soap, (witsml14__NADTypes *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__geodeticZoneString:
		soap_serialize_PointerTowitsml14__geodeticZoneString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ProjectionVariantsObliqueMercator:
		soap_serialize_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, (witsml14__ProjectionVariantsObliqueMercator *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Projection:
		soap_serialize_PointerTowitsml14__Projection(soap, (witsml14__Projection *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__Ellipsoid:
		soap_serialize_PointerTowitsml14__Ellipsoid(soap, (witsml14__Ellipsoid *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__unitlessQuantity:
		soap_serialize_PointerTowitsml14__unitlessQuantity(soap, (double *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__GeodeticDatum:
		soap_serialize_PointerTowitsml14__GeodeticDatum(soap, (witsml14__GeodeticDatum *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocalCRS:
		soap_serialize_PointerTowitsml14__cs_USCORElocalCRS(soap, (witsml14__cs_USCORElocalCRS *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREgeodeticModel:
		soap_serialize_PointerTowitsml14__cs_USCOREgeodeticModel(soap, (witsml14__cs_USCOREgeodeticModel *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREprojectionx:
		soap_serialize_PointerTowitsml14__cs_USCOREprojectionx(soap, (witsml14__cs_USCOREprojectionx *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageEastWest:
		soap_serialize_PointerTowitsml14__footageEastWest(soap, (witsml14__footageEastWest *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__footageNorthSouth:
		soap_serialize_PointerTowitsml14__footageNorthSouth(soap, (witsml14__footageNorthSouth *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterTownship:
		soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__publicLandSurveySystemQuarterSection:
		soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__sectionNumber:
		soap_serialize_PointerTowitsml14__sectionNumber(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__NorthOrSouth:
		soap_serialize_PointerTowitsml14__NorthOrSouth(soap, (witsml14__NorthOrSouth *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__EastOrWest:
		soap_serialize_PointerTowitsml14__EastOrWest(soap, (witsml14__EastOrWest *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__PrincipalMeridian:
		soap_serialize_PointerTowitsml14__PrincipalMeridian(soap, (witsml14__PrincipalMeridian *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellboreRig:
		soap_serialize_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, (witsml14__cs_USCORErefWellWellboreRig *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORErefWellWellbore:
		soap_serialize_PointerTowitsml14__cs_USCORErefWellWellbore(soap, (witsml14__cs_USCORErefWellWellbore *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellKnownNameStruct:
		soap_serialize_PointerTowitsml14__wellKnownNameStruct(soap, (witsml14__wellKnownNameStruct *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__ElevCodeEnum:
		soap_serialize_PointerTowitsml14__ElevCodeEnum(soap, (witsml14__ElevCodeEnum *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__logicalBoolean:
		soap_serialize_PointerTowitsml14__logicalBoolean(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__planeAngleMeasure:
		soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, (witsml14__planeAngleMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__refNameString:
		soap_serialize_PointerTowitsml14__refNameString(soap, (witsml14__refNameString *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentEvent:
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentEvent(soap, (witsml14__cs_USCOREdocumentEvent *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__descriptionString:
		soap_serialize_PointerTowitsml14__descriptionString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__MeasureClass:
		soap_serialize_PointerTowitsml14__MeasureClass(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__positiveCount:
		soap_serialize_PointerTowitsml14__positiveCount(soap, (short *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__measuredDepthCoord:
		soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, (witsml14__measuredDepthCoord *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__extensionvalue:
		soap_serialize_PointerTowitsml14__extensionvalue(soap, (witsml14__extensionvalue *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREextensionNameValue:
		soap_serialize_PointerTowitsml14__cs_USCOREextensionNameValue(soap, (witsml14__cs_USCOREextensionNameValue *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__kindString:
		soap_serialize_PointerTowitsml14__kindString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentAudit:
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentAudit(soap, (witsml14__cs_USCOREdocumentAudit *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__commentString:
		soap_serialize_PointerTowitsml14__commentString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, (witsml14__cs_USCOREdocumentSecurityInfo *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREdocumentFileCreation:
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, (witsml14__cs_USCOREdocumentFileCreation *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameStruct:
		soap_serialize_PointerTowitsml14__nameStruct(soap, (witsml14__nameStruct *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__uidString:
		soap_serialize_PointerTowitsml14__uidString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcustomData:
		soap_serialize_PointerTowitsml14__cs_USCOREcustomData(soap, (witsml14__cs_USCOREcustomData *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREcommonData:
		soap_serialize_PointerTowitsml14__cs_USCOREcommonData(soap, (witsml14__cs_USCOREcommonData *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTo__witsml14__obj_USCOREwell_sequence:
		soap_serialize_PointerTo__witsml14__obj_USCOREwell_sequence(soap, (struct __witsml14__obj_USCOREwell_sequence *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellCRS:
		soap_serialize_PointerTowitsml14__cs_USCOREwellCRS(soap, (witsml14__cs_USCOREwellCRS *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREreferencePoint:
		soap_serialize_PointerTowitsml14__cs_USCOREreferencePoint(soap, (witsml14__cs_USCOREreferencePoint *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREpublicLandSurveySystem:
		soap_serialize_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, (witsml14__cs_USCOREpublicLandSurveySystem *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCORElocation:
		soap_serialize_PointerTowitsml14__cs_USCORElocation(soap, (witsml14__cs_USCORElocation *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__lengthMeasure:
		soap_serialize_PointerTowitsml14__lengthMeasure(soap, (witsml14__lengthMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__cs_USCOREwellDatum:
		soap_serialize_PointerTowitsml14__cs_USCOREwellDatum(soap, (witsml14__cs_USCOREwellDatum *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__wellElevationCoord:
		soap_serialize_PointerTowitsml14__wellElevationCoord(soap, (witsml14__wellElevationCoord *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellDirection:
		soap_serialize_PointerTowitsml14__WellDirection(soap, (witsml14__WellDirection *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellFluid:
		soap_serialize_PointerTowitsml14__WellFluid(soap, (witsml14__WellFluid *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellPurpose:
		soap_serialize_PointerTowitsml14__WellPurpose(soap, (witsml14__WellPurpose *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__WellStatus:
		soap_serialize_PointerTowitsml14__WellStatus(soap, (witsml14__WellStatus *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__dimensionlessMeasure:
		soap_serialize_PointerTowitsml14__dimensionlessMeasure(soap, (witsml14__dimensionlessMeasure *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__str32:
		soap_serialize_PointerTowitsml14__str32(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__timestamp:
		soap_serialize_PointerTowitsml14__timestamp(soap, (struct tm *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_PointerTowitsml14__nameString:
		soap_serialize_PointerTowitsml14__nameString(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}

SOAP_FMAC3 void * SOAP_FMAC4 gsoap_witsml1_4_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		return (void*)soap_instantiate_tm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence:
		return (void*)soap_instantiate___witsml14__obj_USCOREwell_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		return (void*)soap_instantiate_witsml14__obj_USCOREwell(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		return (void*)soap_instantiate_witsml14__cs_USCOREdocumentInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		return (void*)soap_instantiate_witsml14__cs_USCOREdocumentFileCreation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		return (void*)soap_instantiate_witsml14__cs_USCOREdocumentSecurityInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		return (void*)soap_instantiate_witsml14__cs_USCOREextensionNameValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		return (void*)soap_instantiate_witsml14__cs_USCOREdocumentAudit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		return (void*)soap_instantiate_witsml14__cs_USCOREdocumentEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		return (void*)soap_instantiate_witsml14__cs_USCORElocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		return (void*)soap_instantiate_witsml14__cs_USCOREwellDatum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		return (void*)soap_instantiate_witsml14__cs_USCORErefWellWellbore(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		return (void*)soap_instantiate_witsml14__cs_USCORErefWellWellboreRig(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		return (void*)soap_instantiate_witsml14__cs_USCOREpublicLandSurveySystem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		return (void*)soap_instantiate_witsml14__cs_USCOREreferencePoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		return (void*)soap_instantiate_witsml14__cs_USCOREwellCRS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		return (void*)soap_instantiate_witsml14__cs_USCOREgeodeticModel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		return (void*)soap_instantiate_witsml14__cs_USCOREprojectionx(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		return (void*)soap_instantiate_witsml14__cs_USCORElocalCRS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		return (void*)soap_instantiate_witsml14__cs_USCOREcommonData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		return (void*)soap_instantiate_witsml14__cs_USCOREextensionAny(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		return (void*)soap_instantiate_witsml14__cs_USCOREcustomData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence:
		return (void*)soap_instantiate___witsml14__obj_USCOREwellbore_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		return (void*)soap_instantiate_witsml14__obj_USCOREwellbore(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence:
		return (void*)soap_instantiate___witsml14__obj_USCOREtrajectory_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		return (void*)soap_instantiate_witsml14__obj_USCOREtrajectory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		return (void*)soap_instantiate_witsml14__cs_USCOREtrajectoryStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		return (void*)soap_instantiate_witsml14__cs_USCOREstnTrajRawData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		return (void*)soap_instantiate_witsml14__cs_USCOREstnTrajCorUsed(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		return (void*)soap_instantiate_witsml14__cs_USCOREstnTrajValid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		return (void*)soap_instantiate_witsml14__cs_USCOREstnTrajMatrixCov(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		return (void*)soap_instantiate_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		return (void*)soap_instantiate_witsml14__cs_USCORErefWellboreTrajectory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		return (void*)soap_instantiate_abstract__abstractObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		return (void*)soap_instantiate_witsml14__obj_USCOREwells(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		return (void*)soap_instantiate_witsml14__obj_USCOREwellbores(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		return (void*)soap_instantiate_witsml14__obj_USCOREtrajectorys(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		return (void*)soap_instantiate_witsml14__cost(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		return (void*)soap_instantiate_witsml14__abstractMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		return (void*)soap_instantiate_witsml14__timestampedTimeZone(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		return (void*)soap_instantiate_witsml14__yAxisAzimuth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		return (void*)soap_instantiate_witsml14__volumePerVolumeMeasurePercent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		return (void*)soap_instantiate_witsml14__measureOrQuantity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		return (void*)soap_instantiate_witsml14__genericMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		return (void*)soap_instantiate_witsml14__ratioGenericMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		return (void*)soap_instantiate_witsml14__refNameString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		return (void*)soap_instantiate_witsml14__refObjectString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		return (void*)soap_instantiate_witsml14__refPositiveCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		return (void*)soap_instantiate_witsml14__extensionvalue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		return (void*)soap_instantiate_witsml14__nameStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		return (void*)soap_instantiate_witsml14__shortNameStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		return (void*)soap_instantiate_witsml14__wellKnownNameStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		return (void*)soap_instantiate_witsml14__objectSequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		return (void*)soap_instantiate_witsml14__lithostratigraphyStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		return (void*)soap_instantiate_witsml14__chronostratigraphyStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		return (void*)soap_instantiate_witsml14__measuredDepthCoord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		return (void*)soap_instantiate_witsml14__wellVerticalDepthCoord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		return (void*)soap_instantiate_witsml14__wellElevationCoord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		return (void*)soap_instantiate_witsml14__footageNorthSouth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		return (void*)soap_instantiate_witsml14__footageEastWest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		return (void*)soap_instantiate_witsml14__indexedObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		return (void*)soap_instantiate_witsml14__accelerationLinearMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		return (void*)soap_instantiate_witsml14__anglePerLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		return (void*)soap_instantiate_witsml14__anglePerTimeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		return (void*)soap_instantiate_witsml14__areaMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		return (void*)soap_instantiate_witsml14__areaPerAreaMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		return (void*)soap_instantiate_witsml14__compressibilityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		return (void*)soap_instantiate_witsml14__densityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		return (void*)soap_instantiate_witsml14__dimensionlessMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		return (void*)soap_instantiate_witsml14__dynamicViscosityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		return (void*)soap_instantiate_witsml14__electricCurrentMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		return (void*)soap_instantiate_witsml14__electricPotentialMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		return (void*)soap_instantiate_witsml14__equivalentPerMassMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		return (void*)soap_instantiate_witsml14__forceMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		return (void*)soap_instantiate_witsml14__forcePerLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		return (void*)soap_instantiate_witsml14__forcePerVolumeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		return (void*)soap_instantiate_witsml14__illuminanceMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		return (void*)soap_instantiate_witsml14__lengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		return (void*)soap_instantiate_witsml14__lengthPerLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		return (void*)soap_instantiate_witsml14__magneticInductionMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		return (void*)soap_instantiate_witsml14__massConcentrationMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		return (void*)soap_instantiate_witsml14__massMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		return (void*)soap_instantiate_witsml14__massPerLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		return (void*)soap_instantiate_witsml14__momentOfForceMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		return (void*)soap_instantiate_witsml14__perLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		return (void*)soap_instantiate_witsml14__permeabilityRockMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		return (void*)soap_instantiate_witsml14__planeAngleMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		return (void*)soap_instantiate_witsml14__powerMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		return (void*)soap_instantiate_witsml14__pressureMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		return (void*)soap_instantiate_witsml14__relativePowerMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		return (void*)soap_instantiate_witsml14__specificHeatCapacityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		return (void*)soap_instantiate_witsml14__specificVolumeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		return (void*)soap_instantiate_witsml14__standardVolumeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		return (void*)soap_instantiate_witsml14__standardVolumePerTimeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		return (void*)soap_instantiate_witsml14__thermalConductivityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		return (void*)soap_instantiate_witsml14__thermalVolumetricExpansionMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		return (void*)soap_instantiate_witsml14__thermodynamicTemperatureMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		return (void*)soap_instantiate_witsml14__timeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		return (void*)soap_instantiate_witsml14__velocityMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		return (void*)soap_instantiate_witsml14__volumeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		return (void*)soap_instantiate_witsml14__volumeFlowRateMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		return (void*)soap_instantiate_witsml14__volumePerLengthMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		return (void*)soap_instantiate_witsml14__volumePerVolumeMeasure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		return (void*)soap_instantiate_witsml14__timestampedCommentString(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		return (void*)soap_instantiate_xsd__date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		return (void*)soap_instantiate_witsml14__listOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_witsml14__abstractDateTime:
		return (void*)soap_instantiate_witsml14__abstractDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		return (void*)soap_instantiate_witsml14__abstractDate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		return (void*)soap_instantiate_witsml14__abstractString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		return (void*)soap_instantiate_witsml14__abstractUncollapsedString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		return (void*)soap_instantiate_witsml14__date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_witsml14__timestamp:
		return (void*)soap_instantiate_witsml14__timestamp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		return (void*)soap_instantiate_witsml14__shortDescriptionString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		return (void*)soap_instantiate_witsml14__schemaVersionString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		return (void*)soap_instantiate_witsml14__uncollapsedString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		return (void*)soap_instantiate_witsml14__iadcBearingWearCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		return (void*)soap_instantiate_witsml14__geodeticZoneString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		return (void*)soap_instantiate_witsml14__sectionNumber(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		return (void*)soap_instantiate_witsml14__publicLandSurveySystemQuarterTownship(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		return (void*)soap_instantiate_witsml14__publicLandSurveySystemQuarterSection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		return (void*)soap_instantiate_witsml14__str2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		return (void*)soap_instantiate_witsml14__str16(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		return (void*)soap_instantiate_witsml14__abstractMaximumLengthString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		return (void*)soap_instantiate_witsml14__abstractTimeZone(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		return (void*)soap_instantiate_witsml14__abstractNameString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		return (void*)soap_instantiate_witsml14__abstractUidString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		return (void*)soap_instantiate_witsml14__abstractDescriptionString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		return (void*)soap_instantiate_witsml14__abstractString32(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		return (void*)soap_instantiate_witsml14__abstractTypeEnum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		return (void*)soap_instantiate_witsml14__abstractUomEnum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		return (void*)soap_instantiate_witsml14__timeZone(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		return (void*)soap_instantiate_witsml14__uidString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		return (void*)soap_instantiate_witsml14__uidParentString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		return (void*)soap_instantiate_witsml14__refString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		return (void*)soap_instantiate_witsml14__refWellDatum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		return (void*)soap_instantiate_witsml14__nameString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		return (void*)soap_instantiate_witsml14__descriptionString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		return (void*)soap_instantiate_witsml14__encodedValueString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		return (void*)soap_instantiate_witsml14__kindString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		return (void*)soap_instantiate_witsml14__uomString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		return (void*)soap_instantiate_witsml14__str32(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		return (void*)soap_instantiate_witsml14__abstractCommentString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		return (void*)soap_instantiate_witsml14__ActivityCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		return (void*)soap_instantiate_witsml14__ExtensionName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		return (void*)soap_instantiate_witsml14__LithologyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		return (void*)soap_instantiate_witsml14__MatrixCementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		return (void*)soap_instantiate_witsml14__MeasureClass(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		return (void*)soap_instantiate_witsml14__MudSubClass(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		return (void*)soap_instantiate_witsml14__NameTagLocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		return (void*)soap_instantiate_witsml14__NameTagNumberingScheme(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		return (void*)soap_instantiate_witsml14__NameTagTechnology(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		return (void*)soap_instantiate_witsml14__QualifierType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		return (void*)soap_instantiate_witsml14__TrajStnCalcAlgorithm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		return (void*)soap_instantiate_witsml14__TypeSurveyTool(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		return (void*)soap_instantiate_witsml14__commentString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wells:
		return (void*)soap_instantiate__witsml14__wells(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores:
		return (void*)soap_instantiate__witsml14__wellbores(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys:
		return (void*)soap_instantiate__witsml14__trajectorys(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__indexedObject:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfwitsml14__kindString:
		return (void*)soap_instantiate_std__vectorTemplateOfwitsml14__kindString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__nameStruct:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 gsoap_witsml1_4_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct tm*>(p->ptr), struct tm);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct tm*>(p->ptr), struct tm);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __witsml14__obj_USCOREwell_sequence*>(p->ptr), struct __witsml14__obj_USCOREwell_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __witsml14__obj_USCOREwell_sequence*>(p->ptr), struct __witsml14__obj_USCOREwell_sequence);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwell*>(p->ptr), witsml14__obj_USCOREwell);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwell*>(p->ptr), witsml14__obj_USCOREwell);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREdocumentInfo*>(p->ptr), witsml14__cs_USCOREdocumentInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREdocumentInfo*>(p->ptr), witsml14__cs_USCOREdocumentInfo);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREdocumentFileCreation*>(p->ptr), witsml14__cs_USCOREdocumentFileCreation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREdocumentFileCreation*>(p->ptr), witsml14__cs_USCOREdocumentFileCreation);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREdocumentSecurityInfo*>(p->ptr), witsml14__cs_USCOREdocumentSecurityInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREdocumentSecurityInfo*>(p->ptr), witsml14__cs_USCOREdocumentSecurityInfo);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREextensionNameValue*>(p->ptr), witsml14__cs_USCOREextensionNameValue);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREextensionNameValue*>(p->ptr), witsml14__cs_USCOREextensionNameValue);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREdocumentAudit*>(p->ptr), witsml14__cs_USCOREdocumentAudit);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREdocumentAudit*>(p->ptr), witsml14__cs_USCOREdocumentAudit);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREdocumentEvent*>(p->ptr), witsml14__cs_USCOREdocumentEvent);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREdocumentEvent*>(p->ptr), witsml14__cs_USCOREdocumentEvent);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORElocation*>(p->ptr), witsml14__cs_USCORElocation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORElocation*>(p->ptr), witsml14__cs_USCORElocation);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREwellDatum*>(p->ptr), witsml14__cs_USCOREwellDatum);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREwellDatum*>(p->ptr), witsml14__cs_USCOREwellDatum);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORErefWellWellbore*>(p->ptr), witsml14__cs_USCORErefWellWellbore);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORErefWellWellbore*>(p->ptr), witsml14__cs_USCORErefWellWellbore);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORErefWellWellboreRig*>(p->ptr), witsml14__cs_USCORErefWellWellboreRig);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORErefWellWellboreRig*>(p->ptr), witsml14__cs_USCORErefWellWellboreRig);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREpublicLandSurveySystem*>(p->ptr), witsml14__cs_USCOREpublicLandSurveySystem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREpublicLandSurveySystem*>(p->ptr), witsml14__cs_USCOREpublicLandSurveySystem);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREreferencePoint*>(p->ptr), witsml14__cs_USCOREreferencePoint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREreferencePoint*>(p->ptr), witsml14__cs_USCOREreferencePoint);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREwellCRS*>(p->ptr), witsml14__cs_USCOREwellCRS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREwellCRS*>(p->ptr), witsml14__cs_USCOREwellCRS);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREgeodeticModel*>(p->ptr), witsml14__cs_USCOREgeodeticModel);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREgeodeticModel*>(p->ptr), witsml14__cs_USCOREgeodeticModel);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREprojectionx*>(p->ptr), witsml14__cs_USCOREprojectionx);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREprojectionx*>(p->ptr), witsml14__cs_USCOREprojectionx);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORElocalCRS*>(p->ptr), witsml14__cs_USCORElocalCRS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORElocalCRS*>(p->ptr), witsml14__cs_USCORElocalCRS);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREcommonData*>(p->ptr), witsml14__cs_USCOREcommonData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREcommonData*>(p->ptr), witsml14__cs_USCOREcommonData);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREextensionAny*>(p->ptr), witsml14__cs_USCOREextensionAny);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREextensionAny*>(p->ptr), witsml14__cs_USCOREextensionAny);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREcustomData*>(p->ptr), witsml14__cs_USCOREcustomData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREcustomData*>(p->ptr), witsml14__cs_USCOREcustomData);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __witsml14__obj_USCOREwellbore_sequence*>(p->ptr), struct __witsml14__obj_USCOREwellbore_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __witsml14__obj_USCOREwellbore_sequence*>(p->ptr), struct __witsml14__obj_USCOREwellbore_sequence);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwellbore*>(p->ptr), witsml14__obj_USCOREwellbore);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwellbore*>(p->ptr), witsml14__obj_USCOREwellbore);
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __witsml14__obj_USCOREtrajectory_sequence*>(p->ptr), struct __witsml14__obj_USCOREtrajectory_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __witsml14__obj_USCOREtrajectory_sequence*>(p->ptr), struct __witsml14__obj_USCOREtrajectory_sequence);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREtrajectory*>(p->ptr), witsml14__obj_USCOREtrajectory);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREtrajectory*>(p->ptr), witsml14__obj_USCOREtrajectory);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREtrajectoryStation*>(p->ptr), witsml14__cs_USCOREtrajectoryStation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREtrajectoryStation*>(p->ptr), witsml14__cs_USCOREtrajectoryStation);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREstnTrajRawData*>(p->ptr), witsml14__cs_USCOREstnTrajRawData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREstnTrajRawData*>(p->ptr), witsml14__cs_USCOREstnTrajRawData);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREstnTrajCorUsed*>(p->ptr), witsml14__cs_USCOREstnTrajCorUsed);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREstnTrajCorUsed*>(p->ptr), witsml14__cs_USCOREstnTrajCorUsed);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREstnTrajValid*>(p->ptr), witsml14__cs_USCOREstnTrajValid);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREstnTrajValid*>(p->ptr), witsml14__cs_USCOREstnTrajValid);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCOREstnTrajMatrixCov*>(p->ptr), witsml14__cs_USCOREstnTrajMatrixCov);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCOREstnTrajMatrixCov*>(p->ptr), witsml14__cs_USCOREstnTrajMatrixCov);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORErefWellboreTrajectoryStation*>(p->ptr), witsml14__cs_USCORErefWellboreTrajectoryStation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORErefWellboreTrajectoryStation*>(p->ptr), witsml14__cs_USCORErefWellboreTrajectoryStation);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cs_USCORErefWellboreTrajectory*>(p->ptr), witsml14__cs_USCORErefWellboreTrajectory);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cs_USCORErefWellboreTrajectory*>(p->ptr), witsml14__cs_USCORErefWellboreTrajectory);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<abstract__abstractObject*>(p->ptr), abstract__abstractObject);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<abstract__abstractObject*>(p->ptr), abstract__abstractObject);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwells*>(p->ptr), witsml14__obj_USCOREwells);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwells*>(p->ptr), witsml14__obj_USCOREwells);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwellbores*>(p->ptr), witsml14__obj_USCOREwellbores);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwellbores*>(p->ptr), witsml14__obj_USCOREwellbores);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREtrajectorys*>(p->ptr), witsml14__obj_USCOREtrajectorys);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREtrajectorys*>(p->ptr), witsml14__obj_USCOREtrajectorys);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__cost*>(p->ptr), witsml14__cost);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__cost*>(p->ptr), witsml14__cost);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__abstractMeasure*>(p->ptr), witsml14__abstractMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__abstractMeasure*>(p->ptr), witsml14__abstractMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__timestampedTimeZone*>(p->ptr), witsml14__timestampedTimeZone);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__timestampedTimeZone*>(p->ptr), witsml14__timestampedTimeZone);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__yAxisAzimuth*>(p->ptr), witsml14__yAxisAzimuth);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__yAxisAzimuth*>(p->ptr), witsml14__yAxisAzimuth);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__volumePerVolumeMeasurePercent*>(p->ptr), witsml14__volumePerVolumeMeasurePercent);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__volumePerVolumeMeasurePercent*>(p->ptr), witsml14__volumePerVolumeMeasurePercent);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__measureOrQuantity*>(p->ptr), witsml14__measureOrQuantity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__measureOrQuantity*>(p->ptr), witsml14__measureOrQuantity);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__genericMeasure*>(p->ptr), witsml14__genericMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__genericMeasure*>(p->ptr), witsml14__genericMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__ratioGenericMeasure*>(p->ptr), witsml14__ratioGenericMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__ratioGenericMeasure*>(p->ptr), witsml14__ratioGenericMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__refNameString*>(p->ptr), witsml14__refNameString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__refNameString*>(p->ptr), witsml14__refNameString);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__refObjectString*>(p->ptr), witsml14__refObjectString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__refObjectString*>(p->ptr), witsml14__refObjectString);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__refPositiveCount*>(p->ptr), witsml14__refPositiveCount);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__refPositiveCount*>(p->ptr), witsml14__refPositiveCount);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__extensionvalue*>(p->ptr), witsml14__extensionvalue);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__extensionvalue*>(p->ptr), witsml14__extensionvalue);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__nameStruct*>(p->ptr), witsml14__nameStruct);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__nameStruct*>(p->ptr), witsml14__nameStruct);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__shortNameStruct*>(p->ptr), witsml14__shortNameStruct);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__shortNameStruct*>(p->ptr), witsml14__shortNameStruct);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__wellKnownNameStruct*>(p->ptr), witsml14__wellKnownNameStruct);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__wellKnownNameStruct*>(p->ptr), witsml14__wellKnownNameStruct);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__objectSequence*>(p->ptr), witsml14__objectSequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__objectSequence*>(p->ptr), witsml14__objectSequence);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__lithostratigraphyStruct*>(p->ptr), witsml14__lithostratigraphyStruct);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__lithostratigraphyStruct*>(p->ptr), witsml14__lithostratigraphyStruct);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__chronostratigraphyStruct*>(p->ptr), witsml14__chronostratigraphyStruct);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__chronostratigraphyStruct*>(p->ptr), witsml14__chronostratigraphyStruct);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__measuredDepthCoord*>(p->ptr), witsml14__measuredDepthCoord);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__measuredDepthCoord*>(p->ptr), witsml14__measuredDepthCoord);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__wellVerticalDepthCoord*>(p->ptr), witsml14__wellVerticalDepthCoord);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__wellVerticalDepthCoord*>(p->ptr), witsml14__wellVerticalDepthCoord);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__wellElevationCoord*>(p->ptr), witsml14__wellElevationCoord);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__wellElevationCoord*>(p->ptr), witsml14__wellElevationCoord);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__footageNorthSouth*>(p->ptr), witsml14__footageNorthSouth);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__footageNorthSouth*>(p->ptr), witsml14__footageNorthSouth);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__footageEastWest*>(p->ptr), witsml14__footageEastWest);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__footageEastWest*>(p->ptr), witsml14__footageEastWest);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__indexedObject*>(p->ptr), witsml14__indexedObject);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__indexedObject*>(p->ptr), witsml14__indexedObject);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__accelerationLinearMeasure*>(p->ptr), witsml14__accelerationLinearMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__accelerationLinearMeasure*>(p->ptr), witsml14__accelerationLinearMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__anglePerLengthMeasure*>(p->ptr), witsml14__anglePerLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__anglePerLengthMeasure*>(p->ptr), witsml14__anglePerLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__anglePerTimeMeasure*>(p->ptr), witsml14__anglePerTimeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__anglePerTimeMeasure*>(p->ptr), witsml14__anglePerTimeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__areaMeasure*>(p->ptr), witsml14__areaMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__areaMeasure*>(p->ptr), witsml14__areaMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__areaPerAreaMeasure*>(p->ptr), witsml14__areaPerAreaMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__areaPerAreaMeasure*>(p->ptr), witsml14__areaPerAreaMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__compressibilityMeasure*>(p->ptr), witsml14__compressibilityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__compressibilityMeasure*>(p->ptr), witsml14__compressibilityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__densityMeasure*>(p->ptr), witsml14__densityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__densityMeasure*>(p->ptr), witsml14__densityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__dimensionlessMeasure*>(p->ptr), witsml14__dimensionlessMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__dimensionlessMeasure*>(p->ptr), witsml14__dimensionlessMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__dynamicViscosityMeasure*>(p->ptr), witsml14__dynamicViscosityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__dynamicViscosityMeasure*>(p->ptr), witsml14__dynamicViscosityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__electricCurrentMeasure*>(p->ptr), witsml14__electricCurrentMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__electricCurrentMeasure*>(p->ptr), witsml14__electricCurrentMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__electricPotentialMeasure*>(p->ptr), witsml14__electricPotentialMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__electricPotentialMeasure*>(p->ptr), witsml14__electricPotentialMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__equivalentPerMassMeasure*>(p->ptr), witsml14__equivalentPerMassMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__equivalentPerMassMeasure*>(p->ptr), witsml14__equivalentPerMassMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__forceMeasure*>(p->ptr), witsml14__forceMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__forceMeasure*>(p->ptr), witsml14__forceMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__forcePerLengthMeasure*>(p->ptr), witsml14__forcePerLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__forcePerLengthMeasure*>(p->ptr), witsml14__forcePerLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__forcePerVolumeMeasure*>(p->ptr), witsml14__forcePerVolumeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__forcePerVolumeMeasure*>(p->ptr), witsml14__forcePerVolumeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__illuminanceMeasure*>(p->ptr), witsml14__illuminanceMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__illuminanceMeasure*>(p->ptr), witsml14__illuminanceMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__lengthMeasure*>(p->ptr), witsml14__lengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__lengthMeasure*>(p->ptr), witsml14__lengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__lengthPerLengthMeasure*>(p->ptr), witsml14__lengthPerLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__lengthPerLengthMeasure*>(p->ptr), witsml14__lengthPerLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__magneticInductionMeasure*>(p->ptr), witsml14__magneticInductionMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__magneticInductionMeasure*>(p->ptr), witsml14__magneticInductionMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__massConcentrationMeasure*>(p->ptr), witsml14__massConcentrationMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__massConcentrationMeasure*>(p->ptr), witsml14__massConcentrationMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__massMeasure*>(p->ptr), witsml14__massMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__massMeasure*>(p->ptr), witsml14__massMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__massPerLengthMeasure*>(p->ptr), witsml14__massPerLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__massPerLengthMeasure*>(p->ptr), witsml14__massPerLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__momentOfForceMeasure*>(p->ptr), witsml14__momentOfForceMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__momentOfForceMeasure*>(p->ptr), witsml14__momentOfForceMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__perLengthMeasure*>(p->ptr), witsml14__perLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__perLengthMeasure*>(p->ptr), witsml14__perLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__permeabilityRockMeasure*>(p->ptr), witsml14__permeabilityRockMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__permeabilityRockMeasure*>(p->ptr), witsml14__permeabilityRockMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__planeAngleMeasure*>(p->ptr), witsml14__planeAngleMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__planeAngleMeasure*>(p->ptr), witsml14__planeAngleMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__powerMeasure*>(p->ptr), witsml14__powerMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__powerMeasure*>(p->ptr), witsml14__powerMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__pressureMeasure*>(p->ptr), witsml14__pressureMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__pressureMeasure*>(p->ptr), witsml14__pressureMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__relativePowerMeasure*>(p->ptr), witsml14__relativePowerMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__relativePowerMeasure*>(p->ptr), witsml14__relativePowerMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__specificHeatCapacityMeasure*>(p->ptr), witsml14__specificHeatCapacityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__specificHeatCapacityMeasure*>(p->ptr), witsml14__specificHeatCapacityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__specificVolumeMeasure*>(p->ptr), witsml14__specificVolumeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__specificVolumeMeasure*>(p->ptr), witsml14__specificVolumeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__standardVolumeMeasure*>(p->ptr), witsml14__standardVolumeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__standardVolumeMeasure*>(p->ptr), witsml14__standardVolumeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__standardVolumePerTimeMeasure*>(p->ptr), witsml14__standardVolumePerTimeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__standardVolumePerTimeMeasure*>(p->ptr), witsml14__standardVolumePerTimeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__thermalConductivityMeasure*>(p->ptr), witsml14__thermalConductivityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__thermalConductivityMeasure*>(p->ptr), witsml14__thermalConductivityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__thermalVolumetricExpansionMeasure*>(p->ptr), witsml14__thermalVolumetricExpansionMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__thermalVolumetricExpansionMeasure*>(p->ptr), witsml14__thermalVolumetricExpansionMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__thermodynamicTemperatureMeasure*>(p->ptr), witsml14__thermodynamicTemperatureMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__thermodynamicTemperatureMeasure*>(p->ptr), witsml14__thermodynamicTemperatureMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__timeMeasure*>(p->ptr), witsml14__timeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__timeMeasure*>(p->ptr), witsml14__timeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__velocityMeasure*>(p->ptr), witsml14__velocityMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__velocityMeasure*>(p->ptr), witsml14__velocityMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__volumeMeasure*>(p->ptr), witsml14__volumeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__volumeMeasure*>(p->ptr), witsml14__volumeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__volumeFlowRateMeasure*>(p->ptr), witsml14__volumeFlowRateMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__volumeFlowRateMeasure*>(p->ptr), witsml14__volumeFlowRateMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__volumePerLengthMeasure*>(p->ptr), witsml14__volumePerLengthMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__volumePerLengthMeasure*>(p->ptr), witsml14__volumePerLengthMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__volumePerVolumeMeasure*>(p->ptr), witsml14__volumePerVolumeMeasure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__volumePerVolumeMeasure*>(p->ptr), witsml14__volumePerVolumeMeasure);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__timestampedCommentString*>(p->ptr), witsml14__timestampedCommentString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__timestampedCommentString*>(p->ptr), witsml14__timestampedCommentString);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct tm*>(p->ptr), struct tm);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct tm*>(p->ptr), struct tm);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_witsml14__abstractDateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct tm*>(p->ptr), struct tm);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct tm*>(p->ptr), struct tm);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_witsml14__timestamp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct tm*>(p->ptr), struct tm);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct tm*>(p->ptr), struct tm);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wells:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwells*>(p->ptr), witsml14__obj_USCOREwells);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwells*>(p->ptr), witsml14__obj_USCOREwells);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREwellbores*>(p->ptr), witsml14__obj_USCOREwellbores);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREwellbores*>(p->ptr), witsml14__obj_USCOREwellbores);
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<witsml14__obj_USCOREtrajectorys*>(p->ptr), witsml14__obj_USCOREtrajectorys);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<witsml14__obj_USCOREtrajectorys*>(p->ptr), witsml14__obj_USCOREtrajectorys);
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__obj_USCOREtrajectory *> *>(p->ptr), std::vector<witsml14__obj_USCOREtrajectory *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__obj_USCOREtrajectory *> *>(p->ptr), std::vector<witsml14__obj_USCOREtrajectory *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__obj_USCOREwellbore *> *>(p->ptr), std::vector<witsml14__obj_USCOREwellbore *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__obj_USCOREwellbore *> *>(p->ptr), std::vector<witsml14__obj_USCOREwellbore *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__obj_USCOREwell *> *>(p->ptr), std::vector<witsml14__obj_USCOREwell *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__obj_USCOREwell *> *>(p->ptr), std::vector<witsml14__obj_USCOREwell *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREtrajectoryStation *> *>(p->ptr), std::vector<witsml14__cs_USCOREtrajectoryStation *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREtrajectoryStation *> *>(p->ptr), std::vector<witsml14__cs_USCOREtrajectoryStation *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<char *> *>(p->ptr), std::vector<char *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<char *> *>(p->ptr), std::vector<char *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__timestampedTimeZone *> *>(p->ptr), std::vector<witsml14__timestampedTimeZone *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__timestampedTimeZone *> *>(p->ptr), std::vector<witsml14__timestampedTimeZone *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__indexedObject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__indexedObject *> *>(p->ptr), std::vector<witsml14__indexedObject *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__indexedObject *> *>(p->ptr), std::vector<witsml14__indexedObject *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfwitsml14__kindString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREdocumentEvent *> *>(p->ptr), std::vector<witsml14__cs_USCOREdocumentEvent *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREdocumentEvent *> *>(p->ptr), std::vector<witsml14__cs_USCOREdocumentEvent *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREextensionNameValue *> *>(p->ptr), std::vector<witsml14__cs_USCOREextensionNameValue *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREextensionNameValue *> *>(p->ptr), std::vector<witsml14__cs_USCOREextensionNameValue *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *>(p->ptr), std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *>(p->ptr), std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__nameStruct:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__nameStruct *> *>(p->ptr), std::vector<witsml14__nameStruct *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__nameStruct *> *>(p->ptr), std::vector<witsml14__nameStruct *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREwellCRS *> *>(p->ptr), std::vector<witsml14__cs_USCOREwellCRS *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREwellCRS *> *>(p->ptr), std::vector<witsml14__cs_USCOREwellCRS *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREreferencePoint *> *>(p->ptr), std::vector<witsml14__cs_USCOREreferencePoint *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREreferencePoint *> *>(p->ptr), std::vector<witsml14__cs_USCOREreferencePoint *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCORElocation *> *>(p->ptr), std::vector<witsml14__cs_USCORElocation *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCORElocation *> *>(p->ptr), std::vector<witsml14__cs_USCORElocation *> );
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<witsml14__cs_USCOREwellDatum *> *>(p->ptr), std::vector<witsml14__cs_USCOREwellDatum *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<witsml14__cs_USCOREwellDatum *> *>(p->ptr), std::vector<witsml14__cs_USCOREwellDatum *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 gsoap_witsml1_4_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells: t = SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores: t = SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys: t = SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure: t = SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 gsoap_witsml1_4_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__obj_USCOREtrajectory *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__obj_USCOREtrajectory *> *)p)[index] = *(witsml14__obj_USCOREtrajectory **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__obj_USCOREwellbore *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__obj_USCOREwellbore *> *)p)[index] = *(witsml14__obj_USCOREwellbore **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__obj_USCOREwell *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__obj_USCOREwell *> *)p)[index] = *(witsml14__obj_USCOREwell **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREtrajectoryStation *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREtrajectoryStation *> *)p)[index] = *(witsml14__cs_USCOREtrajectoryStation **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOf_XML:
		if (t == SOAP_TYPE_gsoap_witsml1_4__XML)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<char *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<char *> *)p)[index] = *(char **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__timestampedTimeZone *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__timestampedTimeZone *> *)p)[index] = *(witsml14__timestampedTimeZone **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__indexedObject:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__indexedObject *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__indexedObject *> *)p)[index] = *(witsml14__indexedObject **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfwitsml14__kindString:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREdocumentEvent *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREdocumentEvent *> *)p)[index] = *(witsml14__cs_USCOREdocumentEvent **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREextensionNameValue *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREextensionNameValue *> *)p)[index] = *(witsml14__cs_USCOREextensionNameValue **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREdocumentSecurityInfo *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *)p)[index] = *(witsml14__cs_USCOREdocumentSecurityInfo **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__nameStruct:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__nameStruct *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__nameStruct *> *)p)[index] = *(witsml14__nameStruct **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREwellCRS *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREwellCRS *> *)p)[index] = *(witsml14__cs_USCOREwellCRS **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREreferencePoint *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREreferencePoint *> *)p)[index] = *(witsml14__cs_USCOREreferencePoint **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCORElocation *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCORElocation *> *)p)[index] = *(witsml14__cs_USCORElocation **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum:
		if (t == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum || gsoap_witsml1_4_fbase(t, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<witsml14__cs_USCOREwellDatum *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<witsml14__cs_USCOREwellDatum *> *)p)[index] = *(witsml14__cs_USCOREwellDatum **)q;
		}
		break;
	case SOAP_TYPE_gsoap_witsml1_4_tm:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct tm type=%d location=%p object=%p\n", t, p, q));
		*(struct tm*)p = *(struct tm*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __witsml14__obj_USCOREwell_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __witsml14__obj_USCOREwell_sequence*)p = *(struct __witsml14__obj_USCOREwell_sequence*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwell type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwell*)p = *(witsml14__obj_USCOREwell*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREdocumentInfo type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREdocumentInfo*)p = *(witsml14__cs_USCOREdocumentInfo*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREdocumentFileCreation type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREdocumentFileCreation*)p = *(witsml14__cs_USCOREdocumentFileCreation*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREdocumentSecurityInfo type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREdocumentSecurityInfo*)p = *(witsml14__cs_USCOREdocumentSecurityInfo*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREextensionNameValue type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREextensionNameValue*)p = *(witsml14__cs_USCOREextensionNameValue*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREdocumentAudit type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREdocumentAudit*)p = *(witsml14__cs_USCOREdocumentAudit*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREdocumentEvent type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREdocumentEvent*)p = *(witsml14__cs_USCOREdocumentEvent*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORElocation type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORElocation*)p = *(witsml14__cs_USCORElocation*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _witsml14__union_cs_USCOREwellDatum type=%d location=%p object=%p\n", t, p, q));
		*(union _witsml14__union_cs_USCOREwellDatum*)p = *(union _witsml14__union_cs_USCOREwellDatum*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREwellDatum type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREwellDatum*)p = *(witsml14__cs_USCOREwellDatum*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORErefWellWellbore type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORErefWellWellbore*)p = *(witsml14__cs_USCORErefWellWellbore*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORErefWellWellboreRig type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORErefWellWellboreRig*)p = *(witsml14__cs_USCORErefWellWellboreRig*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREpublicLandSurveySystem type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREpublicLandSurveySystem*)p = *(witsml14__cs_USCOREpublicLandSurveySystem*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREreferencePoint type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREreferencePoint*)p = *(witsml14__cs_USCOREreferencePoint*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _witsml14__union_cs_USCOREwellCRS type=%d location=%p object=%p\n", t, p, q));
		*(union _witsml14__union_cs_USCOREwellCRS*)p = *(union _witsml14__union_cs_USCOREwellCRS*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREwellCRS type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREwellCRS*)p = *(witsml14__cs_USCOREwellCRS*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREgeodeticModel type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREgeodeticModel*)p = *(witsml14__cs_USCOREgeodeticModel*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREprojectionx type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREprojectionx*)p = *(witsml14__cs_USCOREprojectionx*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _witsml14__union_cs_USCORElocalCRS type=%d location=%p object=%p\n", t, p, q));
		*(union _witsml14__union_cs_USCORElocalCRS*)p = *(union _witsml14__union_cs_USCORElocalCRS*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORElocalCRS type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORElocalCRS*)p = *(witsml14__cs_USCORElocalCRS*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREcommonData type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREcommonData*)p = *(witsml14__cs_USCOREcommonData*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREextensionAny type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREextensionAny*)p = *(witsml14__cs_USCOREextensionAny*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREcustomData type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREcustomData*)p = *(witsml14__cs_USCOREcustomData*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __witsml14__obj_USCOREwellbore_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __witsml14__obj_USCOREwellbore_sequence*)p = *(struct __witsml14__obj_USCOREwellbore_sequence*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwellbore type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwellbore*)p = *(witsml14__obj_USCOREwellbore*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __witsml14__obj_USCOREtrajectory_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __witsml14__obj_USCOREtrajectory_sequence*)p = *(struct __witsml14__obj_USCOREtrajectory_sequence*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREtrajectory type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREtrajectory*)p = *(witsml14__obj_USCOREtrajectory*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREtrajectoryStation type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREtrajectoryStation*)p = *(witsml14__cs_USCOREtrajectoryStation*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREstnTrajRawData type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREstnTrajRawData*)p = *(witsml14__cs_USCOREstnTrajRawData*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREstnTrajCorUsed type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREstnTrajCorUsed*)p = *(witsml14__cs_USCOREstnTrajCorUsed*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREstnTrajValid type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREstnTrajValid*)p = *(witsml14__cs_USCOREstnTrajValid*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCOREstnTrajMatrixCov type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCOREstnTrajMatrixCov*)p = *(witsml14__cs_USCOREstnTrajMatrixCov*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORErefWellboreTrajectoryStation type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORErefWellboreTrajectoryStation*)p = *(witsml14__cs_USCORErefWellboreTrajectoryStation*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cs_USCORErefWellboreTrajectory type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cs_USCORErefWellboreTrajectory*)p = *(witsml14__cs_USCORErefWellboreTrajectory*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy abstract__abstractObject type=%d location=%p object=%p\n", t, p, q));
		*(abstract__abstractObject*)p = *(abstract__abstractObject*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwells type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwells*)p = *(witsml14__obj_USCOREwells*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwellbores type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwellbores*)p = *(witsml14__obj_USCOREwellbores*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREtrajectorys type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREtrajectorys*)p = *(witsml14__obj_USCOREtrajectorys*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__cost:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__cost type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__cost*)p = *(witsml14__cost*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__abstractMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__abstractMeasure*)p = *(witsml14__abstractMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__timestampedTimeZone type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__timestampedTimeZone*)p = *(witsml14__timestampedTimeZone*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__yAxisAzimuth type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__yAxisAzimuth*)p = *(witsml14__yAxisAzimuth*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__volumePerVolumeMeasurePercent type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__volumePerVolumeMeasurePercent*)p = *(witsml14__volumePerVolumeMeasurePercent*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__measureOrQuantity type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__measureOrQuantity*)p = *(witsml14__measureOrQuantity*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__genericMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__genericMeasure*)p = *(witsml14__genericMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__ratioGenericMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__ratioGenericMeasure*)p = *(witsml14__ratioGenericMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__refNameString type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__refNameString*)p = *(witsml14__refNameString*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__refObjectString type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__refObjectString*)p = *(witsml14__refObjectString*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__refPositiveCount type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__refPositiveCount*)p = *(witsml14__refPositiveCount*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__extensionvalue type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__extensionvalue*)p = *(witsml14__extensionvalue*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__nameStruct type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__nameStruct*)p = *(witsml14__nameStruct*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__shortNameStruct type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__shortNameStruct*)p = *(witsml14__shortNameStruct*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__wellKnownNameStruct type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__wellKnownNameStruct*)p = *(witsml14__wellKnownNameStruct*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__objectSequence type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__objectSequence*)p = *(witsml14__objectSequence*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__lithostratigraphyStruct type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__lithostratigraphyStruct*)p = *(witsml14__lithostratigraphyStruct*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__chronostratigraphyStruct type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__chronostratigraphyStruct*)p = *(witsml14__chronostratigraphyStruct*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__measuredDepthCoord type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__measuredDepthCoord*)p = *(witsml14__measuredDepthCoord*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__wellVerticalDepthCoord type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__wellVerticalDepthCoord*)p = *(witsml14__wellVerticalDepthCoord*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__wellElevationCoord type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__wellElevationCoord*)p = *(witsml14__wellElevationCoord*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__footageNorthSouth type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__footageNorthSouth*)p = *(witsml14__footageNorthSouth*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__footageEastWest type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__footageEastWest*)p = *(witsml14__footageEastWest*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__indexedObject type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__indexedObject*)p = *(witsml14__indexedObject*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__accelerationLinearMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__accelerationLinearMeasure*)p = *(witsml14__accelerationLinearMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__anglePerLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__anglePerLengthMeasure*)p = *(witsml14__anglePerLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__anglePerTimeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__anglePerTimeMeasure*)p = *(witsml14__anglePerTimeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__areaMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__areaMeasure*)p = *(witsml14__areaMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__areaPerAreaMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__areaPerAreaMeasure*)p = *(witsml14__areaPerAreaMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__compressibilityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__compressibilityMeasure*)p = *(witsml14__compressibilityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__densityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__densityMeasure*)p = *(witsml14__densityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__dimensionlessMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__dimensionlessMeasure*)p = *(witsml14__dimensionlessMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__dynamicViscosityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__dynamicViscosityMeasure*)p = *(witsml14__dynamicViscosityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__electricCurrentMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__electricCurrentMeasure*)p = *(witsml14__electricCurrentMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__electricPotentialMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__electricPotentialMeasure*)p = *(witsml14__electricPotentialMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__equivalentPerMassMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__equivalentPerMassMeasure*)p = *(witsml14__equivalentPerMassMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__forceMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__forceMeasure*)p = *(witsml14__forceMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__forcePerLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__forcePerLengthMeasure*)p = *(witsml14__forcePerLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__forcePerVolumeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__forcePerVolumeMeasure*)p = *(witsml14__forcePerVolumeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__illuminanceMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__illuminanceMeasure*)p = *(witsml14__illuminanceMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__lengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__lengthMeasure*)p = *(witsml14__lengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__lengthPerLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__lengthPerLengthMeasure*)p = *(witsml14__lengthPerLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__magneticInductionMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__magneticInductionMeasure*)p = *(witsml14__magneticInductionMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__massConcentrationMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__massConcentrationMeasure*)p = *(witsml14__massConcentrationMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__massMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__massMeasure*)p = *(witsml14__massMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__massPerLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__massPerLengthMeasure*)p = *(witsml14__massPerLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__momentOfForceMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__momentOfForceMeasure*)p = *(witsml14__momentOfForceMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__perLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__perLengthMeasure*)p = *(witsml14__perLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__permeabilityRockMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__permeabilityRockMeasure*)p = *(witsml14__permeabilityRockMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__planeAngleMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__planeAngleMeasure*)p = *(witsml14__planeAngleMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__powerMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__powerMeasure*)p = *(witsml14__powerMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__pressureMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__pressureMeasure*)p = *(witsml14__pressureMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__relativePowerMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__relativePowerMeasure*)p = *(witsml14__relativePowerMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__specificHeatCapacityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__specificHeatCapacityMeasure*)p = *(witsml14__specificHeatCapacityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__specificVolumeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__specificVolumeMeasure*)p = *(witsml14__specificVolumeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__standardVolumeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__standardVolumeMeasure*)p = *(witsml14__standardVolumeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__standardVolumePerTimeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__standardVolumePerTimeMeasure*)p = *(witsml14__standardVolumePerTimeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__thermalConductivityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__thermalConductivityMeasure*)p = *(witsml14__thermalConductivityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__thermalVolumetricExpansionMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__thermalVolumetricExpansionMeasure*)p = *(witsml14__thermalVolumetricExpansionMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__thermodynamicTemperatureMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__thermodynamicTemperatureMeasure*)p = *(witsml14__thermodynamicTemperatureMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__timeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__timeMeasure*)p = *(witsml14__timeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__velocityMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__velocityMeasure*)p = *(witsml14__velocityMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__volumeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__volumeMeasure*)p = *(witsml14__volumeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__volumeFlowRateMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__volumeFlowRateMeasure*)p = *(witsml14__volumeFlowRateMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__volumePerLengthMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__volumePerLengthMeasure*)p = *(witsml14__volumePerLengthMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__volumePerVolumeMeasure type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__volumePerVolumeMeasure*)p = *(witsml14__volumePerVolumeMeasure*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__timestampedCommentString type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__timestampedCommentString*)p = *(witsml14__timestampedCommentString*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__dateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct tm type=%d location=%p object=%p\n", t, p, q));
		*(struct tm*)p = *(struct tm*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_xsd__date:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_witsml14__abstractDateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct tm type=%d location=%p object=%p\n", t, p, q));
		*(struct tm*)p = *(struct tm*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__date:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_witsml14__timestamp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct tm type=%d location=%p object=%p\n", t, p, q));
		*(struct tm*)p = *(struct tm*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str2:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str16:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__timeZone:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__encodedValueString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__str32:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractCommentString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__ExtensionName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MatrixCementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__MudSubClass:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagLocation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagNumberingScheme:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__NameTagTechnology:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__QualifierType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wells:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwells type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwells*)p = *(witsml14__obj_USCOREwells*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__wellbores:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREwellbores type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREwellbores*)p = *(witsml14__obj_USCOREwellbores*)q;
		break;
	case SOAP_TYPE_gsoap_witsml1_4__witsml14__trajectorys:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy witsml14__obj_USCOREtrajectorys type=%d location=%p object=%p\n", t, p, q));
		*(witsml14__obj_USCOREtrajectorys*)p = *(witsml14__obj_USCOREtrajectorys*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	if (!type)
		type = "xsd:byte";
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractShort(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	if (!type)
		type = "witsml14:abstractShort";
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractShort);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__abstractShort(struct soap *soap, const char *s, short *a)
{
	int err = soap_s2short(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_witsml14__abstractShort(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractShort);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractShort(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractShort(soap, tag ? tag : "witsml14:abstractShort", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_witsml14__abstractShort(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	if (!type)
		type = "xsd:short";
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_short);
	return a;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n)
{
	short *a = static_cast<short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(short)));
	for (short *p = a; p && n--; ++p)
		soap_default_short(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_short(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__positiveBigCount(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "witsml14:positiveBigCount";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveBigCount);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__positiveBigCount(struct soap *soap, const char *s, int *a)
{
	int err = soap_s2witsml14__abstractInt(soap, s, a);
	if (!err)
	{
		if (*a < 1)
			return soap->error = SOAP_LENGTH;
	}
	return err;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_witsml14__positiveBigCount(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveBigCount);
	if (a && *a < 1)
	{	soap->error = SOAP_LENGTH;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__positiveBigCount(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__positiveBigCount(soap, tag ? tag : "witsml14:positiveBigCount", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_witsml14__positiveBigCount(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__positiveBigCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__calendarYear(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "witsml14:calendarYear";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__calendarYear);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__calendarYear(struct soap *soap, const char *s, int *a)
{
	int err = soap_s2witsml14__abstractInt(soap, s, a);
	if (!err)
	{
		if (*a < 1000)
			return soap->error = SOAP_LENGTH;
		if (*a > 9999)
			return soap->error = SOAP_LENGTH;
	}
	return err;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_witsml14__calendarYear(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__calendarYear);
	if (a && *a < 1000)
	{	soap->error = SOAP_LENGTH;
		return NULL;
	}
	if (a && *a > 9999)
	{	soap->error = SOAP_LENGTH;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__calendarYear(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__calendarYear(soap, tag ? tag : "witsml14:calendarYear", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_witsml14__calendarYear(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__calendarYear(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractInt(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "witsml14:abstractInt";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractInt);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__abstractInt(struct soap *soap, const char *s, int *a)
{
	int err = soap_s2int(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_witsml14__abstractInt(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractInt);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractInt(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractInt(soap, tag ? tag : "witsml14:abstractInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_witsml14__abstractInt(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "xsd:int";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__gtZeroAndLeOne(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	if (!type)
		type = "witsml14:gtZeroAndLeOne";
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__gtZeroAndLeOne);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__gtZeroAndLeOne(struct soap *soap, const char *s, double *a)
{
	int err = soap_s2witsml14__abstractDouble(soap, s, a);
	if (!err)
	{
		if (*a <= 0)
			return soap->error = SOAP_LENGTH;
		if (*a > 1)
			return soap->error = SOAP_LENGTH;
	}
	return err;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_witsml14__gtZeroAndLeOne(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__gtZeroAndLeOne);
	if (a && *a <= 0)
	{	soap->error = SOAP_LENGTH;
		return NULL;
	}
	if (a && *a > 1)
	{	soap->error = SOAP_LENGTH;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__gtZeroAndLeOne(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__gtZeroAndLeOne(soap, tag ? tag : "witsml14:gtZeroAndLeOne", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_witsml14__gtZeroAndLeOne(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__gtZeroAndLeOne(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractDouble(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	if (!type)
		type = "witsml14:abstractDouble";
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDouble);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__abstractDouble(struct soap *soap, const char *s, double *a)
{
	int err = soap_s2double(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_witsml14__abstractDouble(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDouble);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractDouble(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractDouble(soap, tag ? tag : "witsml14:abstractDouble", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_witsml14__abstractDouble(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractDouble(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	if (!type)
		type = "xsd:double";
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractBoolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (!type)
		type = "witsml14:abstractBoolean";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean), type) || soap_send(soap, soap_witsml14__abstractBoolean2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__abstractBoolean(struct soap *soap, const char *s, bool *a)
{
	int err = soap_s2bool(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_witsml14__abstractBoolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__abstractBoolean(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractBoolean, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractBoolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractBoolean(soap, tag ? tag : "witsml14:abstractBoolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_witsml14__abstractBoolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (!type)
		type = "xsd:boolean";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_bool, SOAP_TYPE_gsoap_witsml1_4_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellStatus[] =
{	{ (LONG64)witsml14__WellStatus::abandoned, "abandoned" },
	{ (LONG64)witsml14__WellStatus::active, "active" },
	{ (LONG64)witsml14__WellStatus::active_x0020_x002d__x0020injecting, "active -- injecting" },
	{ (LONG64)witsml14__WellStatus::active_x0020_x002d__x0020producing, "active -- producing" },
	{ (LONG64)witsml14__WellStatus::completed, "completed" },
	{ (LONG64)witsml14__WellStatus::drilling, "drilling" },
	{ (LONG64)witsml14__WellStatus::partially_x0020plugged, "partially plugged" },
	{ (LONG64)witsml14__WellStatus::permitted, "permitted" },
	{ (LONG64)witsml14__WellStatus::plugged_x0020and_x0020abandoned, "plugged and abandoned" },
	{ (LONG64)witsml14__WellStatus::proposed, "proposed" },
	{ (LONG64)witsml14__WellStatus::sold, "sold" },
	{ (LONG64)witsml14__WellStatus::suspended, "suspended" },
	{ (LONG64)witsml14__WellStatus::temporarily_x0020abandoned, "temporarily abandoned" },
	{ (LONG64)witsml14__WellStatus::testing, "testing" },
	{ (LONG64)witsml14__WellStatus::tight, "tight" },
	{ (LONG64)witsml14__WellStatus::working_x0020over, "working over" },
	{ (LONG64)witsml14__WellStatus::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellStatus2s(struct soap *soap, witsml14__WellStatus n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellStatus(struct soap *soap, const char *tag, int id, const witsml14__WellStatus *a, const char *type)
{
	if (!type)
		type = "witsml14:WellStatus";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus), type) || soap_send(soap, soap_witsml14__WellStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellStatus(struct soap *soap, const char *s, witsml14__WellStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellStatus, s);
	if (map)
		*a = (witsml14__WellStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellStatus * SOAP_FMAC4 soap_in_witsml14__WellStatus(struct soap *soap, const char *tag, witsml14__WellStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus, sizeof(witsml14__WellStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus, sizeof(witsml14__WellStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellStatus * SOAP_FMAC4 soap_new_witsml14__WellStatus(struct soap *soap, int n)
{
	witsml14__WellStatus *a = static_cast<witsml14__WellStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellStatus)));
	for (witsml14__WellStatus *p = a; p && n--; ++p)
		soap_default_witsml14__WellStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellStatus(struct soap *soap, const witsml14__WellStatus *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellStatus(soap, tag ? tag : "witsml14:WellStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellStatus * SOAP_FMAC4 soap_get_witsml14__WellStatus(struct soap *soap, witsml14__WellStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellPurpose[] =
{	{ (LONG64)witsml14__WellPurpose::appraisal, "appraisal" },
	{ (LONG64)witsml14__WellPurpose::appraisal_x0020_x002d__x0020confirmation_x0020appraisal, "appraisal -- confirmation appraisal" },
	{ (LONG64)witsml14__WellPurpose::appraisal_x0020_x002d__x0020exploratory_x0020appraisal, "appraisal -- exploratory appraisal" },
	{ (LONG64)witsml14__WellPurpose::exploration, "exploration" },
	{ (LONG64)witsml14__WellPurpose::exploration_x0020_x002d__x0020deeper_pool_x0020wildcat, "exploration -- deeper-pool wildcat" },
	{ (LONG64)witsml14__WellPurpose::exploration_x0020_x002d__x0020new_field_x0020wildcat, "exploration -- new-field wildcat" },
	{ (LONG64)witsml14__WellPurpose::exploration_x0020_x002d__x0020new_pool_x0020wildcat, "exploration -- new-pool wildcat" },
	{ (LONG64)witsml14__WellPurpose::exploration_x0020_x002d__x0020outpost_x0020wildcat, "exploration -- outpost wildcat" },
	{ (LONG64)witsml14__WellPurpose::exploration_x0020_x002d__x0020shallower_pool_x0020wildcat, "exploration -- shallower-pool wildcat" },
	{ (LONG64)witsml14__WellPurpose::development, "development" },
	{ (LONG64)witsml14__WellPurpose::development_x0020_x002d__x0020infill_x0020development, "development -- infill development" },
	{ (LONG64)witsml14__WellPurpose::development_x0020_x002d__x0020injector, "development -- injector" },
	{ (LONG64)witsml14__WellPurpose::development_x0020_x002d__x0020producer, "development -- producer" },
	{ (LONG64)witsml14__WellPurpose::fluid_x0020storage, "fluid storage" },
	{ (LONG64)witsml14__WellPurpose::fluid_x0020storage_x0020_x002d__x0020gas_x0020storage, "fluid storage -- gas storage" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc, "general srvc" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020borehole_x0020re_acquisition, "general srvc -- borehole re-acquisition" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020observation, "general srvc -- observation" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020relief, "general srvc -- relief" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020research, "general srvc -- research" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020drill_x0020test, "general srvc -- research -- drill test" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020strat_x0020test, "general srvc -- research -- strat test" },
	{ (LONG64)witsml14__WellPurpose::general_x0020srvc_x0020_x002d__x0020waste_x0020disposal, "general srvc -- waste disposal" },
	{ (LONG64)witsml14__WellPurpose::mineral, "mineral" },
	{ (LONG64)witsml14__WellPurpose::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellPurpose2s(struct soap *soap, witsml14__WellPurpose n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellPurpose, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellPurpose(struct soap *soap, const char *tag, int id, const witsml14__WellPurpose *a, const char *type)
{
	if (!type)
		type = "witsml14:WellPurpose";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose), type) || soap_send(soap, soap_witsml14__WellPurpose2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellPurpose(struct soap *soap, const char *s, witsml14__WellPurpose *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellPurpose, s);
	if (map)
		*a = (witsml14__WellPurpose)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellPurpose * SOAP_FMAC4 soap_in_witsml14__WellPurpose(struct soap *soap, const char *tag, witsml14__WellPurpose *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellPurpose*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose, sizeof(witsml14__WellPurpose), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellPurpose(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellPurpose *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose, sizeof(witsml14__WellPurpose), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellPurpose * SOAP_FMAC4 soap_new_witsml14__WellPurpose(struct soap *soap, int n)
{
	witsml14__WellPurpose *a = static_cast<witsml14__WellPurpose *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellPurpose)));
	for (witsml14__WellPurpose *p = a; p && n--; ++p)
		soap_default_witsml14__WellPurpose(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellPurpose(struct soap *soap, const witsml14__WellPurpose *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellPurpose(soap, tag ? tag : "witsml14:WellPurpose", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellPurpose * SOAP_FMAC4 soap_get_witsml14__WellPurpose(struct soap *soap, witsml14__WellPurpose *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellPurpose(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellboreType[] =
{	{ (LONG64)witsml14__WellboreType::bypass, "bypass" },
	{ (LONG64)witsml14__WellboreType::initial, "initial" },
	{ (LONG64)witsml14__WellboreType::redrill, "redrill" },
	{ (LONG64)witsml14__WellboreType::reentry, "reentry" },
	{ (LONG64)witsml14__WellboreType::respud, "respud" },
	{ (LONG64)witsml14__WellboreType::sidetrack, "sidetrack" },
	{ (LONG64)witsml14__WellboreType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellboreType2s(struct soap *soap, witsml14__WellboreType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellboreType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellboreType(struct soap *soap, const char *tag, int id, const witsml14__WellboreType *a, const char *type)
{
	if (!type)
		type = "witsml14:WellboreType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType), type) || soap_send(soap, soap_witsml14__WellboreType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellboreType(struct soap *soap, const char *s, witsml14__WellboreType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellboreType, s);
	if (map)
		*a = (witsml14__WellboreType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellboreType * SOAP_FMAC4 soap_in_witsml14__WellboreType(struct soap *soap, const char *tag, witsml14__WellboreType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellboreType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType, sizeof(witsml14__WellboreType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellboreType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellboreType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType, sizeof(witsml14__WellboreType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellboreType * SOAP_FMAC4 soap_new_witsml14__WellboreType(struct soap *soap, int n)
{
	witsml14__WellboreType *a = static_cast<witsml14__WellboreType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellboreType)));
	for (witsml14__WellboreType *p = a; p && n--; ++p)
		soap_default_witsml14__WellboreType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellboreType(struct soap *soap, const witsml14__WellboreType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellboreType(soap, tag ? tag : "witsml14:WellboreType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellboreType * SOAP_FMAC4 soap_get_witsml14__WellboreType(struct soap *soap, witsml14__WellboreType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellboreType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellboreShape[] =
{	{ (LONG64)witsml14__WellboreShape::build_x0020and_x0020hold, "build and hold" },
	{ (LONG64)witsml14__WellboreShape::deviated, "deviated" },
	{ (LONG64)witsml14__WellboreShape::double_x0020kickoff, "double kickoff" },
	{ (LONG64)witsml14__WellboreShape::horizontal, "horizontal" },
	{ (LONG64)witsml14__WellboreShape::S_shaped, "S-shaped" },
	{ (LONG64)witsml14__WellboreShape::vertical, "vertical" },
	{ (LONG64)witsml14__WellboreShape::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellboreShape2s(struct soap *soap, witsml14__WellboreShape n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellboreShape, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellboreShape(struct soap *soap, const char *tag, int id, const witsml14__WellboreShape *a, const char *type)
{
	if (!type)
		type = "witsml14:WellboreShape";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape), type) || soap_send(soap, soap_witsml14__WellboreShape2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellboreShape(struct soap *soap, const char *s, witsml14__WellboreShape *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellboreShape, s);
	if (map)
		*a = (witsml14__WellboreShape)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellboreShape * SOAP_FMAC4 soap_in_witsml14__WellboreShape(struct soap *soap, const char *tag, witsml14__WellboreShape *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellboreShape*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape, sizeof(witsml14__WellboreShape), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellboreShape(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellboreShape *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape, sizeof(witsml14__WellboreShape), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellboreShape * SOAP_FMAC4 soap_new_witsml14__WellboreShape(struct soap *soap, int n)
{
	witsml14__WellboreShape *a = static_cast<witsml14__WellboreShape *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellboreShape)));
	for (witsml14__WellboreShape *p = a; p && n--; ++p)
		soap_default_witsml14__WellboreShape(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellboreShape(struct soap *soap, const witsml14__WellboreShape *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellboreShape(soap, tag ? tag : "witsml14:WellboreShape", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellboreShape * SOAP_FMAC4 soap_get_witsml14__WellboreShape(struct soap *soap, witsml14__WellboreShape *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellboreShape(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellTestType[] =
{	{ (LONG64)witsml14__WellTestType::drill_x0020stem_x0020test, "drill stem test" },
	{ (LONG64)witsml14__WellTestType::production_x0020test, "production test" },
	{ (LONG64)witsml14__WellTestType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellTestType2s(struct soap *soap, witsml14__WellTestType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellTestType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellTestType(struct soap *soap, const char *tag, int id, const witsml14__WellTestType *a, const char *type)
{
	if (!type)
		type = "witsml14:WellTestType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType), type) || soap_send(soap, soap_witsml14__WellTestType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellTestType(struct soap *soap, const char *s, witsml14__WellTestType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellTestType, s);
	if (map)
		*a = (witsml14__WellTestType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellTestType * SOAP_FMAC4 soap_in_witsml14__WellTestType(struct soap *soap, const char *tag, witsml14__WellTestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellTestType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType, sizeof(witsml14__WellTestType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellTestType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellTestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellTestType, sizeof(witsml14__WellTestType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellTestType * SOAP_FMAC4 soap_new_witsml14__WellTestType(struct soap *soap, int n)
{
	witsml14__WellTestType *a = static_cast<witsml14__WellTestType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellTestType)));
	for (witsml14__WellTestType *p = a; p && n--; ++p)
		soap_default_witsml14__WellTestType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellTestType(struct soap *soap, const witsml14__WellTestType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellTestType(soap, tag ? tag : "witsml14:WellTestType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellTestType * SOAP_FMAC4 soap_get_witsml14__WellTestType(struct soap *soap, witsml14__WellTestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellTestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellNamingSystem[] =
{	{ (LONG64)witsml14__WellNamingSystem::DTI, "DTI" },
	{ (LONG64)witsml14__WellNamingSystem::API, "API" },
	{ (LONG64)witsml14__WellNamingSystem::NPD_x0020code, "NPD code" },
	{ (LONG64)witsml14__WellNamingSystem::NPD_x0020number, "NPD number" },
	{ (LONG64)witsml14__WellNamingSystem::local_x0020field, "local field" },
	{ (LONG64)witsml14__WellNamingSystem::prospect, "prospect" },
	{ (LONG64)witsml14__WellNamingSystem::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellNamingSystem2s(struct soap *soap, witsml14__WellNamingSystem n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellNamingSystem, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellNamingSystem(struct soap *soap, const char *tag, int id, const witsml14__WellNamingSystem *a, const char *type)
{
	if (!type)
		type = "witsml14:WellNamingSystem";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem), type) || soap_send(soap, soap_witsml14__WellNamingSystem2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellNamingSystem(struct soap *soap, const char *s, witsml14__WellNamingSystem *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellNamingSystem, s);
	if (map)
		*a = (witsml14__WellNamingSystem)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellNamingSystem * SOAP_FMAC4 soap_in_witsml14__WellNamingSystem(struct soap *soap, const char *tag, witsml14__WellNamingSystem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellNamingSystem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem, sizeof(witsml14__WellNamingSystem), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellNamingSystem(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellNamingSystem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellNamingSystem, sizeof(witsml14__WellNamingSystem), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellNamingSystem * SOAP_FMAC4 soap_new_witsml14__WellNamingSystem(struct soap *soap, int n)
{
	witsml14__WellNamingSystem *a = static_cast<witsml14__WellNamingSystem *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellNamingSystem)));
	for (witsml14__WellNamingSystem *p = a; p && n--; ++p)
		soap_default_witsml14__WellNamingSystem(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellNamingSystem(struct soap *soap, const witsml14__WellNamingSystem *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellNamingSystem(soap, tag ? tag : "witsml14:WellNamingSystem", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellNamingSystem * SOAP_FMAC4 soap_get_witsml14__WellNamingSystem(struct soap *soap, witsml14__WellNamingSystem *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellNamingSystem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellKillingProcedureType[] =
{	{ (LONG64)witsml14__WellKillingProcedureType::drillers_x0020method, "drillers method" },
	{ (LONG64)witsml14__WellKillingProcedureType::wait_x0020and_x0020weight, "wait and weight" },
	{ (LONG64)witsml14__WellKillingProcedureType::bullheading, "bullheading" },
	{ (LONG64)witsml14__WellKillingProcedureType::lubricate_x0020and_x0020bleed, "lubricate and bleed" },
	{ (LONG64)witsml14__WellKillingProcedureType::forward_x0020circulation, "forward circulation" },
	{ (LONG64)witsml14__WellKillingProcedureType::reverse_x0020circulation, "reverse circulation" },
	{ (LONG64)witsml14__WellKillingProcedureType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellKillingProcedureType2s(struct soap *soap, witsml14__WellKillingProcedureType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellKillingProcedureType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellKillingProcedureType(struct soap *soap, const char *tag, int id, const witsml14__WellKillingProcedureType *a, const char *type)
{
	if (!type)
		type = "witsml14:WellKillingProcedureType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType), type) || soap_send(soap, soap_witsml14__WellKillingProcedureType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellKillingProcedureType(struct soap *soap, const char *s, witsml14__WellKillingProcedureType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellKillingProcedureType, s);
	if (map)
		*a = (witsml14__WellKillingProcedureType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellKillingProcedureType * SOAP_FMAC4 soap_in_witsml14__WellKillingProcedureType(struct soap *soap, const char *tag, witsml14__WellKillingProcedureType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellKillingProcedureType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType, sizeof(witsml14__WellKillingProcedureType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellKillingProcedureType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellKillingProcedureType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellKillingProcedureType, sizeof(witsml14__WellKillingProcedureType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellKillingProcedureType * SOAP_FMAC4 soap_new_witsml14__WellKillingProcedureType(struct soap *soap, int n)
{
	witsml14__WellKillingProcedureType *a = static_cast<witsml14__WellKillingProcedureType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellKillingProcedureType)));
	for (witsml14__WellKillingProcedureType *p = a; p && n--; ++p)
		soap_default_witsml14__WellKillingProcedureType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellKillingProcedureType(struct soap *soap, const witsml14__WellKillingProcedureType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellKillingProcedureType(soap, tag ? tag : "witsml14:WellKillingProcedureType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellKillingProcedureType * SOAP_FMAC4 soap_get_witsml14__WellKillingProcedureType(struct soap *soap, witsml14__WellKillingProcedureType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellKillingProcedureType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellFluid[] =
{	{ (LONG64)witsml14__WellFluid::air, "air" },
	{ (LONG64)witsml14__WellFluid::condensate, "condensate" },
	{ (LONG64)witsml14__WellFluid::dry, "dry" },
	{ (LONG64)witsml14__WellFluid::gas, "gas" },
	{ (LONG64)witsml14__WellFluid::gas_water, "gas-water" },
	{ (LONG64)witsml14__WellFluid::non_x0020HC_x0020gas, "non HC gas" },
	{ (LONG64)witsml14__WellFluid::non_x0020HC_x0020gas_x0020_x002d__x0020CO2, "non HC gas -- CO2" },
	{ (LONG64)witsml14__WellFluid::oil, "oil" },
	{ (LONG64)witsml14__WellFluid::oil_gas, "oil-gas" },
	{ (LONG64)witsml14__WellFluid::oil_water, "oil-water" },
	{ (LONG64)witsml14__WellFluid::steam, "steam" },
	{ (LONG64)witsml14__WellFluid::water, "water" },
	{ (LONG64)witsml14__WellFluid::water_x0020_x002d__x0020brine, "water -- brine" },
	{ (LONG64)witsml14__WellFluid::water_x0020_x002d__x0020fresh_x0020water, "water -- fresh water" },
	{ (LONG64)witsml14__WellFluid::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellFluid2s(struct soap *soap, witsml14__WellFluid n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellFluid, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellFluid(struct soap *soap, const char *tag, int id, const witsml14__WellFluid *a, const char *type)
{
	if (!type)
		type = "witsml14:WellFluid";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid), type) || soap_send(soap, soap_witsml14__WellFluid2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellFluid(struct soap *soap, const char *s, witsml14__WellFluid *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellFluid, s);
	if (map)
		*a = (witsml14__WellFluid)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellFluid * SOAP_FMAC4 soap_in_witsml14__WellFluid(struct soap *soap, const char *tag, witsml14__WellFluid *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellFluid*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid, sizeof(witsml14__WellFluid), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellFluid(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellFluid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid, sizeof(witsml14__WellFluid), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellFluid * SOAP_FMAC4 soap_new_witsml14__WellFluid(struct soap *soap, int n)
{
	witsml14__WellFluid *a = static_cast<witsml14__WellFluid *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellFluid)));
	for (witsml14__WellFluid *p = a; p && n--; ++p)
		soap_default_witsml14__WellFluid(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellFluid(struct soap *soap, const witsml14__WellFluid *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellFluid(soap, tag ? tag : "witsml14:WellFluid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellFluid * SOAP_FMAC4 soap_get_witsml14__WellFluid(struct soap *soap, witsml14__WellFluid *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellFluid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellDirection[] =
{	{ (LONG64)witsml14__WellDirection::huff_n_puff, "huff-n-puff" },
	{ (LONG64)witsml14__WellDirection::injector, "injector" },
	{ (LONG64)witsml14__WellDirection::producer, "producer" },
	{ (LONG64)witsml14__WellDirection::uncertain, "uncertain" },
	{ (LONG64)witsml14__WellDirection::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellDirection2s(struct soap *soap, witsml14__WellDirection n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellDirection, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellDirection(struct soap *soap, const char *tag, int id, const witsml14__WellDirection *a, const char *type)
{
	if (!type)
		type = "witsml14:WellDirection";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection), type) || soap_send(soap, soap_witsml14__WellDirection2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellDirection(struct soap *soap, const char *s, witsml14__WellDirection *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellDirection, s);
	if (map)
		*a = (witsml14__WellDirection)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellDirection * SOAP_FMAC4 soap_in_witsml14__WellDirection(struct soap *soap, const char *tag, witsml14__WellDirection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellDirection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection, sizeof(witsml14__WellDirection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellDirection(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellDirection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection, sizeof(witsml14__WellDirection), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellDirection * SOAP_FMAC4 soap_new_witsml14__WellDirection(struct soap *soap, int n)
{
	witsml14__WellDirection *a = static_cast<witsml14__WellDirection *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellDirection)));
	for (witsml14__WellDirection *p = a; p && n--; ++p)
		soap_default_witsml14__WellDirection(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellDirection(struct soap *soap, const witsml14__WellDirection *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellDirection(soap, tag ? tag : "witsml14:WellDirection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellDirection * SOAP_FMAC4 soap_get_witsml14__WellDirection(struct soap *soap, witsml14__WellDirection *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellDirection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellControlIncidentType[] =
{	{ (LONG64)witsml14__WellControlIncidentType::shallow_x0020gas_x0020kick, "shallow gas kick" },
	{ (LONG64)witsml14__WellControlIncidentType::water_x0020kick, "water kick" },
	{ (LONG64)witsml14__WellControlIncidentType::oil_x0020kick, "oil kick" },
	{ (LONG64)witsml14__WellControlIncidentType::gas_x0020kick, "gas kick" },
	{ (LONG64)witsml14__WellControlIncidentType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellControlIncidentType2s(struct soap *soap, witsml14__WellControlIncidentType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellControlIncidentType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellControlIncidentType(struct soap *soap, const char *tag, int id, const witsml14__WellControlIncidentType *a, const char *type)
{
	if (!type)
		type = "witsml14:WellControlIncidentType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType), type) || soap_send(soap, soap_witsml14__WellControlIncidentType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellControlIncidentType(struct soap *soap, const char *s, witsml14__WellControlIncidentType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellControlIncidentType, s);
	if (map)
		*a = (witsml14__WellControlIncidentType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellControlIncidentType * SOAP_FMAC4 soap_in_witsml14__WellControlIncidentType(struct soap *soap, const char *tag, witsml14__WellControlIncidentType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellControlIncidentType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType, sizeof(witsml14__WellControlIncidentType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellControlIncidentType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellControlIncidentType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellControlIncidentType, sizeof(witsml14__WellControlIncidentType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellControlIncidentType * SOAP_FMAC4 soap_new_witsml14__WellControlIncidentType(struct soap *soap, int n)
{
	witsml14__WellControlIncidentType *a = static_cast<witsml14__WellControlIncidentType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellControlIncidentType)));
	for (witsml14__WellControlIncidentType *p = a; p && n--; ++p)
		soap_default_witsml14__WellControlIncidentType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellControlIncidentType(struct soap *soap, const witsml14__WellControlIncidentType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellControlIncidentType(soap, tag ? tag : "witsml14:WellControlIncidentType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellControlIncidentType * SOAP_FMAC4 soap_get_witsml14__WellControlIncidentType(struct soap *soap, witsml14__WellControlIncidentType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellControlIncidentType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TubularComponent[] =
{	{ (LONG64)witsml14__TubularComponent::non_magnetic_x0020stabilizer, "non-magnetic stabilizer" },
	{ (LONG64)witsml14__TubularComponent::non_magnetic_x0020collar, "non-magnetic collar" },
	{ (LONG64)witsml14__TubularComponent::stabilizer, "stabilizer" },
	{ (LONG64)witsml14__TubularComponent::adjustable_x0020kickoff, "adjustable kickoff" },
	{ (LONG64)witsml14__TubularComponent::accelerator, "accelerator" },
	{ (LONG64)witsml14__TubularComponent::rotary_x0020steering_x0020tool, "rotary steering tool" },
	{ (LONG64)witsml14__TubularComponent::sub_bar_x0020catcher, "sub-bar catcher" },
	{ (LONG64)witsml14__TubularComponent::sub_bent, "sub-bent" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020core_x0020diamond, "bit core diamond" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020core_x0020PDC, "bit core PDC" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020diamond_x0020fixed_x0020cut, "bit diamond fixed cut" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020insert_x0020roller_x0020cone, "bit insert roller cone" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020mill_x0020tooth_x0020roller_x0020cone, "bit mill tooth roller cone" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020PDC_x0020fixed_x0020cutter, "bit PDC fixed cutter" },
	{ (LONG64)witsml14__TubularComponent::sub_bit, "sub-bit" },
	{ (LONG64)witsml14__TubularComponent::bridge_x0020plug, "bridge plug" },
	{ (LONG64)witsml14__TubularComponent::bullnose, "bullnose" },
	{ (LONG64)witsml14__TubularComponent::bull_x0020plug, "bull plug" },
	{ (LONG64)witsml14__TubularComponent::sub_bumper, "sub-bumper" },
	{ (LONG64)witsml14__TubularComponent::casing, "casing" },
	{ (LONG64)witsml14__TubularComponent::casing_x0020cutter, "casing cutter" },
	{ (LONG64)witsml14__TubularComponent::hanger_x0020casing_x0020subsea, "hanger casing subsea" },
	{ (LONG64)witsml14__TubularComponent::hanger_x0020casing_x0020surface, "hanger casing surface" },
	{ (LONG64)witsml14__TubularComponent::casing_x0020head, "casing head" },
	{ (LONG64)witsml14__TubularComponent::catch_x0020assembly, "catch assembly" },
	{ (LONG64)witsml14__TubularComponent::sub_catcher, "sub-catcher" },
	{ (LONG64)witsml14__TubularComponent::sub_circulation, "sub-circulation" },
	{ (LONG64)witsml14__TubularComponent::coiled_x0020tubing_x0020in_x0020hole, "coiled tubing in hole" },
	{ (LONG64)witsml14__TubularComponent::coiled_x0020tubing_x0020on_x0020coil, "coiled tubing on coil" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020pipe_x0020compressive, "drill pipe compressive" },
	{ (LONG64)witsml14__TubularComponent::sub_cone, "sub-cone" },
	{ (LONG64)witsml14__TubularComponent::core_x0020barrel, "core barrel" },
	{ (LONG64)witsml14__TubularComponent::core_x0020orientation_x0020barrel, "core orientation barrel" },
	{ (LONG64)witsml14__TubularComponent::sub_crossover, "sub-crossover" },
	{ (LONG64)witsml14__TubularComponent::casing_x0020crossover, "casing crossover" },
	{ (LONG64)witsml14__TubularComponent::sub_dart, "sub-dart" },
	{ (LONG64)witsml14__TubularComponent::die_x0020collar, "die collar" },
	{ (LONG64)witsml14__TubularComponent::die_x0020collar_x0020LH, "die collar LH" },
	{ (LONG64)witsml14__TubularComponent::directional_x0020guidance_x0020system, "directional guidance system" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020collar, "drill collar" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020pipe, "drill pipe" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020pipe_x0020LH, "drill pipe LH" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020stem_x0020test_x0020BHA, "drill stem test BHA" },
	{ (LONG64)witsml14__TubularComponent::drive_x0020pipe, "drive pipe" },
	{ (LONG64)witsml14__TubularComponent::dual_x0020catch_x0020assembly, "dual catch assembly" },
	{ (LONG64)witsml14__TubularComponent::extension_x0020bowl_x0020overshot, "extension bowl overshot" },
	{ (LONG64)witsml14__TubularComponent::extension_x0020sub_overshot, "extension sub-overshot" },
	{ (LONG64)witsml14__TubularComponent::float_x0020collar, "float collar" },
	{ (LONG64)witsml14__TubularComponent::float_x0020shoe, "float shoe" },
	{ (LONG64)witsml14__TubularComponent::sub_float, "sub-float" },
	{ (LONG64)witsml14__TubularComponent::flow_x0020head, "flow head" },
	{ (LONG64)witsml14__TubularComponent::guide_x0020shoe, "guide shoe" },
	{ (LONG64)witsml14__TubularComponent::MWD_x0020hang_x0020off_x0020sub, "MWD hang off sub" },
	{ (LONG64)witsml14__TubularComponent::heavy_x0020weight_x0020drill_x0020pipe, "heavy weight drill pipe" },
	{ (LONG64)witsml14__TubularComponent::heavy_x0020weight_x0020drill_x0020pipe_x0020LH, "heavy weight drill pipe LH" },
	{ (LONG64)witsml14__TubularComponent::riser_x0020high_x0020pressure, "riser high pressure" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020hole_x0020opener, "bit hole opener" },
	{ (LONG64)witsml14__TubularComponent::casing_x0020inflatable_x0020packer, "casing inflatable packer" },
	{ (LONG64)witsml14__TubularComponent::motor_x0020instrumented, "motor instrumented" },
	{ (LONG64)witsml14__TubularComponent::jar, "jar" },
	{ (LONG64)witsml14__TubularComponent::sub_jetting, "sub-jetting" },
	{ (LONG64)witsml14__TubularComponent::junk_x0020basket, "junk basket" },
	{ (LONG64)witsml14__TubularComponent::junk_x0020basket_x0020reverse_x0020circulation, "junk basket reverse circulation" },
	{ (LONG64)witsml14__TubularComponent::sub_junk, "sub-junk" },
	{ (LONG64)witsml14__TubularComponent::kelly, "kelly" },
	{ (LONG64)witsml14__TubularComponent::keyseat_x0020wiper_x0020tool, "keyseat wiper tool" },
	{ (LONG64)witsml14__TubularComponent::landing_x0020float_x0020collar, "landing float collar" },
	{ (LONG64)witsml14__TubularComponent::lead_x0020impression_x0020block, "lead impression block" },
	{ (LONG64)witsml14__TubularComponent::liner, "liner" },
	{ (LONG64)witsml14__TubularComponent::hanger_x0020liner, "hanger liner" },
	{ (LONG64)witsml14__TubularComponent::magnet, "magnet" },
	{ (LONG64)witsml14__TubularComponent::riser_x0020marine, "riser marine" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020dress, "mill dress" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020flat_x0020bottom, "mill flat bottom" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020hollow, "mill hollow" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020polish, "mill polish" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020section, "mill section" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020taper, "mill taper" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020washover, "mill washover" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020packer_x0020picker_x0020assembly, "mill packer picker assembly" },
	{ (LONG64)witsml14__TubularComponent::millout_x0020extension, "millout extension" },
	{ (LONG64)witsml14__TubularComponent::multilateral_x0020hanger_x0020running_x0020tool, "multilateral hanger running tool" },
	{ (LONG64)witsml14__TubularComponent::hanger_x0020mud_x0020line, "hanger mud line" },
	{ (LONG64)witsml14__TubularComponent::motor, "motor" },
	{ (LONG64)witsml14__TubularComponent::mule_x0020shoe, "mule shoe" },
	{ (LONG64)witsml14__TubularComponent::logging_x0020while_x0020drilling_x0020tool, "logging while drilling tool" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020near_x0020bit_x0020roller_x0020reamer, "stabilizer near bit roller reamer" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020near_x0020bit, "stabilizer near bit" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020non_rotating, "stabilizer non-rotating" },
	{ (LONG64)witsml14__TubularComponent::sub_orienting, "sub-orienting" },
	{ (LONG64)witsml14__TubularComponent::other, "other" },
	{ (LONG64)witsml14__TubularComponent::overshot, "overshot" },
	{ (LONG64)witsml14__TubularComponent::overshot_x0020LH, "overshot LH" },
	{ (LONG64)witsml14__TubularComponent::oversize_x0020lip_x0020guide_x0020overshot, "oversize lip guide overshot" },
	{ (LONG64)witsml14__TubularComponent::packer, "packer" },
	{ (LONG64)witsml14__TubularComponent::polished_x0020bore_x0020receptacle, "polished bore receptacle" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020pilot, "mill pilot" },
	{ (LONG64)witsml14__TubularComponent::pipe_x0020cutter, "pipe cutter" },
	{ (LONG64)witsml14__TubularComponent::ported_x0020stinger, "ported stinger" },
	{ (LONG64)witsml14__TubularComponent::sub_ported, "sub-ported" },
	{ (LONG64)witsml14__TubularComponent::prepacked_x0020screens, "prepacked screens" },
	{ (LONG64)witsml14__TubularComponent::sub_pressure_x0020relief, "sub-pressure relief" },
	{ (LONG64)witsml14__TubularComponent::riser_x0020production, "riser production" },
	{ (LONG64)witsml14__TubularComponent::MWD_x0020pulser, "MWD pulser" },
	{ (LONG64)witsml14__TubularComponent::sub_pump_x0020out, "sub-pump out" },
	{ (LONG64)witsml14__TubularComponent::sub_restrictor, "sub-restrictor" },
	{ (LONG64)witsml14__TubularComponent::packer_x0020retrieve_x0020TT_x0020squeeze, "packer retrieve TT squeeze" },
	{ (LONG64)witsml14__TubularComponent::reversing_x0020tool, "reversing tool" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020string_x0020roller_x0020reamer, "stabilizer string roller reamer" },
	{ (LONG64)witsml14__TubularComponent::packer_x0020RTTS, "packer RTTS" },
	{ (LONG64)witsml14__TubularComponent::running_x0020tool, "running tool" },
	{ (LONG64)witsml14__TubularComponent::safety_x0020joint, "safety joint" },
	{ (LONG64)witsml14__TubularComponent::safety_x0020joint_x0020LH, "safety joint LH" },
	{ (LONG64)witsml14__TubularComponent::sub_saver, "sub-saver" },
	{ (LONG64)witsml14__TubularComponent::scab_x0020liner_x0020bit_x0020guide, "scab liner bit guide" },
	{ (LONG64)witsml14__TubularComponent::scraper, "scraper" },
	{ (LONG64)witsml14__TubularComponent::scratchers, "scratchers" },
	{ (LONG64)witsml14__TubularComponent::casing_x0020shoe_x0020screw_in, "casing shoe screw-in" },
	{ (LONG64)witsml14__TubularComponent::sub_shock, "sub-shock" },
	{ (LONG64)witsml14__TubularComponent::drill_x0020collar_x0020short, "drill collar short" },
	{ (LONG64)witsml14__TubularComponent::sub_side_x0020entry, "sub-side entry" },
	{ (LONG64)witsml14__TubularComponent::slotted_x0020liner, "slotted liner" },
	{ (LONG64)witsml14__TubularComponent::spear, "spear" },
	{ (LONG64)witsml14__TubularComponent::stage_x0020cement_x0020collar, "stage cement collar" },
	{ (LONG64)witsml14__TubularComponent::motor_x0020steerable, "motor steerable" },
	{ (LONG64)witsml14__TubularComponent::packer_x0020storm_x0020valve_x0020RTTS, "packer storm valve RTTS" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020string, "stabilizer string" },
	{ (LONG64)witsml14__TubularComponent::surface_x0020pipe, "surface pipe" },
	{ (LONG64)witsml14__TubularComponent::taper_x0020tap, "taper tap" },
	{ (LONG64)witsml14__TubularComponent::taper_x0020tap_x0020LH, "taper tap LH" },
	{ (LONG64)witsml14__TubularComponent::tubing_conveyed_x0020perforating_x0020gun, "tubing-conveyed perforating gun" },
	{ (LONG64)witsml14__TubularComponent::thruster, "thruster" },
	{ (LONG64)witsml14__TubularComponent::tieback_x0020polished_x0020bore_x0020receptacle, "tieback polished bore receptacle" },
	{ (LONG64)witsml14__TubularComponent::tieback_x0020stinger, "tieback stinger" },
	{ (LONG64)witsml14__TubularComponent::tubing, "tubing" },
	{ (LONG64)witsml14__TubularComponent::hanger_x0020tubing, "hanger tubing" },
	{ (LONG64)witsml14__TubularComponent::turbine, "turbine" },
	{ (LONG64)witsml14__TubularComponent::bit_x0020under_x0020reamer, "bit under reamer" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020variable_x0020blade, "stabilizer variable blade" },
	{ (LONG64)witsml14__TubularComponent::washover_x0020pipe, "washover pipe" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020watermelon, "mill watermelon" },
	{ (LONG64)witsml14__TubularComponent::whipstock, "whipstock" },
	{ (LONG64)witsml14__TubularComponent::whipstock_x0020anchor, "whipstock anchor" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020turbo_x0020back, "stabilizer turbo back" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020inline, "stabilizer inline" },
	{ (LONG64)witsml14__TubularComponent::stabilizer_x0020steerable, "stabilizer steerable" },
	{ (LONG64)witsml14__TubularComponent::sub_stop, "sub-stop" },
	{ (LONG64)witsml14__TubularComponent::sub_filter, "sub-filter" },
	{ (LONG64)witsml14__TubularComponent::mill_x0020casing_x0020cutting, "mill casing cutting" },
	{ (LONG64)witsml14__TubularComponent::reamer, "reamer" },
	{ (LONG64)witsml14__TubularComponent::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TubularComponent2s(struct soap *soap, witsml14__TubularComponent n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TubularComponent, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TubularComponent(struct soap *soap, const char *tag, int id, const witsml14__TubularComponent *a, const char *type)
{
	if (!type)
		type = "witsml14:TubularComponent";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent), type) || soap_send(soap, soap_witsml14__TubularComponent2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TubularComponent(struct soap *soap, const char *s, witsml14__TubularComponent *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TubularComponent, s);
	if (map)
		*a = (witsml14__TubularComponent)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TubularComponent * SOAP_FMAC4 soap_in_witsml14__TubularComponent(struct soap *soap, const char *tag, witsml14__TubularComponent *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TubularComponent*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent, sizeof(witsml14__TubularComponent), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TubularComponent(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TubularComponent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularComponent, sizeof(witsml14__TubularComponent), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TubularComponent * SOAP_FMAC4 soap_new_witsml14__TubularComponent(struct soap *soap, int n)
{
	witsml14__TubularComponent *a = static_cast<witsml14__TubularComponent *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TubularComponent)));
	for (witsml14__TubularComponent *p = a; p && n--; ++p)
		soap_default_witsml14__TubularComponent(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TubularComponent(struct soap *soap, const witsml14__TubularComponent *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TubularComponent(soap, tag ? tag : "witsml14:TubularComponent", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TubularComponent * SOAP_FMAC4 soap_get_witsml14__TubularComponent(struct soap *soap, witsml14__TubularComponent *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TubularComponent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TubularAssembly[] =
{	{ (LONG64)witsml14__TubularAssembly::drilling, "drilling" },
	{ (LONG64)witsml14__TubularAssembly::directional_x0020drilling, "directional drilling" },
	{ (LONG64)witsml14__TubularAssembly::fishing, "fishing" },
	{ (LONG64)witsml14__TubularAssembly::condition_x0020mud, "condition mud" },
	{ (LONG64)witsml14__TubularAssembly::tubing_x0020conveyed_x0020logging, "tubing conveyed logging" },
	{ (LONG64)witsml14__TubularAssembly::cementing, "cementing" },
	{ (LONG64)witsml14__TubularAssembly::casing, "casing" },
	{ (LONG64)witsml14__TubularAssembly::clean_x0020out, "clean out" },
	{ (LONG64)witsml14__TubularAssembly::completion_x0020or_x0020testing, "completion or testing" },
	{ (LONG64)witsml14__TubularAssembly::coring, "coring" },
	{ (LONG64)witsml14__TubularAssembly::hole_x0020opening_x0020or_x0020underreaming, "hole opening or underreaming" },
	{ (LONG64)witsml14__TubularAssembly::milling_x0020or_x0020dressing_x0020or_x0020cutting, "milling or dressing or cutting" },
	{ (LONG64)witsml14__TubularAssembly::wiper_x0020or_x0020check_x0020or_x0020reaming, "wiper or check or reaming" },
	{ (LONG64)witsml14__TubularAssembly::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TubularAssembly2s(struct soap *soap, witsml14__TubularAssembly n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TubularAssembly, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TubularAssembly(struct soap *soap, const char *tag, int id, const witsml14__TubularAssembly *a, const char *type)
{
	if (!type)
		type = "witsml14:TubularAssembly";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly), type) || soap_send(soap, soap_witsml14__TubularAssembly2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TubularAssembly(struct soap *soap, const char *s, witsml14__TubularAssembly *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TubularAssembly, s);
	if (map)
		*a = (witsml14__TubularAssembly)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TubularAssembly * SOAP_FMAC4 soap_in_witsml14__TubularAssembly(struct soap *soap, const char *tag, witsml14__TubularAssembly *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TubularAssembly*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly, sizeof(witsml14__TubularAssembly), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TubularAssembly(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TubularAssembly *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly, SOAP_TYPE_gsoap_witsml1_4_witsml14__TubularAssembly, sizeof(witsml14__TubularAssembly), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TubularAssembly * SOAP_FMAC4 soap_new_witsml14__TubularAssembly(struct soap *soap, int n)
{
	witsml14__TubularAssembly *a = static_cast<witsml14__TubularAssembly *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TubularAssembly)));
	for (witsml14__TubularAssembly *p = a; p && n--; ++p)
		soap_default_witsml14__TubularAssembly(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TubularAssembly(struct soap *soap, const witsml14__TubularAssembly *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TubularAssembly(soap, tag ? tag : "witsml14:TubularAssembly", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TubularAssembly * SOAP_FMAC4 soap_get_witsml14__TubularAssembly(struct soap *soap, witsml14__TubularAssembly *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TubularAssembly(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TrajStationType[] =
{	{ (LONG64)witsml14__TrajStationType::azimuth_x0020on_x0020plane, "azimuth on plane" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020to_x0020delta_MD, "buildrate to delta-MD" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020to_x0020INCL, "buildrate to INCL" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020to_x0020MD, "buildrate to MD" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020AZI, "buildrate and turnrate to AZI" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020delta_MD, "buildrate and turnrate to delta-MD" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020INCL, "buildrate and turnrate to INCL" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020INCL_x0020and_x0020AZI, "buildrate and turnrate to INCL and AZI" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020MD, "buildrate and turnrate to MD" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020and_x0020turnrate_x0020to_x0020TVD, "buildrate and turnrate to TVD" },
	{ (LONG64)witsml14__TrajStationType::buildrate_x0020TVD, "buildrate TVD" },
	{ (LONG64)witsml14__TrajStationType::casing_x0020MD, "casing MD" },
	{ (LONG64)witsml14__TrajStationType::casing_x0020TVD, "casing TVD" },
	{ (LONG64)witsml14__TrajStationType::DLS, "DLS" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020AZI_x0020and_x0020MD, "DLS to AZI and MD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020AZI_TVD, "DLS to AZI-TVD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020INCL, "DLS to INCL" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020INCL_x0020and_x0020AZI, "DLS to INCL and AZI" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020INCL_x0020and_x0020MD, "DLS to INCL and MD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020INCL_x0020and_x0020TVD, "DLS to INCL and TVD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020to_x0020NS_x002c_x0020EW_x0020and_x0020TVD, "DLS to NS, EW and TVD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020AZI, "DLS and toolface to AZI" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020delta_MD, "DLS and toolface to delta-MD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020INCL, "DLS and toolface to INCL" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020INCL_AZI, "DLS and toolface to INCL-AZI" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020MD, "DLS and toolface to MD" },
	{ (LONG64)witsml14__TrajStationType::DLS_x0020and_x0020toolface_x0020to_x0020TVD, "DLS and toolface to TVD" },
	{ (LONG64)witsml14__TrajStationType::formation_x0020MD, "formation MD" },
	{ (LONG64)witsml14__TrajStationType::formation_x0020TVD, "formation TVD" },
	{ (LONG64)witsml14__TrajStationType::gyro_x0020inertial, "gyro inertial" },
	{ (LONG64)witsml14__TrajStationType::gyro_x0020MWD, "gyro MWD" },
	{ (LONG64)witsml14__TrajStationType::gyro_x0020north_x0020seeking, "gyro north seeking" },
	{ (LONG64)witsml14__TrajStationType::hold_x0020to_x0020delta_MD, "hold to delta-MD" },
	{ (LONG64)witsml14__TrajStationType::hold_x0020to_x0020MD, "hold to MD" },
	{ (LONG64)witsml14__TrajStationType::hold_x0020to_x0020TVD, "hold to TVD" },
	{ (LONG64)witsml14__TrajStationType::INCL_x002c_x0020AZI_x0020and_x0020TVD, "INCL, AZI and TVD" },
	{ (LONG64)witsml14__TrajStationType::magnetic_x0020multi_shot, "magnetic multi-shot" },
	{ (LONG64)witsml14__TrajStationType::magnetic_x0020MWD, "magnetic MWD" },
	{ (LONG64)witsml14__TrajStationType::magnetic_x0020single_x0020shot, "magnetic single shot" },
	{ (LONG64)witsml14__TrajStationType::marker_x0020MD, "marker MD" },
	{ (LONG64)witsml14__TrajStationType::marker_x0020TVD, "marker TVD" },
	{ (LONG64)witsml14__TrajStationType::NS_x002c_x0020EW_x0020and_x0020TVD, "NS, EW and TVD" },
	{ (LONG64)witsml14__TrajStationType::target_x0020center, "target center" },
	{ (LONG64)witsml14__TrajStationType::target_x0020offset, "target offset" },
	{ (LONG64)witsml14__TrajStationType::tie_x0020in_x0020point, "tie in point" },
	{ (LONG64)witsml14__TrajStationType::turnrate_x0020to_x0020AZI, "turnrate to AZI" },
	{ (LONG64)witsml14__TrajStationType::turnrate_x0020to_x0020delta_MD, "turnrate to delta-MD" },
	{ (LONG64)witsml14__TrajStationType::turnrate_x0020to_x0020MD, "turnrate to MD" },
	{ (LONG64)witsml14__TrajStationType::turnrate_x0020to_x0020TVD, "turnrate to TVD" },
	{ (LONG64)witsml14__TrajStationType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TrajStationType2s(struct soap *soap, witsml14__TrajStationType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TrajStationType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TrajStationType(struct soap *soap, const char *tag, int id, const witsml14__TrajStationType *a, const char *type)
{
	if (!type)
		type = "witsml14:TrajStationType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType), type) || soap_send(soap, soap_witsml14__TrajStationType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TrajStationType(struct soap *soap, const char *s, witsml14__TrajStationType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TrajStationType, s);
	if (map)
		*a = (witsml14__TrajStationType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TrajStationType * SOAP_FMAC4 soap_in_witsml14__TrajStationType(struct soap *soap, const char *tag, witsml14__TrajStationType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TrajStationType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType, sizeof(witsml14__TrajStationType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TrajStationType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TrajStationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationType, sizeof(witsml14__TrajStationType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TrajStationType * SOAP_FMAC4 soap_new_witsml14__TrajStationType(struct soap *soap, int n)
{
	witsml14__TrajStationType *a = static_cast<witsml14__TrajStationType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TrajStationType)));
	for (witsml14__TrajStationType *p = a; p && n--; ++p)
		soap_default_witsml14__TrajStationType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TrajStationType(struct soap *soap, const witsml14__TrajStationType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TrajStationType(soap, tag ? tag : "witsml14:TrajStationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TrajStationType * SOAP_FMAC4 soap_get_witsml14__TrajStationType(struct soap *soap, witsml14__TrajStationType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TrajStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TrajStationStatus[] =
{	{ (LONG64)witsml14__TrajStationStatus::open, "open" },
	{ (LONG64)witsml14__TrajStationStatus::rejected, "rejected" },
	{ (LONG64)witsml14__TrajStationStatus::position, "position" },
	{ (LONG64)witsml14__TrajStationStatus::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TrajStationStatus2s(struct soap *soap, witsml14__TrajStationStatus n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TrajStationStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TrajStationStatus(struct soap *soap, const char *tag, int id, const witsml14__TrajStationStatus *a, const char *type)
{
	if (!type)
		type = "witsml14:TrajStationStatus";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus), type) || soap_send(soap, soap_witsml14__TrajStationStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TrajStationStatus(struct soap *soap, const char *s, witsml14__TrajStationStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TrajStationStatus, s);
	if (map)
		*a = (witsml14__TrajStationStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TrajStationStatus * SOAP_FMAC4 soap_in_witsml14__TrajStationStatus(struct soap *soap, const char *tag, witsml14__TrajStationStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TrajStationStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus, sizeof(witsml14__TrajStationStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TrajStationStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TrajStationStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus, sizeof(witsml14__TrajStationStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TrajStationStatus * SOAP_FMAC4 soap_new_witsml14__TrajStationStatus(struct soap *soap, int n)
{
	witsml14__TrajStationStatus *a = static_cast<witsml14__TrajStationStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TrajStationStatus)));
	for (witsml14__TrajStationStatus *p = a; p && n--; ++p)
		soap_default_witsml14__TrajStationStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TrajStationStatus(struct soap *soap, const witsml14__TrajStationStatus *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TrajStationStatus(soap, tag ? tag : "witsml14:TrajStationStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TrajStationStatus * SOAP_FMAC4 soap_get_witsml14__TrajStationStatus(struct soap *soap, witsml14__TrajStationStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TrajStationStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TargetSectionScope[] =
{	{ (LONG64)witsml14__TargetSectionScope::arc, "arc" },
	{ (LONG64)witsml14__TargetSectionScope::line, "line" },
	{ (LONG64)witsml14__TargetSectionScope::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TargetSectionScope2s(struct soap *soap, witsml14__TargetSectionScope n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TargetSectionScope, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TargetSectionScope(struct soap *soap, const char *tag, int id, const witsml14__TargetSectionScope *a, const char *type)
{
	if (!type)
		type = "witsml14:TargetSectionScope";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope), type) || soap_send(soap, soap_witsml14__TargetSectionScope2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TargetSectionScope(struct soap *soap, const char *s, witsml14__TargetSectionScope *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TargetSectionScope, s);
	if (map)
		*a = (witsml14__TargetSectionScope)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TargetSectionScope * SOAP_FMAC4 soap_in_witsml14__TargetSectionScope(struct soap *soap, const char *tag, witsml14__TargetSectionScope *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TargetSectionScope*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope, sizeof(witsml14__TargetSectionScope), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TargetSectionScope(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TargetSectionScope *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetSectionScope, sizeof(witsml14__TargetSectionScope), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TargetSectionScope * SOAP_FMAC4 soap_new_witsml14__TargetSectionScope(struct soap *soap, int n)
{
	witsml14__TargetSectionScope *a = static_cast<witsml14__TargetSectionScope *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TargetSectionScope)));
	for (witsml14__TargetSectionScope *p = a; p && n--; ++p)
		soap_default_witsml14__TargetSectionScope(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TargetSectionScope(struct soap *soap, const witsml14__TargetSectionScope *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TargetSectionScope(soap, tag ? tag : "witsml14:TargetSectionScope", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TargetSectionScope * SOAP_FMAC4 soap_get_witsml14__TargetSectionScope(struct soap *soap, witsml14__TargetSectionScope *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TargetSectionScope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TargetScope[] =
{	{ (LONG64)witsml14__TargetScope::_3D_x0020volume, "3D volume" },
	{ (LONG64)witsml14__TargetScope::ellipsoid, "ellipsoid" },
	{ (LONG64)witsml14__TargetScope::elliptical, "elliptical" },
	{ (LONG64)witsml14__TargetScope::hardLine, "hardLine" },
	{ (LONG64)witsml14__TargetScope::irregular, "irregular" },
	{ (LONG64)witsml14__TargetScope::lease_x0020line, "lease line" },
	{ (LONG64)witsml14__TargetScope::line, "line" },
	{ (LONG64)witsml14__TargetScope::plane, "plane" },
	{ (LONG64)witsml14__TargetScope::point, "point" },
	{ (LONG64)witsml14__TargetScope::rectangular, "rectangular" },
	{ (LONG64)witsml14__TargetScope::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TargetScope2s(struct soap *soap, witsml14__TargetScope n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TargetScope, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TargetScope(struct soap *soap, const char *tag, int id, const witsml14__TargetScope *a, const char *type)
{
	if (!type)
		type = "witsml14:TargetScope";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope), type) || soap_send(soap, soap_witsml14__TargetScope2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TargetScope(struct soap *soap, const char *s, witsml14__TargetScope *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TargetScope, s);
	if (map)
		*a = (witsml14__TargetScope)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TargetScope * SOAP_FMAC4 soap_in_witsml14__TargetScope(struct soap *soap, const char *tag, witsml14__TargetScope *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TargetScope*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope, sizeof(witsml14__TargetScope), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TargetScope(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TargetScope *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetScope, sizeof(witsml14__TargetScope), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TargetScope * SOAP_FMAC4 soap_new_witsml14__TargetScope(struct soap *soap, int n)
{
	witsml14__TargetScope *a = static_cast<witsml14__TargetScope *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TargetScope)));
	for (witsml14__TargetScope *p = a; p && n--; ++p)
		soap_default_witsml14__TargetScope(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TargetScope(struct soap *soap, const witsml14__TargetScope *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TargetScope(soap, tag ? tag : "witsml14:TargetScope", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TargetScope * SOAP_FMAC4 soap_get_witsml14__TargetScope(struct soap *soap, witsml14__TargetScope *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TargetScope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TargetCategory[] =
{	{ (LONG64)witsml14__TargetCategory::geological, "geological" },
	{ (LONG64)witsml14__TargetCategory::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TargetCategory2s(struct soap *soap, witsml14__TargetCategory n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TargetCategory, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TargetCategory(struct soap *soap, const char *tag, int id, const witsml14__TargetCategory *a, const char *type)
{
	if (!type)
		type = "witsml14:TargetCategory";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory), type) || soap_send(soap, soap_witsml14__TargetCategory2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TargetCategory(struct soap *soap, const char *s, witsml14__TargetCategory *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TargetCategory, s);
	if (map)
		*a = (witsml14__TargetCategory)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TargetCategory * SOAP_FMAC4 soap_in_witsml14__TargetCategory(struct soap *soap, const char *tag, witsml14__TargetCategory *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TargetCategory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory, sizeof(witsml14__TargetCategory), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TargetCategory(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TargetCategory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory, SOAP_TYPE_gsoap_witsml1_4_witsml14__TargetCategory, sizeof(witsml14__TargetCategory), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TargetCategory * SOAP_FMAC4 soap_new_witsml14__TargetCategory(struct soap *soap, int n)
{
	witsml14__TargetCategory *a = static_cast<witsml14__TargetCategory *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TargetCategory)));
	for (witsml14__TargetCategory *p = a; p && n--; ++p)
		soap_default_witsml14__TargetCategory(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TargetCategory(struct soap *soap, const witsml14__TargetCategory *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TargetCategory(soap, tag ? tag : "witsml14:TargetCategory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TargetCategory * SOAP_FMAC4 soap_get_witsml14__TargetCategory(struct soap *soap, witsml14__TargetCategory *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TargetCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__SurveyToolOperatingMode[] =
{	{ (LONG64)witsml14__SurveyToolOperatingMode::stationary, "stationary" },
	{ (LONG64)witsml14__SurveyToolOperatingMode::continuous_x0020XY, "continuous XY" },
	{ (LONG64)witsml14__SurveyToolOperatingMode::continuous_x0020Z, "continuous Z" },
	{ (LONG64)witsml14__SurveyToolOperatingMode::continuous_x0020XYZ, "continuous XYZ" },
	{ (LONG64)witsml14__SurveyToolOperatingMode::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__SurveyToolOperatingMode2s(struct soap *soap, witsml14__SurveyToolOperatingMode n)
{
	const char *s = soap_code_str(soap_codes_witsml14__SurveyToolOperatingMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__SurveyToolOperatingMode(struct soap *soap, const char *tag, int id, const witsml14__SurveyToolOperatingMode *a, const char *type)
{
	if (!type)
		type = "witsml14:SurveyToolOperatingMode";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode), type) || soap_send(soap, soap_witsml14__SurveyToolOperatingMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__SurveyToolOperatingMode(struct soap *soap, const char *s, witsml14__SurveyToolOperatingMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__SurveyToolOperatingMode, s);
	if (map)
		*a = (witsml14__SurveyToolOperatingMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__SurveyToolOperatingMode * SOAP_FMAC4 soap_in_witsml14__SurveyToolOperatingMode(struct soap *soap, const char *tag, witsml14__SurveyToolOperatingMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__SurveyToolOperatingMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode, sizeof(witsml14__SurveyToolOperatingMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__SurveyToolOperatingMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__SurveyToolOperatingMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurveyToolOperatingMode, sizeof(witsml14__SurveyToolOperatingMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__SurveyToolOperatingMode * SOAP_FMAC4 soap_new_witsml14__SurveyToolOperatingMode(struct soap *soap, int n)
{
	witsml14__SurveyToolOperatingMode *a = static_cast<witsml14__SurveyToolOperatingMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__SurveyToolOperatingMode)));
	for (witsml14__SurveyToolOperatingMode *p = a; p && n--; ++p)
		soap_default_witsml14__SurveyToolOperatingMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__SurveyToolOperatingMode(struct soap *soap, const witsml14__SurveyToolOperatingMode *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__SurveyToolOperatingMode(soap, tag ? tag : "witsml14:SurveyToolOperatingMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__SurveyToolOperatingMode * SOAP_FMAC4 soap_get_witsml14__SurveyToolOperatingMode(struct soap *soap, witsml14__SurveyToolOperatingMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__SurveyToolOperatingMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__SurfEquipType[] =
{	{ (LONG64)witsml14__SurfEquipType::IADC, "IADC" },
	{ (LONG64)witsml14__SurfEquipType::custom, "custom" },
	{ (LONG64)witsml14__SurfEquipType::coiled_x0020tubing, "coiled tubing" },
	{ (LONG64)witsml14__SurfEquipType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__SurfEquipType2s(struct soap *soap, witsml14__SurfEquipType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__SurfEquipType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__SurfEquipType(struct soap *soap, const char *tag, int id, const witsml14__SurfEquipType *a, const char *type)
{
	if (!type)
		type = "witsml14:SurfEquipType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType), type) || soap_send(soap, soap_witsml14__SurfEquipType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__SurfEquipType(struct soap *soap, const char *s, witsml14__SurfEquipType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__SurfEquipType, s);
	if (map)
		*a = (witsml14__SurfEquipType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__SurfEquipType * SOAP_FMAC4 soap_in_witsml14__SurfEquipType(struct soap *soap, const char *tag, witsml14__SurfEquipType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__SurfEquipType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType, sizeof(witsml14__SurfEquipType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__SurfEquipType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__SurfEquipType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType, SOAP_TYPE_gsoap_witsml1_4_witsml14__SurfEquipType, sizeof(witsml14__SurfEquipType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__SurfEquipType * SOAP_FMAC4 soap_new_witsml14__SurfEquipType(struct soap *soap, int n)
{
	witsml14__SurfEquipType *a = static_cast<witsml14__SurfEquipType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__SurfEquipType)));
	for (witsml14__SurfEquipType *p = a; p && n--; ++p)
		soap_default_witsml14__SurfEquipType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__SurfEquipType(struct soap *soap, const witsml14__SurfEquipType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__SurfEquipType(soap, tag ? tag : "witsml14:SurfEquipType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__SurfEquipType * SOAP_FMAC4 soap_get_witsml14__SurfEquipType(struct soap *soap, witsml14__SurfEquipType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__SurfEquipType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__SupportCraft[] =
{	{ (LONG64)witsml14__SupportCraft::barge, "barge" },
	{ (LONG64)witsml14__SupportCraft::standby_x0020boat, "standby boat" },
	{ (LONG64)witsml14__SupportCraft::helicopter, "helicopter" },
	{ (LONG64)witsml14__SupportCraft::supply_x0020boat, "supply boat" },
	{ (LONG64)witsml14__SupportCraft::truck, "truck" },
	{ (LONG64)witsml14__SupportCraft::crew_x0020vehicle, "crew vehicle" },
	{ (LONG64)witsml14__SupportCraft::tug_x0020boat, "tug boat" },
	{ (LONG64)witsml14__SupportCraft::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__SupportCraft2s(struct soap *soap, witsml14__SupportCraft n)
{
	const char *s = soap_code_str(soap_codes_witsml14__SupportCraft, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__SupportCraft(struct soap *soap, const char *tag, int id, const witsml14__SupportCraft *a, const char *type)
{
	if (!type)
		type = "witsml14:SupportCraft";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft), type) || soap_send(soap, soap_witsml14__SupportCraft2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__SupportCraft(struct soap *soap, const char *s, witsml14__SupportCraft *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__SupportCraft, s);
	if (map)
		*a = (witsml14__SupportCraft)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__SupportCraft * SOAP_FMAC4 soap_in_witsml14__SupportCraft(struct soap *soap, const char *tag, witsml14__SupportCraft *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__SupportCraft*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft, sizeof(witsml14__SupportCraft), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__SupportCraft(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__SupportCraft *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft, SOAP_TYPE_gsoap_witsml1_4_witsml14__SupportCraft, sizeof(witsml14__SupportCraft), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__SupportCraft * SOAP_FMAC4 soap_new_witsml14__SupportCraft(struct soap *soap, int n)
{
	witsml14__SupportCraft *a = static_cast<witsml14__SupportCraft *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__SupportCraft)));
	for (witsml14__SupportCraft *p = a; p && n--; ++p)
		soap_default_witsml14__SupportCraft(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__SupportCraft(struct soap *soap, const witsml14__SupportCraft *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__SupportCraft(soap, tag ? tag : "witsml14:SupportCraft", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__SupportCraft * SOAP_FMAC4 soap_get_witsml14__SupportCraft(struct soap *soap, witsml14__SupportCraft *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__SupportCraft(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimStageType[] =
{	{ (LONG64)witsml14__StimStageType::acid, "acid" },
	{ (LONG64)witsml14__StimStageType::acid_x0020spearhead, "acid spearhead" },
	{ (LONG64)witsml14__StimStageType::acid_x0020ball_x0020out, "acid ball out" },
	{ (LONG64)witsml14__StimStageType::acid_x0020breakdown, "acid breakdown" },
	{ (LONG64)witsml14__StimStageType::ball_x0020out, "ball out" },
	{ (LONG64)witsml14__StimStageType::breakdown, "breakdown" },
	{ (LONG64)witsml14__StimStageType::chemical_x0020wash, "chemical wash" },
	{ (LONG64)witsml14__StimStageType::circulate, "circulate" },
	{ (LONG64)witsml14__StimStageType::displacement, "displacement" },
	{ (LONG64)witsml14__StimStageType::diverter, "diverter" },
	{ (LONG64)witsml14__StimStageType::fluid_x0020efficiency_x0020test, "fluid efficiency test" },
	{ (LONG64)witsml14__StimStageType::flowback, "flowback" },
	{ (LONG64)witsml14__StimStageType::flush, "flush" },
	{ (LONG64)witsml14__StimStageType::foamed_x0020acid, "foamed acid" },
	{ (LONG64)witsml14__StimStageType::hydrajet, "hydrajet" },
	{ (LONG64)witsml14__StimStageType::load_x0020well, "load well" },
	{ (LONG64)witsml14__StimStageType::load_x0020annulus, "load annulus" },
	{ (LONG64)witsml14__StimStageType::overflush, "overflush" },
	{ (LONG64)witsml14__StimStageType::pad, "pad" },
	{ (LONG64)witsml14__StimStageType::pump_in, "pump-in" },
	{ (LONG64)witsml14__StimStageType::pre_Job, "pre-Job" },
	{ (LONG64)witsml14__StimStageType::pre_flush, "pre-flush" },
	{ (LONG64)witsml14__StimStageType::pre_pad, "pre-pad" },
	{ (LONG64)witsml14__StimStageType::shut_in, "shut-in" },
	{ (LONG64)witsml14__StimStageType::shut_in_x0020for_x0020FET_x0020analysis, "shut-in for FET analysis" },
	{ (LONG64)witsml14__StimStageType::proppant_x0020laden_x0020fluid, "proppant laden fluid" },
	{ (LONG64)witsml14__StimStageType::slurry, "slurry" },
	{ (LONG64)witsml14__StimStageType::sand_x0020slug, "sand slug" },
	{ (LONG64)witsml14__StimStageType::spacer, "spacer" },
	{ (LONG64)witsml14__StimStageType::spot_x0020acid, "spot acid" },
	{ (LONG64)witsml14__StimStageType::step_x0020rate_x0020test, "step rate test" },
	{ (LONG64)witsml14__StimStageType::treatment, "treatment" },
	{ (LONG64)witsml14__StimStageType::other, "other" },
	{ (LONG64)witsml14__StimStageType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimStageType2s(struct soap *soap, witsml14__StimStageType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimStageType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimStageType(struct soap *soap, const char *tag, int id, const witsml14__StimStageType *a, const char *type)
{
	if (!type)
		type = "witsml14:StimStageType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType), type) || soap_send(soap, soap_witsml14__StimStageType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimStageType(struct soap *soap, const char *s, witsml14__StimStageType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimStageType, s);
	if (map)
		*a = (witsml14__StimStageType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimStageType * SOAP_FMAC4 soap_in_witsml14__StimStageType(struct soap *soap, const char *tag, witsml14__StimStageType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimStageType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType, sizeof(witsml14__StimStageType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimStageType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimStageType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageType, sizeof(witsml14__StimStageType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimStageType * SOAP_FMAC4 soap_new_witsml14__StimStageType(struct soap *soap, int n)
{
	witsml14__StimStageType *a = static_cast<witsml14__StimStageType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimStageType)));
	for (witsml14__StimStageType *p = a; p && n--; ++p)
		soap_default_witsml14__StimStageType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimStageType(struct soap *soap, const witsml14__StimStageType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimStageType(soap, tag ? tag : "witsml14:StimStageType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimStageType * SOAP_FMAC4 soap_get_witsml14__StimStageType(struct soap *soap, witsml14__StimStageType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimStageType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimStageFlowPathType[] =
{	{ (LONG64)witsml14__StimStageFlowPathType::annulus, "annulus" },
	{ (LONG64)witsml14__StimStageFlowPathType::casing, "casing" },
	{ (LONG64)witsml14__StimStageFlowPathType::coiled_x0020tubing, "coiled tubing" },
	{ (LONG64)witsml14__StimStageFlowPathType::drill_x0020pipe, "drill pipe" },
	{ (LONG64)witsml14__StimStageFlowPathType::open_x0020hole, "open hole" },
	{ (LONG64)witsml14__StimStageFlowPathType::tubing, "tubing" },
	{ (LONG64)witsml14__StimStageFlowPathType::tubing_x0020and_x0020annulus, "tubing and annulus" },
	{ (LONG64)witsml14__StimStageFlowPathType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimStageFlowPathType2s(struct soap *soap, witsml14__StimStageFlowPathType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimStageFlowPathType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimStageFlowPathType(struct soap *soap, const char *tag, int id, const witsml14__StimStageFlowPathType *a, const char *type)
{
	if (!type)
		type = "witsml14:StimStageFlowPathType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType), type) || soap_send(soap, soap_witsml14__StimStageFlowPathType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimStageFlowPathType(struct soap *soap, const char *s, witsml14__StimStageFlowPathType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimStageFlowPathType, s);
	if (map)
		*a = (witsml14__StimStageFlowPathType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimStageFlowPathType * SOAP_FMAC4 soap_in_witsml14__StimStageFlowPathType(struct soap *soap, const char *tag, witsml14__StimStageFlowPathType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimStageFlowPathType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType, sizeof(witsml14__StimStageFlowPathType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimStageFlowPathType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimStageFlowPathType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimStageFlowPathType, sizeof(witsml14__StimStageFlowPathType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimStageFlowPathType * SOAP_FMAC4 soap_new_witsml14__StimStageFlowPathType(struct soap *soap, int n)
{
	witsml14__StimStageFlowPathType *a = static_cast<witsml14__StimStageFlowPathType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimStageFlowPathType)));
	for (witsml14__StimStageFlowPathType *p = a; p && n--; ++p)
		soap_default_witsml14__StimStageFlowPathType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimStageFlowPathType(struct soap *soap, const witsml14__StimStageFlowPathType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimStageFlowPathType(soap, tag ? tag : "witsml14:StimStageFlowPathType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimStageFlowPathType * SOAP_FMAC4 soap_get_witsml14__StimStageFlowPathType(struct soap *soap, witsml14__StimStageFlowPathType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimStageFlowPathType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimProppantType[] =
{	{ (LONG64)witsml14__StimProppantType::sand, "sand" },
	{ (LONG64)witsml14__StimProppantType::manmade_x0020proppant, "manmade proppant" },
	{ (LONG64)witsml14__StimProppantType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimProppantType2s(struct soap *soap, witsml14__StimProppantType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimProppantType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimProppantType(struct soap *soap, const char *tag, int id, const witsml14__StimProppantType *a, const char *type)
{
	if (!type)
		type = "witsml14:StimProppantType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType), type) || soap_send(soap, soap_witsml14__StimProppantType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimProppantType(struct soap *soap, const char *s, witsml14__StimProppantType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimProppantType, s);
	if (map)
		*a = (witsml14__StimProppantType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimProppantType * SOAP_FMAC4 soap_in_witsml14__StimProppantType(struct soap *soap, const char *tag, witsml14__StimProppantType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimProppantType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType, sizeof(witsml14__StimProppantType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimProppantType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimProppantType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimProppantType, sizeof(witsml14__StimProppantType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimProppantType * SOAP_FMAC4 soap_new_witsml14__StimProppantType(struct soap *soap, int n)
{
	witsml14__StimProppantType *a = static_cast<witsml14__StimProppantType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimProppantType)));
	for (witsml14__StimProppantType *p = a; p && n--; ++p)
		soap_default_witsml14__StimProppantType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimProppantType(struct soap *soap, const witsml14__StimProppantType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimProppantType(soap, tag ? tag : "witsml14:StimProppantType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimProppantType * SOAP_FMAC4 soap_get_witsml14__StimProppantType(struct soap *soap, witsml14__StimProppantType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimProppantType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimFluidType[] =
{	{ (LONG64)witsml14__StimFluidType::acid_based, "acid-based" },
	{ (LONG64)witsml14__StimFluidType::gas, "gas" },
	{ (LONG64)witsml14__StimFluidType::oil_based, "oil-based" },
	{ (LONG64)witsml14__StimFluidType::water_based, "water-based" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimFluidType2s(struct soap *soap, witsml14__StimFluidType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimFluidType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimFluidType(struct soap *soap, const char *tag, int id, const witsml14__StimFluidType *a, const char *type)
{
	if (!type)
		type = "witsml14:StimFluidType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType), type) || soap_send(soap, soap_witsml14__StimFluidType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimFluidType(struct soap *soap, const char *s, witsml14__StimFluidType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimFluidType, s);
	if (map)
		*a = (witsml14__StimFluidType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimFluidType * SOAP_FMAC4 soap_in_witsml14__StimFluidType(struct soap *soap, const char *tag, witsml14__StimFluidType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimFluidType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType, sizeof(witsml14__StimFluidType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimFluidType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimFluidType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidType, sizeof(witsml14__StimFluidType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimFluidType * SOAP_FMAC4 soap_new_witsml14__StimFluidType(struct soap *soap, int n)
{
	witsml14__StimFluidType *a = static_cast<witsml14__StimFluidType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimFluidType)));
	for (witsml14__StimFluidType *p = a; p && n--; ++p)
		soap_default_witsml14__StimFluidType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimFluidType(struct soap *soap, const witsml14__StimFluidType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimFluidType(soap, tag ? tag : "witsml14:StimFluidType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimFluidType * SOAP_FMAC4 soap_get_witsml14__StimFluidType(struct soap *soap, witsml14__StimFluidType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimFluidType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimFluidSubtype[] =
{	{ (LONG64)witsml14__StimFluidSubtype::acid, "acid" },
	{ (LONG64)witsml14__StimFluidSubtype::base, "base" },
	{ (LONG64)witsml14__StimFluidSubtype::carbon_x0020dioxide, "carbon dioxide" },
	{ (LONG64)witsml14__StimFluidSubtype::carbon_x0020dioxide_x0020and_x0020nitrogen, "carbon dioxide and nitrogen" },
	{ (LONG64)witsml14__StimFluidSubtype::carbon_x0020dioxide_x0020and_x0020water, "carbon dioxide and water" },
	{ (LONG64)witsml14__StimFluidSubtype::condensate, "condensate" },
	{ (LONG64)witsml14__StimFluidSubtype::cross_linked_x0020gel, "cross-linked gel" },
	{ (LONG64)witsml14__StimFluidSubtype::crude_x0020oil, "crude oil" },
	{ (LONG64)witsml14__StimFluidSubtype::diesel, "diesel" },
	{ (LONG64)witsml14__StimFluidSubtype::foam, "foam" },
	{ (LONG64)witsml14__StimFluidSubtype::fracturing_x0020oil, "fracturing oil" },
	{ (LONG64)witsml14__StimFluidSubtype::fresh_x0020water, "fresh water" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020acid, "gelled acid" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020condensate, "gelled condensate" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020crude, "gelled crude" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020diesel, "gelled diesel" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020oil, "gelled oil" },
	{ (LONG64)witsml14__StimFluidSubtype::gelled_x0020salt_x0020water, "gelled salt water" },
	{ (LONG64)witsml14__StimFluidSubtype::hot_x0020condensate, "hot condensate" },
	{ (LONG64)witsml14__StimFluidSubtype::hot_x0020fresh_x0020water, "hot fresh water" },
	{ (LONG64)witsml14__StimFluidSubtype::hot_x0020oil, "hot oil" },
	{ (LONG64)witsml14__StimFluidSubtype::hot_x0020salt_x0020water, "hot salt water" },
	{ (LONG64)witsml14__StimFluidSubtype::hybrid, "hybrid" },
	{ (LONG64)witsml14__StimFluidSubtype::linear_x0020gel, "linear gel" },
	{ (LONG64)witsml14__StimFluidSubtype::liquefied_x0020petroleum_x0020gas, "liquefied petroleum gas" },
	{ (LONG64)witsml14__StimFluidSubtype::nitrogen, "nitrogen" },
	{ (LONG64)witsml14__StimFluidSubtype::oil, "oil" },
	{ (LONG64)witsml14__StimFluidSubtype::produced_x0020water, "produced water" },
	{ (LONG64)witsml14__StimFluidSubtype::salt_x0020water, "salt water" },
	{ (LONG64)witsml14__StimFluidSubtype::slick_x0020water, "slick water" },
	{ (LONG64)witsml14__StimFluidSubtype::other, "other" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimFluidSubtype2s(struct soap *soap, witsml14__StimFluidSubtype n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimFluidSubtype, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimFluidSubtype(struct soap *soap, const char *tag, int id, const witsml14__StimFluidSubtype *a, const char *type)
{
	if (!type)
		type = "witsml14:StimFluidSubtype";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype), type) || soap_send(soap, soap_witsml14__StimFluidSubtype2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimFluidSubtype(struct soap *soap, const char *s, witsml14__StimFluidSubtype *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimFluidSubtype, s);
	if (map)
		*a = (witsml14__StimFluidSubtype)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimFluidSubtype * SOAP_FMAC4 soap_in_witsml14__StimFluidSubtype(struct soap *soap, const char *tag, witsml14__StimFluidSubtype *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimFluidSubtype*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype, sizeof(witsml14__StimFluidSubtype), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimFluidSubtype(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimFluidSubtype *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimFluidSubtype, sizeof(witsml14__StimFluidSubtype), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimFluidSubtype * SOAP_FMAC4 soap_new_witsml14__StimFluidSubtype(struct soap *soap, int n)
{
	witsml14__StimFluidSubtype *a = static_cast<witsml14__StimFluidSubtype *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimFluidSubtype)));
	for (witsml14__StimFluidSubtype *p = a; p && n--; ++p)
		soap_default_witsml14__StimFluidSubtype(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimFluidSubtype(struct soap *soap, const witsml14__StimFluidSubtype *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimFluidSubtype(soap, tag ? tag : "witsml14:StimFluidSubtype", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimFluidSubtype * SOAP_FMAC4 soap_get_witsml14__StimFluidSubtype(struct soap *soap, witsml14__StimFluidSubtype *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimFluidSubtype(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimAnalysisMethod[] =
{	{ (LONG64)witsml14__StimAnalysisMethod::average, "average" },
	{ (LONG64)witsml14__StimAnalysisMethod::delta_x0020pressure_x0020over_x0020g_time, "delta pressure over g-time" },
	{ (LONG64)witsml14__StimAnalysisMethod::delta_x0020pressure_x0020over_x0020linear_x0020time, "delta pressure over linear time" },
	{ (LONG64)witsml14__StimAnalysisMethod::delta_x0020pressure_x0020over_x0020radial_x0020time, "delta pressure over radial time" },
	{ (LONG64)witsml14__StimAnalysisMethod::gdk_x00202_d, "gdk 2-d" },
	{ (LONG64)witsml14__StimAnalysisMethod::horner, "horner" },
	{ (LONG64)witsml14__StimAnalysisMethod::linear, "linear" },
	{ (LONG64)witsml14__StimAnalysisMethod::log_log, "log-log" },
	{ (LONG64)witsml14__StimAnalysisMethod::nolte, "nolte" },
	{ (LONG64)witsml14__StimAnalysisMethod::pdl_x0020coefficient, "pdl coefficient" },
	{ (LONG64)witsml14__StimAnalysisMethod::perkins_x0020and_x0020kern_x00202_d, "perkins and kern 2-d" },
	{ (LONG64)witsml14__StimAnalysisMethod::radial_x00202_d, "radial 2-d" },
	{ (LONG64)witsml14__StimAnalysisMethod::square_x0020root, "square root" },
	{ (LONG64)witsml14__StimAnalysisMethod::third_party_x0020software, "third-party software" },
	{ (LONG64)witsml14__StimAnalysisMethod::other, "other" },
	{ (LONG64)witsml14__StimAnalysisMethod::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimAnalysisMethod2s(struct soap *soap, witsml14__StimAnalysisMethod n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimAnalysisMethod, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimAnalysisMethod(struct soap *soap, const char *tag, int id, const witsml14__StimAnalysisMethod *a, const char *type)
{
	if (!type)
		type = "witsml14:StimAnalysisMethod";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod), type) || soap_send(soap, soap_witsml14__StimAnalysisMethod2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimAnalysisMethod(struct soap *soap, const char *s, witsml14__StimAnalysisMethod *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimAnalysisMethod, s);
	if (map)
		*a = (witsml14__StimAnalysisMethod)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimAnalysisMethod * SOAP_FMAC4 soap_in_witsml14__StimAnalysisMethod(struct soap *soap, const char *tag, witsml14__StimAnalysisMethod *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimAnalysisMethod*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod, sizeof(witsml14__StimAnalysisMethod), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimAnalysisMethod(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimAnalysisMethod *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAnalysisMethod, sizeof(witsml14__StimAnalysisMethod), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimAnalysisMethod * SOAP_FMAC4 soap_new_witsml14__StimAnalysisMethod(struct soap *soap, int n)
{
	witsml14__StimAnalysisMethod *a = static_cast<witsml14__StimAnalysisMethod *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimAnalysisMethod)));
	for (witsml14__StimAnalysisMethod *p = a; p && n--; ++p)
		soap_default_witsml14__StimAnalysisMethod(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimAnalysisMethod(struct soap *soap, const witsml14__StimAnalysisMethod *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimAnalysisMethod(soap, tag ? tag : "witsml14:StimAnalysisMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimAnalysisMethod * SOAP_FMAC4 soap_get_witsml14__StimAnalysisMethod(struct soap *soap, witsml14__StimAnalysisMethod *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimAnalysisMethod(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StimAdditiveType[] =
{	{ (LONG64)witsml14__StimAdditiveType::abrasive, "abrasive" },
	{ (LONG64)witsml14__StimAdditiveType::accelerator, "accelerator" },
	{ (LONG64)witsml14__StimAdditiveType::acid_x0020inhibitor_x002fretarder, "acid inhibitor/retarder" },
	{ (LONG64)witsml14__StimAdditiveType::acid_x0020material, "acid material" },
	{ (LONG64)witsml14__StimAdditiveType::acid_x0020soluble_x0020additive, "acid soluble additive" },
	{ (LONG64)witsml14__StimAdditiveType::acid_x0020source, "acid source" },
	{ (LONG64)witsml14__StimAdditiveType::activator, "activator" },
	{ (LONG64)witsml14__StimAdditiveType::additive_x0020material, "additive material" },
	{ (LONG64)witsml14__StimAdditiveType::alcohol, "alcohol" },
	{ (LONG64)witsml14__StimAdditiveType::anti_Sludge, "anti-Sludge" },
	{ (LONG64)witsml14__StimAdditiveType::anti_sulfide_x0020cracker, "anti-sulfide cracker" },
	{ (LONG64)witsml14__StimAdditiveType::aromatic_x0020solvent, "aromatic solvent" },
	{ (LONG64)witsml14__StimAdditiveType::biocide, "biocide" },
	{ (LONG64)witsml14__StimAdditiveType::borehole_x0020stabilizer, "borehole stabilizer" },
	{ (LONG64)witsml14__StimAdditiveType::breaker, "breaker" },
	{ (LONG64)witsml14__StimAdditiveType::bridging_x0020agent, "bridging agent" },
	{ (LONG64)witsml14__StimAdditiveType::buffer, "buffer" },
	{ (LONG64)witsml14__StimAdditiveType::calcium_x0020remover, "calcium remover" },
	{ (LONG64)witsml14__StimAdditiveType::carrying_x0020agent, "carrying agent" },
	{ (LONG64)witsml14__StimAdditiveType::catalyst, "catalyst" },
	{ (LONG64)witsml14__StimAdditiveType::clay, "clay" },
	{ (LONG64)witsml14__StimAdditiveType::clay_x0020control, "clay control" },
	{ (LONG64)witsml14__StimAdditiveType::conductivity_x0020enhancer, "conductivity enhancer" },
	{ (LONG64)witsml14__StimAdditiveType::conformance_x0020control, "conformance control" },
	{ (LONG64)witsml14__StimAdditiveType::conformance_x0020caterial, "conformance caterial" },
	{ (LONG64)witsml14__StimAdditiveType::corrosion_x0020inhibitor, "corrosion inhibitor" },
	{ (LONG64)witsml14__StimAdditiveType::crosslink_x0020enhancer, "crosslink enhancer" },
	{ (LONG64)witsml14__StimAdditiveType::crosslinker, "crosslinker" },
	{ (LONG64)witsml14__StimAdditiveType::curing_x0020agent, "curing agent" },
	{ (LONG64)witsml14__StimAdditiveType::defoamer, "defoamer" },
	{ (LONG64)witsml14__StimAdditiveType::demulsifier, "demulsifier" },
	{ (LONG64)witsml14__StimAdditiveType::diluent, "diluent" },
	{ (LONG64)witsml14__StimAdditiveType::dispersant, "dispersant" },
	{ (LONG64)witsml14__StimAdditiveType::diverter, "diverter" },
	{ (LONG64)witsml14__StimAdditiveType::elastomeric_x0020additive, "elastomeric additive" },
	{ (LONG64)witsml14__StimAdditiveType::emulsifier, "emulsifier" },
	{ (LONG64)witsml14__StimAdditiveType::epoxy_x0020resin, "epoxy resin" },
	{ (LONG64)witsml14__StimAdditiveType::expoxy_x0020resin_x0020agent, "expoxy resin agent" },
	{ (LONG64)witsml14__StimAdditiveType::expander, "expander" },
	{ (LONG64)witsml14__StimAdditiveType::filtration_x0020control, "filtration control" },
	{ (LONG64)witsml14__StimAdditiveType::flocculant, "flocculant" },
	{ (LONG64)witsml14__StimAdditiveType::fluid_x0020loss_x0020control, "fluid loss control" },
	{ (LONG64)witsml14__StimAdditiveType::flush_x002fspacer_x0020additive, "flush/spacer additive" },
	{ (LONG64)witsml14__StimAdditiveType::foamer, "foamer" },
	{ (LONG64)witsml14__StimAdditiveType::formation_x0020sealer, "formation sealer" },
	{ (LONG64)witsml14__StimAdditiveType::free_x0020water_x0020control, "free water control" },
	{ (LONG64)witsml14__StimAdditiveType::friction_x0020reducer, "friction reducer" },
	{ (LONG64)witsml14__StimAdditiveType::gas, "gas" },
	{ (LONG64)witsml14__StimAdditiveType::gas_x0020migration_x0020control, "gas migration control" },
	{ (LONG64)witsml14__StimAdditiveType::gel_x0020stabilizer, "gel stabilizer" },
	{ (LONG64)witsml14__StimAdditiveType::gelling_x0020agent, "gelling agent" },
	{ (LONG64)witsml14__StimAdditiveType::H2S_x0020scavenger, "H2S scavenger" },
	{ (LONG64)witsml14__StimAdditiveType::intensifier, "intensifier" },
	{ (LONG64)witsml14__StimAdditiveType::iron_x0020control, "iron control" },
	{ (LONG64)witsml14__StimAdditiveType::lost_x0020circulation_x0020additive, "lost circulation additive" },
	{ (LONG64)witsml14__StimAdditiveType::low_x0020fluid_x0020loss_x0020control, "low fluid loss control" },
	{ (LONG64)witsml14__StimAdditiveType::lubricant, "lubricant" },
	{ (LONG64)witsml14__StimAdditiveType::misc_x0020additive, "misc additive" },
	{ (LONG64)witsml14__StimAdditiveType::mixing_x0020fluid, "mixing fluid" },
	{ (LONG64)witsml14__StimAdditiveType::mud_x0020removal_x0020additive, "mud removal additive" },
	{ (LONG64)witsml14__StimAdditiveType::mud_x0020thinner, "mud thinner" },
	{ (LONG64)witsml14__StimAdditiveType::mutual_x0020solvent, "mutual solvent" },
	{ (LONG64)witsml14__StimAdditiveType::oxydizer, "oxydizer" },
	{ (LONG64)witsml14__StimAdditiveType::oxygen_x0020scavenger, "oxygen scavenger" },
	{ (LONG64)witsml14__StimAdditiveType::parafin_x0020control, "parafin control" },
	{ (LONG64)witsml14__StimAdditiveType::penetrating_x0020agent, "penetrating agent" },
	{ (LONG64)witsml14__StimAdditiveType::polymer, "polymer" },
	{ (LONG64)witsml14__StimAdditiveType::proppant_x0020stabilizer, "proppant stabilizer" },
	{ (LONG64)witsml14__StimAdditiveType::radioactive_x0020tracer, "radioactive tracer" },
	{ (LONG64)witsml14__StimAdditiveType::raw_x0020acid, "raw acid" },
	{ (LONG64)witsml14__StimAdditiveType::relative_x0020perm_x0020modifier, "relative perm modifier" },
	{ (LONG64)witsml14__StimAdditiveType::retarder, "retarder" },
	{ (LONG64)witsml14__StimAdditiveType::salt, "salt" },
	{ (LONG64)witsml14__StimAdditiveType::sand, "sand" },
	{ (LONG64)witsml14__StimAdditiveType::sand_x0020control_x0020material, "sand control material" },
	{ (LONG64)witsml14__StimAdditiveType::scale_x0020control_x0020additive, "scale control additive" },
	{ (LONG64)witsml14__StimAdditiveType::stabilizer, "stabilizer" },
	{ (LONG64)witsml14__StimAdditiveType::strength_x0020retrogression, "strength retrogression" },
	{ (LONG64)witsml14__StimAdditiveType::sulfide_x0020scavenger, "sulfide scavenger" },
	{ (LONG64)witsml14__StimAdditiveType::surfactant, "surfactant" },
	{ (LONG64)witsml14__StimAdditiveType::suspension_x0020agent, "suspension agent" },
	{ (LONG64)witsml14__StimAdditiveType::tactifier, "tactifier" },
	{ (LONG64)witsml14__StimAdditiveType::viscosifier, "viscosifier" },
	{ (LONG64)witsml14__StimAdditiveType::water_x0020additive, "water additive" },
	{ (LONG64)witsml14__StimAdditiveType::water_x0020management_x0020material, "water management material" },
	{ (LONG64)witsml14__StimAdditiveType::pH_x0020control, "pH control" },
	{ (LONG64)witsml14__StimAdditiveType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StimAdditiveType2s(struct soap *soap, witsml14__StimAdditiveType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StimAdditiveType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StimAdditiveType(struct soap *soap, const char *tag, int id, const witsml14__StimAdditiveType *a, const char *type)
{
	if (!type)
		type = "witsml14:StimAdditiveType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType), type) || soap_send(soap, soap_witsml14__StimAdditiveType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StimAdditiveType(struct soap *soap, const char *s, witsml14__StimAdditiveType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StimAdditiveType, s);
	if (map)
		*a = (witsml14__StimAdditiveType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StimAdditiveType * SOAP_FMAC4 soap_in_witsml14__StimAdditiveType(struct soap *soap, const char *tag, witsml14__StimAdditiveType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StimAdditiveType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType, sizeof(witsml14__StimAdditiveType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StimAdditiveType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StimAdditiveType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType, SOAP_TYPE_gsoap_witsml1_4_witsml14__StimAdditiveType, sizeof(witsml14__StimAdditiveType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StimAdditiveType * SOAP_FMAC4 soap_new_witsml14__StimAdditiveType(struct soap *soap, int n)
{
	witsml14__StimAdditiveType *a = static_cast<witsml14__StimAdditiveType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StimAdditiveType)));
	for (witsml14__StimAdditiveType *p = a; p && n--; ++p)
		soap_default_witsml14__StimAdditiveType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StimAdditiveType(struct soap *soap, const witsml14__StimAdditiveType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StimAdditiveType(soap, tag ? tag : "witsml14:StimAdditiveType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StimAdditiveType * SOAP_FMAC4 soap_get_witsml14__StimAdditiveType(struct soap *soap, witsml14__StimAdditiveType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StimAdditiveType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StateDetailActivity[] =
{	{ (LONG64)witsml14__StateDetailActivity::injury, "injury" },
	{ (LONG64)witsml14__StateDetailActivity::operation_x0020failed, "operation failed" },
	{ (LONG64)witsml14__StateDetailActivity::kick, "kick" },
	{ (LONG64)witsml14__StateDetailActivity::circulation_x0020loss, "circulation loss" },
	{ (LONG64)witsml14__StateDetailActivity::mud_x0020loss, "mud loss" },
	{ (LONG64)witsml14__StateDetailActivity::stuck_x0020equipment, "stuck equipment" },
	{ (LONG64)witsml14__StateDetailActivity::equipment_x0020failure, "equipment failure" },
	{ (LONG64)witsml14__StateDetailActivity::equipment_x0020hang, "equipment hang" },
	{ (LONG64)witsml14__StateDetailActivity::success, "success" },
	{ (LONG64)witsml14__StateDetailActivity::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StateDetailActivity2s(struct soap *soap, witsml14__StateDetailActivity n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StateDetailActivity, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StateDetailActivity(struct soap *soap, const char *tag, int id, const witsml14__StateDetailActivity *a, const char *type)
{
	if (!type)
		type = "witsml14:StateDetailActivity";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity), type) || soap_send(soap, soap_witsml14__StateDetailActivity2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StateDetailActivity(struct soap *soap, const char *s, witsml14__StateDetailActivity *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StateDetailActivity, s);
	if (map)
		*a = (witsml14__StateDetailActivity)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StateDetailActivity * SOAP_FMAC4 soap_in_witsml14__StateDetailActivity(struct soap *soap, const char *tag, witsml14__StateDetailActivity *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StateDetailActivity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity, sizeof(witsml14__StateDetailActivity), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StateDetailActivity(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StateDetailActivity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity, SOAP_TYPE_gsoap_witsml1_4_witsml14__StateDetailActivity, sizeof(witsml14__StateDetailActivity), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StateDetailActivity * SOAP_FMAC4 soap_new_witsml14__StateDetailActivity(struct soap *soap, int n)
{
	witsml14__StateDetailActivity *a = static_cast<witsml14__StateDetailActivity *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StateDetailActivity)));
	for (witsml14__StateDetailActivity *p = a; p && n--; ++p)
		soap_default_witsml14__StateDetailActivity(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StateDetailActivity(struct soap *soap, const witsml14__StateDetailActivity *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StateDetailActivity(soap, tag ? tag : "witsml14:StateDetailActivity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StateDetailActivity * SOAP_FMAC4 soap_get_witsml14__StateDetailActivity(struct soap *soap, witsml14__StateDetailActivity *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StateDetailActivity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ShowSpeed[] =
{	{ (LONG64)witsml14__ShowSpeed::slow, "slow" },
	{ (LONG64)witsml14__ShowSpeed::moderately_x0020fast, "moderately fast" },
	{ (LONG64)witsml14__ShowSpeed::fast, "fast" },
	{ (LONG64)witsml14__ShowSpeed::instantaneous, "instantaneous" },
	{ (LONG64)witsml14__ShowSpeed::none, "none" },
	{ (LONG64)witsml14__ShowSpeed::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ShowSpeed2s(struct soap *soap, witsml14__ShowSpeed n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ShowSpeed, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ShowSpeed(struct soap *soap, const char *tag, int id, const witsml14__ShowSpeed *a, const char *type)
{
	if (!type)
		type = "witsml14:ShowSpeed";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed), type) || soap_send(soap, soap_witsml14__ShowSpeed2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ShowSpeed(struct soap *soap, const char *s, witsml14__ShowSpeed *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ShowSpeed, s);
	if (map)
		*a = (witsml14__ShowSpeed)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ShowSpeed * SOAP_FMAC4 soap_in_witsml14__ShowSpeed(struct soap *soap, const char *tag, witsml14__ShowSpeed *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ShowSpeed*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed, sizeof(witsml14__ShowSpeed), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ShowSpeed(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ShowSpeed *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowSpeed, sizeof(witsml14__ShowSpeed), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ShowSpeed * SOAP_FMAC4 soap_new_witsml14__ShowSpeed(struct soap *soap, int n)
{
	witsml14__ShowSpeed *a = static_cast<witsml14__ShowSpeed *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ShowSpeed)));
	for (witsml14__ShowSpeed *p = a; p && n--; ++p)
		soap_default_witsml14__ShowSpeed(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ShowSpeed(struct soap *soap, const witsml14__ShowSpeed *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ShowSpeed(soap, tag ? tag : "witsml14:ShowSpeed", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ShowSpeed * SOAP_FMAC4 soap_get_witsml14__ShowSpeed(struct soap *soap, witsml14__ShowSpeed *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ShowSpeed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ShowRating[] =
{	{ (LONG64)witsml14__ShowRating::none, "none" },
	{ (LONG64)witsml14__ShowRating::very_x0020poor, "very poor" },
	{ (LONG64)witsml14__ShowRating::poor, "poor" },
	{ (LONG64)witsml14__ShowRating::fair, "fair" },
	{ (LONG64)witsml14__ShowRating::good, "good" },
	{ (LONG64)witsml14__ShowRating::very_x0020good, "very good" },
	{ (LONG64)witsml14__ShowRating::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ShowRating2s(struct soap *soap, witsml14__ShowRating n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ShowRating, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ShowRating(struct soap *soap, const char *tag, int id, const witsml14__ShowRating *a, const char *type)
{
	if (!type)
		type = "witsml14:ShowRating";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating), type) || soap_send(soap, soap_witsml14__ShowRating2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ShowRating(struct soap *soap, const char *s, witsml14__ShowRating *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ShowRating, s);
	if (map)
		*a = (witsml14__ShowRating)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ShowRating * SOAP_FMAC4 soap_in_witsml14__ShowRating(struct soap *soap, const char *tag, witsml14__ShowRating *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ShowRating*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating, sizeof(witsml14__ShowRating), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ShowRating(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ShowRating *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowRating, sizeof(witsml14__ShowRating), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ShowRating * SOAP_FMAC4 soap_new_witsml14__ShowRating(struct soap *soap, int n)
{
	witsml14__ShowRating *a = static_cast<witsml14__ShowRating *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ShowRating)));
	for (witsml14__ShowRating *p = a; p && n--; ++p)
		soap_default_witsml14__ShowRating(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ShowRating(struct soap *soap, const witsml14__ShowRating *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ShowRating(soap, tag ? tag : "witsml14:ShowRating", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ShowRating * SOAP_FMAC4 soap_get_witsml14__ShowRating(struct soap *soap, witsml14__ShowRating *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ShowRating(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ShowLevel[] =
{	{ (LONG64)witsml14__ShowLevel::blooming, "blooming" },
	{ (LONG64)witsml14__ShowLevel::streaming, "streaming" },
	{ (LONG64)witsml14__ShowLevel::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ShowLevel2s(struct soap *soap, witsml14__ShowLevel n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ShowLevel, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ShowLevel(struct soap *soap, const char *tag, int id, const witsml14__ShowLevel *a, const char *type)
{
	if (!type)
		type = "witsml14:ShowLevel";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel), type) || soap_send(soap, soap_witsml14__ShowLevel2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ShowLevel(struct soap *soap, const char *s, witsml14__ShowLevel *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ShowLevel, s);
	if (map)
		*a = (witsml14__ShowLevel)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ShowLevel * SOAP_FMAC4 soap_in_witsml14__ShowLevel(struct soap *soap, const char *tag, witsml14__ShowLevel *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ShowLevel*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel, sizeof(witsml14__ShowLevel), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ShowLevel(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ShowLevel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowLevel, sizeof(witsml14__ShowLevel), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ShowLevel * SOAP_FMAC4 soap_new_witsml14__ShowLevel(struct soap *soap, int n)
{
	witsml14__ShowLevel *a = static_cast<witsml14__ShowLevel *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ShowLevel)));
	for (witsml14__ShowLevel *p = a; p && n--; ++p)
		soap_default_witsml14__ShowLevel(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ShowLevel(struct soap *soap, const witsml14__ShowLevel *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ShowLevel(soap, tag ? tag : "witsml14:ShowLevel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ShowLevel * SOAP_FMAC4 soap_get_witsml14__ShowLevel(struct soap *soap, witsml14__ShowLevel *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ShowLevel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ShowFluorescence[] =
{	{ (LONG64)witsml14__ShowFluorescence::faint, "faint" },
	{ (LONG64)witsml14__ShowFluorescence::bright, "bright" },
	{ (LONG64)witsml14__ShowFluorescence::none, "none" },
	{ (LONG64)witsml14__ShowFluorescence::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ShowFluorescence2s(struct soap *soap, witsml14__ShowFluorescence n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ShowFluorescence, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ShowFluorescence(struct soap *soap, const char *tag, int id, const witsml14__ShowFluorescence *a, const char *type)
{
	if (!type)
		type = "witsml14:ShowFluorescence";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence), type) || soap_send(soap, soap_witsml14__ShowFluorescence2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ShowFluorescence(struct soap *soap, const char *s, witsml14__ShowFluorescence *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ShowFluorescence, s);
	if (map)
		*a = (witsml14__ShowFluorescence)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ShowFluorescence * SOAP_FMAC4 soap_in_witsml14__ShowFluorescence(struct soap *soap, const char *tag, witsml14__ShowFluorescence *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ShowFluorescence*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence, sizeof(witsml14__ShowFluorescence), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ShowFluorescence(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ShowFluorescence *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence, SOAP_TYPE_gsoap_witsml1_4_witsml14__ShowFluorescence, sizeof(witsml14__ShowFluorescence), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ShowFluorescence * SOAP_FMAC4 soap_new_witsml14__ShowFluorescence(struct soap *soap, int n)
{
	witsml14__ShowFluorescence *a = static_cast<witsml14__ShowFluorescence *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ShowFluorescence)));
	for (witsml14__ShowFluorescence *p = a; p && n--; ++p)
		soap_default_witsml14__ShowFluorescence(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ShowFluorescence(struct soap *soap, const witsml14__ShowFluorescence *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ShowFluorescence(soap, tag ? tag : "witsml14:ShowFluorescence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ShowFluorescence * SOAP_FMAC4 soap_get_witsml14__ShowFluorescence(struct soap *soap, witsml14__ShowFluorescence *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ShowFluorescence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ScrType[] =
{	{ (LONG64)witsml14__ScrType::string_x0020annulus, "string annulus" },
	{ (LONG64)witsml14__ScrType::string_x0020kill_x0020line, "string kill line" },
	{ (LONG64)witsml14__ScrType::string_x0020choke_x0020line, "string choke line" },
	{ (LONG64)witsml14__ScrType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ScrType2s(struct soap *soap, witsml14__ScrType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ScrType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ScrType(struct soap *soap, const char *tag, int id, const witsml14__ScrType *a, const char *type)
{
	if (!type)
		type = "witsml14:ScrType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType), type) || soap_send(soap, soap_witsml14__ScrType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ScrType(struct soap *soap, const char *s, witsml14__ScrType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ScrType, s);
	if (map)
		*a = (witsml14__ScrType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ScrType * SOAP_FMAC4 soap_in_witsml14__ScrType(struct soap *soap, const char *tag, witsml14__ScrType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ScrType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType, sizeof(witsml14__ScrType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ScrType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ScrType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType, SOAP_TYPE_gsoap_witsml1_4_witsml14__ScrType, sizeof(witsml14__ScrType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ScrType * SOAP_FMAC4 soap_new_witsml14__ScrType(struct soap *soap, int n)
{
	witsml14__ScrType *a = static_cast<witsml14__ScrType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ScrType)));
	for (witsml14__ScrType *p = a; p && n--; ++p)
		soap_default_witsml14__ScrType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ScrType(struct soap *soap, const witsml14__ScrType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ScrType(soap, tag ? tag : "witsml14:ScrType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ScrType * SOAP_FMAC4 soap_get_witsml14__ScrType(struct soap *soap, witsml14__ScrType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ScrType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RiskType[] =
{	{ (LONG64)witsml14__RiskType::risk, "risk" },
	{ (LONG64)witsml14__RiskType::event, "event" },
	{ (LONG64)witsml14__RiskType::near_x0020miss, "near miss" },
	{ (LONG64)witsml14__RiskType::best_x0020practice, "best practice" },
	{ (LONG64)witsml14__RiskType::lessons_x0020learned, "lessons learned" },
	{ (LONG64)witsml14__RiskType::other, "other" },
	{ (LONG64)witsml14__RiskType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RiskType2s(struct soap *soap, witsml14__RiskType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RiskType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RiskType(struct soap *soap, const char *tag, int id, const witsml14__RiskType *a, const char *type)
{
	if (!type)
		type = "witsml14:RiskType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType), type) || soap_send(soap, soap_witsml14__RiskType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RiskType(struct soap *soap, const char *s, witsml14__RiskType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RiskType, s);
	if (map)
		*a = (witsml14__RiskType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RiskType * SOAP_FMAC4 soap_in_witsml14__RiskType(struct soap *soap, const char *tag, witsml14__RiskType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RiskType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType, sizeof(witsml14__RiskType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RiskType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RiskType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskType, sizeof(witsml14__RiskType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RiskType * SOAP_FMAC4 soap_new_witsml14__RiskType(struct soap *soap, int n)
{
	witsml14__RiskType *a = static_cast<witsml14__RiskType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RiskType)));
	for (witsml14__RiskType *p = a; p && n--; ++p)
		soap_default_witsml14__RiskType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RiskType(struct soap *soap, const witsml14__RiskType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RiskType(soap, tag ? tag : "witsml14:RiskType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RiskType * SOAP_FMAC4 soap_get_witsml14__RiskType(struct soap *soap, witsml14__RiskType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RiskType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RiskSubCategory[] =
{	{ (LONG64)witsml14__RiskSubCategory::gas_x0020kick, "gas kick" },
	{ (LONG64)witsml14__RiskSubCategory::shallow_x0020water_x0020influx, "shallow water influx" },
	{ (LONG64)witsml14__RiskSubCategory::other_x0020influx_x0020or_x0020kicks, "other influx or kicks" },
	{ (LONG64)witsml14__RiskSubCategory::loss_x0020circulation, "loss circulation" },
	{ (LONG64)witsml14__RiskSubCategory::poor_x0020hole_x0020cleaning, "poor hole cleaning" },
	{ (LONG64)witsml14__RiskSubCategory::good_x0020hole_x0020cleaning_x0020at_x0020high_x0020ROP, "good hole cleaning at high ROP" },
	{ (LONG64)witsml14__RiskSubCategory::high_x0020mud_x0020weight, "high mud weight" },
	{ (LONG64)witsml14__RiskSubCategory::special_x0020additives_x0020needed, "special additives needed" },
	{ (LONG64)witsml14__RiskSubCategory::gumbo_x0020problems, "gumbo problems" },
	{ (LONG64)witsml14__RiskSubCategory::high_x0020ECD_x0020__x0020rheology_x0020related, "high ECD - rheology related" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020circulation, "excessive circulation" },
	{ (LONG64)witsml14__RiskSubCategory::performing_x0020a_x0020kill, "performing a kill" },
	{ (LONG64)witsml14__RiskSubCategory::mud_x0020weight_x0020change, "mud weight change" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020pipe_x0020cement_x0020scaling, "excessive pipe cement scaling" },
	{ (LONG64)witsml14__RiskSubCategory::pit_x0020gain_x0020or_x0020loss, "pit gain or loss" },
	{ (LONG64)witsml14__RiskSubCategory::mud_x0020stability_x0020problems, "mud stability problems" },
	{ (LONG64)witsml14__RiskSubCategory::shallow_x0020gas_x0020flow, "shallow gas flow" },
	{ (LONG64)witsml14__RiskSubCategory::twist_x0020off, "twist off" },
	{ (LONG64)witsml14__RiskSubCategory::stuck_x0020pipe, "stuck pipe" },
	{ (LONG64)witsml14__RiskSubCategory::wireline_x0020stuck_x0020in_x0020hole, "wireline stuck in hole" },
	{ (LONG64)witsml14__RiskSubCategory::stick_x0020and_x0020slip, "stick and slip" },
	{ (LONG64)witsml14__RiskSubCategory::vibration_x0020__x0020axial, "vibration - axial" },
	{ (LONG64)witsml14__RiskSubCategory::vibration_x0020__x0020torsional, "vibration - torsional" },
	{ (LONG64)witsml14__RiskSubCategory::vibration_x0020__x0020transverse, "vibration - transverse" },
	{ (LONG64)witsml14__RiskSubCategory::vibration_x0020unknown_x0020or_x0020rough_x0020drilling, "vibration unknown or rough drilling" },
	{ (LONG64)witsml14__RiskSubCategory::uneven_x0020wear_x0020of_x0020BHA, "uneven wear of BHA" },
	{ (LONG64)witsml14__RiskSubCategory::uneven_x0020wear_x0020of_x0020drillstring, "uneven wear of drillstring" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020torque, "excessive torque" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020drag, "excessive drag" },
	{ (LONG64)witsml14__RiskSubCategory::reaming_x0020greater_x0020than_x00202_x0020hours, "reaming greater than 2 hours" },
	{ (LONG64)witsml14__RiskSubCategory::washouts, "washouts" },
	{ (LONG64)witsml14__RiskSubCategory::tight_x0020hole_x0020or_x0020overPull, "tight hole or overPull" },
	{ (LONG64)witsml14__RiskSubCategory::failed_x0020inspections_x0020or_x0020fatigue_x0020wear, "failed inspections or fatigue wear" },
	{ (LONG64)witsml14__RiskSubCategory::mechanical, "mechanical" },
	{ (LONG64)witsml14__RiskSubCategory::drilling_x0020greater_x0020than_x00201000_x0020feet_x002fday, "drilling greater than 1000 feet/day" },
	{ (LONG64)witsml14__RiskSubCategory::drilling_x0020greater_x0020than_x00202000_x0020feet_x002fday, "drilling greater than 2000 feet/day" },
	{ (LONG64)witsml14__RiskSubCategory::drilling_x0020less_x0020than_x002020_x0020feet_x002fday, "drilling less than 20 feet/day" },
	{ (LONG64)witsml14__RiskSubCategory::trips_x0020greater_x0020than_x002024_x0020hours, "trips greater than 24 hours" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020time_x0020for_x0020BHA_x0020makeup, "excessive time for BHA makeup" },
	{ (LONG64)witsml14__RiskSubCategory::waiting_x0020on_x0020decisions, "waiting on decisions" },
	{ (LONG64)witsml14__RiskSubCategory::waiting_x0020on_x0020weather, "waiting on weather" },
	{ (LONG64)witsml14__RiskSubCategory::waiting_x0020on_x0020tools, "waiting on tools" },
	{ (LONG64)witsml14__RiskSubCategory::sloughing_x0020or_x0020packoffs, "sloughing or packoffs" },
	{ (LONG64)witsml14__RiskSubCategory::ballooning, "ballooning" },
	{ (LONG64)witsml14__RiskSubCategory::fracture_x0020problems, "fracture problems" },
	{ (LONG64)witsml14__RiskSubCategory::unstable_x0020zones, "unstable zones" },
	{ (LONG64)witsml14__RiskSubCategory::formation_x0020integrity_x0020test, "formation integrity test" },
	{ (LONG64)witsml14__RiskSubCategory::leak_off_x0020test, "leak-off test" },
	{ (LONG64)witsml14__RiskSubCategory::tectonics, "tectonics" },
	{ (LONG64)witsml14__RiskSubCategory::pore_x0020pressure, "pore pressure" },
	{ (LONG64)witsml14__RiskSubCategory::breakouts, "breakouts" },
	{ (LONG64)witsml14__RiskSubCategory::bed_x0020parallel, "bed parallel" },
	{ (LONG64)witsml14__RiskSubCategory::wellbore_x0020stability, "wellbore stability" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020doglegs, "excessive doglegs" },
	{ (LONG64)witsml14__RiskSubCategory::sidetrack, "sidetrack" },
	{ (LONG64)witsml14__RiskSubCategory::BHA_x0020change_x0020for_x0020directional, "BHA change for directional" },
	{ (LONG64)witsml14__RiskSubCategory::wrong_x0020total_x0020flow_x0020area, "wrong total flow area" },
	{ (LONG64)witsml14__RiskSubCategory::well_x0020collision_x0020__x0020actual, "well collision - actual" },
	{ (LONG64)witsml14__RiskSubCategory::well_x0020collision_x0020__x0020technical, "well collision - technical" },
	{ (LONG64)witsml14__RiskSubCategory::geosteering, "geosteering" },
	{ (LONG64)witsml14__RiskSubCategory::abnormal_x0020tendency_x0020changes, "abnormal tendency changes" },
	{ (LONG64)witsml14__RiskSubCategory::resurveying, "resurveying" },
	{ (LONG64)witsml14__RiskSubCategory::in_field_x0020referencing_x0020_x0028IFR_x0029_x0020actions, "in-field referencing (IFR) actions" },
	{ (LONG64)witsml14__RiskSubCategory::bit_x0020or_x0020BHA_x0020performance, "bit or BHA performance" },
	{ (LONG64)witsml14__RiskSubCategory::drilling_x0020optimization, "drilling optimization" },
	{ (LONG64)witsml14__RiskSubCategory::bit_x0020balling, "bit balling" },
	{ (LONG64)witsml14__RiskSubCategory::lost_x0020cones_x0020or_x0020broken_x0020cutters, "lost cones or broken cutters" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020bit_x0020wear_x0020or_x0020gauge, "excessive bit wear or gauge" },
	{ (LONG64)witsml14__RiskSubCategory::low_x0020rate_x0020of_x0020bit_x0020penetration, "low rate of bit penetration" },
	{ (LONG64)witsml14__RiskSubCategory::high_x0020rate_x0020of_x0020bit_x0020penetration, "high rate of bit penetration" },
	{ (LONG64)witsml14__RiskSubCategory::downhole_x0020tool, "downhole tool" },
	{ (LONG64)witsml14__RiskSubCategory::surface_x0020system, "surface system" },
	{ (LONG64)witsml14__RiskSubCategory::motor_x0020or_x0020rotary_x0020steerable_x0020system_x0020failure, "motor or rotary steerable system failure" },
	{ (LONG64)witsml14__RiskSubCategory::topdrive_x0020failure, "topdrive failure" },
	{ (LONG64)witsml14__RiskSubCategory::hoisting_x0020equipment_x0020failure, "hoisting equipment failure" },
	{ (LONG64)witsml14__RiskSubCategory::circulating_x0020equipment_x0020failure, "circulating equipment failure" },
	{ (LONG64)witsml14__RiskSubCategory::electrical_x0020system_x0020failure, "electrical system failure" },
	{ (LONG64)witsml14__RiskSubCategory::blow_x0020out_x0020preventer_x0020events, "blow out preventer events" },
	{ (LONG64)witsml14__RiskSubCategory::surface_x0020instrumentation_x0020problems, "surface instrumentation problems" },
	{ (LONG64)witsml14__RiskSubCategory::rig_x0020communications, "rig communications" },
	{ (LONG64)witsml14__RiskSubCategory::completion_x0020equipment_x0020failure, "completion equipment failure" },
	{ (LONG64)witsml14__RiskSubCategory::miscellaneous_x0020rig_x0020equipment, "miscellaneous rig equipment" },
	{ (LONG64)witsml14__RiskSubCategory::tool_x0020or_x0020equipment_x0020failure, "tool or equipment failure" },
	{ (LONG64)witsml14__RiskSubCategory::squeeze_x0020jobs, "squeeze jobs" },
	{ (LONG64)witsml14__RiskSubCategory::casing_x0020surge_x0020losses, "casing surge losses" },
	{ (LONG64)witsml14__RiskSubCategory::stuck_x0020casing_x0020or_x0020completion, "stuck casing or completion" },
	{ (LONG64)witsml14__RiskSubCategory::shoe_x0020failures, "shoe failures" },
	{ (LONG64)witsml14__RiskSubCategory::early_x0020cement_x0020setup, "early cement setup" },
	{ (LONG64)witsml14__RiskSubCategory::casing_x0020collapse, "casing collapse" },
	{ (LONG64)witsml14__RiskSubCategory::milling, "milling" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020casing_x0020wear_x0020or_x0020cuttings, "excessive casing wear or cuttings" },
	{ (LONG64)witsml14__RiskSubCategory::excessive_x0020formation_x0020damage_x0020or_x0020skin, "excessive formation damage or skin" },
	{ (LONG64)witsml14__RiskSubCategory::casing_x0020rotation_x0020or_x0020reciprocation_x0020rqd, "casing rotation or reciprocation rqd" },
	{ (LONG64)witsml14__RiskSubCategory::broaching, "broaching" },
	{ (LONG64)witsml14__RiskSubCategory::completion_x0020or_x0020casing, "completion or casing" },
	{ (LONG64)witsml14__RiskSubCategory::stratigraphy, "stratigraphy" },
	{ (LONG64)witsml14__RiskSubCategory::fishing, "fishing" },
	{ (LONG64)witsml14__RiskSubCategory::junk_x0020in_x0020hole, "junk in hole" },
	{ (LONG64)witsml14__RiskSubCategory::delay_x0020due_x0020to_x0020political_x0020unrest, "delay due to political unrest" },
	{ (LONG64)witsml14__RiskSubCategory::rig_x0020move, "rig move" },
	{ (LONG64)witsml14__RiskSubCategory::gas_x0020hydrates, "gas hydrates" },
	{ (LONG64)witsml14__RiskSubCategory::pending_x0020analysis, "pending analysis" },
	{ (LONG64)witsml14__RiskSubCategory::riser_x0020disconnect, "riser disconnect" },
	{ (LONG64)witsml14__RiskSubCategory::other, "other" },
	{ (LONG64)witsml14__RiskSubCategory::personnel, "personnel" },
	{ (LONG64)witsml14__RiskSubCategory::environmental, "environmental" },
	{ (LONG64)witsml14__RiskSubCategory::automotive, "automotive" },
	{ (LONG64)witsml14__RiskSubCategory::asset, "asset" },
	{ (LONG64)witsml14__RiskSubCategory::information, "information" },
	{ (LONG64)witsml14__RiskSubCategory::time, "time" },
	{ (LONG64)witsml14__RiskSubCategory::HSE, "HSE" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RiskSubCategory2s(struct soap *soap, witsml14__RiskSubCategory n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RiskSubCategory, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RiskSubCategory(struct soap *soap, const char *tag, int id, const witsml14__RiskSubCategory *a, const char *type)
{
	if (!type)
		type = "witsml14:RiskSubCategory";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory), type) || soap_send(soap, soap_witsml14__RiskSubCategory2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RiskSubCategory(struct soap *soap, const char *s, witsml14__RiskSubCategory *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RiskSubCategory, s);
	if (map)
		*a = (witsml14__RiskSubCategory)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RiskSubCategory * SOAP_FMAC4 soap_in_witsml14__RiskSubCategory(struct soap *soap, const char *tag, witsml14__RiskSubCategory *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RiskSubCategory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory, sizeof(witsml14__RiskSubCategory), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RiskSubCategory(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RiskSubCategory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskSubCategory, sizeof(witsml14__RiskSubCategory), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RiskSubCategory * SOAP_FMAC4 soap_new_witsml14__RiskSubCategory(struct soap *soap, int n)
{
	witsml14__RiskSubCategory *a = static_cast<witsml14__RiskSubCategory *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RiskSubCategory)));
	for (witsml14__RiskSubCategory *p = a; p && n--; ++p)
		soap_default_witsml14__RiskSubCategory(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RiskSubCategory(struct soap *soap, const witsml14__RiskSubCategory *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RiskSubCategory(soap, tag ? tag : "witsml14:RiskSubCategory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RiskSubCategory * SOAP_FMAC4 soap_get_witsml14__RiskSubCategory(struct soap *soap, witsml14__RiskSubCategory *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RiskSubCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RiskCategory[] =
{	{ (LONG64)witsml14__RiskCategory::hydraulics, "hydraulics" },
	{ (LONG64)witsml14__RiskCategory::mechanical, "mechanical" },
	{ (LONG64)witsml14__RiskCategory::time_x0020related, "time related" },
	{ (LONG64)witsml14__RiskCategory::wellbore_x0020stability, "wellbore stability" },
	{ (LONG64)witsml14__RiskCategory::directional_x0020drilling, "directional drilling" },
	{ (LONG64)witsml14__RiskCategory::bit, "bit" },
	{ (LONG64)witsml14__RiskCategory::equipment_x0020failure, "equipment failure" },
	{ (LONG64)witsml14__RiskCategory::completion, "completion" },
	{ (LONG64)witsml14__RiskCategory::casing, "casing" },
	{ (LONG64)witsml14__RiskCategory::other, "other" },
	{ (LONG64)witsml14__RiskCategory::HSE, "HSE" },
	{ (LONG64)witsml14__RiskCategory::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RiskCategory2s(struct soap *soap, witsml14__RiskCategory n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RiskCategory, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RiskCategory(struct soap *soap, const char *tag, int id, const witsml14__RiskCategory *a, const char *type)
{
	if (!type)
		type = "witsml14:RiskCategory";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory), type) || soap_send(soap, soap_witsml14__RiskCategory2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RiskCategory(struct soap *soap, const char *s, witsml14__RiskCategory *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RiskCategory, s);
	if (map)
		*a = (witsml14__RiskCategory)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RiskCategory * SOAP_FMAC4 soap_in_witsml14__RiskCategory(struct soap *soap, const char *tag, witsml14__RiskCategory *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RiskCategory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory, sizeof(witsml14__RiskCategory), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RiskCategory(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RiskCategory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskCategory, sizeof(witsml14__RiskCategory), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RiskCategory * SOAP_FMAC4 soap_new_witsml14__RiskCategory(struct soap *soap, int n)
{
	witsml14__RiskCategory *a = static_cast<witsml14__RiskCategory *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RiskCategory)));
	for (witsml14__RiskCategory *p = a; p && n--; ++p)
		soap_default_witsml14__RiskCategory(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RiskCategory(struct soap *soap, const witsml14__RiskCategory *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RiskCategory(soap, tag ? tag : "witsml14:RiskCategory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RiskCategory * SOAP_FMAC4 soap_get_witsml14__RiskCategory(struct soap *soap, witsml14__RiskCategory *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RiskCategory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RiskAffectedPersonnel[] =
{	{ (LONG64)witsml14__RiskAffectedPersonnel::cementer, "cementer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::company_x0020man, "company man" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::contractor, "contractor" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::directional_x0020driller, "directional driller" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::driller, "driller" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::drilling_x0020engineer, "drilling engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::drilling_x0020superintendent, "drilling superintendent" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::drilling_x0020team, "drilling team" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::facility_x0020engineer, "facility engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::field_x0020service_x0020manager, "field service manager" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::foreman, "foreman" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::general_x0020service_x0020supervisor, "general service supervisor" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::geologist, "geologist" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::member, "member" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::mud_x0020engineer, "mud engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::mud_x0020logger, "mud logger" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::MWD_x0020or_x0020LWD_x0020engineer, "MWD or LWD engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::perform_x0020engineer, "perform engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::petrophysicist, "petrophysicist" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::production_x0020engineer, "production engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::remotely_x0020operated_x0020vehicle_x0020engineer, "remotely operated vehicle engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::safety_x0020manger, "safety manger" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::sales_x0020engineer, "sales engineer" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::service_x0020supervisor, "service supervisor" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::technical_x0020support, "technical support" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::tool_x0020pusher, "tool pusher" },
	{ (LONG64)witsml14__RiskAffectedPersonnel::wireline_x0020engineer, "wireline engineer" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RiskAffectedPersonnel2s(struct soap *soap, witsml14__RiskAffectedPersonnel n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RiskAffectedPersonnel, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RiskAffectedPersonnel(struct soap *soap, const char *tag, int id, const witsml14__RiskAffectedPersonnel *a, const char *type)
{
	if (!type)
		type = "witsml14:RiskAffectedPersonnel";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel), type) || soap_send(soap, soap_witsml14__RiskAffectedPersonnel2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RiskAffectedPersonnel(struct soap *soap, const char *s, witsml14__RiskAffectedPersonnel *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RiskAffectedPersonnel, s);
	if (map)
		*a = (witsml14__RiskAffectedPersonnel)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RiskAffectedPersonnel * SOAP_FMAC4 soap_in_witsml14__RiskAffectedPersonnel(struct soap *soap, const char *tag, witsml14__RiskAffectedPersonnel *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RiskAffectedPersonnel*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel, sizeof(witsml14__RiskAffectedPersonnel), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RiskAffectedPersonnel(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RiskAffectedPersonnel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel, SOAP_TYPE_gsoap_witsml1_4_witsml14__RiskAffectedPersonnel, sizeof(witsml14__RiskAffectedPersonnel), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RiskAffectedPersonnel * SOAP_FMAC4 soap_new_witsml14__RiskAffectedPersonnel(struct soap *soap, int n)
{
	witsml14__RiskAffectedPersonnel *a = static_cast<witsml14__RiskAffectedPersonnel *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RiskAffectedPersonnel)));
	for (witsml14__RiskAffectedPersonnel *p = a; p && n--; ++p)
		soap_default_witsml14__RiskAffectedPersonnel(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RiskAffectedPersonnel(struct soap *soap, const witsml14__RiskAffectedPersonnel *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RiskAffectedPersonnel(soap, tag ? tag : "witsml14:RiskAffectedPersonnel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RiskAffectedPersonnel * SOAP_FMAC4 soap_get_witsml14__RiskAffectedPersonnel(struct soap *soap, witsml14__RiskAffectedPersonnel *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RiskAffectedPersonnel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RigType[] =
{	{ (LONG64)witsml14__RigType::barge, "barge" },
	{ (LONG64)witsml14__RigType::coiled_x0020tubing, "coiled tubing" },
	{ (LONG64)witsml14__RigType::floater, "floater" },
	{ (LONG64)witsml14__RigType::jackup, "jackup" },
	{ (LONG64)witsml14__RigType::land, "land" },
	{ (LONG64)witsml14__RigType::platform, "platform" },
	{ (LONG64)witsml14__RigType::semi_submersible, "semi-submersible" },
	{ (LONG64)witsml14__RigType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RigType2s(struct soap *soap, witsml14__RigType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RigType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RigType(struct soap *soap, const char *tag, int id, const witsml14__RigType *a, const char *type)
{
	if (!type)
		type = "witsml14:RigType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType), type) || soap_send(soap, soap_witsml14__RigType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RigType(struct soap *soap, const char *s, witsml14__RigType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RigType, s);
	if (map)
		*a = (witsml14__RigType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RigType * SOAP_FMAC4 soap_in_witsml14__RigType(struct soap *soap, const char *tag, witsml14__RigType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RigType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType, sizeof(witsml14__RigType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RigType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RigType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType, SOAP_TYPE_gsoap_witsml1_4_witsml14__RigType, sizeof(witsml14__RigType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RigType * SOAP_FMAC4 soap_new_witsml14__RigType(struct soap *soap, int n)
{
	witsml14__RigType *a = static_cast<witsml14__RigType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RigType)));
	for (witsml14__RigType *p = a; p && n--; ++p)
		soap_default_witsml14__RigType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RigType(struct soap *soap, const witsml14__RigType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RigType(soap, tag ? tag : "witsml14:RigType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RigType * SOAP_FMAC4 soap_get_witsml14__RigType(struct soap *soap, witsml14__RigType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RigType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ReadingKind[] =
{	{ (LONG64)witsml14__ReadingKind::measured, "measured" },
	{ (LONG64)witsml14__ReadingKind::estimated, "estimated" },
	{ (LONG64)witsml14__ReadingKind::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ReadingKind2s(struct soap *soap, witsml14__ReadingKind n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ReadingKind, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ReadingKind(struct soap *soap, const char *tag, int id, const witsml14__ReadingKind *a, const char *type)
{
	if (!type)
		type = "witsml14:ReadingKind";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind), type) || soap_send(soap, soap_witsml14__ReadingKind2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ReadingKind(struct soap *soap, const char *s, witsml14__ReadingKind *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ReadingKind, s);
	if (map)
		*a = (witsml14__ReadingKind)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ReadingKind * SOAP_FMAC4 soap_in_witsml14__ReadingKind(struct soap *soap, const char *tag, witsml14__ReadingKind *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ReadingKind*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind, sizeof(witsml14__ReadingKind), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ReadingKind(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ReadingKind *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind, SOAP_TYPE_gsoap_witsml1_4_witsml14__ReadingKind, sizeof(witsml14__ReadingKind), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ReadingKind * SOAP_FMAC4 soap_new_witsml14__ReadingKind(struct soap *soap, int n)
{
	witsml14__ReadingKind *a = static_cast<witsml14__ReadingKind *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ReadingKind)));
	for (witsml14__ReadingKind *p = a; p && n--; ++p)
		soap_default_witsml14__ReadingKind(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ReadingKind(struct soap *soap, const witsml14__ReadingKind *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ReadingKind(soap, tag ? tag : "witsml14:ReadingKind", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ReadingKind * SOAP_FMAC4 soap_get_witsml14__ReadingKind(struct soap *soap, witsml14__ReadingKind *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ReadingKind(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PumpOpType[] =
{	{ (LONG64)witsml14__PumpOpType::drilling, "drilling" },
	{ (LONG64)witsml14__PumpOpType::reaming, "reaming" },
	{ (LONG64)witsml14__PumpOpType::circulating, "circulating" },
	{ (LONG64)witsml14__PumpOpType::slow_x0020pump, "slow pump" },
	{ (LONG64)witsml14__PumpOpType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PumpOpType2s(struct soap *soap, witsml14__PumpOpType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PumpOpType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PumpOpType(struct soap *soap, const char *tag, int id, const witsml14__PumpOpType *a, const char *type)
{
	if (!type)
		type = "witsml14:PumpOpType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType), type) || soap_send(soap, soap_witsml14__PumpOpType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PumpOpType(struct soap *soap, const char *s, witsml14__PumpOpType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PumpOpType, s);
	if (map)
		*a = (witsml14__PumpOpType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PumpOpType * SOAP_FMAC4 soap_in_witsml14__PumpOpType(struct soap *soap, const char *tag, witsml14__PumpOpType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PumpOpType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType, sizeof(witsml14__PumpOpType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PumpOpType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PumpOpType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpOpType, sizeof(witsml14__PumpOpType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PumpOpType * SOAP_FMAC4 soap_new_witsml14__PumpOpType(struct soap *soap, int n)
{
	witsml14__PumpOpType *a = static_cast<witsml14__PumpOpType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PumpOpType)));
	for (witsml14__PumpOpType *p = a; p && n--; ++p)
		soap_default_witsml14__PumpOpType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PumpOpType(struct soap *soap, const witsml14__PumpOpType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PumpOpType(soap, tag ? tag : "witsml14:PumpOpType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PumpOpType * SOAP_FMAC4 soap_get_witsml14__PumpOpType(struct soap *soap, witsml14__PumpOpType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PumpOpType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PumpType[] =
{	{ (LONG64)witsml14__PumpType::centrifugal, "centrifugal" },
	{ (LONG64)witsml14__PumpType::duplex, "duplex" },
	{ (LONG64)witsml14__PumpType::triplex, "triplex" },
	{ (LONG64)witsml14__PumpType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PumpType2s(struct soap *soap, witsml14__PumpType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PumpType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PumpType(struct soap *soap, const char *tag, int id, const witsml14__PumpType *a, const char *type)
{
	if (!type)
		type = "witsml14:PumpType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType), type) || soap_send(soap, soap_witsml14__PumpType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PumpType(struct soap *soap, const char *s, witsml14__PumpType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PumpType, s);
	if (map)
		*a = (witsml14__PumpType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PumpType * SOAP_FMAC4 soap_in_witsml14__PumpType(struct soap *soap, const char *tag, witsml14__PumpType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PumpType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType, sizeof(witsml14__PumpType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PumpType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PumpType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType, SOAP_TYPE_gsoap_witsml1_4_witsml14__PumpType, sizeof(witsml14__PumpType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PumpType * SOAP_FMAC4 soap_new_witsml14__PumpType(struct soap *soap, int n)
{
	witsml14__PumpType *a = static_cast<witsml14__PumpType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PumpType)));
	for (witsml14__PumpType *p = a; p && n--; ++p)
		soap_default_witsml14__PumpType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PumpType(struct soap *soap, const witsml14__PumpType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PumpType(soap, tag ? tag : "witsml14:PumpType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PumpType * SOAP_FMAC4 soap_get_witsml14__PumpType(struct soap *soap, witsml14__PumpType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PumpType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PrincipalMeridian[] =
{	{ (LONG64)witsml14__PrincipalMeridian::_1st_x0020Principal_x0020Meridian, "1st Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::_2nd_x0020Principal_x0020Meridian, "2nd Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::_3rd_x0020Principal_x0020Meridian, "3rd Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::_4th_x0020Principal_x0020Meridian, "4th Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::_5th_x0020Principal_x0020Meridian, "5th Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::_6th_x0020Principal_x0020Meridian, "6th Principal Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Black_x0020Hills_x0020Meridian, "Black Hills Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Boise_x0020Meridian, "Boise Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Choctaw_x0020Meridian, "Choctaw Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Chickasaw_x0020Meridian, "Chickasaw Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Cimarron_x0020Meridian, "Cimarron Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Copper_x0020River_x0020Meridian, "Copper River Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Fairbanks_x0020Meridian, "Fairbanks Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Gila_x0020and_x0020Salt_x0020River_x0020Meridian, "Gila and Salt River Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Humboldt_x0020Meridian, "Humboldt Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Huntsville_x0020Meridian, "Huntsville Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Indian_x0020Meridian, "Indian Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Kateel_x0020River_x0020Meridian, "Kateel River Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Lousiana_x0020Meridian, "Lousiana Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Michigan_x0020Meridian, "Michigan Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Mount_x0020Diablo_x0020Meridian, "Mount Diablo Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::New_x0020Mexico_x0020Meridian, "New Mexico Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Saint_x0020Stephens_x0020Meridian, "Saint Stephens Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Saint_x0020Helena_x0020Meridian, "Saint Helena Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Salt_x0020Lake_x0020Meridian, "Salt Lake Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::San_x0020Bernardo_x0020Meridian, "San Bernardo Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Seward_x0020Meridian, "Seward Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Tallahassee_x0020Meridian, "Tallahassee Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Uintah_x0020Meridian, "Uintah Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Umiat_x0020Meridian, "Umiat Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Ute_x0020Meridian, "Ute Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Washington_x0020Meridian, "Washington Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Williamette_x0020Meridian, "Williamette Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::Wind_x0020River_x0020Meridian, "Wind River Meridian" },
	{ (LONG64)witsml14__PrincipalMeridian::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PrincipalMeridian2s(struct soap *soap, witsml14__PrincipalMeridian n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PrincipalMeridian, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PrincipalMeridian(struct soap *soap, const char *tag, int id, const witsml14__PrincipalMeridian *a, const char *type)
{
	if (!type)
		type = "witsml14:PrincipalMeridian";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian), type) || soap_send(soap, soap_witsml14__PrincipalMeridian2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PrincipalMeridian(struct soap *soap, const char *s, witsml14__PrincipalMeridian *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PrincipalMeridian, s);
	if (map)
		*a = (witsml14__PrincipalMeridian)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PrincipalMeridian * SOAP_FMAC4 soap_in_witsml14__PrincipalMeridian(struct soap *soap, const char *tag, witsml14__PrincipalMeridian *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PrincipalMeridian*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian, sizeof(witsml14__PrincipalMeridian), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PrincipalMeridian(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PrincipalMeridian *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian, sizeof(witsml14__PrincipalMeridian), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PrincipalMeridian * SOAP_FMAC4 soap_new_witsml14__PrincipalMeridian(struct soap *soap, int n)
{
	witsml14__PrincipalMeridian *a = static_cast<witsml14__PrincipalMeridian *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PrincipalMeridian)));
	for (witsml14__PrincipalMeridian *p = a; p && n--; ++p)
		soap_default_witsml14__PrincipalMeridian(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PrincipalMeridian(struct soap *soap, const witsml14__PrincipalMeridian *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PrincipalMeridian(soap, tag ? tag : "witsml14:PrincipalMeridian", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PrincipalMeridian * SOAP_FMAC4 soap_get_witsml14__PrincipalMeridian(struct soap *soap, witsml14__PrincipalMeridian *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PrincipalMeridian(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PresTestType[] =
{	{ (LONG64)witsml14__PresTestType::leak_x0020off_x0020test, "leak off test" },
	{ (LONG64)witsml14__PresTestType::formation_x0020integrity_x0020test, "formation integrity test" },
	{ (LONG64)witsml14__PresTestType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PresTestType2s(struct soap *soap, witsml14__PresTestType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PresTestType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PresTestType(struct soap *soap, const char *tag, int id, const witsml14__PresTestType *a, const char *type)
{
	if (!type)
		type = "witsml14:PresTestType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType), type) || soap_send(soap, soap_witsml14__PresTestType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PresTestType(struct soap *soap, const char *s, witsml14__PresTestType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PresTestType, s);
	if (map)
		*a = (witsml14__PresTestType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PresTestType * SOAP_FMAC4 soap_in_witsml14__PresTestType(struct soap *soap, const char *tag, witsml14__PresTestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PresTestType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType, sizeof(witsml14__PresTestType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PresTestType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PresTestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType, SOAP_TYPE_gsoap_witsml1_4_witsml14__PresTestType, sizeof(witsml14__PresTestType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PresTestType * SOAP_FMAC4 soap_new_witsml14__PresTestType(struct soap *soap, int n)
{
	witsml14__PresTestType *a = static_cast<witsml14__PresTestType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PresTestType)));
	for (witsml14__PresTestType *p = a; p && n--; ++p)
		soap_default_witsml14__PresTestType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PresTestType(struct soap *soap, const witsml14__PresTestType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PresTestType(soap, tag ? tag : "witsml14:PresTestType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PresTestType * SOAP_FMAC4 soap_get_witsml14__PresTestType(struct soap *soap, witsml14__PresTestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PresTestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ProjectionVariantsObliqueMercator[] =
{	{ (LONG64)witsml14__ProjectionVariantsObliqueMercator::default_, "default" },
	{ (LONG64)witsml14__ProjectionVariantsObliqueMercator::rectified, "rectified" },
	{ (LONG64)witsml14__ProjectionVariantsObliqueMercator::rectified_x0020skew, "rectified skew" },
	{ (LONG64)witsml14__ProjectionVariantsObliqueMercator::rectified_x0020skew_x0020center_x0020origin, "rectified skew center origin" },
	{ (LONG64)witsml14__ProjectionVariantsObliqueMercator::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ProjectionVariantsObliqueMercator2s(struct soap *soap, witsml14__ProjectionVariantsObliqueMercator n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ProjectionVariantsObliqueMercator, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const char *tag, int id, const witsml14__ProjectionVariantsObliqueMercator *a, const char *type)
{
	if (!type)
		type = "witsml14:ProjectionVariantsObliqueMercator";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator), type) || soap_send(soap, soap_witsml14__ProjectionVariantsObliqueMercator2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const char *s, witsml14__ProjectionVariantsObliqueMercator *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ProjectionVariantsObliqueMercator, s);
	if (map)
		*a = (witsml14__ProjectionVariantsObliqueMercator)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ProjectionVariantsObliqueMercator * SOAP_FMAC4 soap_in_witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const char *tag, witsml14__ProjectionVariantsObliqueMercator *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ProjectionVariantsObliqueMercator*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator, sizeof(witsml14__ProjectionVariantsObliqueMercator), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ProjectionVariantsObliqueMercator(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ProjectionVariantsObliqueMercator *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator, sizeof(witsml14__ProjectionVariantsObliqueMercator), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ProjectionVariantsObliqueMercator * SOAP_FMAC4 soap_new_witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, int n)
{
	witsml14__ProjectionVariantsObliqueMercator *a = static_cast<witsml14__ProjectionVariantsObliqueMercator *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ProjectionVariantsObliqueMercator)));
	for (witsml14__ProjectionVariantsObliqueMercator *p = a; p && n--; ++p)
		soap_default_witsml14__ProjectionVariantsObliqueMercator(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const witsml14__ProjectionVariantsObliqueMercator *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ProjectionVariantsObliqueMercator(soap, tag ? tag : "witsml14:ProjectionVariantsObliqueMercator", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ProjectionVariantsObliqueMercator * SOAP_FMAC4 soap_get_witsml14__ProjectionVariantsObliqueMercator(struct soap *soap, witsml14__ProjectionVariantsObliqueMercator *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ProjectionVariantsObliqueMercator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__Projection[] =
{	{ (LONG64)witsml14__Projection::Albers_x0020equal_x0020area, "Albers equal area" },
	{ (LONG64)witsml14__Projection::azimuthal_x0020equidistant, "azimuthal equidistant" },
	{ (LONG64)witsml14__Projection::Cassini, "Cassini" },
	{ (LONG64)witsml14__Projection::equidistant_x0020conic, "equidistant conic" },
	{ (LONG64)witsml14__Projection::equirectangular, "equirectangular" },
	{ (LONG64)witsml14__Projection::gnomonic, "gnomonic" },
	{ (LONG64)witsml14__Projection::Lambert_x0020azimuthal, "Lambert azimuthal" },
	{ (LONG64)witsml14__Projection::Lambert_x0020conformal_x0020conic, "Lambert conformal conic" },
	{ (LONG64)witsml14__Projection::Mercator, "Mercator" },
	{ (LONG64)witsml14__Projection::Miller, "Miller" },
	{ (LONG64)witsml14__Projection::oblique_x0020Mercator, "oblique Mercator" },
	{ (LONG64)witsml14__Projection::orthographic, "orthographic" },
	{ (LONG64)witsml14__Projection::perspective, "perspective" },
	{ (LONG64)witsml14__Projection::polar_x0020stereographic, "polar stereographic" },
	{ (LONG64)witsml14__Projection::polyconic, "polyconic" },
	{ (LONG64)witsml14__Projection::sinusoidal, "sinusoidal" },
	{ (LONG64)witsml14__Projection::state_x0020plane, "state plane" },
	{ (LONG64)witsml14__Projection::stereographic, "stereographic" },
	{ (LONG64)witsml14__Projection::transverse_x0020Mercator, "transverse Mercator" },
	{ (LONG64)witsml14__Projection::universal_x0020transverse_x0020Mercator, "universal transverse Mercator" },
	{ (LONG64)witsml14__Projection::user_x0020defined, "user defined" },
	{ (LONG64)witsml14__Projection::Van_x0020der_x0020Grinten, "Van der Grinten" },
	{ (LONG64)witsml14__Projection::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__Projection2s(struct soap *soap, witsml14__Projection n)
{
	const char *s = soap_code_str(soap_codes_witsml14__Projection, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__Projection(struct soap *soap, const char *tag, int id, const witsml14__Projection *a, const char *type)
{
	if (!type)
		type = "witsml14:Projection";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection), type) || soap_send(soap, soap_witsml14__Projection2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__Projection(struct soap *soap, const char *s, witsml14__Projection *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__Projection, s);
	if (map)
		*a = (witsml14__Projection)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__Projection * SOAP_FMAC4 soap_in_witsml14__Projection(struct soap *soap, const char *tag, witsml14__Projection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__Projection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection, sizeof(witsml14__Projection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__Projection(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__Projection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection, sizeof(witsml14__Projection), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__Projection * SOAP_FMAC4 soap_new_witsml14__Projection(struct soap *soap, int n)
{
	witsml14__Projection *a = static_cast<witsml14__Projection *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__Projection)));
	for (witsml14__Projection *p = a; p && n--; ++p)
		soap_default_witsml14__Projection(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__Projection(struct soap *soap, const witsml14__Projection *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__Projection(soap, tag ? tag : "witsml14:Projection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Projection * SOAP_FMAC4 soap_get_witsml14__Projection(struct soap *soap, witsml14__Projection *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__Projection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PrimitiveType[] =
{	{ (LONG64)witsml14__PrimitiveType::string, "string" },
	{ (LONG64)witsml14__PrimitiveType::boolean, "boolean" },
	{ (LONG64)witsml14__PrimitiveType::float_, "float" },
	{ (LONG64)witsml14__PrimitiveType::double_, "double" },
	{ (LONG64)witsml14__PrimitiveType::duration, "duration" },
	{ (LONG64)witsml14__PrimitiveType::dateTime, "dateTime" },
	{ (LONG64)witsml14__PrimitiveType::time, "time" },
	{ (LONG64)witsml14__PrimitiveType::date, "date" },
	{ (LONG64)witsml14__PrimitiveType::gYearMonth, "gYearMonth" },
	{ (LONG64)witsml14__PrimitiveType::gYear, "gYear" },
	{ (LONG64)witsml14__PrimitiveType::gMonthDay, "gMonthDay" },
	{ (LONG64)witsml14__PrimitiveType::gDay, "gDay" },
	{ (LONG64)witsml14__PrimitiveType::gMonth, "gMonth" },
	{ (LONG64)witsml14__PrimitiveType::base64Binary, "base64Binary" },
	{ (LONG64)witsml14__PrimitiveType::anyURI, "anyURI" },
	{ (LONG64)witsml14__PrimitiveType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PrimitiveType2s(struct soap *soap, witsml14__PrimitiveType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PrimitiveType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PrimitiveType(struct soap *soap, const char *tag, int id, const witsml14__PrimitiveType *a, const char *type)
{
	if (!type)
		type = "witsml14:PrimitiveType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType), type) || soap_send(soap, soap_witsml14__PrimitiveType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PrimitiveType(struct soap *soap, const char *s, witsml14__PrimitiveType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PrimitiveType, s);
	if (map)
		*a = (witsml14__PrimitiveType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PrimitiveType * SOAP_FMAC4 soap_in_witsml14__PrimitiveType(struct soap *soap, const char *tag, witsml14__PrimitiveType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PrimitiveType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType, sizeof(witsml14__PrimitiveType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PrimitiveType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PrimitiveType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrimitiveType, sizeof(witsml14__PrimitiveType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PrimitiveType * SOAP_FMAC4 soap_new_witsml14__PrimitiveType(struct soap *soap, int n)
{
	witsml14__PrimitiveType *a = static_cast<witsml14__PrimitiveType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PrimitiveType)));
	for (witsml14__PrimitiveType *p = a; p && n--; ++p)
		soap_default_witsml14__PrimitiveType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PrimitiveType(struct soap *soap, const witsml14__PrimitiveType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PrimitiveType(soap, tag ? tag : "witsml14:PrimitiveType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PrimitiveType * SOAP_FMAC4 soap_get_witsml14__PrimitiveType(struct soap *soap, witsml14__PrimitiveType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PrimitiveType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PitType[] =
{	{ (LONG64)witsml14__PitType::bulk, "bulk" },
	{ (LONG64)witsml14__PitType::chemical, "chemical" },
	{ (LONG64)witsml14__PitType::drilling, "drilling" },
	{ (LONG64)witsml14__PitType::mix, "mix" },
	{ (LONG64)witsml14__PitType::mud_x0020cleaning, "mud cleaning" },
	{ (LONG64)witsml14__PitType::sand_x0020trap, "sand trap" },
	{ (LONG64)witsml14__PitType::slug, "slug" },
	{ (LONG64)witsml14__PitType::storage, "storage" },
	{ (LONG64)witsml14__PitType::surge_x0020tank, "surge tank" },
	{ (LONG64)witsml14__PitType::trip_x0020tank, "trip tank" },
	{ (LONG64)witsml14__PitType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PitType2s(struct soap *soap, witsml14__PitType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PitType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PitType(struct soap *soap, const char *tag, int id, const witsml14__PitType *a, const char *type)
{
	if (!type)
		type = "witsml14:PitType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType), type) || soap_send(soap, soap_witsml14__PitType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PitType(struct soap *soap, const char *s, witsml14__PitType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PitType, s);
	if (map)
		*a = (witsml14__PitType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PitType * SOAP_FMAC4 soap_in_witsml14__PitType(struct soap *soap, const char *tag, witsml14__PitType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PitType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType, sizeof(witsml14__PitType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PitType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PitType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType, SOAP_TYPE_gsoap_witsml1_4_witsml14__PitType, sizeof(witsml14__PitType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PitType * SOAP_FMAC4 soap_new_witsml14__PitType(struct soap *soap, int n)
{
	witsml14__PitType *a = static_cast<witsml14__PitType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PitType)));
	for (witsml14__PitType *p = a; p && n--; ++p)
		soap_default_witsml14__PitType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PitType(struct soap *soap, const witsml14__PitType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PitType(soap, tag ? tag : "witsml14:PitType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PitType * SOAP_FMAC4 soap_get_witsml14__PitType(struct soap *soap, witsml14__PitType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PitType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PIDXCommodityCode[] =
{	{ (LONG64)witsml14__PIDXCommodityCode::_71131001, "71131001" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131002, "71131002" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131003, "71131003" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131004, "71131004" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131005, "71131005" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131006, "71131006" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131007, "71131007" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131008, "71131008" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131009, "71131009" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131010, "71131010" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131011, "71131011" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131012, "71131012" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131013, "71131013" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131014, "71131014" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131015, "71131015" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131016, "71131016" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131018, "71131018" },
	{ (LONG64)witsml14__PIDXCommodityCode::_71131019, "71131019" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PIDXCommodityCode2s(struct soap *soap, witsml14__PIDXCommodityCode n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PIDXCommodityCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PIDXCommodityCode(struct soap *soap, const char *tag, int id, const witsml14__PIDXCommodityCode *a, const char *type)
{
	if (!type)
		type = "witsml14:PIDXCommodityCode";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode), type) || soap_send(soap, soap_witsml14__PIDXCommodityCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PIDXCommodityCode(struct soap *soap, const char *s, witsml14__PIDXCommodityCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PIDXCommodityCode, s);
	if (map)
		*a = (witsml14__PIDXCommodityCode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PIDXCommodityCode * SOAP_FMAC4 soap_in_witsml14__PIDXCommodityCode(struct soap *soap, const char *tag, witsml14__PIDXCommodityCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PIDXCommodityCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode, sizeof(witsml14__PIDXCommodityCode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PIDXCommodityCode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PIDXCommodityCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode, SOAP_TYPE_gsoap_witsml1_4_witsml14__PIDXCommodityCode, sizeof(witsml14__PIDXCommodityCode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PIDXCommodityCode * SOAP_FMAC4 soap_new_witsml14__PIDXCommodityCode(struct soap *soap, int n)
{
	witsml14__PIDXCommodityCode *a = static_cast<witsml14__PIDXCommodityCode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PIDXCommodityCode)));
	for (witsml14__PIDXCommodityCode *p = a; p && n--; ++p)
		soap_default_witsml14__PIDXCommodityCode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PIDXCommodityCode(struct soap *soap, const witsml14__PIDXCommodityCode *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PIDXCommodityCode(soap, tag ? tag : "witsml14:PIDXCommodityCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PIDXCommodityCode * SOAP_FMAC4 soap_get_witsml14__PIDXCommodityCode(struct soap *soap, witsml14__PIDXCommodityCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PIDXCommodityCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__OpsReportVersion[] =
{	{ (LONG64)witsml14__OpsReportVersion::preliminary, "preliminary" },
	{ (LONG64)witsml14__OpsReportVersion::normal, "normal" },
	{ (LONG64)witsml14__OpsReportVersion::final_, "final" },
	{ (LONG64)witsml14__OpsReportVersion::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__OpsReportVersion2s(struct soap *soap, witsml14__OpsReportVersion n)
{
	const char *s = soap_code_str(soap_codes_witsml14__OpsReportVersion, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__OpsReportVersion(struct soap *soap, const char *tag, int id, const witsml14__OpsReportVersion *a, const char *type)
{
	if (!type)
		type = "witsml14:OpsReportVersion";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion), type) || soap_send(soap, soap_witsml14__OpsReportVersion2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__OpsReportVersion(struct soap *soap, const char *s, witsml14__OpsReportVersion *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__OpsReportVersion, s);
	if (map)
		*a = (witsml14__OpsReportVersion)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__OpsReportVersion * SOAP_FMAC4 soap_in_witsml14__OpsReportVersion(struct soap *soap, const char *tag, witsml14__OpsReportVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__OpsReportVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion, sizeof(witsml14__OpsReportVersion), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__OpsReportVersion(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__OpsReportVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion, SOAP_TYPE_gsoap_witsml1_4_witsml14__OpsReportVersion, sizeof(witsml14__OpsReportVersion), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__OpsReportVersion * SOAP_FMAC4 soap_new_witsml14__OpsReportVersion(struct soap *soap, int n)
{
	witsml14__OpsReportVersion *a = static_cast<witsml14__OpsReportVersion *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__OpsReportVersion)));
	for (witsml14__OpsReportVersion *p = a; p && n--; ++p)
		soap_default_witsml14__OpsReportVersion(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__OpsReportVersion(struct soap *soap, const witsml14__OpsReportVersion *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__OpsReportVersion(soap, tag ? tag : "witsml14:OpsReportVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__OpsReportVersion * SOAP_FMAC4 soap_get_witsml14__OpsReportVersion(struct soap *soap, witsml14__OpsReportVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__OpsReportVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__NozzleType[] =
{	{ (LONG64)witsml14__NozzleType::extended, "extended" },
	{ (LONG64)witsml14__NozzleType::normal, "normal" },
	{ (LONG64)witsml14__NozzleType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__NozzleType2s(struct soap *soap, witsml14__NozzleType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__NozzleType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__NozzleType(struct soap *soap, const char *tag, int id, const witsml14__NozzleType *a, const char *type)
{
	if (!type)
		type = "witsml14:NozzleType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType), type) || soap_send(soap, soap_witsml14__NozzleType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__NozzleType(struct soap *soap, const char *s, witsml14__NozzleType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__NozzleType, s);
	if (map)
		*a = (witsml14__NozzleType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__NozzleType * SOAP_FMAC4 soap_in_witsml14__NozzleType(struct soap *soap, const char *tag, witsml14__NozzleType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__NozzleType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType, sizeof(witsml14__NozzleType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__NozzleType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__NozzleType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType, SOAP_TYPE_gsoap_witsml1_4_witsml14__NozzleType, sizeof(witsml14__NozzleType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__NozzleType * SOAP_FMAC4 soap_new_witsml14__NozzleType(struct soap *soap, int n)
{
	witsml14__NozzleType *a = static_cast<witsml14__NozzleType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__NozzleType)));
	for (witsml14__NozzleType *p = a; p && n--; ++p)
		soap_default_witsml14__NozzleType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__NozzleType(struct soap *soap, const witsml14__NozzleType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__NozzleType(soap, tag ? tag : "witsml14:NozzleType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__NozzleType * SOAP_FMAC4 soap_get_witsml14__NozzleType(struct soap *soap, witsml14__NozzleType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__NozzleType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__NorthOrSouth[] =
{	{ (LONG64)witsml14__NorthOrSouth::north, "north" },
	{ (LONG64)witsml14__NorthOrSouth::south, "south" },
	{ (LONG64)witsml14__NorthOrSouth::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__NorthOrSouth2s(struct soap *soap, witsml14__NorthOrSouth n)
{
	const char *s = soap_code_str(soap_codes_witsml14__NorthOrSouth, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__NorthOrSouth(struct soap *soap, const char *tag, int id, const witsml14__NorthOrSouth *a, const char *type)
{
	if (!type)
		type = "witsml14:NorthOrSouth";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth), type) || soap_send(soap, soap_witsml14__NorthOrSouth2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__NorthOrSouth(struct soap *soap, const char *s, witsml14__NorthOrSouth *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__NorthOrSouth, s);
	if (map)
		*a = (witsml14__NorthOrSouth)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__NorthOrSouth * SOAP_FMAC4 soap_in_witsml14__NorthOrSouth(struct soap *soap, const char *tag, witsml14__NorthOrSouth *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__NorthOrSouth*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth, sizeof(witsml14__NorthOrSouth), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__NorthOrSouth(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__NorthOrSouth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth, sizeof(witsml14__NorthOrSouth), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__NorthOrSouth * SOAP_FMAC4 soap_new_witsml14__NorthOrSouth(struct soap *soap, int n)
{
	witsml14__NorthOrSouth *a = static_cast<witsml14__NorthOrSouth *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__NorthOrSouth)));
	for (witsml14__NorthOrSouth *p = a; p && n--; ++p)
		soap_default_witsml14__NorthOrSouth(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__NorthOrSouth(struct soap *soap, const witsml14__NorthOrSouth *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__NorthOrSouth(soap, tag ? tag : "witsml14:NorthOrSouth", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__NorthOrSouth * SOAP_FMAC4 soap_get_witsml14__NorthOrSouth(struct soap *soap, witsml14__NorthOrSouth *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__NorthOrSouth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__NADTypes[] =
{	{ (LONG64)witsml14__NADTypes::NAD27, "NAD27" },
	{ (LONG64)witsml14__NADTypes::NAD83, "NAD83" },
	{ (LONG64)witsml14__NADTypes::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__NADTypes2s(struct soap *soap, witsml14__NADTypes n)
{
	const char *s = soap_code_str(soap_codes_witsml14__NADTypes, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__NADTypes(struct soap *soap, const char *tag, int id, const witsml14__NADTypes *a, const char *type)
{
	if (!type)
		type = "witsml14:NADTypes";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes), type) || soap_send(soap, soap_witsml14__NADTypes2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__NADTypes(struct soap *soap, const char *s, witsml14__NADTypes *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__NADTypes, s);
	if (map)
		*a = (witsml14__NADTypes)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__NADTypes * SOAP_FMAC4 soap_in_witsml14__NADTypes(struct soap *soap, const char *tag, witsml14__NADTypes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__NADTypes*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes, sizeof(witsml14__NADTypes), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__NADTypes(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__NADTypes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes, sizeof(witsml14__NADTypes), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__NADTypes * SOAP_FMAC4 soap_new_witsml14__NADTypes(struct soap *soap, int n)
{
	witsml14__NADTypes *a = static_cast<witsml14__NADTypes *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__NADTypes)));
	for (witsml14__NADTypes *p = a; p && n--; ++p)
		soap_default_witsml14__NADTypes(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__NADTypes(struct soap *soap, const witsml14__NADTypes *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__NADTypes(soap, tag ? tag : "witsml14:NADTypes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__NADTypes * SOAP_FMAC4 soap_get_witsml14__NADTypes(struct soap *soap, witsml14__NADTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__NADTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MudLogParameterType[] =
{	{ (LONG64)witsml14__MudLogParameterType::bit_x0020parameters, "bit parameters" },
	{ (LONG64)witsml14__MudLogParameterType::bit_x0020type_x0020comment, "bit type comment" },
	{ (LONG64)witsml14__MudLogParameterType::casing_x0020point_x0020comment, "casing point comment" },
	{ (LONG64)witsml14__MudLogParameterType::chromatograph_x0020comment, "chromatograph comment" },
	{ (LONG64)witsml14__MudLogParameterType::circulation_x0020system_x0020comment, "circulation system comment" },
	{ (LONG64)witsml14__MudLogParameterType::core_x0020interval_x0020comment, "core interval comment" },
	{ (LONG64)witsml14__MudLogParameterType::cuttings_x0020gas, "cuttings gas" },
	{ (LONG64)witsml14__MudLogParameterType::direct_x0020fracture_x0020pressure, "direct fracture pressure" },
	{ (LONG64)witsml14__MudLogParameterType::direct_x0020pore_x0020pressure_x0020measurements, "direct pore pressure measurements" },
	{ (LONG64)witsml14__MudLogParameterType::drilling_x0020data_x0020comment, "drilling data comment" },
	{ (LONG64)witsml14__MudLogParameterType::fracture_x0020PG_x0020estimate_x0020most_x0020likely, "fracture PG estimate most likely" },
	{ (LONG64)witsml14__MudLogParameterType::gas_x0020peaks_x0020comment, "gas peaks comment" },
	{ (LONG64)witsml14__MudLogParameterType::gas_x0020ratio_x0020comment, "gas ratio comment" },
	{ (LONG64)witsml14__MudLogParameterType::general_x0020engineering_x0020comment, "general engineering comment" },
	{ (LONG64)witsml14__MudLogParameterType::kicks_x0020and_x0020flows, "kicks and flows" },
	{ (LONG64)witsml14__MudLogParameterType::lithlog_x0020comment, "lithlog comment" },
	{ (LONG64)witsml14__MudLogParameterType::lost_x0020returns, "lost returns" },
	{ (LONG64)witsml14__MudLogParameterType::LWD_x0020comment, "LWD comment" },
	{ (LONG64)witsml14__MudLogParameterType::marker_x0020or_x0020formation_x0020top_x0020comment, "marker or formation top comment" },
	{ (LONG64)witsml14__MudLogParameterType::midnight_x0020depth_x0020date, "midnight depth date" },
	{ (LONG64)witsml14__MudLogParameterType::mud_x0020check_x0020comment, "mud check comment" },
	{ (LONG64)witsml14__MudLogParameterType::mud_x0020data_x0020comment, "mud data comment" },
	{ (LONG64)witsml14__MudLogParameterType::mudlog_x0020comment, "mudlog comment" },
	{ (LONG64)witsml14__MudLogParameterType::overburden_x0020gradient, "overburden gradient" },
	{ (LONG64)witsml14__MudLogParameterType::overpull_x0020on_x0020connection, "overpull on connection" },
	{ (LONG64)witsml14__MudLogParameterType::overpull_x0020on_x0020trip, "overpull on trip" },
	{ (LONG64)witsml14__MudLogParameterType::pore_x0020PG_x0020estimate_x0020most_x0020likely, "pore PG estimate most likely" },
	{ (LONG64)witsml14__MudLogParameterType::pore_x0020pressure_x0020estimate_x0020while_x0020drilling, "pore pressure estimate while drilling" },
	{ (LONG64)witsml14__MudLogParameterType::pressure_x0020data_x0020comment, "pressure data comment" },
	{ (LONG64)witsml14__MudLogParameterType::shale_x0020density_x0020comment, "shale density comment" },
	{ (LONG64)witsml14__MudLogParameterType::short_x0020trip_x0020comment, "short trip comment" },
	{ (LONG64)witsml14__MudLogParameterType::show_x0020report_x0020comment, "show report comment" },
	{ (LONG64)witsml14__MudLogParameterType::sidewall_x0020core_x0020comment, "sidewall core comment" },
	{ (LONG64)witsml14__MudLogParameterType::sliding_x0020Interval, "sliding Interval" },
	{ (LONG64)witsml14__MudLogParameterType::steam_x0020still_x0020results_x0020comment, "steam still results comment" },
	{ (LONG64)witsml14__MudLogParameterType::survey_x0020comment, "survey comment" },
	{ (LONG64)witsml14__MudLogParameterType::temperature_x0020data_x0020comment, "temperature data comment" },
	{ (LONG64)witsml14__MudLogParameterType::temperature_x0020trend_x0020comment, "temperature trend comment" },
	{ (LONG64)witsml14__MudLogParameterType::wireline_x0020log_x0020comment, "wireline log comment" },
	{ (LONG64)witsml14__MudLogParameterType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MudLogParameterType2s(struct soap *soap, witsml14__MudLogParameterType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MudLogParameterType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MudLogParameterType(struct soap *soap, const char *tag, int id, const witsml14__MudLogParameterType *a, const char *type)
{
	if (!type)
		type = "witsml14:MudLogParameterType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType), type) || soap_send(soap, soap_witsml14__MudLogParameterType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MudLogParameterType(struct soap *soap, const char *s, witsml14__MudLogParameterType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MudLogParameterType, s);
	if (map)
		*a = (witsml14__MudLogParameterType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MudLogParameterType * SOAP_FMAC4 soap_in_witsml14__MudLogParameterType(struct soap *soap, const char *tag, witsml14__MudLogParameterType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MudLogParameterType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType, sizeof(witsml14__MudLogParameterType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MudLogParameterType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MudLogParameterType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudLogParameterType, sizeof(witsml14__MudLogParameterType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MudLogParameterType * SOAP_FMAC4 soap_new_witsml14__MudLogParameterType(struct soap *soap, int n)
{
	witsml14__MudLogParameterType *a = static_cast<witsml14__MudLogParameterType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MudLogParameterType)));
	for (witsml14__MudLogParameterType *p = a; p && n--; ++p)
		soap_default_witsml14__MudLogParameterType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MudLogParameterType(struct soap *soap, const witsml14__MudLogParameterType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MudLogParameterType(soap, tag ? tag : "witsml14:MudLogParameterType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MudLogParameterType * SOAP_FMAC4 soap_get_witsml14__MudLogParameterType(struct soap *soap, witsml14__MudLogParameterType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MudLogParameterType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MudClass[] =
{	{ (LONG64)witsml14__MudClass::water_x0020based, "water based" },
	{ (LONG64)witsml14__MudClass::oil_x0020based, "oil based" },
	{ (LONG64)witsml14__MudClass::other, "other" },
	{ (LONG64)witsml14__MudClass::pneumatic, "pneumatic" },
	{ (LONG64)witsml14__MudClass::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MudClass2s(struct soap *soap, witsml14__MudClass n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MudClass, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MudClass(struct soap *soap, const char *tag, int id, const witsml14__MudClass *a, const char *type)
{
	if (!type)
		type = "witsml14:MudClass";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass), type) || soap_send(soap, soap_witsml14__MudClass2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MudClass(struct soap *soap, const char *s, witsml14__MudClass *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MudClass, s);
	if (map)
		*a = (witsml14__MudClass)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MudClass * SOAP_FMAC4 soap_in_witsml14__MudClass(struct soap *soap, const char *tag, witsml14__MudClass *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MudClass*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass, sizeof(witsml14__MudClass), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MudClass(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MudClass *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass, SOAP_TYPE_gsoap_witsml1_4_witsml14__MudClass, sizeof(witsml14__MudClass), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MudClass * SOAP_FMAC4 soap_new_witsml14__MudClass(struct soap *soap, int n)
{
	witsml14__MudClass *a = static_cast<witsml14__MudClass *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MudClass)));
	for (witsml14__MudClass *p = a; p && n--; ++p)
		soap_default_witsml14__MudClass(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MudClass(struct soap *soap, const witsml14__MudClass *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MudClass(soap, tag ? tag : "witsml14:MudClass", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MudClass * SOAP_FMAC4 soap_get_witsml14__MudClass(struct soap *soap, witsml14__MudClass *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MudClass(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MessageType[] =
{	{ (LONG64)witsml14__MessageType::alarm, "alarm" },
	{ (LONG64)witsml14__MessageType::event, "event" },
	{ (LONG64)witsml14__MessageType::informational, "informational" },
	{ (LONG64)witsml14__MessageType::warning, "warning" },
	{ (LONG64)witsml14__MessageType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MessageType2s(struct soap *soap, witsml14__MessageType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MessageType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MessageType(struct soap *soap, const char *tag, int id, const witsml14__MessageType *a, const char *type)
{
	if (!type)
		type = "witsml14:MessageType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType), type) || soap_send(soap, soap_witsml14__MessageType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MessageType(struct soap *soap, const char *s, witsml14__MessageType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MessageType, s);
	if (map)
		*a = (witsml14__MessageType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MessageType * SOAP_FMAC4 soap_in_witsml14__MessageType(struct soap *soap, const char *tag, witsml14__MessageType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MessageType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType, sizeof(witsml14__MessageType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MessageType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MessageType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageType, sizeof(witsml14__MessageType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MessageType * SOAP_FMAC4 soap_new_witsml14__MessageType(struct soap *soap, int n)
{
	witsml14__MessageType *a = static_cast<witsml14__MessageType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MessageType)));
	for (witsml14__MessageType *p = a; p && n--; ++p)
		soap_default_witsml14__MessageType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MessageType(struct soap *soap, const witsml14__MessageType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MessageType(soap, tag ? tag : "witsml14:MessageType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MessageType * SOAP_FMAC4 soap_get_witsml14__MessageType(struct soap *soap, witsml14__MessageType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MessageType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MessageSeverity[] =
{	{ (LONG64)witsml14__MessageSeverity::catastrophic, "catastrophic" },
	{ (LONG64)witsml14__MessageSeverity::major, "major" },
	{ (LONG64)witsml14__MessageSeverity::minor, "minor" },
	{ (LONG64)witsml14__MessageSeverity::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MessageSeverity2s(struct soap *soap, witsml14__MessageSeverity n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MessageSeverity, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MessageSeverity(struct soap *soap, const char *tag, int id, const witsml14__MessageSeverity *a, const char *type)
{
	if (!type)
		type = "witsml14:MessageSeverity";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity), type) || soap_send(soap, soap_witsml14__MessageSeverity2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MessageSeverity(struct soap *soap, const char *s, witsml14__MessageSeverity *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MessageSeverity, s);
	if (map)
		*a = (witsml14__MessageSeverity)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MessageSeverity * SOAP_FMAC4 soap_in_witsml14__MessageSeverity(struct soap *soap, const char *tag, witsml14__MessageSeverity *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MessageSeverity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity, sizeof(witsml14__MessageSeverity), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MessageSeverity(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MessageSeverity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageSeverity, sizeof(witsml14__MessageSeverity), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MessageSeverity * SOAP_FMAC4 soap_new_witsml14__MessageSeverity(struct soap *soap, int n)
{
	witsml14__MessageSeverity *a = static_cast<witsml14__MessageSeverity *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MessageSeverity)));
	for (witsml14__MessageSeverity *p = a; p && n--; ++p)
		soap_default_witsml14__MessageSeverity(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MessageSeverity(struct soap *soap, const witsml14__MessageSeverity *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MessageSeverity(soap, tag ? tag : "witsml14:MessageSeverity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MessageSeverity * SOAP_FMAC4 soap_get_witsml14__MessageSeverity(struct soap *soap, witsml14__MessageSeverity *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MessageSeverity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MessageProbability[] =
{	{ (LONG64)witsml14__MessageProbability::low, "low" },
	{ (LONG64)witsml14__MessageProbability::medium, "medium" },
	{ (LONG64)witsml14__MessageProbability::high, "high" },
	{ (LONG64)witsml14__MessageProbability::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MessageProbability2s(struct soap *soap, witsml14__MessageProbability n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MessageProbability, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MessageProbability(struct soap *soap, const char *tag, int id, const witsml14__MessageProbability *a, const char *type)
{
	if (!type)
		type = "witsml14:MessageProbability";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability), type) || soap_send(soap, soap_witsml14__MessageProbability2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MessageProbability(struct soap *soap, const char *s, witsml14__MessageProbability *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MessageProbability, s);
	if (map)
		*a = (witsml14__MessageProbability)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MessageProbability * SOAP_FMAC4 soap_in_witsml14__MessageProbability(struct soap *soap, const char *tag, witsml14__MessageProbability *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MessageProbability*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability, sizeof(witsml14__MessageProbability), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MessageProbability(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MessageProbability *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability, SOAP_TYPE_gsoap_witsml1_4_witsml14__MessageProbability, sizeof(witsml14__MessageProbability), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MessageProbability * SOAP_FMAC4 soap_new_witsml14__MessageProbability(struct soap *soap, int n)
{
	witsml14__MessageProbability *a = static_cast<witsml14__MessageProbability *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MessageProbability)));
	for (witsml14__MessageProbability *p = a; p && n--; ++p)
		soap_default_witsml14__MessageProbability(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MessageProbability(struct soap *soap, const witsml14__MessageProbability *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MessageProbability(soap, tag ? tag : "witsml14:MessageProbability", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MessageProbability * SOAP_FMAC4 soap_get_witsml14__MessageProbability(struct soap *soap, witsml14__MessageProbability *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MessageProbability(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MeasurementType[] =
{	{ (LONG64)witsml14__MeasurementType::acceleration, "acceleration" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020caliper, "acoustic caliper" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020casing_x0020collar_x0020locator, "acoustic casing collar locator" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020impedance, "acoustic impedance" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020porosity, "acoustic porosity" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020velocity, "acoustic velocity" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020wave_x0020matrix_x0020travel_x0020time, "acoustic wave matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::acoustic_x0020wave_x0020travel_x0020time, "acoustic wave travel time" },
	{ (LONG64)witsml14__MeasurementType::amplitude, "amplitude" },
	{ (LONG64)witsml14__MeasurementType::amplitude_x0020of_x0020acoustic_x0020wave, "amplitude of acoustic wave" },
	{ (LONG64)witsml14__MeasurementType::amplitude_x0020of_x0020E_M_x0020wave, "amplitude of E-M wave" },
	{ (LONG64)witsml14__MeasurementType::amplitude_x0020ratio, "amplitude ratio" },
	{ (LONG64)witsml14__MeasurementType::area, "area" },
	{ (LONG64)witsml14__MeasurementType::attenuation, "attenuation" },
	{ (LONG64)witsml14__MeasurementType::attenuation_x0020of_x0020acoustic_x0020wave, "attenuation of acoustic wave" },
	{ (LONG64)witsml14__MeasurementType::attenuation_x0020of_x0020E_M_x0020wave, "attenuation of E-M wave" },
	{ (LONG64)witsml14__MeasurementType::auxiliary, "auxiliary" },
	{ (LONG64)witsml14__MeasurementType::average_x0020porosity, "average porosity" },
	{ (LONG64)witsml14__MeasurementType::azimuth, "azimuth" },
	{ (LONG64)witsml14__MeasurementType::barite_x0020mud_x0020correction, "barite mud correction" },
	{ (LONG64)witsml14__MeasurementType::bed_x0020thickness_x0020correction, "bed thickness correction" },
	{ (LONG64)witsml14__MeasurementType::bit_x0020size, "bit size" },
	{ (LONG64)witsml14__MeasurementType::blocked, "blocked" },
	{ (LONG64)witsml14__MeasurementType::borehole_x0020environment_x0020correction, "borehole environment correction" },
	{ (LONG64)witsml14__MeasurementType::borehole_x0020fluid_x0020composition_x0020correction, "borehole fluid composition correction" },
	{ (LONG64)witsml14__MeasurementType::borehole_x0020fluid_x0020correction, "borehole fluid correction" },
	{ (LONG64)witsml14__MeasurementType::borehole_x0020size_x0020correction, "borehole size correction" },
	{ (LONG64)witsml14__MeasurementType::bromide_x0020mud_x0020correction, "bromide mud correction" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020compressibility, "bulk compressibility" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020density, "bulk density" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020volume, "bulk volume" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020volume_x0020gas, "bulk volume gas" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020volume_x0020hydrocarbon, "bulk volume hydrocarbon" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020volume_x0020oil, "bulk volume oil" },
	{ (LONG64)witsml14__MeasurementType::bulk_x0020volume_x0020water, "bulk volume water" },
	{ (LONG64)witsml14__MeasurementType::C_x002fO_x0020ratio, "C/O ratio" },
	{ (LONG64)witsml14__MeasurementType::caliper, "caliper" },
	{ (LONG64)witsml14__MeasurementType::cased_x0020hole_x0020correction, "cased hole correction" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020collar_x0020locator, "casing collar locator" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020correction, "casing correction" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020diameter_x0020correction, "casing diameter correction" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020inspection, "casing inspection" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020thickness_x0020correction, "casing thickness correction" },
	{ (LONG64)witsml14__MeasurementType::casing_x0020weight_x0020correction, "casing weight correction" },
	{ (LONG64)witsml14__MeasurementType::cement_x0020correction, "cement correction" },
	{ (LONG64)witsml14__MeasurementType::cement_x0020density_x0020correction, "cement density correction" },
	{ (LONG64)witsml14__MeasurementType::cement_x0020evaluation, "cement evaluation" },
	{ (LONG64)witsml14__MeasurementType::cement_x0020thickness_x0020correction, "cement thickness correction" },
	{ (LONG64)witsml14__MeasurementType::cement_x0020type_x0020correction, "cement type correction" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020density_x0020porosity, "CH density porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020dolomite_x0020density_x0020porosity, "CH dolomite density porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020dolomite_x0020neutron_x0020porosity, "CH dolomite neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020limestone_x0020density_x0020porosity, "CH limestone density porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020limestone_x0020neutron_x0020porosity, "CH limestone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020neutron_x0020porosity, "CH neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020sandstone_x0020density_x0020porosity, "CH sandstone density porosity" },
	{ (LONG64)witsml14__MeasurementType::CH_x0020sandstone_x0020neutron_x0020porosity, "CH sandstone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::compressional_x0020wave_x0020dolomite_x0020porosity, "compressional wave dolomite porosity" },
	{ (LONG64)witsml14__MeasurementType::compressional_x0020wave_x0020limestone_x0020porosity, "compressional wave limestone porosity" },
	{ (LONG64)witsml14__MeasurementType::compressional_x0020wave_x0020matrix_x0020travel_x0020time, "compressional wave matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::compressional_x0020wave_x0020sandstone_x0020porosity, "compressional wave sandstone porosity" },
	{ (LONG64)witsml14__MeasurementType::compressional_x0020wave_x0020travel_x0020time, "compressional wave travel time" },
	{ (LONG64)witsml14__MeasurementType::conductivity, "conductivity" },
	{ (LONG64)witsml14__MeasurementType::conductivity_x0020from_x0020attenuation, "conductivity from attenuation" },
	{ (LONG64)witsml14__MeasurementType::conductivity_x0020from_x0020phase_x0020shift, "conductivity from phase shift" },
	{ (LONG64)witsml14__MeasurementType::connate_x0020water_x0020conductivity, "connate water conductivity" },
	{ (LONG64)witsml14__MeasurementType::connate_x0020water_x0020resistivity, "connate water resistivity" },
	{ (LONG64)witsml14__MeasurementType::conventional_x0020core_x0020porosity, "conventional core porosity" },
	{ (LONG64)witsml14__MeasurementType::core_x0020matrix_x0020density, "core matrix density" },
	{ (LONG64)witsml14__MeasurementType::core_x0020permeability, "core permeability" },
	{ (LONG64)witsml14__MeasurementType::core_x0020porosity, "core porosity" },
	{ (LONG64)witsml14__MeasurementType::corrected, "corrected" },
	{ (LONG64)witsml14__MeasurementType::count_x0020rate, "count rate" },
	{ (LONG64)witsml14__MeasurementType::count_x0020rate_x0020ratio, "count rate ratio" },
	{ (LONG64)witsml14__MeasurementType::cross_x0020plot_x0020porosity, "cross plot porosity" },
	{ (LONG64)witsml14__MeasurementType::decay_x0020time, "decay time" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020conductivity, "deep conductivity" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020induction_x0020conductivity, "deep induction conductivity" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020induction_x0020resistivity, "deep induction resistivity" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020laterolog_x0020conductivity, "deep laterolog conductivity" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020laterolog_x0020resistivity, "deep laterolog resistivity" },
	{ (LONG64)witsml14__MeasurementType::deep_x0020resistivity, "deep resistivity" },
	{ (LONG64)witsml14__MeasurementType::density, "density" },
	{ (LONG64)witsml14__MeasurementType::density_x0020porosity, "density porosity" },
	{ (LONG64)witsml14__MeasurementType::depth, "depth" },
	{ (LONG64)witsml14__MeasurementType::depth_x0020adjusted, "depth adjusted" },
	{ (LONG64)witsml14__MeasurementType::depth_x0020derived_x0020from_x0020velocity, "depth derived from velocity" },
	{ (LONG64)witsml14__MeasurementType::deviation, "deviation" },
	{ (LONG64)witsml14__MeasurementType::dielectric, "dielectric" },
	{ (LONG64)witsml14__MeasurementType::diffusion_x0020correction, "diffusion correction" },
	{ (LONG64)witsml14__MeasurementType::dip, "dip" },
	{ (LONG64)witsml14__MeasurementType::dipmeter, "dipmeter" },
	{ (LONG64)witsml14__MeasurementType::dipmeter_x0020conductivity, "dipmeter conductivity" },
	{ (LONG64)witsml14__MeasurementType::dipmeter_x0020resistivity, "dipmeter resistivity" },
	{ (LONG64)witsml14__MeasurementType::dolomite_x0020acoustic_x0020porosity, "dolomite acoustic porosity" },
	{ (LONG64)witsml14__MeasurementType::dolomite_x0020density_x0020porosity, "dolomite density porosity" },
	{ (LONG64)witsml14__MeasurementType::dolomite_x0020neutron_x0020porosity, "dolomite neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::edited, "edited" },
	{ (LONG64)witsml14__MeasurementType::effective_x0020porosity, "effective porosity" },
	{ (LONG64)witsml14__MeasurementType::electric_x0020current, "electric current" },
	{ (LONG64)witsml14__MeasurementType::electric_x0020potential, "electric potential" },
	{ (LONG64)witsml14__MeasurementType::electromagnetic_x0020wave_x0020matrix_x0020travel_x0020time, "electromagnetic wave matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::electromagnetic_x0020wave_x0020travel_x0020time, "electromagnetic wave travel time" },
	{ (LONG64)witsml14__MeasurementType::element, "element" },
	{ (LONG64)witsml14__MeasurementType::elemental_x0020ratio, "elemental ratio" },
	{ (LONG64)witsml14__MeasurementType::enhanced, "enhanced" },
	{ (LONG64)witsml14__MeasurementType::filtered, "filtered" },
	{ (LONG64)witsml14__MeasurementType::flowmeter, "flowmeter" },
	{ (LONG64)witsml14__MeasurementType::fluid_x0020density, "fluid density" },
	{ (LONG64)witsml14__MeasurementType::fluid_x0020velocity, "fluid velocity" },
	{ (LONG64)witsml14__MeasurementType::fluid_x0020viscosity, "fluid viscosity" },
	{ (LONG64)witsml14__MeasurementType::flushed_x0020zone_x0020conductivity, "flushed zone conductivity" },
	{ (LONG64)witsml14__MeasurementType::flushed_x0020zone_x0020resistivity, "flushed zone resistivity" },
	{ (LONG64)witsml14__MeasurementType::flushed_x0020zone_x0020saturation, "flushed zone saturation" },
	{ (LONG64)witsml14__MeasurementType::force, "force" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020density_x0020correction, "formation density correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020properties_x0020correction, "formation properties correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020salinity_x0020correction, "formation salinity correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020saturation_x0020correction, "formation saturation correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020volume_x0020factor_x0020correction, "formation volume factor correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020water_x0020density_x0020correction, "formation water density correction" },
	{ (LONG64)witsml14__MeasurementType::formation_x0020water_x0020saturation_x0020correction, "formation water saturation correction" },
	{ (LONG64)witsml14__MeasurementType::free_x0020fluid_x0020index, "free fluid index" },
	{ (LONG64)witsml14__MeasurementType::friction_x0020effect_x0020correction, "friction effect correction" },
	{ (LONG64)witsml14__MeasurementType::gamma_x0020ray, "gamma ray" },
	{ (LONG64)witsml14__MeasurementType::gamma_x0020ray_x0020minus_x0020uranium, "gamma ray minus uranium" },
	{ (LONG64)witsml14__MeasurementType::gas_x0020saturation, "gas saturation" },
	{ (LONG64)witsml14__MeasurementType::gradiomanometer, "gradiomanometer" },
	{ (LONG64)witsml14__MeasurementType::high_x0020frequency_x0020conductivity, "high frequency conductivity" },
	{ (LONG64)witsml14__MeasurementType::high_x0020frequency_x0020electromagnetic, "high frequency electromagnetic" },
	{ (LONG64)witsml14__MeasurementType::high_x0020frequency_x0020electromagnetic_x0020porosity, "high frequency electromagnetic porosity" },
	{ (LONG64)witsml14__MeasurementType::high_x0020frequency_x0020E_M_x0020phase_x0020shift, "high frequency E-M phase shift" },
	{ (LONG64)witsml14__MeasurementType::high_x0020frequency_x0020resistivity, "high frequency resistivity" },
	{ (LONG64)witsml14__MeasurementType::hydrocarbon_x0020correction, "hydrocarbon correction" },
	{ (LONG64)witsml14__MeasurementType::hydrocarbon_x0020density_x0020correction, "hydrocarbon density correction" },
	{ (LONG64)witsml14__MeasurementType::hydrocarbon_x0020gravity_x0020correction, "hydrocarbon gravity correction" },
	{ (LONG64)witsml14__MeasurementType::hydrocarbon_x0020saturation, "hydrocarbon saturation" },
	{ (LONG64)witsml14__MeasurementType::hydrocarbon_x0020viscosity_x0020correction, "hydrocarbon viscosity correction" },
	{ (LONG64)witsml14__MeasurementType::image, "image" },
	{ (LONG64)witsml14__MeasurementType::interpretation_x0020variable, "interpretation variable" },
	{ (LONG64)witsml14__MeasurementType::iron_x0020mud_x0020correction, "iron mud correction" },
	{ (LONG64)witsml14__MeasurementType::joined, "joined" },
	{ (LONG64)witsml14__MeasurementType::KCl_x0020mud_x0020correction, "KCl mud correction" },
	{ (LONG64)witsml14__MeasurementType::length, "length" },
	{ (LONG64)witsml14__MeasurementType::limestone_x0020acoustic_x0020porosity, "limestone acoustic porosity" },
	{ (LONG64)witsml14__MeasurementType::limestone_x0020density_x0020porosity, "limestone density porosity" },
	{ (LONG64)witsml14__MeasurementType::limestone_x0020neutron_x0020porosity, "limestone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::lithology_x0020correction, "lithology correction" },
	{ (LONG64)witsml14__MeasurementType::log_x0020derived_x0020permeability, "log derived permeability" },
	{ (LONG64)witsml14__MeasurementType::log_x0020matrix_x0020density, "log matrix density" },
	{ (LONG64)witsml14__MeasurementType::magnetic_x0020casing_x0020collar_x0020locator, "magnetic casing collar locator" },
	{ (LONG64)witsml14__MeasurementType::matrix_x0020density, "matrix density" },
	{ (LONG64)witsml14__MeasurementType::matrix_x0020travel_x0020time, "matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::measured_x0020depth, "measured depth" },
	{ (LONG64)witsml14__MeasurementType::mechanical_x0020caliper, "mechanical caliper" },
	{ (LONG64)witsml14__MeasurementType::mechanical_x0020casing_x0020collar_x0020locator, "mechanical casing collar locator" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020conductivity, "medium conductivity" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020induction_x0020conductivity, "medium induction conductivity" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020induction_x0020resistivity, "medium induction resistivity" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020laterolog_x0020conductivity, "medium laterolog conductivity" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020laterolog_x0020resistivity, "medium laterolog resistivity" },
	{ (LONG64)witsml14__MeasurementType::medium_x0020resistivity, "medium resistivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020conductivity, "micro conductivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020inverse_x0020conductivity, "micro inverse conductivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020inverse_x0020resistivity, "micro inverse resistivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020laterolog_x0020conductivity, "micro laterolog conductivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020laterolog_x0020resistivity, "micro laterolog resistivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020normal_x0020conductivity, "micro normal conductivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020normal_x0020resistivity, "micro normal resistivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020resistivity, "micro resistivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020spherically_x0020focused_x0020conductivity, "micro spherically focused conductivity" },
	{ (LONG64)witsml14__MeasurementType::micro_x0020spherically_x0020focused_x0020resistivity, "micro spherically focused resistivity" },
	{ (LONG64)witsml14__MeasurementType::mineral, "mineral" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020conductivity, "mud cake conductivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020correction, "mud cake correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020density_x0020correction, "mud cake density correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020resistivity, "mud cake resistivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020resistivity_x0020correction, "mud cake resistivity correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020cake_x0020thickness_x0020correction, "mud cake thickness correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020composition_x0020correction, "mud composition correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020conductivity, "mud conductivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020conductivity, "mud filtrate conductivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020correction, "mud filtrate correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020density_x0020correction, "mud filtrate density correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020resistivity, "mud filtrate resistivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020resistivity_x0020correction, "mud filtrate resistivity correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020filtrate_x0020salinity_x0020correction, "mud filtrate salinity correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020resistivity, "mud resistivity" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020salinity_x0020correction, "mud salinity correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020viscosity_x0020correction, "mud viscosity correction" },
	{ (LONG64)witsml14__MeasurementType::mud_x0020weight_x0020correction, "mud weight correction" },
	{ (LONG64)witsml14__MeasurementType::neutron_x0020die_x0020away_x0020time, "neutron die away time" },
	{ (LONG64)witsml14__MeasurementType::neutron_x0020porosity, "neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::nuclear_x0020caliper, "nuclear caliper" },
	{ (LONG64)witsml14__MeasurementType::nuclear_x0020magnetic_x0020decay_x0020time, "nuclear magnetic decay time" },
	{ (LONG64)witsml14__MeasurementType::nuclear_x0020magnetism_x0020log_x0020permeability, "nuclear magnetism log permeability" },
	{ (LONG64)witsml14__MeasurementType::nuclear_x0020magnetism_x0020porosity, "nuclear magnetism porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020density_x0020porosity, "OH density porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020dolomite_x0020density_x0020porosity, "OH dolomite density porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020dolomite_x0020neutron_x0020porosity, "OH dolomite neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020limestone_x0020density_x0020porosity, "OH limestone density porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020limestone_x0020neutron_x0020porosity, "OH limestone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020neutron_x0020porosity, "OH neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020sandstone_x0020density_x0020porosity, "OH sandstone density porosity" },
	{ (LONG64)witsml14__MeasurementType::OH_x0020sandstone_x0020neutron_x0020porosity, "OH sandstone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::oil_x0020based_x0020mud_x0020correction, "oil based mud correction" },
	{ (LONG64)witsml14__MeasurementType::oil_x0020saturation, "oil saturation" },
	{ (LONG64)witsml14__MeasurementType::perforating, "perforating" },
	{ (LONG64)witsml14__MeasurementType::permeability, "permeability" },
	{ (LONG64)witsml14__MeasurementType::phase_x0020shift, "phase shift" },
	{ (LONG64)witsml14__MeasurementType::photoelectric_x0020absorption, "photoelectric absorption" },
	{ (LONG64)witsml14__MeasurementType::photoelectric_x0020absorption_x0020correction, "photoelectric absorption correction" },
	{ (LONG64)witsml14__MeasurementType::physical_x0020measurement_x0020correction, "physical measurement correction" },
	{ (LONG64)witsml14__MeasurementType::plane_x0020angle, "plane angle" },
	{ (LONG64)witsml14__MeasurementType::porosity, "porosity" },
	{ (LONG64)witsml14__MeasurementType::porosity_x0020correction, "porosity correction" },
	{ (LONG64)witsml14__MeasurementType::potassium, "potassium" },
	{ (LONG64)witsml14__MeasurementType::pressure, "pressure" },
	{ (LONG64)witsml14__MeasurementType::pressure_x0020correction, "pressure correction" },
	{ (LONG64)witsml14__MeasurementType::processed, "processed" },
	{ (LONG64)witsml14__MeasurementType::pulsed_x0020neutron_x0020porosity, "pulsed neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::quality, "quality" },
	{ (LONG64)witsml14__MeasurementType::ratio, "ratio" },
	{ (LONG64)witsml14__MeasurementType::raw, "raw" },
	{ (LONG64)witsml14__MeasurementType::relative_x0020bearing, "relative bearing" },
	{ (LONG64)witsml14__MeasurementType::resistivity, "resistivity" },
	{ (LONG64)witsml14__MeasurementType::resistivity_x0020factor_x0020correction, "resistivity factor correction" },
	{ (LONG64)witsml14__MeasurementType::resistivity_x0020from_x0020attenuation, "resistivity from attenuation" },
	{ (LONG64)witsml14__MeasurementType::resistivity_x0020from_x0020phase_x0020shift, "resistivity from phase shift" },
	{ (LONG64)witsml14__MeasurementType::resistivity_x0020phase_x0020shift, "resistivity phase shift" },
	{ (LONG64)witsml14__MeasurementType::resistivity_x0020ratio, "resistivity ratio" },
	{ (LONG64)witsml14__MeasurementType::salinity, "salinity" },
	{ (LONG64)witsml14__MeasurementType::sampling, "sampling" },
	{ (LONG64)witsml14__MeasurementType::sandstone_x0020acoustic_x0020porosity, "sandstone acoustic porosity" },
	{ (LONG64)witsml14__MeasurementType::sandstone_x0020density_x0020porosity, "sandstone density porosity" },
	{ (LONG64)witsml14__MeasurementType::sandstone_x0020neutron_x0020porosity, "sandstone neutron porosity" },
	{ (LONG64)witsml14__MeasurementType::saturation, "saturation" },
	{ (LONG64)witsml14__MeasurementType::shale_x0020volume, "shale volume" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020conductivity, "shallow conductivity" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020induction_x0020conductivity, "shallow induction conductivity" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020induction_x0020resistivity, "shallow induction resistivity" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020laterolog_x0020conductivity, "shallow laterolog conductivity" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020laterolog_x0020resistivity, "shallow laterolog resistivity" },
	{ (LONG64)witsml14__MeasurementType::shallow_x0020resistivity, "shallow resistivity" },
	{ (LONG64)witsml14__MeasurementType::shear_x0020wave_x0020dolomite_x0020porosity, "shear wave dolomite porosity" },
	{ (LONG64)witsml14__MeasurementType::shear_x0020wave_x0020limestone_x0020porosity, "shear wave limestone porosity" },
	{ (LONG64)witsml14__MeasurementType::shear_x0020wave_x0020matrix_x0020travel_x0020time, "shear wave matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::shear_x0020wave_x0020sandstone_x0020porosity, "shear wave sandstone porosity" },
	{ (LONG64)witsml14__MeasurementType::shear_x0020wave_x0020travel_x0020time, "shear wave travel time" },
	{ (LONG64)witsml14__MeasurementType::shifted, "shifted" },
	{ (LONG64)witsml14__MeasurementType::sidewall_x0020core_x0020porosity, "sidewall core porosity" },
	{ (LONG64)witsml14__MeasurementType::sigma, "sigma" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020formation, "sigma formation" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020gas, "sigma gas" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020hydrocarbon, "sigma hydrocarbon" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020matrix, "sigma matrix" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020oil, "sigma oil" },
	{ (LONG64)witsml14__MeasurementType::sigma_x0020water, "sigma water" },
	{ (LONG64)witsml14__MeasurementType::slippage_x0020velocity_x0020correction, "slippage velocity correction" },
	{ (LONG64)witsml14__MeasurementType::smoothed, "smoothed" },
	{ (LONG64)witsml14__MeasurementType::spectral_x0020gamma_x0020ray, "spectral gamma ray" },
	{ (LONG64)witsml14__MeasurementType::spherically_x0020focused_x0020conductivity, "spherically focused conductivity" },
	{ (LONG64)witsml14__MeasurementType::spherically_x0020focused_x0020resistivity, "spherically focused resistivity" },
	{ (LONG64)witsml14__MeasurementType::spontaneous_x0020potential, "spontaneous potential" },
	{ (LONG64)witsml14__MeasurementType::spreading_x0020loss_x0020correction, "spreading loss correction" },
	{ (LONG64)witsml14__MeasurementType::synthetic_x0020well_x0020log_x0020trace, "synthetic well log trace" },
	{ (LONG64)witsml14__MeasurementType::temperature, "temperature" },
	{ (LONG64)witsml14__MeasurementType::temperature_x0020correction, "temperature correction" },
	{ (LONG64)witsml14__MeasurementType::tension, "tension" },
	{ (LONG64)witsml14__MeasurementType::Th_x002fK_x0020ratio, "Th/K ratio" },
	{ (LONG64)witsml14__MeasurementType::thorium, "thorium" },
	{ (LONG64)witsml14__MeasurementType::time, "time" },
	{ (LONG64)witsml14__MeasurementType::tool_x0020diameter_x0020correction, "tool diameter correction" },
	{ (LONG64)witsml14__MeasurementType::tool_x0020eccentricity_x0020correction, "tool eccentricity correction" },
	{ (LONG64)witsml14__MeasurementType::total_x0020gamma_x0020ray, "total gamma ray" },
	{ (LONG64)witsml14__MeasurementType::total_x0020porosity, "total porosity" },
	{ (LONG64)witsml14__MeasurementType::tracer_x0020survey, "tracer survey" },
	{ (LONG64)witsml14__MeasurementType::travel_x0020time, "travel time" },
	{ (LONG64)witsml14__MeasurementType::true_x0020conductivity, "true conductivity" },
	{ (LONG64)witsml14__MeasurementType::true_x0020resistivity, "true resistivity" },
	{ (LONG64)witsml14__MeasurementType::true_x0020vertical_x0020depth, "true vertical depth" },
	{ (LONG64)witsml14__MeasurementType::tube_x0020wave_x0020dolomite_x0020porosity, "tube wave dolomite porosity" },
	{ (LONG64)witsml14__MeasurementType::tube_x0020wave_x0020limestone_x0020porosity, "tube wave limestone porosity" },
	{ (LONG64)witsml14__MeasurementType::tube_x0020wave_x0020matrix_x0020travel_x0020time, "tube wave matrix travel time" },
	{ (LONG64)witsml14__MeasurementType::tube_x0020wave_x0020sandstone_x0020porosity, "tube wave sandstone porosity" },
	{ (LONG64)witsml14__MeasurementType::tube_x0020wave_x0020travel_x0020time, "tube wave travel time" },
	{ (LONG64)witsml14__MeasurementType::uranium, "uranium" },
	{ (LONG64)witsml14__MeasurementType::velocity, "velocity" },
	{ (LONG64)witsml14__MeasurementType::volume, "volume" },
	{ (LONG64)witsml14__MeasurementType::water_x0020based_x0020fluid_x0020correction, "water based fluid correction" },
	{ (LONG64)witsml14__MeasurementType::water_x0020holdup_x0020correction, "water holdup correction" },
	{ (LONG64)witsml14__MeasurementType::water_x0020saturated_x0020conductivity, "water saturated conductivity" },
	{ (LONG64)witsml14__MeasurementType::water_x0020saturated_x0020resistivity, "water saturated resistivity" },
	{ (LONG64)witsml14__MeasurementType::water_x0020saturation, "water saturation" },
	{ (LONG64)witsml14__MeasurementType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MeasurementType2s(struct soap *soap, witsml14__MeasurementType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MeasurementType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MeasurementType(struct soap *soap, const char *tag, int id, const witsml14__MeasurementType *a, const char *type)
{
	if (!type)
		type = "witsml14:MeasurementType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType), type) || soap_send(soap, soap_witsml14__MeasurementType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MeasurementType(struct soap *soap, const char *s, witsml14__MeasurementType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MeasurementType, s);
	if (map)
		*a = (witsml14__MeasurementType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MeasurementType * SOAP_FMAC4 soap_in_witsml14__MeasurementType(struct soap *soap, const char *tag, witsml14__MeasurementType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MeasurementType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType, sizeof(witsml14__MeasurementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MeasurementType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MeasurementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasurementType, sizeof(witsml14__MeasurementType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MeasurementType * SOAP_FMAC4 soap_new_witsml14__MeasurementType(struct soap *soap, int n)
{
	witsml14__MeasurementType *a = static_cast<witsml14__MeasurementType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MeasurementType)));
	for (witsml14__MeasurementType *p = a; p && n--; ++p)
		soap_default_witsml14__MeasurementType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MeasurementType(struct soap *soap, const witsml14__MeasurementType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MeasurementType(soap, tag ? tag : "witsml14:MeasurementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MeasurementType * SOAP_FMAC4 soap_get_witsml14__MeasurementType(struct soap *soap, witsml14__MeasurementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MeasurementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MaterialType[] =
{	{ (LONG64)witsml14__MaterialType::aluminum, "aluminum" },
	{ (LONG64)witsml14__MaterialType::beryllium_x0020copper, "beryllium copper" },
	{ (LONG64)witsml14__MaterialType::chrome_x0020alloy, "chrome alloy" },
	{ (LONG64)witsml14__MaterialType::composite, "composite" },
	{ (LONG64)witsml14__MaterialType::other, "other" },
	{ (LONG64)witsml14__MaterialType::non_magnetic_x0020steel, "non-magnetic steel" },
	{ (LONG64)witsml14__MaterialType::plastic, "plastic" },
	{ (LONG64)witsml14__MaterialType::steel, "steel" },
	{ (LONG64)witsml14__MaterialType::steel_x0020alloy, "steel alloy" },
	{ (LONG64)witsml14__MaterialType::titanium, "titanium" },
	{ (LONG64)witsml14__MaterialType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MaterialType2s(struct soap *soap, witsml14__MaterialType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MaterialType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MaterialType(struct soap *soap, const char *tag, int id, const witsml14__MaterialType *a, const char *type)
{
	if (!type)
		type = "witsml14:MaterialType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType), type) || soap_send(soap, soap_witsml14__MaterialType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MaterialType(struct soap *soap, const char *s, witsml14__MaterialType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MaterialType, s);
	if (map)
		*a = (witsml14__MaterialType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MaterialType * SOAP_FMAC4 soap_in_witsml14__MaterialType(struct soap *soap, const char *tag, witsml14__MaterialType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MaterialType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType, sizeof(witsml14__MaterialType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MaterialType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MaterialType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType, SOAP_TYPE_gsoap_witsml1_4_witsml14__MaterialType, sizeof(witsml14__MaterialType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MaterialType * SOAP_FMAC4 soap_new_witsml14__MaterialType(struct soap *soap, int n)
{
	witsml14__MaterialType *a = static_cast<witsml14__MaterialType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MaterialType)));
	for (witsml14__MaterialType *p = a; p && n--; ++p)
		soap_default_witsml14__MaterialType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MaterialType(struct soap *soap, const witsml14__MaterialType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MaterialType(soap, tag ? tag : "witsml14:MaterialType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MaterialType * SOAP_FMAC4 soap_get_witsml14__MaterialType(struct soap *soap, witsml14__MaterialType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MaterialType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LogTraceState[] =
{	{ (LONG64)witsml14__LogTraceState::depth_x0020adjusted, "depth adjusted" },
	{ (LONG64)witsml14__LogTraceState::edited, "edited" },
	{ (LONG64)witsml14__LogTraceState::joined, "joined" },
	{ (LONG64)witsml14__LogTraceState::processed, "processed" },
	{ (LONG64)witsml14__LogTraceState::raw, "raw" },
	{ (LONG64)witsml14__LogTraceState::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LogTraceState2s(struct soap *soap, witsml14__LogTraceState n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LogTraceState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LogTraceState(struct soap *soap, const char *tag, int id, const witsml14__LogTraceState *a, const char *type)
{
	if (!type)
		type = "witsml14:LogTraceState";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState), type) || soap_send(soap, soap_witsml14__LogTraceState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LogTraceState(struct soap *soap, const char *s, witsml14__LogTraceState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LogTraceState, s);
	if (map)
		*a = (witsml14__LogTraceState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LogTraceState * SOAP_FMAC4 soap_in_witsml14__LogTraceState(struct soap *soap, const char *tag, witsml14__LogTraceState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LogTraceState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState, sizeof(witsml14__LogTraceState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LogTraceState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LogTraceState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceState, sizeof(witsml14__LogTraceState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LogTraceState * SOAP_FMAC4 soap_new_witsml14__LogTraceState(struct soap *soap, int n)
{
	witsml14__LogTraceState *a = static_cast<witsml14__LogTraceState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LogTraceState)));
	for (witsml14__LogTraceState *p = a; p && n--; ++p)
		soap_default_witsml14__LogTraceState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LogTraceState(struct soap *soap, const witsml14__LogTraceState *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LogTraceState(soap, tag ? tag : "witsml14:LogTraceState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LogTraceState * SOAP_FMAC4 soap_get_witsml14__LogTraceState(struct soap *soap, witsml14__LogTraceState *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LogTraceState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LogTraceOrigin[] =
{	{ (LONG64)witsml14__LogTraceOrigin::realtime, "realtime" },
	{ (LONG64)witsml14__LogTraceOrigin::modeled, "modeled" },
	{ (LONG64)witsml14__LogTraceOrigin::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LogTraceOrigin2s(struct soap *soap, witsml14__LogTraceOrigin n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LogTraceOrigin, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LogTraceOrigin(struct soap *soap, const char *tag, int id, const witsml14__LogTraceOrigin *a, const char *type)
{
	if (!type)
		type = "witsml14:LogTraceOrigin";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin), type) || soap_send(soap, soap_witsml14__LogTraceOrigin2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LogTraceOrigin(struct soap *soap, const char *s, witsml14__LogTraceOrigin *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LogTraceOrigin, s);
	if (map)
		*a = (witsml14__LogTraceOrigin)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LogTraceOrigin * SOAP_FMAC4 soap_in_witsml14__LogTraceOrigin(struct soap *soap, const char *tag, witsml14__LogTraceOrigin *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LogTraceOrigin*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin, sizeof(witsml14__LogTraceOrigin), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LogTraceOrigin(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LogTraceOrigin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogTraceOrigin, sizeof(witsml14__LogTraceOrigin), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LogTraceOrigin * SOAP_FMAC4 soap_new_witsml14__LogTraceOrigin(struct soap *soap, int n)
{
	witsml14__LogTraceOrigin *a = static_cast<witsml14__LogTraceOrigin *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LogTraceOrigin)));
	for (witsml14__LogTraceOrigin *p = a; p && n--; ++p)
		soap_default_witsml14__LogTraceOrigin(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LogTraceOrigin(struct soap *soap, const witsml14__LogTraceOrigin *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LogTraceOrigin(soap, tag ? tag : "witsml14:LogTraceOrigin", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LogTraceOrigin * SOAP_FMAC4 soap_get_witsml14__LogTraceOrigin(struct soap *soap, witsml14__LogTraceOrigin *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LogTraceOrigin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LogIndexType[] =
{	{ (LONG64)witsml14__LogIndexType::date_x0020time, "date time" },
	{ (LONG64)witsml14__LogIndexType::elapsed_x0020time, "elapsed time" },
	{ (LONG64)witsml14__LogIndexType::length, "length" },
	{ (LONG64)witsml14__LogIndexType::measured_x0020depth, "measured depth" },
	{ (LONG64)witsml14__LogIndexType::vertical_x0020depth, "vertical depth" },
	{ (LONG64)witsml14__LogIndexType::other, "other" },
	{ (LONG64)witsml14__LogIndexType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LogIndexType2s(struct soap *soap, witsml14__LogIndexType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LogIndexType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LogIndexType(struct soap *soap, const char *tag, int id, const witsml14__LogIndexType *a, const char *type)
{
	if (!type)
		type = "witsml14:LogIndexType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType), type) || soap_send(soap, soap_witsml14__LogIndexType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LogIndexType(struct soap *soap, const char *s, witsml14__LogIndexType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LogIndexType, s);
	if (map)
		*a = (witsml14__LogIndexType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LogIndexType * SOAP_FMAC4 soap_in_witsml14__LogIndexType(struct soap *soap, const char *tag, witsml14__LogIndexType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LogIndexType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType, sizeof(witsml14__LogIndexType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LogIndexType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LogIndexType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexType, sizeof(witsml14__LogIndexType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LogIndexType * SOAP_FMAC4 soap_new_witsml14__LogIndexType(struct soap *soap, int n)
{
	witsml14__LogIndexType *a = static_cast<witsml14__LogIndexType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LogIndexType)));
	for (witsml14__LogIndexType *p = a; p && n--; ++p)
		soap_default_witsml14__LogIndexType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LogIndexType(struct soap *soap, const witsml14__LogIndexType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LogIndexType(soap, tag ? tag : "witsml14:LogIndexType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LogIndexType * SOAP_FMAC4 soap_get_witsml14__LogIndexType(struct soap *soap, witsml14__LogIndexType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LogIndexType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LogIndexDirection[] =
{	{ (LONG64)witsml14__LogIndexDirection::decreasing, "decreasing" },
	{ (LONG64)witsml14__LogIndexDirection::increasing, "increasing" },
	{ (LONG64)witsml14__LogIndexDirection::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LogIndexDirection2s(struct soap *soap, witsml14__LogIndexDirection n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LogIndexDirection, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LogIndexDirection(struct soap *soap, const char *tag, int id, const witsml14__LogIndexDirection *a, const char *type)
{
	if (!type)
		type = "witsml14:LogIndexDirection";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection), type) || soap_send(soap, soap_witsml14__LogIndexDirection2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LogIndexDirection(struct soap *soap, const char *s, witsml14__LogIndexDirection *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LogIndexDirection, s);
	if (map)
		*a = (witsml14__LogIndexDirection)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LogIndexDirection * SOAP_FMAC4 soap_in_witsml14__LogIndexDirection(struct soap *soap, const char *tag, witsml14__LogIndexDirection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LogIndexDirection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection, sizeof(witsml14__LogIndexDirection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LogIndexDirection(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LogIndexDirection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogIndexDirection, sizeof(witsml14__LogIndexDirection), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LogIndexDirection * SOAP_FMAC4 soap_new_witsml14__LogIndexDirection(struct soap *soap, int n)
{
	witsml14__LogIndexDirection *a = static_cast<witsml14__LogIndexDirection *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LogIndexDirection)));
	for (witsml14__LogIndexDirection *p = a; p && n--; ++p)
		soap_default_witsml14__LogIndexDirection(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LogIndexDirection(struct soap *soap, const witsml14__LogIndexDirection *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LogIndexDirection(soap, tag ? tag : "witsml14:LogIndexDirection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LogIndexDirection * SOAP_FMAC4 soap_get_witsml14__LogIndexDirection(struct soap *soap, witsml14__LogIndexDirection *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LogIndexDirection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LogDataType[] =
{	{ (LONG64)witsml14__LogDataType::byte, "byte" },
	{ (LONG64)witsml14__LogDataType::date_x0020time, "date time" },
	{ (LONG64)witsml14__LogDataType::double_, "double" },
	{ (LONG64)witsml14__LogDataType::float_, "float" },
	{ (LONG64)witsml14__LogDataType::int_, "int" },
	{ (LONG64)witsml14__LogDataType::long_, "long" },
	{ (LONG64)witsml14__LogDataType::short_, "short" },
	{ (LONG64)witsml14__LogDataType::string, "string" },
	{ (LONG64)witsml14__LogDataType::string40, "string40" },
	{ (LONG64)witsml14__LogDataType::string16, "string16" },
	{ (LONG64)witsml14__LogDataType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LogDataType2s(struct soap *soap, witsml14__LogDataType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LogDataType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LogDataType(struct soap *soap, const char *tag, int id, const witsml14__LogDataType *a, const char *type)
{
	if (!type)
		type = "witsml14:LogDataType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType), type) || soap_send(soap, soap_witsml14__LogDataType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LogDataType(struct soap *soap, const char *s, witsml14__LogDataType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LogDataType, s);
	if (map)
		*a = (witsml14__LogDataType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LogDataType * SOAP_FMAC4 soap_in_witsml14__LogDataType(struct soap *soap, const char *tag, witsml14__LogDataType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LogDataType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType, sizeof(witsml14__LogDataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LogDataType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LogDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType, SOAP_TYPE_gsoap_witsml1_4_witsml14__LogDataType, sizeof(witsml14__LogDataType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LogDataType * SOAP_FMAC4 soap_new_witsml14__LogDataType(struct soap *soap, int n)
{
	witsml14__LogDataType *a = static_cast<witsml14__LogDataType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LogDataType)));
	for (witsml14__LogDataType *p = a; p && n--; ++p)
		soap_default_witsml14__LogDataType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LogDataType(struct soap *soap, const witsml14__LogDataType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LogDataType(soap, tag ? tag : "witsml14:LogDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LogDataType * SOAP_FMAC4 soap_get_witsml14__LogDataType(struct soap *soap, witsml14__LogDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LogDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LithostratigraphyUnit[] =
{	{ (LONG64)witsml14__LithostratigraphyUnit::group, "group" },
	{ (LONG64)witsml14__LithostratigraphyUnit::formation, "formation" },
	{ (LONG64)witsml14__LithostratigraphyUnit::member, "member" },
	{ (LONG64)witsml14__LithostratigraphyUnit::bed, "bed" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LithostratigraphyUnit2s(struct soap *soap, witsml14__LithostratigraphyUnit n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LithostratigraphyUnit, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LithostratigraphyUnit(struct soap *soap, const char *tag, int id, const witsml14__LithostratigraphyUnit *a, const char *type)
{
	if (!type)
		type = "witsml14:LithostratigraphyUnit";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit), type) || soap_send(soap, soap_witsml14__LithostratigraphyUnit2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LithostratigraphyUnit(struct soap *soap, const char *s, witsml14__LithostratigraphyUnit *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LithostratigraphyUnit, s);
	if (map)
		*a = (witsml14__LithostratigraphyUnit)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LithostratigraphyUnit * SOAP_FMAC4 soap_in_witsml14__LithostratigraphyUnit(struct soap *soap, const char *tag, witsml14__LithostratigraphyUnit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LithostratigraphyUnit*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit, sizeof(witsml14__LithostratigraphyUnit), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LithostratigraphyUnit(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LithostratigraphyUnit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit, sizeof(witsml14__LithostratigraphyUnit), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LithostratigraphyUnit * SOAP_FMAC4 soap_new_witsml14__LithostratigraphyUnit(struct soap *soap, int n)
{
	witsml14__LithostratigraphyUnit *a = static_cast<witsml14__LithostratigraphyUnit *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LithostratigraphyUnit)));
	for (witsml14__LithostratigraphyUnit *p = a; p && n--; ++p)
		soap_default_witsml14__LithostratigraphyUnit(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LithostratigraphyUnit(struct soap *soap, const witsml14__LithostratigraphyUnit *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LithostratigraphyUnit(soap, tag ? tag : "witsml14:LithostratigraphyUnit", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LithostratigraphyUnit * SOAP_FMAC4 soap_get_witsml14__LithostratigraphyUnit(struct soap *soap, witsml14__LithostratigraphyUnit *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LithostratigraphyUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LithologySource[] =
{	{ (LONG64)witsml14__LithologySource::interpreted, "interpreted" },
	{ (LONG64)witsml14__LithologySource::core, "core" },
	{ (LONG64)witsml14__LithologySource::cuttings, "cuttings" },
	{ (LONG64)witsml14__LithologySource::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LithologySource2s(struct soap *soap, witsml14__LithologySource n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LithologySource, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LithologySource(struct soap *soap, const char *tag, int id, const witsml14__LithologySource *a, const char *type)
{
	if (!type)
		type = "witsml14:LithologySource";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource), type) || soap_send(soap, soap_witsml14__LithologySource2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LithologySource(struct soap *soap, const char *s, witsml14__LithologySource *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LithologySource, s);
	if (map)
		*a = (witsml14__LithologySource)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LithologySource * SOAP_FMAC4 soap_in_witsml14__LithologySource(struct soap *soap, const char *tag, witsml14__LithologySource *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LithologySource*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource, sizeof(witsml14__LithologySource), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LithologySource(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LithologySource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithologySource, sizeof(witsml14__LithologySource), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LithologySource * SOAP_FMAC4 soap_new_witsml14__LithologySource(struct soap *soap, int n)
{
	witsml14__LithologySource *a = static_cast<witsml14__LithologySource *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LithologySource)));
	for (witsml14__LithologySource *p = a; p && n--; ++p)
		soap_default_witsml14__LithologySource(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LithologySource(struct soap *soap, const witsml14__LithologySource *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LithologySource(soap, tag ? tag : "witsml14:LithologySource", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LithologySource * SOAP_FMAC4 soap_get_witsml14__LithologySource(struct soap *soap, witsml14__LithologySource *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LithologySource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__JarAction[] =
{	{ (LONG64)witsml14__JarAction::up, "up" },
	{ (LONG64)witsml14__JarAction::down, "down" },
	{ (LONG64)witsml14__JarAction::both, "both" },
	{ (LONG64)witsml14__JarAction::vibrating, "vibrating" },
	{ (LONG64)witsml14__JarAction::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__JarAction2s(struct soap *soap, witsml14__JarAction n)
{
	const char *s = soap_code_str(soap_codes_witsml14__JarAction, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__JarAction(struct soap *soap, const char *tag, int id, const witsml14__JarAction *a, const char *type)
{
	if (!type)
		type = "witsml14:JarAction";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction), type) || soap_send(soap, soap_witsml14__JarAction2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__JarAction(struct soap *soap, const char *s, witsml14__JarAction *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__JarAction, s);
	if (map)
		*a = (witsml14__JarAction)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__JarAction * SOAP_FMAC4 soap_in_witsml14__JarAction(struct soap *soap, const char *tag, witsml14__JarAction *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__JarAction*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction, sizeof(witsml14__JarAction), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__JarAction(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__JarAction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarAction, sizeof(witsml14__JarAction), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__JarAction * SOAP_FMAC4 soap_new_witsml14__JarAction(struct soap *soap, int n)
{
	witsml14__JarAction *a = static_cast<witsml14__JarAction *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__JarAction)));
	for (witsml14__JarAction *p = a; p && n--; ++p)
		soap_default_witsml14__JarAction(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__JarAction(struct soap *soap, const witsml14__JarAction *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__JarAction(soap, tag ? tag : "witsml14:JarAction", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__JarAction * SOAP_FMAC4 soap_get_witsml14__JarAction(struct soap *soap, witsml14__JarAction *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__JarAction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__JarType[] =
{	{ (LONG64)witsml14__JarType::mechanical, "mechanical" },
	{ (LONG64)witsml14__JarType::hydraulic, "hydraulic" },
	{ (LONG64)witsml14__JarType::hydro_x0020mechanical, "hydro mechanical" },
	{ (LONG64)witsml14__JarType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__JarType2s(struct soap *soap, witsml14__JarType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__JarType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__JarType(struct soap *soap, const char *tag, int id, const witsml14__JarType *a, const char *type)
{
	if (!type)
		type = "witsml14:JarType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType), type) || soap_send(soap, soap_witsml14__JarType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__JarType(struct soap *soap, const char *s, witsml14__JarType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__JarType, s);
	if (map)
		*a = (witsml14__JarType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__JarType * SOAP_FMAC4 soap_in_witsml14__JarType(struct soap *soap, const char *tag, witsml14__JarType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__JarType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType, sizeof(witsml14__JarType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__JarType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__JarType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType, SOAP_TYPE_gsoap_witsml1_4_witsml14__JarType, sizeof(witsml14__JarType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__JarType * SOAP_FMAC4 soap_new_witsml14__JarType(struct soap *soap, int n)
{
	witsml14__JarType *a = static_cast<witsml14__JarType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__JarType)));
	for (witsml14__JarType *p = a; p && n--; ++p)
		soap_default_witsml14__JarType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__JarType(struct soap *soap, const witsml14__JarType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__JarType(soap, tag ? tag : "witsml14:JarType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__JarType * SOAP_FMAC4 soap_get_witsml14__JarType(struct soap *soap, witsml14__JarType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__JarType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ItemState[] =
{	{ (LONG64)witsml14__ItemState::actual, "actual" },
	{ (LONG64)witsml14__ItemState::model, "model" },
	{ (LONG64)witsml14__ItemState::plan, "plan" },
	{ (LONG64)witsml14__ItemState::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ItemState2s(struct soap *soap, witsml14__ItemState n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ItemState, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ItemState(struct soap *soap, const char *tag, int id, const witsml14__ItemState *a, const char *type)
{
	if (!type)
		type = "witsml14:ItemState";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState), type) || soap_send(soap, soap_witsml14__ItemState2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ItemState(struct soap *soap, const char *s, witsml14__ItemState *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ItemState, s);
	if (map)
		*a = (witsml14__ItemState)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ItemState * SOAP_FMAC4 soap_in_witsml14__ItemState(struct soap *soap, const char *tag, witsml14__ItemState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ItemState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState, sizeof(witsml14__ItemState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ItemState(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ItemState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState, sizeof(witsml14__ItemState), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ItemState * SOAP_FMAC4 soap_new_witsml14__ItemState(struct soap *soap, int n)
{
	witsml14__ItemState *a = static_cast<witsml14__ItemState *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ItemState)));
	for (witsml14__ItemState *p = a; p && n--; ++p)
		soap_default_witsml14__ItemState(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ItemState(struct soap *soap, const witsml14__ItemState *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ItemState(soap, tag ? tag : "witsml14:ItemState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ItemState * SOAP_FMAC4 soap_get_witsml14__ItemState(struct soap *soap, witsml14__ItemState *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ItemState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__InnerBarrelType[] =
{	{ (LONG64)witsml14__InnerBarrelType::undifferented, "undifferented" },
	{ (LONG64)witsml14__InnerBarrelType::aluminum, "aluminum" },
	{ (LONG64)witsml14__InnerBarrelType::gel, "gel" },
	{ (LONG64)witsml14__InnerBarrelType::fiberglass, "fiberglass" },
	{ (LONG64)witsml14__InnerBarrelType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__InnerBarrelType2s(struct soap *soap, witsml14__InnerBarrelType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__InnerBarrelType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__InnerBarrelType(struct soap *soap, const char *tag, int id, const witsml14__InnerBarrelType *a, const char *type)
{
	if (!type)
		type = "witsml14:InnerBarrelType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType), type) || soap_send(soap, soap_witsml14__InnerBarrelType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__InnerBarrelType(struct soap *soap, const char *s, witsml14__InnerBarrelType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__InnerBarrelType, s);
	if (map)
		*a = (witsml14__InnerBarrelType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__InnerBarrelType * SOAP_FMAC4 soap_in_witsml14__InnerBarrelType(struct soap *soap, const char *tag, witsml14__InnerBarrelType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__InnerBarrelType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType, sizeof(witsml14__InnerBarrelType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__InnerBarrelType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__InnerBarrelType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType, SOAP_TYPE_gsoap_witsml1_4_witsml14__InnerBarrelType, sizeof(witsml14__InnerBarrelType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__InnerBarrelType * SOAP_FMAC4 soap_new_witsml14__InnerBarrelType(struct soap *soap, int n)
{
	witsml14__InnerBarrelType *a = static_cast<witsml14__InnerBarrelType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__InnerBarrelType)));
	for (witsml14__InnerBarrelType *p = a; p && n--; ++p)
		soap_default_witsml14__InnerBarrelType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__InnerBarrelType(struct soap *soap, const witsml14__InnerBarrelType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__InnerBarrelType(soap, tag ? tag : "witsml14:InnerBarrelType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__InnerBarrelType * SOAP_FMAC4 soap_get_witsml14__InnerBarrelType(struct soap *soap, witsml14__InnerBarrelType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__InnerBarrelType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__HoleOpenerType[] =
{	{ (LONG64)witsml14__HoleOpenerType::under_reamer, "under-reamer" },
	{ (LONG64)witsml14__HoleOpenerType::fixed_x0020blade, "fixed blade" },
	{ (LONG64)witsml14__HoleOpenerType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__HoleOpenerType2s(struct soap *soap, witsml14__HoleOpenerType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__HoleOpenerType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__HoleOpenerType(struct soap *soap, const char *tag, int id, const witsml14__HoleOpenerType *a, const char *type)
{
	if (!type)
		type = "witsml14:HoleOpenerType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType), type) || soap_send(soap, soap_witsml14__HoleOpenerType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__HoleOpenerType(struct soap *soap, const char *s, witsml14__HoleOpenerType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__HoleOpenerType, s);
	if (map)
		*a = (witsml14__HoleOpenerType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__HoleOpenerType * SOAP_FMAC4 soap_in_witsml14__HoleOpenerType(struct soap *soap, const char *tag, witsml14__HoleOpenerType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__HoleOpenerType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType, sizeof(witsml14__HoleOpenerType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__HoleOpenerType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__HoleOpenerType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleOpenerType, sizeof(witsml14__HoleOpenerType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__HoleOpenerType * SOAP_FMAC4 soap_new_witsml14__HoleOpenerType(struct soap *soap, int n)
{
	witsml14__HoleOpenerType *a = static_cast<witsml14__HoleOpenerType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__HoleOpenerType)));
	for (witsml14__HoleOpenerType *p = a; p && n--; ++p)
		soap_default_witsml14__HoleOpenerType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__HoleOpenerType(struct soap *soap, const witsml14__HoleOpenerType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__HoleOpenerType(soap, tag ? tag : "witsml14:HoleOpenerType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__HoleOpenerType * SOAP_FMAC4 soap_get_witsml14__HoleOpenerType(struct soap *soap, witsml14__HoleOpenerType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__HoleOpenerType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__HoleCasingType[] =
{	{ (LONG64)witsml14__HoleCasingType::blow_x0020out_x0020preventer, "blow out preventer" },
	{ (LONG64)witsml14__HoleCasingType::casing, "casing" },
	{ (LONG64)witsml14__HoleCasingType::conductor, "conductor" },
	{ (LONG64)witsml14__HoleCasingType::curved_x0020conductor, "curved conductor" },
	{ (LONG64)witsml14__HoleCasingType::liner, "liner" },
	{ (LONG64)witsml14__HoleCasingType::open_x0020hole, "open hole" },
	{ (LONG64)witsml14__HoleCasingType::riser, "riser" },
	{ (LONG64)witsml14__HoleCasingType::tubing, "tubing" },
	{ (LONG64)witsml14__HoleCasingType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__HoleCasingType2s(struct soap *soap, witsml14__HoleCasingType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__HoleCasingType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__HoleCasingType(struct soap *soap, const char *tag, int id, const witsml14__HoleCasingType *a, const char *type)
{
	if (!type)
		type = "witsml14:HoleCasingType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType), type) || soap_send(soap, soap_witsml14__HoleCasingType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__HoleCasingType(struct soap *soap, const char *s, witsml14__HoleCasingType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__HoleCasingType, s);
	if (map)
		*a = (witsml14__HoleCasingType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__HoleCasingType * SOAP_FMAC4 soap_in_witsml14__HoleCasingType(struct soap *soap, const char *tag, witsml14__HoleCasingType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__HoleCasingType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType, sizeof(witsml14__HoleCasingType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__HoleCasingType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__HoleCasingType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType, SOAP_TYPE_gsoap_witsml1_4_witsml14__HoleCasingType, sizeof(witsml14__HoleCasingType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__HoleCasingType * SOAP_FMAC4 soap_new_witsml14__HoleCasingType(struct soap *soap, int n)
{
	witsml14__HoleCasingType *a = static_cast<witsml14__HoleCasingType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__HoleCasingType)));
	for (witsml14__HoleCasingType *p = a; p && n--; ++p)
		soap_default_witsml14__HoleCasingType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__HoleCasingType(struct soap *soap, const witsml14__HoleCasingType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__HoleCasingType(soap, tag ? tag : "witsml14:HoleCasingType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__HoleCasingType * SOAP_FMAC4 soap_get_witsml14__HoleCasingType(struct soap *soap, witsml14__HoleCasingType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__HoleCasingType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__Hemispheres[] =
{	{ (LONG64)witsml14__Hemispheres::northern, "northern" },
	{ (LONG64)witsml14__Hemispheres::southern, "southern" },
	{ (LONG64)witsml14__Hemispheres::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__Hemispheres2s(struct soap *soap, witsml14__Hemispheres n)
{
	const char *s = soap_code_str(soap_codes_witsml14__Hemispheres, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__Hemispheres(struct soap *soap, const char *tag, int id, const witsml14__Hemispheres *a, const char *type)
{
	if (!type)
		type = "witsml14:Hemispheres";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres), type) || soap_send(soap, soap_witsml14__Hemispheres2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__Hemispheres(struct soap *soap, const char *s, witsml14__Hemispheres *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__Hemispheres, s);
	if (map)
		*a = (witsml14__Hemispheres)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__Hemispheres * SOAP_FMAC4 soap_in_witsml14__Hemispheres(struct soap *soap, const char *tag, witsml14__Hemispheres *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__Hemispheres*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres, sizeof(witsml14__Hemispheres), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__Hemispheres(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__Hemispheres *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres, sizeof(witsml14__Hemispheres), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__Hemispheres * SOAP_FMAC4 soap_new_witsml14__Hemispheres(struct soap *soap, int n)
{
	witsml14__Hemispheres *a = static_cast<witsml14__Hemispheres *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__Hemispheres)));
	for (witsml14__Hemispheres *p = a; p && n--; ++p)
		soap_default_witsml14__Hemispheres(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__Hemispheres(struct soap *soap, const witsml14__Hemispheres *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__Hemispheres(soap, tag ? tag : "witsml14:Hemispheres", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Hemispheres * SOAP_FMAC4 soap_get_witsml14__Hemispheres(struct soap *soap, witsml14__Hemispheres *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__Hemispheres(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__GeodeticDatum[] =
{	{ (LONG64)witsml14__GeodeticDatum::ADND, "ADND" },
	{ (LONG64)witsml14__GeodeticDatum::ARC50, "ARC50" },
	{ (LONG64)witsml14__GeodeticDatum::AUSG, "AUSG" },
	{ (LONG64)witsml14__GeodeticDatum::CAA, "CAA" },
	{ (LONG64)witsml14__GeodeticDatum::CHAS, "CHAS" },
	{ (LONG64)witsml14__GeodeticDatum::CORAL, "CORAL" },
	{ (LONG64)witsml14__GeodeticDatum::ED50, "ED50" },
	{ (LONG64)witsml14__GeodeticDatum::ED87, "ED87" },
	{ (LONG64)witsml14__GeodeticDatum::ERIN65, "ERIN65" },
	{ (LONG64)witsml14__GeodeticDatum::GD49, "GD49" },
	{ (LONG64)witsml14__GeodeticDatum::GHANA, "GHANA" },
	{ (LONG64)witsml14__GeodeticDatum::GUAM63, "GUAM63" },
	{ (LONG64)witsml14__GeodeticDatum::HJRS55, "HJRS55" },
	{ (LONG64)witsml14__GeodeticDatum::HTS, "HTS" },
	{ (LONG64)witsml14__GeodeticDatum::INCH, "INCH" },
	{ (LONG64)witsml14__GeodeticDatum::INDIA1, "INDIA1" },
	{ (LONG64)witsml14__GeodeticDatum::INDIA2, "INDIA2" },
	{ (LONG64)witsml14__GeodeticDatum::INDNS74, "INDNS74" },
	{ (LONG64)witsml14__GeodeticDatum::LIB64, "LIB64" },
	{ (LONG64)witsml14__GeodeticDatum::LUZON, "LUZON" },
	{ (LONG64)witsml14__GeodeticDatum::MRCH, "MRCH" },
	{ (LONG64)witsml14__GeodeticDatum::NAD27, "NAD27" },
	{ (LONG64)witsml14__GeodeticDatum::NAD83, "NAD83" },
	{ (LONG64)witsml14__GeodeticDatum::NGRA, "NGRA" },
	{ (LONG64)witsml14__GeodeticDatum::None, "None" },
	{ (LONG64)witsml14__GeodeticDatum::NPRM, "NPRM" },
	{ (LONG64)witsml14__GeodeticDatum::OSGB36, "OSGB36" },
	{ (LONG64)witsml14__GeodeticDatum::POTS1, "POTS1" },
	{ (LONG64)witsml14__GeodeticDatum::PULK1, "PULK1" },
	{ (LONG64)witsml14__GeodeticDatum::PULK2, "PULK2" },
	{ (LONG64)witsml14__GeodeticDatum::QRNQ, "QRNQ" },
	{ (LONG64)witsml14__GeodeticDatum::SA56, "SA56" },
	{ (LONG64)witsml14__GeodeticDatum::SRL60, "SRL60" },
	{ (LONG64)witsml14__GeodeticDatum::TNRV25, "TNRV25" },
	{ (LONG64)witsml14__GeodeticDatum::TOKYO, "TOKYO" },
	{ (LONG64)witsml14__GeodeticDatum::UserDefined, "UserDefined" },
	{ (LONG64)witsml14__GeodeticDatum::VROL, "VROL" },
	{ (LONG64)witsml14__GeodeticDatum::WGS72, "WGS72" },
	{ (LONG64)witsml14__GeodeticDatum::WGS84, "WGS84" },
	{ (LONG64)witsml14__GeodeticDatum::YACR, "YACR" },
	{ (LONG64)witsml14__GeodeticDatum::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__GeodeticDatum2s(struct soap *soap, witsml14__GeodeticDatum n)
{
	const char *s = soap_code_str(soap_codes_witsml14__GeodeticDatum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__GeodeticDatum(struct soap *soap, const char *tag, int id, const witsml14__GeodeticDatum *a, const char *type)
{
	if (!type)
		type = "witsml14:GeodeticDatum";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum), type) || soap_send(soap, soap_witsml14__GeodeticDatum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__GeodeticDatum(struct soap *soap, const char *s, witsml14__GeodeticDatum *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__GeodeticDatum, s);
	if (map)
		*a = (witsml14__GeodeticDatum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__GeodeticDatum * SOAP_FMAC4 soap_in_witsml14__GeodeticDatum(struct soap *soap, const char *tag, witsml14__GeodeticDatum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__GeodeticDatum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum, sizeof(witsml14__GeodeticDatum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__GeodeticDatum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__GeodeticDatum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum, sizeof(witsml14__GeodeticDatum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__GeodeticDatum * SOAP_FMAC4 soap_new_witsml14__GeodeticDatum(struct soap *soap, int n)
{
	witsml14__GeodeticDatum *a = static_cast<witsml14__GeodeticDatum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__GeodeticDatum)));
	for (witsml14__GeodeticDatum *p = a; p && n--; ++p)
		soap_default_witsml14__GeodeticDatum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__GeodeticDatum(struct soap *soap, const witsml14__GeodeticDatum *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__GeodeticDatum(soap, tag ? tag : "witsml14:GeodeticDatum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__GeodeticDatum * SOAP_FMAC4 soap_get_witsml14__GeodeticDatum(struct soap *soap, witsml14__GeodeticDatum *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__GeodeticDatum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__GasPeakType[] =
{	{ (LONG64)witsml14__GasPeakType::circulating_x0020background_x0020gas, "circulating background gas" },
	{ (LONG64)witsml14__GasPeakType::connection_x0020gas, "connection gas" },
	{ (LONG64)witsml14__GasPeakType::drilling_x0020background_x0020gas, "drilling background gas" },
	{ (LONG64)witsml14__GasPeakType::drilling_x0020gas_x0020peak, "drilling gas peak" },
	{ (LONG64)witsml14__GasPeakType::flow_x0020check_x0020gas, "flow check gas" },
	{ (LONG64)witsml14__GasPeakType::no_x0020readings, "no readings" },
	{ (LONG64)witsml14__GasPeakType::other, "other" },
	{ (LONG64)witsml14__GasPeakType::shut_x0020down_x0020gas, "shut down gas" },
	{ (LONG64)witsml14__GasPeakType::trip_x0020gas, "trip gas" },
	{ (LONG64)witsml14__GasPeakType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__GasPeakType2s(struct soap *soap, witsml14__GasPeakType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__GasPeakType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__GasPeakType(struct soap *soap, const char *tag, int id, const witsml14__GasPeakType *a, const char *type)
{
	if (!type)
		type = "witsml14:GasPeakType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType), type) || soap_send(soap, soap_witsml14__GasPeakType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__GasPeakType(struct soap *soap, const char *s, witsml14__GasPeakType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__GasPeakType, s);
	if (map)
		*a = (witsml14__GasPeakType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__GasPeakType * SOAP_FMAC4 soap_in_witsml14__GasPeakType(struct soap *soap, const char *tag, witsml14__GasPeakType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__GasPeakType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType, sizeof(witsml14__GasPeakType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__GasPeakType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__GasPeakType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType, SOAP_TYPE_gsoap_witsml1_4_witsml14__GasPeakType, sizeof(witsml14__GasPeakType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__GasPeakType * SOAP_FMAC4 soap_new_witsml14__GasPeakType(struct soap *soap, int n)
{
	witsml14__GasPeakType *a = static_cast<witsml14__GasPeakType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__GasPeakType)));
	for (witsml14__GasPeakType *p = a; p && n--; ++p)
		soap_default_witsml14__GasPeakType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__GasPeakType(struct soap *soap, const witsml14__GasPeakType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__GasPeakType(soap, tag ? tag : "witsml14:GasPeakType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__GasPeakType * SOAP_FMAC4 soap_get_witsml14__GasPeakType(struct soap *soap, witsml14__GasPeakType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__GasPeakType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ErrorModelMisalignmentMode[] =
{	{ (LONG64)witsml14__ErrorModelMisalignmentMode::_1, "1" },
	{ (LONG64)witsml14__ErrorModelMisalignmentMode::_2, "2" },
	{ (LONG64)witsml14__ErrorModelMisalignmentMode::_3, "3" },
	{ (LONG64)witsml14__ErrorModelMisalignmentMode::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ErrorModelMisalignmentMode2s(struct soap *soap, witsml14__ErrorModelMisalignmentMode n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ErrorModelMisalignmentMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ErrorModelMisalignmentMode(struct soap *soap, const char *tag, int id, const witsml14__ErrorModelMisalignmentMode *a, const char *type)
{
	if (!type)
		type = "witsml14:ErrorModelMisalignmentMode";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode), type) || soap_send(soap, soap_witsml14__ErrorModelMisalignmentMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ErrorModelMisalignmentMode(struct soap *soap, const char *s, witsml14__ErrorModelMisalignmentMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ErrorModelMisalignmentMode, s);
	if (map)
		*a = (witsml14__ErrorModelMisalignmentMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ErrorModelMisalignmentMode * SOAP_FMAC4 soap_in_witsml14__ErrorModelMisalignmentMode(struct soap *soap, const char *tag, witsml14__ErrorModelMisalignmentMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ErrorModelMisalignmentMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode, sizeof(witsml14__ErrorModelMisalignmentMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ErrorModelMisalignmentMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ErrorModelMisalignmentMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorModelMisalignmentMode, sizeof(witsml14__ErrorModelMisalignmentMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ErrorModelMisalignmentMode * SOAP_FMAC4 soap_new_witsml14__ErrorModelMisalignmentMode(struct soap *soap, int n)
{
	witsml14__ErrorModelMisalignmentMode *a = static_cast<witsml14__ErrorModelMisalignmentMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ErrorModelMisalignmentMode)));
	for (witsml14__ErrorModelMisalignmentMode *p = a; p && n--; ++p)
		soap_default_witsml14__ErrorModelMisalignmentMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ErrorModelMisalignmentMode(struct soap *soap, const witsml14__ErrorModelMisalignmentMode *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ErrorModelMisalignmentMode(soap, tag ? tag : "witsml14:ErrorModelMisalignmentMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ErrorModelMisalignmentMode * SOAP_FMAC4 soap_get_witsml14__ErrorModelMisalignmentMode(struct soap *soap, witsml14__ErrorModelMisalignmentMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ErrorModelMisalignmentMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ErrorPropagationMode[] =
{	{ (LONG64)witsml14__ErrorPropagationMode::B, "B" },
	{ (LONG64)witsml14__ErrorPropagationMode::R, "R" },
	{ (LONG64)witsml14__ErrorPropagationMode::S, "S" },
	{ (LONG64)witsml14__ErrorPropagationMode::W, "W" },
	{ (LONG64)witsml14__ErrorPropagationMode::G, "G" },
	{ (LONG64)witsml14__ErrorPropagationMode::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ErrorPropagationMode2s(struct soap *soap, witsml14__ErrorPropagationMode n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ErrorPropagationMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ErrorPropagationMode(struct soap *soap, const char *tag, int id, const witsml14__ErrorPropagationMode *a, const char *type)
{
	if (!type)
		type = "witsml14:ErrorPropagationMode";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode), type) || soap_send(soap, soap_witsml14__ErrorPropagationMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ErrorPropagationMode(struct soap *soap, const char *s, witsml14__ErrorPropagationMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ErrorPropagationMode, s);
	if (map)
		*a = (witsml14__ErrorPropagationMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ErrorPropagationMode * SOAP_FMAC4 soap_in_witsml14__ErrorPropagationMode(struct soap *soap, const char *tag, witsml14__ErrorPropagationMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ErrorPropagationMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode, sizeof(witsml14__ErrorPropagationMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ErrorPropagationMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ErrorPropagationMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorPropagationMode, sizeof(witsml14__ErrorPropagationMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ErrorPropagationMode * SOAP_FMAC4 soap_new_witsml14__ErrorPropagationMode(struct soap *soap, int n)
{
	witsml14__ErrorPropagationMode *a = static_cast<witsml14__ErrorPropagationMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ErrorPropagationMode)));
	for (witsml14__ErrorPropagationMode *p = a; p && n--; ++p)
		soap_default_witsml14__ErrorPropagationMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ErrorPropagationMode(struct soap *soap, const witsml14__ErrorPropagationMode *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ErrorPropagationMode(soap, tag ? tag : "witsml14:ErrorPropagationMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ErrorPropagationMode * SOAP_FMAC4 soap_get_witsml14__ErrorPropagationMode(struct soap *soap, witsml14__ErrorPropagationMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ErrorPropagationMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ErrorTermSource[] =
{	{ (LONG64)witsml14__ErrorTermSource::sensor, "sensor" },
	{ (LONG64)witsml14__ErrorTermSource::azimuth_x0020reference, "azimuth reference" },
	{ (LONG64)witsml14__ErrorTermSource::magnetic, "magnetic" },
	{ (LONG64)witsml14__ErrorTermSource::alignment, "alignment" },
	{ (LONG64)witsml14__ErrorTermSource::misalignment, "misalignment" },
	{ (LONG64)witsml14__ErrorTermSource::depth, "depth" },
	{ (LONG64)witsml14__ErrorTermSource::reference, "reference" },
	{ (LONG64)witsml14__ErrorTermSource::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ErrorTermSource2s(struct soap *soap, witsml14__ErrorTermSource n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ErrorTermSource, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ErrorTermSource(struct soap *soap, const char *tag, int id, const witsml14__ErrorTermSource *a, const char *type)
{
	if (!type)
		type = "witsml14:ErrorTermSource";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource), type) || soap_send(soap, soap_witsml14__ErrorTermSource2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ErrorTermSource(struct soap *soap, const char *s, witsml14__ErrorTermSource *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ErrorTermSource, s);
	if (map)
		*a = (witsml14__ErrorTermSource)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ErrorTermSource * SOAP_FMAC4 soap_in_witsml14__ErrorTermSource(struct soap *soap, const char *tag, witsml14__ErrorTermSource *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ErrorTermSource*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource, sizeof(witsml14__ErrorTermSource), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ErrorTermSource(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ErrorTermSource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource, SOAP_TYPE_gsoap_witsml1_4_witsml14__ErrorTermSource, sizeof(witsml14__ErrorTermSource), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ErrorTermSource * SOAP_FMAC4 soap_new_witsml14__ErrorTermSource(struct soap *soap, int n)
{
	witsml14__ErrorTermSource *a = static_cast<witsml14__ErrorTermSource *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ErrorTermSource)));
	for (witsml14__ErrorTermSource *p = a; p && n--; ++p)
		soap_default_witsml14__ErrorTermSource(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ErrorTermSource(struct soap *soap, const witsml14__ErrorTermSource *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ErrorTermSource(soap, tag ? tag : "witsml14:ErrorTermSource", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ErrorTermSource * SOAP_FMAC4 soap_get_witsml14__ErrorTermSource(struct soap *soap, witsml14__ErrorTermSource *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ErrorTermSource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__Ellipsoid[] =
{	{ (LONG64)witsml14__Ellipsoid::AGD66, "AGD66" },
	{ (LONG64)witsml14__Ellipsoid::AIRY_USCOREMOD, "AIRY_MOD" },
	{ (LONG64)witsml14__Ellipsoid::AIRY30, "AIRY30" },
	{ (LONG64)witsml14__Ellipsoid::AIRY49, "AIRY49" },
	{ (LONG64)witsml14__Ellipsoid::AUST_USCORENAT, "AUST_NAT" },
	{ (LONG64)witsml14__Ellipsoid::BESL_DHD, "BESL-DHD" },
	{ (LONG64)witsml14__Ellipsoid::BESL_NGL, "BESL-NGL" },
	{ (LONG64)witsml14__Ellipsoid::BESL_RT9, "BESL-RT9" },
	{ (LONG64)witsml14__Ellipsoid::BESS41, "BESS41" },
	{ (LONG64)witsml14__Ellipsoid::BESSNAM, "BESSNAM" },
	{ (LONG64)witsml14__Ellipsoid::BOGOTA, "BOGOTA" },
	{ (LONG64)witsml14__Ellipsoid::CL58, "CL58" },
	{ (LONG64)witsml14__Ellipsoid::CL58_1, "CL58-1" },
	{ (LONG64)witsml14__Ellipsoid::CL66, "CL66" },
	{ (LONG64)witsml14__Ellipsoid::CL66_M, "CL66-M" },
	{ (LONG64)witsml14__Ellipsoid::CL80, "CL80" },
	{ (LONG64)witsml14__Ellipsoid::CL80_A, "CL80-A" },
	{ (LONG64)witsml14__Ellipsoid::CL80_B, "CL80-B" },
	{ (LONG64)witsml14__Ellipsoid::CL80_I, "CL80-I" },
	{ (LONG64)witsml14__Ellipsoid::CL80_J, "CL80-J" },
	{ (LONG64)witsml14__Ellipsoid::CL80_M, "CL80-M" },
	{ (LONG64)witsml14__Ellipsoid::CL80_P, "CL80-P" },
	{ (LONG64)witsml14__Ellipsoid::CMPOINCH, "CMPOINCH" },
	{ (LONG64)witsml14__Ellipsoid::DAN, "DAN" },
	{ (LONG64)witsml14__Ellipsoid::DELA, "DELA" },
	{ (LONG64)witsml14__Ellipsoid::ED50, "ED50" },
	{ (LONG64)witsml14__Ellipsoid::EGYPT07, "EGYPT07" },
	{ (LONG64)witsml14__Ellipsoid::EVER, "EVER" },
	{ (LONG64)witsml14__Ellipsoid::EVER48, "EVER48" },
	{ (LONG64)witsml14__Ellipsoid::EVER56, "EVER56" },
	{ (LONG64)witsml14__Ellipsoid::EVER69, "EVER69" },
	{ (LONG64)witsml14__Ellipsoid::EVER_BR, "EVER-BR" },
	{ (LONG64)witsml14__Ellipsoid::EVERMOD, "EVERMOD" },
	{ (LONG64)witsml14__Ellipsoid::EVER_P, "EVER-P" },
	{ (LONG64)witsml14__Ellipsoid::EVER_TM, "EVER-TM" },
	{ (LONG64)witsml14__Ellipsoid::EVTM, "EVTM" },
	{ (LONG64)witsml14__Ellipsoid::FISC60, "FISC60" },
	{ (LONG64)witsml14__Ellipsoid::FISC60MOD, "FISC60MOD" },
	{ (LONG64)witsml14__Ellipsoid::FISC68, "FISC68" },
	{ (LONG64)witsml14__Ellipsoid::FISCMOD, "FISCMOD" },
	{ (LONG64)witsml14__Ellipsoid::GDA94, "GDA94" },
	{ (LONG64)witsml14__Ellipsoid::GRS67, "GRS67" },
	{ (LONG64)witsml14__Ellipsoid::GRS80, "GRS80" },
	{ (LONG64)witsml14__Ellipsoid::HAY09, "HAY09" },
	{ (LONG64)witsml14__Ellipsoid::HEIS, "HEIS" },
	{ (LONG64)witsml14__Ellipsoid::HEL06, "HEL06" },
	{ (LONG64)witsml14__Ellipsoid::HEL07, "HEL07" },
	{ (LONG64)witsml14__Ellipsoid::HOUG, "HOUG" },
	{ (LONG64)witsml14__Ellipsoid::IAG_75, "IAG-75" },
	{ (LONG64)witsml14__Ellipsoid::INDIAN75, "INDIAN75" },
	{ (LONG64)witsml14__Ellipsoid::INDO_74, "INDO-74" },
	{ (LONG64)witsml14__Ellipsoid::INT24, "INT24" },
	{ (LONG64)witsml14__Ellipsoid::IUGG67, "IUGG67" },
	{ (LONG64)witsml14__Ellipsoid::IUGG75, "IUGG75" },
	{ (LONG64)witsml14__Ellipsoid::JEFF48, "JEFF48" },
	{ (LONG64)witsml14__Ellipsoid::KAU63, "KAU63" },
	{ (LONG64)witsml14__Ellipsoid::KRSV, "KRSV" },
	{ (LONG64)witsml14__Ellipsoid::MERIT83, "MERIT83" },
	{ (LONG64)witsml14__Ellipsoid::NAD27, "NAD27" },
	{ (LONG64)witsml14__Ellipsoid::NAHRAN, "NAHRAN" },
	{ (LONG64)witsml14__Ellipsoid::NEWINT67, "NEWINT67" },
	{ (LONG64)witsml14__Ellipsoid::NWL_10D, "NWL-10D" },
	{ (LONG64)witsml14__Ellipsoid::NWL_9D, "NWL-9D" },
	{ (LONG64)witsml14__Ellipsoid::OSGB36, "OSGB36" },
	{ (LONG64)witsml14__Ellipsoid::OSU86F, "OSU86F" },
	{ (LONG64)witsml14__Ellipsoid::OSU91A, "OSU91A" },
	{ (LONG64)witsml14__Ellipsoid::PLESSIS_1817, "PLESSIS-1817" },
	{ (LONG64)witsml14__Ellipsoid::PSAD56, "PSAD56" },
	{ (LONG64)witsml14__Ellipsoid::PTNOIRE, "PTNOIRE" },
	{ (LONG64)witsml14__Ellipsoid::SA69, "SA69" },
	{ (LONG64)witsml14__Ellipsoid::SPHR, "SPHR" },
	{ (LONG64)witsml14__Ellipsoid::STRU, "STRU" },
	{ (LONG64)witsml14__Ellipsoid::WALB, "WALB" },
	{ (LONG64)witsml14__Ellipsoid::WAR24, "WAR24" },
	{ (LONG64)witsml14__Ellipsoid::WGS60, "WGS60" },
	{ (LONG64)witsml14__Ellipsoid::WGS66, "WGS66" },
	{ (LONG64)witsml14__Ellipsoid::WGS72, "WGS72" },
	{ (LONG64)witsml14__Ellipsoid::WGS84, "WGS84" },
	{ (LONG64)witsml14__Ellipsoid::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__Ellipsoid2s(struct soap *soap, witsml14__Ellipsoid n)
{
	const char *s = soap_code_str(soap_codes_witsml14__Ellipsoid, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__Ellipsoid(struct soap *soap, const char *tag, int id, const witsml14__Ellipsoid *a, const char *type)
{
	if (!type)
		type = "witsml14:Ellipsoid";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid), type) || soap_send(soap, soap_witsml14__Ellipsoid2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__Ellipsoid(struct soap *soap, const char *s, witsml14__Ellipsoid *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__Ellipsoid, s);
	if (map)
		*a = (witsml14__Ellipsoid)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__Ellipsoid * SOAP_FMAC4 soap_in_witsml14__Ellipsoid(struct soap *soap, const char *tag, witsml14__Ellipsoid *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__Ellipsoid*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid, sizeof(witsml14__Ellipsoid), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__Ellipsoid(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__Ellipsoid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid, sizeof(witsml14__Ellipsoid), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__Ellipsoid * SOAP_FMAC4 soap_new_witsml14__Ellipsoid(struct soap *soap, int n)
{
	witsml14__Ellipsoid *a = static_cast<witsml14__Ellipsoid *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__Ellipsoid)));
	for (witsml14__Ellipsoid *p = a; p && n--; ++p)
		soap_default_witsml14__Ellipsoid(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__Ellipsoid(struct soap *soap, const witsml14__Ellipsoid *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__Ellipsoid(soap, tag ? tag : "witsml14:Ellipsoid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Ellipsoid * SOAP_FMAC4 soap_get_witsml14__Ellipsoid(struct soap *soap, witsml14__Ellipsoid *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__Ellipsoid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ElevCodeEnum[] =
{	{ (LONG64)witsml14__ElevCodeEnum::CF, "CF" },
	{ (LONG64)witsml14__ElevCodeEnum::CV, "CV" },
	{ (LONG64)witsml14__ElevCodeEnum::DF, "DF" },
	{ (LONG64)witsml14__ElevCodeEnum::GL, "GL" },
	{ (LONG64)witsml14__ElevCodeEnum::KB, "KB" },
	{ (LONG64)witsml14__ElevCodeEnum::RB, "RB" },
	{ (LONG64)witsml14__ElevCodeEnum::RT, "RT" },
	{ (LONG64)witsml14__ElevCodeEnum::SF, "SF" },
	{ (LONG64)witsml14__ElevCodeEnum::LAT, "LAT" },
	{ (LONG64)witsml14__ElevCodeEnum::SL, "SL" },
	{ (LONG64)witsml14__ElevCodeEnum::MHHW, "MHHW" },
	{ (LONG64)witsml14__ElevCodeEnum::MHW, "MHW" },
	{ (LONG64)witsml14__ElevCodeEnum::MLLW, "MLLW" },
	{ (LONG64)witsml14__ElevCodeEnum::MLW, "MLW" },
	{ (LONG64)witsml14__ElevCodeEnum::MTL, "MTL" },
	{ (LONG64)witsml14__ElevCodeEnum::KO, "KO" },
	{ (LONG64)witsml14__ElevCodeEnum::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ElevCodeEnum2s(struct soap *soap, witsml14__ElevCodeEnum n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ElevCodeEnum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ElevCodeEnum(struct soap *soap, const char *tag, int id, const witsml14__ElevCodeEnum *a, const char *type)
{
	if (!type)
		type = "witsml14:ElevCodeEnum";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum), type) || soap_send(soap, soap_witsml14__ElevCodeEnum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ElevCodeEnum(struct soap *soap, const char *s, witsml14__ElevCodeEnum *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ElevCodeEnum, s);
	if (map)
		*a = (witsml14__ElevCodeEnum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ElevCodeEnum * SOAP_FMAC4 soap_in_witsml14__ElevCodeEnum(struct soap *soap, const char *tag, witsml14__ElevCodeEnum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ElevCodeEnum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum, sizeof(witsml14__ElevCodeEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ElevCodeEnum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ElevCodeEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum, sizeof(witsml14__ElevCodeEnum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ElevCodeEnum * SOAP_FMAC4 soap_new_witsml14__ElevCodeEnum(struct soap *soap, int n)
{
	witsml14__ElevCodeEnum *a = static_cast<witsml14__ElevCodeEnum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ElevCodeEnum)));
	for (witsml14__ElevCodeEnum *p = a; p && n--; ++p)
		soap_default_witsml14__ElevCodeEnum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ElevCodeEnum(struct soap *soap, const witsml14__ElevCodeEnum *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ElevCodeEnum(soap, tag ? tag : "witsml14:ElevCodeEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ElevCodeEnum * SOAP_FMAC4 soap_get_witsml14__ElevCodeEnum(struct soap *soap, witsml14__ElevCodeEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ElevCodeEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__EastOrWest[] =
{	{ (LONG64)witsml14__EastOrWest::east, "east" },
	{ (LONG64)witsml14__EastOrWest::west, "west" },
	{ (LONG64)witsml14__EastOrWest::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__EastOrWest2s(struct soap *soap, witsml14__EastOrWest n)
{
	const char *s = soap_code_str(soap_codes_witsml14__EastOrWest, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__EastOrWest(struct soap *soap, const char *tag, int id, const witsml14__EastOrWest *a, const char *type)
{
	if (!type)
		type = "witsml14:EastOrWest";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest), type) || soap_send(soap, soap_witsml14__EastOrWest2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__EastOrWest(struct soap *soap, const char *s, witsml14__EastOrWest *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__EastOrWest, s);
	if (map)
		*a = (witsml14__EastOrWest)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__EastOrWest * SOAP_FMAC4 soap_in_witsml14__EastOrWest(struct soap *soap, const char *tag, witsml14__EastOrWest *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__EastOrWest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest, sizeof(witsml14__EastOrWest), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__EastOrWest(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__EastOrWest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest, sizeof(witsml14__EastOrWest), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__EastOrWest * SOAP_FMAC4 soap_new_witsml14__EastOrWest(struct soap *soap, int n)
{
	witsml14__EastOrWest *a = static_cast<witsml14__EastOrWest *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__EastOrWest)));
	for (witsml14__EastOrWest *p = a; p && n--; ++p)
		soap_default_witsml14__EastOrWest(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__EastOrWest(struct soap *soap, const witsml14__EastOrWest *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__EastOrWest(soap, tag ? tag : "witsml14:EastOrWest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__EastOrWest * SOAP_FMAC4 soap_get_witsml14__EastOrWest(struct soap *soap, witsml14__EastOrWest *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__EastOrWest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DriveType[] =
{	{ (LONG64)witsml14__DriveType::coiled_x0020tubing, "coiled tubing" },
	{ (LONG64)witsml14__DriveType::rotary_x0020kelly_x0020drive, "rotary kelly drive" },
	{ (LONG64)witsml14__DriveType::top_x0020drive, "top drive" },
	{ (LONG64)witsml14__DriveType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DriveType2s(struct soap *soap, witsml14__DriveType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DriveType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DriveType(struct soap *soap, const char *tag, int id, const witsml14__DriveType *a, const char *type)
{
	if (!type)
		type = "witsml14:DriveType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType), type) || soap_send(soap, soap_witsml14__DriveType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DriveType(struct soap *soap, const char *s, witsml14__DriveType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DriveType, s);
	if (map)
		*a = (witsml14__DriveType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DriveType * SOAP_FMAC4 soap_in_witsml14__DriveType(struct soap *soap, const char *tag, witsml14__DriveType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DriveType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType, sizeof(witsml14__DriveType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DriveType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DriveType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType, SOAP_TYPE_gsoap_witsml1_4_witsml14__DriveType, sizeof(witsml14__DriveType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DriveType * SOAP_FMAC4 soap_new_witsml14__DriveType(struct soap *soap, int n)
{
	witsml14__DriveType *a = static_cast<witsml14__DriveType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DriveType)));
	for (witsml14__DriveType *p = a; p && n--; ++p)
		soap_default_witsml14__DriveType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DriveType(struct soap *soap, const witsml14__DriveType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DriveType(soap, tag ? tag : "witsml14:DriveType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DriveType * SOAP_FMAC4 soap_get_witsml14__DriveType(struct soap *soap, witsml14__DriveType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DriveType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DrawWorksType[] =
{	{ (LONG64)witsml14__DrawWorksType::mechanical, "mechanical" },
	{ (LONG64)witsml14__DrawWorksType::standard_x0020electric, "standard electric" },
	{ (LONG64)witsml14__DrawWorksType::diesel_x0020electric, "diesel electric" },
	{ (LONG64)witsml14__DrawWorksType::ram_x0020rig, "ram rig" },
	{ (LONG64)witsml14__DrawWorksType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DrawWorksType2s(struct soap *soap, witsml14__DrawWorksType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DrawWorksType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DrawWorksType(struct soap *soap, const char *tag, int id, const witsml14__DrawWorksType *a, const char *type)
{
	if (!type)
		type = "witsml14:DrawWorksType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType), type) || soap_send(soap, soap_witsml14__DrawWorksType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DrawWorksType(struct soap *soap, const char *s, witsml14__DrawWorksType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DrawWorksType, s);
	if (map)
		*a = (witsml14__DrawWorksType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DrawWorksType * SOAP_FMAC4 soap_in_witsml14__DrawWorksType(struct soap *soap, const char *tag, witsml14__DrawWorksType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DrawWorksType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType, sizeof(witsml14__DrawWorksType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DrawWorksType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DrawWorksType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType, SOAP_TYPE_gsoap_witsml1_4_witsml14__DrawWorksType, sizeof(witsml14__DrawWorksType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DrawWorksType * SOAP_FMAC4 soap_new_witsml14__DrawWorksType(struct soap *soap, int n)
{
	witsml14__DrawWorksType *a = static_cast<witsml14__DrawWorksType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DrawWorksType)));
	for (witsml14__DrawWorksType *p = a; p && n--; ++p)
		soap_default_witsml14__DrawWorksType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DrawWorksType(struct soap *soap, const witsml14__DrawWorksType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DrawWorksType(soap, tag ? tag : "witsml14:DrawWorksType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DrawWorksType * SOAP_FMAC4 soap_get_witsml14__DrawWorksType(struct soap *soap, witsml14__DrawWorksType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DrawWorksType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DerrickType[] =
{	{ (LONG64)witsml14__DerrickType::double_, "double" },
	{ (LONG64)witsml14__DerrickType::quadruple, "quadruple" },
	{ (LONG64)witsml14__DerrickType::slant, "slant" },
	{ (LONG64)witsml14__DerrickType::triple, "triple" },
	{ (LONG64)witsml14__DerrickType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DerrickType2s(struct soap *soap, witsml14__DerrickType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DerrickType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DerrickType(struct soap *soap, const char *tag, int id, const witsml14__DerrickType *a, const char *type)
{
	if (!type)
		type = "witsml14:DerrickType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType), type) || soap_send(soap, soap_witsml14__DerrickType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DerrickType(struct soap *soap, const char *s, witsml14__DerrickType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DerrickType, s);
	if (map)
		*a = (witsml14__DerrickType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DerrickType * SOAP_FMAC4 soap_in_witsml14__DerrickType(struct soap *soap, const char *tag, witsml14__DerrickType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DerrickType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType, sizeof(witsml14__DerrickType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DerrickType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DerrickType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType, SOAP_TYPE_gsoap_witsml1_4_witsml14__DerrickType, sizeof(witsml14__DerrickType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DerrickType * SOAP_FMAC4 soap_new_witsml14__DerrickType(struct soap *soap, int n)
{
	witsml14__DerrickType *a = static_cast<witsml14__DerrickType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DerrickType)));
	for (witsml14__DerrickType *p = a; p && n--; ++p)
		soap_default_witsml14__DerrickType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DerrickType(struct soap *soap, const witsml14__DerrickType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DerrickType(soap, tag ? tag : "witsml14:DerrickType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DerrickType * SOAP_FMAC4 soap_get_witsml14__DerrickType(struct soap *soap, witsml14__DerrickType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DerrickType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DeflectionMethod[] =
{	{ (LONG64)witsml14__DeflectionMethod::point_x0020bit, "point bit" },
	{ (LONG64)witsml14__DeflectionMethod::push_x0020bit, "push bit" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DeflectionMethod2s(struct soap *soap, witsml14__DeflectionMethod n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DeflectionMethod, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DeflectionMethod(struct soap *soap, const char *tag, int id, const witsml14__DeflectionMethod *a, const char *type)
{
	if (!type)
		type = "witsml14:DeflectionMethod";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod), type) || soap_send(soap, soap_witsml14__DeflectionMethod2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DeflectionMethod(struct soap *soap, const char *s, witsml14__DeflectionMethod *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DeflectionMethod, s);
	if (map)
		*a = (witsml14__DeflectionMethod)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DeflectionMethod * SOAP_FMAC4 soap_in_witsml14__DeflectionMethod(struct soap *soap, const char *tag, witsml14__DeflectionMethod *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DeflectionMethod*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod, sizeof(witsml14__DeflectionMethod), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DeflectionMethod(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DeflectionMethod *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod, SOAP_TYPE_gsoap_witsml1_4_witsml14__DeflectionMethod, sizeof(witsml14__DeflectionMethod), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DeflectionMethod * SOAP_FMAC4 soap_new_witsml14__DeflectionMethod(struct soap *soap, int n)
{
	witsml14__DeflectionMethod *a = static_cast<witsml14__DeflectionMethod *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DeflectionMethod)));
	for (witsml14__DeflectionMethod *p = a; p && n--; ++p)
		soap_default_witsml14__DeflectionMethod(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DeflectionMethod(struct soap *soap, const witsml14__DeflectionMethod *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DeflectionMethod(soap, tag ? tag : "witsml14:DeflectionMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DeflectionMethod * SOAP_FMAC4 soap_get_witsml14__DeflectionMethod(struct soap *soap, witsml14__DeflectionMethod *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DeflectionMethod(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ConnectionPosition[] =
{	{ (LONG64)witsml14__ConnectionPosition::both, "both" },
	{ (LONG64)witsml14__ConnectionPosition::bottom, "bottom" },
	{ (LONG64)witsml14__ConnectionPosition::top, "top" },
	{ (LONG64)witsml14__ConnectionPosition::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ConnectionPosition2s(struct soap *soap, witsml14__ConnectionPosition n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ConnectionPosition, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ConnectionPosition(struct soap *soap, const char *tag, int id, const witsml14__ConnectionPosition *a, const char *type)
{
	if (!type)
		type = "witsml14:ConnectionPosition";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition), type) || soap_send(soap, soap_witsml14__ConnectionPosition2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ConnectionPosition(struct soap *soap, const char *s, witsml14__ConnectionPosition *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ConnectionPosition, s);
	if (map)
		*a = (witsml14__ConnectionPosition)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ConnectionPosition * SOAP_FMAC4 soap_in_witsml14__ConnectionPosition(struct soap *soap, const char *tag, witsml14__ConnectionPosition *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ConnectionPosition*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition, sizeof(witsml14__ConnectionPosition), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ConnectionPosition(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ConnectionPosition *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition, SOAP_TYPE_gsoap_witsml1_4_witsml14__ConnectionPosition, sizeof(witsml14__ConnectionPosition), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ConnectionPosition * SOAP_FMAC4 soap_new_witsml14__ConnectionPosition(struct soap *soap, int n)
{
	witsml14__ConnectionPosition *a = static_cast<witsml14__ConnectionPosition *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ConnectionPosition)));
	for (witsml14__ConnectionPosition *p = a; p && n--; ++p)
		soap_default_witsml14__ConnectionPosition(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ConnectionPosition(struct soap *soap, const witsml14__ConnectionPosition *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ConnectionPosition(soap, tag ? tag : "witsml14:ConnectionPosition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ConnectionPosition * SOAP_FMAC4 soap_get_witsml14__ConnectionPosition(struct soap *soap, witsml14__ConnectionPosition *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ConnectionPosition(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ChronostratigraphyUnit[] =
{	{ (LONG64)witsml14__ChronostratigraphyUnit::era, "era" },
	{ (LONG64)witsml14__ChronostratigraphyUnit::period, "period" },
	{ (LONG64)witsml14__ChronostratigraphyUnit::epoch, "epoch" },
	{ (LONG64)witsml14__ChronostratigraphyUnit::stage, "stage" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ChronostratigraphyUnit2s(struct soap *soap, witsml14__ChronostratigraphyUnit n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ChronostratigraphyUnit, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ChronostratigraphyUnit(struct soap *soap, const char *tag, int id, const witsml14__ChronostratigraphyUnit *a, const char *type)
{
	if (!type)
		type = "witsml14:ChronostratigraphyUnit";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit), type) || soap_send(soap, soap_witsml14__ChronostratigraphyUnit2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ChronostratigraphyUnit(struct soap *soap, const char *s, witsml14__ChronostratigraphyUnit *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ChronostratigraphyUnit, s);
	if (map)
		*a = (witsml14__ChronostratigraphyUnit)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ChronostratigraphyUnit * SOAP_FMAC4 soap_in_witsml14__ChronostratigraphyUnit(struct soap *soap, const char *tag, witsml14__ChronostratigraphyUnit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ChronostratigraphyUnit*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit, sizeof(witsml14__ChronostratigraphyUnit), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ChronostratigraphyUnit(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ChronostratigraphyUnit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit, sizeof(witsml14__ChronostratigraphyUnit), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ChronostratigraphyUnit * SOAP_FMAC4 soap_new_witsml14__ChronostratigraphyUnit(struct soap *soap, int n)
{
	witsml14__ChronostratigraphyUnit *a = static_cast<witsml14__ChronostratigraphyUnit *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ChronostratigraphyUnit)));
	for (witsml14__ChronostratigraphyUnit *p = a; p && n--; ++p)
		soap_default_witsml14__ChronostratigraphyUnit(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ChronostratigraphyUnit(struct soap *soap, const witsml14__ChronostratigraphyUnit *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ChronostratigraphyUnit(soap, tag ? tag : "witsml14:ChronostratigraphyUnit", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ChronostratigraphyUnit * SOAP_FMAC4 soap_get_witsml14__ChronostratigraphyUnit(struct soap *soap, witsml14__ChronostratigraphyUnit *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ChronostratigraphyUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ChangeInfoType[] =
{	{ (LONG64)witsml14__ChangeInfoType::add, "add" },
	{ (LONG64)witsml14__ChangeInfoType::update, "update" },
	{ (LONG64)witsml14__ChangeInfoType::delete_, "delete" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ChangeInfoType2s(struct soap *soap, witsml14__ChangeInfoType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ChangeInfoType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ChangeInfoType(struct soap *soap, const char *tag, int id, const witsml14__ChangeInfoType *a, const char *type)
{
	if (!type)
		type = "witsml14:ChangeInfoType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType), type) || soap_send(soap, soap_witsml14__ChangeInfoType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ChangeInfoType(struct soap *soap, const char *s, witsml14__ChangeInfoType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ChangeInfoType, s);
	if (map)
		*a = (witsml14__ChangeInfoType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ChangeInfoType * SOAP_FMAC4 soap_in_witsml14__ChangeInfoType(struct soap *soap, const char *tag, witsml14__ChangeInfoType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ChangeInfoType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType, sizeof(witsml14__ChangeInfoType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ChangeInfoType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ChangeInfoType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChangeInfoType, sizeof(witsml14__ChangeInfoType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ChangeInfoType * SOAP_FMAC4 soap_new_witsml14__ChangeInfoType(struct soap *soap, int n)
{
	witsml14__ChangeInfoType *a = static_cast<witsml14__ChangeInfoType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ChangeInfoType)));
	for (witsml14__ChangeInfoType *p = a; p && n--; ++p)
		soap_default_witsml14__ChangeInfoType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ChangeInfoType(struct soap *soap, const witsml14__ChangeInfoType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ChangeInfoType(soap, tag ? tag : "witsml14:ChangeInfoType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ChangeInfoType * SOAP_FMAC4 soap_get_witsml14__ChangeInfoType(struct soap *soap, witsml14__ChangeInfoType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ChangeInfoType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__CementJobType[] =
{	{ (LONG64)witsml14__CementJobType::primary, "primary" },
	{ (LONG64)witsml14__CementJobType::plug, "plug" },
	{ (LONG64)witsml14__CementJobType::squeeze, "squeeze" },
	{ (LONG64)witsml14__CementJobType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__CementJobType2s(struct soap *soap, witsml14__CementJobType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__CementJobType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__CementJobType(struct soap *soap, const char *tag, int id, const witsml14__CementJobType *a, const char *type)
{
	if (!type)
		type = "witsml14:CementJobType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType), type) || soap_send(soap, soap_witsml14__CementJobType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__CementJobType(struct soap *soap, const char *s, witsml14__CementJobType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__CementJobType, s);
	if (map)
		*a = (witsml14__CementJobType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__CementJobType * SOAP_FMAC4 soap_in_witsml14__CementJobType(struct soap *soap, const char *tag, witsml14__CementJobType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__CementJobType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType, sizeof(witsml14__CementJobType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__CementJobType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__CementJobType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType, SOAP_TYPE_gsoap_witsml1_4_witsml14__CementJobType, sizeof(witsml14__CementJobType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__CementJobType * SOAP_FMAC4 soap_new_witsml14__CementJobType(struct soap *soap, int n)
{
	witsml14__CementJobType *a = static_cast<witsml14__CementJobType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__CementJobType)));
	for (witsml14__CementJobType *p = a; p && n--; ++p)
		soap_default_witsml14__CementJobType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__CementJobType(struct soap *soap, const witsml14__CementJobType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__CementJobType(soap, tag ? tag : "witsml14:CementJobType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__CementJobType * SOAP_FMAC4 soap_get_witsml14__CementJobType(struct soap *soap, witsml14__CementJobType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__CementJobType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BoxPinConfig[] =
{	{ (LONG64)witsml14__BoxPinConfig::bottom_x0020box_x002c_x0020top_x0020box, "bottom box, top box" },
	{ (LONG64)witsml14__BoxPinConfig::bottom_x0020box_x002c_x0020top_x0020pin, "bottom box, top pin" },
	{ (LONG64)witsml14__BoxPinConfig::bottom_x0020pin_x0020top_x0020box, "bottom pin top box" },
	{ (LONG64)witsml14__BoxPinConfig::bottom_x0020pin, "bottom pin" },
	{ (LONG64)witsml14__BoxPinConfig::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BoxPinConfig2s(struct soap *soap, witsml14__BoxPinConfig n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BoxPinConfig, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BoxPinConfig(struct soap *soap, const char *tag, int id, const witsml14__BoxPinConfig *a, const char *type)
{
	if (!type)
		type = "witsml14:BoxPinConfig";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig), type) || soap_send(soap, soap_witsml14__BoxPinConfig2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BoxPinConfig(struct soap *soap, const char *s, witsml14__BoxPinConfig *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BoxPinConfig, s);
	if (map)
		*a = (witsml14__BoxPinConfig)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BoxPinConfig * SOAP_FMAC4 soap_in_witsml14__BoxPinConfig(struct soap *soap, const char *tag, witsml14__BoxPinConfig *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BoxPinConfig*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig, sizeof(witsml14__BoxPinConfig), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BoxPinConfig(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BoxPinConfig *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig, SOAP_TYPE_gsoap_witsml1_4_witsml14__BoxPinConfig, sizeof(witsml14__BoxPinConfig), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BoxPinConfig * SOAP_FMAC4 soap_new_witsml14__BoxPinConfig(struct soap *soap, int n)
{
	witsml14__BoxPinConfig *a = static_cast<witsml14__BoxPinConfig *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BoxPinConfig)));
	for (witsml14__BoxPinConfig *p = a; p && n--; ++p)
		soap_default_witsml14__BoxPinConfig(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BoxPinConfig(struct soap *soap, const witsml14__BoxPinConfig *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BoxPinConfig(soap, tag ? tag : "witsml14:BoxPinConfig", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BoxPinConfig * SOAP_FMAC4 soap_get_witsml14__BoxPinConfig(struct soap *soap, witsml14__BoxPinConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BoxPinConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BopType[] =
{	{ (LONG64)witsml14__BopType::annular_x0020preventer, "annular preventer" },
	{ (LONG64)witsml14__BopType::shear_x0020ram, "shear ram" },
	{ (LONG64)witsml14__BopType::blind_x0020ram, "blind ram" },
	{ (LONG64)witsml14__BopType::pipe_x0020ram, "pipe ram" },
	{ (LONG64)witsml14__BopType::drilling_x0020spool, "drilling spool" },
	{ (LONG64)witsml14__BopType::flexible_x0020joint, "flexible joint" },
	{ (LONG64)witsml14__BopType::connector, "connector" },
	{ (LONG64)witsml14__BopType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BopType2s(struct soap *soap, witsml14__BopType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BopType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BopType(struct soap *soap, const char *tag, int id, const witsml14__BopType *a, const char *type)
{
	if (!type)
		type = "witsml14:BopType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType), type) || soap_send(soap, soap_witsml14__BopType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BopType(struct soap *soap, const char *s, witsml14__BopType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BopType, s);
	if (map)
		*a = (witsml14__BopType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BopType * SOAP_FMAC4 soap_in_witsml14__BopType(struct soap *soap, const char *tag, witsml14__BopType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BopType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType, sizeof(witsml14__BopType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BopType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BopType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType, SOAP_TYPE_gsoap_witsml1_4_witsml14__BopType, sizeof(witsml14__BopType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BopType * SOAP_FMAC4 soap_new_witsml14__BopType(struct soap *soap, int n)
{
	witsml14__BopType *a = static_cast<witsml14__BopType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BopType)));
	for (witsml14__BopType *p = a; p && n--; ++p)
		soap_default_witsml14__BopType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BopType(struct soap *soap, const witsml14__BopType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BopType(soap, tag ? tag : "witsml14:BopType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BopType * SOAP_FMAC4 soap_get_witsml14__BopType(struct soap *soap, witsml14__BopType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BopType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BladeType[] =
{	{ (LONG64)witsml14__BladeType::clamp_on, "clamp-on" },
	{ (LONG64)witsml14__BladeType::integral, "integral" },
	{ (LONG64)witsml14__BladeType::sleeve, "sleeve" },
	{ (LONG64)witsml14__BladeType::welded, "welded" },
	{ (LONG64)witsml14__BladeType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BladeType2s(struct soap *soap, witsml14__BladeType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BladeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BladeType(struct soap *soap, const char *tag, int id, const witsml14__BladeType *a, const char *type)
{
	if (!type)
		type = "witsml14:BladeType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType), type) || soap_send(soap, soap_witsml14__BladeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BladeType(struct soap *soap, const char *s, witsml14__BladeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BladeType, s);
	if (map)
		*a = (witsml14__BladeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BladeType * SOAP_FMAC4 soap_in_witsml14__BladeType(struct soap *soap, const char *tag, witsml14__BladeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BladeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType, sizeof(witsml14__BladeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BladeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BladeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeType, sizeof(witsml14__BladeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BladeType * SOAP_FMAC4 soap_new_witsml14__BladeType(struct soap *soap, int n)
{
	witsml14__BladeType *a = static_cast<witsml14__BladeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BladeType)));
	for (witsml14__BladeType *p = a; p && n--; ++p)
		soap_default_witsml14__BladeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BladeType(struct soap *soap, const witsml14__BladeType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BladeType(soap, tag ? tag : "witsml14:BladeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BladeType * SOAP_FMAC4 soap_get_witsml14__BladeType(struct soap *soap, witsml14__BladeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BladeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BladeShapeType[] =
{	{ (LONG64)witsml14__BladeShapeType::dynamic, "dynamic" },
	{ (LONG64)witsml14__BladeShapeType::melon, "melon" },
	{ (LONG64)witsml14__BladeShapeType::spiral, "spiral" },
	{ (LONG64)witsml14__BladeShapeType::straight, "straight" },
	{ (LONG64)witsml14__BladeShapeType::variable, "variable" },
	{ (LONG64)witsml14__BladeShapeType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BladeShapeType2s(struct soap *soap, witsml14__BladeShapeType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BladeShapeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BladeShapeType(struct soap *soap, const char *tag, int id, const witsml14__BladeShapeType *a, const char *type)
{
	if (!type)
		type = "witsml14:BladeShapeType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType), type) || soap_send(soap, soap_witsml14__BladeShapeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BladeShapeType(struct soap *soap, const char *s, witsml14__BladeShapeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BladeShapeType, s);
	if (map)
		*a = (witsml14__BladeShapeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BladeShapeType * SOAP_FMAC4 soap_in_witsml14__BladeShapeType(struct soap *soap, const char *tag, witsml14__BladeShapeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BladeShapeType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType, sizeof(witsml14__BladeShapeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BladeShapeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BladeShapeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType, SOAP_TYPE_gsoap_witsml1_4_witsml14__BladeShapeType, sizeof(witsml14__BladeShapeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BladeShapeType * SOAP_FMAC4 soap_new_witsml14__BladeShapeType(struct soap *soap, int n)
{
	witsml14__BladeShapeType *a = static_cast<witsml14__BladeShapeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BladeShapeType)));
	for (witsml14__BladeShapeType *p = a; p && n--; ++p)
		soap_default_witsml14__BladeShapeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BladeShapeType(struct soap *soap, const witsml14__BladeShapeType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BladeShapeType(soap, tag ? tag : "witsml14:BladeShapeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BladeShapeType * SOAP_FMAC4 soap_get_witsml14__BladeShapeType(struct soap *soap, witsml14__BladeShapeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BladeShapeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BhaStatus[] =
{	{ (LONG64)witsml14__BhaStatus::final_, "final" },
	{ (LONG64)witsml14__BhaStatus::progress, "progress" },
	{ (LONG64)witsml14__BhaStatus::plan, "plan" },
	{ (LONG64)witsml14__BhaStatus::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BhaStatus2s(struct soap *soap, witsml14__BhaStatus n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BhaStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BhaStatus(struct soap *soap, const char *tag, int id, const witsml14__BhaStatus *a, const char *type)
{
	if (!type)
		type = "witsml14:BhaStatus";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus), type) || soap_send(soap, soap_witsml14__BhaStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BhaStatus(struct soap *soap, const char *s, witsml14__BhaStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BhaStatus, s);
	if (map)
		*a = (witsml14__BhaStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BhaStatus * SOAP_FMAC4 soap_in_witsml14__BhaStatus(struct soap *soap, const char *tag, witsml14__BhaStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BhaStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus, sizeof(witsml14__BhaStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BhaStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BhaStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus, SOAP_TYPE_gsoap_witsml1_4_witsml14__BhaStatus, sizeof(witsml14__BhaStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BhaStatus * SOAP_FMAC4 soap_new_witsml14__BhaStatus(struct soap *soap, int n)
{
	witsml14__BhaStatus *a = static_cast<witsml14__BhaStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BhaStatus)));
	for (witsml14__BhaStatus *p = a; p && n--; ++p)
		soap_default_witsml14__BhaStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BhaStatus(struct soap *soap, const witsml14__BhaStatus *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BhaStatus(soap, tag ? tag : "witsml14:BhaStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BhaStatus * SOAP_FMAC4 soap_get_witsml14__BhaStatus(struct soap *soap, witsml14__BhaStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BhaStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BitType[] =
{	{ (LONG64)witsml14__BitType::diamond, "diamond" },
	{ (LONG64)witsml14__BitType::diamond_x0020core, "diamond core" },
	{ (LONG64)witsml14__BitType::insert_x0020roller_x0020cone, "insert roller cone" },
	{ (LONG64)witsml14__BitType::PDC, "PDC" },
	{ (LONG64)witsml14__BitType::PDC_x0020core, "PDC core" },
	{ (LONG64)witsml14__BitType::roller_x0020cone, "roller cone" },
	{ (LONG64)witsml14__BitType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BitType2s(struct soap *soap, witsml14__BitType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BitType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BitType(struct soap *soap, const char *tag, int id, const witsml14__BitType *a, const char *type)
{
	if (!type)
		type = "witsml14:BitType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType), type) || soap_send(soap, soap_witsml14__BitType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BitType(struct soap *soap, const char *s, witsml14__BitType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BitType, s);
	if (map)
		*a = (witsml14__BitType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BitType * SOAP_FMAC4 soap_in_witsml14__BitType(struct soap *soap, const char *tag, witsml14__BitType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BitType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType, sizeof(witsml14__BitType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BitType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BitType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitType, sizeof(witsml14__BitType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BitType * SOAP_FMAC4 soap_new_witsml14__BitType(struct soap *soap, int n)
{
	witsml14__BitType *a = static_cast<witsml14__BitType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BitType)));
	for (witsml14__BitType *p = a; p && n--; ++p)
		soap_default_witsml14__BitType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BitType(struct soap *soap, const witsml14__BitType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BitType(soap, tag ? tag : "witsml14:BitType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BitType * SOAP_FMAC4 soap_get_witsml14__BitType(struct soap *soap, witsml14__BitType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BitType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BitReasonPulled[] =
{	{ (LONG64)witsml14__BitReasonPulled::BHA, "BHA" },
	{ (LONG64)witsml14__BitReasonPulled::CM, "CM" },
	{ (LONG64)witsml14__BitReasonPulled::CP, "CP" },
	{ (LONG64)witsml14__BitReasonPulled::DMF, "DMF" },
	{ (LONG64)witsml14__BitReasonPulled::DP, "DP" },
	{ (LONG64)witsml14__BitReasonPulled::DST, "DST" },
	{ (LONG64)witsml14__BitReasonPulled::DTF, "DTF" },
	{ (LONG64)witsml14__BitReasonPulled::FM, "FM" },
	{ (LONG64)witsml14__BitReasonPulled::HP, "HP" },
	{ (LONG64)witsml14__BitReasonPulled::HR, "HR" },
	{ (LONG64)witsml14__BitReasonPulled::LOG, "LOG" },
	{ (LONG64)witsml14__BitReasonPulled::PP, "PP" },
	{ (LONG64)witsml14__BitReasonPulled::PR, "PR" },
	{ (LONG64)witsml14__BitReasonPulled::RIG, "RIG" },
	{ (LONG64)witsml14__BitReasonPulled::TD, "TD" },
	{ (LONG64)witsml14__BitReasonPulled::TQ, "TQ" },
	{ (LONG64)witsml14__BitReasonPulled::TW, "TW" },
	{ (LONG64)witsml14__BitReasonPulled::WC, "WC" },
	{ (LONG64)witsml14__BitReasonPulled::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BitReasonPulled2s(struct soap *soap, witsml14__BitReasonPulled n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BitReasonPulled, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BitReasonPulled(struct soap *soap, const char *tag, int id, const witsml14__BitReasonPulled *a, const char *type)
{
	if (!type)
		type = "witsml14:BitReasonPulled";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled), type) || soap_send(soap, soap_witsml14__BitReasonPulled2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BitReasonPulled(struct soap *soap, const char *s, witsml14__BitReasonPulled *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BitReasonPulled, s);
	if (map)
		*a = (witsml14__BitReasonPulled)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BitReasonPulled * SOAP_FMAC4 soap_in_witsml14__BitReasonPulled(struct soap *soap, const char *tag, witsml14__BitReasonPulled *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BitReasonPulled*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled, sizeof(witsml14__BitReasonPulled), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BitReasonPulled(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BitReasonPulled *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitReasonPulled, sizeof(witsml14__BitReasonPulled), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BitReasonPulled * SOAP_FMAC4 soap_new_witsml14__BitReasonPulled(struct soap *soap, int n)
{
	witsml14__BitReasonPulled *a = static_cast<witsml14__BitReasonPulled *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BitReasonPulled)));
	for (witsml14__BitReasonPulled *p = a; p && n--; ++p)
		soap_default_witsml14__BitReasonPulled(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BitReasonPulled(struct soap *soap, const witsml14__BitReasonPulled *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BitReasonPulled(soap, tag ? tag : "witsml14:BitReasonPulled", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BitReasonPulled * SOAP_FMAC4 soap_get_witsml14__BitReasonPulled(struct soap *soap, witsml14__BitReasonPulled *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BitReasonPulled(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BitDullCode[] =
{	{ (LONG64)witsml14__BitDullCode::BC, "BC" },
	{ (LONG64)witsml14__BitDullCode::BT, "BT" },
	{ (LONG64)witsml14__BitDullCode::BU, "BU" },
	{ (LONG64)witsml14__BitDullCode::CC, "CC" },
	{ (LONG64)witsml14__BitDullCode::CD, "CD" },
	{ (LONG64)witsml14__BitDullCode::CI, "CI" },
	{ (LONG64)witsml14__BitDullCode::CR, "CR" },
	{ (LONG64)witsml14__BitDullCode::CT, "CT" },
	{ (LONG64)witsml14__BitDullCode::ER, "ER" },
	{ (LONG64)witsml14__BitDullCode::FC, "FC" },
	{ (LONG64)witsml14__BitDullCode::HC, "HC" },
	{ (LONG64)witsml14__BitDullCode::JD, "JD" },
	{ (LONG64)witsml14__BitDullCode::LC, "LC" },
	{ (LONG64)witsml14__BitDullCode::LN, "LN" },
	{ (LONG64)witsml14__BitDullCode::LT, "LT" },
	{ (LONG64)witsml14__BitDullCode::NO, "NO" },
	{ (LONG64)witsml14__BitDullCode::OC, "OC" },
	{ (LONG64)witsml14__BitDullCode::PB, "PB" },
	{ (LONG64)witsml14__BitDullCode::PN, "PN" },
	{ (LONG64)witsml14__BitDullCode::RG, "RG" },
	{ (LONG64)witsml14__BitDullCode::RO, "RO" },
	{ (LONG64)witsml14__BitDullCode::SD, "SD" },
	{ (LONG64)witsml14__BitDullCode::SS, "SS" },
	{ (LONG64)witsml14__BitDullCode::TR, "TR" },
	{ (LONG64)witsml14__BitDullCode::WO, "WO" },
	{ (LONG64)witsml14__BitDullCode::WT, "WT" },
	{ (LONG64)witsml14__BitDullCode::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BitDullCode2s(struct soap *soap, witsml14__BitDullCode n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BitDullCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BitDullCode(struct soap *soap, const char *tag, int id, const witsml14__BitDullCode *a, const char *type)
{
	if (!type)
		type = "witsml14:BitDullCode";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode), type) || soap_send(soap, soap_witsml14__BitDullCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BitDullCode(struct soap *soap, const char *s, witsml14__BitDullCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BitDullCode, s);
	if (map)
		*a = (witsml14__BitDullCode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BitDullCode * SOAP_FMAC4 soap_in_witsml14__BitDullCode(struct soap *soap, const char *tag, witsml14__BitDullCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BitDullCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode, sizeof(witsml14__BitDullCode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BitDullCode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BitDullCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode, SOAP_TYPE_gsoap_witsml1_4_witsml14__BitDullCode, sizeof(witsml14__BitDullCode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BitDullCode * SOAP_FMAC4 soap_new_witsml14__BitDullCode(struct soap *soap, int n)
{
	witsml14__BitDullCode *a = static_cast<witsml14__BitDullCode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BitDullCode)));
	for (witsml14__BitDullCode *p = a; p && n--; ++p)
		soap_default_witsml14__BitDullCode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BitDullCode(struct soap *soap, const witsml14__BitDullCode *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BitDullCode(soap, tag ? tag : "witsml14:BitDullCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BitDullCode * SOAP_FMAC4 soap_get_witsml14__BitDullCode(struct soap *soap, witsml14__BitDullCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BitDullCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__BearingType[] =
{	{ (LONG64)witsml14__BearingType::oil_x0020seal, "oil seal" },
	{ (LONG64)witsml14__BearingType::mud_x0020lube, "mud lube" },
	{ (LONG64)witsml14__BearingType::other, "other" },
	{ (LONG64)witsml14__BearingType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__BearingType2s(struct soap *soap, witsml14__BearingType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__BearingType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__BearingType(struct soap *soap, const char *tag, int id, const witsml14__BearingType *a, const char *type)
{
	if (!type)
		type = "witsml14:BearingType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType), type) || soap_send(soap, soap_witsml14__BearingType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__BearingType(struct soap *soap, const char *s, witsml14__BearingType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__BearingType, s);
	if (map)
		*a = (witsml14__BearingType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__BearingType * SOAP_FMAC4 soap_in_witsml14__BearingType(struct soap *soap, const char *tag, witsml14__BearingType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__BearingType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType, sizeof(witsml14__BearingType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__BearingType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__BearingType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType, SOAP_TYPE_gsoap_witsml1_4_witsml14__BearingType, sizeof(witsml14__BearingType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__BearingType * SOAP_FMAC4 soap_new_witsml14__BearingType(struct soap *soap, int n)
{
	witsml14__BearingType *a = static_cast<witsml14__BearingType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__BearingType)));
	for (witsml14__BearingType *p = a; p && n--; ++p)
		soap_default_witsml14__BearingType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__BearingType(struct soap *soap, const witsml14__BearingType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__BearingType(soap, tag ? tag : "witsml14:BearingType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__BearingType * SOAP_FMAC4 soap_get_witsml14__BearingType(struct soap *soap, witsml14__BearingType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__BearingType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AziRef[] =
{	{ (LONG64)witsml14__AziRef::magnetic_x0020north, "magnetic north" },
	{ (LONG64)witsml14__AziRef::grid_x0020north, "grid north" },
	{ (LONG64)witsml14__AziRef::true_x0020north, "true north" },
	{ (LONG64)witsml14__AziRef::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AziRef2s(struct soap *soap, witsml14__AziRef n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AziRef, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AziRef(struct soap *soap, const char *tag, int id, const witsml14__AziRef *a, const char *type)
{
	if (!type)
		type = "witsml14:AziRef";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef), type) || soap_send(soap, soap_witsml14__AziRef2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AziRef(struct soap *soap, const char *s, witsml14__AziRef *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AziRef, s);
	if (map)
		*a = (witsml14__AziRef)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AziRef * SOAP_FMAC4 soap_in_witsml14__AziRef(struct soap *soap, const char *tag, witsml14__AziRef *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AziRef*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef, sizeof(witsml14__AziRef), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AziRef(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AziRef *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef, sizeof(witsml14__AziRef), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AziRef * SOAP_FMAC4 soap_new_witsml14__AziRef(struct soap *soap, int n)
{
	witsml14__AziRef *a = static_cast<witsml14__AziRef *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AziRef)));
	for (witsml14__AziRef *p = a; p && n--; ++p)
		soap_default_witsml14__AziRef(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AziRef(struct soap *soap, const witsml14__AziRef *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AziRef(soap, tag ? tag : "witsml14:AziRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AziRef * SOAP_FMAC4 soap_get_witsml14__AziRef(struct soap *soap, witsml14__AziRef *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AziRef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AuthorizationStatus[] =
{	{ (LONG64)witsml14__AuthorizationStatus::draft, "draft" },
	{ (LONG64)witsml14__AuthorizationStatus::authorized, "authorized" },
	{ (LONG64)witsml14__AuthorizationStatus::superceded, "superceded" },
	{ (LONG64)witsml14__AuthorizationStatus::withdrawn, "withdrawn" },
	{ (LONG64)witsml14__AuthorizationStatus::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AuthorizationStatus2s(struct soap *soap, witsml14__AuthorizationStatus n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AuthorizationStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AuthorizationStatus(struct soap *soap, const char *tag, int id, const witsml14__AuthorizationStatus *a, const char *type)
{
	if (!type)
		type = "witsml14:AuthorizationStatus";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus), type) || soap_send(soap, soap_witsml14__AuthorizationStatus2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AuthorizationStatus(struct soap *soap, const char *s, witsml14__AuthorizationStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AuthorizationStatus, s);
	if (map)
		*a = (witsml14__AuthorizationStatus)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AuthorizationStatus * SOAP_FMAC4 soap_in_witsml14__AuthorizationStatus(struct soap *soap, const char *tag, witsml14__AuthorizationStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AuthorizationStatus*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus, sizeof(witsml14__AuthorizationStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AuthorizationStatus(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AuthorizationStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus, SOAP_TYPE_gsoap_witsml1_4_witsml14__AuthorizationStatus, sizeof(witsml14__AuthorizationStatus), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AuthorizationStatus * SOAP_FMAC4 soap_new_witsml14__AuthorizationStatus(struct soap *soap, int n)
{
	witsml14__AuthorizationStatus *a = static_cast<witsml14__AuthorizationStatus *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AuthorizationStatus)));
	for (witsml14__AuthorizationStatus *p = a; p && n--; ++p)
		soap_default_witsml14__AuthorizationStatus(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AuthorizationStatus(struct soap *soap, const witsml14__AuthorizationStatus *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AuthorizationStatus(soap, tag ? tag : "witsml14:AuthorizationStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AuthorizationStatus * SOAP_FMAC4 soap_get_witsml14__AuthorizationStatus(struct soap *soap, witsml14__AuthorizationStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AuthorizationStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ActivityClassType[] =
{	{ (LONG64)witsml14__ActivityClassType::planned, "planned" },
	{ (LONG64)witsml14__ActivityClassType::unplanned, "unplanned" },
	{ (LONG64)witsml14__ActivityClassType::downtime, "downtime" },
	{ (LONG64)witsml14__ActivityClassType::unknown, "unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ActivityClassType2s(struct soap *soap, witsml14__ActivityClassType n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ActivityClassType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ActivityClassType(struct soap *soap, const char *tag, int id, const witsml14__ActivityClassType *a, const char *type)
{
	if (!type)
		type = "witsml14:ActivityClassType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType), type) || soap_send(soap, soap_witsml14__ActivityClassType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ActivityClassType(struct soap *soap, const char *s, witsml14__ActivityClassType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ActivityClassType, s);
	if (map)
		*a = (witsml14__ActivityClassType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ActivityClassType * SOAP_FMAC4 soap_in_witsml14__ActivityClassType(struct soap *soap, const char *tag, witsml14__ActivityClassType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ActivityClassType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType, sizeof(witsml14__ActivityClassType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ActivityClassType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ActivityClassType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType, SOAP_TYPE_gsoap_witsml1_4_witsml14__ActivityClassType, sizeof(witsml14__ActivityClassType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ActivityClassType * SOAP_FMAC4 soap_new_witsml14__ActivityClassType(struct soap *soap, int n)
{
	witsml14__ActivityClassType *a = static_cast<witsml14__ActivityClassType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ActivityClassType)));
	for (witsml14__ActivityClassType *p = a; p && n--; ++p)
		soap_default_witsml14__ActivityClassType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ActivityClassType(struct soap *soap, const witsml14__ActivityClassType *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ActivityClassType(soap, tag ? tag : "witsml14:ActivityClassType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ActivityClassType * SOAP_FMAC4 soap_get_witsml14__ActivityClassType(struct soap *soap, witsml14__ActivityClassType *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ActivityClassType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__VolumePerVolumeUom[] =
{	{ (LONG64)witsml14__VolumePerVolumeUom::Euc, "Euc" },
	{ (LONG64)witsml14__VolumePerVolumeUom::_x0025, "%" },
	{ (LONG64)witsml14__VolumePerVolumeUom::permil, "permil" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ppdk, "ppdk" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ppk, "ppk" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ppm, "ppm" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002facre_x002eft, "bbl/acre.ft" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002fbbl, "bbl/bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002fft3, "bbl/ft3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002f100bbl, "bbl/100bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002fk_x0028ft3_x0029, "bbl/k(ft3)" },
	{ (LONG64)witsml14__VolumePerVolumeUom::bbl_x002fM_x0028ft3_x0029, "bbl/M(ft3)" },
	{ (LONG64)witsml14__VolumePerVolumeUom::cm3_x002fcm3, "cm3/cm3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::cm3_x002fm3, "cm3/m3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::dm3_x002fm3, "dm3/m3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ft3_x002fbbl, "ft3/bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ft3_x002fft3, "ft3/ft3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUS_x002fkgalUS, "galUS/kgalUS" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUK_x002fkgalUK, "galUK/kgalUK" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUK_x002fft3, "galUK/ft3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUK_x002fMbbl, "galUK/Mbbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUS_x002fbbl, "galUS/bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUS_x002f10bbl, "galUS/10bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUS_x002fft3, "galUS/ft3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::galUS_x002fMbbl, "galUS/Mbbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::_1000ft3_x002fbbl, "1000ft3/bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ksm3_x002fsm3, "ksm3/sm3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::L_x002f10bbl, "L/10bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::L_x002fm3, "L/m3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::m3_x002fha_x002em, "m3/ha.m" },
	{ (LONG64)witsml14__VolumePerVolumeUom::m3_x002fm3, "m3/m3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::M_x0028ft3_x0029_x002facre_x002eft, "M(ft3)/acre.ft" },
	{ (LONG64)witsml14__VolumePerVolumeUom::mL_x002fgalUK, "mL/galUK" },
	{ (LONG64)witsml14__VolumePerVolumeUom::mL_x002fgalUS, "mL/galUS" },
	{ (LONG64)witsml14__VolumePerVolumeUom::mL_x002fmL, "mL/mL" },
	{ (LONG64)witsml14__VolumePerVolumeUom::MMbbl_x002facre_x002eft, "MMbbl/acre.ft" },
	{ (LONG64)witsml14__VolumePerVolumeUom::MMscf60_x002fstb60, "MMscf60/stb60" },
	{ (LONG64)witsml14__VolumePerVolumeUom::Mscf60_x002fstb60, "Mscf60/stb60" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ptUK_x002fMbbl, "ptUK/Mbbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::ptUS_x002f10bbl, "ptUS/10bbl" },
	{ (LONG64)witsml14__VolumePerVolumeUom::pu, "pu" },
	{ (LONG64)witsml14__VolumePerVolumeUom::scm15_x002fstb60, "scm15/stb60" },
	{ (LONG64)witsml14__VolumePerVolumeUom::sm3_x002fksm3, "sm3/ksm3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::sm3_x002fsm3, "sm3/sm3" },
	{ (LONG64)witsml14__VolumePerVolumeUom::stb60_x002fMMscf60, "stb60/MMscf60" },
	{ (LONG64)witsml14__VolumePerVolumeUom::stb60_x002fMMscm15, "stb60/MMscm15" },
	{ (LONG64)witsml14__VolumePerVolumeUom::stb60_x002fMscf60, "stb60/Mscf60" },
	{ (LONG64)witsml14__VolumePerVolumeUom::stb60_x002fMscm15, "stb60/Mscm15" },
	{ (LONG64)witsml14__VolumePerVolumeUom::stb60_x002fscm15, "stb60/scm15" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__VolumePerVolumeUom2s(struct soap *soap, witsml14__VolumePerVolumeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__VolumePerVolumeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__VolumePerVolumeUom(struct soap *soap, const char *tag, int id, const witsml14__VolumePerVolumeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:VolumePerVolumeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom), type) || soap_send(soap, soap_witsml14__VolumePerVolumeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__VolumePerVolumeUom(struct soap *soap, const char *s, witsml14__VolumePerVolumeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__VolumePerVolumeUom, s);
	if (map)
		*a = (witsml14__VolumePerVolumeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__VolumePerVolumeUom * SOAP_FMAC4 soap_in_witsml14__VolumePerVolumeUom(struct soap *soap, const char *tag, witsml14__VolumePerVolumeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__VolumePerVolumeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom, sizeof(witsml14__VolumePerVolumeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__VolumePerVolumeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__VolumePerVolumeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerVolumeUom, sizeof(witsml14__VolumePerVolumeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__VolumePerVolumeUom * SOAP_FMAC4 soap_new_witsml14__VolumePerVolumeUom(struct soap *soap, int n)
{
	witsml14__VolumePerVolumeUom *a = static_cast<witsml14__VolumePerVolumeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__VolumePerVolumeUom)));
	for (witsml14__VolumePerVolumeUom *p = a; p && n--; ++p)
		soap_default_witsml14__VolumePerVolumeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__VolumePerVolumeUom(struct soap *soap, const witsml14__VolumePerVolumeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__VolumePerVolumeUom(soap, tag ? tag : "witsml14:VolumePerVolumeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__VolumePerVolumeUom * SOAP_FMAC4 soap_get_witsml14__VolumePerVolumeUom(struct soap *soap, witsml14__VolumePerVolumeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__VolumePerVolumeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__VolumePerLengthUom[] =
{	{ (LONG64)witsml14__VolumePerLengthUom::bblPft, "bblPft" },
	{ (LONG64)witsml14__VolumePerLengthUom::bblPin, "bblPin" },
	{ (LONG64)witsml14__VolumePerLengthUom::bblPmi, "bblPmi" },
	{ (LONG64)witsml14__VolumePerLengthUom::dm3P100km, "dm3P100km" },
	{ (LONG64)witsml14__VolumePerLengthUom::dm3Pkm_x0028100_x0029, "dm3Pkm(100)" },
	{ (LONG64)witsml14__VolumePerLengthUom::dm3Pm, "dm3Pm" },
	{ (LONG64)witsml14__VolumePerLengthUom::ft3Pft, "ft3Pft" },
	{ (LONG64)witsml14__VolumePerLengthUom::galUKPmi, "galUKPmi" },
	{ (LONG64)witsml14__VolumePerLengthUom::galUSPft, "galUSPft" },
	{ (LONG64)witsml14__VolumePerLengthUom::galUSPmi, "galUSPmi" },
	{ (LONG64)witsml14__VolumePerLengthUom::in3Pft, "in3Pft" },
	{ (LONG64)witsml14__VolumePerLengthUom::LP100km, "LP100km" },
	{ (LONG64)witsml14__VolumePerLengthUom::LPkm_x0028100_x0029, "LPkm(100)" },
	{ (LONG64)witsml14__VolumePerLengthUom::LPm, "LPm" },
	{ (LONG64)witsml14__VolumePerLengthUom::m3Pkm, "m3Pkm" },
	{ (LONG64)witsml14__VolumePerLengthUom::m3Pm, "m3Pm" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__VolumePerLengthUom2s(struct soap *soap, witsml14__VolumePerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__VolumePerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__VolumePerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__VolumePerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:VolumePerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom), type) || soap_send(soap, soap_witsml14__VolumePerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__VolumePerLengthUom(struct soap *soap, const char *s, witsml14__VolumePerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__VolumePerLengthUom, s);
	if (map)
		*a = (witsml14__VolumePerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__VolumePerLengthUom * SOAP_FMAC4 soap_in_witsml14__VolumePerLengthUom(struct soap *soap, const char *tag, witsml14__VolumePerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__VolumePerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom, sizeof(witsml14__VolumePerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__VolumePerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__VolumePerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumePerLengthUom, sizeof(witsml14__VolumePerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__VolumePerLengthUom * SOAP_FMAC4 soap_new_witsml14__VolumePerLengthUom(struct soap *soap, int n)
{
	witsml14__VolumePerLengthUom *a = static_cast<witsml14__VolumePerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__VolumePerLengthUom)));
	for (witsml14__VolumePerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__VolumePerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__VolumePerLengthUom(struct soap *soap, const witsml14__VolumePerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__VolumePerLengthUom(soap, tag ? tag : "witsml14:VolumePerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__VolumePerLengthUom * SOAP_FMAC4 soap_get_witsml14__VolumePerLengthUom(struct soap *soap, witsml14__VolumePerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__VolumePerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__VolumeFlowRateUom[] =
{	{ (LONG64)witsml14__VolumeFlowRateUom::m3_x002fs, "m3/s" },
	{ (LONG64)witsml14__VolumeFlowRateUom::bbl_x002fd, "bbl/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::bbl_x002fhr, "bbl/hr" },
	{ (LONG64)witsml14__VolumeFlowRateUom::bbl_x002fmin, "bbl/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::cm3_x002f30min, "cm3/30min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::cm3_x002fh, "cm3/h" },
	{ (LONG64)witsml14__VolumeFlowRateUom::cm3_x002fmin, "cm3/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::cm3_x002fs, "cm3/s" },
	{ (LONG64)witsml14__VolumeFlowRateUom::dm3_x002fs, "dm3/s" },
	{ (LONG64)witsml14__VolumeFlowRateUom::ft3_x002fd, "ft3/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::ft3_x002fh, "ft3/h" },
	{ (LONG64)witsml14__VolumeFlowRateUom::ft3_x002fmin, "ft3/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::ft3_x002fs, "ft3/s" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUK_x002fd, "galUK/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUK_x002fhr, "galUK/hr" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUK_x002fmin, "galUK/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUS_x002fd, "galUS/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUS_x002fhr, "galUS/hr" },
	{ (LONG64)witsml14__VolumeFlowRateUom::galUS_x002fmin, "galUS/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::kbbl_x002fd, "kbbl/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::_1000ft3_x002fd, "1000ft3/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::_1000m3_x002fd, "1000m3/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::_1000m3_x002fh, "1000m3/h" },
	{ (LONG64)witsml14__VolumeFlowRateUom::L_x002fh, "L/h" },
	{ (LONG64)witsml14__VolumeFlowRateUom::L_x002fmin, "L/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::L_x002fs, "L/s" },
	{ (LONG64)witsml14__VolumeFlowRateUom::m3_x002fd, "m3/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::m3_x002fh, "m3/h" },
	{ (LONG64)witsml14__VolumeFlowRateUom::m3_x002fmin, "m3/min" },
	{ (LONG64)witsml14__VolumeFlowRateUom::Mbbl_x002fd, "Mbbl/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::M_x0028ft3_x0029_x002fd, "M(ft3)/d" },
	{ (LONG64)witsml14__VolumeFlowRateUom::M_x0028m3_x0029_x002fd, "M(m3)/d" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__VolumeFlowRateUom2s(struct soap *soap, witsml14__VolumeFlowRateUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__VolumeFlowRateUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__VolumeFlowRateUom(struct soap *soap, const char *tag, int id, const witsml14__VolumeFlowRateUom *a, const char *type)
{
	if (!type)
		type = "witsml14:VolumeFlowRateUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom), type) || soap_send(soap, soap_witsml14__VolumeFlowRateUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__VolumeFlowRateUom(struct soap *soap, const char *s, witsml14__VolumeFlowRateUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__VolumeFlowRateUom, s);
	if (map)
		*a = (witsml14__VolumeFlowRateUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__VolumeFlowRateUom * SOAP_FMAC4 soap_in_witsml14__VolumeFlowRateUom(struct soap *soap, const char *tag, witsml14__VolumeFlowRateUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__VolumeFlowRateUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom, sizeof(witsml14__VolumeFlowRateUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__VolumeFlowRateUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__VolumeFlowRateUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeFlowRateUom, sizeof(witsml14__VolumeFlowRateUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__VolumeFlowRateUom * SOAP_FMAC4 soap_new_witsml14__VolumeFlowRateUom(struct soap *soap, int n)
{
	witsml14__VolumeFlowRateUom *a = static_cast<witsml14__VolumeFlowRateUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__VolumeFlowRateUom)));
	for (witsml14__VolumeFlowRateUom *p = a; p && n--; ++p)
		soap_default_witsml14__VolumeFlowRateUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__VolumeFlowRateUom(struct soap *soap, const witsml14__VolumeFlowRateUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__VolumeFlowRateUom(soap, tag ? tag : "witsml14:VolumeFlowRateUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__VolumeFlowRateUom * SOAP_FMAC4 soap_get_witsml14__VolumeFlowRateUom(struct soap *soap, witsml14__VolumeFlowRateUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__VolumeFlowRateUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__VolumeUom[] =
{	{ (LONG64)witsml14__VolumeUom::L, "L" },
	{ (LONG64)witsml14__VolumeUom::m3, "m3" },
	{ (LONG64)witsml14__VolumeUom::acre_x002eft, "acre.ft" },
	{ (LONG64)witsml14__VolumeUom::bbl, "bbl" },
	{ (LONG64)witsml14__VolumeUom::bcf, "bcf" },
	{ (LONG64)witsml14__VolumeUom::cm3, "cm3" },
	{ (LONG64)witsml14__VolumeUom::dm3, "dm3" },
	{ (LONG64)witsml14__VolumeUom::flozUK, "flozUK" },
	{ (LONG64)witsml14__VolumeUom::flozUS, "flozUS" },
	{ (LONG64)witsml14__VolumeUom::ft3, "ft3" },
	{ (LONG64)witsml14__VolumeUom::galUK, "galUK" },
	{ (LONG64)witsml14__VolumeUom::galUS, "galUS" },
	{ (LONG64)witsml14__VolumeUom::ha_x002em, "ha.m" },
	{ (LONG64)witsml14__VolumeUom::hL, "hL" },
	{ (LONG64)witsml14__VolumeUom::in3, "in3" },
	{ (LONG64)witsml14__VolumeUom::_1000ft3, "1000ft3" },
	{ (LONG64)witsml14__VolumeUom::km3, "km3" },
	{ (LONG64)witsml14__VolumeUom::Mbbl, "Mbbl" },
	{ (LONG64)witsml14__VolumeUom::Mcf, "Mcf" },
	{ (LONG64)witsml14__VolumeUom::M_x0028ft3_x0029, "M(ft3)" },
	{ (LONG64)witsml14__VolumeUom::mi3, "mi3" },
	{ (LONG64)witsml14__VolumeUom::mL, "mL" },
	{ (LONG64)witsml14__VolumeUom::M_x0028m3_x0029, "M(m3)" },
	{ (LONG64)witsml14__VolumeUom::mm3, "mm3" },
	{ (LONG64)witsml14__VolumeUom::MMbbl, "MMbbl" },
	{ (LONG64)witsml14__VolumeUom::ptUK, "ptUK" },
	{ (LONG64)witsml14__VolumeUom::ptUS, "ptUS" },
	{ (LONG64)witsml14__VolumeUom::qtUK, "qtUK" },
	{ (LONG64)witsml14__VolumeUom::qtUS, "qtUS" },
	{ (LONG64)witsml14__VolumeUom::tcf, "tcf" },
	{ (LONG64)witsml14__VolumeUom::um2_x002em, "um2.m" },
	{ (LONG64)witsml14__VolumeUom::yd3, "yd3" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__VolumeUom2s(struct soap *soap, witsml14__VolumeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__VolumeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__VolumeUom(struct soap *soap, const char *tag, int id, const witsml14__VolumeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:VolumeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom), type) || soap_send(soap, soap_witsml14__VolumeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__VolumeUom(struct soap *soap, const char *s, witsml14__VolumeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__VolumeUom, s);
	if (map)
		*a = (witsml14__VolumeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__VolumeUom * SOAP_FMAC4 soap_in_witsml14__VolumeUom(struct soap *soap, const char *tag, witsml14__VolumeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__VolumeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom, sizeof(witsml14__VolumeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__VolumeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__VolumeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__VolumeUom, sizeof(witsml14__VolumeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__VolumeUom * SOAP_FMAC4 soap_new_witsml14__VolumeUom(struct soap *soap, int n)
{
	witsml14__VolumeUom *a = static_cast<witsml14__VolumeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__VolumeUom)));
	for (witsml14__VolumeUom *p = a; p && n--; ++p)
		soap_default_witsml14__VolumeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__VolumeUom(struct soap *soap, const witsml14__VolumeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__VolumeUom(soap, tag ? tag : "witsml14:VolumeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__VolumeUom * SOAP_FMAC4 soap_get_witsml14__VolumeUom(struct soap *soap, witsml14__VolumeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__VolumeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__VelocityUom[] =
{	{ (LONG64)witsml14__VelocityUom::m_x002fs, "m/s" },
	{ (LONG64)witsml14__VelocityUom::cm_x002fa, "cm/a" },
	{ (LONG64)witsml14__VelocityUom::cm_x002fs, "cm/s" },
	{ (LONG64)witsml14__VelocityUom::dm_x002fs, "dm/s" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fd, "ft/d" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fh, "ft/h" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fmin, "ft/min" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fms, "ft/ms" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fs, "ft/s" },
	{ (LONG64)witsml14__VelocityUom::ft_x002fus, "ft/us" },
	{ (LONG64)witsml14__VelocityUom::in_x002fa, "in/a" },
	{ (LONG64)witsml14__VelocityUom::in_x002fmin, "in/min" },
	{ (LONG64)witsml14__VelocityUom::in_x002fs, "in/s" },
	{ (LONG64)witsml14__VelocityUom::kft_x002fh, "kft/h" },
	{ (LONG64)witsml14__VelocityUom::kft_x002fs, "kft/s" },
	{ (LONG64)witsml14__VelocityUom::km_x002fh, "km/h" },
	{ (LONG64)witsml14__VelocityUom::km_x002fs, "km/s" },
	{ (LONG64)witsml14__VelocityUom::knot, "knot" },
	{ (LONG64)witsml14__VelocityUom::m_x002fd, "m/d" },
	{ (LONG64)witsml14__VelocityUom::m_x002fh, "m/h" },
	{ (LONG64)witsml14__VelocityUom::m_x002fmin, "m/min" },
	{ (LONG64)witsml14__VelocityUom::m_x002fms, "m/ms" },
	{ (LONG64)witsml14__VelocityUom::mi_x002fh, "mi/h" },
	{ (LONG64)witsml14__VelocityUom::mil_x002fyr, "mil/yr" },
	{ (LONG64)witsml14__VelocityUom::mm_x002fa, "mm/a" },
	{ (LONG64)witsml14__VelocityUom::mm_x002fs, "mm/s" },
	{ (LONG64)witsml14__VelocityUom::nm_x002fs, "nm/s" },
	{ (LONG64)witsml14__VelocityUom::um_x002fs, "um/s" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__VelocityUom2s(struct soap *soap, witsml14__VelocityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__VelocityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__VelocityUom(struct soap *soap, const char *tag, int id, const witsml14__VelocityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:VelocityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom), type) || soap_send(soap, soap_witsml14__VelocityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__VelocityUom(struct soap *soap, const char *s, witsml14__VelocityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__VelocityUom, s);
	if (map)
		*a = (witsml14__VelocityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__VelocityUom * SOAP_FMAC4 soap_in_witsml14__VelocityUom(struct soap *soap, const char *tag, witsml14__VelocityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__VelocityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom, sizeof(witsml14__VelocityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__VelocityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__VelocityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__VelocityUom, sizeof(witsml14__VelocityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__VelocityUom * SOAP_FMAC4 soap_new_witsml14__VelocityUom(struct soap *soap, int n)
{
	witsml14__VelocityUom *a = static_cast<witsml14__VelocityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__VelocityUom)));
	for (witsml14__VelocityUom *p = a; p && n--; ++p)
		soap_default_witsml14__VelocityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__VelocityUom(struct soap *soap, const witsml14__VelocityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__VelocityUom(soap, tag ? tag : "witsml14:VelocityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__VelocityUom * SOAP_FMAC4 soap_get_witsml14__VelocityUom(struct soap *soap, witsml14__VelocityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__VelocityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__TimeUom[] =
{	{ (LONG64)witsml14__TimeUom::s, "s" },
	{ (LONG64)witsml14__TimeUom::a, "a" },
	{ (LONG64)witsml14__TimeUom::d, "d" },
	{ (LONG64)witsml14__TimeUom::h, "h" },
	{ (LONG64)witsml14__TimeUom::cs, "cs" },
	{ (LONG64)witsml14__TimeUom::Ga, "Ga" },
	{ (LONG64)witsml14__TimeUom::_100s, "100s" },
	{ (LONG64)witsml14__TimeUom::Ma, "Ma" },
	{ (LONG64)witsml14__TimeUom::min_, "min" },
	{ (LONG64)witsml14__TimeUom::ms, "ms" },
	{ (LONG64)witsml14__TimeUom::ms_x002f2, "ms/2" },
	{ (LONG64)witsml14__TimeUom::ns, "ns" },
	{ (LONG64)witsml14__TimeUom::ps, "ps" },
	{ (LONG64)witsml14__TimeUom::us, "us" },
	{ (LONG64)witsml14__TimeUom::wk, "wk" },
	{ (LONG64)witsml14__TimeUom::_100ka, "100ka" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__TimeUom2s(struct soap *soap, witsml14__TimeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__TimeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__TimeUom(struct soap *soap, const char *tag, int id, const witsml14__TimeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:TimeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom), type) || soap_send(soap, soap_witsml14__TimeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__TimeUom(struct soap *soap, const char *s, witsml14__TimeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__TimeUom, s);
	if (map)
		*a = (witsml14__TimeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__TimeUom * SOAP_FMAC4 soap_in_witsml14__TimeUom(struct soap *soap, const char *tag, witsml14__TimeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__TimeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom, sizeof(witsml14__TimeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__TimeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__TimeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__TimeUom, sizeof(witsml14__TimeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__TimeUom * SOAP_FMAC4 soap_new_witsml14__TimeUom(struct soap *soap, int n)
{
	witsml14__TimeUom *a = static_cast<witsml14__TimeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__TimeUom)));
	for (witsml14__TimeUom *p = a; p && n--; ++p)
		soap_default_witsml14__TimeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__TimeUom(struct soap *soap, const witsml14__TimeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__TimeUom(soap, tag ? tag : "witsml14:TimeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TimeUom * SOAP_FMAC4 soap_get_witsml14__TimeUom(struct soap *soap, witsml14__TimeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__TimeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ThermodynamicTemperatureUom[] =
{	{ (LONG64)witsml14__ThermodynamicTemperatureUom::K, "K" },
	{ (LONG64)witsml14__ThermodynamicTemperatureUom::degC, "degC" },
	{ (LONG64)witsml14__ThermodynamicTemperatureUom::degF, "degF" },
	{ (LONG64)witsml14__ThermodynamicTemperatureUom::degR, "degR" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ThermodynamicTemperatureUom2s(struct soap *soap, witsml14__ThermodynamicTemperatureUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ThermodynamicTemperatureUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ThermodynamicTemperatureUom(struct soap *soap, const char *tag, int id, const witsml14__ThermodynamicTemperatureUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ThermodynamicTemperatureUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom), type) || soap_send(soap, soap_witsml14__ThermodynamicTemperatureUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ThermodynamicTemperatureUom(struct soap *soap, const char *s, witsml14__ThermodynamicTemperatureUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ThermodynamicTemperatureUom, s);
	if (map)
		*a = (witsml14__ThermodynamicTemperatureUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ThermodynamicTemperatureUom * SOAP_FMAC4 soap_in_witsml14__ThermodynamicTemperatureUom(struct soap *soap, const char *tag, witsml14__ThermodynamicTemperatureUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ThermodynamicTemperatureUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom, sizeof(witsml14__ThermodynamicTemperatureUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ThermodynamicTemperatureUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ThermodynamicTemperatureUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermodynamicTemperatureUom, sizeof(witsml14__ThermodynamicTemperatureUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ThermodynamicTemperatureUom * SOAP_FMAC4 soap_new_witsml14__ThermodynamicTemperatureUom(struct soap *soap, int n)
{
	witsml14__ThermodynamicTemperatureUom *a = static_cast<witsml14__ThermodynamicTemperatureUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ThermodynamicTemperatureUom)));
	for (witsml14__ThermodynamicTemperatureUom *p = a; p && n--; ++p)
		soap_default_witsml14__ThermodynamicTemperatureUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ThermodynamicTemperatureUom(struct soap *soap, const witsml14__ThermodynamicTemperatureUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ThermodynamicTemperatureUom(soap, tag ? tag : "witsml14:ThermodynamicTemperatureUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ThermodynamicTemperatureUom * SOAP_FMAC4 soap_get_witsml14__ThermodynamicTemperatureUom(struct soap *soap, witsml14__ThermodynamicTemperatureUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ThermodynamicTemperatureUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ThermalVolumetricExpansionUom[] =
{	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::_1_x002fK, "1/K" },
	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::ppm_x002fdegC, "ppm/degC" },
	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::ppm_x002fdegF, "ppm/degF" },
	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::_1_x002fdegC, "1/degC" },
	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::_1_x002fdegF, "1/degF" },
	{ (LONG64)witsml14__ThermalVolumetricExpansionUom::_1_x002fdegR, "1/degR" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ThermalVolumetricExpansionUom2s(struct soap *soap, witsml14__ThermalVolumetricExpansionUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ThermalVolumetricExpansionUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ThermalVolumetricExpansionUom(struct soap *soap, const char *tag, int id, const witsml14__ThermalVolumetricExpansionUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ThermalVolumetricExpansionUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom), type) || soap_send(soap, soap_witsml14__ThermalVolumetricExpansionUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ThermalVolumetricExpansionUom(struct soap *soap, const char *s, witsml14__ThermalVolumetricExpansionUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ThermalVolumetricExpansionUom, s);
	if (map)
		*a = (witsml14__ThermalVolumetricExpansionUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ThermalVolumetricExpansionUom * SOAP_FMAC4 soap_in_witsml14__ThermalVolumetricExpansionUom(struct soap *soap, const char *tag, witsml14__ThermalVolumetricExpansionUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ThermalVolumetricExpansionUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom, sizeof(witsml14__ThermalVolumetricExpansionUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ThermalVolumetricExpansionUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ThermalVolumetricExpansionUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalVolumetricExpansionUom, sizeof(witsml14__ThermalVolumetricExpansionUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ThermalVolumetricExpansionUom * SOAP_FMAC4 soap_new_witsml14__ThermalVolumetricExpansionUom(struct soap *soap, int n)
{
	witsml14__ThermalVolumetricExpansionUom *a = static_cast<witsml14__ThermalVolumetricExpansionUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ThermalVolumetricExpansionUom)));
	for (witsml14__ThermalVolumetricExpansionUom *p = a; p && n--; ++p)
		soap_default_witsml14__ThermalVolumetricExpansionUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ThermalVolumetricExpansionUom(struct soap *soap, const witsml14__ThermalVolumetricExpansionUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ThermalVolumetricExpansionUom(soap, tag ? tag : "witsml14:ThermalVolumetricExpansionUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ThermalVolumetricExpansionUom * SOAP_FMAC4 soap_get_witsml14__ThermalVolumetricExpansionUom(struct soap *soap, witsml14__ThermalVolumetricExpansionUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ThermalVolumetricExpansionUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ThermalConductivityUom[] =
{	{ (LONG64)witsml14__ThermalConductivityUom::W_x002fm_x002eK, "W/m.K" },
	{ (LONG64)witsml14__ThermalConductivityUom::Btu_x002fhr_x002eft_x002edegF, "Btu/hr.ft.degF" },
	{ (LONG64)witsml14__ThermalConductivityUom::cal_x002fh_x002ecm_x002edegC, "cal/h.cm.degC" },
	{ (LONG64)witsml14__ThermalConductivityUom::kcal_x002fh_x002em_x002edegC, "kcal/h.m.degC" },
	{ (LONG64)witsml14__ThermalConductivityUom::cal_x002fs_x002ecm_x002edegC, "cal/s.cm.degC" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ThermalConductivityUom2s(struct soap *soap, witsml14__ThermalConductivityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ThermalConductivityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ThermalConductivityUom(struct soap *soap, const char *tag, int id, const witsml14__ThermalConductivityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ThermalConductivityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom), type) || soap_send(soap, soap_witsml14__ThermalConductivityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ThermalConductivityUom(struct soap *soap, const char *s, witsml14__ThermalConductivityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ThermalConductivityUom, s);
	if (map)
		*a = (witsml14__ThermalConductivityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ThermalConductivityUom * SOAP_FMAC4 soap_in_witsml14__ThermalConductivityUom(struct soap *soap, const char *tag, witsml14__ThermalConductivityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ThermalConductivityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom, sizeof(witsml14__ThermalConductivityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ThermalConductivityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ThermalConductivityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ThermalConductivityUom, sizeof(witsml14__ThermalConductivityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ThermalConductivityUom * SOAP_FMAC4 soap_new_witsml14__ThermalConductivityUom(struct soap *soap, int n)
{
	witsml14__ThermalConductivityUom *a = static_cast<witsml14__ThermalConductivityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ThermalConductivityUom)));
	for (witsml14__ThermalConductivityUom *p = a; p && n--; ++p)
		soap_default_witsml14__ThermalConductivityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ThermalConductivityUom(struct soap *soap, const witsml14__ThermalConductivityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ThermalConductivityUom(soap, tag ? tag : "witsml14:ThermalConductivityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ThermalConductivityUom * SOAP_FMAC4 soap_get_witsml14__ThermalConductivityUom(struct soap *soap, witsml14__ThermalConductivityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ThermalConductivityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StandardVolumePerTimeUom[] =
{	{ (LONG64)witsml14__StandardVolumePerTimeUom::scf_x002860F_x0029_x002fd, "scf(60F)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::scm_x002815C_x0029_x002fs, "scm(15C)/s" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::scm_x002815C_x0029_x002fd, "scm(15C)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::stb_x002860F_x0029_x002fd, "stb(60F)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::ksm3_x002fd, "ksm3/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::Mscm_x002815C_x0029_x002fd, "Mscm(15C)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::MMscm_x002815C_x0029_x002fd, "MMscm(15C)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::Mstb_x002860F_x0029_x002fd, "Mstb(60F)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::MMstb_x002860F_x0029_x002fd, "MMstb(60F)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::Mscf_x002860F_x0029_x002fd, "Mscf(60F)/d" },
	{ (LONG64)witsml14__StandardVolumePerTimeUom::MMscf_x002860F_x0029_x002fd, "MMscf(60F)/d" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StandardVolumePerTimeUom2s(struct soap *soap, witsml14__StandardVolumePerTimeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StandardVolumePerTimeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StandardVolumePerTimeUom(struct soap *soap, const char *tag, int id, const witsml14__StandardVolumePerTimeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:StandardVolumePerTimeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom), type) || soap_send(soap, soap_witsml14__StandardVolumePerTimeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StandardVolumePerTimeUom(struct soap *soap, const char *s, witsml14__StandardVolumePerTimeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StandardVolumePerTimeUom, s);
	if (map)
		*a = (witsml14__StandardVolumePerTimeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StandardVolumePerTimeUom * SOAP_FMAC4 soap_in_witsml14__StandardVolumePerTimeUom(struct soap *soap, const char *tag, witsml14__StandardVolumePerTimeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StandardVolumePerTimeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom, sizeof(witsml14__StandardVolumePerTimeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StandardVolumePerTimeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StandardVolumePerTimeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumePerTimeUom, sizeof(witsml14__StandardVolumePerTimeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StandardVolumePerTimeUom * SOAP_FMAC4 soap_new_witsml14__StandardVolumePerTimeUom(struct soap *soap, int n)
{
	witsml14__StandardVolumePerTimeUom *a = static_cast<witsml14__StandardVolumePerTimeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StandardVolumePerTimeUom)));
	for (witsml14__StandardVolumePerTimeUom *p = a; p && n--; ++p)
		soap_default_witsml14__StandardVolumePerTimeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StandardVolumePerTimeUom(struct soap *soap, const witsml14__StandardVolumePerTimeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StandardVolumePerTimeUom(soap, tag ? tag : "witsml14:StandardVolumePerTimeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StandardVolumePerTimeUom * SOAP_FMAC4 soap_get_witsml14__StandardVolumePerTimeUom(struct soap *soap, witsml14__StandardVolumePerTimeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StandardVolumePerTimeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__StandardVolumeUom[] =
{	{ (LONG64)witsml14__StandardVolumeUom::scm_x002815C_x0029, "scm(15C)" },
	{ (LONG64)witsml14__StandardVolumeUom::scm_x00280C_x0029, "scm(0C)" },
	{ (LONG64)witsml14__StandardVolumeUom::Gsm3, "Gsm3" },
	{ (LONG64)witsml14__StandardVolumeUom::ksm3, "ksm3" },
	{ (LONG64)witsml14__StandardVolumeUom::MMscf_x002860F_x0029, "MMscf(60F)" },
	{ (LONG64)witsml14__StandardVolumeUom::MMscm_x002815C_x0029, "MMscm(15C)" },
	{ (LONG64)witsml14__StandardVolumeUom::MMstb_x002860F_x0029, "MMstb(60F)" },
	{ (LONG64)witsml14__StandardVolumeUom::Mscf_x002860F_x0029, "Mscf(60F)" },
	{ (LONG64)witsml14__StandardVolumeUom::Mstb_x002860F_x0029, "Mstb(60F)" },
	{ (LONG64)witsml14__StandardVolumeUom::scf_x002860F_x0029, "scf(60F)" },
	{ (LONG64)witsml14__StandardVolumeUom::stb_x002860F_x0029, "stb(60F)" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__StandardVolumeUom2s(struct soap *soap, witsml14__StandardVolumeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__StandardVolumeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__StandardVolumeUom(struct soap *soap, const char *tag, int id, const witsml14__StandardVolumeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:StandardVolumeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom), type) || soap_send(soap, soap_witsml14__StandardVolumeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__StandardVolumeUom(struct soap *soap, const char *s, witsml14__StandardVolumeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__StandardVolumeUom, s);
	if (map)
		*a = (witsml14__StandardVolumeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__StandardVolumeUom * SOAP_FMAC4 soap_in_witsml14__StandardVolumeUom(struct soap *soap, const char *tag, witsml14__StandardVolumeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__StandardVolumeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom, sizeof(witsml14__StandardVolumeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__StandardVolumeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__StandardVolumeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__StandardVolumeUom, sizeof(witsml14__StandardVolumeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__StandardVolumeUom * SOAP_FMAC4 soap_new_witsml14__StandardVolumeUom(struct soap *soap, int n)
{
	witsml14__StandardVolumeUom *a = static_cast<witsml14__StandardVolumeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__StandardVolumeUom)));
	for (witsml14__StandardVolumeUom *p = a; p && n--; ++p)
		soap_default_witsml14__StandardVolumeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__StandardVolumeUom(struct soap *soap, const witsml14__StandardVolumeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__StandardVolumeUom(soap, tag ? tag : "witsml14:StandardVolumeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__StandardVolumeUom * SOAP_FMAC4 soap_get_witsml14__StandardVolumeUom(struct soap *soap, witsml14__StandardVolumeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__StandardVolumeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__SpecificVolumeUom[] =
{	{ (LONG64)witsml14__SpecificVolumeUom::m3_x002fkg, "m3/kg" },
	{ (LONG64)witsml14__SpecificVolumeUom::bbl_x002ftonUK, "bbl/tonUK" },
	{ (LONG64)witsml14__SpecificVolumeUom::bbl_x002ftonUS, "bbl/tonUS" },
	{ (LONG64)witsml14__SpecificVolumeUom::cm3_x002fg, "cm3/g" },
	{ (LONG64)witsml14__SpecificVolumeUom::dm3_x002fkg, "dm3/kg" },
	{ (LONG64)witsml14__SpecificVolumeUom::dm3_x002ft, "dm3/t" },
	{ (LONG64)witsml14__SpecificVolumeUom::ft3_x002fkg, "ft3/kg" },
	{ (LONG64)witsml14__SpecificVolumeUom::ft3_x002flbm, "ft3/lbm" },
	{ (LONG64)witsml14__SpecificVolumeUom::ft3_x002fsack94, "ft3/sack94" },
	{ (LONG64)witsml14__SpecificVolumeUom::galUS_x002fsack94, "galUS/sack94" },
	{ (LONG64)witsml14__SpecificVolumeUom::galUK_x002flbm, "galUK/lbm" },
	{ (LONG64)witsml14__SpecificVolumeUom::galUS_x002flbm, "galUS/lbm" },
	{ (LONG64)witsml14__SpecificVolumeUom::galUS_x002ftonUK, "galUS/tonUK" },
	{ (LONG64)witsml14__SpecificVolumeUom::galUS_x002ftonUS, "galUS/tonUS" },
	{ (LONG64)witsml14__SpecificVolumeUom::L_x002f100kg, "L/100kg" },
	{ (LONG64)witsml14__SpecificVolumeUom::L_x002fkg, "L/kg" },
	{ (LONG64)witsml14__SpecificVolumeUom::L_x002ft, "L/t" },
	{ (LONG64)witsml14__SpecificVolumeUom::L_x002ftonUK, "L/tonUK" },
	{ (LONG64)witsml14__SpecificVolumeUom::m3_x002fg, "m3/g" },
	{ (LONG64)witsml14__SpecificVolumeUom::m3_x002ft, "m3/t" },
	{ (LONG64)witsml14__SpecificVolumeUom::m3_x002ftonUK, "m3/tonUK" },
	{ (LONG64)witsml14__SpecificVolumeUom::m3_x002ftonUS, "m3/tonUS" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__SpecificVolumeUom2s(struct soap *soap, witsml14__SpecificVolumeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__SpecificVolumeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__SpecificVolumeUom(struct soap *soap, const char *tag, int id, const witsml14__SpecificVolumeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:SpecificVolumeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom), type) || soap_send(soap, soap_witsml14__SpecificVolumeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__SpecificVolumeUom(struct soap *soap, const char *s, witsml14__SpecificVolumeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__SpecificVolumeUom, s);
	if (map)
		*a = (witsml14__SpecificVolumeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__SpecificVolumeUom * SOAP_FMAC4 soap_in_witsml14__SpecificVolumeUom(struct soap *soap, const char *tag, witsml14__SpecificVolumeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__SpecificVolumeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom, sizeof(witsml14__SpecificVolumeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__SpecificVolumeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__SpecificVolumeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificVolumeUom, sizeof(witsml14__SpecificVolumeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__SpecificVolumeUom * SOAP_FMAC4 soap_new_witsml14__SpecificVolumeUom(struct soap *soap, int n)
{
	witsml14__SpecificVolumeUom *a = static_cast<witsml14__SpecificVolumeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__SpecificVolumeUom)));
	for (witsml14__SpecificVolumeUom *p = a; p && n--; ++p)
		soap_default_witsml14__SpecificVolumeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__SpecificVolumeUom(struct soap *soap, const witsml14__SpecificVolumeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__SpecificVolumeUom(soap, tag ? tag : "witsml14:SpecificVolumeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__SpecificVolumeUom * SOAP_FMAC4 soap_get_witsml14__SpecificVolumeUom(struct soap *soap, witsml14__SpecificVolumeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__SpecificVolumeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__SpecificHeatCapacityUom[] =
{	{ (LONG64)witsml14__SpecificHeatCapacityUom::J_x002fkg_x002eK, "J/kg.K" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::Btu_x002flbm_x002edegF, "Btu/lbm.degF" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::Btu_x002flbm_x002edegR, "Btu/lbm.degR" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::cal_x002fg_x002eK, "cal/g.K" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::J_x002fg_x002eK, "J/g.K" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::kcal_x002fkg_x002edegC, "kcal/kg.degC" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::kJ_x002fkg_x002eK, "kJ/kg.K" },
	{ (LONG64)witsml14__SpecificHeatCapacityUom::kW_x002eh_x002fkg_x002edegC, "kW.h/kg.degC" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__SpecificHeatCapacityUom2s(struct soap *soap, witsml14__SpecificHeatCapacityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__SpecificHeatCapacityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__SpecificHeatCapacityUom(struct soap *soap, const char *tag, int id, const witsml14__SpecificHeatCapacityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:SpecificHeatCapacityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom), type) || soap_send(soap, soap_witsml14__SpecificHeatCapacityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__SpecificHeatCapacityUom(struct soap *soap, const char *s, witsml14__SpecificHeatCapacityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__SpecificHeatCapacityUom, s);
	if (map)
		*a = (witsml14__SpecificHeatCapacityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__SpecificHeatCapacityUom * SOAP_FMAC4 soap_in_witsml14__SpecificHeatCapacityUom(struct soap *soap, const char *tag, witsml14__SpecificHeatCapacityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__SpecificHeatCapacityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom, sizeof(witsml14__SpecificHeatCapacityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__SpecificHeatCapacityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__SpecificHeatCapacityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__SpecificHeatCapacityUom, sizeof(witsml14__SpecificHeatCapacityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__SpecificHeatCapacityUom * SOAP_FMAC4 soap_new_witsml14__SpecificHeatCapacityUom(struct soap *soap, int n)
{
	witsml14__SpecificHeatCapacityUom *a = static_cast<witsml14__SpecificHeatCapacityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__SpecificHeatCapacityUom)));
	for (witsml14__SpecificHeatCapacityUom *p = a; p && n--; ++p)
		soap_default_witsml14__SpecificHeatCapacityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__SpecificHeatCapacityUom(struct soap *soap, const witsml14__SpecificHeatCapacityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__SpecificHeatCapacityUom(soap, tag ? tag : "witsml14:SpecificHeatCapacityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__SpecificHeatCapacityUom * SOAP_FMAC4 soap_get_witsml14__SpecificHeatCapacityUom(struct soap *soap, witsml14__SpecificHeatCapacityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__SpecificHeatCapacityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__RelativePowerUom[] =
{	{ (LONG64)witsml14__RelativePowerUom::_x0025, "%" },
	{ (LONG64)witsml14__RelativePowerUom::Btu_x002fbhp_x002ehr, "Btu/bhp.hr" },
	{ (LONG64)witsml14__RelativePowerUom::W_x002fkW, "W/kW" },
	{ (LONG64)witsml14__RelativePowerUom::W_x002fW, "W/W" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__RelativePowerUom2s(struct soap *soap, witsml14__RelativePowerUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__RelativePowerUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__RelativePowerUom(struct soap *soap, const char *tag, int id, const witsml14__RelativePowerUom *a, const char *type)
{
	if (!type)
		type = "witsml14:RelativePowerUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom), type) || soap_send(soap, soap_witsml14__RelativePowerUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__RelativePowerUom(struct soap *soap, const char *s, witsml14__RelativePowerUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__RelativePowerUom, s);
	if (map)
		*a = (witsml14__RelativePowerUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__RelativePowerUom * SOAP_FMAC4 soap_in_witsml14__RelativePowerUom(struct soap *soap, const char *tag, witsml14__RelativePowerUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__RelativePowerUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom, sizeof(witsml14__RelativePowerUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__RelativePowerUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__RelativePowerUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__RelativePowerUom, sizeof(witsml14__RelativePowerUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__RelativePowerUom * SOAP_FMAC4 soap_new_witsml14__RelativePowerUom(struct soap *soap, int n)
{
	witsml14__RelativePowerUom *a = static_cast<witsml14__RelativePowerUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__RelativePowerUom)));
	for (witsml14__RelativePowerUom *p = a; p && n--; ++p)
		soap_default_witsml14__RelativePowerUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__RelativePowerUom(struct soap *soap, const witsml14__RelativePowerUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__RelativePowerUom(soap, tag ? tag : "witsml14:RelativePowerUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__RelativePowerUom * SOAP_FMAC4 soap_get_witsml14__RelativePowerUom(struct soap *soap, witsml14__RelativePowerUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__RelativePowerUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PressureUom[] =
{	{ (LONG64)witsml14__PressureUom::Pa, "Pa" },
	{ (LONG64)witsml14__PressureUom::at, "at" },
	{ (LONG64)witsml14__PressureUom::atm, "atm" },
	{ (LONG64)witsml14__PressureUom::bar, "bar" },
	{ (LONG64)witsml14__PressureUom::cmH2O_x00284degC_x0029, "cmH2O(4degC)" },
	{ (LONG64)witsml14__PressureUom::dyne_x002fcm2, "dyne/cm2" },
	{ (LONG64)witsml14__PressureUom::GPa, "GPa" },
	{ (LONG64)witsml14__PressureUom::hbar, "hbar" },
	{ (LONG64)witsml14__PressureUom::inH2O_x002839_x002e2F_x0029, "inH2O(39.2F)" },
	{ (LONG64)witsml14__PressureUom::inH2O_x002860F_x0029, "inH2O(60F)" },
	{ (LONG64)witsml14__PressureUom::inHg_x002832F_x0029, "inHg(32F)" },
	{ (LONG64)witsml14__PressureUom::inHg_x002860F_x0029, "inHg(60F)" },
	{ (LONG64)witsml14__PressureUom::kgf_x002fcm2, "kgf/cm2" },
	{ (LONG64)witsml14__PressureUom::kgf_x002fmm2, "kgf/mm2" },
	{ (LONG64)witsml14__PressureUom::kN_x002fm2, "kN/m2" },
	{ (LONG64)witsml14__PressureUom::kPa, "kPa" },
	{ (LONG64)witsml14__PressureUom::kpsi, "kpsi" },
	{ (LONG64)witsml14__PressureUom::lbf_x002fft2, "lbf/ft2" },
	{ (LONG64)witsml14__PressureUom::lbf_x002f100ft2, "lbf/100ft2" },
	{ (LONG64)witsml14__PressureUom::lbf_x002fin2, "lbf/in2" },
	{ (LONG64)witsml14__PressureUom::mbar, "mbar" },
	{ (LONG64)witsml14__PressureUom::mmHg_x00280C_x0029, "mmHg(0C)" },
	{ (LONG64)witsml14__PressureUom::mPa, "mPa" },
	{ (LONG64)witsml14__PressureUom::MPa, "MPa" },
	{ (LONG64)witsml14__PressureUom::Mpsi, "Mpsi" },
	{ (LONG64)witsml14__PressureUom::N_x002fm2, "N/m2" },
	{ (LONG64)witsml14__PressureUom::N_x002fmm2, "N/mm2" },
	{ (LONG64)witsml14__PressureUom::Pa_x0028g_x0029, "Pa(g)" },
	{ (LONG64)witsml14__PressureUom::pPa, "pPa" },
	{ (LONG64)witsml14__PressureUom::psi, "psi" },
	{ (LONG64)witsml14__PressureUom::psia, "psia" },
	{ (LONG64)witsml14__PressureUom::psig, "psig" },
	{ (LONG64)witsml14__PressureUom::tonfUS_x002fft2, "tonfUS/ft2" },
	{ (LONG64)witsml14__PressureUom::tonfUS_x002fin2, "tonfUS/in2" },
	{ (LONG64)witsml14__PressureUom::torr, "torr" },
	{ (LONG64)witsml14__PressureUom::ubar, "ubar" },
	{ (LONG64)witsml14__PressureUom::umHg_x00280C_x0029, "umHg(0C)" },
	{ (LONG64)witsml14__PressureUom::uPa, "uPa" },
	{ (LONG64)witsml14__PressureUom::upsi, "upsi" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PressureUom2s(struct soap *soap, witsml14__PressureUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PressureUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PressureUom(struct soap *soap, const char *tag, int id, const witsml14__PressureUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PressureUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom), type) || soap_send(soap, soap_witsml14__PressureUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PressureUom(struct soap *soap, const char *s, witsml14__PressureUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PressureUom, s);
	if (map)
		*a = (witsml14__PressureUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PressureUom * SOAP_FMAC4 soap_in_witsml14__PressureUom(struct soap *soap, const char *tag, witsml14__PressureUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PressureUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom, sizeof(witsml14__PressureUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PressureUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PressureUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PressureUom, sizeof(witsml14__PressureUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PressureUom * SOAP_FMAC4 soap_new_witsml14__PressureUom(struct soap *soap, int n)
{
	witsml14__PressureUom *a = static_cast<witsml14__PressureUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PressureUom)));
	for (witsml14__PressureUom *p = a; p && n--; ++p)
		soap_default_witsml14__PressureUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PressureUom(struct soap *soap, const witsml14__PressureUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PressureUom(soap, tag ? tag : "witsml14:PressureUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PressureUom * SOAP_FMAC4 soap_get_witsml14__PressureUom(struct soap *soap, witsml14__PressureUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PressureUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PowerUom[] =
{	{ (LONG64)witsml14__PowerUom::W, "W" },
	{ (LONG64)witsml14__PowerUom::ch, "ch" },
	{ (LONG64)witsml14__PowerUom::CV, "CV" },
	{ (LONG64)witsml14__PowerUom::ehp, "ehp" },
	{ (LONG64)witsml14__PowerUom::GW, "GW" },
	{ (LONG64)witsml14__PowerUom::hhp, "hhp" },
	{ (LONG64)witsml14__PowerUom::hp, "hp" },
	{ (LONG64)witsml14__PowerUom::kcal_x002fh, "kcal/h" },
	{ (LONG64)witsml14__PowerUom::kW, "kW" },
	{ (LONG64)witsml14__PowerUom::MJ_x002fa, "MJ/a" },
	{ (LONG64)witsml14__PowerUom::MW, "MW" },
	{ (LONG64)witsml14__PowerUom::mW, "mW" },
	{ (LONG64)witsml14__PowerUom::nW, "nW" },
	{ (LONG64)witsml14__PowerUom::ton_x0020of_x0020refrig, "ton of refrig" },
	{ (LONG64)witsml14__PowerUom::TW, "TW" },
	{ (LONG64)witsml14__PowerUom::uW, "uW" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PowerUom2s(struct soap *soap, witsml14__PowerUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PowerUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PowerUom(struct soap *soap, const char *tag, int id, const witsml14__PowerUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PowerUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom), type) || soap_send(soap, soap_witsml14__PowerUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PowerUom(struct soap *soap, const char *s, witsml14__PowerUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PowerUom, s);
	if (map)
		*a = (witsml14__PowerUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PowerUom * SOAP_FMAC4 soap_in_witsml14__PowerUom(struct soap *soap, const char *tag, witsml14__PowerUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PowerUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom, sizeof(witsml14__PowerUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PowerUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PowerUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PowerUom, sizeof(witsml14__PowerUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PowerUom * SOAP_FMAC4 soap_new_witsml14__PowerUom(struct soap *soap, int n)
{
	witsml14__PowerUom *a = static_cast<witsml14__PowerUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PowerUom)));
	for (witsml14__PowerUom *p = a; p && n--; ++p)
		soap_default_witsml14__PowerUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PowerUom(struct soap *soap, const witsml14__PowerUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PowerUom(soap, tag ? tag : "witsml14:PowerUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PowerUom * SOAP_FMAC4 soap_get_witsml14__PowerUom(struct soap *soap, witsml14__PowerUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PowerUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PlaneAngleUom[] =
{	{ (LONG64)witsml14__PlaneAngleUom::c, "c" },
	{ (LONG64)witsml14__PlaneAngleUom::rad, "rad" },
	{ (LONG64)witsml14__PlaneAngleUom::ccgr, "ccgr" },
	{ (LONG64)witsml14__PlaneAngleUom::cgr, "cgr" },
	{ (LONG64)witsml14__PlaneAngleUom::dega, "dega" },
	{ (LONG64)witsml14__PlaneAngleUom::gon, "gon" },
	{ (LONG64)witsml14__PlaneAngleUom::gr, "gr" },
	{ (LONG64)witsml14__PlaneAngleUom::Grad, "Grad" },
	{ (LONG64)witsml14__PlaneAngleUom::krad, "krad" },
	{ (LONG64)witsml14__PlaneAngleUom::mila, "mila" },
	{ (LONG64)witsml14__PlaneAngleUom::mina, "mina" },
	{ (LONG64)witsml14__PlaneAngleUom::mrad, "mrad" },
	{ (LONG64)witsml14__PlaneAngleUom::Mrad, "Mrad" },
	{ (LONG64)witsml14__PlaneAngleUom::mseca, "mseca" },
	{ (LONG64)witsml14__PlaneAngleUom::seca, "seca" },
	{ (LONG64)witsml14__PlaneAngleUom::urad, "urad" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PlaneAngleUom2s(struct soap *soap, witsml14__PlaneAngleUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PlaneAngleUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PlaneAngleUom(struct soap *soap, const char *tag, int id, const witsml14__PlaneAngleUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PlaneAngleUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom), type) || soap_send(soap, soap_witsml14__PlaneAngleUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PlaneAngleUom(struct soap *soap, const char *s, witsml14__PlaneAngleUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PlaneAngleUom, s);
	if (map)
		*a = (witsml14__PlaneAngleUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PlaneAngleUom * SOAP_FMAC4 soap_in_witsml14__PlaneAngleUom(struct soap *soap, const char *tag, witsml14__PlaneAngleUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PlaneAngleUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom, sizeof(witsml14__PlaneAngleUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PlaneAngleUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PlaneAngleUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PlaneAngleUom, sizeof(witsml14__PlaneAngleUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PlaneAngleUom * SOAP_FMAC4 soap_new_witsml14__PlaneAngleUom(struct soap *soap, int n)
{
	witsml14__PlaneAngleUom *a = static_cast<witsml14__PlaneAngleUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PlaneAngleUom)));
	for (witsml14__PlaneAngleUom *p = a; p && n--; ++p)
		soap_default_witsml14__PlaneAngleUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PlaneAngleUom(struct soap *soap, const witsml14__PlaneAngleUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PlaneAngleUom(soap, tag ? tag : "witsml14:PlaneAngleUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PlaneAngleUom * SOAP_FMAC4 soap_get_witsml14__PlaneAngleUom(struct soap *soap, witsml14__PlaneAngleUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PlaneAngleUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PermeabilityRockUom[] =
{	{ (LONG64)witsml14__PermeabilityRockUom::D, "D" },
	{ (LONG64)witsml14__PermeabilityRockUom::mD, "mD" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PermeabilityRockUom2s(struct soap *soap, witsml14__PermeabilityRockUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PermeabilityRockUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PermeabilityRockUom(struct soap *soap, const char *tag, int id, const witsml14__PermeabilityRockUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PermeabilityRockUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom), type) || soap_send(soap, soap_witsml14__PermeabilityRockUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PermeabilityRockUom(struct soap *soap, const char *s, witsml14__PermeabilityRockUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PermeabilityRockUom, s);
	if (map)
		*a = (witsml14__PermeabilityRockUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PermeabilityRockUom * SOAP_FMAC4 soap_in_witsml14__PermeabilityRockUom(struct soap *soap, const char *tag, witsml14__PermeabilityRockUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PermeabilityRockUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom, sizeof(witsml14__PermeabilityRockUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PermeabilityRockUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PermeabilityRockUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PermeabilityRockUom, sizeof(witsml14__PermeabilityRockUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PermeabilityRockUom * SOAP_FMAC4 soap_new_witsml14__PermeabilityRockUom(struct soap *soap, int n)
{
	witsml14__PermeabilityRockUom *a = static_cast<witsml14__PermeabilityRockUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PermeabilityRockUom)));
	for (witsml14__PermeabilityRockUom *p = a; p && n--; ++p)
		soap_default_witsml14__PermeabilityRockUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PermeabilityRockUom(struct soap *soap, const witsml14__PermeabilityRockUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PermeabilityRockUom(soap, tag ? tag : "witsml14:PermeabilityRockUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PermeabilityRockUom * SOAP_FMAC4 soap_get_witsml14__PermeabilityRockUom(struct soap *soap, witsml14__PermeabilityRockUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PermeabilityRockUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PerLengthUom[] =
{	{ (LONG64)witsml14__PerLengthUom::_1_x002fm, "1/m" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fangstrom, "1/angstrom" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fcm, "1/cm" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fft, "1/ft" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fin, "1/in" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fmi, "1/mi" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fmm, "1/mm" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fnm, "1/nm" },
	{ (LONG64)witsml14__PerLengthUom::_1_x002fyd, "1/yd" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PerLengthUom2s(struct soap *soap, witsml14__PerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__PerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom), type) || soap_send(soap, soap_witsml14__PerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PerLengthUom(struct soap *soap, const char *s, witsml14__PerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PerLengthUom, s);
	if (map)
		*a = (witsml14__PerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PerLengthUom * SOAP_FMAC4 soap_in_witsml14__PerLengthUom(struct soap *soap, const char *tag, witsml14__PerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom, sizeof(witsml14__PerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PerLengthUom, sizeof(witsml14__PerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PerLengthUom * SOAP_FMAC4 soap_new_witsml14__PerLengthUom(struct soap *soap, int n)
{
	witsml14__PerLengthUom *a = static_cast<witsml14__PerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PerLengthUom)));
	for (witsml14__PerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__PerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PerLengthUom(struct soap *soap, const witsml14__PerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PerLengthUom(soap, tag ? tag : "witsml14:PerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PerLengthUom * SOAP_FMAC4 soap_get_witsml14__PerLengthUom(struct soap *soap, witsml14__PerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MomentOfForceUom[] =
{	{ (LONG64)witsml14__MomentOfForceUom::J, "J" },
	{ (LONG64)witsml14__MomentOfForceUom::dN_x002em, "dN.m" },
	{ (LONG64)witsml14__MomentOfForceUom::daN_x002em, "daN.m" },
	{ (LONG64)witsml14__MomentOfForceUom::ft_x002elbf, "ft.lbf" },
	{ (LONG64)witsml14__MomentOfForceUom::kft_x002elbf, "kft.lbf" },
	{ (LONG64)witsml14__MomentOfForceUom::kgf_x002em, "kgf.m" },
	{ (LONG64)witsml14__MomentOfForceUom::kN_x002em, "kN.m" },
	{ (LONG64)witsml14__MomentOfForceUom::lbf_x002eft, "lbf.ft" },
	{ (LONG64)witsml14__MomentOfForceUom::lbf_x002ein, "lbf.in" },
	{ (LONG64)witsml14__MomentOfForceUom::lbm_x002eft2_x002fs2, "lbm.ft2/s2" },
	{ (LONG64)witsml14__MomentOfForceUom::N_x002em, "N.m" },
	{ (LONG64)witsml14__MomentOfForceUom::pdl_x002eft, "pdl.ft" },
	{ (LONG64)witsml14__MomentOfForceUom::tonfUS_x002eft, "tonfUS.ft" },
	{ (LONG64)witsml14__MomentOfForceUom::tonfUS_x002emi, "tonfUS.mi" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MomentOfForceUom2s(struct soap *soap, witsml14__MomentOfForceUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MomentOfForceUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MomentOfForceUom(struct soap *soap, const char *tag, int id, const witsml14__MomentOfForceUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MomentOfForceUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom), type) || soap_send(soap, soap_witsml14__MomentOfForceUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MomentOfForceUom(struct soap *soap, const char *s, witsml14__MomentOfForceUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MomentOfForceUom, s);
	if (map)
		*a = (witsml14__MomentOfForceUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MomentOfForceUom * SOAP_FMAC4 soap_in_witsml14__MomentOfForceUom(struct soap *soap, const char *tag, witsml14__MomentOfForceUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MomentOfForceUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom, sizeof(witsml14__MomentOfForceUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MomentOfForceUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MomentOfForceUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MomentOfForceUom, sizeof(witsml14__MomentOfForceUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MomentOfForceUom * SOAP_FMAC4 soap_new_witsml14__MomentOfForceUom(struct soap *soap, int n)
{
	witsml14__MomentOfForceUom *a = static_cast<witsml14__MomentOfForceUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MomentOfForceUom)));
	for (witsml14__MomentOfForceUom *p = a; p && n--; ++p)
		soap_default_witsml14__MomentOfForceUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MomentOfForceUom(struct soap *soap, const witsml14__MomentOfForceUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MomentOfForceUom(soap, tag ? tag : "witsml14:MomentOfForceUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MomentOfForceUom * SOAP_FMAC4 soap_get_witsml14__MomentOfForceUom(struct soap *soap, witsml14__MomentOfForceUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MomentOfForceUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MassPerLengthUom[] =
{	{ (LONG64)witsml14__MassPerLengthUom::kg_x002fm, "kg/m" },
	{ (LONG64)witsml14__MassPerLengthUom::klbm_x002fin, "klbm/in" },
	{ (LONG64)witsml14__MassPerLengthUom::lbm_x002fft, "lbm/ft" },
	{ (LONG64)witsml14__MassPerLengthUom::Mg_x002fin, "Mg/in" },
	{ (LONG64)witsml14__MassPerLengthUom::kg_x002em_x002fcm2, "kg.m/cm2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MassPerLengthUom2s(struct soap *soap, witsml14__MassPerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MassPerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MassPerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__MassPerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MassPerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom), type) || soap_send(soap, soap_witsml14__MassPerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MassPerLengthUom(struct soap *soap, const char *s, witsml14__MassPerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MassPerLengthUom, s);
	if (map)
		*a = (witsml14__MassPerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MassPerLengthUom * SOAP_FMAC4 soap_in_witsml14__MassPerLengthUom(struct soap *soap, const char *tag, witsml14__MassPerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MassPerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom, sizeof(witsml14__MassPerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MassPerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MassPerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassPerLengthUom, sizeof(witsml14__MassPerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MassPerLengthUom * SOAP_FMAC4 soap_new_witsml14__MassPerLengthUom(struct soap *soap, int n)
{
	witsml14__MassPerLengthUom *a = static_cast<witsml14__MassPerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MassPerLengthUom)));
	for (witsml14__MassPerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__MassPerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MassPerLengthUom(struct soap *soap, const witsml14__MassPerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MassPerLengthUom(soap, tag ? tag : "witsml14:MassPerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MassPerLengthUom * SOAP_FMAC4 soap_get_witsml14__MassPerLengthUom(struct soap *soap, witsml14__MassPerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MassPerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MassUom[] =
{	{ (LONG64)witsml14__MassUom::g, "g" },
	{ (LONG64)witsml14__MassUom::t, "t" },
	{ (LONG64)witsml14__MassUom::kg, "kg" },
	{ (LONG64)witsml14__MassUom::ag, "ag" },
	{ (LONG64)witsml14__MassUom::ct, "ct" },
	{ (LONG64)witsml14__MassUom::cwtUK, "cwtUK" },
	{ (LONG64)witsml14__MassUom::cwtUS, "cwtUS" },
	{ (LONG64)witsml14__MassUom::grain, "grain" },
	{ (LONG64)witsml14__MassUom::klbm, "klbm" },
	{ (LONG64)witsml14__MassUom::lbm, "lbm" },
	{ (LONG64)witsml14__MassUom::Mg, "Mg" },
	{ (LONG64)witsml14__MassUom::mg, "mg" },
	{ (LONG64)witsml14__MassUom::oz_x0028av_x0029, "oz(av)" },
	{ (LONG64)witsml14__MassUom::oz_x0028troy_x0029, "oz(troy)" },
	{ (LONG64)witsml14__MassUom::ozm, "ozm" },
	{ (LONG64)witsml14__MassUom::sack94, "sack94" },
	{ (LONG64)witsml14__MassUom::tonUK, "tonUK" },
	{ (LONG64)witsml14__MassUom::tonUS, "tonUS" },
	{ (LONG64)witsml14__MassUom::ug, "ug" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MassUom2s(struct soap *soap, witsml14__MassUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MassUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MassUom(struct soap *soap, const char *tag, int id, const witsml14__MassUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MassUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom), type) || soap_send(soap, soap_witsml14__MassUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MassUom(struct soap *soap, const char *s, witsml14__MassUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MassUom, s);
	if (map)
		*a = (witsml14__MassUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MassUom * SOAP_FMAC4 soap_in_witsml14__MassUom(struct soap *soap, const char *tag, witsml14__MassUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MassUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom, sizeof(witsml14__MassUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MassUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MassUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassUom, sizeof(witsml14__MassUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MassUom * SOAP_FMAC4 soap_new_witsml14__MassUom(struct soap *soap, int n)
{
	witsml14__MassUom *a = static_cast<witsml14__MassUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MassUom)));
	for (witsml14__MassUom *p = a; p && n--; ++p)
		soap_default_witsml14__MassUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MassUom(struct soap *soap, const witsml14__MassUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MassUom(soap, tag ? tag : "witsml14:MassUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MassUom * SOAP_FMAC4 soap_get_witsml14__MassUom(struct soap *soap, witsml14__MassUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MassUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MassConcentrationUom[] =
{	{ (LONG64)witsml14__MassConcentrationUom::Euc, "Euc" },
	{ (LONG64)witsml14__MassConcentrationUom::_x0025, "%" },
	{ (LONG64)witsml14__MassConcentrationUom::g_x002fkg, "g/kg" },
	{ (LONG64)witsml14__MassConcentrationUom::kg_x002fkg, "kg/kg" },
	{ (LONG64)witsml14__MassConcentrationUom::kg_x002fsack94, "kg/sack94" },
	{ (LONG64)witsml14__MassConcentrationUom::mg_x002fkg, "mg/kg" },
	{ (LONG64)witsml14__MassConcentrationUom::permil, "permil" },
	{ (LONG64)witsml14__MassConcentrationUom::ppdk, "ppdk" },
	{ (LONG64)witsml14__MassConcentrationUom::ppk, "ppk" },
	{ (LONG64)witsml14__MassConcentrationUom::ppm, "ppm" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MassConcentrationUom2s(struct soap *soap, witsml14__MassConcentrationUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MassConcentrationUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MassConcentrationUom(struct soap *soap, const char *tag, int id, const witsml14__MassConcentrationUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MassConcentrationUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom), type) || soap_send(soap, soap_witsml14__MassConcentrationUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MassConcentrationUom(struct soap *soap, const char *s, witsml14__MassConcentrationUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MassConcentrationUom, s);
	if (map)
		*a = (witsml14__MassConcentrationUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MassConcentrationUom * SOAP_FMAC4 soap_in_witsml14__MassConcentrationUom(struct soap *soap, const char *tag, witsml14__MassConcentrationUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MassConcentrationUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom, sizeof(witsml14__MassConcentrationUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MassConcentrationUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MassConcentrationUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MassConcentrationUom, sizeof(witsml14__MassConcentrationUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MassConcentrationUom * SOAP_FMAC4 soap_new_witsml14__MassConcentrationUom(struct soap *soap, int n)
{
	witsml14__MassConcentrationUom *a = static_cast<witsml14__MassConcentrationUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MassConcentrationUom)));
	for (witsml14__MassConcentrationUom *p = a; p && n--; ++p)
		soap_default_witsml14__MassConcentrationUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MassConcentrationUom(struct soap *soap, const witsml14__MassConcentrationUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MassConcentrationUom(soap, tag ? tag : "witsml14:MassConcentrationUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MassConcentrationUom * SOAP_FMAC4 soap_get_witsml14__MassConcentrationUom(struct soap *soap, witsml14__MassConcentrationUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MassConcentrationUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MagneticInductionUom[] =
{	{ (LONG64)witsml14__MagneticInductionUom::T, "T" },
	{ (LONG64)witsml14__MagneticInductionUom::gauss, "gauss" },
	{ (LONG64)witsml14__MagneticInductionUom::mT, "mT" },
	{ (LONG64)witsml14__MagneticInductionUom::mgauss, "mgauss" },
	{ (LONG64)witsml14__MagneticInductionUom::nT, "nT" },
	{ (LONG64)witsml14__MagneticInductionUom::uT, "uT" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MagneticInductionUom2s(struct soap *soap, witsml14__MagneticInductionUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MagneticInductionUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MagneticInductionUom(struct soap *soap, const char *tag, int id, const witsml14__MagneticInductionUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MagneticInductionUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom), type) || soap_send(soap, soap_witsml14__MagneticInductionUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MagneticInductionUom(struct soap *soap, const char *s, witsml14__MagneticInductionUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MagneticInductionUom, s);
	if (map)
		*a = (witsml14__MagneticInductionUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MagneticInductionUom * SOAP_FMAC4 soap_in_witsml14__MagneticInductionUom(struct soap *soap, const char *tag, witsml14__MagneticInductionUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MagneticInductionUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom, sizeof(witsml14__MagneticInductionUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MagneticInductionUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MagneticInductionUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MagneticInductionUom, sizeof(witsml14__MagneticInductionUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MagneticInductionUom * SOAP_FMAC4 soap_new_witsml14__MagneticInductionUom(struct soap *soap, int n)
{
	witsml14__MagneticInductionUom *a = static_cast<witsml14__MagneticInductionUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MagneticInductionUom)));
	for (witsml14__MagneticInductionUom *p = a; p && n--; ++p)
		soap_default_witsml14__MagneticInductionUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MagneticInductionUom(struct soap *soap, const witsml14__MagneticInductionUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MagneticInductionUom(soap, tag ? tag : "witsml14:MagneticInductionUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MagneticInductionUom * SOAP_FMAC4 soap_get_witsml14__MagneticInductionUom(struct soap *soap, witsml14__MagneticInductionUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MagneticInductionUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LengthPerLengthUom[] =
{	{ (LONG64)witsml14__LengthPerLengthUom::_x0025, "%" },
	{ (LONG64)witsml14__LengthPerLengthUom::ft_x002f100ft, "ft/100ft" },
	{ (LONG64)witsml14__LengthPerLengthUom::ft_x002fft, "ft/ft" },
	{ (LONG64)witsml14__LengthPerLengthUom::ft_x002fin, "ft/in" },
	{ (LONG64)witsml14__LengthPerLengthUom::ft_x002fm, "ft/m" },
	{ (LONG64)witsml14__LengthPerLengthUom::ft_x002fmi, "ft/mi" },
	{ (LONG64)witsml14__LengthPerLengthUom::km_x002fcm, "km/cm" },
	{ (LONG64)witsml14__LengthPerLengthUom::m_x002f30m, "m/30m" },
	{ (LONG64)witsml14__LengthPerLengthUom::m_x002fcm, "m/cm" },
	{ (LONG64)witsml14__LengthPerLengthUom::m_x002fkm, "m/km" },
	{ (LONG64)witsml14__LengthPerLengthUom::m_x002fm, "m/m" },
	{ (LONG64)witsml14__LengthPerLengthUom::mi_x002fin, "mi/in" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LengthPerLengthUom2s(struct soap *soap, witsml14__LengthPerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LengthPerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LengthPerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__LengthPerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:LengthPerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom), type) || soap_send(soap, soap_witsml14__LengthPerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LengthPerLengthUom(struct soap *soap, const char *s, witsml14__LengthPerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LengthPerLengthUom, s);
	if (map)
		*a = (witsml14__LengthPerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LengthPerLengthUom * SOAP_FMAC4 soap_in_witsml14__LengthPerLengthUom(struct soap *soap, const char *tag, witsml14__LengthPerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LengthPerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom, sizeof(witsml14__LengthPerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LengthPerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LengthPerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthPerLengthUom, sizeof(witsml14__LengthPerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LengthPerLengthUom * SOAP_FMAC4 soap_new_witsml14__LengthPerLengthUom(struct soap *soap, int n)
{
	witsml14__LengthPerLengthUom *a = static_cast<witsml14__LengthPerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LengthPerLengthUom)));
	for (witsml14__LengthPerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__LengthPerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LengthPerLengthUom(struct soap *soap, const witsml14__LengthPerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LengthPerLengthUom(soap, tag ? tag : "witsml14:LengthPerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LengthPerLengthUom * SOAP_FMAC4 soap_get_witsml14__LengthPerLengthUom(struct soap *soap, witsml14__LengthPerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LengthPerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__LengthUom[] =
{	{ (LONG64)witsml14__LengthUom::m, "m" },
	{ (LONG64)witsml14__LengthUom::angstrom, "angstrom" },
	{ (LONG64)witsml14__LengthUom::chBnA, "chBnA" },
	{ (LONG64)witsml14__LengthUom::chBnB, "chBnB" },
	{ (LONG64)witsml14__LengthUom::chCla, "chCla" },
	{ (LONG64)witsml14__LengthUom::chSe, "chSe" },
	{ (LONG64)witsml14__LengthUom::chUS, "chUS" },
	{ (LONG64)witsml14__LengthUom::cm, "cm" },
	{ (LONG64)witsml14__LengthUom::dm, "dm" },
	{ (LONG64)witsml14__LengthUom::fathom, "fathom" },
	{ (LONG64)witsml14__LengthUom::fm, "fm" },
	{ (LONG64)witsml14__LengthUom::ft, "ft" },
	{ (LONG64)witsml14__LengthUom::ftBnA, "ftBnA" },
	{ (LONG64)witsml14__LengthUom::ftBnB, "ftBnB" },
	{ (LONG64)witsml14__LengthUom::ftBr_x002865_x0029, "ftBr(65)" },
	{ (LONG64)witsml14__LengthUom::ftCla, "ftCla" },
	{ (LONG64)witsml14__LengthUom::ftGC, "ftGC" },
	{ (LONG64)witsml14__LengthUom::ftInd, "ftInd" },
	{ (LONG64)witsml14__LengthUom::ftInd_x002837_x0029, "ftInd(37)" },
	{ (LONG64)witsml14__LengthUom::ftInd_x002862_x0029, "ftInd(62)" },
	{ (LONG64)witsml14__LengthUom::ftInd_x002875_x0029, "ftInd(75)" },
	{ (LONG64)witsml14__LengthUom::ftMA, "ftMA" },
	{ (LONG64)witsml14__LengthUom::ftSe, "ftSe" },
	{ (LONG64)witsml14__LengthUom::ftUS, "ftUS" },
	{ (LONG64)witsml14__LengthUom::in, "in" },
	{ (LONG64)witsml14__LengthUom::in_x002f10, "in/10" },
	{ (LONG64)witsml14__LengthUom::in_x002f16, "in/16" },
	{ (LONG64)witsml14__LengthUom::in_x002f32, "in/32" },
	{ (LONG64)witsml14__LengthUom::in_x002f64, "in/64" },
	{ (LONG64)witsml14__LengthUom::inUS, "inUS" },
	{ (LONG64)witsml14__LengthUom::km, "km" },
	{ (LONG64)witsml14__LengthUom::lkBnA, "lkBnA" },
	{ (LONG64)witsml14__LengthUom::lkBnB, "lkBnB" },
	{ (LONG64)witsml14__LengthUom::lkCla, "lkCla" },
	{ (LONG64)witsml14__LengthUom::lkSe, "lkSe" },
	{ (LONG64)witsml14__LengthUom::lkUS, "lkUS" },
	{ (LONG64)witsml14__LengthUom::mGer, "mGer" },
	{ (LONG64)witsml14__LengthUom::mi, "mi" },
	{ (LONG64)witsml14__LengthUom::mil, "mil" },
	{ (LONG64)witsml14__LengthUom::miUS, "miUS" },
	{ (LONG64)witsml14__LengthUom::mm, "mm" },
	{ (LONG64)witsml14__LengthUom::Mm, "Mm" },
	{ (LONG64)witsml14__LengthUom::nautmi, "nautmi" },
	{ (LONG64)witsml14__LengthUom::nm, "nm" },
	{ (LONG64)witsml14__LengthUom::pm, "pm" },
	{ (LONG64)witsml14__LengthUom::um, "um" },
	{ (LONG64)witsml14__LengthUom::yd, "yd" },
	{ (LONG64)witsml14__LengthUom::ydBnA, "ydBnA" },
	{ (LONG64)witsml14__LengthUom::ydBnB, "ydBnB" },
	{ (LONG64)witsml14__LengthUom::ydCla, "ydCla" },
	{ (LONG64)witsml14__LengthUom::ydIm, "ydIm" },
	{ (LONG64)witsml14__LengthUom::ydInd, "ydInd" },
	{ (LONG64)witsml14__LengthUom::ydInd_x002837_x0029, "ydInd(37)" },
	{ (LONG64)witsml14__LengthUom::ydInd_x002862_x0029, "ydInd(62)" },
	{ (LONG64)witsml14__LengthUom::ydInd_x002875_x0029, "ydInd(75)" },
	{ (LONG64)witsml14__LengthUom::ydSe, "ydSe" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__LengthUom2s(struct soap *soap, witsml14__LengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__LengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__LengthUom(struct soap *soap, const char *tag, int id, const witsml14__LengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:LengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom), type) || soap_send(soap, soap_witsml14__LengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__LengthUom(struct soap *soap, const char *s, witsml14__LengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__LengthUom, s);
	if (map)
		*a = (witsml14__LengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__LengthUom * SOAP_FMAC4 soap_in_witsml14__LengthUom(struct soap *soap, const char *tag, witsml14__LengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__LengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom, sizeof(witsml14__LengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__LengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__LengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__LengthUom, sizeof(witsml14__LengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__LengthUom * SOAP_FMAC4 soap_new_witsml14__LengthUom(struct soap *soap, int n)
{
	witsml14__LengthUom *a = static_cast<witsml14__LengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__LengthUom)));
	for (witsml14__LengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__LengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__LengthUom(struct soap *soap, const witsml14__LengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__LengthUom(soap, tag ? tag : "witsml14:LengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LengthUom * SOAP_FMAC4 soap_get_witsml14__LengthUom(struct soap *soap, witsml14__LengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__LengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__IlluminanceUom[] =
{	{ (LONG64)witsml14__IlluminanceUom::lx, "lx" },
	{ (LONG64)witsml14__IlluminanceUom::lm_x002fm2, "lm/m2" },
	{ (LONG64)witsml14__IlluminanceUom::footcandle, "footcandle" },
	{ (LONG64)witsml14__IlluminanceUom::klx, "klx" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__IlluminanceUom2s(struct soap *soap, witsml14__IlluminanceUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__IlluminanceUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__IlluminanceUom(struct soap *soap, const char *tag, int id, const witsml14__IlluminanceUom *a, const char *type)
{
	if (!type)
		type = "witsml14:IlluminanceUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom), type) || soap_send(soap, soap_witsml14__IlluminanceUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__IlluminanceUom(struct soap *soap, const char *s, witsml14__IlluminanceUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__IlluminanceUom, s);
	if (map)
		*a = (witsml14__IlluminanceUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__IlluminanceUom * SOAP_FMAC4 soap_in_witsml14__IlluminanceUom(struct soap *soap, const char *tag, witsml14__IlluminanceUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__IlluminanceUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom, sizeof(witsml14__IlluminanceUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__IlluminanceUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__IlluminanceUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__IlluminanceUom, sizeof(witsml14__IlluminanceUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__IlluminanceUom * SOAP_FMAC4 soap_new_witsml14__IlluminanceUom(struct soap *soap, int n)
{
	witsml14__IlluminanceUom *a = static_cast<witsml14__IlluminanceUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__IlluminanceUom)));
	for (witsml14__IlluminanceUom *p = a; p && n--; ++p)
		soap_default_witsml14__IlluminanceUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__IlluminanceUom(struct soap *soap, const witsml14__IlluminanceUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__IlluminanceUom(soap, tag ? tag : "witsml14:IlluminanceUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__IlluminanceUom * SOAP_FMAC4 soap_get_witsml14__IlluminanceUom(struct soap *soap, witsml14__IlluminanceUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__IlluminanceUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ForcePerVolumeUom[] =
{	{ (LONG64)witsml14__ForcePerVolumeUom::N_x002fm3, "N/m3" },
	{ (LONG64)witsml14__ForcePerVolumeUom::atm_x002f100m, "atm/100m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::atm_x002fm, "atm/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::bar_x002fkm, "bar/km" },
	{ (LONG64)witsml14__ForcePerVolumeUom::bar_x002fm, "bar/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::GPa_x002fcm, "GPa/cm" },
	{ (LONG64)witsml14__ForcePerVolumeUom::kPa_x002f100m, "kPa/100m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::kPa_x002fm, "kPa/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::lbf_x002fft3, "lbf/ft3" },
	{ (LONG64)witsml14__ForcePerVolumeUom::lbf_x002fgalUS, "lbf/galUS" },
	{ (LONG64)witsml14__ForcePerVolumeUom::MPa_x002fm, "MPa/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::psi_x002fft, "psi/ft" },
	{ (LONG64)witsml14__ForcePerVolumeUom::psi_x002f100ft, "psi/100ft" },
	{ (LONG64)witsml14__ForcePerVolumeUom::psi_x002fkft, "psi/kft" },
	{ (LONG64)witsml14__ForcePerVolumeUom::psi_x002fm, "psi/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::Pa_x002fm, "Pa/m" },
	{ (LONG64)witsml14__ForcePerVolumeUom::atm_x002fft, "atm/ft" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ForcePerVolumeUom2s(struct soap *soap, witsml14__ForcePerVolumeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ForcePerVolumeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ForcePerVolumeUom(struct soap *soap, const char *tag, int id, const witsml14__ForcePerVolumeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ForcePerVolumeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom), type) || soap_send(soap, soap_witsml14__ForcePerVolumeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ForcePerVolumeUom(struct soap *soap, const char *s, witsml14__ForcePerVolumeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ForcePerVolumeUom, s);
	if (map)
		*a = (witsml14__ForcePerVolumeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ForcePerVolumeUom * SOAP_FMAC4 soap_in_witsml14__ForcePerVolumeUom(struct soap *soap, const char *tag, witsml14__ForcePerVolumeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ForcePerVolumeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom, sizeof(witsml14__ForcePerVolumeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ForcePerVolumeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ForcePerVolumeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerVolumeUom, sizeof(witsml14__ForcePerVolumeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ForcePerVolumeUom * SOAP_FMAC4 soap_new_witsml14__ForcePerVolumeUom(struct soap *soap, int n)
{
	witsml14__ForcePerVolumeUom *a = static_cast<witsml14__ForcePerVolumeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ForcePerVolumeUom)));
	for (witsml14__ForcePerVolumeUom *p = a; p && n--; ++p)
		soap_default_witsml14__ForcePerVolumeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ForcePerVolumeUom(struct soap *soap, const witsml14__ForcePerVolumeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ForcePerVolumeUom(soap, tag ? tag : "witsml14:ForcePerVolumeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ForcePerVolumeUom * SOAP_FMAC4 soap_get_witsml14__ForcePerVolumeUom(struct soap *soap, witsml14__ForcePerVolumeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ForcePerVolumeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ForcePerLengthUom[] =
{	{ (LONG64)witsml14__ForcePerLengthUom::N_x002f30m, "N/30m" },
	{ (LONG64)witsml14__ForcePerLengthUom::N_x002fm, "N/m" },
	{ (LONG64)witsml14__ForcePerLengthUom::dyne_x002fcm, "dyne/cm" },
	{ (LONG64)witsml14__ForcePerLengthUom::kN_x002fm, "kN/m" },
	{ (LONG64)witsml14__ForcePerLengthUom::kgf_x002fcm, "kgf/cm" },
	{ (LONG64)witsml14__ForcePerLengthUom::lbf_x002f100ft, "lbf/100ft" },
	{ (LONG64)witsml14__ForcePerLengthUom::lbf_x002f30m, "lbf/30m" },
	{ (LONG64)witsml14__ForcePerLengthUom::lbf_x002fft, "lbf/ft" },
	{ (LONG64)witsml14__ForcePerLengthUom::lbf_x002fin, "lbf/in" },
	{ (LONG64)witsml14__ForcePerLengthUom::mN_x002fkm, "mN/km" },
	{ (LONG64)witsml14__ForcePerLengthUom::mN_x002fm, "mN/m" },
	{ (LONG64)witsml14__ForcePerLengthUom::pdl_x002fcm, "pdl/cm" },
	{ (LONG64)witsml14__ForcePerLengthUom::tonfUK_x002fft, "tonfUK/ft" },
	{ (LONG64)witsml14__ForcePerLengthUom::tonfUS_x002fft, "tonfUS/ft" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ForcePerLengthUom2s(struct soap *soap, witsml14__ForcePerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ForcePerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ForcePerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__ForcePerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ForcePerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom), type) || soap_send(soap, soap_witsml14__ForcePerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ForcePerLengthUom(struct soap *soap, const char *s, witsml14__ForcePerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ForcePerLengthUom, s);
	if (map)
		*a = (witsml14__ForcePerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ForcePerLengthUom * SOAP_FMAC4 soap_in_witsml14__ForcePerLengthUom(struct soap *soap, const char *tag, witsml14__ForcePerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ForcePerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom, sizeof(witsml14__ForcePerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ForcePerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ForcePerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForcePerLengthUom, sizeof(witsml14__ForcePerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ForcePerLengthUom * SOAP_FMAC4 soap_new_witsml14__ForcePerLengthUom(struct soap *soap, int n)
{
	witsml14__ForcePerLengthUom *a = static_cast<witsml14__ForcePerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ForcePerLengthUom)));
	for (witsml14__ForcePerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__ForcePerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ForcePerLengthUom(struct soap *soap, const witsml14__ForcePerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ForcePerLengthUom(soap, tag ? tag : "witsml14:ForcePerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ForcePerLengthUom * SOAP_FMAC4 soap_get_witsml14__ForcePerLengthUom(struct soap *soap, witsml14__ForcePerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ForcePerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ForceUom[] =
{	{ (LONG64)witsml14__ForceUom::N, "N" },
	{ (LONG64)witsml14__ForceUom::daN, "daN" },
	{ (LONG64)witsml14__ForceUom::dyne, "dyne" },
	{ (LONG64)witsml14__ForceUom::gf, "gf" },
	{ (LONG64)witsml14__ForceUom::kdyne, "kdyne" },
	{ (LONG64)witsml14__ForceUom::kgf, "kgf" },
	{ (LONG64)witsml14__ForceUom::klbf, "klbf" },
	{ (LONG64)witsml14__ForceUom::kN, "kN" },
	{ (LONG64)witsml14__ForceUom::lbf, "lbf" },
	{ (LONG64)witsml14__ForceUom::Mgf, "Mgf" },
	{ (LONG64)witsml14__ForceUom::mN, "mN" },
	{ (LONG64)witsml14__ForceUom::MN, "MN" },
	{ (LONG64)witsml14__ForceUom::ozf, "ozf" },
	{ (LONG64)witsml14__ForceUom::pdl, "pdl" },
	{ (LONG64)witsml14__ForceUom::tonfUK, "tonfUK" },
	{ (LONG64)witsml14__ForceUom::tonfUS, "tonfUS" },
	{ (LONG64)witsml14__ForceUom::uN, "uN" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ForceUom2s(struct soap *soap, witsml14__ForceUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ForceUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ForceUom(struct soap *soap, const char *tag, int id, const witsml14__ForceUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ForceUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom), type) || soap_send(soap, soap_witsml14__ForceUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ForceUom(struct soap *soap, const char *s, witsml14__ForceUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ForceUom, s);
	if (map)
		*a = (witsml14__ForceUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ForceUom * SOAP_FMAC4 soap_in_witsml14__ForceUom(struct soap *soap, const char *tag, witsml14__ForceUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ForceUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom, sizeof(witsml14__ForceUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ForceUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ForceUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ForceUom, sizeof(witsml14__ForceUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ForceUom * SOAP_FMAC4 soap_new_witsml14__ForceUom(struct soap *soap, int n)
{
	witsml14__ForceUom *a = static_cast<witsml14__ForceUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ForceUom)));
	for (witsml14__ForceUom *p = a; p && n--; ++p)
		soap_default_witsml14__ForceUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ForceUom(struct soap *soap, const witsml14__ForceUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ForceUom(soap, tag ? tag : "witsml14:ForceUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ForceUom * SOAP_FMAC4 soap_get_witsml14__ForceUom(struct soap *soap, witsml14__ForceUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ForceUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__EquivalentPerMassUom[] =
{	{ (LONG64)witsml14__EquivalentPerMassUom::eq_x002fkg, "eq/kg" },
	{ (LONG64)witsml14__EquivalentPerMassUom::meq_x002fg, "meq/g" },
	{ (LONG64)witsml14__EquivalentPerMassUom::meq_x002f100g, "meq/100g" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__EquivalentPerMassUom2s(struct soap *soap, witsml14__EquivalentPerMassUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__EquivalentPerMassUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__EquivalentPerMassUom(struct soap *soap, const char *tag, int id, const witsml14__EquivalentPerMassUom *a, const char *type)
{
	if (!type)
		type = "witsml14:EquivalentPerMassUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom), type) || soap_send(soap, soap_witsml14__EquivalentPerMassUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__EquivalentPerMassUom(struct soap *soap, const char *s, witsml14__EquivalentPerMassUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__EquivalentPerMassUom, s);
	if (map)
		*a = (witsml14__EquivalentPerMassUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__EquivalentPerMassUom * SOAP_FMAC4 soap_in_witsml14__EquivalentPerMassUom(struct soap *soap, const char *tag, witsml14__EquivalentPerMassUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__EquivalentPerMassUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom, sizeof(witsml14__EquivalentPerMassUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__EquivalentPerMassUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__EquivalentPerMassUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__EquivalentPerMassUom, sizeof(witsml14__EquivalentPerMassUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__EquivalentPerMassUom * SOAP_FMAC4 soap_new_witsml14__EquivalentPerMassUom(struct soap *soap, int n)
{
	witsml14__EquivalentPerMassUom *a = static_cast<witsml14__EquivalentPerMassUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__EquivalentPerMassUom)));
	for (witsml14__EquivalentPerMassUom *p = a; p && n--; ++p)
		soap_default_witsml14__EquivalentPerMassUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__EquivalentPerMassUom(struct soap *soap, const witsml14__EquivalentPerMassUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__EquivalentPerMassUom(soap, tag ? tag : "witsml14:EquivalentPerMassUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__EquivalentPerMassUom * SOAP_FMAC4 soap_get_witsml14__EquivalentPerMassUom(struct soap *soap, witsml14__EquivalentPerMassUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__EquivalentPerMassUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ElectricPotentialUom[] =
{	{ (LONG64)witsml14__ElectricPotentialUom::V, "V" },
	{ (LONG64)witsml14__ElectricPotentialUom::kV, "kV" },
	{ (LONG64)witsml14__ElectricPotentialUom::mV, "mV" },
	{ (LONG64)witsml14__ElectricPotentialUom::MV, "MV" },
	{ (LONG64)witsml14__ElectricPotentialUom::uV, "uV" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ElectricPotentialUom2s(struct soap *soap, witsml14__ElectricPotentialUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ElectricPotentialUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ElectricPotentialUom(struct soap *soap, const char *tag, int id, const witsml14__ElectricPotentialUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ElectricPotentialUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom), type) || soap_send(soap, soap_witsml14__ElectricPotentialUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ElectricPotentialUom(struct soap *soap, const char *s, witsml14__ElectricPotentialUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ElectricPotentialUom, s);
	if (map)
		*a = (witsml14__ElectricPotentialUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ElectricPotentialUom * SOAP_FMAC4 soap_in_witsml14__ElectricPotentialUom(struct soap *soap, const char *tag, witsml14__ElectricPotentialUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ElectricPotentialUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom, sizeof(witsml14__ElectricPotentialUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ElectricPotentialUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ElectricPotentialUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricPotentialUom, sizeof(witsml14__ElectricPotentialUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ElectricPotentialUom * SOAP_FMAC4 soap_new_witsml14__ElectricPotentialUom(struct soap *soap, int n)
{
	witsml14__ElectricPotentialUom *a = static_cast<witsml14__ElectricPotentialUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ElectricPotentialUom)));
	for (witsml14__ElectricPotentialUom *p = a; p && n--; ++p)
		soap_default_witsml14__ElectricPotentialUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ElectricPotentialUom(struct soap *soap, const witsml14__ElectricPotentialUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ElectricPotentialUom(soap, tag ? tag : "witsml14:ElectricPotentialUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ElectricPotentialUom * SOAP_FMAC4 soap_get_witsml14__ElectricPotentialUom(struct soap *soap, witsml14__ElectricPotentialUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ElectricPotentialUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__ElectricCurrentUom[] =
{	{ (LONG64)witsml14__ElectricCurrentUom::A, "A" },
	{ (LONG64)witsml14__ElectricCurrentUom::MA, "MA" },
	{ (LONG64)witsml14__ElectricCurrentUom::kA, "kA" },
	{ (LONG64)witsml14__ElectricCurrentUom::mA, "mA" },
	{ (LONG64)witsml14__ElectricCurrentUom::nA, "nA" },
	{ (LONG64)witsml14__ElectricCurrentUom::pA, "pA" },
	{ (LONG64)witsml14__ElectricCurrentUom::uA, "uA" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__ElectricCurrentUom2s(struct soap *soap, witsml14__ElectricCurrentUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__ElectricCurrentUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ElectricCurrentUom(struct soap *soap, const char *tag, int id, const witsml14__ElectricCurrentUom *a, const char *type)
{
	if (!type)
		type = "witsml14:ElectricCurrentUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom), type) || soap_send(soap, soap_witsml14__ElectricCurrentUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__ElectricCurrentUom(struct soap *soap, const char *s, witsml14__ElectricCurrentUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__ElectricCurrentUom, s);
	if (map)
		*a = (witsml14__ElectricCurrentUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__ElectricCurrentUom * SOAP_FMAC4 soap_in_witsml14__ElectricCurrentUom(struct soap *soap, const char *tag, witsml14__ElectricCurrentUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__ElectricCurrentUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom, sizeof(witsml14__ElectricCurrentUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__ElectricCurrentUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__ElectricCurrentUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElectricCurrentUom, sizeof(witsml14__ElectricCurrentUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__ElectricCurrentUom * SOAP_FMAC4 soap_new_witsml14__ElectricCurrentUom(struct soap *soap, int n)
{
	witsml14__ElectricCurrentUom *a = static_cast<witsml14__ElectricCurrentUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__ElectricCurrentUom)));
	for (witsml14__ElectricCurrentUom *p = a; p && n--; ++p)
		soap_default_witsml14__ElectricCurrentUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__ElectricCurrentUom(struct soap *soap, const witsml14__ElectricCurrentUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__ElectricCurrentUom(soap, tag ? tag : "witsml14:ElectricCurrentUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ElectricCurrentUom * SOAP_FMAC4 soap_get_witsml14__ElectricCurrentUom(struct soap *soap, witsml14__ElectricCurrentUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ElectricCurrentUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DynamicViscosityUom[] =
{	{ (LONG64)witsml14__DynamicViscosityUom::P, "P" },
	{ (LONG64)witsml14__DynamicViscosityUom::Pa_x002es, "Pa.s" },
	{ (LONG64)witsml14__DynamicViscosityUom::cP, "cP" },
	{ (LONG64)witsml14__DynamicViscosityUom::psi_x002es, "psi.s" },
	{ (LONG64)witsml14__DynamicViscosityUom::dyne_x002es_x002fcm2, "dyne.s/cm2" },
	{ (LONG64)witsml14__DynamicViscosityUom::kgf_x002es_x002fm2, "kgf.s/m2" },
	{ (LONG64)witsml14__DynamicViscosityUom::lbf_x002es_x002fft2, "lbf.s/ft2" },
	{ (LONG64)witsml14__DynamicViscosityUom::lbf_x002es_x002fin2, "lbf.s/in2" },
	{ (LONG64)witsml14__DynamicViscosityUom::mPa_x002es, "mPa.s" },
	{ (LONG64)witsml14__DynamicViscosityUom::N_x002es_x002fm2, "N.s/m2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DynamicViscosityUom2s(struct soap *soap, witsml14__DynamicViscosityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DynamicViscosityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DynamicViscosityUom(struct soap *soap, const char *tag, int id, const witsml14__DynamicViscosityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:DynamicViscosityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom), type) || soap_send(soap, soap_witsml14__DynamicViscosityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DynamicViscosityUom(struct soap *soap, const char *s, witsml14__DynamicViscosityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DynamicViscosityUom, s);
	if (map)
		*a = (witsml14__DynamicViscosityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DynamicViscosityUom * SOAP_FMAC4 soap_in_witsml14__DynamicViscosityUom(struct soap *soap, const char *tag, witsml14__DynamicViscosityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DynamicViscosityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom, sizeof(witsml14__DynamicViscosityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DynamicViscosityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DynamicViscosityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__DynamicViscosityUom, sizeof(witsml14__DynamicViscosityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DynamicViscosityUom * SOAP_FMAC4 soap_new_witsml14__DynamicViscosityUom(struct soap *soap, int n)
{
	witsml14__DynamicViscosityUom *a = static_cast<witsml14__DynamicViscosityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DynamicViscosityUom)));
	for (witsml14__DynamicViscosityUom *p = a; p && n--; ++p)
		soap_default_witsml14__DynamicViscosityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DynamicViscosityUom(struct soap *soap, const witsml14__DynamicViscosityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DynamicViscosityUom(soap, tag ? tag : "witsml14:DynamicViscosityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DynamicViscosityUom * SOAP_FMAC4 soap_get_witsml14__DynamicViscosityUom(struct soap *soap, witsml14__DynamicViscosityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DynamicViscosityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DimensionlessUom[] =
{	{ (LONG64)witsml14__DimensionlessUom::Euc, "Euc" },
	{ (LONG64)witsml14__DimensionlessUom::_x0025, "%" },
	{ (LONG64)witsml14__DimensionlessUom::cEuc, "cEuc" },
	{ (LONG64)witsml14__DimensionlessUom::mEuc, "mEuc" },
	{ (LONG64)witsml14__DimensionlessUom::nEuc, "nEuc" },
	{ (LONG64)witsml14__DimensionlessUom::uEuc, "uEuc" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DimensionlessUom2s(struct soap *soap, witsml14__DimensionlessUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DimensionlessUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DimensionlessUom(struct soap *soap, const char *tag, int id, const witsml14__DimensionlessUom *a, const char *type)
{
	if (!type)
		type = "witsml14:DimensionlessUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom), type) || soap_send(soap, soap_witsml14__DimensionlessUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DimensionlessUom(struct soap *soap, const char *s, witsml14__DimensionlessUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DimensionlessUom, s);
	if (map)
		*a = (witsml14__DimensionlessUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DimensionlessUom * SOAP_FMAC4 soap_in_witsml14__DimensionlessUom(struct soap *soap, const char *tag, witsml14__DimensionlessUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DimensionlessUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom, sizeof(witsml14__DimensionlessUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DimensionlessUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DimensionlessUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__DimensionlessUom, sizeof(witsml14__DimensionlessUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DimensionlessUom * SOAP_FMAC4 soap_new_witsml14__DimensionlessUom(struct soap *soap, int n)
{
	witsml14__DimensionlessUom *a = static_cast<witsml14__DimensionlessUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DimensionlessUom)));
	for (witsml14__DimensionlessUom *p = a; p && n--; ++p)
		soap_default_witsml14__DimensionlessUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DimensionlessUom(struct soap *soap, const witsml14__DimensionlessUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DimensionlessUom(soap, tag ? tag : "witsml14:DimensionlessUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DimensionlessUom * SOAP_FMAC4 soap_get_witsml14__DimensionlessUom(struct soap *soap, witsml14__DimensionlessUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DimensionlessUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__DensityUom[] =
{	{ (LONG64)witsml14__DensityUom::kg_x002fm3, "kg/m3" },
	{ (LONG64)witsml14__DensityUom::_10Mg_x002fm3, "10Mg/m3" },
	{ (LONG64)witsml14__DensityUom::dAPI, "dAPI" },
	{ (LONG64)witsml14__DensityUom::g_x002fcm3, "g/cm3" },
	{ (LONG64)witsml14__DensityUom::g_x002fdm3, "g/dm3" },
	{ (LONG64)witsml14__DensityUom::g_x002fgalUK, "g/galUK" },
	{ (LONG64)witsml14__DensityUom::g_x002fgalUS, "g/galUS" },
	{ (LONG64)witsml14__DensityUom::g_x002fL, "g/L" },
	{ (LONG64)witsml14__DensityUom::g_x002fm3, "g/m3" },
	{ (LONG64)witsml14__DensityUom::grain_x002fft3, "grain/ft3" },
	{ (LONG64)witsml14__DensityUom::grain_x002fgalUS, "grain/galUS" },
	{ (LONG64)witsml14__DensityUom::grain_x002f100ft3, "grain/100ft3" },
	{ (LONG64)witsml14__DensityUom::kg_x002fdm3, "kg/dm3" },
	{ (LONG64)witsml14__DensityUom::kg_x002fL, "kg/L" },
	{ (LONG64)witsml14__DensityUom::Mg_x002fm3, "Mg/m3" },
	{ (LONG64)witsml14__DensityUom::lbm_x002f10bbl, "lbm/10bbl" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fbbl, "lbm/bbl" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fft3, "lbm/ft3" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fgalUK, "lbm/galUK" },
	{ (LONG64)witsml14__DensityUom::lbm_x002f1000galUK, "lbm/1000galUK" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fgalUS, "lbm/galUS" },
	{ (LONG64)witsml14__DensityUom::lbm_x002f1000galUS, "lbm/1000galUS" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fin3, "lbm/in3" },
	{ (LONG64)witsml14__DensityUom::lbm_x002fMbbl, "lbm/Mbbl" },
	{ (LONG64)witsml14__DensityUom::mg_x002fdm3, "mg/dm3" },
	{ (LONG64)witsml14__DensityUom::mg_x002fgalUS, "mg/galUS" },
	{ (LONG64)witsml14__DensityUom::mg_x002fL, "mg/L" },
	{ (LONG64)witsml14__DensityUom::mg_x002fm3, "mg/m3" },
	{ (LONG64)witsml14__DensityUom::ug_x002fcm3, "ug/cm3" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__DensityUom2s(struct soap *soap, witsml14__DensityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__DensityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__DensityUom(struct soap *soap, const char *tag, int id, const witsml14__DensityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:DensityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom), type) || soap_send(soap, soap_witsml14__DensityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__DensityUom(struct soap *soap, const char *s, witsml14__DensityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__DensityUom, s);
	if (map)
		*a = (witsml14__DensityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__DensityUom * SOAP_FMAC4 soap_in_witsml14__DensityUom(struct soap *soap, const char *tag, witsml14__DensityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__DensityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom, sizeof(witsml14__DensityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__DensityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__DensityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__DensityUom, sizeof(witsml14__DensityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__DensityUom * SOAP_FMAC4 soap_new_witsml14__DensityUom(struct soap *soap, int n)
{
	witsml14__DensityUom *a = static_cast<witsml14__DensityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__DensityUom)));
	for (witsml14__DensityUom *p = a; p && n--; ++p)
		soap_default_witsml14__DensityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__DensityUom(struct soap *soap, const witsml14__DensityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__DensityUom(soap, tag ? tag : "witsml14:DensityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__DensityUom * SOAP_FMAC4 soap_get_witsml14__DensityUom(struct soap *soap, witsml14__DensityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__DensityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__CompressibilityUom[] =
{	{ (LONG64)witsml14__CompressibilityUom::_1_x002fpsi, "1/psi" },
	{ (LONG64)witsml14__CompressibilityUom::_1_x002fupsi, "1/upsi" },
	{ (LONG64)witsml14__CompressibilityUom::_1_x002fPa, "1/Pa" },
	{ (LONG64)witsml14__CompressibilityUom::_1_x002fbar, "1/bar" },
	{ (LONG64)witsml14__CompressibilityUom::_1_x002fkPa, "1/kPa" },
	{ (LONG64)witsml14__CompressibilityUom::_1_x002fpPa, "1/pPa" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__CompressibilityUom2s(struct soap *soap, witsml14__CompressibilityUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__CompressibilityUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__CompressibilityUom(struct soap *soap, const char *tag, int id, const witsml14__CompressibilityUom *a, const char *type)
{
	if (!type)
		type = "witsml14:CompressibilityUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom), type) || soap_send(soap, soap_witsml14__CompressibilityUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__CompressibilityUom(struct soap *soap, const char *s, witsml14__CompressibilityUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__CompressibilityUom, s);
	if (map)
		*a = (witsml14__CompressibilityUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__CompressibilityUom * SOAP_FMAC4 soap_in_witsml14__CompressibilityUom(struct soap *soap, const char *tag, witsml14__CompressibilityUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__CompressibilityUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom, sizeof(witsml14__CompressibilityUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__CompressibilityUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__CompressibilityUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__CompressibilityUom, sizeof(witsml14__CompressibilityUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__CompressibilityUom * SOAP_FMAC4 soap_new_witsml14__CompressibilityUom(struct soap *soap, int n)
{
	witsml14__CompressibilityUom *a = static_cast<witsml14__CompressibilityUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__CompressibilityUom)));
	for (witsml14__CompressibilityUom *p = a; p && n--; ++p)
		soap_default_witsml14__CompressibilityUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__CompressibilityUom(struct soap *soap, const witsml14__CompressibilityUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__CompressibilityUom(soap, tag ? tag : "witsml14:CompressibilityUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__CompressibilityUom * SOAP_FMAC4 soap_get_witsml14__CompressibilityUom(struct soap *soap, witsml14__CompressibilityUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__CompressibilityUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AreaPerAreaUom[] =
{	{ (LONG64)witsml14__AreaPerAreaUom::Euc, "Euc" },
	{ (LONG64)witsml14__AreaPerAreaUom::_x0025, "%" },
	{ (LONG64)witsml14__AreaPerAreaUom::in2_x002fft2, "in2/ft2" },
	{ (LONG64)witsml14__AreaPerAreaUom::in2_x002fin2, "in2/in2" },
	{ (LONG64)witsml14__AreaPerAreaUom::m2_x002fm2, "m2/m2" },
	{ (LONG64)witsml14__AreaPerAreaUom::mm2_x002fmm2, "mm2/mm2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AreaPerAreaUom2s(struct soap *soap, witsml14__AreaPerAreaUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AreaPerAreaUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AreaPerAreaUom(struct soap *soap, const char *tag, int id, const witsml14__AreaPerAreaUom *a, const char *type)
{
	if (!type)
		type = "witsml14:AreaPerAreaUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom), type) || soap_send(soap, soap_witsml14__AreaPerAreaUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AreaPerAreaUom(struct soap *soap, const char *s, witsml14__AreaPerAreaUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AreaPerAreaUom, s);
	if (map)
		*a = (witsml14__AreaPerAreaUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AreaPerAreaUom * SOAP_FMAC4 soap_in_witsml14__AreaPerAreaUom(struct soap *soap, const char *tag, witsml14__AreaPerAreaUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AreaPerAreaUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom, sizeof(witsml14__AreaPerAreaUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AreaPerAreaUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AreaPerAreaUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaPerAreaUom, sizeof(witsml14__AreaPerAreaUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AreaPerAreaUom * SOAP_FMAC4 soap_new_witsml14__AreaPerAreaUom(struct soap *soap, int n)
{
	witsml14__AreaPerAreaUom *a = static_cast<witsml14__AreaPerAreaUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AreaPerAreaUom)));
	for (witsml14__AreaPerAreaUom *p = a; p && n--; ++p)
		soap_default_witsml14__AreaPerAreaUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AreaPerAreaUom(struct soap *soap, const witsml14__AreaPerAreaUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AreaPerAreaUom(soap, tag ? tag : "witsml14:AreaPerAreaUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AreaPerAreaUom * SOAP_FMAC4 soap_get_witsml14__AreaPerAreaUom(struct soap *soap, witsml14__AreaPerAreaUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AreaPerAreaUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AreaUom[] =
{	{ (LONG64)witsml14__AreaUom::b, "b" },
	{ (LONG64)witsml14__AreaUom::m2, "m2" },
	{ (LONG64)witsml14__AreaUom::acre, "acre" },
	{ (LONG64)witsml14__AreaUom::cm2, "cm2" },
	{ (LONG64)witsml14__AreaUom::ft2, "ft2" },
	{ (LONG64)witsml14__AreaUom::ha, "ha" },
	{ (LONG64)witsml14__AreaUom::in2, "in2" },
	{ (LONG64)witsml14__AreaUom::km2, "km2" },
	{ (LONG64)witsml14__AreaUom::mi2, "mi2" },
	{ (LONG64)witsml14__AreaUom::miUS2, "miUS2" },
	{ (LONG64)witsml14__AreaUom::mm2, "mm2" },
	{ (LONG64)witsml14__AreaUom::um2, "um2" },
	{ (LONG64)witsml14__AreaUom::yd2, "yd2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AreaUom2s(struct soap *soap, witsml14__AreaUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AreaUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AreaUom(struct soap *soap, const char *tag, int id, const witsml14__AreaUom *a, const char *type)
{
	if (!type)
		type = "witsml14:AreaUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom), type) || soap_send(soap, soap_witsml14__AreaUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AreaUom(struct soap *soap, const char *s, witsml14__AreaUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AreaUom, s);
	if (map)
		*a = (witsml14__AreaUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AreaUom * SOAP_FMAC4 soap_in_witsml14__AreaUom(struct soap *soap, const char *tag, witsml14__AreaUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AreaUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom, sizeof(witsml14__AreaUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AreaUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AreaUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__AreaUom, sizeof(witsml14__AreaUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AreaUom * SOAP_FMAC4 soap_new_witsml14__AreaUom(struct soap *soap, int n)
{
	witsml14__AreaUom *a = static_cast<witsml14__AreaUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AreaUom)));
	for (witsml14__AreaUom *p = a; p && n--; ++p)
		soap_default_witsml14__AreaUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AreaUom(struct soap *soap, const witsml14__AreaUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AreaUom(soap, tag ? tag : "witsml14:AreaUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AreaUom * SOAP_FMAC4 soap_get_witsml14__AreaUom(struct soap *soap, witsml14__AreaUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AreaUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AnglePerTimeUom[] =
{	{ (LONG64)witsml14__AnglePerTimeUom::rad_x002fs, "rad/s" },
	{ (LONG64)witsml14__AnglePerTimeUom::c_x002fs, "c/s" },
	{ (LONG64)witsml14__AnglePerTimeUom::dega_x002fh, "dega/h" },
	{ (LONG64)witsml14__AnglePerTimeUom::dega_x002fmin, "dega/min" },
	{ (LONG64)witsml14__AnglePerTimeUom::dega_x002fs, "dega/s" },
	{ (LONG64)witsml14__AnglePerTimeUom::rev_x002fs, "rev/s" },
	{ (LONG64)witsml14__AnglePerTimeUom::rpm, "rpm" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AnglePerTimeUom2s(struct soap *soap, witsml14__AnglePerTimeUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AnglePerTimeUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AnglePerTimeUom(struct soap *soap, const char *tag, int id, const witsml14__AnglePerTimeUom *a, const char *type)
{
	if (!type)
		type = "witsml14:AnglePerTimeUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom), type) || soap_send(soap, soap_witsml14__AnglePerTimeUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AnglePerTimeUom(struct soap *soap, const char *s, witsml14__AnglePerTimeUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AnglePerTimeUom, s);
	if (map)
		*a = (witsml14__AnglePerTimeUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AnglePerTimeUom * SOAP_FMAC4 soap_in_witsml14__AnglePerTimeUom(struct soap *soap, const char *tag, witsml14__AnglePerTimeUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AnglePerTimeUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom, sizeof(witsml14__AnglePerTimeUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AnglePerTimeUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AnglePerTimeUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerTimeUom, sizeof(witsml14__AnglePerTimeUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AnglePerTimeUom * SOAP_FMAC4 soap_new_witsml14__AnglePerTimeUom(struct soap *soap, int n)
{
	witsml14__AnglePerTimeUom *a = static_cast<witsml14__AnglePerTimeUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AnglePerTimeUom)));
	for (witsml14__AnglePerTimeUom *p = a; p && n--; ++p)
		soap_default_witsml14__AnglePerTimeUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AnglePerTimeUom(struct soap *soap, const witsml14__AnglePerTimeUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AnglePerTimeUom(soap, tag ? tag : "witsml14:AnglePerTimeUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AnglePerTimeUom * SOAP_FMAC4 soap_get_witsml14__AnglePerTimeUom(struct soap *soap, witsml14__AnglePerTimeUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AnglePerTimeUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AnglePerLengthUom[] =
{	{ (LONG64)witsml14__AnglePerLengthUom::rad_x002fm, "rad/m" },
	{ (LONG64)witsml14__AnglePerLengthUom::dega_x002f30ft, "dega/30ft" },
	{ (LONG64)witsml14__AnglePerLengthUom::dega_x002fft, "dega/ft" },
	{ (LONG64)witsml14__AnglePerLengthUom::dega_x002f100ft, "dega/100ft" },
	{ (LONG64)witsml14__AnglePerLengthUom::dega_x002fm, "dega/m" },
	{ (LONG64)witsml14__AnglePerLengthUom::dega_x002f30m, "dega/30m" },
	{ (LONG64)witsml14__AnglePerLengthUom::rad_x002fft, "rad/ft" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AnglePerLengthUom2s(struct soap *soap, witsml14__AnglePerLengthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AnglePerLengthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AnglePerLengthUom(struct soap *soap, const char *tag, int id, const witsml14__AnglePerLengthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:AnglePerLengthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom), type) || soap_send(soap, soap_witsml14__AnglePerLengthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AnglePerLengthUom(struct soap *soap, const char *s, witsml14__AnglePerLengthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AnglePerLengthUom, s);
	if (map)
		*a = (witsml14__AnglePerLengthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AnglePerLengthUom * SOAP_FMAC4 soap_in_witsml14__AnglePerLengthUom(struct soap *soap, const char *tag, witsml14__AnglePerLengthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AnglePerLengthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom, sizeof(witsml14__AnglePerLengthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AnglePerLengthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AnglePerLengthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__AnglePerLengthUom, sizeof(witsml14__AnglePerLengthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AnglePerLengthUom * SOAP_FMAC4 soap_new_witsml14__AnglePerLengthUom(struct soap *soap, int n)
{
	witsml14__AnglePerLengthUom *a = static_cast<witsml14__AnglePerLengthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AnglePerLengthUom)));
	for (witsml14__AnglePerLengthUom *p = a; p && n--; ++p)
		soap_default_witsml14__AnglePerLengthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AnglePerLengthUom(struct soap *soap, const witsml14__AnglePerLengthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AnglePerLengthUom(soap, tag ? tag : "witsml14:AnglePerLengthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AnglePerLengthUom * SOAP_FMAC4 soap_get_witsml14__AnglePerLengthUom(struct soap *soap, witsml14__AnglePerLengthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AnglePerLengthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__AccelerationLinearUom[] =
{	{ (LONG64)witsml14__AccelerationLinearUom::m_x002fs2, "m/s2" },
	{ (LONG64)witsml14__AccelerationLinearUom::cm_x002fs2, "cm/s2" },
	{ (LONG64)witsml14__AccelerationLinearUom::ft_x002fs2, "ft/s2" },
	{ (LONG64)witsml14__AccelerationLinearUom::Gal, "Gal" },
	{ (LONG64)witsml14__AccelerationLinearUom::mgn, "mgn" },
	{ (LONG64)witsml14__AccelerationLinearUom::gn, "gn" },
	{ (LONG64)witsml14__AccelerationLinearUom::mGal, "mGal" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__AccelerationLinearUom2s(struct soap *soap, witsml14__AccelerationLinearUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__AccelerationLinearUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__AccelerationLinearUom(struct soap *soap, const char *tag, int id, const witsml14__AccelerationLinearUom *a, const char *type)
{
	if (!type)
		type = "witsml14:AccelerationLinearUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom), type) || soap_send(soap, soap_witsml14__AccelerationLinearUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__AccelerationLinearUom(struct soap *soap, const char *s, witsml14__AccelerationLinearUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__AccelerationLinearUom, s);
	if (map)
		*a = (witsml14__AccelerationLinearUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__AccelerationLinearUom * SOAP_FMAC4 soap_in_witsml14__AccelerationLinearUom(struct soap *soap, const char *tag, witsml14__AccelerationLinearUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__AccelerationLinearUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom, sizeof(witsml14__AccelerationLinearUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__AccelerationLinearUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__AccelerationLinearUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__AccelerationLinearUom, sizeof(witsml14__AccelerationLinearUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__AccelerationLinearUom * SOAP_FMAC4 soap_new_witsml14__AccelerationLinearUom(struct soap *soap, int n)
{
	witsml14__AccelerationLinearUom *a = static_cast<witsml14__AccelerationLinearUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__AccelerationLinearUom)));
	for (witsml14__AccelerationLinearUom *p = a; p && n--; ++p)
		soap_default_witsml14__AccelerationLinearUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__AccelerationLinearUom(struct soap *soap, const witsml14__AccelerationLinearUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__AccelerationLinearUom(soap, tag ? tag : "witsml14:AccelerationLinearUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AccelerationLinearUom * SOAP_FMAC4 soap_get_witsml14__AccelerationLinearUom(struct soap *soap, witsml14__AccelerationLinearUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__AccelerationLinearUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__WellVerticalCoordinateUom[] =
{	{ (LONG64)witsml14__WellVerticalCoordinateUom::m, "m" },
	{ (LONG64)witsml14__WellVerticalCoordinateUom::ft, "ft" },
	{ (LONG64)witsml14__WellVerticalCoordinateUom::ftUS, "ftUS" },
	{ (LONG64)witsml14__WellVerticalCoordinateUom::ftBr_x002865_x0029, "ftBr(65)" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__WellVerticalCoordinateUom2s(struct soap *soap, witsml14__WellVerticalCoordinateUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__WellVerticalCoordinateUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__WellVerticalCoordinateUom(struct soap *soap, const char *tag, int id, const witsml14__WellVerticalCoordinateUom *a, const char *type)
{
	if (!type)
		type = "witsml14:WellVerticalCoordinateUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom), type) || soap_send(soap, soap_witsml14__WellVerticalCoordinateUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__WellVerticalCoordinateUom(struct soap *soap, const char *s, witsml14__WellVerticalCoordinateUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__WellVerticalCoordinateUom, s);
	if (map)
		*a = (witsml14__WellVerticalCoordinateUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__WellVerticalCoordinateUom * SOAP_FMAC4 soap_in_witsml14__WellVerticalCoordinateUom(struct soap *soap, const char *tag, witsml14__WellVerticalCoordinateUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__WellVerticalCoordinateUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom, sizeof(witsml14__WellVerticalCoordinateUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__WellVerticalCoordinateUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__WellVerticalCoordinateUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellVerticalCoordinateUom, sizeof(witsml14__WellVerticalCoordinateUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__WellVerticalCoordinateUom * SOAP_FMAC4 soap_new_witsml14__WellVerticalCoordinateUom(struct soap *soap, int n)
{
	witsml14__WellVerticalCoordinateUom *a = static_cast<witsml14__WellVerticalCoordinateUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__WellVerticalCoordinateUom)));
	for (witsml14__WellVerticalCoordinateUom *p = a; p && n--; ++p)
		soap_default_witsml14__WellVerticalCoordinateUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__WellVerticalCoordinateUom(struct soap *soap, const witsml14__WellVerticalCoordinateUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__WellVerticalCoordinateUom(soap, tag ? tag : "witsml14:WellVerticalCoordinateUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellVerticalCoordinateUom * SOAP_FMAC4 soap_get_witsml14__WellVerticalCoordinateUom(struct soap *soap, witsml14__WellVerticalCoordinateUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__WellVerticalCoordinateUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__MeasuredDepthUom[] =
{	{ (LONG64)witsml14__MeasuredDepthUom::m, "m" },
	{ (LONG64)witsml14__MeasuredDepthUom::ft, "ft" },
	{ (LONG64)witsml14__MeasuredDepthUom::ftUS, "ftUS" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__MeasuredDepthUom2s(struct soap *soap, witsml14__MeasuredDepthUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__MeasuredDepthUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__MeasuredDepthUom(struct soap *soap, const char *tag, int id, const witsml14__MeasuredDepthUom *a, const char *type)
{
	if (!type)
		type = "witsml14:MeasuredDepthUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom), type) || soap_send(soap, soap_witsml14__MeasuredDepthUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__MeasuredDepthUom(struct soap *soap, const char *s, witsml14__MeasuredDepthUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__MeasuredDepthUom, s);
	if (map)
		*a = (witsml14__MeasuredDepthUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__MeasuredDepthUom * SOAP_FMAC4 soap_in_witsml14__MeasuredDepthUom(struct soap *soap, const char *tag, witsml14__MeasuredDepthUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__MeasuredDepthUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom, sizeof(witsml14__MeasuredDepthUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__MeasuredDepthUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__MeasuredDepthUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasuredDepthUom, sizeof(witsml14__MeasuredDepthUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__MeasuredDepthUom * SOAP_FMAC4 soap_new_witsml14__MeasuredDepthUom(struct soap *soap, int n)
{
	witsml14__MeasuredDepthUom *a = static_cast<witsml14__MeasuredDepthUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__MeasuredDepthUom)));
	for (witsml14__MeasuredDepthUom *p = a; p && n--; ++p)
		soap_default_witsml14__MeasuredDepthUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__MeasuredDepthUom(struct soap *soap, const witsml14__MeasuredDepthUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__MeasuredDepthUom(soap, tag ? tag : "witsml14:MeasuredDepthUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__MeasuredDepthUom * SOAP_FMAC4 soap_get_witsml14__MeasuredDepthUom(struct soap *soap, witsml14__MeasuredDepthUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__MeasuredDepthUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_witsml14__PercentUom[] =
{	{ (LONG64)witsml14__PercentUom::_x0025, "%" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_witsml14__PercentUom2s(struct soap *soap, witsml14__PercentUom n)
{
	const char *s = soap_code_str(soap_codes_witsml14__PercentUom, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__PercentUom(struct soap *soap, const char *tag, int id, const witsml14__PercentUom *a, const char *type)
{
	if (!type)
		type = "witsml14:PercentUom";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom), type) || soap_send(soap, soap_witsml14__PercentUom2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__PercentUom(struct soap *soap, const char *s, witsml14__PercentUom *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_witsml14__PercentUom, s);
	if (map)
		*a = (witsml14__PercentUom)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
		return soap->error = SOAP_TYPE;
	return SOAP_OK;
}

SOAP_FMAC3 witsml14__PercentUom * SOAP_FMAC4 soap_in_witsml14__PercentUom(struct soap *soap, const char *tag, witsml14__PercentUom *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (witsml14__PercentUom*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom, sizeof(witsml14__PercentUom), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2witsml14__PercentUom(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (witsml14__PercentUom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom, SOAP_TYPE_gsoap_witsml1_4_witsml14__PercentUom, sizeof(witsml14__PercentUom), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 witsml14__PercentUom * SOAP_FMAC4 soap_new_witsml14__PercentUom(struct soap *soap, int n)
{
	witsml14__PercentUom *a = static_cast<witsml14__PercentUom *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(witsml14__PercentUom)));
	for (witsml14__PercentUom *p = a; p && n--; ++p)
		soap_default_witsml14__PercentUom(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__PercentUom(struct soap *soap, const witsml14__PercentUom *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__PercentUom(soap, tag ? tag : "witsml14:PercentUom", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PercentUom * SOAP_FMAC4 soap_get_witsml14__PercentUom(struct soap *soap, witsml14__PercentUom *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__PercentUom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__witsml14__trajectorys(struct soap *soap, const witsml14__obj_USCOREtrajectorys *a, const char *tag, const char *type)
{
	if (soap_out__witsml14__trajectorys(soap, tag ? tag : "witsml14:trajectorys", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__witsml14__wellbores(struct soap *soap, const witsml14__obj_USCOREwellbores *a, const char *tag, const char *type)
{
	if (soap_out__witsml14__wellbores(soap, tag ? tag : "witsml14:wellbores", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__witsml14__wells(struct soap *soap, const witsml14__obj_USCOREwells *a, const char *tag, const char *type)
{
	if (soap_out__witsml14__wells(soap, tag ? tag : "witsml14:wells", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractUomEnum(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractUomEnum(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 24, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUomEnum, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractUomEnum(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractUomEnum(soap, tag ? tag : "witsml14:abstractUomEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractUomEnum(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractUomEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractTypeEnum(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractTypeEnum(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 40, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTypeEnum, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractTypeEnum(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractTypeEnum(soap, tag ? tag : "witsml14:abstractTypeEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractTypeEnum(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractTypeEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractString32(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractString32(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 32, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString32, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractString32(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractString32(soap, tag ? tag : "witsml14:abstractString32", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractString32(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractString32(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractDescriptionString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractDescriptionString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 256, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDescriptionString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractDescriptionString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractDescriptionString(soap, tag ? tag : "witsml14:abstractDescriptionString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractDescriptionString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractDescriptionString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractUidString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractUidString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 64, "[^ ]*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUidString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractUidString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractUidString(soap, tag ? tag : "witsml14:abstractUidString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractUidString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractUidString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractNameString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractNameString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 64, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractNameString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractNameString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractNameString(soap, tag ? tag : "witsml14:abstractNameString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractNameString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractNameString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractTimeZone(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractTimeZone(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, -1, "[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractTimeZone, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractTimeZone(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractTimeZone(soap, tag ? tag : "witsml14:abstractTimeZone", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractTimeZone(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractTimeZone(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractMaximumLengthString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractMaximumLengthString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 4000, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMaximumLengthString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractMaximumLengthString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractMaximumLengthString(soap, tag ? tag : "witsml14:abstractMaximumLengthString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractMaximumLengthString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractMaximumLengthString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__str16(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str16), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__str16(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str16, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 16, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str16, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__str16, SOAP_TYPE_gsoap_witsml1_4_witsml14__str16, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__str16(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__str16(soap, tag ? tag : "witsml14:str16", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__str16(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__str16(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__str2(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str2), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__str2(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str2, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 2, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__str2, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__str2, SOAP_TYPE_gsoap_witsml1_4_witsml14__str2, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__str2(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__str2(soap, tag ? tag : "witsml14:str2", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__str2(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__str2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__publicLandSurveySystemQuarterSection(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__publicLandSurveySystemQuarterSection(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 12, "(NE|NW|SW|SE|N2|S2|E2|W2|C|LT[0-9]{2,2}|TR[a-zA-Z0-9]{1,2}){1,3}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__publicLandSurveySystemQuarterSection(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__publicLandSurveySystemQuarterSection(soap, tag ? tag : "witsml14:publicLandSurveySystemQuarterSection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__publicLandSurveySystemQuarterSection(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__publicLandSurveySystemQuarterSection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 12, "NE|NW|SW|SE")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__publicLandSurveySystemQuarterTownship(soap, tag ? tag : "witsml14:publicLandSurveySystemQuarterTownship", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__sectionNumber(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__sectionNumber(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, -1, "[+]?([1-9]|[1-2][0-9]|3[0-6])\\.?[0-9]?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__sectionNumber(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__sectionNumber(soap, tag ? tag : "witsml14:sectionNumber", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__sectionNumber(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__sectionNumber(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__geodeticZoneString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__geodeticZoneString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 3, "([1-9]|[1-5][0-9]|60)[NS]")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__geodeticZoneString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__geodeticZoneString(soap, tag ? tag : "witsml14:geodeticZoneString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__geodeticZoneString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__geodeticZoneString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__iadcBearingWearCode(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__iadcBearingWearCode(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 1, "[0-8EFNX]")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode, SOAP_TYPE_gsoap_witsml1_4_witsml14__iadcBearingWearCode, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__iadcBearingWearCode(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__iadcBearingWearCode(soap, tag ? tag : "witsml14:iadcBearingWearCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__iadcBearingWearCode(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__iadcBearingWearCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__uncollapsedString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__uncollapsedString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 256, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString, SOAP_TYPE_gsoap_witsml1_4_witsml14__uncollapsedString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__uncollapsedString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__uncollapsedString(soap, tag ? tag : "witsml14:uncollapsedString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__uncollapsedString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__uncollapsedString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__schemaVersionString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__schemaVersionString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 16, "1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString, SOAP_TYPE_gsoap_witsml1_4_witsml14__schemaVersionString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__schemaVersionString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__schemaVersionString(soap, tag ? tag : "witsml14:schemaVersionString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__schemaVersionString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__schemaVersionString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__shortDescriptionString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__shortDescriptionString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 64, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortDescriptionString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__shortDescriptionString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__shortDescriptionString(soap, tag ? tag : "witsml14:shortDescriptionString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__shortDescriptionString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__shortDescriptionString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_witsml14__abstractUncollapsedString(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractUncollapsedString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractUncollapsedString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractUncollapsedString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractUncollapsedString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractUncollapsedString(soap, tag ? tag : "witsml14:abstractUncollapsedString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractUncollapsedString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractUncollapsedString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_witsml14__abstractString(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractString(soap, tag ? tag : "witsml14:abstractString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractDate(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__abstractDate(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, ".+")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractDate, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__abstractDate(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__abstractDate(soap, tag ? tag : "witsml14:abstractDate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__abstractDate(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractDate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_witsml14__listOfString(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__listOfString(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_witsml14__listOfString(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString, SOAP_TYPE_gsoap_witsml1_4_witsml14__listOfString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_witsml14__listOfString(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_witsml14__listOfString(soap, tag ? tag : "witsml14:listOfString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_witsml14__listOfString(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__listOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void abstract__abstractObject::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void abstract__abstractObject::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int abstract__abstractObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_abstract__abstractObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_abstract__abstractObject(struct soap *soap, const char *tag, int id, const abstract__abstractObject *a, const char *type)
{
	if (!type)
		type = "abstract:abstractObject";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *abstract__abstractObject::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_abstract__abstractObject(soap, tag, this, type);
}

SOAP_FMAC3 abstract__abstractObject * SOAP_FMAC4 soap_in_abstract__abstractObject(struct soap *soap, const char *tag, abstract__abstractObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (abstract__abstractObject*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject, sizeof(abstract__abstractObject), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (abstract__abstractObject *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (abstract__abstractObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject, SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject, sizeof(abstract__abstractObject), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 abstract__abstractObject * SOAP_FMAC2 soap_instantiate_abstract__abstractObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_abstract__abstractObject(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "witsml14:obj_wells"))
		return soap_instantiate_witsml14__obj_USCOREwells(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:obj_wellbores"))
		return soap_instantiate_witsml14__obj_USCOREwellbores(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:obj_trajectorys"))
		return soap_instantiate_witsml14__obj_USCOREtrajectorys(soap, n, NULL, NULL, size);
	abstract__abstractObject *p;
	size_t k = sizeof(abstract__abstractObject);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_abstract__abstractObject, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, abstract__abstractObject);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, abstract__abstractObject, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated abstract__abstractObject location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int abstract__abstractObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_abstract__abstractObject(soap, tag ? tag : "abstract:abstractObject", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *abstract__abstractObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_abstract__abstractObject(soap, this, tag, type);
}

SOAP_FMAC3 abstract__abstractObject * SOAP_FMAC4 soap_get_abstract__abstractObject(struct soap *soap, abstract__abstractObject *p, const char *tag, const char *type)
{
	if ((p = soap_in_abstract__abstractObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORErefWellboreTrajectory::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference = NULL;
	this->witsml14__cs_USCORErefWellboreTrajectory::wellboreParent = NULL;
}

void witsml14__cs_USCORErefWellboreTrajectory::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellboreTrajectory::wellboreParent);
#endif
}

int witsml14__cs_USCORErefWellboreTrajectory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORErefWellboreTrajectory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORErefWellboreTrajectory *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_refWellboreTrajectory";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory), type))
		return soap->error;
	if (!a->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference)
	{	if (soap_element_empty(soap, "witsml14:trajectoryReference", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:trajectoryReference", -1, &a->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", -1, &a->witsml14__cs_USCORErefWellboreTrajectory::wellboreParent, "witsml14:refNameString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORErefWellboreTrajectory::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORErefWellboreTrajectory(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectory * SOAP_FMAC4 soap_in_witsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellboreTrajectory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORErefWellboreTrajectory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, sizeof(witsml14__cs_USCORErefWellboreTrajectory), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORErefWellboreTrajectory *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_trajectoryReference1 = 1;
	size_t soap_flag_wellboreParent1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_trajectoryReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:trajectoryReference", &a->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference, "witsml14:refNameString"))
				{	soap_flag_trajectoryReference1--;
					continue;
				}
			}
			if (soap_flag_wellboreParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", &a->witsml14__cs_USCORErefWellboreTrajectory::wellboreParent, "witsml14:refNameString"))
				{	soap_flag_wellboreParent1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((!a->witsml14__cs_USCORErefWellboreTrajectory::trajectoryReference))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCORErefWellboreTrajectory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, sizeof(witsml14__cs_USCORErefWellboreTrajectory), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORErefWellboreTrajectory * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORErefWellboreTrajectory(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORErefWellboreTrajectory *p;
	size_t k = sizeof(witsml14__cs_USCORErefWellboreTrajectory);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORErefWellboreTrajectory);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORErefWellboreTrajectory, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORErefWellboreTrajectory location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORErefWellboreTrajectory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORErefWellboreTrajectory(soap, tag ? tag : "witsml14:cs_refWellboreTrajectory", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORErefWellboreTrajectory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORErefWellboreTrajectory(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectory * SOAP_FMAC4 soap_get_witsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectory *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORErefWellboreTrajectory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORErefWellboreTrajectoryStation::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__refString(soap, &this->witsml14__cs_USCORErefWellboreTrajectoryStation::stationReference);
	this->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent = NULL;
	this->witsml14__cs_USCORErefWellboreTrajectoryStation::wellboreParent = NULL;
}

void witsml14__cs_USCORErefWellboreTrajectoryStation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCORErefWellboreTrajectoryStation::stationReference, SOAP_TYPE_gsoap_witsml1_4_witsml14__refString);
	soap_serialize_witsml14__refString(soap, &this->witsml14__cs_USCORErefWellboreTrajectoryStation::stationReference);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellboreTrajectoryStation::wellboreParent);
#endif
}

int witsml14__cs_USCORErefWellboreTrajectoryStation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORErefWellboreTrajectoryStation *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_refWellboreTrajectoryStation";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation), type))
		return soap->error;
	if (soap_out_witsml14__refString(soap, "witsml14:stationReference", -1, &a->witsml14__cs_USCORErefWellboreTrajectoryStation::stationReference, "witsml14:refString"))
		return soap->error;
	if (!a->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent)
	{	if (soap_element_empty(soap, "witsml14:trajectoryParent", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:trajectoryParent", -1, &a->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", -1, &a->witsml14__cs_USCORErefWellboreTrajectoryStation::wellboreParent, "witsml14:refNameString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORErefWellboreTrajectoryStation::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectoryStation * SOAP_FMAC4 soap_in_witsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellboreTrajectoryStation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORErefWellboreTrajectoryStation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, sizeof(witsml14__cs_USCORErefWellboreTrajectoryStation), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORErefWellboreTrajectoryStation *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_stationReference1 = 1;
	size_t soap_flag_trajectoryParent1 = 1;
	size_t soap_flag_wellboreParent1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationReference1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__refString(soap, "witsml14:stationReference", &a->witsml14__cs_USCORErefWellboreTrajectoryStation::stationReference, "witsml14:refString"))
				{	soap_flag_stationReference1--;
					continue;
				}
			}
			if (soap_flag_trajectoryParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:trajectoryParent", &a->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent, "witsml14:refNameString"))
				{	soap_flag_trajectoryParent1--;
					continue;
				}
			}
			if (soap_flag_wellboreParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", &a->witsml14__cs_USCORErefWellboreTrajectoryStation::wellboreParent, "witsml14:refNameString"))
				{	soap_flag_wellboreParent1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_stationReference1 > 0 || !a->witsml14__cs_USCORErefWellboreTrajectoryStation::trajectoryParent))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCORErefWellboreTrajectoryStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, sizeof(witsml14__cs_USCORErefWellboreTrajectoryStation), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORErefWellboreTrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORErefWellboreTrajectoryStation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORErefWellboreTrajectoryStation *p;
	size_t k = sizeof(witsml14__cs_USCORErefWellboreTrajectoryStation);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORErefWellboreTrajectoryStation);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORErefWellboreTrajectoryStation, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORErefWellboreTrajectoryStation location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORErefWellboreTrajectoryStation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag ? tag : "witsml14:cs_refWellboreTrajectoryStation", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORErefWellboreTrajectoryStation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectoryStation * SOAP_FMAC4 soap_get_witsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectoryStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREstnTrajMatrixCov::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNN = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNE = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNVert = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceEE = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceEVert = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::varianceVertVert = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::biasN = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::biasE = NULL;
	this->witsml14__cs_USCOREstnTrajMatrixCov::biasVert = NULL;
}

void witsml14__cs_USCOREstnTrajMatrixCov::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNN);
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNE);
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceNVert);
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceEE);
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceEVert);
	soap_serialize_PointerTowitsml14__areaMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::varianceVertVert);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::biasN);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::biasE);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREstnTrajMatrixCov::biasVert);
#endif
}

int witsml14__cs_USCOREstnTrajMatrixCov::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREstnTrajMatrixCov *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_stnTrajMatrixCov";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNN", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNN, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNE", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNE, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNVert", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNVert, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceEE", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceEE, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceEVert", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceEVert, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceVertVert", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceVertVert, "witsml14:areaMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasN", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::biasN, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasE", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::biasE, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasVert", -1, &a->witsml14__cs_USCOREstnTrajMatrixCov::biasVert, "witsml14:lengthMeasure"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREstnTrajMatrixCov::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajMatrixCov * SOAP_FMAC4 soap_in_witsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajMatrixCov *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREstnTrajMatrixCov*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, sizeof(witsml14__cs_USCOREstnTrajMatrixCov), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREstnTrajMatrixCov *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_varianceNN1 = 1;
	size_t soap_flag_varianceNE1 = 1;
	size_t soap_flag_varianceNVert1 = 1;
	size_t soap_flag_varianceEE1 = 1;
	size_t soap_flag_varianceEVert1 = 1;
	size_t soap_flag_varianceVertVert1 = 1;
	size_t soap_flag_biasN1 = 1;
	size_t soap_flag_biasE1 = 1;
	size_t soap_flag_biasVert1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_varianceNN1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNN", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNN, "witsml14:areaMeasure"))
				{	soap_flag_varianceNN1--;
					continue;
				}
			}
			if (soap_flag_varianceNE1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNE", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNE, "witsml14:areaMeasure"))
				{	soap_flag_varianceNE1--;
					continue;
				}
			}
			if (soap_flag_varianceNVert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceNVert", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceNVert, "witsml14:areaMeasure"))
				{	soap_flag_varianceNVert1--;
					continue;
				}
			}
			if (soap_flag_varianceEE1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceEE", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceEE, "witsml14:areaMeasure"))
				{	soap_flag_varianceEE1--;
					continue;
				}
			}
			if (soap_flag_varianceEVert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceEVert", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceEVert, "witsml14:areaMeasure"))
				{	soap_flag_varianceEVert1--;
					continue;
				}
			}
			if (soap_flag_varianceVertVert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__areaMeasure(soap, "witsml14:varianceVertVert", &a->witsml14__cs_USCOREstnTrajMatrixCov::varianceVertVert, "witsml14:areaMeasure"))
				{	soap_flag_varianceVertVert1--;
					continue;
				}
			}
			if (soap_flag_biasN1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasN", &a->witsml14__cs_USCOREstnTrajMatrixCov::biasN, "witsml14:lengthMeasure"))
				{	soap_flag_biasN1--;
					continue;
				}
			}
			if (soap_flag_biasE1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasE", &a->witsml14__cs_USCOREstnTrajMatrixCov::biasE, "witsml14:lengthMeasure"))
				{	soap_flag_biasE1--;
					continue;
				}
			}
			if (soap_flag_biasVert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:biasVert", &a->witsml14__cs_USCOREstnTrajMatrixCov::biasVert, "witsml14:lengthMeasure"))
				{	soap_flag_biasVert1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajMatrixCov *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, sizeof(witsml14__cs_USCOREstnTrajMatrixCov), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREstnTrajMatrixCov * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREstnTrajMatrixCov(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREstnTrajMatrixCov *p;
	size_t k = sizeof(witsml14__cs_USCOREstnTrajMatrixCov);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREstnTrajMatrixCov);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREstnTrajMatrixCov, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREstnTrajMatrixCov location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREstnTrajMatrixCov::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag ? tag : "witsml14:cs_stnTrajMatrixCov", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREstnTrajMatrixCov::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREstnTrajMatrixCov(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajMatrixCov * SOAP_FMAC4 soap_get_witsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, witsml14__cs_USCOREstnTrajMatrixCov *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREstnTrajMatrixCov(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREstnTrajValid::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREstnTrajValid::magTotalFieldCalc = NULL;
	this->witsml14__cs_USCOREstnTrajValid::magDipAngleCalc = NULL;
	this->witsml14__cs_USCOREstnTrajValid::gravTotalFieldCalc = NULL;
}

void witsml14__cs_USCOREstnTrajValid::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajValid::magTotalFieldCalc);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajValid::magDipAngleCalc);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajValid::gravTotalFieldCalc);
#endif
}

int witsml14__cs_USCOREstnTrajValid::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREstnTrajValid(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREstnTrajValid(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREstnTrajValid *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_stnTrajValid";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalFieldCalc", -1, &a->witsml14__cs_USCOREstnTrajValid::magTotalFieldCalc, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDipAngleCalc", -1, &a->witsml14__cs_USCOREstnTrajValid::magDipAngleCalc, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalFieldCalc", -1, &a->witsml14__cs_USCOREstnTrajValid::gravTotalFieldCalc, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREstnTrajValid::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREstnTrajValid(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajValid * SOAP_FMAC4 soap_in_witsml14__cs_USCOREstnTrajValid(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajValid *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREstnTrajValid*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, sizeof(witsml14__cs_USCOREstnTrajValid), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREstnTrajValid *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_magTotalFieldCalc1 = 1;
	size_t soap_flag_magDipAngleCalc1 = 1;
	size_t soap_flag_gravTotalFieldCalc1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_magTotalFieldCalc1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalFieldCalc", &a->witsml14__cs_USCOREstnTrajValid::magTotalFieldCalc, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTotalFieldCalc1--;
					continue;
				}
			}
			if (soap_flag_magDipAngleCalc1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDipAngleCalc", &a->witsml14__cs_USCOREstnTrajValid::magDipAngleCalc, "witsml14:planeAngleMeasure"))
				{	soap_flag_magDipAngleCalc1--;
					continue;
				}
			}
			if (soap_flag_gravTotalFieldCalc1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalFieldCalc", &a->witsml14__cs_USCOREstnTrajValid::gravTotalFieldCalc, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTotalFieldCalc1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajValid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, sizeof(witsml14__cs_USCOREstnTrajValid), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREstnTrajValid * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREstnTrajValid(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREstnTrajValid(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREstnTrajValid *p;
	size_t k = sizeof(witsml14__cs_USCOREstnTrajValid);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREstnTrajValid);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREstnTrajValid, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREstnTrajValid location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREstnTrajValid::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREstnTrajValid(soap, tag ? tag : "witsml14:cs_stnTrajValid", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREstnTrajValid::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREstnTrajValid(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajValid * SOAP_FMAC4 soap_get_witsml14__cs_USCOREstnTrajValid(struct soap *soap, witsml14__cs_USCOREstnTrajValid *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREstnTrajValid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREstnTrajCorUsed::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREstnTrajCorUsed::gravAxialAccelCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::gravTran1AccelCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::gravTran2AccelCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magAxialDrlstrCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magTran1DrlstrCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magTran2DrlstrCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magTran1MSACor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magTran2MSACor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::magAxialMSACor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::sagIncCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::sagAziCor = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::stnMagDeclUsed = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::stnGridCorUsed = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::stnGridConUsed = NULL;
	this->witsml14__cs_USCOREstnTrajCorUsed::dirSensorOffset = NULL;
}

void witsml14__cs_USCOREstnTrajCorUsed::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::gravAxialAccelCor);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::gravTran1AccelCor);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::gravTran2AccelCor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magAxialDrlstrCor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magTran1DrlstrCor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magTran2DrlstrCor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magTran1MSACor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magTran2MSACor);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::magAxialMSACor);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::sagIncCor);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::sagAziCor);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::stnMagDeclUsed);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::stnGridCorUsed);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::stnGridConUsed);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREstnTrajCorUsed::dirSensorOffset);
#endif
}

int witsml14__cs_USCOREstnTrajCorUsed::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREstnTrajCorUsed(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREstnTrajCorUsed *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_stnTrajCorUsed";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravAxialAccelCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::gravAxialAccelCor, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran1AccelCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::gravTran1AccelCor, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran2AccelCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::gravTran2AccelCor, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialDrlstrCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magAxialDrlstrCor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1DrlstrCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magTran1DrlstrCor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2DrlstrCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magTran2DrlstrCor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1MSACor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magTran1MSACor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2MSACor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magTran2MSACor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialMSACor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::magAxialMSACor, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:sagIncCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::sagIncCor, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:sagAziCor", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::sagAziCor, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnMagDeclUsed", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::stnMagDeclUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnGridCorUsed", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::stnGridCorUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnGridConUsed", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::stnGridConUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:dirSensorOffset", -1, &a->witsml14__cs_USCOREstnTrajCorUsed::dirSensorOffset, "witsml14:lengthMeasure"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREstnTrajCorUsed::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREstnTrajCorUsed(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajCorUsed * SOAP_FMAC4 soap_in_witsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajCorUsed *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREstnTrajCorUsed*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, sizeof(witsml14__cs_USCOREstnTrajCorUsed), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREstnTrajCorUsed *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gravAxialAccelCor1 = 1;
	size_t soap_flag_gravTran1AccelCor1 = 1;
	size_t soap_flag_gravTran2AccelCor1 = 1;
	size_t soap_flag_magAxialDrlstrCor1 = 1;
	size_t soap_flag_magTran1DrlstrCor1 = 1;
	size_t soap_flag_magTran2DrlstrCor1 = 1;
	size_t soap_flag_magTran1MSACor1 = 1;
	size_t soap_flag_magTran2MSACor1 = 1;
	size_t soap_flag_magAxialMSACor1 = 1;
	size_t soap_flag_sagIncCor1 = 1;
	size_t soap_flag_sagAziCor1 = 1;
	size_t soap_flag_stnMagDeclUsed1 = 1;
	size_t soap_flag_stnGridCorUsed1 = 1;
	size_t soap_flag_stnGridConUsed1 = 1;
	size_t soap_flag_dirSensorOffset1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gravAxialAccelCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravAxialAccelCor", &a->witsml14__cs_USCOREstnTrajCorUsed::gravAxialAccelCor, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravAxialAccelCor1--;
					continue;
				}
			}
			if (soap_flag_gravTran1AccelCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran1AccelCor", &a->witsml14__cs_USCOREstnTrajCorUsed::gravTran1AccelCor, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTran1AccelCor1--;
					continue;
				}
			}
			if (soap_flag_gravTran2AccelCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran2AccelCor", &a->witsml14__cs_USCOREstnTrajCorUsed::gravTran2AccelCor, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTran2AccelCor1--;
					continue;
				}
			}
			if (soap_flag_magAxialDrlstrCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialDrlstrCor", &a->witsml14__cs_USCOREstnTrajCorUsed::magAxialDrlstrCor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magAxialDrlstrCor1--;
					continue;
				}
			}
			if (soap_flag_magTran1DrlstrCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1DrlstrCor", &a->witsml14__cs_USCOREstnTrajCorUsed::magTran1DrlstrCor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran1DrlstrCor1--;
					continue;
				}
			}
			if (soap_flag_magTran2DrlstrCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2DrlstrCor", &a->witsml14__cs_USCOREstnTrajCorUsed::magTran2DrlstrCor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran2DrlstrCor1--;
					continue;
				}
			}
			if (soap_flag_magTran1MSACor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1MSACor", &a->witsml14__cs_USCOREstnTrajCorUsed::magTran1MSACor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran1MSACor1--;
					continue;
				}
			}
			if (soap_flag_magTran2MSACor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2MSACor", &a->witsml14__cs_USCOREstnTrajCorUsed::magTran2MSACor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran2MSACor1--;
					continue;
				}
			}
			if (soap_flag_magAxialMSACor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialMSACor", &a->witsml14__cs_USCOREstnTrajCorUsed::magAxialMSACor, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magAxialMSACor1--;
					continue;
				}
			}
			if (soap_flag_sagIncCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:sagIncCor", &a->witsml14__cs_USCOREstnTrajCorUsed::sagIncCor, "witsml14:planeAngleMeasure"))
				{	soap_flag_sagIncCor1--;
					continue;
				}
			}
			if (soap_flag_sagAziCor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:sagAziCor", &a->witsml14__cs_USCOREstnTrajCorUsed::sagAziCor, "witsml14:planeAngleMeasure"))
				{	soap_flag_sagAziCor1--;
					continue;
				}
			}
			if (soap_flag_stnMagDeclUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnMagDeclUsed", &a->witsml14__cs_USCOREstnTrajCorUsed::stnMagDeclUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_stnMagDeclUsed1--;
					continue;
				}
			}
			if (soap_flag_stnGridCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnGridCorUsed", &a->witsml14__cs_USCOREstnTrajCorUsed::stnGridCorUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_stnGridCorUsed1--;
					continue;
				}
			}
			if (soap_flag_stnGridConUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stnGridConUsed", &a->witsml14__cs_USCOREstnTrajCorUsed::stnGridConUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_stnGridConUsed1--;
					continue;
				}
			}
			if (soap_flag_dirSensorOffset1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:dirSensorOffset", &a->witsml14__cs_USCOREstnTrajCorUsed::dirSensorOffset, "witsml14:lengthMeasure"))
				{	soap_flag_dirSensorOffset1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajCorUsed *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, sizeof(witsml14__cs_USCOREstnTrajCorUsed), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREstnTrajCorUsed * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREstnTrajCorUsed(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREstnTrajCorUsed *p;
	size_t k = sizeof(witsml14__cs_USCOREstnTrajCorUsed);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREstnTrajCorUsed);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREstnTrajCorUsed, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREstnTrajCorUsed location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREstnTrajCorUsed::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREstnTrajCorUsed(soap, tag ? tag : "witsml14:cs_stnTrajCorUsed", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREstnTrajCorUsed::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREstnTrajCorUsed(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajCorUsed * SOAP_FMAC4 soap_get_witsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, witsml14__cs_USCOREstnTrajCorUsed *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREstnTrajCorUsed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREstnTrajRawData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREstnTrajRawData::gravAxialRaw = NULL;
	this->witsml14__cs_USCOREstnTrajRawData::gravTran1Raw = NULL;
	this->witsml14__cs_USCOREstnTrajRawData::gravTran2Raw = NULL;
	this->witsml14__cs_USCOREstnTrajRawData::magAxialRaw = NULL;
	this->witsml14__cs_USCOREstnTrajRawData::magTran1Raw = NULL;
	this->witsml14__cs_USCOREstnTrajRawData::magTran2Raw = NULL;
}

void witsml14__cs_USCOREstnTrajRawData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::gravAxialRaw);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::gravTran1Raw);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::gravTran2Raw);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::magAxialRaw);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::magTran1Raw);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREstnTrajRawData::magTran2Raw);
#endif
}

int witsml14__cs_USCOREstnTrajRawData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREstnTrajRawData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREstnTrajRawData(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREstnTrajRawData *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_stnTrajRawData";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravAxialRaw", -1, &a->witsml14__cs_USCOREstnTrajRawData::gravAxialRaw, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran1Raw", -1, &a->witsml14__cs_USCOREstnTrajRawData::gravTran1Raw, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran2Raw", -1, &a->witsml14__cs_USCOREstnTrajRawData::gravTran2Raw, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialRaw", -1, &a->witsml14__cs_USCOREstnTrajRawData::magAxialRaw, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1Raw", -1, &a->witsml14__cs_USCOREstnTrajRawData::magTran1Raw, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2Raw", -1, &a->witsml14__cs_USCOREstnTrajRawData::magTran2Raw, "witsml14:magneticInductionMeasure"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREstnTrajRawData::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREstnTrajRawData(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajRawData * SOAP_FMAC4 soap_in_witsml14__cs_USCOREstnTrajRawData(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajRawData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREstnTrajRawData*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, sizeof(witsml14__cs_USCOREstnTrajRawData), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREstnTrajRawData *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_gravAxialRaw1 = 1;
	size_t soap_flag_gravTran1Raw1 = 1;
	size_t soap_flag_gravTran2Raw1 = 1;
	size_t soap_flag_magAxialRaw1 = 1;
	size_t soap_flag_magTran1Raw1 = 1;
	size_t soap_flag_magTran2Raw1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gravAxialRaw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravAxialRaw", &a->witsml14__cs_USCOREstnTrajRawData::gravAxialRaw, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravAxialRaw1--;
					continue;
				}
			}
			if (soap_flag_gravTran1Raw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran1Raw", &a->witsml14__cs_USCOREstnTrajRawData::gravTran1Raw, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTran1Raw1--;
					continue;
				}
			}
			if (soap_flag_gravTran2Raw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTran2Raw", &a->witsml14__cs_USCOREstnTrajRawData::gravTran2Raw, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTran2Raw1--;
					continue;
				}
			}
			if (soap_flag_magAxialRaw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magAxialRaw", &a->witsml14__cs_USCOREstnTrajRawData::magAxialRaw, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magAxialRaw1--;
					continue;
				}
			}
			if (soap_flag_magTran1Raw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran1Raw", &a->witsml14__cs_USCOREstnTrajRawData::magTran1Raw, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran1Raw1--;
					continue;
				}
			}
			if (soap_flag_magTran2Raw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTran2Raw", &a->witsml14__cs_USCOREstnTrajRawData::magTran2Raw, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTran2Raw1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajRawData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, sizeof(witsml14__cs_USCOREstnTrajRawData), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREstnTrajRawData * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREstnTrajRawData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREstnTrajRawData(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREstnTrajRawData *p;
	size_t k = sizeof(witsml14__cs_USCOREstnTrajRawData);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREstnTrajRawData);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREstnTrajRawData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREstnTrajRawData location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREstnTrajRawData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREstnTrajRawData(soap, tag ? tag : "witsml14:cs_stnTrajRawData", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREstnTrajRawData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREstnTrajRawData(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajRawData * SOAP_FMAC4 soap_get_witsml14__cs_USCOREstnTrajRawData(struct soap *soap, witsml14__cs_USCOREstnTrajRawData *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREstnTrajRawData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREtrajectoryStation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREtrajectoryStation::target = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::dTimStn = NULL;
	soap_default_witsml14__TrajStationType(soap, &this->witsml14__cs_USCOREtrajectoryStation::typeTrajStation);
	this->witsml14__cs_USCOREtrajectoryStation::typeSurveyTool = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::calcAlgorithm = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::md = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::tvd = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::incl = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::azi = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::mtf = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::gtf = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::dispNs = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::dispEw = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::vertSect = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::dls = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::rateTurn = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::rateBuild = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::mdDelta = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::tvdDelta = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::modelToolError = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::iscwsaToolErrorModel = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::gravTotalUncert = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::dipAngleUncert = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magTotalUncert = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::gravAccelCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magXAxialCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::sagCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magDrlstrCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::infieldRefCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::interpolatedInfieldRefCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::inHoleRefCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::axialMagInterferenceCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::cosagCorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::MSACorUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::gravTotalFieldReference = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magTotalFieldReference = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magDipAngleReference = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magModelUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::magModelValid = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::geoModelUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::statusTrajStation = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::rawData = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::corUsed = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::valid = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::matrixCov = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &this->witsml14__cs_USCOREtrajectoryStation::location);
	this->witsml14__cs_USCOREtrajectoryStation::sourceStation = NULL;
	this->witsml14__cs_USCOREtrajectoryStation::commonData = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREtrajectoryStation::extensionNameValue);
	this->witsml14__cs_USCOREtrajectoryStation::uid = NULL;
}

void witsml14__cs_USCOREtrajectoryStation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCOREtrajectoryStation::target);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREtrajectoryStation::dTimStn);
	soap_serialize_PointerTowitsml14__TypeSurveyTool(soap, &this->witsml14__cs_USCOREtrajectoryStation::typeSurveyTool);
	soap_serialize_PointerTowitsml14__TrajStnCalcAlgorithm(soap, &this->witsml14__cs_USCOREtrajectoryStation::calcAlgorithm);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &this->witsml14__cs_USCOREtrajectoryStation::md);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &this->witsml14__cs_USCOREtrajectoryStation::tvd);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::incl);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::azi);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::mtf);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::gtf);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::dispNs);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::dispEw);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::vertSect);
	soap_serialize_PointerTowitsml14__anglePerLengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::dls);
	soap_serialize_PointerTowitsml14__anglePerLengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::rateTurn);
	soap_serialize_PointerTowitsml14__anglePerLengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::rateBuild);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::mdDelta);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::tvdDelta);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREtrajectoryStation::modelToolError);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCOREtrajectoryStation::iscwsaToolErrorModel);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::gravTotalUncert);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::dipAngleUncert);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::magTotalUncert);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::gravAccelCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::magXAxialCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::sagCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::magDrlstrCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::infieldRefCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::interpolatedInfieldRefCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::inHoleRefCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::axialMagInterferenceCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::cosagCorUsed);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCOREtrajectoryStation::MSACorUsed);
	soap_serialize_PointerTowitsml14__accelerationLinearMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::gravTotalFieldReference);
	soap_serialize_PointerTowitsml14__magneticInductionMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::magTotalFieldReference);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREtrajectoryStation::magDipAngleReference);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREtrajectoryStation::magModelUsed);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREtrajectoryStation::magModelValid);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREtrajectoryStation::geoModelUsed);
	soap_serialize_PointerTowitsml14__TrajStationStatus(soap, &this->witsml14__cs_USCOREtrajectoryStation::statusTrajStation);
	soap_serialize_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, &this->witsml14__cs_USCOREtrajectoryStation::rawData);
	soap_serialize_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, &this->witsml14__cs_USCOREtrajectoryStation::corUsed);
	soap_serialize_PointerTowitsml14__cs_USCOREstnTrajValid(soap, &this->witsml14__cs_USCOREtrajectoryStation::valid);
	soap_serialize_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, &this->witsml14__cs_USCOREtrajectoryStation::matrixCov);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &this->witsml14__cs_USCOREtrajectoryStation::location);
	soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, &this->witsml14__cs_USCOREtrajectoryStation::sourceStation);
	soap_serialize_PointerTowitsml14__cs_USCOREcommonData(soap, &this->witsml14__cs_USCOREtrajectoryStation::commonData);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREtrajectoryStation::extensionNameValue);
#endif
}

int witsml14__cs_USCOREtrajectoryStation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREtrajectoryStation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREtrajectoryStation *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_trajectoryStation";
	if (((witsml14__cs_USCOREtrajectoryStation*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREtrajectoryStation*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:target", -1, &a->witsml14__cs_USCOREtrajectoryStation::target, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimStn", -1, &a->witsml14__cs_USCOREtrajectoryStation::dTimStn, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_witsml14__TrajStationType(soap, "witsml14:typeTrajStation", -1, &a->witsml14__cs_USCOREtrajectoryStation::typeTrajStation, "witsml14:TrajStationType"))
		return soap->error;
	if (soap_out_PointerTowitsml14__TypeSurveyTool(soap, "witsml14:typeSurveyTool", -1, &a->witsml14__cs_USCOREtrajectoryStation::typeSurveyTool, "witsml14:TypeSurveyTool"))
		return soap->error;
	if (soap_out_PointerTowitsml14__TrajStnCalcAlgorithm(soap, "witsml14:calcAlgorithm", -1, &a->witsml14__cs_USCOREtrajectoryStation::calcAlgorithm, "witsml14:TrajStnCalcAlgorithm"))
		return soap->error;
	if (!a->witsml14__cs_USCOREtrajectoryStation::md)
	{	if (soap_element_empty(soap, "witsml14:md", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", -1, &a->witsml14__cs_USCOREtrajectoryStation::md, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvd", -1, &a->witsml14__cs_USCOREtrajectoryStation::tvd, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:incl", -1, &a->witsml14__cs_USCOREtrajectoryStation::incl, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:azi", -1, &a->witsml14__cs_USCOREtrajectoryStation::azi, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:mtf", -1, &a->witsml14__cs_USCOREtrajectoryStation::mtf, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gtf", -1, &a->witsml14__cs_USCOREtrajectoryStation::gtf, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispNs", -1, &a->witsml14__cs_USCOREtrajectoryStation::dispNs, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispEw", -1, &a->witsml14__cs_USCOREtrajectoryStation::dispEw, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:vertSect", -1, &a->witsml14__cs_USCOREtrajectoryStation::vertSect, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:dls", -1, &a->witsml14__cs_USCOREtrajectoryStation::dls, "witsml14:anglePerLengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:rateTurn", -1, &a->witsml14__cs_USCOREtrajectoryStation::rateTurn, "witsml14:anglePerLengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:rateBuild", -1, &a->witsml14__cs_USCOREtrajectoryStation::rateBuild, "witsml14:anglePerLengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:mdDelta", -1, &a->witsml14__cs_USCOREtrajectoryStation::mdDelta, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:tvdDelta", -1, &a->witsml14__cs_USCOREtrajectoryStation::tvdDelta, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:modelToolError", -1, &a->witsml14__cs_USCOREtrajectoryStation::modelToolError, "witsml14:commentString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:iscwsaToolErrorModel", -1, &a->witsml14__cs_USCOREtrajectoryStation::iscwsaToolErrorModel, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalUncert", -1, &a->witsml14__cs_USCOREtrajectoryStation::gravTotalUncert, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:dipAngleUncert", -1, &a->witsml14__cs_USCOREtrajectoryStation::dipAngleUncert, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalUncert", -1, &a->witsml14__cs_USCOREtrajectoryStation::magTotalUncert, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:gravAccelCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::gravAccelCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:magXAxialCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::magXAxialCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:sagCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::sagCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:magDrlstrCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::magDrlstrCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:infieldRefCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::infieldRefCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:interpolatedInfieldRefCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::interpolatedInfieldRefCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:inHoleRefCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::inHoleRefCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:axialMagInterferenceCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::axialMagInterferenceCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:cosagCorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::cosagCorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:MSACorUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::MSACorUsed, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalFieldReference", -1, &a->witsml14__cs_USCOREtrajectoryStation::gravTotalFieldReference, "witsml14:accelerationLinearMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalFieldReference", -1, &a->witsml14__cs_USCOREtrajectoryStation::magTotalFieldReference, "witsml14:magneticInductionMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDipAngleReference", -1, &a->witsml14__cs_USCOREtrajectoryStation::magDipAngleReference, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:magModelUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::magModelUsed, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:magModelValid", -1, &a->witsml14__cs_USCOREtrajectoryStation::magModelValid, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:geoModelUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::geoModelUsed, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__TrajStationStatus(soap, "witsml14:statusTrajStation", -1, &a->witsml14__cs_USCOREtrajectoryStation::statusTrajStation, "witsml14:TrajStationStatus"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, "witsml14:rawData", -1, &a->witsml14__cs_USCOREtrajectoryStation::rawData, "witsml14:cs_stnTrajRawData"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, "witsml14:corUsed", -1, &a->witsml14__cs_USCOREtrajectoryStation::corUsed, "witsml14:cs_stnTrajCorUsed"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajValid(soap, "witsml14:valid", -1, &a->witsml14__cs_USCOREtrajectoryStation::valid, "witsml14:cs_stnTrajValid"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, "witsml14:matrixCov", -1, &a->witsml14__cs_USCOREtrajectoryStation::matrixCov, "witsml14:cs_stnTrajMatrixCov"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:location", -1, &a->witsml14__cs_USCOREtrajectoryStation::location, "witsml14:cs_location"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, "witsml14:sourceStation", -1, &a->witsml14__cs_USCOREtrajectoryStation::sourceStation, "witsml14:cs_refWellboreTrajectoryStation"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", -1, &a->witsml14__cs_USCOREtrajectoryStation::commonData, "witsml14:cs_commonData"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREtrajectoryStation::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREtrajectoryStation::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREtrajectoryStation(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREtrajectoryStation * SOAP_FMAC4 soap_in_witsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, witsml14__cs_USCOREtrajectoryStation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREtrajectoryStation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, sizeof(witsml14__cs_USCOREtrajectoryStation), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREtrajectoryStation *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREtrajectoryStation*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREtrajectoryStation*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_target1 = 1;
	size_t soap_flag_dTimStn1 = 1;
	size_t soap_flag_typeTrajStation1 = 1;
	size_t soap_flag_typeSurveyTool1 = 1;
	size_t soap_flag_calcAlgorithm1 = 1;
	size_t soap_flag_md1 = 1;
	size_t soap_flag_tvd1 = 1;
	size_t soap_flag_incl1 = 1;
	size_t soap_flag_azi1 = 1;
	size_t soap_flag_mtf1 = 1;
	size_t soap_flag_gtf1 = 1;
	size_t soap_flag_dispNs1 = 1;
	size_t soap_flag_dispEw1 = 1;
	size_t soap_flag_vertSect1 = 1;
	size_t soap_flag_dls1 = 1;
	size_t soap_flag_rateTurn1 = 1;
	size_t soap_flag_rateBuild1 = 1;
	size_t soap_flag_mdDelta1 = 1;
	size_t soap_flag_tvdDelta1 = 1;
	size_t soap_flag_modelToolError1 = 1;
	size_t soap_flag_iscwsaToolErrorModel1 = 1;
	size_t soap_flag_gravTotalUncert1 = 1;
	size_t soap_flag_dipAngleUncert1 = 1;
	size_t soap_flag_magTotalUncert1 = 1;
	size_t soap_flag_gravAccelCorUsed1 = 1;
	size_t soap_flag_magXAxialCorUsed1 = 1;
	size_t soap_flag_sagCorUsed1 = 1;
	size_t soap_flag_magDrlstrCorUsed1 = 1;
	size_t soap_flag_infieldRefCorUsed1 = 1;
	size_t soap_flag_interpolatedInfieldRefCorUsed1 = 1;
	size_t soap_flag_inHoleRefCorUsed1 = 1;
	size_t soap_flag_axialMagInterferenceCorUsed1 = 1;
	size_t soap_flag_cosagCorUsed1 = 1;
	size_t soap_flag_MSACorUsed1 = 1;
	size_t soap_flag_gravTotalFieldReference1 = 1;
	size_t soap_flag_magTotalFieldReference1 = 1;
	size_t soap_flag_magDipAngleReference1 = 1;
	size_t soap_flag_magModelUsed1 = 1;
	size_t soap_flag_magModelValid1 = 1;
	size_t soap_flag_geoModelUsed1 = 1;
	size_t soap_flag_statusTrajStation1 = 1;
	size_t soap_flag_rawData1 = 1;
	size_t soap_flag_corUsed1 = 1;
	size_t soap_flag_valid1 = 1;
	size_t soap_flag_matrixCov1 = 1;
	size_t soap_flag_sourceStation1 = 1;
	size_t soap_flag_commonData1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_target1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:target", &a->witsml14__cs_USCOREtrajectoryStation::target, "witsml14:refNameString"))
				{	soap_flag_target1--;
					continue;
				}
			}
			if (soap_flag_dTimStn1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimStn", &a->witsml14__cs_USCOREtrajectoryStation::dTimStn, "witsml14:timestamp"))
				{	soap_flag_dTimStn1--;
					continue;
				}
			}
			if (soap_flag_typeTrajStation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_witsml14__TrajStationType(soap, "witsml14:typeTrajStation", &a->witsml14__cs_USCOREtrajectoryStation::typeTrajStation, "witsml14:TrajStationType"))
				{	soap_flag_typeTrajStation1--;
					continue;
				}
			}
			if (soap_flag_typeSurveyTool1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__TypeSurveyTool(soap, "witsml14:typeSurveyTool", &a->witsml14__cs_USCOREtrajectoryStation::typeSurveyTool, "witsml14:TypeSurveyTool"))
				{	soap_flag_typeSurveyTool1--;
					continue;
				}
			}
			if (soap_flag_calcAlgorithm1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__TrajStnCalcAlgorithm(soap, "witsml14:calcAlgorithm", &a->witsml14__cs_USCOREtrajectoryStation::calcAlgorithm, "witsml14:TrajStnCalcAlgorithm"))
				{	soap_flag_calcAlgorithm1--;
					continue;
				}
			}
			if (soap_flag_md1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", &a->witsml14__cs_USCOREtrajectoryStation::md, "witsml14:measuredDepthCoord"))
				{	soap_flag_md1--;
					continue;
				}
			}
			if (soap_flag_tvd1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvd", &a->witsml14__cs_USCOREtrajectoryStation::tvd, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvd1--;
					continue;
				}
			}
			if (soap_flag_incl1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:incl", &a->witsml14__cs_USCOREtrajectoryStation::incl, "witsml14:planeAngleMeasure"))
				{	soap_flag_incl1--;
					continue;
				}
			}
			if (soap_flag_azi1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:azi", &a->witsml14__cs_USCOREtrajectoryStation::azi, "witsml14:planeAngleMeasure"))
				{	soap_flag_azi1--;
					continue;
				}
			}
			if (soap_flag_mtf1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:mtf", &a->witsml14__cs_USCOREtrajectoryStation::mtf, "witsml14:planeAngleMeasure"))
				{	soap_flag_mtf1--;
					continue;
				}
			}
			if (soap_flag_gtf1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gtf", &a->witsml14__cs_USCOREtrajectoryStation::gtf, "witsml14:planeAngleMeasure"))
				{	soap_flag_gtf1--;
					continue;
				}
			}
			if (soap_flag_dispNs1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispNs", &a->witsml14__cs_USCOREtrajectoryStation::dispNs, "witsml14:lengthMeasure"))
				{	soap_flag_dispNs1--;
					continue;
				}
			}
			if (soap_flag_dispEw1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispEw", &a->witsml14__cs_USCOREtrajectoryStation::dispEw, "witsml14:lengthMeasure"))
				{	soap_flag_dispEw1--;
					continue;
				}
			}
			if (soap_flag_vertSect1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:vertSect", &a->witsml14__cs_USCOREtrajectoryStation::vertSect, "witsml14:lengthMeasure"))
				{	soap_flag_vertSect1--;
					continue;
				}
			}
			if (soap_flag_dls1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:dls", &a->witsml14__cs_USCOREtrajectoryStation::dls, "witsml14:anglePerLengthMeasure"))
				{	soap_flag_dls1--;
					continue;
				}
			}
			if (soap_flag_rateTurn1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:rateTurn", &a->witsml14__cs_USCOREtrajectoryStation::rateTurn, "witsml14:anglePerLengthMeasure"))
				{	soap_flag_rateTurn1--;
					continue;
				}
			}
			if (soap_flag_rateBuild1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__anglePerLengthMeasure(soap, "witsml14:rateBuild", &a->witsml14__cs_USCOREtrajectoryStation::rateBuild, "witsml14:anglePerLengthMeasure"))
				{	soap_flag_rateBuild1--;
					continue;
				}
			}
			if (soap_flag_mdDelta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:mdDelta", &a->witsml14__cs_USCOREtrajectoryStation::mdDelta, "witsml14:lengthMeasure"))
				{	soap_flag_mdDelta1--;
					continue;
				}
			}
			if (soap_flag_tvdDelta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:tvdDelta", &a->witsml14__cs_USCOREtrajectoryStation::tvdDelta, "witsml14:lengthMeasure"))
				{	soap_flag_tvdDelta1--;
					continue;
				}
			}
			if (soap_flag_modelToolError1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:modelToolError", &a->witsml14__cs_USCOREtrajectoryStation::modelToolError, "witsml14:commentString"))
				{	soap_flag_modelToolError1--;
					continue;
				}
			}
			if (soap_flag_iscwsaToolErrorModel1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:iscwsaToolErrorModel", &a->witsml14__cs_USCOREtrajectoryStation::iscwsaToolErrorModel, "witsml14:refNameString"))
				{	soap_flag_iscwsaToolErrorModel1--;
					continue;
				}
			}
			if (soap_flag_gravTotalUncert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalUncert", &a->witsml14__cs_USCOREtrajectoryStation::gravTotalUncert, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTotalUncert1--;
					continue;
				}
			}
			if (soap_flag_dipAngleUncert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:dipAngleUncert", &a->witsml14__cs_USCOREtrajectoryStation::dipAngleUncert, "witsml14:planeAngleMeasure"))
				{	soap_flag_dipAngleUncert1--;
					continue;
				}
			}
			if (soap_flag_magTotalUncert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalUncert", &a->witsml14__cs_USCOREtrajectoryStation::magTotalUncert, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTotalUncert1--;
					continue;
				}
			}
			if (soap_flag_gravAccelCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:gravAccelCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::gravAccelCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_gravAccelCorUsed1--;
					continue;
				}
			}
			if (soap_flag_magXAxialCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:magXAxialCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::magXAxialCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_magXAxialCorUsed1--;
					continue;
				}
			}
			if (soap_flag_sagCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:sagCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::sagCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_sagCorUsed1--;
					continue;
				}
			}
			if (soap_flag_magDrlstrCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:magDrlstrCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::magDrlstrCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_magDrlstrCorUsed1--;
					continue;
				}
			}
			if (soap_flag_infieldRefCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:infieldRefCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::infieldRefCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_infieldRefCorUsed1--;
					continue;
				}
			}
			if (soap_flag_interpolatedInfieldRefCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:interpolatedInfieldRefCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::interpolatedInfieldRefCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_interpolatedInfieldRefCorUsed1--;
					continue;
				}
			}
			if (soap_flag_inHoleRefCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:inHoleRefCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::inHoleRefCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_inHoleRefCorUsed1--;
					continue;
				}
			}
			if (soap_flag_axialMagInterferenceCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:axialMagInterferenceCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::axialMagInterferenceCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_axialMagInterferenceCorUsed1--;
					continue;
				}
			}
			if (soap_flag_cosagCorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:cosagCorUsed", &a->witsml14__cs_USCOREtrajectoryStation::cosagCorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_cosagCorUsed1--;
					continue;
				}
			}
			if (soap_flag_MSACorUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:MSACorUsed", &a->witsml14__cs_USCOREtrajectoryStation::MSACorUsed, "witsml14:logicalBoolean"))
				{	soap_flag_MSACorUsed1--;
					continue;
				}
			}
			if (soap_flag_gravTotalFieldReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, "witsml14:gravTotalFieldReference", &a->witsml14__cs_USCOREtrajectoryStation::gravTotalFieldReference, "witsml14:accelerationLinearMeasure"))
				{	soap_flag_gravTotalFieldReference1--;
					continue;
				}
			}
			if (soap_flag_magTotalFieldReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__magneticInductionMeasure(soap, "witsml14:magTotalFieldReference", &a->witsml14__cs_USCOREtrajectoryStation::magTotalFieldReference, "witsml14:magneticInductionMeasure"))
				{	soap_flag_magTotalFieldReference1--;
					continue;
				}
			}
			if (soap_flag_magDipAngleReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDipAngleReference", &a->witsml14__cs_USCOREtrajectoryStation::magDipAngleReference, "witsml14:planeAngleMeasure"))
				{	soap_flag_magDipAngleReference1--;
					continue;
				}
			}
			if (soap_flag_magModelUsed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:magModelUsed", &a->witsml14__cs_USCOREtrajectoryStation::magModelUsed, "witsml14:nameString"))
				{	soap_flag_magModelUsed1--;
					continue;
				}
			}
			if (soap_flag_magModelValid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:magModelValid", &a->witsml14__cs_USCOREtrajectoryStation::magModelValid, "witsml14:nameString"))
				{	soap_flag_magModelValid1--;
					continue;
				}
			}
			if (soap_flag_geoModelUsed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:geoModelUsed", &a->witsml14__cs_USCOREtrajectoryStation::geoModelUsed, "witsml14:nameString"))
				{	soap_flag_geoModelUsed1--;
					continue;
				}
			}
			if (soap_flag_statusTrajStation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__TrajStationStatus(soap, "witsml14:statusTrajStation", &a->witsml14__cs_USCOREtrajectoryStation::statusTrajStation, "witsml14:TrajStationStatus"))
				{	soap_flag_statusTrajStation1--;
					continue;
				}
			}
			if (soap_flag_rawData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, "witsml14:rawData", &a->witsml14__cs_USCOREtrajectoryStation::rawData, "witsml14:cs_stnTrajRawData"))
				{	soap_flag_rawData1--;
					continue;
				}
			}
			if (soap_flag_corUsed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, "witsml14:corUsed", &a->witsml14__cs_USCOREtrajectoryStation::corUsed, "witsml14:cs_stnTrajCorUsed"))
				{	soap_flag_corUsed1--;
					continue;
				}
			}
			if (soap_flag_valid1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREstnTrajValid(soap, "witsml14:valid", &a->witsml14__cs_USCOREtrajectoryStation::valid, "witsml14:cs_stnTrajValid"))
				{	soap_flag_valid1--;
					continue;
				}
			}
			if (soap_flag_matrixCov1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, "witsml14:matrixCov", &a->witsml14__cs_USCOREtrajectoryStation::matrixCov, "witsml14:cs_stnTrajMatrixCov"))
				{	soap_flag_matrixCov1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:location", &a->witsml14__cs_USCOREtrajectoryStation::location, "witsml14:cs_location"))
					continue;
			}
			if (soap_flag_sourceStation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, "witsml14:sourceStation", &a->witsml14__cs_USCOREtrajectoryStation::sourceStation, "witsml14:cs_refWellboreTrajectoryStation"))
				{	soap_flag_sourceStation1--;
					continue;
				}
			}
			if (soap_flag_commonData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", &a->witsml14__cs_USCOREtrajectoryStation::commonData, "witsml14:cs_commonData"))
				{	soap_flag_commonData1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREtrajectoryStation::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_typeTrajStation1 > 0 || !a->witsml14__cs_USCOREtrajectoryStation::md))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREtrajectoryStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, sizeof(witsml14__cs_USCOREtrajectoryStation), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREtrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREtrajectoryStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREtrajectoryStation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREtrajectoryStation *p;
	size_t k = sizeof(witsml14__cs_USCOREtrajectoryStation);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREtrajectoryStation);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREtrajectoryStation, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREtrajectoryStation location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREtrajectoryStation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREtrajectoryStation(soap, tag ? tag : "witsml14:cs_trajectoryStation", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREtrajectoryStation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREtrajectoryStation(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREtrajectoryStation * SOAP_FMAC4 soap_get_witsml14__cs_USCOREtrajectoryStation(struct soap *soap, witsml14__cs_USCOREtrajectoryStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREtrajectoryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREtrajectory::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::nameWell);
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::nameWellbore);
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::name);
	this->witsml14__obj_USCOREtrajectory::__obj_USCOREtrajectory_sequence = NULL;
	this->witsml14__obj_USCOREtrajectory::commonData = NULL;
	this->witsml14__obj_USCOREtrajectory::customData = NULL;
	this->witsml14__obj_USCOREtrajectory::uidWell = NULL;
	this->witsml14__obj_USCOREtrajectory::uidWellbore = NULL;
	this->witsml14__obj_USCOREtrajectory::uid = NULL;
}

void witsml14__obj_USCOREtrajectory::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__obj_USCOREtrajectory::nameWell, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::nameWell);
	soap_embedded(soap, &this->witsml14__obj_USCOREtrajectory::nameWellbore, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::nameWellbore);
	soap_embedded(soap, &this->witsml14__obj_USCOREtrajectory::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREtrajectory::name);
	soap_serialize_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, &this->witsml14__obj_USCOREtrajectory::__obj_USCOREtrajectory_sequence);
	soap_serialize_PointerTowitsml14__cs_USCOREcommonData(soap, &this->witsml14__obj_USCOREtrajectory::commonData);
	soap_serialize_PointerTowitsml14__cs_USCOREcustomData(soap, &this->witsml14__obj_USCOREtrajectory::customData);
#endif
}

int witsml14__obj_USCOREtrajectory::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREtrajectory(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREtrajectory *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_trajectory";
	if (((witsml14__obj_USCOREtrajectory*)a)->uidWell)
	{	soap_set_attr(soap, "uidWell", soap_witsml14__uidParentString2s(soap, *((witsml14__obj_USCOREtrajectory*)a)->uidWell), 1);
	}
	if (((witsml14__obj_USCOREtrajectory*)a)->uidWellbore)
	{	soap_set_attr(soap, "uidWellbore", soap_witsml14__uidParentString2s(soap, *((witsml14__obj_USCOREtrajectory*)a)->uidWellbore), 1);
	}
	if (((witsml14__obj_USCOREtrajectory*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__obj_USCOREtrajectory*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:nameWell", -1, &a->witsml14__obj_USCOREtrajectory::nameWell, "witsml14:nameString"))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:nameWellbore", -1, &a->witsml14__obj_USCOREtrajectory::nameWellbore, "witsml14:nameString"))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__obj_USCOREtrajectory::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, "-obj_trajectory-sequence", -1, &a->witsml14__obj_USCOREtrajectory::__obj_USCOREtrajectory_sequence, "-witsml14:obj_trajectory-sequence"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", -1, &a->witsml14__obj_USCOREtrajectory::commonData, "witsml14:cs_commonData"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", -1, &a->witsml14__obj_USCOREtrajectory::customData, "witsml14:cs_customData"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREtrajectory::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREtrajectory(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectory * SOAP_FMAC4 soap_in_witsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, witsml14__obj_USCOREtrajectory *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREtrajectory*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, sizeof(witsml14__obj_USCOREtrajectory), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREtrajectory *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uidWell", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREtrajectory*)a)->uidWell = soap_new_witsml14__uidParentString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidParentString(soap, t, ((witsml14__obj_USCOREtrajectory*)a)->uidWell))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "uidWellbore", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREtrajectory*)a)->uidWellbore = soap_new_witsml14__uidParentString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidParentString(soap, t, ((witsml14__obj_USCOREtrajectory*)a)->uidWellbore))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREtrajectory*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__obj_USCOREtrajectory*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_nameWell1 = 1;
	size_t soap_flag_nameWellbore1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag___obj_USCOREtrajectory_sequence1 = 1;
	size_t soap_flag_commonData1 = 1;
	size_t soap_flag_customData1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nameWell1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:nameWell", &a->witsml14__obj_USCOREtrajectory::nameWell, "witsml14:nameString"))
				{	soap_flag_nameWell1--;
					continue;
				}
			}
			if (soap_flag_nameWellbore1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:nameWellbore", &a->witsml14__obj_USCOREtrajectory::nameWellbore, "witsml14:nameString"))
				{	soap_flag_nameWellbore1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__obj_USCOREtrajectory::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_commonData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", &a->witsml14__obj_USCOREtrajectory::commonData, "witsml14:cs_commonData"))
				{	soap_flag_commonData1--;
					continue;
				}
			}
			if (soap_flag_customData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", &a->witsml14__obj_USCOREtrajectory::customData, "witsml14:cs_customData"))
				{	soap_flag_customData1--;
					continue;
				}
			}
			if (soap_flag___obj_USCOREtrajectory_sequence1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, "-obj_trajectory-sequence", &a->witsml14__obj_USCOREtrajectory::__obj_USCOREtrajectory_sequence, "-witsml14:obj_trajectory-sequence"))
				{	soap_flag___obj_USCOREtrajectory_sequence1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_nameWell1 > 0 || soap_flag_nameWellbore1 > 0 || soap_flag_name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREtrajectory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, sizeof(witsml14__obj_USCOREtrajectory), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREtrajectory * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREtrajectory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREtrajectory(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREtrajectory *p;
	size_t k = sizeof(witsml14__obj_USCOREtrajectory);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREtrajectory);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREtrajectory, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREtrajectory location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREtrajectory::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREtrajectory(soap, tag ? tag : "witsml14:obj_trajectory", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREtrajectory::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREtrajectory(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectory * SOAP_FMAC4 soap_get_witsml14__obj_USCOREtrajectory(struct soap *soap, witsml14__obj_USCOREtrajectory *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREtrajectory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREtrajectorys::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->abstract__abstractObject::soap_default(soap);
	this->witsml14__obj_USCOREtrajectorys::documentInfo = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap, &this->witsml14__obj_USCOREtrajectorys::trajectory);
	soap_default_witsml14__schemaVersionString(soap, &this->witsml14__obj_USCOREtrajectorys::version);
}

void witsml14__obj_USCOREtrajectorys::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__cs_USCOREdocumentInfo(soap, &this->witsml14__obj_USCOREtrajectorys::documentInfo);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap, &this->witsml14__obj_USCOREtrajectorys::trajectory);
	this->abstract__abstractObject::soap_serialize(soap);
#endif
}

int witsml14__obj_USCOREtrajectorys::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREtrajectorys(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREtrajectorys(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREtrajectorys *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_trajectorys";
	soap_set_attr(soap, "version", soap_witsml14__schemaVersionString2s(soap, ((witsml14__obj_USCOREtrajectorys*)a)->version), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys), type ? type : "witsml14:obj_trajectorys"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", -1, &a->witsml14__obj_USCOREtrajectorys::documentInfo, "witsml14:cs_documentInfo"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap, "witsml14:trajectory", -1, &a->witsml14__obj_USCOREtrajectorys::trajectory, "witsml14:obj_trajectory"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREtrajectorys::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREtrajectorys(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectorys * SOAP_FMAC4 soap_in_witsml14__obj_USCOREtrajectorys(struct soap *soap, const char *tag, witsml14__obj_USCOREtrajectorys *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREtrajectorys*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys, sizeof(witsml14__obj_USCOREtrajectorys), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREtrajectorys *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__schemaVersionString(soap, soap_attr_value(soap, "version", 1, 3), &((witsml14__obj_USCOREtrajectorys*)a)->version))
		return NULL;
	size_t soap_flag_documentInfo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentInfo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", &a->witsml14__obj_USCOREtrajectorys::documentInfo, "witsml14:cs_documentInfo"))
				{	soap_flag_documentInfo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap, "witsml14:trajectory", &a->witsml14__obj_USCOREtrajectorys::trajectory, "witsml14:obj_trajectory"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((a->witsml14__obj_USCOREtrajectorys::trajectory.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREtrajectorys *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys, sizeof(witsml14__obj_USCOREtrajectorys), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREtrajectorys * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREtrajectorys(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREtrajectorys(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREtrajectorys *p;
	size_t k = sizeof(witsml14__obj_USCOREtrajectorys);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectorys, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREtrajectorys);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREtrajectorys, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREtrajectorys location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREtrajectorys::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREtrajectorys(soap, tag ? tag : "witsml14:obj_trajectorys", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREtrajectorys::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREtrajectorys(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectorys * SOAP_FMAC4 soap_get_witsml14__obj_USCOREtrajectorys(struct soap *soap, witsml14__obj_USCOREtrajectorys *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREtrajectorys(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREwellbore::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREwellbore::nameWell);
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREwellbore::name);
	this->witsml14__obj_USCOREwellbore::__obj_USCOREwellbore_sequence = NULL;
	this->witsml14__obj_USCOREwellbore::commonData = NULL;
	this->witsml14__obj_USCOREwellbore::customData = NULL;
	this->witsml14__obj_USCOREwellbore::uidWell = NULL;
	this->witsml14__obj_USCOREwellbore::uid = NULL;
}

void witsml14__obj_USCOREwellbore::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__obj_USCOREwellbore::nameWell, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREwellbore::nameWell);
	soap_embedded(soap, &this->witsml14__obj_USCOREwellbore::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREwellbore::name);
	soap_serialize_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, &this->witsml14__obj_USCOREwellbore::__obj_USCOREwellbore_sequence);
	soap_serialize_PointerTowitsml14__cs_USCOREcommonData(soap, &this->witsml14__obj_USCOREwellbore::commonData);
	soap_serialize_PointerTowitsml14__cs_USCOREcustomData(soap, &this->witsml14__obj_USCOREwellbore::customData);
#endif
}

int witsml14__obj_USCOREwellbore::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREwellbore(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREwellbore *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_wellbore";
	if (((witsml14__obj_USCOREwellbore*)a)->uidWell)
	{	soap_set_attr(soap, "uidWell", soap_witsml14__uidParentString2s(soap, *((witsml14__obj_USCOREwellbore*)a)->uidWell), 1);
	}
	if (((witsml14__obj_USCOREwellbore*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__obj_USCOREwellbore*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:nameWell", -1, &a->witsml14__obj_USCOREwellbore::nameWell, "witsml14:nameString"))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__obj_USCOREwellbore::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, "-obj_wellbore-sequence", -1, &a->witsml14__obj_USCOREwellbore::__obj_USCOREwellbore_sequence, "-witsml14:obj_wellbore-sequence"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", -1, &a->witsml14__obj_USCOREwellbore::commonData, "witsml14:cs_commonData"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", -1, &a->witsml14__obj_USCOREwellbore::customData, "witsml14:cs_customData"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREwellbore::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREwellbore(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbore * SOAP_FMAC4 soap_in_witsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, witsml14__obj_USCOREwellbore *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREwellbore*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, sizeof(witsml14__obj_USCOREwellbore), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREwellbore *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uidWell", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREwellbore*)a)->uidWell = soap_new_witsml14__uidParentString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidParentString(soap, t, ((witsml14__obj_USCOREwellbore*)a)->uidWell))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREwellbore*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__obj_USCOREwellbore*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_nameWell1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag___obj_USCOREwellbore_sequence1 = 1;
	size_t soap_flag_commonData1 = 1;
	size_t soap_flag_customData1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nameWell1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:nameWell", &a->witsml14__obj_USCOREwellbore::nameWell, "witsml14:nameString"))
				{	soap_flag_nameWell1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__obj_USCOREwellbore::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_commonData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", &a->witsml14__obj_USCOREwellbore::commonData, "witsml14:cs_commonData"))
				{	soap_flag_commonData1--;
					continue;
				}
			}
			if (soap_flag_customData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", &a->witsml14__obj_USCOREwellbore::customData, "witsml14:cs_customData"))
				{	soap_flag_customData1--;
					continue;
				}
			}
			if (soap_flag___obj_USCOREwellbore_sequence1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, "-obj_wellbore-sequence", &a->witsml14__obj_USCOREwellbore::__obj_USCOREwellbore_sequence, "-witsml14:obj_wellbore-sequence"))
				{	soap_flag___obj_USCOREwellbore_sequence1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_nameWell1 > 0 || soap_flag_name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREwellbore *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, sizeof(witsml14__obj_USCOREwellbore), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREwellbore * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREwellbore(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREwellbore(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREwellbore *p;
	size_t k = sizeof(witsml14__obj_USCOREwellbore);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREwellbore);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREwellbore, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREwellbore location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREwellbore::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREwellbore(soap, tag ? tag : "witsml14:obj_wellbore", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREwellbore::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREwellbore(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbore * SOAP_FMAC4 soap_get_witsml14__obj_USCOREwellbore(struct soap *soap, witsml14__obj_USCOREwellbore *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREwellbore(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREwellbores::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->abstract__abstractObject::soap_default(soap);
	this->witsml14__obj_USCOREwellbores::documentInfo = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap, &this->witsml14__obj_USCOREwellbores::wellbore);
	soap_default_witsml14__schemaVersionString(soap, &this->witsml14__obj_USCOREwellbores::version);
}

void witsml14__obj_USCOREwellbores::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__cs_USCOREdocumentInfo(soap, &this->witsml14__obj_USCOREwellbores::documentInfo);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap, &this->witsml14__obj_USCOREwellbores::wellbore);
	this->abstract__abstractObject::soap_serialize(soap);
#endif
}

int witsml14__obj_USCOREwellbores::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREwellbores(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREwellbores(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREwellbores *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_wellbores";
	soap_set_attr(soap, "version", soap_witsml14__schemaVersionString2s(soap, ((witsml14__obj_USCOREwellbores*)a)->version), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores), type ? type : "witsml14:obj_wellbores"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", -1, &a->witsml14__obj_USCOREwellbores::documentInfo, "witsml14:cs_documentInfo"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap, "witsml14:wellbore", -1, &a->witsml14__obj_USCOREwellbores::wellbore, "witsml14:obj_wellbore"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREwellbores::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREwellbores(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbores * SOAP_FMAC4 soap_in_witsml14__obj_USCOREwellbores(struct soap *soap, const char *tag, witsml14__obj_USCOREwellbores *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREwellbores*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores, sizeof(witsml14__obj_USCOREwellbores), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREwellbores *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__schemaVersionString(soap, soap_attr_value(soap, "version", 1, 3), &((witsml14__obj_USCOREwellbores*)a)->version))
		return NULL;
	size_t soap_flag_documentInfo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentInfo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", &a->witsml14__obj_USCOREwellbores::documentInfo, "witsml14:cs_documentInfo"))
				{	soap_flag_documentInfo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap, "witsml14:wellbore", &a->witsml14__obj_USCOREwellbores::wellbore, "witsml14:obj_wellbore"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((a->witsml14__obj_USCOREwellbores::wellbore.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREwellbores *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores, sizeof(witsml14__obj_USCOREwellbores), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREwellbores * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREwellbores(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREwellbores(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREwellbores *p;
	size_t k = sizeof(witsml14__obj_USCOREwellbores);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbores, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREwellbores);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREwellbores, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREwellbores location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREwellbores::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREwellbores(soap, tag ? tag : "witsml14:obj_wellbores", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREwellbores::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREwellbores(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbores * SOAP_FMAC4 soap_get_witsml14__obj_USCOREwellbores(struct soap *soap, witsml14__obj_USCOREwellbores *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREwellbores(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREcustomData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->witsml14__cs_USCOREcustomData::__any);
}

void witsml14__cs_USCOREcustomData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->witsml14__cs_USCOREcustomData::__any);
#endif
}

int witsml14__cs_USCOREcustomData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREcustomData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREcustomData(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREcustomData *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_customData";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &a->witsml14__cs_USCOREcustomData::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREcustomData::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREcustomData(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREcustomData * SOAP_FMAC4 soap_in_witsml14__cs_USCOREcustomData(struct soap *soap, const char *tag, witsml14__cs_USCOREcustomData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREcustomData*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, sizeof(witsml14__cs_USCOREcustomData), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREcustomData *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &a->witsml14__cs_USCOREcustomData::__any, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREcustomData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, sizeof(witsml14__cs_USCOREcustomData), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREcustomData * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREcustomData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREcustomData(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREcustomData *p;
	size_t k = sizeof(witsml14__cs_USCOREcustomData);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREcustomData);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREcustomData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREcustomData location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREcustomData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREcustomData(soap, tag ? tag : "witsml14:cs_customData", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREcustomData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREcustomData(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREcustomData * SOAP_FMAC4 soap_get_witsml14__cs_USCOREcustomData(struct soap *soap, witsml14__cs_USCOREcustomData *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREcustomData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREextensionAny::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->witsml14__cs_USCOREextensionAny::__any);
}

void witsml14__cs_USCOREextensionAny::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->witsml14__cs_USCOREextensionAny::__any);
#endif
}

int witsml14__cs_USCOREextensionAny::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREextensionAny(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREextensionAny(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREextensionAny *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_extensionAny";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &a->witsml14__cs_USCOREextensionAny::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREextensionAny::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREextensionAny(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionAny * SOAP_FMAC4 soap_in_witsml14__cs_USCOREextensionAny(struct soap *soap, const char *tag, witsml14__cs_USCOREextensionAny *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREextensionAny*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, sizeof(witsml14__cs_USCOREextensionAny), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREextensionAny *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &a->witsml14__cs_USCOREextensionAny::__any, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREextensionAny *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, sizeof(witsml14__cs_USCOREextensionAny), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREextensionAny * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREextensionAny(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREextensionAny(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREextensionAny *p;
	size_t k = sizeof(witsml14__cs_USCOREextensionAny);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREextensionAny);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREextensionAny, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREextensionAny location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREextensionAny::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREextensionAny(soap, tag ? tag : "witsml14:cs_extensionAny", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREextensionAny::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREextensionAny(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionAny * SOAP_FMAC4 soap_get_witsml14__cs_USCOREextensionAny(struct soap *soap, witsml14__cs_USCOREextensionAny *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREextensionAny(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREcommonData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREcommonData::sourceName = NULL;
	this->witsml14__cs_USCOREcommonData::dTimCreation = NULL;
	this->witsml14__cs_USCOREcommonData::dTimLastChange = NULL;
	this->witsml14__cs_USCOREcommonData::itemState = NULL;
	this->witsml14__cs_USCOREcommonData::serviceCategory = NULL;
	this->witsml14__cs_USCOREcommonData::comments = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap, &this->witsml14__cs_USCOREcommonData::acquisitionTimeZone);
	this->witsml14__cs_USCOREcommonData::defaultDatum = NULL;
	this->witsml14__cs_USCOREcommonData::privateGroupOnly = NULL;
	this->witsml14__cs_USCOREcommonData::extensionAny = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREcommonData::extensionNameValue);
}

void witsml14__cs_USCOREcommonData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREcommonData::sourceName);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREcommonData::dTimCreation);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREcommonData::dTimLastChange);
	soap_serialize_PointerTowitsml14__ItemState(soap, &this->witsml14__cs_USCOREcommonData::itemState);
	soap_serialize_PointerTowitsml14__kindString(soap, &this->witsml14__cs_USCOREcommonData::serviceCategory);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREcommonData::comments);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap, &this->witsml14__cs_USCOREcommonData::acquisitionTimeZone);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCOREcommonData::defaultDatum);
	soap_serialize_PointerTobool(soap, &this->witsml14__cs_USCOREcommonData::privateGroupOnly);
	soap_serialize_PointerTowitsml14__cs_USCOREextensionAny(soap, &this->witsml14__cs_USCOREcommonData::extensionAny);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREcommonData::extensionNameValue);
#endif
}

int witsml14__cs_USCOREcommonData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREcommonData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREcommonData(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREcommonData *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_commonData";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:sourceName", -1, &a->witsml14__cs_USCOREcommonData::sourceName, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimCreation", -1, &a->witsml14__cs_USCOREcommonData::dTimCreation, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimLastChange", -1, &a->witsml14__cs_USCOREcommonData::dTimLastChange, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__ItemState(soap, "witsml14:itemState", -1, &a->witsml14__cs_USCOREcommonData::itemState, "witsml14:ItemState"))
		return soap->error;
	if (soap_out_PointerTowitsml14__kindString(soap, "witsml14:serviceCategory", -1, &a->witsml14__cs_USCOREcommonData::serviceCategory, "witsml14:kindString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comments", -1, &a->witsml14__cs_USCOREcommonData::comments, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap, "witsml14:acquisitionTimeZone", -1, &a->witsml14__cs_USCOREcommonData::acquisitionTimeZone, "witsml14:timestampedTimeZone"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:defaultDatum", -1, &a->witsml14__cs_USCOREcommonData::defaultDatum, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTobool(soap, "witsml14:privateGroupOnly", -1, &a->witsml14__cs_USCOREcommonData::privateGroupOnly, "xsd:boolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREextensionAny(soap, "witsml14:extensionAny", -1, &a->witsml14__cs_USCOREcommonData::extensionAny, "witsml14:cs_extensionAny"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREcommonData::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREcommonData::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREcommonData(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREcommonData * SOAP_FMAC4 soap_in_witsml14__cs_USCOREcommonData(struct soap *soap, const char *tag, witsml14__cs_USCOREcommonData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREcommonData*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, sizeof(witsml14__cs_USCOREcommonData), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREcommonData *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_sourceName1 = 1;
	size_t soap_flag_dTimCreation1 = 1;
	size_t soap_flag_dTimLastChange1 = 1;
	size_t soap_flag_itemState1 = 1;
	size_t soap_flag_serviceCategory1 = 1;
	size_t soap_flag_comments1 = 1;
	size_t soap_flag_defaultDatum1 = 1;
	size_t soap_flag_privateGroupOnly1 = 1;
	size_t soap_flag_extensionAny1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sourceName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:sourceName", &a->witsml14__cs_USCOREcommonData::sourceName, "witsml14:nameString"))
				{	soap_flag_sourceName1--;
					continue;
				}
			}
			if (soap_flag_dTimCreation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimCreation", &a->witsml14__cs_USCOREcommonData::dTimCreation, "witsml14:timestamp"))
				{	soap_flag_dTimCreation1--;
					continue;
				}
			}
			if (soap_flag_dTimLastChange1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimLastChange", &a->witsml14__cs_USCOREcommonData::dTimLastChange, "witsml14:timestamp"))
				{	soap_flag_dTimLastChange1--;
					continue;
				}
			}
			if (soap_flag_itemState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__ItemState(soap, "witsml14:itemState", &a->witsml14__cs_USCOREcommonData::itemState, "witsml14:ItemState"))
				{	soap_flag_itemState1--;
					continue;
				}
			}
			if (soap_flag_serviceCategory1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__kindString(soap, "witsml14:serviceCategory", &a->witsml14__cs_USCOREcommonData::serviceCategory, "witsml14:kindString"))
				{	soap_flag_serviceCategory1--;
					continue;
				}
			}
			if (soap_flag_comments1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comments", &a->witsml14__cs_USCOREcommonData::comments, "witsml14:commentString"))
				{	soap_flag_comments1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap, "witsml14:acquisitionTimeZone", &a->witsml14__cs_USCOREcommonData::acquisitionTimeZone, "witsml14:timestampedTimeZone"))
					continue;
			}
			if (soap_flag_defaultDatum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:defaultDatum", &a->witsml14__cs_USCOREcommonData::defaultDatum, "witsml14:refNameString"))
				{	soap_flag_defaultDatum1--;
					continue;
				}
			}
			if (soap_flag_privateGroupOnly1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "witsml14:privateGroupOnly", &a->witsml14__cs_USCOREcommonData::privateGroupOnly, "xsd:boolean"))
				{	soap_flag_privateGroupOnly1--;
					continue;
				}
			}
			if (soap_flag_extensionAny1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREextensionAny(soap, "witsml14:extensionAny", &a->witsml14__cs_USCOREcommonData::extensionAny, "witsml14:cs_extensionAny"))
				{	soap_flag_extensionAny1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREcommonData::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREcommonData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, sizeof(witsml14__cs_USCOREcommonData), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREcommonData * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREcommonData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREcommonData(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREcommonData *p;
	size_t k = sizeof(witsml14__cs_USCOREcommonData);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREcommonData);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREcommonData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREcommonData location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREcommonData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREcommonData(soap, tag ? tag : "witsml14:cs_commonData", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREcommonData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREcommonData(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREcommonData * SOAP_FMAC4 soap_get_witsml14__cs_USCOREcommonData(struct soap *soap, witsml14__cs_USCOREcommonData *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREcommonData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORElocalCRS::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCORElocalCRS::__union_cs_USCORElocalCRS = 0;
	this->witsml14__cs_USCORElocalCRS::yAxisAzimuth = NULL;
	this->witsml14__cs_USCORElocalCRS::magneticDeclination = NULL;
	this->witsml14__cs_USCORElocalCRS::gridConvergence = NULL;
	this->witsml14__cs_USCORElocalCRS::yAxisDescription = NULL;
	this->witsml14__cs_USCORElocalCRS::xRotationCounterClockwise = NULL;
}

void witsml14__cs_USCORElocalCRS::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__witsml14__union_cs_USCORElocalCRS(soap, this->witsml14__cs_USCORElocalCRS::__union_cs_USCORElocalCRS, &this->witsml14__cs_USCORElocalCRS::union_cs_USCORElocalCRS);
	soap_serialize_PointerTowitsml14__yAxisAzimuth(soap, &this->witsml14__cs_USCORElocalCRS::yAxisAzimuth);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCORElocalCRS::magneticDeclination);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCORElocalCRS::gridConvergence);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCORElocalCRS::yAxisDescription);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCORElocalCRS::xRotationCounterClockwise);
#endif
}

int witsml14__cs_USCORElocalCRS::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORElocalCRS(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORElocalCRS(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORElocalCRS *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_localCRS";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS), type))
		return soap->error;
	if (soap_out__witsml14__union_cs_USCORElocalCRS(soap, a->witsml14__cs_USCORElocalCRS::__union_cs_USCORElocalCRS, &a->witsml14__cs_USCORElocalCRS::union_cs_USCORElocalCRS))
		return soap->error;
	if (soap_out_PointerTowitsml14__yAxisAzimuth(soap, "witsml14:yAxisAzimuth", -1, &a->witsml14__cs_USCORElocalCRS::yAxisAzimuth, "witsml14:yAxisAzimuth"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magneticDeclination", -1, &a->witsml14__cs_USCORElocalCRS::magneticDeclination, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridConvergence", -1, &a->witsml14__cs_USCORElocalCRS::gridConvergence, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:yAxisDescription", -1, &a->witsml14__cs_USCORElocalCRS::yAxisDescription, "witsml14:commentString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:xRotationCounterClockwise", -1, &a->witsml14__cs_USCORElocalCRS::xRotationCounterClockwise, "witsml14:logicalBoolean"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORElocalCRS::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORElocalCRS(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORElocalCRS * SOAP_FMAC4 soap_in_witsml14__cs_USCORElocalCRS(struct soap *soap, const char *tag, witsml14__cs_USCORElocalCRS *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORElocalCRS*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, sizeof(witsml14__cs_USCORElocalCRS), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORElocalCRS *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_union_cs_USCORElocalCRS1 = 1;
	size_t soap_flag_yAxisAzimuth1 = 1;
	size_t soap_flag_magneticDeclination1 = 1;
	size_t soap_flag_gridConvergence1 = 1;
	size_t soap_flag_yAxisDescription1 = 1;
	size_t soap_flag_xRotationCounterClockwise1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_union_cs_USCORElocalCRS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__witsml14__union_cs_USCORElocalCRS(soap, &a->witsml14__cs_USCORElocalCRS::__union_cs_USCORElocalCRS, &a->witsml14__cs_USCORElocalCRS::union_cs_USCORElocalCRS))
				{	soap_flag_union_cs_USCORElocalCRS1 = 0;
					continue;
				}
		}
			if (soap_flag_yAxisAzimuth1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__yAxisAzimuth(soap, "witsml14:yAxisAzimuth", &a->witsml14__cs_USCORElocalCRS::yAxisAzimuth, "witsml14:yAxisAzimuth"))
				{	soap_flag_yAxisAzimuth1--;
					continue;
				}
			}
			if (soap_flag_magneticDeclination1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magneticDeclination", &a->witsml14__cs_USCORElocalCRS::magneticDeclination, "witsml14:planeAngleMeasure"))
				{	soap_flag_magneticDeclination1--;
					continue;
				}
			}
			if (soap_flag_gridConvergence1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridConvergence", &a->witsml14__cs_USCORElocalCRS::gridConvergence, "witsml14:planeAngleMeasure"))
				{	soap_flag_gridConvergence1--;
					continue;
				}
			}
			if (soap_flag_yAxisDescription1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:yAxisDescription", &a->witsml14__cs_USCORElocalCRS::yAxisDescription, "witsml14:commentString"))
				{	soap_flag_yAxisDescription1--;
					continue;
				}
			}
			if (soap_flag_xRotationCounterClockwise1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:xRotationCounterClockwise", &a->witsml14__cs_USCORElocalCRS::xRotationCounterClockwise, "witsml14:logicalBoolean"))
				{	soap_flag_xRotationCounterClockwise1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCORElocalCRS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, sizeof(witsml14__cs_USCORElocalCRS), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORElocalCRS * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORElocalCRS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORElocalCRS(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORElocalCRS *p;
	size_t k = sizeof(witsml14__cs_USCORElocalCRS);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORElocalCRS);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORElocalCRS, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORElocalCRS location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORElocalCRS::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORElocalCRS(soap, tag ? tag : "witsml14:cs_localCRS", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORElocalCRS::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORElocalCRS(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORElocalCRS * SOAP_FMAC4 soap_get_witsml14__cs_USCORElocalCRS(struct soap *soap, witsml14__cs_USCORElocalCRS *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORElocalCRS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREprojectionx::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREprojectionx::nameCRS = NULL;
	this->witsml14__cs_USCOREprojectionx::projectionCode = NULL;
	this->witsml14__cs_USCOREprojectionx::projectedFrom = NULL;
	this->witsml14__cs_USCOREprojectionx::stdParallel1 = NULL;
	this->witsml14__cs_USCOREprojectionx::stdParallel2 = NULL;
	this->witsml14__cs_USCOREprojectionx::centralMeridian = NULL;
	this->witsml14__cs_USCOREprojectionx::originLatitude = NULL;
	this->witsml14__cs_USCOREprojectionx::originLongitude = NULL;
	this->witsml14__cs_USCOREprojectionx::latitude1 = NULL;
	this->witsml14__cs_USCOREprojectionx::longitude1 = NULL;
	this->witsml14__cs_USCOREprojectionx::latitude2 = NULL;
	this->witsml14__cs_USCOREprojectionx::longitude2 = NULL;
	this->witsml14__cs_USCOREprojectionx::latitudeForScale = NULL;
	this->witsml14__cs_USCOREprojectionx::longitudeForScale = NULL;
	this->witsml14__cs_USCOREprojectionx::trueScaleLatitude = NULL;
	this->witsml14__cs_USCOREprojectionx::spheroidRadius = NULL;
	this->witsml14__cs_USCOREprojectionx::scaleFactor = NULL;
	this->witsml14__cs_USCOREprojectionx::methodVariant = NULL;
	this->witsml14__cs_USCOREprojectionx::perspectiveHeight = NULL;
	this->witsml14__cs_USCOREprojectionx::zone = NULL;
	this->witsml14__cs_USCOREprojectionx::NADType = NULL;
	this->witsml14__cs_USCOREprojectionx::falseEasting = NULL;
	this->witsml14__cs_USCOREprojectionx::falseNorthing = NULL;
	this->witsml14__cs_USCOREprojectionx::bearing = NULL;
	this->witsml14__cs_USCOREprojectionx::hemisphere = NULL;
	this->witsml14__cs_USCOREprojectionx::description = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap, &this->witsml14__cs_USCOREprojectionx::parameter);
}

void witsml14__cs_USCOREprojectionx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__wellKnownNameStruct(soap, &this->witsml14__cs_USCOREprojectionx::nameCRS);
	soap_serialize_PointerTowitsml14__Projection(soap, &this->witsml14__cs_USCOREprojectionx::projectionCode);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCOREprojectionx::projectedFrom);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::stdParallel1);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::stdParallel2);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::centralMeridian);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::originLatitude);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::originLongitude);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::latitude1);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::longitude1);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::latitude2);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::longitude2);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::latitudeForScale);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::longitudeForScale);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::trueScaleLatitude);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREprojectionx::spheroidRadius);
	soap_serialize_PointerTowitsml14__unitlessQuantity(soap, &this->witsml14__cs_USCOREprojectionx::scaleFactor);
	soap_serialize_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, &this->witsml14__cs_USCOREprojectionx::methodVariant);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREprojectionx::perspectiveHeight);
	soap_serialize_PointerTowitsml14__geodeticZoneString(soap, &this->witsml14__cs_USCOREprojectionx::zone);
	soap_serialize_PointerTowitsml14__NADTypes(soap, &this->witsml14__cs_USCOREprojectionx::NADType);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREprojectionx::falseEasting);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREprojectionx::falseNorthing);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREprojectionx::bearing);
	soap_serialize_PointerTowitsml14__Hemispheres(soap, &this->witsml14__cs_USCOREprojectionx::hemisphere);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREprojectionx::description);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap, &this->witsml14__cs_USCOREprojectionx::parameter);
#endif
}

int witsml14__cs_USCOREprojectionx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREprojectionx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREprojectionx(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREprojectionx *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_projectionx";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:nameCRS", -1, &a->witsml14__cs_USCOREprojectionx::nameCRS, "witsml14:wellKnownNameStruct"))
		return soap->error;
	if (soap_out_PointerTowitsml14__Projection(soap, "witsml14:projectionCode", -1, &a->witsml14__cs_USCOREprojectionx::projectionCode, "witsml14:Projection"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:projectedFrom", -1, &a->witsml14__cs_USCOREprojectionx::projectedFrom, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stdParallel1", -1, &a->witsml14__cs_USCOREprojectionx::stdParallel1, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stdParallel2", -1, &a->witsml14__cs_USCOREprojectionx::stdParallel2, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:centralMeridian", -1, &a->witsml14__cs_USCOREprojectionx::centralMeridian, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:originLatitude", -1, &a->witsml14__cs_USCOREprojectionx::originLatitude, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:originLongitude", -1, &a->witsml14__cs_USCOREprojectionx::originLongitude, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude1", -1, &a->witsml14__cs_USCOREprojectionx::latitude1, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude1", -1, &a->witsml14__cs_USCOREprojectionx::longitude1, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude2", -1, &a->witsml14__cs_USCOREprojectionx::latitude2, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude2", -1, &a->witsml14__cs_USCOREprojectionx::longitude2, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitudeForScale", -1, &a->witsml14__cs_USCOREprojectionx::latitudeForScale, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitudeForScale", -1, &a->witsml14__cs_USCOREprojectionx::longitudeForScale, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:trueScaleLatitude", -1, &a->witsml14__cs_USCOREprojectionx::trueScaleLatitude, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:spheroidRadius", -1, &a->witsml14__cs_USCOREprojectionx::spheroidRadius, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__unitlessQuantity(soap, "witsml14:scaleFactor", -1, &a->witsml14__cs_USCOREprojectionx::scaleFactor, "witsml14:unitlessQuantity"))
		return soap->error;
	if (soap_out_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, "witsml14:methodVariant", -1, &a->witsml14__cs_USCOREprojectionx::methodVariant, "witsml14:ProjectionVariantsObliqueMercator"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:perspectiveHeight", -1, &a->witsml14__cs_USCOREprojectionx::perspectiveHeight, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__geodeticZoneString(soap, "witsml14:zone", -1, &a->witsml14__cs_USCOREprojectionx::zone, "witsml14:geodeticZoneString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__NADTypes(soap, "witsml14:NADType", -1, &a->witsml14__cs_USCOREprojectionx::NADType, "witsml14:NADTypes"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:falseEasting", -1, &a->witsml14__cs_USCOREprojectionx::falseEasting, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:falseNorthing", -1, &a->witsml14__cs_USCOREprojectionx::falseNorthing, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:bearing", -1, &a->witsml14__cs_USCOREprojectionx::bearing, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__Hemispheres(soap, "witsml14:hemisphere", -1, &a->witsml14__cs_USCOREprojectionx::hemisphere, "witsml14:Hemispheres"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:description", -1, &a->witsml14__cs_USCOREprojectionx::description, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap, "witsml14:parameter", -1, &a->witsml14__cs_USCOREprojectionx::parameter, "witsml14:indexedObject"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREprojectionx::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREprojectionx(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREprojectionx * SOAP_FMAC4 soap_in_witsml14__cs_USCOREprojectionx(struct soap *soap, const char *tag, witsml14__cs_USCOREprojectionx *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREprojectionx*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, sizeof(witsml14__cs_USCOREprojectionx), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREprojectionx *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_nameCRS1 = 1;
	size_t soap_flag_projectionCode1 = 1;
	size_t soap_flag_projectedFrom1 = 1;
	size_t soap_flag_stdParallel11 = 1;
	size_t soap_flag_stdParallel21 = 1;
	size_t soap_flag_centralMeridian1 = 1;
	size_t soap_flag_originLatitude1 = 1;
	size_t soap_flag_originLongitude1 = 1;
	size_t soap_flag_latitude11 = 1;
	size_t soap_flag_longitude11 = 1;
	size_t soap_flag_latitude21 = 1;
	size_t soap_flag_longitude21 = 1;
	size_t soap_flag_latitudeForScale1 = 1;
	size_t soap_flag_longitudeForScale1 = 1;
	size_t soap_flag_trueScaleLatitude1 = 1;
	size_t soap_flag_spheroidRadius1 = 1;
	size_t soap_flag_scaleFactor1 = 1;
	size_t soap_flag_methodVariant1 = 1;
	size_t soap_flag_perspectiveHeight1 = 1;
	size_t soap_flag_zone1 = 1;
	size_t soap_flag_NADType1 = 1;
	size_t soap_flag_falseEasting1 = 1;
	size_t soap_flag_falseNorthing1 = 1;
	size_t soap_flag_bearing1 = 1;
	size_t soap_flag_hemisphere1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nameCRS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:nameCRS", &a->witsml14__cs_USCOREprojectionx::nameCRS, "witsml14:wellKnownNameStruct"))
				{	soap_flag_nameCRS1--;
					continue;
				}
			}
			if (soap_flag_projectionCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__Projection(soap, "witsml14:projectionCode", &a->witsml14__cs_USCOREprojectionx::projectionCode, "witsml14:Projection"))
				{	soap_flag_projectionCode1--;
					continue;
				}
			}
			if (soap_flag_projectedFrom1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:projectedFrom", &a->witsml14__cs_USCOREprojectionx::projectedFrom, "witsml14:refNameString"))
				{	soap_flag_projectedFrom1--;
					continue;
				}
			}
			if (soap_flag_stdParallel11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stdParallel1", &a->witsml14__cs_USCOREprojectionx::stdParallel1, "witsml14:planeAngleMeasure"))
				{	soap_flag_stdParallel11--;
					continue;
				}
			}
			if (soap_flag_stdParallel21 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:stdParallel2", &a->witsml14__cs_USCOREprojectionx::stdParallel2, "witsml14:planeAngleMeasure"))
				{	soap_flag_stdParallel21--;
					continue;
				}
			}
			if (soap_flag_centralMeridian1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:centralMeridian", &a->witsml14__cs_USCOREprojectionx::centralMeridian, "witsml14:planeAngleMeasure"))
				{	soap_flag_centralMeridian1--;
					continue;
				}
			}
			if (soap_flag_originLatitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:originLatitude", &a->witsml14__cs_USCOREprojectionx::originLatitude, "witsml14:planeAngleMeasure"))
				{	soap_flag_originLatitude1--;
					continue;
				}
			}
			if (soap_flag_originLongitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:originLongitude", &a->witsml14__cs_USCOREprojectionx::originLongitude, "witsml14:planeAngleMeasure"))
				{	soap_flag_originLongitude1--;
					continue;
				}
			}
			if (soap_flag_latitude11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude1", &a->witsml14__cs_USCOREprojectionx::latitude1, "witsml14:planeAngleMeasure"))
				{	soap_flag_latitude11--;
					continue;
				}
			}
			if (soap_flag_longitude11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude1", &a->witsml14__cs_USCOREprojectionx::longitude1, "witsml14:planeAngleMeasure"))
				{	soap_flag_longitude11--;
					continue;
				}
			}
			if (soap_flag_latitude21 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude2", &a->witsml14__cs_USCOREprojectionx::latitude2, "witsml14:planeAngleMeasure"))
				{	soap_flag_latitude21--;
					continue;
				}
			}
			if (soap_flag_longitude21 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude2", &a->witsml14__cs_USCOREprojectionx::longitude2, "witsml14:planeAngleMeasure"))
				{	soap_flag_longitude21--;
					continue;
				}
			}
			if (soap_flag_latitudeForScale1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitudeForScale", &a->witsml14__cs_USCOREprojectionx::latitudeForScale, "witsml14:planeAngleMeasure"))
				{	soap_flag_latitudeForScale1--;
					continue;
				}
			}
			if (soap_flag_longitudeForScale1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitudeForScale", &a->witsml14__cs_USCOREprojectionx::longitudeForScale, "witsml14:planeAngleMeasure"))
				{	soap_flag_longitudeForScale1--;
					continue;
				}
			}
			if (soap_flag_trueScaleLatitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:trueScaleLatitude", &a->witsml14__cs_USCOREprojectionx::trueScaleLatitude, "witsml14:planeAngleMeasure"))
				{	soap_flag_trueScaleLatitude1--;
					continue;
				}
			}
			if (soap_flag_spheroidRadius1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:spheroidRadius", &a->witsml14__cs_USCOREprojectionx::spheroidRadius, "witsml14:lengthMeasure"))
				{	soap_flag_spheroidRadius1--;
					continue;
				}
			}
			if (soap_flag_scaleFactor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__unitlessQuantity(soap, "witsml14:scaleFactor", &a->witsml14__cs_USCOREprojectionx::scaleFactor, "witsml14:unitlessQuantity"))
				{	soap_flag_scaleFactor1--;
					continue;
				}
			}
			if (soap_flag_methodVariant1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, "witsml14:methodVariant", &a->witsml14__cs_USCOREprojectionx::methodVariant, "witsml14:ProjectionVariantsObliqueMercator"))
				{	soap_flag_methodVariant1--;
					continue;
				}
			}
			if (soap_flag_perspectiveHeight1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:perspectiveHeight", &a->witsml14__cs_USCOREprojectionx::perspectiveHeight, "witsml14:lengthMeasure"))
				{	soap_flag_perspectiveHeight1--;
					continue;
				}
			}
			if (soap_flag_zone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__geodeticZoneString(soap, "witsml14:zone", &a->witsml14__cs_USCOREprojectionx::zone, "witsml14:geodeticZoneString"))
				{	soap_flag_zone1--;
					continue;
				}
			}
			if (soap_flag_NADType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__NADTypes(soap, "witsml14:NADType", &a->witsml14__cs_USCOREprojectionx::NADType, "witsml14:NADTypes"))
				{	soap_flag_NADType1--;
					continue;
				}
			}
			if (soap_flag_falseEasting1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:falseEasting", &a->witsml14__cs_USCOREprojectionx::falseEasting, "witsml14:lengthMeasure"))
				{	soap_flag_falseEasting1--;
					continue;
				}
			}
			if (soap_flag_falseNorthing1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:falseNorthing", &a->witsml14__cs_USCOREprojectionx::falseNorthing, "witsml14:lengthMeasure"))
				{	soap_flag_falseNorthing1--;
					continue;
				}
			}
			if (soap_flag_bearing1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:bearing", &a->witsml14__cs_USCOREprojectionx::bearing, "witsml14:planeAngleMeasure"))
				{	soap_flag_bearing1--;
					continue;
				}
			}
			if (soap_flag_hemisphere1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__Hemispheres(soap, "witsml14:hemisphere", &a->witsml14__cs_USCOREprojectionx::hemisphere, "witsml14:Hemispheres"))
				{	soap_flag_hemisphere1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:description", &a->witsml14__cs_USCOREprojectionx::description, "witsml14:commentString"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap, "witsml14:parameter", &a->witsml14__cs_USCOREprojectionx::parameter, "witsml14:indexedObject"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREprojectionx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, sizeof(witsml14__cs_USCOREprojectionx), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREprojectionx * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREprojectionx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREprojectionx(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREprojectionx *p;
	size_t k = sizeof(witsml14__cs_USCOREprojectionx);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREprojectionx);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREprojectionx, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREprojectionx location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREprojectionx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREprojectionx(soap, tag ? tag : "witsml14:cs_projectionx", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREprojectionx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREprojectionx(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREprojectionx * SOAP_FMAC4 soap_get_witsml14__cs_USCOREprojectionx(struct soap *soap, witsml14__cs_USCOREprojectionx *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREprojectionx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREgeodeticModel::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREgeodeticModel::nameCRS = NULL;
	this->witsml14__cs_USCOREgeodeticModel::geodeticDatumCode = NULL;
	this->witsml14__cs_USCOREgeodeticModel::xTranslation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::yTranslation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::zTranslation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::xRotation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::yRotation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::zRotation = NULL;
	this->witsml14__cs_USCOREgeodeticModel::scaleFactor = NULL;
	this->witsml14__cs_USCOREgeodeticModel::ellipsoidCode = NULL;
	this->witsml14__cs_USCOREgeodeticModel::ellipsoidSemiMajorAxis = NULL;
	this->witsml14__cs_USCOREgeodeticModel::ellipsoidInverseFlattening = NULL;
}

void witsml14__cs_USCOREgeodeticModel::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__wellKnownNameStruct(soap, &this->witsml14__cs_USCOREgeodeticModel::nameCRS);
	soap_serialize_PointerTowitsml14__GeodeticDatum(soap, &this->witsml14__cs_USCOREgeodeticModel::geodeticDatumCode);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::xTranslation);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::yTranslation);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::zTranslation);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::xRotation);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::yRotation);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::zRotation);
	soap_serialize_PointerTowitsml14__unitlessQuantity(soap, &this->witsml14__cs_USCOREgeodeticModel::scaleFactor);
	soap_serialize_PointerTowitsml14__Ellipsoid(soap, &this->witsml14__cs_USCOREgeodeticModel::ellipsoidCode);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCOREgeodeticModel::ellipsoidSemiMajorAxis);
	soap_serialize_PointerTowitsml14__unitlessQuantity(soap, &this->witsml14__cs_USCOREgeodeticModel::ellipsoidInverseFlattening);
#endif
}

int witsml14__cs_USCOREgeodeticModel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREgeodeticModel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREgeodeticModel(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREgeodeticModel *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_geodeticModel";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:nameCRS", -1, &a->witsml14__cs_USCOREgeodeticModel::nameCRS, "witsml14:wellKnownNameStruct"))
		return soap->error;
	if (soap_out_PointerTowitsml14__GeodeticDatum(soap, "witsml14:geodeticDatumCode", -1, &a->witsml14__cs_USCOREgeodeticModel::geodeticDatumCode, "witsml14:GeodeticDatum"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:xTranslation", -1, &a->witsml14__cs_USCOREgeodeticModel::xTranslation, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:yTranslation", -1, &a->witsml14__cs_USCOREgeodeticModel::yTranslation, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:zTranslation", -1, &a->witsml14__cs_USCOREgeodeticModel::zTranslation, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:xRotation", -1, &a->witsml14__cs_USCOREgeodeticModel::xRotation, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:yRotation", -1, &a->witsml14__cs_USCOREgeodeticModel::yRotation, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:zRotation", -1, &a->witsml14__cs_USCOREgeodeticModel::zRotation, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__unitlessQuantity(soap, "witsml14:scaleFactor", -1, &a->witsml14__cs_USCOREgeodeticModel::scaleFactor, "witsml14:unitlessQuantity"))
		return soap->error;
	if (soap_out_PointerTowitsml14__Ellipsoid(soap, "witsml14:ellipsoidCode", -1, &a->witsml14__cs_USCOREgeodeticModel::ellipsoidCode, "witsml14:Ellipsoid"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:ellipsoidSemiMajorAxis", -1, &a->witsml14__cs_USCOREgeodeticModel::ellipsoidSemiMajorAxis, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__unitlessQuantity(soap, "witsml14:ellipsoidInverseFlattening", -1, &a->witsml14__cs_USCOREgeodeticModel::ellipsoidInverseFlattening, "witsml14:unitlessQuantity"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREgeodeticModel::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREgeodeticModel(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREgeodeticModel * SOAP_FMAC4 soap_in_witsml14__cs_USCOREgeodeticModel(struct soap *soap, const char *tag, witsml14__cs_USCOREgeodeticModel *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREgeodeticModel*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, sizeof(witsml14__cs_USCOREgeodeticModel), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREgeodeticModel *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_nameCRS1 = 1;
	size_t soap_flag_geodeticDatumCode1 = 1;
	size_t soap_flag_xTranslation1 = 1;
	size_t soap_flag_yTranslation1 = 1;
	size_t soap_flag_zTranslation1 = 1;
	size_t soap_flag_xRotation1 = 1;
	size_t soap_flag_yRotation1 = 1;
	size_t soap_flag_zRotation1 = 1;
	size_t soap_flag_scaleFactor1 = 1;
	size_t soap_flag_ellipsoidCode1 = 1;
	size_t soap_flag_ellipsoidSemiMajorAxis1 = 1;
	size_t soap_flag_ellipsoidInverseFlattening1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nameCRS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:nameCRS", &a->witsml14__cs_USCOREgeodeticModel::nameCRS, "witsml14:wellKnownNameStruct"))
				{	soap_flag_nameCRS1--;
					continue;
				}
			}
			if (soap_flag_geodeticDatumCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__GeodeticDatum(soap, "witsml14:geodeticDatumCode", &a->witsml14__cs_USCOREgeodeticModel::geodeticDatumCode, "witsml14:GeodeticDatum"))
				{	soap_flag_geodeticDatumCode1--;
					continue;
				}
			}
			if (soap_flag_xTranslation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:xTranslation", &a->witsml14__cs_USCOREgeodeticModel::xTranslation, "witsml14:lengthMeasure"))
				{	soap_flag_xTranslation1--;
					continue;
				}
			}
			if (soap_flag_yTranslation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:yTranslation", &a->witsml14__cs_USCOREgeodeticModel::yTranslation, "witsml14:lengthMeasure"))
				{	soap_flag_yTranslation1--;
					continue;
				}
			}
			if (soap_flag_zTranslation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:zTranslation", &a->witsml14__cs_USCOREgeodeticModel::zTranslation, "witsml14:lengthMeasure"))
				{	soap_flag_zTranslation1--;
					continue;
				}
			}
			if (soap_flag_xRotation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:xRotation", &a->witsml14__cs_USCOREgeodeticModel::xRotation, "witsml14:planeAngleMeasure"))
				{	soap_flag_xRotation1--;
					continue;
				}
			}
			if (soap_flag_yRotation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:yRotation", &a->witsml14__cs_USCOREgeodeticModel::yRotation, "witsml14:planeAngleMeasure"))
				{	soap_flag_yRotation1--;
					continue;
				}
			}
			if (soap_flag_zRotation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:zRotation", &a->witsml14__cs_USCOREgeodeticModel::zRotation, "witsml14:planeAngleMeasure"))
				{	soap_flag_zRotation1--;
					continue;
				}
			}
			if (soap_flag_scaleFactor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__unitlessQuantity(soap, "witsml14:scaleFactor", &a->witsml14__cs_USCOREgeodeticModel::scaleFactor, "witsml14:unitlessQuantity"))
				{	soap_flag_scaleFactor1--;
					continue;
				}
			}
			if (soap_flag_ellipsoidCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__Ellipsoid(soap, "witsml14:ellipsoidCode", &a->witsml14__cs_USCOREgeodeticModel::ellipsoidCode, "witsml14:Ellipsoid"))
				{	soap_flag_ellipsoidCode1--;
					continue;
				}
			}
			if (soap_flag_ellipsoidSemiMajorAxis1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:ellipsoidSemiMajorAxis", &a->witsml14__cs_USCOREgeodeticModel::ellipsoidSemiMajorAxis, "witsml14:lengthMeasure"))
				{	soap_flag_ellipsoidSemiMajorAxis1--;
					continue;
				}
			}
			if (soap_flag_ellipsoidInverseFlattening1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__unitlessQuantity(soap, "witsml14:ellipsoidInverseFlattening", &a->witsml14__cs_USCOREgeodeticModel::ellipsoidInverseFlattening, "witsml14:unitlessQuantity"))
				{	soap_flag_ellipsoidInverseFlattening1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREgeodeticModel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, sizeof(witsml14__cs_USCOREgeodeticModel), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREgeodeticModel * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREgeodeticModel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREgeodeticModel(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREgeodeticModel *p;
	size_t k = sizeof(witsml14__cs_USCOREgeodeticModel);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREgeodeticModel);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREgeodeticModel, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREgeodeticModel location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREgeodeticModel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREgeodeticModel(soap, tag ? tag : "witsml14:cs_geodeticModel", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREgeodeticModel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREgeodeticModel(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREgeodeticModel * SOAP_FMAC4 soap_get_witsml14__cs_USCOREgeodeticModel(struct soap *soap, witsml14__cs_USCOREgeodeticModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREgeodeticModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREwellCRS::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__cs_USCOREwellCRS::name);
	this->witsml14__cs_USCOREwellCRS::__union_cs_USCOREwellCRS = 0;
	this->witsml14__cs_USCOREwellCRS::description = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREwellCRS::extensionNameValue);
	this->witsml14__cs_USCOREwellCRS::uid = NULL;
}

void witsml14__cs_USCOREwellCRS::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCOREwellCRS::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__cs_USCOREwellCRS::name);
	soap_serialize__witsml14__union_cs_USCOREwellCRS(soap, this->witsml14__cs_USCOREwellCRS::__union_cs_USCOREwellCRS, &this->witsml14__cs_USCOREwellCRS::union_cs_USCOREwellCRS);
	soap_serialize_PointerTowitsml14__descriptionString(soap, &this->witsml14__cs_USCOREwellCRS::description);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREwellCRS::extensionNameValue);
#endif
}

int witsml14__cs_USCOREwellCRS::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREwellCRS(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREwellCRS *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_wellCRS";
	if (((witsml14__cs_USCOREwellCRS*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREwellCRS*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__cs_USCOREwellCRS::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out__witsml14__union_cs_USCOREwellCRS(soap, a->witsml14__cs_USCOREwellCRS::__union_cs_USCOREwellCRS, &a->witsml14__cs_USCOREwellCRS::union_cs_USCOREwellCRS))
		return soap->error;
	if (soap_out_PointerTowitsml14__descriptionString(soap, "witsml14:description", -1, &a->witsml14__cs_USCOREwellCRS::description, "witsml14:descriptionString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREwellCRS::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREwellCRS::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREwellCRS(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREwellCRS * SOAP_FMAC4 soap_in_witsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, witsml14__cs_USCOREwellCRS *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREwellCRS*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, sizeof(witsml14__cs_USCOREwellCRS), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREwellCRS *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREwellCRS*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREwellCRS*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_union_cs_USCOREwellCRS1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__cs_USCOREwellCRS::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_union_cs_USCOREwellCRS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__witsml14__union_cs_USCOREwellCRS(soap, &a->witsml14__cs_USCOREwellCRS::__union_cs_USCOREwellCRS, &a->witsml14__cs_USCOREwellCRS::union_cs_USCOREwellCRS))
				{	soap_flag_union_cs_USCOREwellCRS1 = 0;
					continue;
				}
		}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__descriptionString(soap, "witsml14:description", &a->witsml14__cs_USCOREwellCRS::description, "witsml14:descriptionString"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREwellCRS::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREwellCRS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, sizeof(witsml14__cs_USCOREwellCRS), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREwellCRS * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREwellCRS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREwellCRS(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREwellCRS *p;
	size_t k = sizeof(witsml14__cs_USCOREwellCRS);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREwellCRS);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREwellCRS, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREwellCRS location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREwellCRS::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREwellCRS(soap, tag ? tag : "witsml14:cs_wellCRS", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREwellCRS::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREwellCRS(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREwellCRS * SOAP_FMAC4 soap_get_witsml14__cs_USCOREwellCRS(struct soap *soap, witsml14__cs_USCOREwellCRS *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREwellCRS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREreferencePoint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__cs_USCOREreferencePoint::name);
	this->witsml14__cs_USCOREreferencePoint::type = NULL;
	this->witsml14__cs_USCOREreferencePoint::elevation = NULL;
	this->witsml14__cs_USCOREreferencePoint::measuredDepth = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &this->witsml14__cs_USCOREreferencePoint::location);
	this->witsml14__cs_USCOREreferencePoint::description = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREreferencePoint::extensionNameValue);
	this->witsml14__cs_USCOREreferencePoint::uid = NULL;
}

void witsml14__cs_USCOREreferencePoint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCOREreferencePoint::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__cs_USCOREreferencePoint::name);
	soap_serialize_PointerTowitsml14__kindString(soap, &this->witsml14__cs_USCOREreferencePoint::type);
	soap_serialize_PointerTowitsml14__wellElevationCoord(soap, &this->witsml14__cs_USCOREreferencePoint::elevation);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &this->witsml14__cs_USCOREreferencePoint::measuredDepth);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &this->witsml14__cs_USCOREreferencePoint::location);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREreferencePoint::description);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREreferencePoint::extensionNameValue);
#endif
}

int witsml14__cs_USCOREreferencePoint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREreferencePoint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREreferencePoint *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_referencePoint";
	if (((witsml14__cs_USCOREreferencePoint*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREreferencePoint*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__cs_USCOREreferencePoint::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__kindString(soap, "witsml14:type", -1, &a->witsml14__cs_USCOREreferencePoint::type, "witsml14:kindString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellElevationCoord(soap, "witsml14:elevation", -1, &a->witsml14__cs_USCOREreferencePoint::elevation, "witsml14:wellElevationCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:measuredDepth", -1, &a->witsml14__cs_USCOREreferencePoint::measuredDepth, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:location", -1, &a->witsml14__cs_USCOREreferencePoint::location, "witsml14:cs_location"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:description", -1, &a->witsml14__cs_USCOREreferencePoint::description, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREreferencePoint::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREreferencePoint::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREreferencePoint(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREreferencePoint * SOAP_FMAC4 soap_in_witsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, witsml14__cs_USCOREreferencePoint *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREreferencePoint*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, sizeof(witsml14__cs_USCOREreferencePoint), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREreferencePoint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREreferencePoint*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREreferencePoint*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_elevation1 = 1;
	size_t soap_flag_measuredDepth1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__cs_USCOREreferencePoint::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__kindString(soap, "witsml14:type", &a->witsml14__cs_USCOREreferencePoint::type, "witsml14:kindString"))
				{	soap_flag_type1--;
					continue;
				}
			}
			if (soap_flag_elevation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellElevationCoord(soap, "witsml14:elevation", &a->witsml14__cs_USCOREreferencePoint::elevation, "witsml14:wellElevationCoord"))
				{	soap_flag_elevation1--;
					continue;
				}
			}
			if (soap_flag_measuredDepth1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:measuredDepth", &a->witsml14__cs_USCOREreferencePoint::measuredDepth, "witsml14:measuredDepthCoord"))
				{	soap_flag_measuredDepth1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:location", &a->witsml14__cs_USCOREreferencePoint::location, "witsml14:cs_location"))
					continue;
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:description", &a->witsml14__cs_USCOREreferencePoint::description, "witsml14:commentString"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREreferencePoint::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_name1 > 0 || a->witsml14__cs_USCOREreferencePoint::location.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREreferencePoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, sizeof(witsml14__cs_USCOREreferencePoint), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREreferencePoint * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREreferencePoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREreferencePoint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREreferencePoint *p;
	size_t k = sizeof(witsml14__cs_USCOREreferencePoint);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREreferencePoint);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREreferencePoint, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREreferencePoint location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREreferencePoint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREreferencePoint(soap, tag ? tag : "witsml14:cs_referencePoint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREreferencePoint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREreferencePoint(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREreferencePoint * SOAP_FMAC4 soap_get_witsml14__cs_USCOREreferencePoint(struct soap *soap, witsml14__cs_USCOREreferencePoint *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREreferencePoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREpublicLandSurveySystem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREpublicLandSurveySystem::principalMeridian = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::range = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::rangeDir = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::township = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::townshipDir = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::section = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::quarterSection = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::quarterTownship = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::footageNS = NULL;
	this->witsml14__cs_USCOREpublicLandSurveySystem::footageEW = NULL;
}

void witsml14__cs_USCOREpublicLandSurveySystem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__PrincipalMeridian(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::principalMeridian);
	soap_serialize_PointerTowitsml14__positiveCount(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::range);
	soap_serialize_PointerTowitsml14__EastOrWest(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::rangeDir);
	soap_serialize_PointerTowitsml14__positiveCount(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::township);
	soap_serialize_PointerTowitsml14__NorthOrSouth(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::townshipDir);
	soap_serialize_PointerTowitsml14__sectionNumber(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::section);
	soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::quarterSection);
	soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::quarterTownship);
	soap_serialize_PointerTowitsml14__footageNorthSouth(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::footageNS);
	soap_serialize_PointerTowitsml14__footageEastWest(soap, &this->witsml14__cs_USCOREpublicLandSurveySystem::footageEW);
#endif
}

int witsml14__cs_USCOREpublicLandSurveySystem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREpublicLandSurveySystem *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_publicLandSurveySystem";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__PrincipalMeridian(soap, "witsml14:principalMeridian", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::principalMeridian, "witsml14:PrincipalMeridian"))
		return soap->error;
	if (soap_out_PointerTowitsml14__positiveCount(soap, "witsml14:range", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::range, "witsml14:positiveCount"))
		return soap->error;
	if (soap_out_PointerTowitsml14__EastOrWest(soap, "witsml14:rangeDir", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::rangeDir, "witsml14:EastOrWest"))
		return soap->error;
	if (soap_out_PointerTowitsml14__positiveCount(soap, "witsml14:township", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::township, "witsml14:positiveCount"))
		return soap->error;
	if (soap_out_PointerTowitsml14__NorthOrSouth(soap, "witsml14:townshipDir", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::townshipDir, "witsml14:NorthOrSouth"))
		return soap->error;
	if (soap_out_PointerTowitsml14__sectionNumber(soap, "witsml14:section", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::section, "witsml14:sectionNumber"))
		return soap->error;
	if (soap_out_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, "witsml14:quarterSection", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::quarterSection, "witsml14:publicLandSurveySystemQuarterSection"))
		return soap->error;
	if (soap_out_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, "witsml14:quarterTownship", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::quarterTownship, "witsml14:publicLandSurveySystemQuarterTownship"))
		return soap->error;
	if (soap_out_PointerTowitsml14__footageNorthSouth(soap, "witsml14:footageNS", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::footageNS, "witsml14:footageNorthSouth"))
		return soap->error;
	if (soap_out_PointerTowitsml14__footageEastWest(soap, "witsml14:footageEW", -1, &a->witsml14__cs_USCOREpublicLandSurveySystem::footageEW, "witsml14:footageEastWest"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREpublicLandSurveySystem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREpublicLandSurveySystem * SOAP_FMAC4 soap_in_witsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, const char *tag, witsml14__cs_USCOREpublicLandSurveySystem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREpublicLandSurveySystem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, sizeof(witsml14__cs_USCOREpublicLandSurveySystem), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREpublicLandSurveySystem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_principalMeridian1 = 1;
	size_t soap_flag_range1 = 1;
	size_t soap_flag_rangeDir1 = 1;
	size_t soap_flag_township1 = 1;
	size_t soap_flag_townshipDir1 = 1;
	size_t soap_flag_section1 = 1;
	size_t soap_flag_quarterSection1 = 1;
	size_t soap_flag_quarterTownship1 = 1;
	size_t soap_flag_footageNS1 = 1;
	size_t soap_flag_footageEW1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_principalMeridian1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__PrincipalMeridian(soap, "witsml14:principalMeridian", &a->witsml14__cs_USCOREpublicLandSurveySystem::principalMeridian, "witsml14:PrincipalMeridian"))
				{	soap_flag_principalMeridian1--;
					continue;
				}
			}
			if (soap_flag_range1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__positiveCount(soap, "witsml14:range", &a->witsml14__cs_USCOREpublicLandSurveySystem::range, "witsml14:positiveCount"))
				{	soap_flag_range1--;
					continue;
				}
			}
			if (soap_flag_rangeDir1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__EastOrWest(soap, "witsml14:rangeDir", &a->witsml14__cs_USCOREpublicLandSurveySystem::rangeDir, "witsml14:EastOrWest"))
				{	soap_flag_rangeDir1--;
					continue;
				}
			}
			if (soap_flag_township1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__positiveCount(soap, "witsml14:township", &a->witsml14__cs_USCOREpublicLandSurveySystem::township, "witsml14:positiveCount"))
				{	soap_flag_township1--;
					continue;
				}
			}
			if (soap_flag_townshipDir1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__NorthOrSouth(soap, "witsml14:townshipDir", &a->witsml14__cs_USCOREpublicLandSurveySystem::townshipDir, "witsml14:NorthOrSouth"))
				{	soap_flag_townshipDir1--;
					continue;
				}
			}
			if (soap_flag_section1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__sectionNumber(soap, "witsml14:section", &a->witsml14__cs_USCOREpublicLandSurveySystem::section, "witsml14:sectionNumber"))
				{	soap_flag_section1--;
					continue;
				}
			}
			if (soap_flag_quarterSection1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, "witsml14:quarterSection", &a->witsml14__cs_USCOREpublicLandSurveySystem::quarterSection, "witsml14:publicLandSurveySystemQuarterSection"))
				{	soap_flag_quarterSection1--;
					continue;
				}
			}
			if (soap_flag_quarterTownship1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, "witsml14:quarterTownship", &a->witsml14__cs_USCOREpublicLandSurveySystem::quarterTownship, "witsml14:publicLandSurveySystemQuarterTownship"))
				{	soap_flag_quarterTownship1--;
					continue;
				}
			}
			if (soap_flag_footageNS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__footageNorthSouth(soap, "witsml14:footageNS", &a->witsml14__cs_USCOREpublicLandSurveySystem::footageNS, "witsml14:footageNorthSouth"))
				{	soap_flag_footageNS1--;
					continue;
				}
			}
			if (soap_flag_footageEW1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__footageEastWest(soap, "witsml14:footageEW", &a->witsml14__cs_USCOREpublicLandSurveySystem::footageEW, "witsml14:footageEastWest"))
				{	soap_flag_footageEW1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREpublicLandSurveySystem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, sizeof(witsml14__cs_USCOREpublicLandSurveySystem), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREpublicLandSurveySystem * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREpublicLandSurveySystem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREpublicLandSurveySystem *p;
	size_t k = sizeof(witsml14__cs_USCOREpublicLandSurveySystem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREpublicLandSurveySystem);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREpublicLandSurveySystem, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREpublicLandSurveySystem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREpublicLandSurveySystem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag ? tag : "witsml14:cs_publicLandSurveySystem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREpublicLandSurveySystem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREpublicLandSurveySystem(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREpublicLandSurveySystem * SOAP_FMAC4 soap_get_witsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, witsml14__cs_USCOREpublicLandSurveySystem *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREpublicLandSurveySystem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORErefWellWellboreRig::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCORErefWellWellboreRig::rigReference = NULL;
	this->witsml14__cs_USCORErefWellWellboreRig::wellboreParent = NULL;
	this->witsml14__cs_USCORErefWellWellboreRig::wellParent = NULL;
}

void witsml14__cs_USCORErefWellWellboreRig::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellWellboreRig::rigReference);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellWellboreRig::wellboreParent);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellWellboreRig::wellParent);
#endif
}

int witsml14__cs_USCORErefWellWellboreRig::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORErefWellWellboreRig(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORErefWellWellboreRig(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORErefWellWellboreRig *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_refWellWellboreRig";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig), type))
		return soap->error;
	if (!a->witsml14__cs_USCORErefWellWellboreRig::rigReference)
	{	if (soap_element_empty(soap, "witsml14:rigReference", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:rigReference", -1, &a->witsml14__cs_USCORErefWellWellboreRig::rigReference, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", -1, &a->witsml14__cs_USCORErefWellWellboreRig::wellboreParent, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellParent", -1, &a->witsml14__cs_USCORErefWellWellboreRig::wellParent, "witsml14:refNameString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORErefWellWellboreRig::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORErefWellWellboreRig(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellboreRig * SOAP_FMAC4 soap_in_witsml14__cs_USCORErefWellWellboreRig(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellWellboreRig *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORErefWellWellboreRig*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, sizeof(witsml14__cs_USCORErefWellWellboreRig), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORErefWellWellboreRig *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_rigReference1 = 1;
	size_t soap_flag_wellboreParent1 = 1;
	size_t soap_flag_wellParent1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rigReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:rigReference", &a->witsml14__cs_USCORErefWellWellboreRig::rigReference, "witsml14:refNameString"))
				{	soap_flag_rigReference1--;
					continue;
				}
			}
			if (soap_flag_wellboreParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellboreParent", &a->witsml14__cs_USCORErefWellWellboreRig::wellboreParent, "witsml14:refNameString"))
				{	soap_flag_wellboreParent1--;
					continue;
				}
			}
			if (soap_flag_wellParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellParent", &a->witsml14__cs_USCORErefWellWellboreRig::wellParent, "witsml14:refNameString"))
				{	soap_flag_wellParent1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((!a->witsml14__cs_USCORErefWellWellboreRig::rigReference))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCORErefWellWellboreRig *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, sizeof(witsml14__cs_USCORErefWellWellboreRig), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORErefWellWellboreRig * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORErefWellWellboreRig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORErefWellWellboreRig(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORErefWellWellboreRig *p;
	size_t k = sizeof(witsml14__cs_USCORErefWellWellboreRig);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORErefWellWellboreRig);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORErefWellWellboreRig, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORErefWellWellboreRig location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORErefWellWellboreRig::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORErefWellWellboreRig(soap, tag ? tag : "witsml14:cs_refWellWellboreRig", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORErefWellWellboreRig::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORErefWellWellboreRig(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellboreRig * SOAP_FMAC4 soap_get_witsml14__cs_USCORErefWellWellboreRig(struct soap *soap, witsml14__cs_USCORErefWellWellboreRig *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORErefWellWellboreRig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORErefWellWellbore::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCORErefWellWellbore::wellboreReference = NULL;
	this->witsml14__cs_USCORErefWellWellbore::wellParent = NULL;
}

void witsml14__cs_USCORErefWellWellbore::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellWellbore::wellboreReference);
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORErefWellWellbore::wellParent);
#endif
}

int witsml14__cs_USCORErefWellWellbore::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORErefWellWellbore(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORErefWellWellbore(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORErefWellWellbore *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_refWellWellbore";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore), type))
		return soap->error;
	if (!a->witsml14__cs_USCORErefWellWellbore::wellboreReference)
	{	if (soap_element_empty(soap, "witsml14:wellboreReference", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellboreReference", -1, &a->witsml14__cs_USCORErefWellWellbore::wellboreReference, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellParent", -1, &a->witsml14__cs_USCORErefWellWellbore::wellParent, "witsml14:refNameString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORErefWellWellbore::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORErefWellWellbore(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellbore * SOAP_FMAC4 soap_in_witsml14__cs_USCORErefWellWellbore(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellWellbore *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORErefWellWellbore*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, sizeof(witsml14__cs_USCORErefWellWellbore), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORErefWellWellbore *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_wellboreReference1 = 1;
	size_t soap_flag_wellParent1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wellboreReference1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellboreReference", &a->witsml14__cs_USCORErefWellWellbore::wellboreReference, "witsml14:refNameString"))
				{	soap_flag_wellboreReference1--;
					continue;
				}
			}
			if (soap_flag_wellParent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellParent", &a->witsml14__cs_USCORErefWellWellbore::wellParent, "witsml14:refNameString"))
				{	soap_flag_wellParent1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((!a->witsml14__cs_USCORErefWellWellbore::wellboreReference))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCORErefWellWellbore *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, sizeof(witsml14__cs_USCORErefWellWellbore), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORErefWellWellbore * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORErefWellWellbore(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORErefWellWellbore(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORErefWellWellbore *p;
	size_t k = sizeof(witsml14__cs_USCORErefWellWellbore);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORErefWellWellbore);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORErefWellWellbore, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORErefWellWellbore location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORErefWellWellbore::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORErefWellWellbore(soap, tag ? tag : "witsml14:cs_refWellWellbore", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORErefWellWellbore::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORErefWellWellbore(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellbore * SOAP_FMAC4 soap_get_witsml14__cs_USCORErefWellWellbore(struct soap *soap, witsml14__cs_USCORErefWellWellbore *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORErefWellWellbore(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREwellDatum::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__cs_USCOREwellDatum::name);
	this->witsml14__cs_USCOREwellDatum::code = NULL;
	this->witsml14__cs_USCOREwellDatum::__union_cs_USCOREwellDatum = 0;
	soap_default_std__vectorTemplateOfwitsml14__kindString(soap, &this->witsml14__cs_USCOREwellDatum::kind);
	this->witsml14__cs_USCOREwellDatum::wellbore = NULL;
	this->witsml14__cs_USCOREwellDatum::rig = NULL;
	this->witsml14__cs_USCOREwellDatum::elevation = NULL;
	this->witsml14__cs_USCOREwellDatum::measuredDepth = NULL;
	this->witsml14__cs_USCOREwellDatum::horizontalLocation = NULL;
	this->witsml14__cs_USCOREwellDatum::comment = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREwellDatum::extensionNameValue);
	soap_default_witsml14__uidString(soap, &this->witsml14__cs_USCOREwellDatum::uid);
}

void witsml14__cs_USCOREwellDatum::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCOREwellDatum::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__cs_USCOREwellDatum::name);
	soap_serialize_PointerTowitsml14__ElevCodeEnum(soap, &this->witsml14__cs_USCOREwellDatum::code);
	soap_serialize__witsml14__union_cs_USCOREwellDatum(soap, this->witsml14__cs_USCOREwellDatum::__union_cs_USCOREwellDatum, &this->witsml14__cs_USCOREwellDatum::union_cs_USCOREwellDatum);
	soap_serialize_std__vectorTemplateOfwitsml14__kindString(soap, &this->witsml14__cs_USCOREwellDatum::kind);
	soap_serialize_PointerTowitsml14__cs_USCORErefWellWellbore(soap, &this->witsml14__cs_USCOREwellDatum::wellbore);
	soap_serialize_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, &this->witsml14__cs_USCOREwellDatum::rig);
	soap_serialize_PointerTowitsml14__wellElevationCoord(soap, &this->witsml14__cs_USCOREwellDatum::elevation);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &this->witsml14__cs_USCOREwellDatum::measuredDepth);
	soap_serialize_PointerTowitsml14__cs_USCORElocation(soap, &this->witsml14__cs_USCOREwellDatum::horizontalLocation);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREwellDatum::comment);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREwellDatum::extensionNameValue);
#endif
}

int witsml14__cs_USCOREwellDatum::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREwellDatum(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREwellDatum *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_wellDatum";
	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, ((witsml14__cs_USCOREwellDatum*)a)->uid), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__cs_USCOREwellDatum::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__ElevCodeEnum(soap, "witsml14:code", -1, &a->witsml14__cs_USCOREwellDatum::code, "witsml14:ElevCodeEnum"))
		return soap->error;
	if (soap_out__witsml14__union_cs_USCOREwellDatum(soap, a->witsml14__cs_USCOREwellDatum::__union_cs_USCOREwellDatum, &a->witsml14__cs_USCOREwellDatum::union_cs_USCOREwellDatum))
		return soap->error;
	if (soap_out_std__vectorTemplateOfwitsml14__kindString(soap, "witsml14:kind", -1, &a->witsml14__cs_USCOREwellDatum::kind, "witsml14:kindString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCORErefWellWellbore(soap, "witsml14:wellbore", -1, &a->witsml14__cs_USCOREwellDatum::wellbore, "witsml14:cs_refWellWellbore"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, "witsml14:rig", -1, &a->witsml14__cs_USCOREwellDatum::rig, "witsml14:cs_refWellWellboreRig"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellElevationCoord(soap, "witsml14:elevation", -1, &a->witsml14__cs_USCOREwellDatum::elevation, "witsml14:wellElevationCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:measuredDepth", -1, &a->witsml14__cs_USCOREwellDatum::measuredDepth, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCORElocation(soap, "witsml14:horizontalLocation", -1, &a->witsml14__cs_USCOREwellDatum::horizontalLocation, "witsml14:cs_location"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comment", -1, &a->witsml14__cs_USCOREwellDatum::comment, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREwellDatum::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREwellDatum::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREwellDatum(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREwellDatum * SOAP_FMAC4 soap_in_witsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, witsml14__cs_USCOREwellDatum *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREwellDatum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, sizeof(witsml14__cs_USCOREwellDatum), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREwellDatum *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__uidString(soap, soap_attr_value(soap, "uid", 1, 3), &((witsml14__cs_USCOREwellDatum*)a)->uid))
		return NULL;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_code1 = 1;
	size_t soap_flag_union_cs_USCOREwellDatum1 = 1;
	size_t soap_flag_wellbore1 = 1;
	size_t soap_flag_rig1 = 1;
	size_t soap_flag_elevation1 = 1;
	size_t soap_flag_measuredDepth1 = 1;
	size_t soap_flag_horizontalLocation1 = 1;
	size_t soap_flag_comment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__cs_USCOREwellDatum::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__ElevCodeEnum(soap, "witsml14:code", &a->witsml14__cs_USCOREwellDatum::code, "witsml14:ElevCodeEnum"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_union_cs_USCOREwellDatum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__witsml14__union_cs_USCOREwellDatum(soap, &a->witsml14__cs_USCOREwellDatum::__union_cs_USCOREwellDatum, &a->witsml14__cs_USCOREwellDatum::union_cs_USCOREwellDatum))
				{	soap_flag_union_cs_USCOREwellDatum1 = 0;
					continue;
				}
		}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfwitsml14__kindString(soap, "witsml14:kind", &a->witsml14__cs_USCOREwellDatum::kind, "witsml14:kindString"))
					continue;
			}
			if (soap_flag_wellbore1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCORErefWellWellbore(soap, "witsml14:wellbore", &a->witsml14__cs_USCOREwellDatum::wellbore, "witsml14:cs_refWellWellbore"))
				{	soap_flag_wellbore1--;
					continue;
				}
			}
			if (soap_flag_rig1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, "witsml14:rig", &a->witsml14__cs_USCOREwellDatum::rig, "witsml14:cs_refWellWellboreRig"))
				{	soap_flag_rig1--;
					continue;
				}
			}
			if (soap_flag_elevation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellElevationCoord(soap, "witsml14:elevation", &a->witsml14__cs_USCOREwellDatum::elevation, "witsml14:wellElevationCoord"))
				{	soap_flag_elevation1--;
					continue;
				}
			}
			if (soap_flag_measuredDepth1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:measuredDepth", &a->witsml14__cs_USCOREwellDatum::measuredDepth, "witsml14:measuredDepthCoord"))
				{	soap_flag_measuredDepth1--;
					continue;
				}
			}
			if (soap_flag_horizontalLocation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCORElocation(soap, "witsml14:horizontalLocation", &a->witsml14__cs_USCOREwellDatum::horizontalLocation, "witsml14:cs_location"))
				{	soap_flag_horizontalLocation1--;
					continue;
				}
			}
			if (soap_flag_comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comment", &a->witsml14__cs_USCOREwellDatum::comment, "witsml14:commentString"))
				{	soap_flag_comment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREwellDatum::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREwellDatum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, sizeof(witsml14__cs_USCOREwellDatum), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREwellDatum * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREwellDatum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREwellDatum(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREwellDatum *p;
	size_t k = sizeof(witsml14__cs_USCOREwellDatum);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREwellDatum);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREwellDatum, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREwellDatum location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREwellDatum::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREwellDatum(soap, tag ? tag : "witsml14:cs_wellDatum", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREwellDatum::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREwellDatum(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREwellDatum * SOAP_FMAC4 soap_get_witsml14__cs_USCOREwellDatum(struct soap *soap, witsml14__cs_USCOREwellDatum *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREwellDatum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCORElocation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCORElocation::wellCRS = NULL;
	this->witsml14__cs_USCORElocation::latitude = NULL;
	this->witsml14__cs_USCORElocation::longitude = NULL;
	this->witsml14__cs_USCORElocation::easting = NULL;
	this->witsml14__cs_USCORElocation::northing = NULL;
	this->witsml14__cs_USCORElocation::westing = NULL;
	this->witsml14__cs_USCORElocation::southing = NULL;
	this->witsml14__cs_USCORElocation::projectedX = NULL;
	this->witsml14__cs_USCORElocation::projectedY = NULL;
	this->witsml14__cs_USCORElocation::localX = NULL;
	this->witsml14__cs_USCORElocation::localY = NULL;
	this->witsml14__cs_USCORElocation::original = NULL;
	this->witsml14__cs_USCORElocation::description = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCORElocation::extensionNameValue);
	this->witsml14__cs_USCORElocation::uid = NULL;
}

void witsml14__cs_USCORElocation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &this->witsml14__cs_USCORElocation::wellCRS);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCORElocation::latitude);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &this->witsml14__cs_USCORElocation::longitude);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::easting);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::northing);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::westing);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::southing);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::projectedX);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::projectedY);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::localX);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &this->witsml14__cs_USCORElocation::localY);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &this->witsml14__cs_USCORElocation::original);
	soap_serialize_PointerTowitsml14__descriptionString(soap, &this->witsml14__cs_USCORElocation::description);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCORElocation::extensionNameValue);
#endif
}

int witsml14__cs_USCORElocation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCORElocation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCORElocation(struct soap *soap, const char *tag, int id, const witsml14__cs_USCORElocation *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_location";
	if (((witsml14__cs_USCORElocation*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCORElocation*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:wellCRS", -1, &a->witsml14__cs_USCORElocation::wellCRS, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude", -1, &a->witsml14__cs_USCORElocation::latitude, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude", -1, &a->witsml14__cs_USCORElocation::longitude, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:easting", -1, &a->witsml14__cs_USCORElocation::easting, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:northing", -1, &a->witsml14__cs_USCORElocation::northing, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:westing", -1, &a->witsml14__cs_USCORElocation::westing, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:southing", -1, &a->witsml14__cs_USCORElocation::southing, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:projectedX", -1, &a->witsml14__cs_USCORElocation::projectedX, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:projectedY", -1, &a->witsml14__cs_USCORElocation::projectedY, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:localX", -1, &a->witsml14__cs_USCORElocation::localX, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:localY", -1, &a->witsml14__cs_USCORElocation::localY, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:original", -1, &a->witsml14__cs_USCORElocation::original, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__descriptionString(soap, "witsml14:description", -1, &a->witsml14__cs_USCORElocation::description, "witsml14:descriptionString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCORElocation::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCORElocation::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCORElocation(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCORElocation * SOAP_FMAC4 soap_in_witsml14__cs_USCORElocation(struct soap *soap, const char *tag, witsml14__cs_USCORElocation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCORElocation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, sizeof(witsml14__cs_USCORElocation), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCORElocation *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCORElocation*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCORElocation*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_wellCRS1 = 1;
	size_t soap_flag_latitude1 = 1;
	size_t soap_flag_longitude1 = 1;
	size_t soap_flag_easting1 = 1;
	size_t soap_flag_northing1 = 1;
	size_t soap_flag_westing1 = 1;
	size_t soap_flag_southing1 = 1;
	size_t soap_flag_projectedX1 = 1;
	size_t soap_flag_projectedY1 = 1;
	size_t soap_flag_localX1 = 1;
	size_t soap_flag_localY1 = 1;
	size_t soap_flag_original1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wellCRS1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:wellCRS", &a->witsml14__cs_USCORElocation::wellCRS, "witsml14:refNameString"))
				{	soap_flag_wellCRS1--;
					continue;
				}
			}
			if (soap_flag_latitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:latitude", &a->witsml14__cs_USCORElocation::latitude, "witsml14:planeAngleMeasure"))
				{	soap_flag_latitude1--;
					continue;
				}
			}
			if (soap_flag_longitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:longitude", &a->witsml14__cs_USCORElocation::longitude, "witsml14:planeAngleMeasure"))
				{	soap_flag_longitude1--;
					continue;
				}
			}
			if (soap_flag_easting1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:easting", &a->witsml14__cs_USCORElocation::easting, "witsml14:lengthMeasure"))
				{	soap_flag_easting1--;
					continue;
				}
			}
			if (soap_flag_northing1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:northing", &a->witsml14__cs_USCORElocation::northing, "witsml14:lengthMeasure"))
				{	soap_flag_northing1--;
					continue;
				}
			}
			if (soap_flag_westing1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:westing", &a->witsml14__cs_USCORElocation::westing, "witsml14:lengthMeasure"))
				{	soap_flag_westing1--;
					continue;
				}
			}
			if (soap_flag_southing1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:southing", &a->witsml14__cs_USCORElocation::southing, "witsml14:lengthMeasure"))
				{	soap_flag_southing1--;
					continue;
				}
			}
			if (soap_flag_projectedX1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:projectedX", &a->witsml14__cs_USCORElocation::projectedX, "witsml14:lengthMeasure"))
				{	soap_flag_projectedX1--;
					continue;
				}
			}
			if (soap_flag_projectedY1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:projectedY", &a->witsml14__cs_USCORElocation::projectedY, "witsml14:lengthMeasure"))
				{	soap_flag_projectedY1--;
					continue;
				}
			}
			if (soap_flag_localX1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:localX", &a->witsml14__cs_USCORElocation::localX, "witsml14:lengthMeasure"))
				{	soap_flag_localX1--;
					continue;
				}
			}
			if (soap_flag_localY1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:localY", &a->witsml14__cs_USCORElocation::localY, "witsml14:lengthMeasure"))
				{	soap_flag_localY1--;
					continue;
				}
			}
			if (soap_flag_original1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:original", &a->witsml14__cs_USCORElocation::original, "witsml14:logicalBoolean"))
				{	soap_flag_original1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__descriptionString(soap, "witsml14:description", &a->witsml14__cs_USCORElocation::description, "witsml14:descriptionString"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCORElocation::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCORElocation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, sizeof(witsml14__cs_USCORElocation), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCORElocation * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCORElocation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCORElocation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCORElocation *p;
	size_t k = sizeof(witsml14__cs_USCORElocation);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCORElocation);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCORElocation, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCORElocation location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCORElocation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCORElocation(soap, tag ? tag : "witsml14:cs_location", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCORElocation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCORElocation(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCORElocation * SOAP_FMAC4 soap_get_witsml14__cs_USCORElocation(struct soap *soap, witsml14__cs_USCORElocation *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCORElocation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREdocumentEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentEvent::eventDate);
	this->witsml14__cs_USCOREdocumentEvent::eventType = NULL;
	this->witsml14__cs_USCOREdocumentEvent::responsibleParty = NULL;
	this->witsml14__cs_USCOREdocumentEvent::comment = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREdocumentEvent::extensionNameValue);
	this->witsml14__cs_USCOREdocumentEvent::uid = NULL;
}

void witsml14__cs_USCOREdocumentEvent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCOREdocumentEvent::eventDate, SOAP_TYPE_witsml14__timestamp);
	soap_serialize_witsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentEvent::eventDate);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREdocumentEvent::eventType);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREdocumentEvent::responsibleParty);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREdocumentEvent::comment);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREdocumentEvent::extensionNameValue);
#endif
}

int witsml14__cs_USCOREdocumentEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREdocumentEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREdocumentEvent *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_documentEvent";
	if (((witsml14__cs_USCOREdocumentEvent*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREdocumentEvent*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent), type))
		return soap->error;
	if (soap_out_witsml14__timestamp(soap, "witsml14:eventDate", -1, &a->witsml14__cs_USCOREdocumentEvent::eventDate, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:eventType", -1, &a->witsml14__cs_USCOREdocumentEvent::eventType, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:responsibleParty", -1, &a->witsml14__cs_USCOREdocumentEvent::responsibleParty, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comment", -1, &a->witsml14__cs_USCOREdocumentEvent::comment, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREdocumentEvent::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREdocumentEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREdocumentEvent(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentEvent * SOAP_FMAC4 soap_in_witsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREdocumentEvent*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, sizeof(witsml14__cs_USCOREdocumentEvent), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREdocumentEvent *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREdocumentEvent*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREdocumentEvent*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_eventDate1 = 1;
	size_t soap_flag_eventType1 = 1;
	size_t soap_flag_responsibleParty1 = 1;
	size_t soap_flag_comment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_witsml14__timestamp(soap, "witsml14:eventDate", &a->witsml14__cs_USCOREdocumentEvent::eventDate, "witsml14:timestamp"))
				{	soap_flag_eventDate1--;
					continue;
				}
			}
			if (soap_flag_eventType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:eventType", &a->witsml14__cs_USCOREdocumentEvent::eventType, "witsml14:nameString"))
				{	soap_flag_eventType1--;
					continue;
				}
			}
			if (soap_flag_responsibleParty1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:responsibleParty", &a->witsml14__cs_USCOREdocumentEvent::responsibleParty, "witsml14:nameString"))
				{	soap_flag_responsibleParty1--;
					continue;
				}
			}
			if (soap_flag_comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comment", &a->witsml14__cs_USCOREdocumentEvent::comment, "witsml14:commentString"))
				{	soap_flag_comment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREdocumentEvent::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_eventDate1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREdocumentEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, sizeof(witsml14__cs_USCOREdocumentEvent), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREdocumentEvent * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREdocumentEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREdocumentEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREdocumentEvent *p;
	size_t k = sizeof(witsml14__cs_USCOREdocumentEvent);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREdocumentEvent);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREdocumentEvent, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREdocumentEvent location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREdocumentEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREdocumentEvent(soap, tag ? tag : "witsml14:cs_documentEvent", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREdocumentEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREdocumentEvent(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentEvent * SOAP_FMAC4 soap_get_witsml14__cs_USCOREdocumentEvent(struct soap *soap, witsml14__cs_USCOREdocumentEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREdocumentEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREdocumentAudit::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap, &this->witsml14__cs_USCOREdocumentAudit::event);
}

void witsml14__cs_USCOREdocumentAudit::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap, &this->witsml14__cs_USCOREdocumentAudit::event);
#endif
}

int witsml14__cs_USCOREdocumentAudit::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREdocumentAudit(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREdocumentAudit(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREdocumentAudit *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_documentAudit";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap, "witsml14:event", -1, &a->witsml14__cs_USCOREdocumentAudit::event, "witsml14:cs_documentEvent"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREdocumentAudit::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREdocumentAudit(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentAudit * SOAP_FMAC4 soap_in_witsml14__cs_USCOREdocumentAudit(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentAudit *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREdocumentAudit*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, sizeof(witsml14__cs_USCOREdocumentAudit), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREdocumentAudit *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap, "witsml14:event", &a->witsml14__cs_USCOREdocumentAudit::event, "witsml14:cs_documentEvent"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((a->witsml14__cs_USCOREdocumentAudit::event.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREdocumentAudit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, sizeof(witsml14__cs_USCOREdocumentAudit), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREdocumentAudit * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREdocumentAudit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREdocumentAudit(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREdocumentAudit *p;
	size_t k = sizeof(witsml14__cs_USCOREdocumentAudit);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREdocumentAudit);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREdocumentAudit, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREdocumentAudit location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREdocumentAudit::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREdocumentAudit(soap, tag ? tag : "witsml14:cs_documentAudit", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREdocumentAudit::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREdocumentAudit(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentAudit * SOAP_FMAC4 soap_get_witsml14__cs_USCOREdocumentAudit(struct soap *soap, witsml14__cs_USCOREdocumentAudit *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREdocumentAudit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREextensionNameValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__ExtensionName(soap, &this->witsml14__cs_USCOREextensionNameValue::name);
	this->witsml14__cs_USCOREextensionNameValue::value = NULL;
	soap_default_witsml14__PrimitiveType(soap, &this->witsml14__cs_USCOREextensionNameValue::dataType);
	this->witsml14__cs_USCOREextensionNameValue::dTim = NULL;
	this->witsml14__cs_USCOREextensionNameValue::md = NULL;
	this->witsml14__cs_USCOREextensionNameValue::index = NULL;
	this->witsml14__cs_USCOREextensionNameValue::measureClass = NULL;
	this->witsml14__cs_USCOREextensionNameValue::description = NULL;
	this->witsml14__cs_USCOREextensionNameValue::uid = NULL;
}

void witsml14__cs_USCOREextensionNameValue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__ExtensionName(soap, &this->witsml14__cs_USCOREextensionNameValue::name);
	soap_serialize_PointerTowitsml14__extensionvalue(soap, &this->witsml14__cs_USCOREextensionNameValue::value);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREextensionNameValue::dTim);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &this->witsml14__cs_USCOREextensionNameValue::md);
	soap_serialize_PointerTowitsml14__positiveCount(soap, &this->witsml14__cs_USCOREextensionNameValue::index);
	soap_serialize_PointerTowitsml14__MeasureClass(soap, &this->witsml14__cs_USCOREextensionNameValue::measureClass);
	soap_serialize_PointerTowitsml14__descriptionString(soap, &this->witsml14__cs_USCOREextensionNameValue::description);
#endif
}

int witsml14__cs_USCOREextensionNameValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREextensionNameValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREextensionNameValue *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_extensionNameValue";
	if (((witsml14__cs_USCOREextensionNameValue*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREextensionNameValue*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue), type))
		return soap->error;
	if (soap_out_witsml14__ExtensionName(soap, "witsml14:name", -1, &a->witsml14__cs_USCOREextensionNameValue::name, "witsml14:ExtensionName"))
		return soap->error;
	if (!a->witsml14__cs_USCOREextensionNameValue::value)
	{	if (soap_element_empty(soap, "witsml14:value", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__extensionvalue(soap, "witsml14:value", -1, &a->witsml14__cs_USCOREextensionNameValue::value, "witsml14:extensionvalue"))
		return soap->error;
	if (soap_out_witsml14__PrimitiveType(soap, "witsml14:dataType", -1, &a->witsml14__cs_USCOREextensionNameValue::dataType, "witsml14:PrimitiveType"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTim", -1, &a->witsml14__cs_USCOREextensionNameValue::dTim, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", -1, &a->witsml14__cs_USCOREextensionNameValue::md, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__positiveCount(soap, "witsml14:index", -1, &a->witsml14__cs_USCOREextensionNameValue::index, "witsml14:positiveCount"))
		return soap->error;
	if (soap_out_PointerTowitsml14__MeasureClass(soap, "witsml14:measureClass", -1, &a->witsml14__cs_USCOREextensionNameValue::measureClass, "witsml14:MeasureClass"))
		return soap->error;
	if (soap_out_PointerTowitsml14__descriptionString(soap, "witsml14:description", -1, &a->witsml14__cs_USCOREextensionNameValue::description, "witsml14:descriptionString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREextensionNameValue::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREextensionNameValue(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionNameValue * SOAP_FMAC4 soap_in_witsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, witsml14__cs_USCOREextensionNameValue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREextensionNameValue*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, sizeof(witsml14__cs_USCOREextensionNameValue), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREextensionNameValue *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREextensionNameValue*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREextensionNameValue*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_value1 = 1;
	size_t soap_flag_dataType1 = 1;
	size_t soap_flag_dTim1 = 1;
	size_t soap_flag_md1 = 1;
	size_t soap_flag_index1 = 1;
	size_t soap_flag_measureClass1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__ExtensionName(soap, "witsml14:name", &a->witsml14__cs_USCOREextensionNameValue::name, "witsml14:ExtensionName"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__extensionvalue(soap, "witsml14:value", &a->witsml14__cs_USCOREextensionNameValue::value, "witsml14:extensionvalue"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap_flag_dataType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_witsml14__PrimitiveType(soap, "witsml14:dataType", &a->witsml14__cs_USCOREextensionNameValue::dataType, "witsml14:PrimitiveType"))
				{	soap_flag_dataType1--;
					continue;
				}
			}
			if (soap_flag_dTim1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTim", &a->witsml14__cs_USCOREextensionNameValue::dTim, "witsml14:timestamp"))
				{	soap_flag_dTim1--;
					continue;
				}
			}
			if (soap_flag_md1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", &a->witsml14__cs_USCOREextensionNameValue::md, "witsml14:measuredDepthCoord"))
				{	soap_flag_md1--;
					continue;
				}
			}
			if (soap_flag_index1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__positiveCount(soap, "witsml14:index", &a->witsml14__cs_USCOREextensionNameValue::index, "witsml14:positiveCount"))
				{	soap_flag_index1--;
					continue;
				}
			}
			if (soap_flag_measureClass1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__MeasureClass(soap, "witsml14:measureClass", &a->witsml14__cs_USCOREextensionNameValue::measureClass, "witsml14:MeasureClass"))
				{	soap_flag_measureClass1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__descriptionString(soap, "witsml14:description", &a->witsml14__cs_USCOREextensionNameValue::description, "witsml14:descriptionString"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_name1 > 0 || !a->witsml14__cs_USCOREextensionNameValue::value || soap_flag_dataType1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREextensionNameValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, sizeof(witsml14__cs_USCOREextensionNameValue), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREextensionNameValue * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREextensionNameValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREextensionNameValue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREextensionNameValue *p;
	size_t k = sizeof(witsml14__cs_USCOREextensionNameValue);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREextensionNameValue);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREextensionNameValue, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREextensionNameValue location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREextensionNameValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREextensionNameValue(soap, tag ? tag : "witsml14:cs_extensionNameValue", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREextensionNameValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREextensionNameValue(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionNameValue * SOAP_FMAC4 soap_get_witsml14__cs_USCOREextensionNameValue(struct soap *soap, witsml14__cs_USCOREextensionNameValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREextensionNameValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREdocumentSecurityInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREdocumentSecurityInfo::class_ = NULL;
	this->witsml14__cs_USCOREdocumentSecurityInfo::securitySystem = NULL;
	this->witsml14__cs_USCOREdocumentSecurityInfo::endDate = NULL;
	this->witsml14__cs_USCOREdocumentSecurityInfo::comment = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::extensionNameValue);
	this->witsml14__cs_USCOREdocumentSecurityInfo::uid = NULL;
}

void witsml14__cs_USCOREdocumentSecurityInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__kindString(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::class_);
	soap_serialize_PointerTowitsml14__kindString(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::securitySystem);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::endDate);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::comment);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, &this->witsml14__cs_USCOREdocumentSecurityInfo::extensionNameValue);
#endif
}

int witsml14__cs_USCOREdocumentSecurityInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREdocumentSecurityInfo *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_documentSecurityInfo";
	if (((witsml14__cs_USCOREdocumentSecurityInfo*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__cs_USCOREdocumentSecurityInfo*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo), type))
		return soap->error;
	if (soap_out_PointerTowitsml14__kindString(soap, "witsml14:class", -1, &a->witsml14__cs_USCOREdocumentSecurityInfo::class_, "witsml14:kindString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__kindString(soap, "witsml14:securitySystem", -1, &a->witsml14__cs_USCOREdocumentSecurityInfo::securitySystem, "witsml14:kindString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:endDate", -1, &a->witsml14__cs_USCOREdocumentSecurityInfo::endDate, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comment", -1, &a->witsml14__cs_USCOREdocumentSecurityInfo::comment, "witsml14:commentString"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", -1, &a->witsml14__cs_USCOREdocumentSecurityInfo::extensionNameValue, "witsml14:cs_extensionNameValue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREdocumentSecurityInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentSecurityInfo * SOAP_FMAC4 soap_in_witsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentSecurityInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREdocumentSecurityInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, sizeof(witsml14__cs_USCOREdocumentSecurityInfo), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREdocumentSecurityInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__cs_USCOREdocumentSecurityInfo*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__cs_USCOREdocumentSecurityInfo*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_class_1 = 1;
	size_t soap_flag_securitySystem1 = 1;
	size_t soap_flag_endDate1 = 1;
	size_t soap_flag_comment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_class_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__kindString(soap, "witsml14:class", &a->witsml14__cs_USCOREdocumentSecurityInfo::class_, "witsml14:kindString"))
				{	soap_flag_class_1--;
					continue;
				}
			}
			if (soap_flag_securitySystem1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__kindString(soap, "witsml14:securitySystem", &a->witsml14__cs_USCOREdocumentSecurityInfo::securitySystem, "witsml14:kindString"))
				{	soap_flag_securitySystem1--;
					continue;
				}
			}
			if (soap_flag_endDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:endDate", &a->witsml14__cs_USCOREdocumentSecurityInfo::endDate, "witsml14:timestamp"))
				{	soap_flag_endDate1--;
					continue;
				}
			}
			if (soap_flag_comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comment", &a->witsml14__cs_USCOREdocumentSecurityInfo::comment, "witsml14:commentString"))
				{	soap_flag_comment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap, "witsml14:extensionNameValue", &a->witsml14__cs_USCOREdocumentSecurityInfo::extensionNameValue, "witsml14:cs_extensionNameValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREdocumentSecurityInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, sizeof(witsml14__cs_USCOREdocumentSecurityInfo), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREdocumentSecurityInfo * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREdocumentSecurityInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREdocumentSecurityInfo *p;
	size_t k = sizeof(witsml14__cs_USCOREdocumentSecurityInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREdocumentSecurityInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREdocumentSecurityInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREdocumentSecurityInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREdocumentSecurityInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag ? tag : "witsml14:cs_documentSecurityInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREdocumentSecurityInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREdocumentSecurityInfo(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentSecurityInfo * SOAP_FMAC4 soap_get_witsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, witsml14__cs_USCOREdocumentSecurityInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREdocumentSecurityInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__abstractMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractDouble(soap, &this->witsml14__abstractMeasure::__item);
}

void witsml14__abstractMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int witsml14__abstractMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__abstractMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__abstractMeasure(struct soap *soap, const char *tag, int id, const witsml14__abstractMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:abstractMeasure";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:abstractMeasure");
}

void *witsml14__abstractMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__abstractMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__abstractMeasure * SOAP_FMAC4 soap_in_witsml14__abstractMeasure(struct soap *soap, const char *tag, witsml14__abstractMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__abstractMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure, sizeof(witsml14__abstractMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure)
		return (witsml14__abstractMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:abstractMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__abstractMeasure * SOAP_FMAC2 soap_instantiate_witsml14__abstractMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__abstractMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "witsml14:yAxisAzimuth"))
		return soap_instantiate_witsml14__yAxisAzimuth(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:volumePerVolumeMeasurePercent"))
		return soap_instantiate_witsml14__volumePerVolumeMeasurePercent(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:measureOrQuantity"))
		return soap_instantiate_witsml14__measureOrQuantity(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:genericMeasure"))
		return soap_instantiate_witsml14__genericMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:ratioGenericMeasure"))
		return soap_instantiate_witsml14__ratioGenericMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:measuredDepthCoord"))
		return soap_instantiate_witsml14__measuredDepthCoord(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:wellVerticalDepthCoord"))
		return soap_instantiate_witsml14__wellVerticalDepthCoord(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:wellElevationCoord"))
		return soap_instantiate_witsml14__wellElevationCoord(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:footageNorthSouth"))
		return soap_instantiate_witsml14__footageNorthSouth(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:footageEastWest"))
		return soap_instantiate_witsml14__footageEastWest(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:accelerationLinearMeasure"))
		return soap_instantiate_witsml14__accelerationLinearMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:anglePerLengthMeasure"))
		return soap_instantiate_witsml14__anglePerLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:anglePerTimeMeasure"))
		return soap_instantiate_witsml14__anglePerTimeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:areaMeasure"))
		return soap_instantiate_witsml14__areaMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:areaPerAreaMeasure"))
		return soap_instantiate_witsml14__areaPerAreaMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:compressibilityMeasure"))
		return soap_instantiate_witsml14__compressibilityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:densityMeasure"))
		return soap_instantiate_witsml14__densityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:dimensionlessMeasure"))
		return soap_instantiate_witsml14__dimensionlessMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:dynamicViscosityMeasure"))
		return soap_instantiate_witsml14__dynamicViscosityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:electricCurrentMeasure"))
		return soap_instantiate_witsml14__electricCurrentMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:electricPotentialMeasure"))
		return soap_instantiate_witsml14__electricPotentialMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:equivalentPerMassMeasure"))
		return soap_instantiate_witsml14__equivalentPerMassMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:forceMeasure"))
		return soap_instantiate_witsml14__forceMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:forcePerLengthMeasure"))
		return soap_instantiate_witsml14__forcePerLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:forcePerVolumeMeasure"))
		return soap_instantiate_witsml14__forcePerVolumeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:illuminanceMeasure"))
		return soap_instantiate_witsml14__illuminanceMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:lengthMeasure"))
		return soap_instantiate_witsml14__lengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:lengthPerLengthMeasure"))
		return soap_instantiate_witsml14__lengthPerLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:magneticInductionMeasure"))
		return soap_instantiate_witsml14__magneticInductionMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:massConcentrationMeasure"))
		return soap_instantiate_witsml14__massConcentrationMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:massMeasure"))
		return soap_instantiate_witsml14__massMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:massPerLengthMeasure"))
		return soap_instantiate_witsml14__massPerLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:momentOfForceMeasure"))
		return soap_instantiate_witsml14__momentOfForceMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:perLengthMeasure"))
		return soap_instantiate_witsml14__perLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:permeabilityRockMeasure"))
		return soap_instantiate_witsml14__permeabilityRockMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:planeAngleMeasure"))
		return soap_instantiate_witsml14__planeAngleMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:powerMeasure"))
		return soap_instantiate_witsml14__powerMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:pressureMeasure"))
		return soap_instantiate_witsml14__pressureMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:relativePowerMeasure"))
		return soap_instantiate_witsml14__relativePowerMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:specificHeatCapacityMeasure"))
		return soap_instantiate_witsml14__specificHeatCapacityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:specificVolumeMeasure"))
		return soap_instantiate_witsml14__specificVolumeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:standardVolumeMeasure"))
		return soap_instantiate_witsml14__standardVolumeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:standardVolumePerTimeMeasure"))
		return soap_instantiate_witsml14__standardVolumePerTimeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:thermalConductivityMeasure"))
		return soap_instantiate_witsml14__thermalConductivityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:thermalVolumetricExpansionMeasure"))
		return soap_instantiate_witsml14__thermalVolumetricExpansionMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:thermodynamicTemperatureMeasure"))
		return soap_instantiate_witsml14__thermodynamicTemperatureMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:timeMeasure"))
		return soap_instantiate_witsml14__timeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:velocityMeasure"))
		return soap_instantiate_witsml14__velocityMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:volumeMeasure"))
		return soap_instantiate_witsml14__volumeMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:volumeFlowRateMeasure"))
		return soap_instantiate_witsml14__volumeFlowRateMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:volumePerLengthMeasure"))
		return soap_instantiate_witsml14__volumePerLengthMeasure(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "witsml14:volumePerVolumeMeasure"))
		return soap_instantiate_witsml14__volumePerVolumeMeasure(soap, n, NULL, NULL, size);
	witsml14__abstractMeasure *p;
	size_t k = sizeof(witsml14__abstractMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__abstractMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__abstractMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__abstractMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__abstractMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__abstractMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__abstractMeasure(soap, tag ? tag : "witsml14:abstractMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__abstractMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__abstractMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__abstractMeasure * SOAP_FMAC4 soap_get_witsml14__abstractMeasure(struct soap *soap, witsml14__abstractMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__abstractMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__volumePerVolumeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__VolumePerVolumeUom(soap, &this->witsml14__volumePerVolumeMeasure::uom);
}

void witsml14__volumePerVolumeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__volumePerVolumeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__volumePerVolumeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__volumePerVolumeMeasure(struct soap *soap, const char *tag, int id, const witsml14__volumePerVolumeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:volumePerVolumeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__VolumePerVolumeUom2s(soap, ((witsml14__volumePerVolumeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerVolumeMeasure");
}

void *witsml14__volumePerVolumeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__volumePerVolumeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__volumePerVolumeMeasure * SOAP_FMAC4 soap_in_witsml14__volumePerVolumeMeasure(struct soap *soap, const char *tag, witsml14__volumePerVolumeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__volumePerVolumeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure, sizeof(witsml14__volumePerVolumeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure)
		return (witsml14__volumePerVolumeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__VolumePerVolumeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__volumePerVolumeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerVolumeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__volumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__volumePerVolumeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__volumePerVolumeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__volumePerVolumeMeasure *p;
	size_t k = sizeof(witsml14__volumePerVolumeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__volumePerVolumeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__volumePerVolumeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__volumePerVolumeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__volumePerVolumeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__volumePerVolumeMeasure(soap, tag ? tag : "witsml14:volumePerVolumeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__volumePerVolumeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__volumePerVolumeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__volumePerVolumeMeasure * SOAP_FMAC4 soap_get_witsml14__volumePerVolumeMeasure(struct soap *soap, witsml14__volumePerVolumeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__volumePerVolumeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__volumePerLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__VolumePerLengthUom(soap, &this->witsml14__volumePerLengthMeasure::uom);
}

void witsml14__volumePerLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__volumePerLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__volumePerLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__volumePerLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__volumePerLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:volumePerLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__VolumePerLengthUom2s(soap, ((witsml14__volumePerLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerLengthMeasure");
}

void *witsml14__volumePerLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__volumePerLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__volumePerLengthMeasure * SOAP_FMAC4 soap_in_witsml14__volumePerLengthMeasure(struct soap *soap, const char *tag, witsml14__volumePerLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__volumePerLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure, sizeof(witsml14__volumePerLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure)
		return (witsml14__volumePerLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__VolumePerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__volumePerLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__volumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__volumePerLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__volumePerLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__volumePerLengthMeasure *p;
	size_t k = sizeof(witsml14__volumePerLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__volumePerLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__volumePerLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__volumePerLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__volumePerLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__volumePerLengthMeasure(soap, tag ? tag : "witsml14:volumePerLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__volumePerLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__volumePerLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__volumePerLengthMeasure * SOAP_FMAC4 soap_get_witsml14__volumePerLengthMeasure(struct soap *soap, witsml14__volumePerLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__volumePerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__volumeFlowRateMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__VolumeFlowRateUom(soap, &this->witsml14__volumeFlowRateMeasure::uom);
}

void witsml14__volumeFlowRateMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__volumeFlowRateMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__volumeFlowRateMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__volumeFlowRateMeasure(struct soap *soap, const char *tag, int id, const witsml14__volumeFlowRateMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:volumeFlowRateMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__VolumeFlowRateUom2s(soap, ((witsml14__volumeFlowRateMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:volumeFlowRateMeasure");
}

void *witsml14__volumeFlowRateMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__volumeFlowRateMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__volumeFlowRateMeasure * SOAP_FMAC4 soap_in_witsml14__volumeFlowRateMeasure(struct soap *soap, const char *tag, witsml14__volumeFlowRateMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__volumeFlowRateMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure, sizeof(witsml14__volumeFlowRateMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure)
		return (witsml14__volumeFlowRateMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__VolumeFlowRateUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__volumeFlowRateMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:volumeFlowRateMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__volumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_witsml14__volumeFlowRateMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__volumeFlowRateMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__volumeFlowRateMeasure *p;
	size_t k = sizeof(witsml14__volumeFlowRateMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeFlowRateMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__volumeFlowRateMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__volumeFlowRateMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__volumeFlowRateMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__volumeFlowRateMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__volumeFlowRateMeasure(soap, tag ? tag : "witsml14:volumeFlowRateMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__volumeFlowRateMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__volumeFlowRateMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__volumeFlowRateMeasure * SOAP_FMAC4 soap_get_witsml14__volumeFlowRateMeasure(struct soap *soap, witsml14__volumeFlowRateMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__volumeFlowRateMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__volumeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__VolumeUom(soap, &this->witsml14__volumeMeasure::uom);
}

void witsml14__volumeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__volumeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__volumeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__volumeMeasure(struct soap *soap, const char *tag, int id, const witsml14__volumeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:volumeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__VolumeUom2s(soap, ((witsml14__volumeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:volumeMeasure");
}

void *witsml14__volumeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__volumeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__volumeMeasure * SOAP_FMAC4 soap_in_witsml14__volumeMeasure(struct soap *soap, const char *tag, witsml14__volumeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__volumeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure, sizeof(witsml14__volumeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure)
		return (witsml14__volumeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__VolumeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__volumeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:volumeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__volumeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__volumeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__volumeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__volumeMeasure *p;
	size_t k = sizeof(witsml14__volumeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__volumeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__volumeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__volumeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__volumeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__volumeMeasure(soap, tag ? tag : "witsml14:volumeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__volumeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__volumeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__volumeMeasure * SOAP_FMAC4 soap_get_witsml14__volumeMeasure(struct soap *soap, witsml14__volumeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__volumeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__velocityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__VelocityUom(soap, &this->witsml14__velocityMeasure::uom);
}

void witsml14__velocityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__velocityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__velocityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__velocityMeasure(struct soap *soap, const char *tag, int id, const witsml14__velocityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:velocityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__VelocityUom2s(soap, ((witsml14__velocityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:velocityMeasure");
}

void *witsml14__velocityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__velocityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__velocityMeasure * SOAP_FMAC4 soap_in_witsml14__velocityMeasure(struct soap *soap, const char *tag, witsml14__velocityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__velocityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure, sizeof(witsml14__velocityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure)
		return (witsml14__velocityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__VelocityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__velocityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:velocityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__velocityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__velocityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__velocityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__velocityMeasure *p;
	size_t k = sizeof(witsml14__velocityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__velocityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__velocityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__velocityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__velocityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__velocityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__velocityMeasure(soap, tag ? tag : "witsml14:velocityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__velocityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__velocityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__velocityMeasure * SOAP_FMAC4 soap_get_witsml14__velocityMeasure(struct soap *soap, witsml14__velocityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__velocityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__timeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__TimeUom(soap, &this->witsml14__timeMeasure::uom);
}

void witsml14__timeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__timeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__timeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__timeMeasure(struct soap *soap, const char *tag, int id, const witsml14__timeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:timeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__TimeUom2s(soap, ((witsml14__timeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:timeMeasure");
}

void *witsml14__timeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__timeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__timeMeasure * SOAP_FMAC4 soap_in_witsml14__timeMeasure(struct soap *soap, const char *tag, witsml14__timeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__timeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure, sizeof(witsml14__timeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure)
		return (witsml14__timeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__TimeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__timeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:timeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__timeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__timeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__timeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__timeMeasure *p;
	size_t k = sizeof(witsml14__timeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__timeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__timeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__timeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__timeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__timeMeasure(soap, tag ? tag : "witsml14:timeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__timeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__timeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__timeMeasure * SOAP_FMAC4 soap_get_witsml14__timeMeasure(struct soap *soap, witsml14__timeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__timeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__thermodynamicTemperatureMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ThermodynamicTemperatureUom(soap, &this->witsml14__thermodynamicTemperatureMeasure::uom);
}

void witsml14__thermodynamicTemperatureMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__thermodynamicTemperatureMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__thermodynamicTemperatureMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__thermodynamicTemperatureMeasure(struct soap *soap, const char *tag, int id, const witsml14__thermodynamicTemperatureMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:thermodynamicTemperatureMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ThermodynamicTemperatureUom2s(soap, ((witsml14__thermodynamicTemperatureMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:thermodynamicTemperatureMeasure");
}

void *witsml14__thermodynamicTemperatureMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__thermodynamicTemperatureMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__thermodynamicTemperatureMeasure * SOAP_FMAC4 soap_in_witsml14__thermodynamicTemperatureMeasure(struct soap *soap, const char *tag, witsml14__thermodynamicTemperatureMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__thermodynamicTemperatureMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure, sizeof(witsml14__thermodynamicTemperatureMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure)
		return (witsml14__thermodynamicTemperatureMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ThermodynamicTemperatureUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__thermodynamicTemperatureMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:thermodynamicTemperatureMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__thermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_witsml14__thermodynamicTemperatureMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__thermodynamicTemperatureMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__thermodynamicTemperatureMeasure *p;
	size_t k = sizeof(witsml14__thermodynamicTemperatureMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermodynamicTemperatureMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__thermodynamicTemperatureMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__thermodynamicTemperatureMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__thermodynamicTemperatureMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__thermodynamicTemperatureMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__thermodynamicTemperatureMeasure(soap, tag ? tag : "witsml14:thermodynamicTemperatureMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__thermodynamicTemperatureMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__thermodynamicTemperatureMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__thermodynamicTemperatureMeasure * SOAP_FMAC4 soap_get_witsml14__thermodynamicTemperatureMeasure(struct soap *soap, witsml14__thermodynamicTemperatureMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__thermodynamicTemperatureMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__thermalVolumetricExpansionMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ThermalVolumetricExpansionUom(soap, &this->witsml14__thermalVolumetricExpansionMeasure::uom);
}

void witsml14__thermalVolumetricExpansionMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__thermalVolumetricExpansionMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__thermalVolumetricExpansionMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__thermalVolumetricExpansionMeasure(struct soap *soap, const char *tag, int id, const witsml14__thermalVolumetricExpansionMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:thermalVolumetricExpansionMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ThermalVolumetricExpansionUom2s(soap, ((witsml14__thermalVolumetricExpansionMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:thermalVolumetricExpansionMeasure");
}

void *witsml14__thermalVolumetricExpansionMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__thermalVolumetricExpansionMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__thermalVolumetricExpansionMeasure * SOAP_FMAC4 soap_in_witsml14__thermalVolumetricExpansionMeasure(struct soap *soap, const char *tag, witsml14__thermalVolumetricExpansionMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__thermalVolumetricExpansionMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure, sizeof(witsml14__thermalVolumetricExpansionMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure)
		return (witsml14__thermalVolumetricExpansionMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ThermalVolumetricExpansionUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__thermalVolumetricExpansionMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:thermalVolumetricExpansionMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__thermalVolumetricExpansionMeasure * SOAP_FMAC2 soap_instantiate_witsml14__thermalVolumetricExpansionMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__thermalVolumetricExpansionMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__thermalVolumetricExpansionMeasure *p;
	size_t k = sizeof(witsml14__thermalVolumetricExpansionMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalVolumetricExpansionMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__thermalVolumetricExpansionMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__thermalVolumetricExpansionMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__thermalVolumetricExpansionMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__thermalVolumetricExpansionMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__thermalVolumetricExpansionMeasure(soap, tag ? tag : "witsml14:thermalVolumetricExpansionMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__thermalVolumetricExpansionMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__thermalVolumetricExpansionMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__thermalVolumetricExpansionMeasure * SOAP_FMAC4 soap_get_witsml14__thermalVolumetricExpansionMeasure(struct soap *soap, witsml14__thermalVolumetricExpansionMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__thermalVolumetricExpansionMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__thermalConductivityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ThermalConductivityUom(soap, &this->witsml14__thermalConductivityMeasure::uom);
}

void witsml14__thermalConductivityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__thermalConductivityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__thermalConductivityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__thermalConductivityMeasure(struct soap *soap, const char *tag, int id, const witsml14__thermalConductivityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:thermalConductivityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ThermalConductivityUom2s(soap, ((witsml14__thermalConductivityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:thermalConductivityMeasure");
}

void *witsml14__thermalConductivityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__thermalConductivityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__thermalConductivityMeasure * SOAP_FMAC4 soap_in_witsml14__thermalConductivityMeasure(struct soap *soap, const char *tag, witsml14__thermalConductivityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__thermalConductivityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure, sizeof(witsml14__thermalConductivityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure)
		return (witsml14__thermalConductivityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ThermalConductivityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__thermalConductivityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:thermalConductivityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__thermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__thermalConductivityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__thermalConductivityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__thermalConductivityMeasure *p;
	size_t k = sizeof(witsml14__thermalConductivityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__thermalConductivityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__thermalConductivityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__thermalConductivityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__thermalConductivityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__thermalConductivityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__thermalConductivityMeasure(soap, tag ? tag : "witsml14:thermalConductivityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__thermalConductivityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__thermalConductivityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__thermalConductivityMeasure * SOAP_FMAC4 soap_get_witsml14__thermalConductivityMeasure(struct soap *soap, witsml14__thermalConductivityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__thermalConductivityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__standardVolumePerTimeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__StandardVolumePerTimeUom(soap, &this->witsml14__standardVolumePerTimeMeasure::uom);
}

void witsml14__standardVolumePerTimeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__standardVolumePerTimeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__standardVolumePerTimeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__standardVolumePerTimeMeasure(struct soap *soap, const char *tag, int id, const witsml14__standardVolumePerTimeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:standardVolumePerTimeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__StandardVolumePerTimeUom2s(soap, ((witsml14__standardVolumePerTimeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:standardVolumePerTimeMeasure");
}

void *witsml14__standardVolumePerTimeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__standardVolumePerTimeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__standardVolumePerTimeMeasure * SOAP_FMAC4 soap_in_witsml14__standardVolumePerTimeMeasure(struct soap *soap, const char *tag, witsml14__standardVolumePerTimeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__standardVolumePerTimeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure, sizeof(witsml14__standardVolumePerTimeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure)
		return (witsml14__standardVolumePerTimeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__StandardVolumePerTimeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__standardVolumePerTimeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:standardVolumePerTimeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__standardVolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__standardVolumePerTimeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__standardVolumePerTimeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__standardVolumePerTimeMeasure *p;
	size_t k = sizeof(witsml14__standardVolumePerTimeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumePerTimeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__standardVolumePerTimeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__standardVolumePerTimeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__standardVolumePerTimeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__standardVolumePerTimeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__standardVolumePerTimeMeasure(soap, tag ? tag : "witsml14:standardVolumePerTimeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__standardVolumePerTimeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__standardVolumePerTimeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__standardVolumePerTimeMeasure * SOAP_FMAC4 soap_get_witsml14__standardVolumePerTimeMeasure(struct soap *soap, witsml14__standardVolumePerTimeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__standardVolumePerTimeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__standardVolumeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__StandardVolumeUom(soap, &this->witsml14__standardVolumeMeasure::uom);
}

void witsml14__standardVolumeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__standardVolumeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__standardVolumeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__standardVolumeMeasure(struct soap *soap, const char *tag, int id, const witsml14__standardVolumeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:standardVolumeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__StandardVolumeUom2s(soap, ((witsml14__standardVolumeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:standardVolumeMeasure");
}

void *witsml14__standardVolumeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__standardVolumeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__standardVolumeMeasure * SOAP_FMAC4 soap_in_witsml14__standardVolumeMeasure(struct soap *soap, const char *tag, witsml14__standardVolumeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__standardVolumeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure, sizeof(witsml14__standardVolumeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure)
		return (witsml14__standardVolumeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__StandardVolumeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__standardVolumeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:standardVolumeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__standardVolumeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__standardVolumeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__standardVolumeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__standardVolumeMeasure *p;
	size_t k = sizeof(witsml14__standardVolumeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__standardVolumeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__standardVolumeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__standardVolumeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__standardVolumeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__standardVolumeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__standardVolumeMeasure(soap, tag ? tag : "witsml14:standardVolumeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__standardVolumeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__standardVolumeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__standardVolumeMeasure * SOAP_FMAC4 soap_get_witsml14__standardVolumeMeasure(struct soap *soap, witsml14__standardVolumeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__standardVolumeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__specificVolumeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__SpecificVolumeUom(soap, &this->witsml14__specificVolumeMeasure::uom);
}

void witsml14__specificVolumeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__specificVolumeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__specificVolumeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__specificVolumeMeasure(struct soap *soap, const char *tag, int id, const witsml14__specificVolumeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:specificVolumeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__SpecificVolumeUom2s(soap, ((witsml14__specificVolumeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:specificVolumeMeasure");
}

void *witsml14__specificVolumeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__specificVolumeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__specificVolumeMeasure * SOAP_FMAC4 soap_in_witsml14__specificVolumeMeasure(struct soap *soap, const char *tag, witsml14__specificVolumeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__specificVolumeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure, sizeof(witsml14__specificVolumeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure)
		return (witsml14__specificVolumeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__SpecificVolumeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__specificVolumeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:specificVolumeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__specificVolumeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__specificVolumeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__specificVolumeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__specificVolumeMeasure *p;
	size_t k = sizeof(witsml14__specificVolumeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__specificVolumeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__specificVolumeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__specificVolumeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__specificVolumeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__specificVolumeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__specificVolumeMeasure(soap, tag ? tag : "witsml14:specificVolumeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__specificVolumeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__specificVolumeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__specificVolumeMeasure * SOAP_FMAC4 soap_get_witsml14__specificVolumeMeasure(struct soap *soap, witsml14__specificVolumeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__specificVolumeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__specificHeatCapacityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__SpecificHeatCapacityUom(soap, &this->witsml14__specificHeatCapacityMeasure::uom);
}

void witsml14__specificHeatCapacityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__specificHeatCapacityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__specificHeatCapacityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__specificHeatCapacityMeasure(struct soap *soap, const char *tag, int id, const witsml14__specificHeatCapacityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:specificHeatCapacityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__SpecificHeatCapacityUom2s(soap, ((witsml14__specificHeatCapacityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:specificHeatCapacityMeasure");
}

void *witsml14__specificHeatCapacityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__specificHeatCapacityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__specificHeatCapacityMeasure * SOAP_FMAC4 soap_in_witsml14__specificHeatCapacityMeasure(struct soap *soap, const char *tag, witsml14__specificHeatCapacityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__specificHeatCapacityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure, sizeof(witsml14__specificHeatCapacityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure)
		return (witsml14__specificHeatCapacityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__SpecificHeatCapacityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__specificHeatCapacityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:specificHeatCapacityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__specificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__specificHeatCapacityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__specificHeatCapacityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__specificHeatCapacityMeasure *p;
	size_t k = sizeof(witsml14__specificHeatCapacityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__specificHeatCapacityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__specificHeatCapacityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__specificHeatCapacityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__specificHeatCapacityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__specificHeatCapacityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__specificHeatCapacityMeasure(soap, tag ? tag : "witsml14:specificHeatCapacityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__specificHeatCapacityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__specificHeatCapacityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__specificHeatCapacityMeasure * SOAP_FMAC4 soap_get_witsml14__specificHeatCapacityMeasure(struct soap *soap, witsml14__specificHeatCapacityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__specificHeatCapacityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__relativePowerMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__RelativePowerUom(soap, &this->witsml14__relativePowerMeasure::uom);
}

void witsml14__relativePowerMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__relativePowerMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__relativePowerMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__relativePowerMeasure(struct soap *soap, const char *tag, int id, const witsml14__relativePowerMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:relativePowerMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__RelativePowerUom2s(soap, ((witsml14__relativePowerMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:relativePowerMeasure");
}

void *witsml14__relativePowerMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__relativePowerMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__relativePowerMeasure * SOAP_FMAC4 soap_in_witsml14__relativePowerMeasure(struct soap *soap, const char *tag, witsml14__relativePowerMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__relativePowerMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure, sizeof(witsml14__relativePowerMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure)
		return (witsml14__relativePowerMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__RelativePowerUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__relativePowerMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:relativePowerMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__relativePowerMeasure * SOAP_FMAC2 soap_instantiate_witsml14__relativePowerMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__relativePowerMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__relativePowerMeasure *p;
	size_t k = sizeof(witsml14__relativePowerMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__relativePowerMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__relativePowerMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__relativePowerMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__relativePowerMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__relativePowerMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__relativePowerMeasure(soap, tag ? tag : "witsml14:relativePowerMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__relativePowerMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__relativePowerMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__relativePowerMeasure * SOAP_FMAC4 soap_get_witsml14__relativePowerMeasure(struct soap *soap, witsml14__relativePowerMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__relativePowerMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__pressureMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PressureUom(soap, &this->witsml14__pressureMeasure::uom);
}

void witsml14__pressureMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__pressureMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__pressureMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__pressureMeasure(struct soap *soap, const char *tag, int id, const witsml14__pressureMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:pressureMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__PressureUom2s(soap, ((witsml14__pressureMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:pressureMeasure");
}

void *witsml14__pressureMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__pressureMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__pressureMeasure * SOAP_FMAC4 soap_in_witsml14__pressureMeasure(struct soap *soap, const char *tag, witsml14__pressureMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__pressureMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure, sizeof(witsml14__pressureMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure)
		return (witsml14__pressureMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PressureUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__pressureMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:pressureMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__pressureMeasure * SOAP_FMAC2 soap_instantiate_witsml14__pressureMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__pressureMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__pressureMeasure *p;
	size_t k = sizeof(witsml14__pressureMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__pressureMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__pressureMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__pressureMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__pressureMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__pressureMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__pressureMeasure(soap, tag ? tag : "witsml14:pressureMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__pressureMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__pressureMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__pressureMeasure * SOAP_FMAC4 soap_get_witsml14__pressureMeasure(struct soap *soap, witsml14__pressureMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__pressureMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__powerMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PowerUom(soap, &this->witsml14__powerMeasure::uom);
}

void witsml14__powerMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__powerMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__powerMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__powerMeasure(struct soap *soap, const char *tag, int id, const witsml14__powerMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:powerMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__PowerUom2s(soap, ((witsml14__powerMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:powerMeasure");
}

void *witsml14__powerMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__powerMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__powerMeasure * SOAP_FMAC4 soap_in_witsml14__powerMeasure(struct soap *soap, const char *tag, witsml14__powerMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__powerMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure, sizeof(witsml14__powerMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure)
		return (witsml14__powerMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PowerUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__powerMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:powerMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__powerMeasure * SOAP_FMAC2 soap_instantiate_witsml14__powerMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__powerMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__powerMeasure *p;
	size_t k = sizeof(witsml14__powerMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__powerMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__powerMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__powerMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__powerMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__powerMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__powerMeasure(soap, tag ? tag : "witsml14:powerMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__powerMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__powerMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__powerMeasure * SOAP_FMAC4 soap_get_witsml14__powerMeasure(struct soap *soap, witsml14__powerMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__powerMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__planeAngleMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PlaneAngleUom(soap, &this->witsml14__planeAngleMeasure::uom);
}

void witsml14__planeAngleMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__planeAngleMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__planeAngleMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__planeAngleMeasure(struct soap *soap, const char *tag, int id, const witsml14__planeAngleMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:planeAngleMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__PlaneAngleUom2s(soap, ((witsml14__planeAngleMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:planeAngleMeasure");
}

void *witsml14__planeAngleMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__planeAngleMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__planeAngleMeasure * SOAP_FMAC4 soap_in_witsml14__planeAngleMeasure(struct soap *soap, const char *tag, witsml14__planeAngleMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__planeAngleMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure, sizeof(witsml14__planeAngleMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure)
		return (witsml14__planeAngleMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PlaneAngleUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__planeAngleMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:planeAngleMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__planeAngleMeasure * SOAP_FMAC2 soap_instantiate_witsml14__planeAngleMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__planeAngleMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__planeAngleMeasure *p;
	size_t k = sizeof(witsml14__planeAngleMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__planeAngleMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__planeAngleMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__planeAngleMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__planeAngleMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__planeAngleMeasure(soap, tag ? tag : "witsml14:planeAngleMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__planeAngleMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__planeAngleMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__planeAngleMeasure * SOAP_FMAC4 soap_get_witsml14__planeAngleMeasure(struct soap *soap, witsml14__planeAngleMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__planeAngleMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__permeabilityRockMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PermeabilityRockUom(soap, &this->witsml14__permeabilityRockMeasure::uom);
}

void witsml14__permeabilityRockMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__permeabilityRockMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__permeabilityRockMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__permeabilityRockMeasure(struct soap *soap, const char *tag, int id, const witsml14__permeabilityRockMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:permeabilityRockMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__PermeabilityRockUom2s(soap, ((witsml14__permeabilityRockMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:permeabilityRockMeasure");
}

void *witsml14__permeabilityRockMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__permeabilityRockMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__permeabilityRockMeasure * SOAP_FMAC4 soap_in_witsml14__permeabilityRockMeasure(struct soap *soap, const char *tag, witsml14__permeabilityRockMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__permeabilityRockMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure, sizeof(witsml14__permeabilityRockMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure)
		return (witsml14__permeabilityRockMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PermeabilityRockUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__permeabilityRockMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:permeabilityRockMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__permeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_witsml14__permeabilityRockMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__permeabilityRockMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__permeabilityRockMeasure *p;
	size_t k = sizeof(witsml14__permeabilityRockMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__permeabilityRockMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__permeabilityRockMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__permeabilityRockMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__permeabilityRockMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__permeabilityRockMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__permeabilityRockMeasure(soap, tag ? tag : "witsml14:permeabilityRockMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__permeabilityRockMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__permeabilityRockMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__permeabilityRockMeasure * SOAP_FMAC4 soap_get_witsml14__permeabilityRockMeasure(struct soap *soap, witsml14__permeabilityRockMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__permeabilityRockMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__perLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PerLengthUom(soap, &this->witsml14__perLengthMeasure::uom);
}

void witsml14__perLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__perLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__perLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__perLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__perLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:perLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__PerLengthUom2s(soap, ((witsml14__perLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:perLengthMeasure");
}

void *witsml14__perLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__perLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__perLengthMeasure * SOAP_FMAC4 soap_in_witsml14__perLengthMeasure(struct soap *soap, const char *tag, witsml14__perLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__perLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure, sizeof(witsml14__perLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure)
		return (witsml14__perLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__perLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:perLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__perLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__perLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__perLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__perLengthMeasure *p;
	size_t k = sizeof(witsml14__perLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__perLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__perLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__perLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__perLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__perLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__perLengthMeasure(soap, tag ? tag : "witsml14:perLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__perLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__perLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__perLengthMeasure * SOAP_FMAC4 soap_get_witsml14__perLengthMeasure(struct soap *soap, witsml14__perLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__perLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__momentOfForceMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MomentOfForceUom(soap, &this->witsml14__momentOfForceMeasure::uom);
}

void witsml14__momentOfForceMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__momentOfForceMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__momentOfForceMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__momentOfForceMeasure(struct soap *soap, const char *tag, int id, const witsml14__momentOfForceMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:momentOfForceMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__MomentOfForceUom2s(soap, ((witsml14__momentOfForceMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:momentOfForceMeasure");
}

void *witsml14__momentOfForceMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__momentOfForceMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__momentOfForceMeasure * SOAP_FMAC4 soap_in_witsml14__momentOfForceMeasure(struct soap *soap, const char *tag, witsml14__momentOfForceMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__momentOfForceMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure, sizeof(witsml14__momentOfForceMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure)
		return (witsml14__momentOfForceMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MomentOfForceUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__momentOfForceMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:momentOfForceMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__momentOfForceMeasure * SOAP_FMAC2 soap_instantiate_witsml14__momentOfForceMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__momentOfForceMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__momentOfForceMeasure *p;
	size_t k = sizeof(witsml14__momentOfForceMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__momentOfForceMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__momentOfForceMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__momentOfForceMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__momentOfForceMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__momentOfForceMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__momentOfForceMeasure(soap, tag ? tag : "witsml14:momentOfForceMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__momentOfForceMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__momentOfForceMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__momentOfForceMeasure * SOAP_FMAC4 soap_get_witsml14__momentOfForceMeasure(struct soap *soap, witsml14__momentOfForceMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__momentOfForceMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__massPerLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MassPerLengthUom(soap, &this->witsml14__massPerLengthMeasure::uom);
}

void witsml14__massPerLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__massPerLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__massPerLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__massPerLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__massPerLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:massPerLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__MassPerLengthUom2s(soap, ((witsml14__massPerLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:massPerLengthMeasure");
}

void *witsml14__massPerLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__massPerLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__massPerLengthMeasure * SOAP_FMAC4 soap_in_witsml14__massPerLengthMeasure(struct soap *soap, const char *tag, witsml14__massPerLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__massPerLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure, sizeof(witsml14__massPerLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure)
		return (witsml14__massPerLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MassPerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__massPerLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:massPerLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__massPerLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__massPerLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__massPerLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__massPerLengthMeasure *p;
	size_t k = sizeof(witsml14__massPerLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__massPerLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__massPerLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__massPerLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__massPerLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__massPerLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__massPerLengthMeasure(soap, tag ? tag : "witsml14:massPerLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__massPerLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__massPerLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__massPerLengthMeasure * SOAP_FMAC4 soap_get_witsml14__massPerLengthMeasure(struct soap *soap, witsml14__massPerLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__massPerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__massMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MassUom(soap, &this->witsml14__massMeasure::uom);
}

void witsml14__massMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__massMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__massMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__massMeasure(struct soap *soap, const char *tag, int id, const witsml14__massMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:massMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__MassUom2s(soap, ((witsml14__massMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:massMeasure");
}

void *witsml14__massMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__massMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__massMeasure * SOAP_FMAC4 soap_in_witsml14__massMeasure(struct soap *soap, const char *tag, witsml14__massMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__massMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure, sizeof(witsml14__massMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure)
		return (witsml14__massMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MassUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__massMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:massMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__massMeasure * SOAP_FMAC2 soap_instantiate_witsml14__massMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__massMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__massMeasure *p;
	size_t k = sizeof(witsml14__massMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__massMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__massMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__massMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__massMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__massMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__massMeasure(soap, tag ? tag : "witsml14:massMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__massMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__massMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__massMeasure * SOAP_FMAC4 soap_get_witsml14__massMeasure(struct soap *soap, witsml14__massMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__massMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__massConcentrationMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MassConcentrationUom(soap, &this->witsml14__massConcentrationMeasure::uom);
}

void witsml14__massConcentrationMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__massConcentrationMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__massConcentrationMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__massConcentrationMeasure(struct soap *soap, const char *tag, int id, const witsml14__massConcentrationMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:massConcentrationMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__MassConcentrationUom2s(soap, ((witsml14__massConcentrationMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:massConcentrationMeasure");
}

void *witsml14__massConcentrationMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__massConcentrationMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__massConcentrationMeasure * SOAP_FMAC4 soap_in_witsml14__massConcentrationMeasure(struct soap *soap, const char *tag, witsml14__massConcentrationMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__massConcentrationMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure, sizeof(witsml14__massConcentrationMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure)
		return (witsml14__massConcentrationMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MassConcentrationUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__massConcentrationMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:massConcentrationMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__massConcentrationMeasure * SOAP_FMAC2 soap_instantiate_witsml14__massConcentrationMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__massConcentrationMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__massConcentrationMeasure *p;
	size_t k = sizeof(witsml14__massConcentrationMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__massConcentrationMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__massConcentrationMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__massConcentrationMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__massConcentrationMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__massConcentrationMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__massConcentrationMeasure(soap, tag ? tag : "witsml14:massConcentrationMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__massConcentrationMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__massConcentrationMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__massConcentrationMeasure * SOAP_FMAC4 soap_get_witsml14__massConcentrationMeasure(struct soap *soap, witsml14__massConcentrationMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__massConcentrationMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__magneticInductionMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MagneticInductionUom(soap, &this->witsml14__magneticInductionMeasure::uom);
}

void witsml14__magneticInductionMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__magneticInductionMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__magneticInductionMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__magneticInductionMeasure(struct soap *soap, const char *tag, int id, const witsml14__magneticInductionMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:magneticInductionMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__MagneticInductionUom2s(soap, ((witsml14__magneticInductionMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:magneticInductionMeasure");
}

void *witsml14__magneticInductionMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__magneticInductionMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__magneticInductionMeasure * SOAP_FMAC4 soap_in_witsml14__magneticInductionMeasure(struct soap *soap, const char *tag, witsml14__magneticInductionMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__magneticInductionMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure, sizeof(witsml14__magneticInductionMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure)
		return (witsml14__magneticInductionMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MagneticInductionUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__magneticInductionMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:magneticInductionMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__magneticInductionMeasure * SOAP_FMAC2 soap_instantiate_witsml14__magneticInductionMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__magneticInductionMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__magneticInductionMeasure *p;
	size_t k = sizeof(witsml14__magneticInductionMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__magneticInductionMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__magneticInductionMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__magneticInductionMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__magneticInductionMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__magneticInductionMeasure(soap, tag ? tag : "witsml14:magneticInductionMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__magneticInductionMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__magneticInductionMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__magneticInductionMeasure * SOAP_FMAC4 soap_get_witsml14__magneticInductionMeasure(struct soap *soap, witsml14__magneticInductionMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__magneticInductionMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__lengthPerLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__LengthPerLengthUom(soap, &this->witsml14__lengthPerLengthMeasure::uom);
}

void witsml14__lengthPerLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__lengthPerLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__lengthPerLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__lengthPerLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__lengthPerLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:lengthPerLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__LengthPerLengthUom2s(soap, ((witsml14__lengthPerLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:lengthPerLengthMeasure");
}

void *witsml14__lengthPerLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__lengthPerLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__lengthPerLengthMeasure * SOAP_FMAC4 soap_in_witsml14__lengthPerLengthMeasure(struct soap *soap, const char *tag, witsml14__lengthPerLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__lengthPerLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure, sizeof(witsml14__lengthPerLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure)
		return (witsml14__lengthPerLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__LengthPerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__lengthPerLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:lengthPerLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__lengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__lengthPerLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__lengthPerLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__lengthPerLengthMeasure *p;
	size_t k = sizeof(witsml14__lengthPerLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthPerLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__lengthPerLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__lengthPerLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__lengthPerLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__lengthPerLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__lengthPerLengthMeasure(soap, tag ? tag : "witsml14:lengthPerLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__lengthPerLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__lengthPerLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__lengthPerLengthMeasure * SOAP_FMAC4 soap_get_witsml14__lengthPerLengthMeasure(struct soap *soap, witsml14__lengthPerLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__lengthPerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__lengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__LengthUom(soap, &this->witsml14__lengthMeasure::uom);
}

void witsml14__lengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__lengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__lengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__lengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__lengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:lengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__LengthUom2s(soap, ((witsml14__lengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:lengthMeasure");
}

void *witsml14__lengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__lengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__lengthMeasure * SOAP_FMAC4 soap_in_witsml14__lengthMeasure(struct soap *soap, const char *tag, witsml14__lengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__lengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure, sizeof(witsml14__lengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure)
		return (witsml14__lengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__LengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__lengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:lengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__lengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__lengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__lengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__lengthMeasure *p;
	size_t k = sizeof(witsml14__lengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__lengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__lengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__lengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__lengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__lengthMeasure(soap, tag ? tag : "witsml14:lengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__lengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__lengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__lengthMeasure * SOAP_FMAC4 soap_get_witsml14__lengthMeasure(struct soap *soap, witsml14__lengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__lengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__illuminanceMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__IlluminanceUom(soap, &this->witsml14__illuminanceMeasure::uom);
}

void witsml14__illuminanceMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__illuminanceMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__illuminanceMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__illuminanceMeasure(struct soap *soap, const char *tag, int id, const witsml14__illuminanceMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:illuminanceMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__IlluminanceUom2s(soap, ((witsml14__illuminanceMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:illuminanceMeasure");
}

void *witsml14__illuminanceMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__illuminanceMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__illuminanceMeasure * SOAP_FMAC4 soap_in_witsml14__illuminanceMeasure(struct soap *soap, const char *tag, witsml14__illuminanceMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__illuminanceMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure, sizeof(witsml14__illuminanceMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure)
		return (witsml14__illuminanceMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__IlluminanceUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__illuminanceMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:illuminanceMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__illuminanceMeasure * SOAP_FMAC2 soap_instantiate_witsml14__illuminanceMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__illuminanceMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__illuminanceMeasure *p;
	size_t k = sizeof(witsml14__illuminanceMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__illuminanceMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__illuminanceMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__illuminanceMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__illuminanceMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__illuminanceMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__illuminanceMeasure(soap, tag ? tag : "witsml14:illuminanceMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__illuminanceMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__illuminanceMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__illuminanceMeasure * SOAP_FMAC4 soap_get_witsml14__illuminanceMeasure(struct soap *soap, witsml14__illuminanceMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__illuminanceMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__forcePerVolumeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ForcePerVolumeUom(soap, &this->witsml14__forcePerVolumeMeasure::uom);
}

void witsml14__forcePerVolumeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__forcePerVolumeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__forcePerVolumeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__forcePerVolumeMeasure(struct soap *soap, const char *tag, int id, const witsml14__forcePerVolumeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:forcePerVolumeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ForcePerVolumeUom2s(soap, ((witsml14__forcePerVolumeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:forcePerVolumeMeasure");
}

void *witsml14__forcePerVolumeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__forcePerVolumeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__forcePerVolumeMeasure * SOAP_FMAC4 soap_in_witsml14__forcePerVolumeMeasure(struct soap *soap, const char *tag, witsml14__forcePerVolumeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__forcePerVolumeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure, sizeof(witsml14__forcePerVolumeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure)
		return (witsml14__forcePerVolumeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ForcePerVolumeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__forcePerVolumeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:forcePerVolumeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__forcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__forcePerVolumeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__forcePerVolumeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__forcePerVolumeMeasure *p;
	size_t k = sizeof(witsml14__forcePerVolumeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerVolumeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__forcePerVolumeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__forcePerVolumeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__forcePerVolumeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__forcePerVolumeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__forcePerVolumeMeasure(soap, tag ? tag : "witsml14:forcePerVolumeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__forcePerVolumeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__forcePerVolumeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__forcePerVolumeMeasure * SOAP_FMAC4 soap_get_witsml14__forcePerVolumeMeasure(struct soap *soap, witsml14__forcePerVolumeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__forcePerVolumeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__forcePerLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ForcePerLengthUom(soap, &this->witsml14__forcePerLengthMeasure::uom);
}

void witsml14__forcePerLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__forcePerLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__forcePerLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__forcePerLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__forcePerLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:forcePerLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ForcePerLengthUom2s(soap, ((witsml14__forcePerLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:forcePerLengthMeasure");
}

void *witsml14__forcePerLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__forcePerLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__forcePerLengthMeasure * SOAP_FMAC4 soap_in_witsml14__forcePerLengthMeasure(struct soap *soap, const char *tag, witsml14__forcePerLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__forcePerLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure, sizeof(witsml14__forcePerLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure)
		return (witsml14__forcePerLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ForcePerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__forcePerLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:forcePerLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__forcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__forcePerLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__forcePerLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__forcePerLengthMeasure *p;
	size_t k = sizeof(witsml14__forcePerLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__forcePerLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__forcePerLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__forcePerLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__forcePerLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__forcePerLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__forcePerLengthMeasure(soap, tag ? tag : "witsml14:forcePerLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__forcePerLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__forcePerLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__forcePerLengthMeasure * SOAP_FMAC4 soap_get_witsml14__forcePerLengthMeasure(struct soap *soap, witsml14__forcePerLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__forcePerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__forceMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ForceUom(soap, &this->witsml14__forceMeasure::uom);
}

void witsml14__forceMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__forceMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__forceMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__forceMeasure(struct soap *soap, const char *tag, int id, const witsml14__forceMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:forceMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ForceUom2s(soap, ((witsml14__forceMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:forceMeasure");
}

void *witsml14__forceMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__forceMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__forceMeasure * SOAP_FMAC4 soap_in_witsml14__forceMeasure(struct soap *soap, const char *tag, witsml14__forceMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__forceMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure, sizeof(witsml14__forceMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure)
		return (witsml14__forceMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ForceUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__forceMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:forceMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__forceMeasure * SOAP_FMAC2 soap_instantiate_witsml14__forceMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__forceMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__forceMeasure *p;
	size_t k = sizeof(witsml14__forceMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__forceMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__forceMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__forceMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__forceMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__forceMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__forceMeasure(soap, tag ? tag : "witsml14:forceMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__forceMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__forceMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__forceMeasure * SOAP_FMAC4 soap_get_witsml14__forceMeasure(struct soap *soap, witsml14__forceMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__forceMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__equivalentPerMassMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__EquivalentPerMassUom(soap, &this->witsml14__equivalentPerMassMeasure::uom);
}

void witsml14__equivalentPerMassMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__equivalentPerMassMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__equivalentPerMassMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__equivalentPerMassMeasure(struct soap *soap, const char *tag, int id, const witsml14__equivalentPerMassMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:equivalentPerMassMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__EquivalentPerMassUom2s(soap, ((witsml14__equivalentPerMassMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:equivalentPerMassMeasure");
}

void *witsml14__equivalentPerMassMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__equivalentPerMassMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__equivalentPerMassMeasure * SOAP_FMAC4 soap_in_witsml14__equivalentPerMassMeasure(struct soap *soap, const char *tag, witsml14__equivalentPerMassMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__equivalentPerMassMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure, sizeof(witsml14__equivalentPerMassMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure)
		return (witsml14__equivalentPerMassMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__EquivalentPerMassUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__equivalentPerMassMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:equivalentPerMassMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__equivalentPerMassMeasure * SOAP_FMAC2 soap_instantiate_witsml14__equivalentPerMassMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__equivalentPerMassMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__equivalentPerMassMeasure *p;
	size_t k = sizeof(witsml14__equivalentPerMassMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__equivalentPerMassMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__equivalentPerMassMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__equivalentPerMassMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__equivalentPerMassMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__equivalentPerMassMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__equivalentPerMassMeasure(soap, tag ? tag : "witsml14:equivalentPerMassMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__equivalentPerMassMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__equivalentPerMassMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__equivalentPerMassMeasure * SOAP_FMAC4 soap_get_witsml14__equivalentPerMassMeasure(struct soap *soap, witsml14__equivalentPerMassMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__equivalentPerMassMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__electricPotentialMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ElectricPotentialUom(soap, &this->witsml14__electricPotentialMeasure::uom);
}

void witsml14__electricPotentialMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__electricPotentialMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__electricPotentialMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__electricPotentialMeasure(struct soap *soap, const char *tag, int id, const witsml14__electricPotentialMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:electricPotentialMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ElectricPotentialUom2s(soap, ((witsml14__electricPotentialMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:electricPotentialMeasure");
}

void *witsml14__electricPotentialMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__electricPotentialMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__electricPotentialMeasure * SOAP_FMAC4 soap_in_witsml14__electricPotentialMeasure(struct soap *soap, const char *tag, witsml14__electricPotentialMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__electricPotentialMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure, sizeof(witsml14__electricPotentialMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure)
		return (witsml14__electricPotentialMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ElectricPotentialUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__electricPotentialMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:electricPotentialMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__electricPotentialMeasure * SOAP_FMAC2 soap_instantiate_witsml14__electricPotentialMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__electricPotentialMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__electricPotentialMeasure *p;
	size_t k = sizeof(witsml14__electricPotentialMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__electricPotentialMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__electricPotentialMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__electricPotentialMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__electricPotentialMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__electricPotentialMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__electricPotentialMeasure(soap, tag ? tag : "witsml14:electricPotentialMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__electricPotentialMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__electricPotentialMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__electricPotentialMeasure * SOAP_FMAC4 soap_get_witsml14__electricPotentialMeasure(struct soap *soap, witsml14__electricPotentialMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__electricPotentialMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__electricCurrentMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__ElectricCurrentUom(soap, &this->witsml14__electricCurrentMeasure::uom);
}

void witsml14__electricCurrentMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__electricCurrentMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__electricCurrentMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__electricCurrentMeasure(struct soap *soap, const char *tag, int id, const witsml14__electricCurrentMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:electricCurrentMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__ElectricCurrentUom2s(soap, ((witsml14__electricCurrentMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:electricCurrentMeasure");
}

void *witsml14__electricCurrentMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__electricCurrentMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__electricCurrentMeasure * SOAP_FMAC4 soap_in_witsml14__electricCurrentMeasure(struct soap *soap, const char *tag, witsml14__electricCurrentMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__electricCurrentMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure, sizeof(witsml14__electricCurrentMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure)
		return (witsml14__electricCurrentMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__ElectricCurrentUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__electricCurrentMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:electricCurrentMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__electricCurrentMeasure * SOAP_FMAC2 soap_instantiate_witsml14__electricCurrentMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__electricCurrentMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__electricCurrentMeasure *p;
	size_t k = sizeof(witsml14__electricCurrentMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__electricCurrentMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__electricCurrentMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__electricCurrentMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__electricCurrentMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__electricCurrentMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__electricCurrentMeasure(soap, tag ? tag : "witsml14:electricCurrentMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__electricCurrentMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__electricCurrentMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__electricCurrentMeasure * SOAP_FMAC4 soap_get_witsml14__electricCurrentMeasure(struct soap *soap, witsml14__electricCurrentMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__electricCurrentMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__dynamicViscosityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__DynamicViscosityUom(soap, &this->witsml14__dynamicViscosityMeasure::uom);
}

void witsml14__dynamicViscosityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__dynamicViscosityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__dynamicViscosityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__dynamicViscosityMeasure(struct soap *soap, const char *tag, int id, const witsml14__dynamicViscosityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:dynamicViscosityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__DynamicViscosityUom2s(soap, ((witsml14__dynamicViscosityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:dynamicViscosityMeasure");
}

void *witsml14__dynamicViscosityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__dynamicViscosityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__dynamicViscosityMeasure * SOAP_FMAC4 soap_in_witsml14__dynamicViscosityMeasure(struct soap *soap, const char *tag, witsml14__dynamicViscosityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__dynamicViscosityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure, sizeof(witsml14__dynamicViscosityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure)
		return (witsml14__dynamicViscosityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__DynamicViscosityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__dynamicViscosityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:dynamicViscosityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__dynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__dynamicViscosityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__dynamicViscosityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__dynamicViscosityMeasure *p;
	size_t k = sizeof(witsml14__dynamicViscosityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__dynamicViscosityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__dynamicViscosityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__dynamicViscosityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__dynamicViscosityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__dynamicViscosityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__dynamicViscosityMeasure(soap, tag ? tag : "witsml14:dynamicViscosityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__dynamicViscosityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__dynamicViscosityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__dynamicViscosityMeasure * SOAP_FMAC4 soap_get_witsml14__dynamicViscosityMeasure(struct soap *soap, witsml14__dynamicViscosityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__dynamicViscosityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__dimensionlessMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__DimensionlessUom(soap, &this->witsml14__dimensionlessMeasure::uom);
}

void witsml14__dimensionlessMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__dimensionlessMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__dimensionlessMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__dimensionlessMeasure(struct soap *soap, const char *tag, int id, const witsml14__dimensionlessMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:dimensionlessMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__DimensionlessUom2s(soap, ((witsml14__dimensionlessMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:dimensionlessMeasure");
}

void *witsml14__dimensionlessMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__dimensionlessMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__dimensionlessMeasure * SOAP_FMAC4 soap_in_witsml14__dimensionlessMeasure(struct soap *soap, const char *tag, witsml14__dimensionlessMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__dimensionlessMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure, sizeof(witsml14__dimensionlessMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure)
		return (witsml14__dimensionlessMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__DimensionlessUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__dimensionlessMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:dimensionlessMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__dimensionlessMeasure * SOAP_FMAC2 soap_instantiate_witsml14__dimensionlessMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__dimensionlessMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__dimensionlessMeasure *p;
	size_t k = sizeof(witsml14__dimensionlessMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__dimensionlessMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__dimensionlessMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__dimensionlessMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__dimensionlessMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__dimensionlessMeasure(soap, tag ? tag : "witsml14:dimensionlessMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__dimensionlessMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__dimensionlessMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__dimensionlessMeasure * SOAP_FMAC4 soap_get_witsml14__dimensionlessMeasure(struct soap *soap, witsml14__dimensionlessMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__dimensionlessMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__densityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__DensityUom(soap, &this->witsml14__densityMeasure::uom);
}

void witsml14__densityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__densityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__densityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__densityMeasure(struct soap *soap, const char *tag, int id, const witsml14__densityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:densityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__DensityUom2s(soap, ((witsml14__densityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:densityMeasure");
}

void *witsml14__densityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__densityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__densityMeasure * SOAP_FMAC4 soap_in_witsml14__densityMeasure(struct soap *soap, const char *tag, witsml14__densityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__densityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure, sizeof(witsml14__densityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure)
		return (witsml14__densityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__DensityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__densityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:densityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__densityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__densityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__densityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__densityMeasure *p;
	size_t k = sizeof(witsml14__densityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__densityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__densityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__densityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__densityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__densityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__densityMeasure(soap, tag ? tag : "witsml14:densityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__densityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__densityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__densityMeasure * SOAP_FMAC4 soap_get_witsml14__densityMeasure(struct soap *soap, witsml14__densityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__densityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__compressibilityMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__CompressibilityUom(soap, &this->witsml14__compressibilityMeasure::uom);
}

void witsml14__compressibilityMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__compressibilityMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__compressibilityMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__compressibilityMeasure(struct soap *soap, const char *tag, int id, const witsml14__compressibilityMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:compressibilityMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__CompressibilityUom2s(soap, ((witsml14__compressibilityMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:compressibilityMeasure");
}

void *witsml14__compressibilityMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__compressibilityMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__compressibilityMeasure * SOAP_FMAC4 soap_in_witsml14__compressibilityMeasure(struct soap *soap, const char *tag, witsml14__compressibilityMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__compressibilityMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure, sizeof(witsml14__compressibilityMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure)
		return (witsml14__compressibilityMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__CompressibilityUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__compressibilityMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:compressibilityMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__compressibilityMeasure * SOAP_FMAC2 soap_instantiate_witsml14__compressibilityMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__compressibilityMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__compressibilityMeasure *p;
	size_t k = sizeof(witsml14__compressibilityMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__compressibilityMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__compressibilityMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__compressibilityMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__compressibilityMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__compressibilityMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__compressibilityMeasure(soap, tag ? tag : "witsml14:compressibilityMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__compressibilityMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__compressibilityMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__compressibilityMeasure * SOAP_FMAC4 soap_get_witsml14__compressibilityMeasure(struct soap *soap, witsml14__compressibilityMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__compressibilityMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__areaPerAreaMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__AreaPerAreaUom(soap, &this->witsml14__areaPerAreaMeasure::uom);
}

void witsml14__areaPerAreaMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__areaPerAreaMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__areaPerAreaMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__areaPerAreaMeasure(struct soap *soap, const char *tag, int id, const witsml14__areaPerAreaMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:areaPerAreaMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__AreaPerAreaUom2s(soap, ((witsml14__areaPerAreaMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:areaPerAreaMeasure");
}

void *witsml14__areaPerAreaMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__areaPerAreaMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__areaPerAreaMeasure * SOAP_FMAC4 soap_in_witsml14__areaPerAreaMeasure(struct soap *soap, const char *tag, witsml14__areaPerAreaMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__areaPerAreaMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure, sizeof(witsml14__areaPerAreaMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure)
		return (witsml14__areaPerAreaMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__AreaPerAreaUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__areaPerAreaMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:areaPerAreaMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__areaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_witsml14__areaPerAreaMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__areaPerAreaMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__areaPerAreaMeasure *p;
	size_t k = sizeof(witsml14__areaPerAreaMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaPerAreaMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__areaPerAreaMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__areaPerAreaMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__areaPerAreaMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__areaPerAreaMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__areaPerAreaMeasure(soap, tag ? tag : "witsml14:areaPerAreaMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__areaPerAreaMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__areaPerAreaMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__areaPerAreaMeasure * SOAP_FMAC4 soap_get_witsml14__areaPerAreaMeasure(struct soap *soap, witsml14__areaPerAreaMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__areaPerAreaMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__areaMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__AreaUom(soap, &this->witsml14__areaMeasure::uom);
}

void witsml14__areaMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__areaMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__areaMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__areaMeasure(struct soap *soap, const char *tag, int id, const witsml14__areaMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:areaMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__AreaUom2s(soap, ((witsml14__areaMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:areaMeasure");
}

void *witsml14__areaMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__areaMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__areaMeasure * SOAP_FMAC4 soap_in_witsml14__areaMeasure(struct soap *soap, const char *tag, witsml14__areaMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__areaMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure, sizeof(witsml14__areaMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure)
		return (witsml14__areaMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__AreaUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__areaMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:areaMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__areaMeasure * SOAP_FMAC2 soap_instantiate_witsml14__areaMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__areaMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__areaMeasure *p;
	size_t k = sizeof(witsml14__areaMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__areaMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__areaMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__areaMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__areaMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__areaMeasure(soap, tag ? tag : "witsml14:areaMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__areaMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__areaMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__areaMeasure * SOAP_FMAC4 soap_get_witsml14__areaMeasure(struct soap *soap, witsml14__areaMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__areaMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__anglePerTimeMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__AnglePerTimeUom(soap, &this->witsml14__anglePerTimeMeasure::uom);
}

void witsml14__anglePerTimeMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__anglePerTimeMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__anglePerTimeMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__anglePerTimeMeasure(struct soap *soap, const char *tag, int id, const witsml14__anglePerTimeMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:anglePerTimeMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__AnglePerTimeUom2s(soap, ((witsml14__anglePerTimeMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:anglePerTimeMeasure");
}

void *witsml14__anglePerTimeMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__anglePerTimeMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__anglePerTimeMeasure * SOAP_FMAC4 soap_in_witsml14__anglePerTimeMeasure(struct soap *soap, const char *tag, witsml14__anglePerTimeMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__anglePerTimeMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure, sizeof(witsml14__anglePerTimeMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure)
		return (witsml14__anglePerTimeMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__AnglePerTimeUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__anglePerTimeMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:anglePerTimeMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__anglePerTimeMeasure * SOAP_FMAC2 soap_instantiate_witsml14__anglePerTimeMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__anglePerTimeMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__anglePerTimeMeasure *p;
	size_t k = sizeof(witsml14__anglePerTimeMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerTimeMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__anglePerTimeMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__anglePerTimeMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__anglePerTimeMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__anglePerTimeMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__anglePerTimeMeasure(soap, tag ? tag : "witsml14:anglePerTimeMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__anglePerTimeMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__anglePerTimeMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__anglePerTimeMeasure * SOAP_FMAC4 soap_get_witsml14__anglePerTimeMeasure(struct soap *soap, witsml14__anglePerTimeMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__anglePerTimeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__anglePerLengthMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__AnglePerLengthUom(soap, &this->witsml14__anglePerLengthMeasure::uom);
}

void witsml14__anglePerLengthMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__anglePerLengthMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__anglePerLengthMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__anglePerLengthMeasure(struct soap *soap, const char *tag, int id, const witsml14__anglePerLengthMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:anglePerLengthMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__AnglePerLengthUom2s(soap, ((witsml14__anglePerLengthMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:anglePerLengthMeasure");
}

void *witsml14__anglePerLengthMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__anglePerLengthMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__anglePerLengthMeasure * SOAP_FMAC4 soap_in_witsml14__anglePerLengthMeasure(struct soap *soap, const char *tag, witsml14__anglePerLengthMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__anglePerLengthMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure, sizeof(witsml14__anglePerLengthMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure)
		return (witsml14__anglePerLengthMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__AnglePerLengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__anglePerLengthMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:anglePerLengthMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__anglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_witsml14__anglePerLengthMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__anglePerLengthMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__anglePerLengthMeasure *p;
	size_t k = sizeof(witsml14__anglePerLengthMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__anglePerLengthMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__anglePerLengthMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__anglePerLengthMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__anglePerLengthMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__anglePerLengthMeasure(soap, tag ? tag : "witsml14:anglePerLengthMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__anglePerLengthMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__anglePerLengthMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__anglePerLengthMeasure * SOAP_FMAC4 soap_get_witsml14__anglePerLengthMeasure(struct soap *soap, witsml14__anglePerLengthMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__anglePerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__accelerationLinearMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__AccelerationLinearUom(soap, &this->witsml14__accelerationLinearMeasure::uom);
}

void witsml14__accelerationLinearMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__accelerationLinearMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__accelerationLinearMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__accelerationLinearMeasure(struct soap *soap, const char *tag, int id, const witsml14__accelerationLinearMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:accelerationLinearMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__AccelerationLinearUom2s(soap, ((witsml14__accelerationLinearMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:accelerationLinearMeasure");
}

void *witsml14__accelerationLinearMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__accelerationLinearMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__accelerationLinearMeasure * SOAP_FMAC4 soap_in_witsml14__accelerationLinearMeasure(struct soap *soap, const char *tag, witsml14__accelerationLinearMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__accelerationLinearMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure, sizeof(witsml14__accelerationLinearMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure)
		return (witsml14__accelerationLinearMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__AccelerationLinearUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__accelerationLinearMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:accelerationLinearMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__accelerationLinearMeasure * SOAP_FMAC2 soap_instantiate_witsml14__accelerationLinearMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__accelerationLinearMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__accelerationLinearMeasure *p;
	size_t k = sizeof(witsml14__accelerationLinearMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__accelerationLinearMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__accelerationLinearMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__accelerationLinearMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__accelerationLinearMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__accelerationLinearMeasure(soap, tag ? tag : "witsml14:accelerationLinearMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__accelerationLinearMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__accelerationLinearMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__accelerationLinearMeasure * SOAP_FMAC4 soap_get_witsml14__accelerationLinearMeasure(struct soap *soap, witsml14__accelerationLinearMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__accelerationLinearMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__indexedObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractTypeEnum(soap, &this->witsml14__indexedObject::__item);
	soap_default_witsml14__positiveCount(soap, &this->witsml14__indexedObject::index);
	this->witsml14__indexedObject::name = NULL;
	this->witsml14__indexedObject::uom = NULL;
	this->witsml14__indexedObject::description = NULL;
	this->witsml14__indexedObject::uid = NULL;
}

void witsml14__indexedObject::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractTypeEnum(soap, &this->witsml14__indexedObject::__item);
#endif
}

int witsml14__indexedObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__indexedObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__indexedObject(struct soap *soap, const char *tag, int id, const witsml14__indexedObject *a, const char *type)
{
	if (!type)
		type = "witsml14:indexedObject";
	soap_set_attr(soap, "index", soap_witsml14__positiveCount2s(soap, ((witsml14__indexedObject*)a)->index), 1);
	if (((witsml14__indexedObject*)a)->name)
	{	soap_set_attr(soap, "name", soap_witsml14__kindString2s(soap, *((witsml14__indexedObject*)a)->name), 1);
	}
	if (((witsml14__indexedObject*)a)->uom)
	{	soap_set_attr(soap, "uom", soap_witsml14__uomString2s(soap, *((witsml14__indexedObject*)a)->uom), 1);
	}
	if (((witsml14__indexedObject*)a)->description)
	{	soap_set_attr(soap, "description", soap_witsml14__descriptionString2s(soap, *((witsml14__indexedObject*)a)->description), 1);
	}
	if (((witsml14__indexedObject*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__indexedObject*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractTypeEnum(soap, tag, id, &a->witsml14__indexedObject::__item, "witsml14:indexedObject");
}

void *witsml14__indexedObject::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__indexedObject(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__indexedObject * SOAP_FMAC4 soap_in_witsml14__indexedObject(struct soap *soap, const char *tag, witsml14__indexedObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__indexedObject*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject, sizeof(witsml14__indexedObject), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject)
		return (witsml14__indexedObject *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__positiveCount(soap, soap_attr_value(soap, "index", 5, 3), &((witsml14__indexedObject*)a)->index))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "name", 1, 0);
		if (t)
		{
			if (!(((witsml14__indexedObject*)a)->name = soap_new_witsml14__kindString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__kindString(soap, t, ((witsml14__indexedObject*)a)->name))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "uom", 1, 0);
		if (t)
		{
			if (!(((witsml14__indexedObject*)a)->uom = soap_new_witsml14__uomString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uomString(soap, t, ((witsml14__indexedObject*)a)->uom))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "description", 1, 0);
		if (t)
		{
			if (!(((witsml14__indexedObject*)a)->description = soap_new_witsml14__descriptionString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__descriptionString(soap, t, ((witsml14__indexedObject*)a)->description))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__indexedObject*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__indexedObject*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractTypeEnum(soap, tag, &a->witsml14__indexedObject::__item, "witsml14:indexedObject"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__indexedObject * SOAP_FMAC2 soap_instantiate_witsml14__indexedObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__indexedObject(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__indexedObject *p;
	size_t k = sizeof(witsml14__indexedObject);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__indexedObject);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__indexedObject, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__indexedObject location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__indexedObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__indexedObject(soap, tag ? tag : "witsml14:indexedObject", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__indexedObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__indexedObject(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__indexedObject * SOAP_FMAC4 soap_get_witsml14__indexedObject(struct soap *soap, witsml14__indexedObject *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__indexedObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cost::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractDouble(soap, &this->witsml14__cost::__item);
	this->witsml14__cost::currency = NULL;
}

void witsml14__cost::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int witsml14__cost::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cost(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cost(struct soap *soap, const char *tag, int id, const witsml14__cost *a, const char *type)
{
	if (!type)
		type = "witsml14:cost";
	if (((witsml14__cost*)a)->currency)
	{	soap_set_attr(soap, "currency", soap_witsml14__kindString2s(soap, *((witsml14__cost*)a)->currency), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__cost::__item, "witsml14:cost");
}

void *witsml14__cost::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cost(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cost * SOAP_FMAC4 soap_in_witsml14__cost(struct soap *soap, const char *tag, witsml14__cost *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__cost*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cost, sizeof(witsml14__cost), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cost)
		return (witsml14__cost *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "currency", 1, 0);
		if (t)
		{
			if (!(((witsml14__cost*)a)->currency = soap_new_witsml14__kindString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__kindString(soap, t, ((witsml14__cost*)a)->currency))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__cost::__item, "witsml14:cost"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__cost * SOAP_FMAC2 soap_instantiate_witsml14__cost(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cost(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cost *p;
	size_t k = sizeof(witsml14__cost);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cost, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cost);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cost, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cost location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cost::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cost(soap, tag ? tag : "witsml14:cost", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cost::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cost(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cost * SOAP_FMAC4 soap_get_witsml14__cost(struct soap *soap, witsml14__cost *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cost(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__footageEastWest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__LengthUom(soap, &this->witsml14__footageEastWest::uom);
	soap_default_witsml14__EastOrWest(soap, &this->witsml14__footageEastWest::ref);
}

void witsml14__footageEastWest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__footageEastWest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__footageEastWest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__footageEastWest(struct soap *soap, const char *tag, int id, const witsml14__footageEastWest *a, const char *type)
{
	if (!type)
		type = "witsml14:footageEastWest";
	soap_set_attr(soap, "uom", soap_witsml14__LengthUom2s(soap, ((witsml14__footageEastWest*)a)->uom), 1);
	soap_set_attr(soap, "ref", soap_witsml14__EastOrWest2s(soap, ((witsml14__footageEastWest*)a)->ref), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:footageEastWest");
}

void *witsml14__footageEastWest::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__footageEastWest(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__footageEastWest * SOAP_FMAC4 soap_in_witsml14__footageEastWest(struct soap *soap, const char *tag, witsml14__footageEastWest *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__footageEastWest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest, sizeof(witsml14__footageEastWest), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest)
		return (witsml14__footageEastWest *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__LengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__footageEastWest*)a)->uom))
		return NULL;
	if (soap_s2witsml14__EastOrWest(soap, soap_attr_value(soap, "ref", 5, 3), &((witsml14__footageEastWest*)a)->ref))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:footageEastWest"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__footageEastWest * SOAP_FMAC2 soap_instantiate_witsml14__footageEastWest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__footageEastWest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__footageEastWest *p;
	size_t k = sizeof(witsml14__footageEastWest);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__footageEastWest);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__footageEastWest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__footageEastWest location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__footageEastWest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__footageEastWest(soap, tag ? tag : "witsml14:footageEastWest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__footageEastWest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__footageEastWest(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__footageEastWest * SOAP_FMAC4 soap_get_witsml14__footageEastWest(struct soap *soap, witsml14__footageEastWest *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__footageEastWest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__footageNorthSouth::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__LengthUom(soap, &this->witsml14__footageNorthSouth::uom);
	soap_default_witsml14__NorthOrSouth(soap, &this->witsml14__footageNorthSouth::ref);
}

void witsml14__footageNorthSouth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__footageNorthSouth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__footageNorthSouth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__footageNorthSouth(struct soap *soap, const char *tag, int id, const witsml14__footageNorthSouth *a, const char *type)
{
	if (!type)
		type = "witsml14:footageNorthSouth";
	soap_set_attr(soap, "uom", soap_witsml14__LengthUom2s(soap, ((witsml14__footageNorthSouth*)a)->uom), 1);
	soap_set_attr(soap, "ref", soap_witsml14__NorthOrSouth2s(soap, ((witsml14__footageNorthSouth*)a)->ref), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:footageNorthSouth");
}

void *witsml14__footageNorthSouth::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__footageNorthSouth(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__footageNorthSouth * SOAP_FMAC4 soap_in_witsml14__footageNorthSouth(struct soap *soap, const char *tag, witsml14__footageNorthSouth *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__footageNorthSouth*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth, sizeof(witsml14__footageNorthSouth), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth)
		return (witsml14__footageNorthSouth *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__LengthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__footageNorthSouth*)a)->uom))
		return NULL;
	if (soap_s2witsml14__NorthOrSouth(soap, soap_attr_value(soap, "ref", 5, 3), &((witsml14__footageNorthSouth*)a)->ref))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:footageNorthSouth"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__footageNorthSouth * SOAP_FMAC2 soap_instantiate_witsml14__footageNorthSouth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__footageNorthSouth(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__footageNorthSouth *p;
	size_t k = sizeof(witsml14__footageNorthSouth);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__footageNorthSouth);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__footageNorthSouth, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__footageNorthSouth location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__footageNorthSouth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__footageNorthSouth(soap, tag ? tag : "witsml14:footageNorthSouth", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__footageNorthSouth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__footageNorthSouth(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__footageNorthSouth * SOAP_FMAC4 soap_get_witsml14__footageNorthSouth(struct soap *soap, witsml14__footageNorthSouth *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__footageNorthSouth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__wellElevationCoord::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__WellVerticalCoordinateUom(soap, &this->witsml14__wellElevationCoord::uom);
	this->witsml14__wellElevationCoord::datum = NULL;
}

void witsml14__wellElevationCoord::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__wellElevationCoord::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__wellElevationCoord(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__wellElevationCoord(struct soap *soap, const char *tag, int id, const witsml14__wellElevationCoord *a, const char *type)
{
	if (!type)
		type = "witsml14:wellElevationCoord";
	soap_set_attr(soap, "uom", soap_witsml14__WellVerticalCoordinateUom2s(soap, ((witsml14__wellElevationCoord*)a)->uom), 1);
	if (((witsml14__wellElevationCoord*)a)->datum)
	{	soap_set_attr(soap, "datum", soap_witsml14__refWellDatum2s(soap, *((witsml14__wellElevationCoord*)a)->datum), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:wellElevationCoord");
}

void *witsml14__wellElevationCoord::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__wellElevationCoord(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__wellElevationCoord * SOAP_FMAC4 soap_in_witsml14__wellElevationCoord(struct soap *soap, const char *tag, witsml14__wellElevationCoord *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__wellElevationCoord*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord, sizeof(witsml14__wellElevationCoord), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord)
		return (witsml14__wellElevationCoord *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__WellVerticalCoordinateUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__wellElevationCoord*)a)->uom))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "datum", 1, 0);
		if (t)
		{
			if (!(((witsml14__wellElevationCoord*)a)->datum = soap_new_witsml14__refWellDatum(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refWellDatum(soap, t, ((witsml14__wellElevationCoord*)a)->datum))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:wellElevationCoord"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__wellElevationCoord * SOAP_FMAC2 soap_instantiate_witsml14__wellElevationCoord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__wellElevationCoord(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__wellElevationCoord *p;
	size_t k = sizeof(witsml14__wellElevationCoord);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__wellElevationCoord);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__wellElevationCoord, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__wellElevationCoord location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__wellElevationCoord::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__wellElevationCoord(soap, tag ? tag : "witsml14:wellElevationCoord", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__wellElevationCoord::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__wellElevationCoord(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__wellElevationCoord * SOAP_FMAC4 soap_get_witsml14__wellElevationCoord(struct soap *soap, witsml14__wellElevationCoord *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__wellElevationCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__wellVerticalDepthCoord::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__WellVerticalCoordinateUom(soap, &this->witsml14__wellVerticalDepthCoord::uom);
	this->witsml14__wellVerticalDepthCoord::datum = NULL;
}

void witsml14__wellVerticalDepthCoord::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__wellVerticalDepthCoord::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__wellVerticalDepthCoord(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__wellVerticalDepthCoord(struct soap *soap, const char *tag, int id, const witsml14__wellVerticalDepthCoord *a, const char *type)
{
	if (!type)
		type = "witsml14:wellVerticalDepthCoord";
	soap_set_attr(soap, "uom", soap_witsml14__WellVerticalCoordinateUom2s(soap, ((witsml14__wellVerticalDepthCoord*)a)->uom), 1);
	if (((witsml14__wellVerticalDepthCoord*)a)->datum)
	{	soap_set_attr(soap, "datum", soap_witsml14__refWellDatum2s(soap, *((witsml14__wellVerticalDepthCoord*)a)->datum), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:wellVerticalDepthCoord");
}

void *witsml14__wellVerticalDepthCoord::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__wellVerticalDepthCoord(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__wellVerticalDepthCoord * SOAP_FMAC4 soap_in_witsml14__wellVerticalDepthCoord(struct soap *soap, const char *tag, witsml14__wellVerticalDepthCoord *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__wellVerticalDepthCoord*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord, sizeof(witsml14__wellVerticalDepthCoord), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord)
		return (witsml14__wellVerticalDepthCoord *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__WellVerticalCoordinateUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__wellVerticalDepthCoord*)a)->uom))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "datum", 1, 0);
		if (t)
		{
			if (!(((witsml14__wellVerticalDepthCoord*)a)->datum = soap_new_witsml14__refWellDatum(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refWellDatum(soap, t, ((witsml14__wellVerticalDepthCoord*)a)->datum))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:wellVerticalDepthCoord"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__wellVerticalDepthCoord * SOAP_FMAC2 soap_instantiate_witsml14__wellVerticalDepthCoord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__wellVerticalDepthCoord(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__wellVerticalDepthCoord *p;
	size_t k = sizeof(witsml14__wellVerticalDepthCoord);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__wellVerticalDepthCoord);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__wellVerticalDepthCoord, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__wellVerticalDepthCoord location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__wellVerticalDepthCoord::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__wellVerticalDepthCoord(soap, tag ? tag : "witsml14:wellVerticalDepthCoord", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__wellVerticalDepthCoord::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__wellVerticalDepthCoord(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__wellVerticalDepthCoord * SOAP_FMAC4 soap_get_witsml14__wellVerticalDepthCoord(struct soap *soap, witsml14__wellVerticalDepthCoord *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__wellVerticalDepthCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__measuredDepthCoord::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__MeasuredDepthUom(soap, &this->witsml14__measuredDepthCoord::uom);
	this->witsml14__measuredDepthCoord::datum = NULL;
}

void witsml14__measuredDepthCoord::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__measuredDepthCoord::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__measuredDepthCoord(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__measuredDepthCoord(struct soap *soap, const char *tag, int id, const witsml14__measuredDepthCoord *a, const char *type)
{
	if (!type)
		type = "witsml14:measuredDepthCoord";
	soap_set_attr(soap, "uom", soap_witsml14__MeasuredDepthUom2s(soap, ((witsml14__measuredDepthCoord*)a)->uom), 1);
	if (((witsml14__measuredDepthCoord*)a)->datum)
	{	soap_set_attr(soap, "datum", soap_witsml14__refWellDatum2s(soap, *((witsml14__measuredDepthCoord*)a)->datum), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:measuredDepthCoord");
}

void *witsml14__measuredDepthCoord::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__measuredDepthCoord(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__measuredDepthCoord * SOAP_FMAC4 soap_in_witsml14__measuredDepthCoord(struct soap *soap, const char *tag, witsml14__measuredDepthCoord *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__measuredDepthCoord*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord, sizeof(witsml14__measuredDepthCoord), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord)
		return (witsml14__measuredDepthCoord *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__MeasuredDepthUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__measuredDepthCoord*)a)->uom))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "datum", 1, 0);
		if (t)
		{
			if (!(((witsml14__measuredDepthCoord*)a)->datum = soap_new_witsml14__refWellDatum(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refWellDatum(soap, t, ((witsml14__measuredDepthCoord*)a)->datum))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:measuredDepthCoord"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__measuredDepthCoord * SOAP_FMAC2 soap_instantiate_witsml14__measuredDepthCoord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__measuredDepthCoord(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__measuredDepthCoord *p;
	size_t k = sizeof(witsml14__measuredDepthCoord);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__measuredDepthCoord);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__measuredDepthCoord, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__measuredDepthCoord location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__measuredDepthCoord::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__measuredDepthCoord(soap, tag ? tag : "witsml14:measuredDepthCoord", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__measuredDepthCoord::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__measuredDepthCoord(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__measuredDepthCoord * SOAP_FMAC4 soap_get_witsml14__measuredDepthCoord(struct soap *soap, witsml14__measuredDepthCoord *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__measuredDepthCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__chronostratigraphyStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__chronostratigraphyStruct::__item);
	this->witsml14__chronostratigraphyStruct::kind = NULL;
}

void witsml14__chronostratigraphyStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__chronostratigraphyStruct::__item);
#endif
}

int witsml14__chronostratigraphyStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__chronostratigraphyStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__chronostratigraphyStruct(struct soap *soap, const char *tag, int id, const witsml14__chronostratigraphyStruct *a, const char *type)
{
	if (!type)
		type = "witsml14:chronostratigraphyStruct";
	if (((witsml14__chronostratigraphyStruct*)a)->kind)
	{	soap_set_attr(soap, "kind", soap_witsml14__ChronostratigraphyUnit2s(soap, *((witsml14__chronostratigraphyStruct*)a)->kind), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__chronostratigraphyStruct::__item, "witsml14:chronostratigraphyStruct");
}

void *witsml14__chronostratigraphyStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__chronostratigraphyStruct(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__chronostratigraphyStruct * SOAP_FMAC4 soap_in_witsml14__chronostratigraphyStruct(struct soap *soap, const char *tag, witsml14__chronostratigraphyStruct *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__chronostratigraphyStruct*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct, sizeof(witsml14__chronostratigraphyStruct), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct)
		return (witsml14__chronostratigraphyStruct *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "kind", 5, 0);
		if (t)
		{
			if (!(((witsml14__chronostratigraphyStruct*)a)->kind = (witsml14__ChronostratigraphyUnit *)soap_malloc(soap, sizeof(witsml14__ChronostratigraphyUnit))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__ChronostratigraphyUnit(soap, t, ((witsml14__chronostratigraphyStruct*)a)->kind))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__chronostratigraphyStruct::__item, "witsml14:chronostratigraphyStruct"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__chronostratigraphyStruct * SOAP_FMAC2 soap_instantiate_witsml14__chronostratigraphyStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__chronostratigraphyStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__chronostratigraphyStruct *p;
	size_t k = sizeof(witsml14__chronostratigraphyStruct);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__chronostratigraphyStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__chronostratigraphyStruct);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__chronostratigraphyStruct, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__chronostratigraphyStruct location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__chronostratigraphyStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__chronostratigraphyStruct(soap, tag ? tag : "witsml14:chronostratigraphyStruct", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__chronostratigraphyStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__chronostratigraphyStruct(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__chronostratigraphyStruct * SOAP_FMAC4 soap_get_witsml14__chronostratigraphyStruct(struct soap *soap, witsml14__chronostratigraphyStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__chronostratigraphyStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__lithostratigraphyStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__lithostratigraphyStruct::__item);
	this->witsml14__lithostratigraphyStruct::kind = NULL;
}

void witsml14__lithostratigraphyStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__lithostratigraphyStruct::__item);
#endif
}

int witsml14__lithostratigraphyStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__lithostratigraphyStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__lithostratigraphyStruct(struct soap *soap, const char *tag, int id, const witsml14__lithostratigraphyStruct *a, const char *type)
{
	if (!type)
		type = "witsml14:lithostratigraphyStruct";
	if (((witsml14__lithostratigraphyStruct*)a)->kind)
	{	soap_set_attr(soap, "kind", soap_witsml14__LithostratigraphyUnit2s(soap, *((witsml14__lithostratigraphyStruct*)a)->kind), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__lithostratigraphyStruct::__item, "witsml14:lithostratigraphyStruct");
}

void *witsml14__lithostratigraphyStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__lithostratigraphyStruct(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__lithostratigraphyStruct * SOAP_FMAC4 soap_in_witsml14__lithostratigraphyStruct(struct soap *soap, const char *tag, witsml14__lithostratigraphyStruct *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__lithostratigraphyStruct*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct, sizeof(witsml14__lithostratigraphyStruct), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct)
		return (witsml14__lithostratigraphyStruct *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "kind", 5, 0);
		if (t)
		{
			if (!(((witsml14__lithostratigraphyStruct*)a)->kind = (witsml14__LithostratigraphyUnit *)soap_malloc(soap, sizeof(witsml14__LithostratigraphyUnit))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__LithostratigraphyUnit(soap, t, ((witsml14__lithostratigraphyStruct*)a)->kind))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__lithostratigraphyStruct::__item, "witsml14:lithostratigraphyStruct"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__lithostratigraphyStruct * SOAP_FMAC2 soap_instantiate_witsml14__lithostratigraphyStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__lithostratigraphyStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__lithostratigraphyStruct *p;
	size_t k = sizeof(witsml14__lithostratigraphyStruct);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__lithostratigraphyStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__lithostratigraphyStruct);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__lithostratigraphyStruct, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__lithostratigraphyStruct location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__lithostratigraphyStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__lithostratigraphyStruct(soap, tag ? tag : "witsml14:lithostratigraphyStruct", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__lithostratigraphyStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__lithostratigraphyStruct(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__lithostratigraphyStruct * SOAP_FMAC4 soap_get_witsml14__lithostratigraphyStruct(struct soap *soap, witsml14__lithostratigraphyStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__lithostratigraphyStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__objectSequence::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractPositiveCount(soap, &this->witsml14__objectSequence::__item);
	this->witsml14__objectSequence::description = NULL;
}

void witsml14__objectSequence::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int witsml14__objectSequence::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__objectSequence(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__objectSequence(struct soap *soap, const char *tag, int id, const witsml14__objectSequence *a, const char *type)
{
	if (!type)
		type = "witsml14:objectSequence";
	if (((witsml14__objectSequence*)a)->description)
	{	soap_set_attr(soap, "description", soap_witsml14__descriptionString2s(soap, *((witsml14__objectSequence*)a)->description), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractPositiveCount(soap, tag, id, &a->witsml14__objectSequence::__item, "witsml14:objectSequence");
}

void *witsml14__objectSequence::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__objectSequence(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__objectSequence * SOAP_FMAC4 soap_in_witsml14__objectSequence(struct soap *soap, const char *tag, witsml14__objectSequence *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__objectSequence*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence, sizeof(witsml14__objectSequence), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence)
		return (witsml14__objectSequence *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "description", 1, 0);
		if (t)
		{
			if (!(((witsml14__objectSequence*)a)->description = soap_new_witsml14__descriptionString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__descriptionString(soap, t, ((witsml14__objectSequence*)a)->description))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractPositiveCount(soap, tag, &a->witsml14__objectSequence::__item, "witsml14:objectSequence"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__objectSequence * SOAP_FMAC2 soap_instantiate_witsml14__objectSequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__objectSequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__objectSequence *p;
	size_t k = sizeof(witsml14__objectSequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__objectSequence, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__objectSequence);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__objectSequence, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__objectSequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__objectSequence::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__objectSequence(soap, tag ? tag : "witsml14:objectSequence", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__objectSequence::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__objectSequence(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__objectSequence * SOAP_FMAC4 soap_get_witsml14__objectSequence(struct soap *soap, witsml14__objectSequence *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__objectSequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__wellKnownNameStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__wellKnownNameStruct::__item);
	soap_default_witsml14__nameString(soap, &this->witsml14__wellKnownNameStruct::namingSystem);
	this->witsml14__wellKnownNameStruct::code = NULL;
}

void witsml14__wellKnownNameStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__wellKnownNameStruct::__item);
#endif
}

int witsml14__wellKnownNameStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__wellKnownNameStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__wellKnownNameStruct(struct soap *soap, const char *tag, int id, const witsml14__wellKnownNameStruct *a, const char *type)
{
	if (!type)
		type = "witsml14:wellKnownNameStruct";
	soap_set_attr(soap, "namingSystem", soap_witsml14__nameString2s(soap, ((witsml14__wellKnownNameStruct*)a)->namingSystem), 1);
	if (((witsml14__wellKnownNameStruct*)a)->code)
	{	soap_set_attr(soap, "code", soap_witsml14__kindString2s(soap, *((witsml14__wellKnownNameStruct*)a)->code), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__wellKnownNameStruct::__item, "witsml14:wellKnownNameStruct");
}

void *witsml14__wellKnownNameStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__wellKnownNameStruct(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__wellKnownNameStruct * SOAP_FMAC4 soap_in_witsml14__wellKnownNameStruct(struct soap *soap, const char *tag, witsml14__wellKnownNameStruct *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__wellKnownNameStruct*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct, sizeof(witsml14__wellKnownNameStruct), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct)
		return (witsml14__wellKnownNameStruct *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__nameString(soap, soap_attr_value(soap, "namingSystem", 1, 3), &((witsml14__wellKnownNameStruct*)a)->namingSystem))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "code", 1, 0);
		if (t)
		{
			if (!(((witsml14__wellKnownNameStruct*)a)->code = soap_new_witsml14__kindString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__kindString(soap, t, ((witsml14__wellKnownNameStruct*)a)->code))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__wellKnownNameStruct::__item, "witsml14:wellKnownNameStruct"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__wellKnownNameStruct * SOAP_FMAC2 soap_instantiate_witsml14__wellKnownNameStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__wellKnownNameStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__wellKnownNameStruct *p;
	size_t k = sizeof(witsml14__wellKnownNameStruct);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__wellKnownNameStruct);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__wellKnownNameStruct, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__wellKnownNameStruct location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__wellKnownNameStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__wellKnownNameStruct(soap, tag ? tag : "witsml14:wellKnownNameStruct", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__wellKnownNameStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__wellKnownNameStruct(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__wellKnownNameStruct * SOAP_FMAC4 soap_get_witsml14__wellKnownNameStruct(struct soap *soap, witsml14__wellKnownNameStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__wellKnownNameStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__shortNameStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractString32(soap, &this->witsml14__shortNameStruct::__item);
	this->witsml14__shortNameStruct::namingSystem = NULL;
}

void witsml14__shortNameStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractString32(soap, &this->witsml14__shortNameStruct::__item);
#endif
}

int witsml14__shortNameStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__shortNameStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__shortNameStruct(struct soap *soap, const char *tag, int id, const witsml14__shortNameStruct *a, const char *type)
{
	if (!type)
		type = "witsml14:shortNameStruct";
	if (((witsml14__shortNameStruct*)a)->namingSystem)
	{	soap_set_attr(soap, "namingSystem", soap_witsml14__nameString2s(soap, *((witsml14__shortNameStruct*)a)->namingSystem), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractString32(soap, tag, id, &a->witsml14__shortNameStruct::__item, "witsml14:shortNameStruct");
}

void *witsml14__shortNameStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__shortNameStruct(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__shortNameStruct * SOAP_FMAC4 soap_in_witsml14__shortNameStruct(struct soap *soap, const char *tag, witsml14__shortNameStruct *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__shortNameStruct*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct, sizeof(witsml14__shortNameStruct), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct)
		return (witsml14__shortNameStruct *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "namingSystem", 1, 0);
		if (t)
		{
			if (!(((witsml14__shortNameStruct*)a)->namingSystem = soap_new_witsml14__nameString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__nameString(soap, t, ((witsml14__shortNameStruct*)a)->namingSystem))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractString32(soap, tag, &a->witsml14__shortNameStruct::__item, "witsml14:shortNameStruct"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__shortNameStruct * SOAP_FMAC2 soap_instantiate_witsml14__shortNameStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__shortNameStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__shortNameStruct *p;
	size_t k = sizeof(witsml14__shortNameStruct);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__shortNameStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__shortNameStruct);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__shortNameStruct, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__shortNameStruct location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__shortNameStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__shortNameStruct(soap, tag ? tag : "witsml14:shortNameStruct", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__shortNameStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__shortNameStruct(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__shortNameStruct * SOAP_FMAC4 soap_get_witsml14__shortNameStruct(struct soap *soap, witsml14__shortNameStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__shortNameStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__nameStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__nameStruct::__item);
	this->witsml14__nameStruct::namingSystem = NULL;
}

void witsml14__nameStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__nameStruct::__item);
#endif
}

int witsml14__nameStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__nameStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__nameStruct(struct soap *soap, const char *tag, int id, const witsml14__nameStruct *a, const char *type)
{
	if (!type)
		type = "witsml14:nameStruct";
	if (((witsml14__nameStruct*)a)->namingSystem)
	{	soap_set_attr(soap, "namingSystem", soap_witsml14__nameString2s(soap, *((witsml14__nameStruct*)a)->namingSystem), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__nameStruct::__item, "witsml14:nameStruct");
}

void *witsml14__nameStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__nameStruct(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__nameStruct * SOAP_FMAC4 soap_in_witsml14__nameStruct(struct soap *soap, const char *tag, witsml14__nameStruct *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__nameStruct*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct, sizeof(witsml14__nameStruct), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct)
		return (witsml14__nameStruct *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "namingSystem", 1, 0);
		if (t)
		{
			if (!(((witsml14__nameStruct*)a)->namingSystem = soap_new_witsml14__nameString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__nameString(soap, t, ((witsml14__nameStruct*)a)->namingSystem))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__nameStruct::__item, "witsml14:nameStruct"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__nameStruct * SOAP_FMAC2 soap_instantiate_witsml14__nameStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__nameStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__nameStruct *p;
	size_t k = sizeof(witsml14__nameStruct);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__nameStruct);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__nameStruct, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__nameStruct location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__nameStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__nameStruct(soap, tag ? tag : "witsml14:nameStruct", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__nameStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__nameStruct(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__nameStruct * SOAP_FMAC4 soap_get_witsml14__nameStruct(struct soap *soap, witsml14__nameStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__nameStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__extensionvalue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractMaximumLengthString(soap, &this->witsml14__extensionvalue::__item);
	this->witsml14__extensionvalue::uom = NULL;
}

void witsml14__extensionvalue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractMaximumLengthString(soap, &this->witsml14__extensionvalue::__item);
#endif
}

int witsml14__extensionvalue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__extensionvalue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__extensionvalue(struct soap *soap, const char *tag, int id, const witsml14__extensionvalue *a, const char *type)
{
	if (!type)
		type = "witsml14:extensionvalue";
	if (((witsml14__extensionvalue*)a)->uom)
	{	soap_set_attr(soap, "uom", soap_witsml14__uomString2s(soap, *((witsml14__extensionvalue*)a)->uom), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractMaximumLengthString(soap, tag, id, &a->witsml14__extensionvalue::__item, "witsml14:extensionvalue");
}

void *witsml14__extensionvalue::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__extensionvalue(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__extensionvalue * SOAP_FMAC4 soap_in_witsml14__extensionvalue(struct soap *soap, const char *tag, witsml14__extensionvalue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__extensionvalue*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue, sizeof(witsml14__extensionvalue), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue)
		return (witsml14__extensionvalue *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uom", 1, 0);
		if (t)
		{
			if (!(((witsml14__extensionvalue*)a)->uom = soap_new_witsml14__uomString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uomString(soap, t, ((witsml14__extensionvalue*)a)->uom))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractMaximumLengthString(soap, tag, &a->witsml14__extensionvalue::__item, "witsml14:extensionvalue"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__extensionvalue * SOAP_FMAC2 soap_instantiate_witsml14__extensionvalue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__extensionvalue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__extensionvalue *p;
	size_t k = sizeof(witsml14__extensionvalue);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__extensionvalue);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__extensionvalue, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__extensionvalue location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__extensionvalue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__extensionvalue(soap, tag ? tag : "witsml14:extensionvalue", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__extensionvalue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__extensionvalue(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__extensionvalue * SOAP_FMAC4 soap_get_witsml14__extensionvalue(struct soap *soap, witsml14__extensionvalue *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__extensionvalue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__timestampedCommentString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractCommentString(soap, &this->witsml14__timestampedCommentString::__item);
	soap_default_witsml14__timestamp(soap, &this->witsml14__timestampedCommentString::dTim);
}

void witsml14__timestampedCommentString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractCommentString(soap, &this->witsml14__timestampedCommentString::__item);
#endif
}

int witsml14__timestampedCommentString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__timestampedCommentString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__timestampedCommentString(struct soap *soap, const char *tag, int id, const witsml14__timestampedCommentString *a, const char *type)
{
	if (!type)
		type = "witsml14:timestampedCommentString";
	soap_set_attr(soap, "dTim", soap_witsml14__timestamp2s(soap, ((witsml14__timestampedCommentString*)a)->dTim), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractCommentString(soap, tag, id, &a->witsml14__timestampedCommentString::__item, "witsml14:timestampedCommentString");
}

void *witsml14__timestampedCommentString::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__timestampedCommentString(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__timestampedCommentString * SOAP_FMAC4 soap_in_witsml14__timestampedCommentString(struct soap *soap, const char *tag, witsml14__timestampedCommentString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__timestampedCommentString*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString, sizeof(witsml14__timestampedCommentString), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString)
		return (witsml14__timestampedCommentString *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__timestamp(soap, soap_attr_value(soap, "dTim", 5, 3), &((witsml14__timestampedCommentString*)a)->dTim))
		return NULL;
	if (!soap_in_witsml14__abstractCommentString(soap, tag, &a->witsml14__timestampedCommentString::__item, "witsml14:timestampedCommentString"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__timestampedCommentString * SOAP_FMAC2 soap_instantiate_witsml14__timestampedCommentString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__timestampedCommentString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__timestampedCommentString *p;
	size_t k = sizeof(witsml14__timestampedCommentString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedCommentString, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__timestampedCommentString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__timestampedCommentString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__timestampedCommentString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__timestampedCommentString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__timestampedCommentString(soap, tag ? tag : "witsml14:timestampedCommentString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__timestampedCommentString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__timestampedCommentString(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__timestampedCommentString * SOAP_FMAC4 soap_get_witsml14__timestampedCommentString(struct soap *soap, witsml14__timestampedCommentString *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__timestampedCommentString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__refPositiveCount::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractPositiveCount(soap, &this->witsml14__refPositiveCount::__item);
	this->witsml14__refPositiveCount::uidRef = NULL;
}

void witsml14__refPositiveCount::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int witsml14__refPositiveCount::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__refPositiveCount(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__refPositiveCount(struct soap *soap, const char *tag, int id, const witsml14__refPositiveCount *a, const char *type)
{
	if (!type)
		type = "witsml14:refPositiveCount";
	if (((witsml14__refPositiveCount*)a)->uidRef)
	{	soap_set_attr(soap, "uidRef", soap_witsml14__refString2s(soap, *((witsml14__refPositiveCount*)a)->uidRef), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractPositiveCount(soap, tag, id, &a->witsml14__refPositiveCount::__item, "witsml14:refPositiveCount");
}

void *witsml14__refPositiveCount::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__refPositiveCount(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__refPositiveCount * SOAP_FMAC4 soap_in_witsml14__refPositiveCount(struct soap *soap, const char *tag, witsml14__refPositiveCount *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__refPositiveCount*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount, sizeof(witsml14__refPositiveCount), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount)
		return (witsml14__refPositiveCount *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uidRef", 1, 0);
		if (t)
		{
			if (!(((witsml14__refPositiveCount*)a)->uidRef = soap_new_witsml14__refString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refString(soap, t, ((witsml14__refPositiveCount*)a)->uidRef))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractPositiveCount(soap, tag, &a->witsml14__refPositiveCount::__item, "witsml14:refPositiveCount"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__refPositiveCount * SOAP_FMAC2 soap_instantiate_witsml14__refPositiveCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__refPositiveCount(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__refPositiveCount *p;
	size_t k = sizeof(witsml14__refPositiveCount);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__refPositiveCount, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__refPositiveCount);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__refPositiveCount, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__refPositiveCount location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__refPositiveCount::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__refPositiveCount(soap, tag ? tag : "witsml14:refPositiveCount", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__refPositiveCount::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__refPositiveCount(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__refPositiveCount * SOAP_FMAC4 soap_get_witsml14__refPositiveCount(struct soap *soap, witsml14__refPositiveCount *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__refPositiveCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__refObjectString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__refObjectString::__item);
	soap_default_witsml14__nameString(soap, &this->witsml14__refObjectString::object);
	this->witsml14__refObjectString::uidRef = NULL;
}

void witsml14__refObjectString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__refObjectString::__item);
#endif
}

int witsml14__refObjectString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__refObjectString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__refObjectString(struct soap *soap, const char *tag, int id, const witsml14__refObjectString *a, const char *type)
{
	if (!type)
		type = "witsml14:refObjectString";
	soap_set_attr(soap, "object", soap_witsml14__nameString2s(soap, ((witsml14__refObjectString*)a)->object), 1);
	if (((witsml14__refObjectString*)a)->uidRef)
	{	soap_set_attr(soap, "uidRef", soap_witsml14__refString2s(soap, *((witsml14__refObjectString*)a)->uidRef), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__refObjectString::__item, "witsml14:refObjectString");
}

void *witsml14__refObjectString::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__refObjectString(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__refObjectString * SOAP_FMAC4 soap_in_witsml14__refObjectString(struct soap *soap, const char *tag, witsml14__refObjectString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__refObjectString*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString, sizeof(witsml14__refObjectString), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString)
		return (witsml14__refObjectString *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__nameString(soap, soap_attr_value(soap, "object", 1, 3), &((witsml14__refObjectString*)a)->object))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "uidRef", 1, 0);
		if (t)
		{
			if (!(((witsml14__refObjectString*)a)->uidRef = soap_new_witsml14__refString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refString(soap, t, ((witsml14__refObjectString*)a)->uidRef))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__refObjectString::__item, "witsml14:refObjectString"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__refObjectString * SOAP_FMAC2 soap_instantiate_witsml14__refObjectString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__refObjectString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__refObjectString *p;
	size_t k = sizeof(witsml14__refObjectString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__refObjectString, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__refObjectString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__refObjectString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__refObjectString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__refObjectString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__refObjectString(soap, tag ? tag : "witsml14:refObjectString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__refObjectString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__refObjectString(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__refObjectString * SOAP_FMAC4 soap_get_witsml14__refObjectString(struct soap *soap, witsml14__refObjectString *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__refObjectString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__refNameString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractNameString(soap, &this->witsml14__refNameString::__item);
	this->witsml14__refNameString::uidRef = NULL;
}

void witsml14__refNameString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractNameString(soap, &this->witsml14__refNameString::__item);
#endif
}

int witsml14__refNameString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__refNameString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__refNameString(struct soap *soap, const char *tag, int id, const witsml14__refNameString *a, const char *type)
{
	if (!type)
		type = "witsml14:refNameString";
	if (((witsml14__refNameString*)a)->uidRef)
	{	soap_set_attr(soap, "uidRef", soap_witsml14__refString2s(soap, *((witsml14__refNameString*)a)->uidRef), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractNameString(soap, tag, id, &a->witsml14__refNameString::__item, "witsml14:refNameString");
}

void *witsml14__refNameString::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__refNameString(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__refNameString * SOAP_FMAC4 soap_in_witsml14__refNameString(struct soap *soap, const char *tag, witsml14__refNameString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__refNameString*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString, sizeof(witsml14__refNameString), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString)
		return (witsml14__refNameString *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uidRef", 1, 0);
		if (t)
		{
			if (!(((witsml14__refNameString*)a)->uidRef = soap_new_witsml14__refString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__refString(soap, t, ((witsml14__refNameString*)a)->uidRef))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractNameString(soap, tag, &a->witsml14__refNameString::__item, "witsml14:refNameString"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__refNameString * SOAP_FMAC2 soap_instantiate_witsml14__refNameString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__refNameString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__refNameString *p;
	size_t k = sizeof(witsml14__refNameString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__refNameString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__refNameString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__refNameString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__refNameString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__refNameString(soap, tag ? tag : "witsml14:refNameString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__refNameString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__refNameString(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__refNameString * SOAP_FMAC4 soap_get_witsml14__refNameString(struct soap *soap, witsml14__refNameString *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__refNameString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__ratioGenericMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__uomString(soap, &this->witsml14__ratioGenericMeasure::uom);
	this->witsml14__ratioGenericMeasure::numerator = NULL;
	this->witsml14__ratioGenericMeasure::denominator = NULL;
}

void witsml14__ratioGenericMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__ratioGenericMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__ratioGenericMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__ratioGenericMeasure(struct soap *soap, const char *tag, int id, const witsml14__ratioGenericMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:ratioGenericMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__uomString2s(soap, ((witsml14__ratioGenericMeasure*)a)->uom), 1);
	if (((witsml14__ratioGenericMeasure*)a)->numerator)
	{	soap_set_attr(soap, "numerator", soap_witsml14__unitlessQuantity2s(soap, *((witsml14__ratioGenericMeasure*)a)->numerator), 1);
	}
	if (((witsml14__ratioGenericMeasure*)a)->denominator)
	{	soap_set_attr(soap, "denominator", soap_witsml14__unitlessQuantity2s(soap, *((witsml14__ratioGenericMeasure*)a)->denominator), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:ratioGenericMeasure");
}

void *witsml14__ratioGenericMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__ratioGenericMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__ratioGenericMeasure * SOAP_FMAC4 soap_in_witsml14__ratioGenericMeasure(struct soap *soap, const char *tag, witsml14__ratioGenericMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__ratioGenericMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure, sizeof(witsml14__ratioGenericMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure)
		return (witsml14__ratioGenericMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__uomString(soap, soap_attr_value(soap, "uom", 1, 3), &((witsml14__ratioGenericMeasure*)a)->uom))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "numerator", 5, 0);
		if (t)
		{
			if (!(((witsml14__ratioGenericMeasure*)a)->numerator = (double *)soap_malloc(soap, sizeof(double))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__unitlessQuantity(soap, t, ((witsml14__ratioGenericMeasure*)a)->numerator))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "denominator", 5, 0);
		if (t)
		{
			if (!(((witsml14__ratioGenericMeasure*)a)->denominator = (double *)soap_malloc(soap, sizeof(double))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__unitlessQuantity(soap, t, ((witsml14__ratioGenericMeasure*)a)->denominator))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:ratioGenericMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__ratioGenericMeasure * SOAP_FMAC2 soap_instantiate_witsml14__ratioGenericMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__ratioGenericMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__ratioGenericMeasure *p;
	size_t k = sizeof(witsml14__ratioGenericMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__ratioGenericMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__ratioGenericMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__ratioGenericMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__ratioGenericMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__ratioGenericMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__ratioGenericMeasure(soap, tag ? tag : "witsml14:ratioGenericMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__ratioGenericMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__ratioGenericMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__ratioGenericMeasure * SOAP_FMAC4 soap_get_witsml14__ratioGenericMeasure(struct soap *soap, witsml14__ratioGenericMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__ratioGenericMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__genericMeasure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__uomString(soap, &this->witsml14__genericMeasure::uom);
}

void witsml14__genericMeasure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__genericMeasure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__genericMeasure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__genericMeasure(struct soap *soap, const char *tag, int id, const witsml14__genericMeasure *a, const char *type)
{
	if (!type)
		type = "witsml14:genericMeasure";
	soap_set_attr(soap, "uom", soap_witsml14__uomString2s(soap, ((witsml14__genericMeasure*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:genericMeasure");
}

void *witsml14__genericMeasure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__genericMeasure(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__genericMeasure * SOAP_FMAC4 soap_in_witsml14__genericMeasure(struct soap *soap, const char *tag, witsml14__genericMeasure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__genericMeasure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure, sizeof(witsml14__genericMeasure), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure)
		return (witsml14__genericMeasure *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__uomString(soap, soap_attr_value(soap, "uom", 1, 3), &((witsml14__genericMeasure*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:genericMeasure"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__genericMeasure * SOAP_FMAC2 soap_instantiate_witsml14__genericMeasure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__genericMeasure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__genericMeasure *p;
	size_t k = sizeof(witsml14__genericMeasure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__genericMeasure, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__genericMeasure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__genericMeasure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__genericMeasure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__genericMeasure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__genericMeasure(soap, tag ? tag : "witsml14:genericMeasure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__genericMeasure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__genericMeasure(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__genericMeasure * SOAP_FMAC4 soap_get_witsml14__genericMeasure(struct soap *soap, witsml14__genericMeasure *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__genericMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__measureOrQuantity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	this->witsml14__measureOrQuantity::uom = NULL;
}

void witsml14__measureOrQuantity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__measureOrQuantity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__measureOrQuantity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__measureOrQuantity(struct soap *soap, const char *tag, int id, const witsml14__measureOrQuantity *a, const char *type)
{
	if (!type)
		type = "witsml14:measureOrQuantity";
	if (((witsml14__measureOrQuantity*)a)->uom)
	{	soap_set_attr(soap, "uom", soap_witsml14__uomString2s(soap, *((witsml14__measureOrQuantity*)a)->uom), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:measureOrQuantity");
}

void *witsml14__measureOrQuantity::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__measureOrQuantity(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__measureOrQuantity * SOAP_FMAC4 soap_in_witsml14__measureOrQuantity(struct soap *soap, const char *tag, witsml14__measureOrQuantity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__measureOrQuantity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity, sizeof(witsml14__measureOrQuantity), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity)
		return (witsml14__measureOrQuantity *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uom", 1, 0);
		if (t)
		{
			if (!(((witsml14__measureOrQuantity*)a)->uom = soap_new_witsml14__uomString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uomString(soap, t, ((witsml14__measureOrQuantity*)a)->uom))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:measureOrQuantity"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__measureOrQuantity * SOAP_FMAC2 soap_instantiate_witsml14__measureOrQuantity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__measureOrQuantity(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__measureOrQuantity *p;
	size_t k = sizeof(witsml14__measureOrQuantity);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__measureOrQuantity, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__measureOrQuantity);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__measureOrQuantity, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__measureOrQuantity location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__measureOrQuantity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__measureOrQuantity(soap, tag ? tag : "witsml14:measureOrQuantity", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__measureOrQuantity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__measureOrQuantity(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__measureOrQuantity * SOAP_FMAC4 soap_get_witsml14__measureOrQuantity(struct soap *soap, witsml14__measureOrQuantity *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__measureOrQuantity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__volumePerVolumeMeasurePercent::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PercentUom(soap, &this->witsml14__volumePerVolumeMeasurePercent::uom);
}

void witsml14__volumePerVolumeMeasurePercent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__volumePerVolumeMeasurePercent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__volumePerVolumeMeasurePercent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__volumePerVolumeMeasurePercent(struct soap *soap, const char *tag, int id, const witsml14__volumePerVolumeMeasurePercent *a, const char *type)
{
	if (!type)
		type = "witsml14:volumePerVolumeMeasurePercent";
	soap_set_attr(soap, "uom", soap_witsml14__PercentUom2s(soap, ((witsml14__volumePerVolumeMeasurePercent*)a)->uom), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerVolumeMeasurePercent");
}

void *witsml14__volumePerVolumeMeasurePercent::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__volumePerVolumeMeasurePercent(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__volumePerVolumeMeasurePercent * SOAP_FMAC4 soap_in_witsml14__volumePerVolumeMeasurePercent(struct soap *soap, const char *tag, witsml14__volumePerVolumeMeasurePercent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__volumePerVolumeMeasurePercent*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent, sizeof(witsml14__volumePerVolumeMeasurePercent), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent)
		return (witsml14__volumePerVolumeMeasurePercent *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PercentUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__volumePerVolumeMeasurePercent*)a)->uom))
		return NULL;
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:volumePerVolumeMeasurePercent"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__volumePerVolumeMeasurePercent * SOAP_FMAC2 soap_instantiate_witsml14__volumePerVolumeMeasurePercent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__volumePerVolumeMeasurePercent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__volumePerVolumeMeasurePercent *p;
	size_t k = sizeof(witsml14__volumePerVolumeMeasurePercent);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__volumePerVolumeMeasurePercent, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__volumePerVolumeMeasurePercent);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__volumePerVolumeMeasurePercent, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__volumePerVolumeMeasurePercent location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__volumePerVolumeMeasurePercent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__volumePerVolumeMeasurePercent(soap, tag ? tag : "witsml14:volumePerVolumeMeasurePercent", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__volumePerVolumeMeasurePercent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__volumePerVolumeMeasurePercent(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__volumePerVolumeMeasurePercent * SOAP_FMAC4 soap_get_witsml14__volumePerVolumeMeasurePercent(struct soap *soap, witsml14__volumePerVolumeMeasurePercent *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__volumePerVolumeMeasurePercent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__yAxisAzimuth::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__abstractMeasure::soap_default(soap);
	soap_default_witsml14__PlaneAngleUom(soap, &this->witsml14__yAxisAzimuth::uom);
	this->witsml14__yAxisAzimuth::northDirection = NULL;
}

void witsml14__yAxisAzimuth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->witsml14__abstractMeasure::soap_serialize(soap);
#endif
}

int witsml14__yAxisAzimuth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__yAxisAzimuth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__yAxisAzimuth(struct soap *soap, const char *tag, int id, const witsml14__yAxisAzimuth *a, const char *type)
{
	if (!type)
		type = "witsml14:yAxisAzimuth";
	soap_set_attr(soap, "uom", soap_witsml14__PlaneAngleUom2s(soap, ((witsml14__yAxisAzimuth*)a)->uom), 1);
	if (((witsml14__yAxisAzimuth*)a)->northDirection)
	{	soap_set_attr(soap, "northDirection", soap_witsml14__AziRef2s(soap, *((witsml14__yAxisAzimuth*)a)->northDirection), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractDouble(soap, tag, id, &a->witsml14__abstractMeasure::__item, "witsml14:yAxisAzimuth");
}

void *witsml14__yAxisAzimuth::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__yAxisAzimuth(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__yAxisAzimuth * SOAP_FMAC4 soap_in_witsml14__yAxisAzimuth(struct soap *soap, const char *tag, witsml14__yAxisAzimuth *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__yAxisAzimuth*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth, sizeof(witsml14__yAxisAzimuth), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth)
		return (witsml14__yAxisAzimuth *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__PlaneAngleUom(soap, soap_attr_value(soap, "uom", 5, 3), &((witsml14__yAxisAzimuth*)a)->uom))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "northDirection", 5, 0);
		if (t)
		{
			if (!(((witsml14__yAxisAzimuth*)a)->northDirection = (witsml14__AziRef *)soap_malloc(soap, sizeof(witsml14__AziRef))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__AziRef(soap, t, ((witsml14__yAxisAzimuth*)a)->northDirection))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractDouble(soap, tag, &a->witsml14__abstractMeasure::__item, "witsml14:yAxisAzimuth"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__yAxisAzimuth * SOAP_FMAC2 soap_instantiate_witsml14__yAxisAzimuth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__yAxisAzimuth(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__yAxisAzimuth *p;
	size_t k = sizeof(witsml14__yAxisAzimuth);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__yAxisAzimuth);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__yAxisAzimuth, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__yAxisAzimuth location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__yAxisAzimuth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__yAxisAzimuth(soap, tag ? tag : "witsml14:yAxisAzimuth", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__yAxisAzimuth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__yAxisAzimuth(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__yAxisAzimuth * SOAP_FMAC4 soap_get_witsml14__yAxisAzimuth(struct soap *soap, witsml14__yAxisAzimuth *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__yAxisAzimuth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__timestampedTimeZone::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__abstractTimeZone(soap, &this->witsml14__timestampedTimeZone::__item);
	this->witsml14__timestampedTimeZone::dTim = NULL;
}

void witsml14__timestampedTimeZone::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_witsml14__abstractTimeZone(soap, &this->witsml14__timestampedTimeZone::__item);
#endif
}

int witsml14__timestampedTimeZone::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__timestampedTimeZone(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__timestampedTimeZone(struct soap *soap, const char *tag, int id, const witsml14__timestampedTimeZone *a, const char *type)
{
	if (!type)
		type = "witsml14:timestampedTimeZone";
	if (((witsml14__timestampedTimeZone*)a)->dTim)
	{	soap_set_attr(soap, "dTim", soap_witsml14__timestamp2s(soap, *((witsml14__timestampedTimeZone*)a)->dTim), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_witsml14__abstractTimeZone(soap, tag, id, &a->witsml14__timestampedTimeZone::__item, "witsml14:timestampedTimeZone");
}

void *witsml14__timestampedTimeZone::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__timestampedTimeZone(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__timestampedTimeZone * SOAP_FMAC4 soap_in_witsml14__timestampedTimeZone(struct soap *soap, const char *tag, witsml14__timestampedTimeZone *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (witsml14__timestampedTimeZone*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone, sizeof(witsml14__timestampedTimeZone), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone)
		return (witsml14__timestampedTimeZone *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "dTim", 5, 0);
		if (t)
		{
			if (!(((witsml14__timestampedTimeZone*)a)->dTim = (struct tm *)soap_malloc(soap, sizeof(struct tm))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__timestamp(soap, t, ((witsml14__timestampedTimeZone*)a)->dTim))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (!soap_in_witsml14__abstractTimeZone(soap, tag, &a->witsml14__timestampedTimeZone::__item, "witsml14:timestampedTimeZone"))
		return NULL;
	return a;
}

SOAP_FMAC1 witsml14__timestampedTimeZone * SOAP_FMAC2 soap_instantiate_witsml14__timestampedTimeZone(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__timestampedTimeZone(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__timestampedTimeZone *p;
	size_t k = sizeof(witsml14__timestampedTimeZone);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__timestampedTimeZone);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__timestampedTimeZone, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__timestampedTimeZone location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__timestampedTimeZone::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__timestampedTimeZone(soap, tag ? tag : "witsml14:timestampedTimeZone", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__timestampedTimeZone::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__timestampedTimeZone(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__timestampedTimeZone * SOAP_FMAC4 soap_get_witsml14__timestampedTimeZone(struct soap *soap, witsml14__timestampedTimeZone *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__timestampedTimeZone(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREdocumentFileCreation::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentFileCreation::fileCreationDate);
	this->witsml14__cs_USCOREdocumentFileCreation::softwareName = NULL;
	this->witsml14__cs_USCOREdocumentFileCreation::fileCreator = NULL;
	this->witsml14__cs_USCOREdocumentFileCreation::comment = NULL;
}

void witsml14__cs_USCOREdocumentFileCreation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__cs_USCOREdocumentFileCreation::fileCreationDate, SOAP_TYPE_witsml14__timestamp);
	soap_serialize_witsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentFileCreation::fileCreationDate);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREdocumentFileCreation::softwareName);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREdocumentFileCreation::fileCreator);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREdocumentFileCreation::comment);
#endif
}

int witsml14__cs_USCOREdocumentFileCreation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREdocumentFileCreation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREdocumentFileCreation(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREdocumentFileCreation *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_documentFileCreation";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation), type))
		return soap->error;
	if (soap_out_witsml14__timestamp(soap, "witsml14:fileCreationDate", -1, &a->witsml14__cs_USCOREdocumentFileCreation::fileCreationDate, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:softwareName", -1, &a->witsml14__cs_USCOREdocumentFileCreation::softwareName, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:fileCreator", -1, &a->witsml14__cs_USCOREdocumentFileCreation::fileCreator, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comment", -1, &a->witsml14__cs_USCOREdocumentFileCreation::comment, "witsml14:commentString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREdocumentFileCreation::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREdocumentFileCreation(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentFileCreation * SOAP_FMAC4 soap_in_witsml14__cs_USCOREdocumentFileCreation(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentFileCreation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREdocumentFileCreation*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, sizeof(witsml14__cs_USCOREdocumentFileCreation), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREdocumentFileCreation *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_fileCreationDate1 = 1;
	size_t soap_flag_softwareName1 = 1;
	size_t soap_flag_fileCreator1 = 1;
	size_t soap_flag_comment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileCreationDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_witsml14__timestamp(soap, "witsml14:fileCreationDate", &a->witsml14__cs_USCOREdocumentFileCreation::fileCreationDate, "witsml14:timestamp"))
				{	soap_flag_fileCreationDate1--;
					continue;
				}
			}
			if (soap_flag_softwareName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:softwareName", &a->witsml14__cs_USCOREdocumentFileCreation::softwareName, "witsml14:nameString"))
				{	soap_flag_softwareName1--;
					continue;
				}
			}
			if (soap_flag_fileCreator1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:fileCreator", &a->witsml14__cs_USCOREdocumentFileCreation::fileCreator, "witsml14:nameString"))
				{	soap_flag_fileCreator1--;
					continue;
				}
			}
			if (soap_flag_comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comment", &a->witsml14__cs_USCOREdocumentFileCreation::comment, "witsml14:commentString"))
				{	soap_flag_comment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_fileCreationDate1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREdocumentFileCreation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, sizeof(witsml14__cs_USCOREdocumentFileCreation), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREdocumentFileCreation * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREdocumentFileCreation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREdocumentFileCreation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREdocumentFileCreation *p;
	size_t k = sizeof(witsml14__cs_USCOREdocumentFileCreation);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREdocumentFileCreation);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREdocumentFileCreation, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREdocumentFileCreation location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREdocumentFileCreation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREdocumentFileCreation(soap, tag ? tag : "witsml14:cs_documentFileCreation", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREdocumentFileCreation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREdocumentFileCreation(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentFileCreation * SOAP_FMAC4 soap_get_witsml14__cs_USCOREdocumentFileCreation(struct soap *soap, witsml14__cs_USCOREdocumentFileCreation *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREdocumentFileCreation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__cs_USCOREdocumentInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->witsml14__cs_USCOREdocumentInfo::documentName = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, &this->witsml14__cs_USCOREdocumentInfo::documentAlias);
	this->witsml14__cs_USCOREdocumentInfo::documentDate = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, &this->witsml14__cs_USCOREdocumentInfo::documentClass);
	this->witsml14__cs_USCOREdocumentInfo::fileCreationInformation = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, &this->witsml14__cs_USCOREdocumentInfo::securityInformation);
	this->witsml14__cs_USCOREdocumentInfo::disclaimer = NULL;
	this->witsml14__cs_USCOREdocumentInfo::auditTrail = NULL;
	this->witsml14__cs_USCOREdocumentInfo::owner = NULL;
	this->witsml14__cs_USCOREdocumentInfo::comment = NULL;
}

void witsml14__cs_USCOREdocumentInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__nameStruct(soap, &this->witsml14__cs_USCOREdocumentInfo::documentName);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, &this->witsml14__cs_USCOREdocumentInfo::documentAlias);
	soap_serialize_PointerTowitsml14__timestamp(soap, &this->witsml14__cs_USCOREdocumentInfo::documentDate);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, &this->witsml14__cs_USCOREdocumentInfo::documentClass);
	soap_serialize_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, &this->witsml14__cs_USCOREdocumentInfo::fileCreationInformation);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, &this->witsml14__cs_USCOREdocumentInfo::securityInformation);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREdocumentInfo::disclaimer);
	soap_serialize_PointerTowitsml14__cs_USCOREdocumentAudit(soap, &this->witsml14__cs_USCOREdocumentInfo::auditTrail);
	soap_serialize_PointerTowitsml14__nameString(soap, &this->witsml14__cs_USCOREdocumentInfo::owner);
	soap_serialize_PointerTowitsml14__commentString(soap, &this->witsml14__cs_USCOREdocumentInfo::comment);
#endif
}

int witsml14__cs_USCOREdocumentInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__cs_USCOREdocumentInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__cs_USCOREdocumentInfo(struct soap *soap, const char *tag, int id, const witsml14__cs_USCOREdocumentInfo *a, const char *type)
{
	if (!type)
		type = "witsml14:cs_documentInfo";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo), type))
		return soap->error;
	if (!a->witsml14__cs_USCOREdocumentInfo::documentName)
	{	if (soap_element_empty(soap, "witsml14:documentName", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTowitsml14__nameStruct(soap, "witsml14:documentName", -1, &a->witsml14__cs_USCOREdocumentInfo::documentName, "witsml14:nameStruct"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, "witsml14:documentAlias", -1, &a->witsml14__cs_USCOREdocumentInfo::documentAlias, "witsml14:nameStruct"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:documentDate", -1, &a->witsml14__cs_USCOREdocumentInfo::documentDate, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, "witsml14:documentClass", -1, &a->witsml14__cs_USCOREdocumentInfo::documentClass, "witsml14:nameStruct"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, "witsml14:fileCreationInformation", -1, &a->witsml14__cs_USCOREdocumentInfo::fileCreationInformation, "witsml14:cs_documentFileCreation"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, "witsml14:securityInformation", -1, &a->witsml14__cs_USCOREdocumentInfo::securityInformation, "witsml14:cs_documentSecurityInfo"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:disclaimer", -1, &a->witsml14__cs_USCOREdocumentInfo::disclaimer, "witsml14:commentString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentAudit(soap, "witsml14:auditTrail", -1, &a->witsml14__cs_USCOREdocumentInfo::auditTrail, "witsml14:cs_documentAudit"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:owner", -1, &a->witsml14__cs_USCOREdocumentInfo::owner, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__commentString(soap, "witsml14:comment", -1, &a->witsml14__cs_USCOREdocumentInfo::comment, "witsml14:commentString"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__cs_USCOREdocumentInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__cs_USCOREdocumentInfo(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentInfo * SOAP_FMAC4 soap_in_witsml14__cs_USCOREdocumentInfo(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__cs_USCOREdocumentInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, sizeof(witsml14__cs_USCOREdocumentInfo), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__cs_USCOREdocumentInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_documentName1 = 1;
	size_t soap_flag_documentDate1 = 1;
	size_t soap_flag_fileCreationInformation1 = 1;
	size_t soap_flag_disclaimer1 = 1;
	size_t soap_flag_auditTrail1 = 1;
	size_t soap_flag_owner1 = 1;
	size_t soap_flag_comment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentName1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__nameStruct(soap, "witsml14:documentName", &a->witsml14__cs_USCOREdocumentInfo::documentName, "witsml14:nameStruct"))
				{	soap_flag_documentName1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, "witsml14:documentAlias", &a->witsml14__cs_USCOREdocumentInfo::documentAlias, "witsml14:nameStruct"))
					continue;
			}
			if (soap_flag_documentDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:documentDate", &a->witsml14__cs_USCOREdocumentInfo::documentDate, "witsml14:timestamp"))
				{	soap_flag_documentDate1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap, "witsml14:documentClass", &a->witsml14__cs_USCOREdocumentInfo::documentClass, "witsml14:nameStruct"))
					continue;
			}
			if (soap_flag_fileCreationInformation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, "witsml14:fileCreationInformation", &a->witsml14__cs_USCOREdocumentInfo::fileCreationInformation, "witsml14:cs_documentFileCreation"))
				{	soap_flag_fileCreationInformation1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, "witsml14:securityInformation", &a->witsml14__cs_USCOREdocumentInfo::securityInformation, "witsml14:cs_documentSecurityInfo"))
					continue;
			}
			if (soap_flag_disclaimer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:disclaimer", &a->witsml14__cs_USCOREdocumentInfo::disclaimer, "witsml14:commentString"))
				{	soap_flag_disclaimer1--;
					continue;
				}
			}
			if (soap_flag_auditTrail1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREdocumentAudit(soap, "witsml14:auditTrail", &a->witsml14__cs_USCOREdocumentInfo::auditTrail, "witsml14:cs_documentAudit"))
				{	soap_flag_auditTrail1--;
					continue;
				}
			}
			if (soap_flag_owner1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:owner", &a->witsml14__cs_USCOREdocumentInfo::owner, "witsml14:nameString"))
				{	soap_flag_owner1--;
					continue;
				}
			}
			if (soap_flag_comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__commentString(soap, "witsml14:comment", &a->witsml14__cs_USCOREdocumentInfo::comment, "witsml14:commentString"))
				{	soap_flag_comment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((!a->witsml14__cs_USCOREdocumentInfo::documentName || a->witsml14__cs_USCOREdocumentInfo::securityInformation.size() > 5))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__cs_USCOREdocumentInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, sizeof(witsml14__cs_USCOREdocumentInfo), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__cs_USCOREdocumentInfo * SOAP_FMAC2 soap_instantiate_witsml14__cs_USCOREdocumentInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__cs_USCOREdocumentInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__cs_USCOREdocumentInfo *p;
	size_t k = sizeof(witsml14__cs_USCOREdocumentInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__cs_USCOREdocumentInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__cs_USCOREdocumentInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__cs_USCOREdocumentInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__cs_USCOREdocumentInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__cs_USCOREdocumentInfo(soap, tag ? tag : "witsml14:cs_documentInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__cs_USCOREdocumentInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__cs_USCOREdocumentInfo(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentInfo * SOAP_FMAC4 soap_get_witsml14__cs_USCOREdocumentInfo(struct soap *soap, witsml14__cs_USCOREdocumentInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__cs_USCOREdocumentInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREwell::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_witsml14__nameString(soap, &this->witsml14__obj_USCOREwell::name);
	this->witsml14__obj_USCOREwell::__obj_USCOREwell_sequence = NULL;
	this->witsml14__obj_USCOREwell::commonData = NULL;
	this->witsml14__obj_USCOREwell::customData = NULL;
	this->witsml14__obj_USCOREwell::uid = NULL;
}

void witsml14__obj_USCOREwell::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->witsml14__obj_USCOREwell::name, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString);
	soap_serialize_witsml14__nameString(soap, &this->witsml14__obj_USCOREwell::name);
	soap_serialize_PointerTo__witsml14__obj_USCOREwell_sequence(soap, &this->witsml14__obj_USCOREwell::__obj_USCOREwell_sequence);
	soap_serialize_PointerTowitsml14__cs_USCOREcommonData(soap, &this->witsml14__obj_USCOREwell::commonData);
	soap_serialize_PointerTowitsml14__cs_USCOREcustomData(soap, &this->witsml14__obj_USCOREwell::customData);
#endif
}

int witsml14__obj_USCOREwell::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREwell(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREwell(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREwell *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_well";
	if (((witsml14__obj_USCOREwell*)a)->uid)
	{	soap_set_attr(soap, "uid", soap_witsml14__uidString2s(soap, *((witsml14__obj_USCOREwell*)a)->uid), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell), type))
		return soap->error;
	if (soap_out_witsml14__nameString(soap, "witsml14:name", -1, &a->witsml14__obj_USCOREwell::name, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTo__witsml14__obj_USCOREwell_sequence(soap, "-obj_well-sequence", -1, &a->witsml14__obj_USCOREwell::__obj_USCOREwell_sequence, "-witsml14:obj_well-sequence"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", -1, &a->witsml14__obj_USCOREwell::commonData, "witsml14:cs_commonData"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", -1, &a->witsml14__obj_USCOREwell::customData, "witsml14:cs_customData"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREwell::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREwell(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwell * SOAP_FMAC4 soap_in_witsml14__obj_USCOREwell(struct soap *soap, const char *tag, witsml14__obj_USCOREwell *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREwell*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, sizeof(witsml14__obj_USCOREwell), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREwell *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	{
		const char *t = soap_attr_value(soap, "uid", 1, 0);
		if (t)
		{
			if (!(((witsml14__obj_USCOREwell*)a)->uid = soap_new_witsml14__uidString(soap)))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2witsml14__uidString(soap, t, ((witsml14__obj_USCOREwell*)a)->uid))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag___obj_USCOREwell_sequence1 = 1;
	size_t soap_flag_commonData1 = 1;
	size_t soap_flag_customData1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__nameString(soap, "witsml14:name", &a->witsml14__obj_USCOREwell::name, "witsml14:nameString"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_commonData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, "witsml14:commonData", &a->witsml14__obj_USCOREwell::commonData, "witsml14:cs_commonData"))
				{	soap_flag_commonData1--;
					continue;
				}
			}
			if (soap_flag_customData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREcustomData(soap, "witsml14:customData", &a->witsml14__obj_USCOREwell::customData, "witsml14:cs_customData"))
				{	soap_flag_customData1--;
					continue;
				}
			}
			if (soap_flag___obj_USCOREwell_sequence1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__witsml14__obj_USCOREwell_sequence(soap, "-obj_well-sequence", &a->witsml14__obj_USCOREwell::__obj_USCOREwell_sequence, "-witsml14:obj_well-sequence"))
				{	soap_flag___obj_USCOREwell_sequence1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREwell *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, sizeof(witsml14__obj_USCOREwell), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREwell * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREwell(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREwell(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREwell *p;
	size_t k = sizeof(witsml14__obj_USCOREwell);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREwell);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREwell, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREwell location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREwell::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREwell(soap, tag ? tag : "witsml14:obj_well", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREwell::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREwell(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwell * SOAP_FMAC4 soap_get_witsml14__obj_USCOREwell(struct soap *soap, witsml14__obj_USCOREwell *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREwell(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void witsml14__obj_USCOREwells::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->abstract__abstractObject::soap_default(soap);
	this->witsml14__obj_USCOREwells::documentInfo = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap, &this->witsml14__obj_USCOREwells::well);
	soap_default_witsml14__schemaVersionString(soap, &this->witsml14__obj_USCOREwells::version);
}

void witsml14__obj_USCOREwells::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__cs_USCOREdocumentInfo(soap, &this->witsml14__obj_USCOREwells::documentInfo);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap, &this->witsml14__obj_USCOREwells::well);
	this->abstract__abstractObject::soap_serialize(soap);
#endif
}

int witsml14__obj_USCOREwells::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_witsml14__obj_USCOREwells(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_witsml14__obj_USCOREwells(struct soap *soap, const char *tag, int id, const witsml14__obj_USCOREwells *a, const char *type)
{
	if (!type)
		type = "witsml14:obj_wells";
	soap_set_attr(soap, "version", soap_witsml14__schemaVersionString2s(soap, ((witsml14__obj_USCOREwells*)a)->version), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells), type ? type : "witsml14:obj_wells"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", -1, &a->witsml14__obj_USCOREwells::documentInfo, "witsml14:cs_documentInfo"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap, "witsml14:well", -1, &a->witsml14__obj_USCOREwells::well, "witsml14:obj_well"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *witsml14__obj_USCOREwells::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_witsml14__obj_USCOREwells(soap, tag, this, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwells * SOAP_FMAC4 soap_in_witsml14__obj_USCOREwells(struct soap *soap, const char *tag, witsml14__obj_USCOREwells *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (witsml14__obj_USCOREwells*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells, sizeof(witsml14__obj_USCOREwells), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (witsml14__obj_USCOREwells *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2witsml14__schemaVersionString(soap, soap_attr_value(soap, "version", 1, 3), &((witsml14__obj_USCOREwells*)a)->version))
		return NULL;
	size_t soap_flag_documentInfo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_documentInfo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(soap, "witsml14:documentInfo", &a->witsml14__obj_USCOREwells::documentInfo, "witsml14:cs_documentInfo"))
				{	soap_flag_documentInfo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap, "witsml14:well", &a->witsml14__obj_USCOREwells::well, "witsml14:obj_well"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((a->witsml14__obj_USCOREwells::well.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (witsml14__obj_USCOREwells *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells, sizeof(witsml14__obj_USCOREwells), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 witsml14__obj_USCOREwells * SOAP_FMAC2 soap_instantiate_witsml14__obj_USCOREwells(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_witsml14__obj_USCOREwells(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	witsml14__obj_USCOREwells *p;
	size_t k = sizeof(witsml14__obj_USCOREwells);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwells, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, witsml14__obj_USCOREwells);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, witsml14__obj_USCOREwells, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated witsml14__obj_USCOREwells location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int witsml14__obj_USCOREwells::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_witsml14__obj_USCOREwells(soap, tag ? tag : "witsml14:obj_wells", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *witsml14__obj_USCOREwells::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_witsml14__obj_USCOREwells(soap, this, tag, type);
}

SOAP_FMAC3 witsml14__obj_USCOREwells * SOAP_FMAC4 soap_get_witsml14__obj_USCOREwells(struct soap *soap, witsml14__obj_USCOREwells *p, const char *tag, const char *type)
{
	if ((p = soap_in_witsml14__obj_USCOREwells(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_xsd__date), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_xsd__date, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_xsd__date, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_xsd__date, SOAP_TYPE_gsoap_witsml1_4_xsd__date, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__date(soap, tag ? tag : "xsd:date", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__date(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_gsoap_witsml1_4_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_std__string, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_gsoap_witsml1_4_std__string, sizeof(std::string), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase), 0, SOAP_TYPE_gsoap_witsml1_4_std__string, SOAP_TYPE_gsoap_witsml1_4_std__string, sizeof(std::string), 0, gsoap_witsml1_4_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__string, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, "xsd:QName"))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Fault, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, "xsd:QName"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Header, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, struct __witsml14__obj_USCOREtrajectory_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->objectGrowing = NULL;
	a->parentTrajectory = NULL;
	a->dTimTrajStart = NULL;
	a->dTimTrajEnd = NULL;
	a->mdMn = NULL;
	a->mdMx = NULL;
	a->serviceCompany = NULL;
	a->magDeclUsed = NULL;
	a->gridCorUsed = NULL;
	a->gridConUsed = NULL;
	a->aziVertSect = NULL;
	a->dispNsVertSectOrig = NULL;
	a->dispEwVertSectOrig = NULL;
	a->definitive = NULL;
	a->memory = NULL;
	a->finalTraj = NULL;
	a->aziRef = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap, &a->trajectoryStation);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const struct __witsml14__obj_USCOREtrajectory_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->objectGrowing);
	soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, &a->parentTrajectory);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimTrajStart);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimTrajEnd);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdMn);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdMx);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->serviceCompany);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &a->magDeclUsed);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &a->gridCorUsed);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &a->gridConUsed);
	soap_serialize_PointerTowitsml14__planeAngleMeasure(soap, &a->aziVertSect);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &a->dispNsVertSectOrig);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &a->dispEwVertSectOrig);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->definitive);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->memory);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->finalTraj);
	soap_serialize_PointerTowitsml14__AziRef(soap, &a->aziRef);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap, &a->trajectoryStation);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const char *tag, int id, const struct __witsml14__obj_USCOREtrajectory_sequence *a, const char *type)
{
	if (!type)
		type = "-witsml14:obj_trajectory-sequence";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:objectGrowing", -1, &a->objectGrowing, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, "witsml14:parentTrajectory", -1, &a->parentTrajectory, "witsml14:cs_refWellboreTrajectory"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimTrajStart", -1, &a->dTimTrajStart, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimTrajEnd", -1, &a->dTimTrajEnd, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdMn", -1, &a->mdMn, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdMx", -1, &a->mdMx, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:serviceCompany", -1, &a->serviceCompany, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDeclUsed", -1, &a->magDeclUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridCorUsed", -1, &a->gridCorUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridConUsed", -1, &a->gridConUsed, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:aziVertSect", -1, &a->aziVertSect, "witsml14:planeAngleMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispNsVertSectOrig", -1, &a->dispNsVertSectOrig, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispEwVertSectOrig", -1, &a->dispEwVertSectOrig, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:definitive", -1, &a->definitive, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:memory", -1, &a->memory, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:finalTraj", -1, &a->finalTraj, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__AziRef(soap, "witsml14:aziRef", -1, &a->aziRef, "witsml14:AziRef"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap, "witsml14:trajectoryStation", -1, &a->trajectoryStation, "witsml14:cs_trajectoryStation"))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREtrajectory_sequence * SOAP_FMAC4 soap_in___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREtrajectory_sequence *a, const char *type)
{
	size_t soap_flag_objectGrowing = 1;
	size_t soap_flag_parentTrajectory = 1;
	size_t soap_flag_dTimTrajStart = 1;
	size_t soap_flag_dTimTrajEnd = 1;
	size_t soap_flag_mdMn = 1;
	size_t soap_flag_mdMx = 1;
	size_t soap_flag_serviceCompany = 1;
	size_t soap_flag_magDeclUsed = 1;
	size_t soap_flag_gridCorUsed = 1;
	size_t soap_flag_gridConUsed = 1;
	size_t soap_flag_aziVertSect = 1;
	size_t soap_flag_dispNsVertSectOrig = 1;
	size_t soap_flag_dispEwVertSectOrig = 1;
	size_t soap_flag_definitive = 1;
	size_t soap_flag_memory = 1;
	size_t soap_flag_finalTraj = 1;
	size_t soap_flag_aziRef = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __witsml14__obj_USCOREtrajectory_sequence*)soap_id_enter(soap, "", a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence, sizeof(struct __witsml14__obj_USCOREtrajectory_sequence), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	soap_default___witsml14__obj_USCOREtrajectory_sequence(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_objectGrowing && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:objectGrowing", &a->objectGrowing, "witsml14:logicalBoolean"))
				{	soap_flag_objectGrowing--;
					continue;
				}
			}
			if (soap_flag_parentTrajectory && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, "witsml14:parentTrajectory", &a->parentTrajectory, "witsml14:cs_refWellboreTrajectory"))
				{	soap_flag_parentTrajectory--;
					continue;
				}
			}
			if (soap_flag_dTimTrajStart && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimTrajStart", &a->dTimTrajStart, "witsml14:timestamp"))
				{	soap_flag_dTimTrajStart--;
					continue;
				}
			}
			if (soap_flag_dTimTrajEnd && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimTrajEnd", &a->dTimTrajEnd, "witsml14:timestamp"))
				{	soap_flag_dTimTrajEnd--;
					continue;
				}
			}
			if (soap_flag_mdMn && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdMn", &a->mdMn, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdMn--;
					continue;
				}
			}
			if (soap_flag_mdMx && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdMx", &a->mdMx, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdMx--;
					continue;
				}
			}
			if (soap_flag_serviceCompany && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:serviceCompany", &a->serviceCompany, "witsml14:nameString"))
				{	soap_flag_serviceCompany--;
					continue;
				}
			}
			if (soap_flag_magDeclUsed && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:magDeclUsed", &a->magDeclUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_magDeclUsed--;
					continue;
				}
			}
			if (soap_flag_gridCorUsed && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridCorUsed", &a->gridCorUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_gridCorUsed--;
					continue;
				}
			}
			if (soap_flag_gridConUsed && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:gridConUsed", &a->gridConUsed, "witsml14:planeAngleMeasure"))
				{	soap_flag_gridConUsed--;
					continue;
				}
			}
			if (soap_flag_aziVertSect && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__planeAngleMeasure(soap, "witsml14:aziVertSect", &a->aziVertSect, "witsml14:planeAngleMeasure"))
				{	soap_flag_aziVertSect--;
					continue;
				}
			}
			if (soap_flag_dispNsVertSectOrig && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispNsVertSectOrig", &a->dispNsVertSectOrig, "witsml14:lengthMeasure"))
				{	soap_flag_dispNsVertSectOrig--;
					continue;
				}
			}
			if (soap_flag_dispEwVertSectOrig && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:dispEwVertSectOrig", &a->dispEwVertSectOrig, "witsml14:lengthMeasure"))
				{	soap_flag_dispEwVertSectOrig--;
					continue;
				}
			}
			if (soap_flag_definitive && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:definitive", &a->definitive, "witsml14:logicalBoolean"))
				{	soap_flag_definitive--;
					continue;
				}
			}
			if (soap_flag_memory && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:memory", &a->memory, "witsml14:logicalBoolean"))
				{	soap_flag_memory--;
					continue;
				}
			}
			if (soap_flag_finalTraj && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:finalTraj", &a->finalTraj, "witsml14:logicalBoolean"))
				{	soap_flag_finalTraj--;
					continue;
				}
			}
			if (soap_flag_aziRef && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__AziRef(soap, "witsml14:aziRef", &a->aziRef, "witsml14:AziRef"))
				{	soap_flag_aziRef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap, "witsml14:trajectoryStation", &a->trajectoryStation, "witsml14:cs_trajectoryStation"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __witsml14__obj_USCOREtrajectory_sequence * SOAP_FMAC2 soap_instantiate___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___witsml14__obj_USCOREtrajectory_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __witsml14__obj_USCOREtrajectory_sequence *p;
	size_t k = sizeof(struct __witsml14__obj_USCOREtrajectory_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __witsml14__obj_USCOREtrajectory_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __witsml14__obj_USCOREtrajectory_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __witsml14__obj_USCOREtrajectory_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const struct __witsml14__obj_USCOREtrajectory_sequence *a, const char *tag, const char *type)
{
	if (soap_out___witsml14__obj_USCOREtrajectory_sequence(soap, tag ? tag : "-witsml14:obj_trajectory-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREtrajectory_sequence * SOAP_FMAC4 soap_get___witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, struct __witsml14__obj_USCOREtrajectory_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___witsml14__obj_USCOREtrajectory_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, struct __witsml14__obj_USCOREwellbore_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->parentWellbore = NULL;
	a->number = NULL;
	a->suffixAPI = NULL;
	a->numGovt = NULL;
	a->statusWellbore = NULL;
	a->isActive = NULL;
	a->purposeWellbore = NULL;
	a->typeWellbore = NULL;
	a->shape = NULL;
	a->dTimKickoff = NULL;
	a->achievedTD = NULL;
	a->md = NULL;
	a->tvd = NULL;
	a->mdBit = NULL;
	a->tvdBit = NULL;
	a->mdKickoff = NULL;
	a->tvdKickoff = NULL;
	a->mdPlanned = NULL;
	a->tvdPlanned = NULL;
	a->mdSubSeaPlanned = NULL;
	a->tvdSubSeaPlanned = NULL;
	a->dayTarget = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const struct __witsml14__obj_USCOREwellbore_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__refNameString(soap, &a->parentWellbore);
	soap_serialize_PointerTowitsml14__str32(soap, &a->number);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->suffixAPI);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->numGovt);
	soap_serialize_PointerTowitsml14__WellStatus(soap, &a->statusWellbore);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->isActive);
	soap_serialize_PointerTowitsml14__WellPurpose(soap, &a->purposeWellbore);
	soap_serialize_PointerTowitsml14__WellboreType(soap, &a->typeWellbore);
	soap_serialize_PointerTowitsml14__WellboreShape(soap, &a->shape);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimKickoff);
	soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->achievedTD);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->md);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &a->tvd);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdBit);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &a->tvdBit);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdKickoff);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &a->tvdKickoff);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdPlanned);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &a->tvdPlanned);
	soap_serialize_PointerTowitsml14__measuredDepthCoord(soap, &a->mdSubSeaPlanned);
	soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(soap, &a->tvdSubSeaPlanned);
	soap_serialize_PointerTowitsml14__timeMeasure(soap, &a->dayTarget);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const char *tag, int id, const struct __witsml14__obj_USCOREwellbore_sequence *a, const char *type)
{
	if (!type)
		type = "-witsml14:obj_wellbore-sequence";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTowitsml14__refNameString(soap, "witsml14:parentWellbore", -1, &a->parentWellbore, "witsml14:refNameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:number", -1, &a->number, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:suffixAPI", -1, &a->suffixAPI, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:numGovt", -1, &a->numGovt, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellStatus(soap, "witsml14:statusWellbore", -1, &a->statusWellbore, "witsml14:WellStatus"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:isActive", -1, &a->isActive, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellPurpose(soap, "witsml14:purposeWellbore", -1, &a->purposeWellbore, "witsml14:WellPurpose"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellboreType(soap, "witsml14:typeWellbore", -1, &a->typeWellbore, "witsml14:WellboreType"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellboreShape(soap, "witsml14:shape", -1, &a->shape, "witsml14:WellboreShape"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimKickoff", -1, &a->dTimKickoff, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:achievedTD", -1, &a->achievedTD, "witsml14:logicalBoolean"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", -1, &a->md, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvd", -1, &a->tvd, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdBit", -1, &a->mdBit, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdBit", -1, &a->tvdBit, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdKickoff", -1, &a->mdKickoff, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdKickoff", -1, &a->tvdKickoff, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdPlanned", -1, &a->mdPlanned, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdPlanned", -1, &a->tvdPlanned, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdSubSeaPlanned", -1, &a->mdSubSeaPlanned, "witsml14:measuredDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdSubSeaPlanned", -1, &a->tvdSubSeaPlanned, "witsml14:wellVerticalDepthCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timeMeasure(soap, "witsml14:dayTarget", -1, &a->dayTarget, "witsml14:timeMeasure"))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwellbore_sequence * SOAP_FMAC4 soap_in___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREwellbore_sequence *a, const char *type)
{
	size_t soap_flag_parentWellbore = 1;
	size_t soap_flag_number = 1;
	size_t soap_flag_suffixAPI = 1;
	size_t soap_flag_numGovt = 1;
	size_t soap_flag_statusWellbore = 1;
	size_t soap_flag_isActive = 1;
	size_t soap_flag_purposeWellbore = 1;
	size_t soap_flag_typeWellbore = 1;
	size_t soap_flag_shape = 1;
	size_t soap_flag_dTimKickoff = 1;
	size_t soap_flag_achievedTD = 1;
	size_t soap_flag_md = 1;
	size_t soap_flag_tvd = 1;
	size_t soap_flag_mdBit = 1;
	size_t soap_flag_tvdBit = 1;
	size_t soap_flag_mdKickoff = 1;
	size_t soap_flag_tvdKickoff = 1;
	size_t soap_flag_mdPlanned = 1;
	size_t soap_flag_tvdPlanned = 1;
	size_t soap_flag_mdSubSeaPlanned = 1;
	size_t soap_flag_tvdSubSeaPlanned = 1;
	size_t soap_flag_dayTarget = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __witsml14__obj_USCOREwellbore_sequence*)soap_id_enter(soap, "", a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence, sizeof(struct __witsml14__obj_USCOREwellbore_sequence), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___witsml14__obj_USCOREwellbore_sequence(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parentWellbore && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__refNameString(soap, "witsml14:parentWellbore", &a->parentWellbore, "witsml14:refNameString"))
				{	soap_flag_parentWellbore--;
					continue;
				}
			}
			if (soap_flag_number && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:number", &a->number, "witsml14:str32"))
				{	soap_flag_number--;
					continue;
				}
			}
			if (soap_flag_suffixAPI && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:suffixAPI", &a->suffixAPI, "witsml14:nameString"))
				{	soap_flag_suffixAPI--;
					continue;
				}
			}
			if (soap_flag_numGovt && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:numGovt", &a->numGovt, "witsml14:nameString"))
				{	soap_flag_numGovt--;
					continue;
				}
			}
			if (soap_flag_statusWellbore && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellStatus(soap, "witsml14:statusWellbore", &a->statusWellbore, "witsml14:WellStatus"))
				{	soap_flag_statusWellbore--;
					continue;
				}
			}
			if (soap_flag_isActive && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:isActive", &a->isActive, "witsml14:logicalBoolean"))
				{	soap_flag_isActive--;
					continue;
				}
			}
			if (soap_flag_purposeWellbore && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellPurpose(soap, "witsml14:purposeWellbore", &a->purposeWellbore, "witsml14:WellPurpose"))
				{	soap_flag_purposeWellbore--;
					continue;
				}
			}
			if (soap_flag_typeWellbore && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellboreType(soap, "witsml14:typeWellbore", &a->typeWellbore, "witsml14:WellboreType"))
				{	soap_flag_typeWellbore--;
					continue;
				}
			}
			if (soap_flag_shape && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellboreShape(soap, "witsml14:shape", &a->shape, "witsml14:WellboreShape"))
				{	soap_flag_shape--;
					continue;
				}
			}
			if (soap_flag_dTimKickoff && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimKickoff", &a->dTimKickoff, "witsml14:timestamp"))
				{	soap_flag_dTimKickoff--;
					continue;
				}
			}
			if (soap_flag_achievedTD && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:achievedTD", &a->achievedTD, "witsml14:logicalBoolean"))
				{	soap_flag_achievedTD--;
					continue;
				}
			}
			if (soap_flag_md && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:md", &a->md, "witsml14:measuredDepthCoord"))
				{	soap_flag_md--;
					continue;
				}
			}
			if (soap_flag_tvd && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvd", &a->tvd, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvd--;
					continue;
				}
			}
			if (soap_flag_mdBit && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdBit", &a->mdBit, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdBit--;
					continue;
				}
			}
			if (soap_flag_tvdBit && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdBit", &a->tvdBit, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvdBit--;
					continue;
				}
			}
			if (soap_flag_mdKickoff && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdKickoff", &a->mdKickoff, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdKickoff--;
					continue;
				}
			}
			if (soap_flag_tvdKickoff && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdKickoff", &a->tvdKickoff, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvdKickoff--;
					continue;
				}
			}
			if (soap_flag_mdPlanned && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdPlanned", &a->mdPlanned, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdPlanned--;
					continue;
				}
			}
			if (soap_flag_tvdPlanned && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdPlanned", &a->tvdPlanned, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvdPlanned--;
					continue;
				}
			}
			if (soap_flag_mdSubSeaPlanned && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__measuredDepthCoord(soap, "witsml14:mdSubSeaPlanned", &a->mdSubSeaPlanned, "witsml14:measuredDepthCoord"))
				{	soap_flag_mdSubSeaPlanned--;
					continue;
				}
			}
			if (soap_flag_tvdSubSeaPlanned && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, "witsml14:tvdSubSeaPlanned", &a->tvdSubSeaPlanned, "witsml14:wellVerticalDepthCoord"))
				{	soap_flag_tvdSubSeaPlanned--;
					continue;
				}
			}
			if (soap_flag_dayTarget && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timeMeasure(soap, "witsml14:dayTarget", &a->dayTarget, "witsml14:timeMeasure"))
				{	soap_flag_dayTarget--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __witsml14__obj_USCOREwellbore_sequence * SOAP_FMAC2 soap_instantiate___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___witsml14__obj_USCOREwellbore_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __witsml14__obj_USCOREwellbore_sequence *p;
	size_t k = sizeof(struct __witsml14__obj_USCOREwellbore_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __witsml14__obj_USCOREwellbore_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __witsml14__obj_USCOREwellbore_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __witsml14__obj_USCOREwellbore_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const struct __witsml14__obj_USCOREwellbore_sequence *a, const char *tag, const char *type)
{
	if (soap_out___witsml14__obj_USCOREwellbore_sequence(soap, tag ? tag : "-witsml14:obj_wellbore-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwellbore_sequence * SOAP_FMAC4 soap_get___witsml14__obj_USCOREwellbore_sequence(struct soap *soap, struct __witsml14__obj_USCOREwellbore_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___witsml14__obj_USCOREwellbore_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___witsml14__obj_USCOREwell_sequence(struct soap *soap, struct __witsml14__obj_USCOREwell_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->nameLegal = NULL;
	a->numLicense = NULL;
	a->numGovt = NULL;
	a->dTimLicense = NULL;
	a->field = NULL;
	a->country = NULL;
	a->state = NULL;
	a->county = NULL;
	a->region = NULL;
	a->district = NULL;
	a->block = NULL;
	soap_default_witsml14__timeZone(soap, &a->timeZone);
	a->operator_ = NULL;
	a->operatorDiv = NULL;
	a->pcInterest = NULL;
	a->numAPI = NULL;
	a->statusWell = NULL;
	a->purposeWell = NULL;
	a->fluidWell = NULL;
	a->directionWell = NULL;
	a->dTimSpud = NULL;
	a->dTimPa = NULL;
	a->wellheadElevation = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap, &a->wellDatum);
	a->groundElevation = NULL;
	a->waterDepth = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &a->wellLocation);
	a->wellPublicLandSurveySystemLocation = NULL;
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap, &a->referencePoint);
	soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap, &a->wellCRS);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___witsml14__obj_USCOREwell_sequence(struct soap *soap, const struct __witsml14__obj_USCOREwell_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTowitsml14__nameString(soap, &a->nameLegal);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->numLicense);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->numGovt);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimLicense);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->field);
	soap_serialize_PointerTowitsml14__str32(soap, &a->country);
	soap_serialize_PointerTowitsml14__str32(soap, &a->state);
	soap_serialize_PointerTowitsml14__str32(soap, &a->county);
	soap_serialize_PointerTowitsml14__str32(soap, &a->region);
	soap_serialize_PointerTowitsml14__str32(soap, &a->district);
	soap_serialize_PointerTowitsml14__str32(soap, &a->block);
	soap_serialize_witsml14__timeZone(soap, &a->timeZone);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->operator_);
	soap_serialize_PointerTowitsml14__nameString(soap, &a->operatorDiv);
	soap_serialize_PointerTowitsml14__dimensionlessMeasure(soap, &a->pcInterest);
	soap_serialize_PointerTowitsml14__str32(soap, &a->numAPI);
	soap_serialize_PointerTowitsml14__WellStatus(soap, &a->statusWell);
	soap_serialize_PointerTowitsml14__WellPurpose(soap, &a->purposeWell);
	soap_serialize_PointerTowitsml14__WellFluid(soap, &a->fluidWell);
	soap_serialize_PointerTowitsml14__WellDirection(soap, &a->directionWell);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimSpud);
	soap_serialize_PointerTowitsml14__timestamp(soap, &a->dTimPa);
	soap_serialize_PointerTowitsml14__wellElevationCoord(soap, &a->wellheadElevation);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap, &a->wellDatum);
	soap_serialize_PointerTowitsml14__wellElevationCoord(soap, &a->groundElevation);
	soap_serialize_PointerTowitsml14__lengthMeasure(soap, &a->waterDepth);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, &a->wellLocation);
	soap_serialize_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, &a->wellPublicLandSurveySystemLocation);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap, &a->referencePoint);
	soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap, &a->wellCRS);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___witsml14__obj_USCOREwell_sequence(struct soap *soap, const char *tag, int id, const struct __witsml14__obj_USCOREwell_sequence *a, const char *type)
{
	if (!type)
		type = "-witsml14:obj_well-sequence";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:nameLegal", -1, &a->nameLegal, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:numLicense", -1, &a->numLicense, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:numGovt", -1, &a->numGovt, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimLicense", -1, &a->dTimLicense, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:field", -1, &a->field, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:country", -1, &a->country, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:state", -1, &a->state, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:county", -1, &a->county, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:region", -1, &a->region, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:district", -1, &a->district, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:block", -1, &a->block, "witsml14:str32"))
		return soap->error;
	if (soap_out_witsml14__timeZone(soap, "witsml14:timeZone", -1, &a->timeZone, "witsml14:timeZone"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:operator", -1, &a->operator_, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__nameString(soap, "witsml14:operatorDiv", -1, &a->operatorDiv, "witsml14:nameString"))
		return soap->error;
	if (soap_out_PointerTowitsml14__dimensionlessMeasure(soap, "witsml14:pcInterest", -1, &a->pcInterest, "witsml14:dimensionlessMeasure"))
		return soap->error;
	if (soap_out_PointerTowitsml14__str32(soap, "witsml14:numAPI", -1, &a->numAPI, "witsml14:str32"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellStatus(soap, "witsml14:statusWell", -1, &a->statusWell, "witsml14:WellStatus"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellPurpose(soap, "witsml14:purposeWell", -1, &a->purposeWell, "witsml14:WellPurpose"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellFluid(soap, "witsml14:fluidWell", -1, &a->fluidWell, "witsml14:WellFluid"))
		return soap->error;
	if (soap_out_PointerTowitsml14__WellDirection(soap, "witsml14:directionWell", -1, &a->directionWell, "witsml14:WellDirection"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimSpud", -1, &a->dTimSpud, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__timestamp(soap, "witsml14:dTimPa", -1, &a->dTimPa, "witsml14:timestamp"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellElevationCoord(soap, "witsml14:wellheadElevation", -1, &a->wellheadElevation, "witsml14:wellElevationCoord"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap, "witsml14:wellDatum", -1, &a->wellDatum, "witsml14:cs_wellDatum"))
		return soap->error;
	if (soap_out_PointerTowitsml14__wellElevationCoord(soap, "witsml14:groundElevation", -1, &a->groundElevation, "witsml14:wellElevationCoord"))
		return soap->error;
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, "witsml14:waterDepth", -1, &a->waterDepth, "witsml14:lengthMeasure"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:wellLocation", -1, &a->wellLocation, "witsml14:cs_location"))
		return soap->error;
	if (soap_out_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, "witsml14:wellPublicLandSurveySystemLocation", -1, &a->wellPublicLandSurveySystemLocation, "witsml14:cs_publicLandSurveySystem"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap, "witsml14:referencePoint", -1, &a->referencePoint, "witsml14:cs_referencePoint"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap, "witsml14:wellCRS", -1, &a->wellCRS, "witsml14:cs_wellCRS"))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwell_sequence * SOAP_FMAC4 soap_in___witsml14__obj_USCOREwell_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREwell_sequence *a, const char *type)
{
	size_t soap_flag_nameLegal = 1;
	size_t soap_flag_numLicense = 1;
	size_t soap_flag_numGovt = 1;
	size_t soap_flag_dTimLicense = 1;
	size_t soap_flag_field = 1;
	size_t soap_flag_country = 1;
	size_t soap_flag_state = 1;
	size_t soap_flag_county = 1;
	size_t soap_flag_region = 1;
	size_t soap_flag_district = 1;
	size_t soap_flag_block = 1;
	size_t soap_flag_timeZone = 1;
	size_t soap_flag_operator_ = 1;
	size_t soap_flag_operatorDiv = 1;
	size_t soap_flag_pcInterest = 1;
	size_t soap_flag_numAPI = 1;
	size_t soap_flag_statusWell = 1;
	size_t soap_flag_purposeWell = 1;
	size_t soap_flag_fluidWell = 1;
	size_t soap_flag_directionWell = 1;
	size_t soap_flag_dTimSpud = 1;
	size_t soap_flag_dTimPa = 1;
	size_t soap_flag_wellheadElevation = 1;
	size_t soap_flag_groundElevation = 1;
	size_t soap_flag_waterDepth = 1;
	size_t soap_flag_wellPublicLandSurveySystemLocation = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __witsml14__obj_USCOREwell_sequence*)soap_id_enter(soap, "", a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence, sizeof(struct __witsml14__obj_USCOREwell_sequence), soap->type, soap->arrayType, gsoap_witsml1_4_instantiate, gsoap_witsml1_4_fbase);
	if (!a)
		return NULL;
	soap_default___witsml14__obj_USCOREwell_sequence(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nameLegal && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:nameLegal", &a->nameLegal, "witsml14:nameString"))
				{	soap_flag_nameLegal--;
					continue;
				}
			}
			if (soap_flag_numLicense && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:numLicense", &a->numLicense, "witsml14:nameString"))
				{	soap_flag_numLicense--;
					continue;
				}
			}
			if (soap_flag_numGovt && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:numGovt", &a->numGovt, "witsml14:nameString"))
				{	soap_flag_numGovt--;
					continue;
				}
			}
			if (soap_flag_dTimLicense && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimLicense", &a->dTimLicense, "witsml14:timestamp"))
				{	soap_flag_dTimLicense--;
					continue;
				}
			}
			if (soap_flag_field && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:field", &a->field, "witsml14:nameString"))
				{	soap_flag_field--;
					continue;
				}
			}
			if (soap_flag_country && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:country", &a->country, "witsml14:str32"))
				{	soap_flag_country--;
					continue;
				}
			}
			if (soap_flag_state && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:state", &a->state, "witsml14:str32"))
				{	soap_flag_state--;
					continue;
				}
			}
			if (soap_flag_county && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:county", &a->county, "witsml14:str32"))
				{	soap_flag_county--;
					continue;
				}
			}
			if (soap_flag_region && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:region", &a->region, "witsml14:str32"))
				{	soap_flag_region--;
					continue;
				}
			}
			if (soap_flag_district && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:district", &a->district, "witsml14:str32"))
				{	soap_flag_district--;
					continue;
				}
			}
			if (soap_flag_block && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:block", &a->block, "witsml14:str32"))
				{	soap_flag_block--;
					continue;
				}
			}
			if (soap_flag_timeZone && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_witsml14__timeZone(soap, "witsml14:timeZone", &a->timeZone, "witsml14:timeZone"))
				{	soap_flag_timeZone--;
					continue;
				}
			}
			if (soap_flag_operator_ && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:operator", &a->operator_, "witsml14:nameString"))
				{	soap_flag_operator_--;
					continue;
				}
			}
			if (soap_flag_operatorDiv && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__nameString(soap, "witsml14:operatorDiv", &a->operatorDiv, "witsml14:nameString"))
				{	soap_flag_operatorDiv--;
					continue;
				}
			}
			if (soap_flag_pcInterest && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__dimensionlessMeasure(soap, "witsml14:pcInterest", &a->pcInterest, "witsml14:dimensionlessMeasure"))
				{	soap_flag_pcInterest--;
					continue;
				}
			}
			if (soap_flag_numAPI && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTowitsml14__str32(soap, "witsml14:numAPI", &a->numAPI, "witsml14:str32"))
				{	soap_flag_numAPI--;
					continue;
				}
			}
			if (soap_flag_statusWell && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellStatus(soap, "witsml14:statusWell", &a->statusWell, "witsml14:WellStatus"))
				{	soap_flag_statusWell--;
					continue;
				}
			}
			if (soap_flag_purposeWell && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellPurpose(soap, "witsml14:purposeWell", &a->purposeWell, "witsml14:WellPurpose"))
				{	soap_flag_purposeWell--;
					continue;
				}
			}
			if (soap_flag_fluidWell && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellFluid(soap, "witsml14:fluidWell", &a->fluidWell, "witsml14:WellFluid"))
				{	soap_flag_fluidWell--;
					continue;
				}
			}
			if (soap_flag_directionWell && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__WellDirection(soap, "witsml14:directionWell", &a->directionWell, "witsml14:WellDirection"))
				{	soap_flag_directionWell--;
					continue;
				}
			}
			if (soap_flag_dTimSpud && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimSpud", &a->dTimSpud, "witsml14:timestamp"))
				{	soap_flag_dTimSpud--;
					continue;
				}
			}
			if (soap_flag_dTimPa && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__timestamp(soap, "witsml14:dTimPa", &a->dTimPa, "witsml14:timestamp"))
				{	soap_flag_dTimPa--;
					continue;
				}
			}
			if (soap_flag_wellheadElevation && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellElevationCoord(soap, "witsml14:wellheadElevation", &a->wellheadElevation, "witsml14:wellElevationCoord"))
				{	soap_flag_wellheadElevation--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap, "witsml14:wellDatum", &a->wellDatum, "witsml14:cs_wellDatum"))
					continue;
			}
			if (soap_flag_groundElevation && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__wellElevationCoord(soap, "witsml14:groundElevation", &a->groundElevation, "witsml14:wellElevationCoord"))
				{	soap_flag_groundElevation--;
					continue;
				}
			}
			if (soap_flag_waterDepth && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__lengthMeasure(soap, "witsml14:waterDepth", &a->waterDepth, "witsml14:lengthMeasure"))
				{	soap_flag_waterDepth--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap, "witsml14:wellLocation", &a->wellLocation, "witsml14:cs_location"))
					continue;
			}
			if (soap_flag_wellPublicLandSurveySystemLocation && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, "witsml14:wellPublicLandSurveySystemLocation", &a->wellPublicLandSurveySystemLocation, "witsml14:cs_publicLandSurveySystem"))
				{	soap_flag_wellPublicLandSurveySystemLocation--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap, "witsml14:referencePoint", &a->referencePoint, "witsml14:cs_referencePoint"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap, "witsml14:wellCRS", &a->wellCRS, "witsml14:cs_wellCRS"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap_flag_timeZone > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __witsml14__obj_USCOREwell_sequence * SOAP_FMAC2 soap_instantiate___witsml14__obj_USCOREwell_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___witsml14__obj_USCOREwell_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __witsml14__obj_USCOREwell_sequence *p;
	size_t k = sizeof(struct __witsml14__obj_USCOREwell_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __witsml14__obj_USCOREwell_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __witsml14__obj_USCOREwell_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __witsml14__obj_USCOREwell_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___witsml14__obj_USCOREwell_sequence(struct soap *soap, const struct __witsml14__obj_USCOREwell_sequence *a, const char *tag, const char *type)
{
	if (soap_out___witsml14__obj_USCOREwell_sequence(soap, tag ? tag : "-witsml14:obj_well-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwell_sequence * SOAP_FMAC4 soap_get___witsml14__obj_USCOREwell_sequence(struct soap *soap, struct __witsml14__obj_USCOREwell_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___witsml14__obj_USCOREwell_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__timestamp(struct soap *soap, const char *s, struct tm *a)
{
	int err = soap_s2xsd__dateTime(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_in_witsml14__timestamp(struct soap *soap, const char *tag, struct tm *a, const char *type)
{
	a = soap_in_xsd__dateTime(soap, tag, a, type);
	return a;
}

namespace gsoap_witsml1_4 {

}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2witsml14__abstractDateTime(struct soap *soap, const char *s, struct tm *a)
{
	int err = soap_s2xsd__dateTime(soap, s, a);
	if (!err)
	{
	}
	return err;
}

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_in_witsml14__abstractDateTime(struct soap *soap, const char *tag, struct tm *a, const char *type)
{
	a = soap_in_xsd__dateTime(soap, tag, a, type);
	return a;
}

namespace gsoap_witsml1_4 {

}

namespace gsoap_witsml1_4 {

SOAP_FMAC1 struct tm * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct tm *p;
	size_t k = sizeof(struct tm);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__dateTime, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct tm);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct tm, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct tm location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap *soap, const struct tm *a, const char *tag, const char *type)
{
	if (soap_out_xsd__dateTime(soap, tag ? tag : "xsd:dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, struct tm *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_tm(struct soap *soap, struct tm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->tm_sec);
	soap_default_int(soap, &a->tm_min);
	soap_default_int(soap, &a->tm_hour);
	soap_default_int(soap, &a->tm_mday);
	soap_default_int(soap, &a->tm_mon);
	soap_default_int(soap, &a->tm_year);
	soap_default_int(soap, &a->tm_isdst);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tm(struct soap *soap, const struct tm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tm(struct soap *soap, const char *tag, int id, const struct tm *a, const char *type)
{
	if (!type)
		type = "tm";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_gsoap_witsml1_4_tm), type))
		return soap->error;
	if (soap_out_int(soap, "tm-sec", -1, &a->tm_sec, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-min", -1, &a->tm_min, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-hour", -1, &a->tm_hour, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-mday", -1, &a->tm_mday, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-mon", -1, &a->tm_mon, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-year", -1, &a->tm_year, "xsd:int"))
		return soap->error;
	if (soap_out_int(soap, "tm-isdst", -1, &a->tm_isdst, "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_in_tm(struct soap *soap, const char *tag, struct tm *a, const char *type)
{
	size_t soap_flag_tm_sec = 1;
	size_t soap_flag_tm_min = 1;
	size_t soap_flag_tm_hour = 1;
	size_t soap_flag_tm_mday = 1;
	size_t soap_flag_tm_mon = 1;
	size_t soap_flag_tm_year = 1;
	size_t soap_flag_tm_isdst = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct tm*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_gsoap_witsml1_4_tm, sizeof(struct tm), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_tm(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tm_sec && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-sec", &a->tm_sec, "xsd:int"))
				{	soap_flag_tm_sec--;
					continue;
				}
			}
			if (soap_flag_tm_min && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-min", &a->tm_min, "xsd:int"))
				{	soap_flag_tm_min--;
					continue;
				}
			}
			if (soap_flag_tm_hour && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-hour", &a->tm_hour, "xsd:int"))
				{	soap_flag_tm_hour--;
					continue;
				}
			}
			if (soap_flag_tm_mday && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-mday", &a->tm_mday, "xsd:int"))
				{	soap_flag_tm_mday--;
					continue;
				}
			}
			if (soap_flag_tm_mon && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-mon", &a->tm_mon, "xsd:int"))
				{	soap_flag_tm_mon--;
					continue;
				}
			}
			if (soap_flag_tm_year && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-year", &a->tm_year, "xsd:int"))
				{	soap_flag_tm_year--;
					continue;
				}
			}
			if (soap_flag_tm_isdst && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "tm-isdst", &a->tm_isdst, "xsd:int"))
				{	soap_flag_tm_isdst--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap_flag_tm_sec > 0 || soap_flag_tm_min > 0 || soap_flag_tm_hour > 0 || soap_flag_tm_mday > 0 || soap_flag_tm_mon > 0 || soap_flag_tm_year > 0 || soap_flag_tm_isdst > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if (*soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct tm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_gsoap_witsml1_4_tm, SOAP_TYPE_gsoap_witsml1_4_tm, sizeof(struct tm), 0, gsoap_witsml1_4_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct tm * SOAP_FMAC2 soap_instantiate_tm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_tm(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct tm *p;
	size_t k = sizeof(struct tm);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_tm, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct tm);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct tm, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct tm location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tm(struct soap *soap, const struct tm *a, const char *tag, const char *type)
{
	if (soap_out_tm(soap, tag ? tag : "tm", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_get_tm(struct soap *soap, struct tm *p, const char *tag, const char *type)
{
	if ((p = soap_in_tm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__witsml14__union_cs_USCORElocalCRS(struct soap *soap, int choice, const union _witsml14__union_cs_USCORElocalCRS *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_usesWellAsOrigin:
		soap_serialize_PointerTowitsml14__logicalBoolean(soap, &a->usesWellAsOrigin);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_origin:
		soap_serialize_PointerTowitsml14__refNameString(soap, &a->origin);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_originDescription:
		soap_serialize_PointerTowitsml14__commentString(soap, &a->originDescription);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__witsml14__union_cs_USCORElocalCRS(struct soap *soap, int choice, const union _witsml14__union_cs_USCORElocalCRS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_usesWellAsOrigin:
		return soap_out_PointerTowitsml14__logicalBoolean(soap, "witsml14:usesWellAsOrigin", -1, &a->usesWellAsOrigin, "witsml14:logicalBoolean");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_origin:
		return soap_out_PointerTowitsml14__refNameString(soap, "witsml14:origin", -1, &a->origin, "witsml14:refNameString");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_originDescription:
		return soap_out_PointerTowitsml14__commentString(soap, "witsml14:originDescription", -1, &a->originDescription, "witsml14:commentString");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _witsml14__union_cs_USCORElocalCRS * SOAP_FMAC4 soap_in__witsml14__union_cs_USCORElocalCRS(struct soap *soap, int *choice, union _witsml14__union_cs_USCORElocalCRS *a)
{
	(void)a; /* appease -Wall -Werror */
	soap->error = SOAP_TAG_MISMATCH;
	a->usesWellAsOrigin = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__logicalBoolean(soap, "witsml14:usesWellAsOrigin", &a->usesWellAsOrigin, "witsml14:logicalBoolean"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_usesWellAsOrigin;
		return a;
	}
	a->origin = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__refNameString(soap, "witsml14:origin", &a->origin, "witsml14:refNameString"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_origin;
		return a;
	}
	a->originDescription = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__commentString(soap, "witsml14:originDescription", &a->originDescription, "witsml14:commentString"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCORElocalCRS_originDescription;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__witsml14__union_cs_USCOREwellCRS(struct soap *soap, int choice, const union _witsml14__union_cs_USCOREwellCRS *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjection:
		soap_serialize_PointerTowitsml14__cs_USCOREprojectionx(soap, &a->mapProjection);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geographic:
		soap_serialize_PointerTowitsml14__cs_USCOREgeodeticModel(soap, &a->geographic);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjectionCRS:
		soap_serialize_PointerTowitsml14__refNameString(soap, &a->mapProjectionCRS);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geodeticCRS:
		soap_serialize_PointerTowitsml14__refNameString(soap, &a->geodeticCRS);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_localCRS:
		soap_serialize_PointerTowitsml14__cs_USCORElocalCRS(soap, &a->localCRS);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__witsml14__union_cs_USCOREwellCRS(struct soap *soap, int choice, const union _witsml14__union_cs_USCOREwellCRS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjection:
		return soap_out_PointerTowitsml14__cs_USCOREprojectionx(soap, "witsml14:mapProjection", -1, &a->mapProjection, "witsml14:cs_projectionx");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geographic:
		return soap_out_PointerTowitsml14__cs_USCOREgeodeticModel(soap, "witsml14:geographic", -1, &a->geographic, "witsml14:cs_geodeticModel");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjectionCRS:
		return soap_out_PointerTowitsml14__refNameString(soap, "witsml14:mapProjectionCRS", -1, &a->mapProjectionCRS, "witsml14:refNameString");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geodeticCRS:
		return soap_out_PointerTowitsml14__refNameString(soap, "witsml14:geodeticCRS", -1, &a->geodeticCRS, "witsml14:refNameString");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_localCRS:
		return soap_out_PointerTowitsml14__cs_USCORElocalCRS(soap, "witsml14:localCRS", -1, &a->localCRS, "witsml14:cs_localCRS");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _witsml14__union_cs_USCOREwellCRS * SOAP_FMAC4 soap_in__witsml14__union_cs_USCOREwellCRS(struct soap *soap, int *choice, union _witsml14__union_cs_USCOREwellCRS *a)
{
	(void)a; /* appease -Wall -Werror */
	soap->error = SOAP_TAG_MISMATCH;
	a->mapProjection = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__cs_USCOREprojectionx(soap, "witsml14:mapProjection", &a->mapProjection, "witsml14:cs_projectionx"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjection;
		return a;
	}
	a->geographic = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__cs_USCOREgeodeticModel(soap, "witsml14:geographic", &a->geographic, "witsml14:cs_geodeticModel"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geographic;
		return a;
	}
	a->mapProjectionCRS = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__refNameString(soap, "witsml14:mapProjectionCRS", &a->mapProjectionCRS, "witsml14:refNameString"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_mapProjectionCRS;
		return a;
	}
	a->geodeticCRS = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__refNameString(soap, "witsml14:geodeticCRS", &a->geodeticCRS, "witsml14:refNameString"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_geodeticCRS;
		return a;
	}
	a->localCRS = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__cs_USCORElocalCRS(soap, "witsml14:localCRS", &a->localCRS, "witsml14:cs_localCRS"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellCRS_localCRS;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__witsml14__union_cs_USCOREwellDatum(struct soap *soap, int choice, const union _witsml14__union_cs_USCOREwellDatum *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumName:
		soap_serialize_PointerTowitsml14__wellKnownNameStruct(soap, &a->datumName);
		break;
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumCRS:
		soap_serialize_PointerTowitsml14__refNameString(soap, &a->datumCRS);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__witsml14__union_cs_USCOREwellDatum(struct soap *soap, int choice, const union _witsml14__union_cs_USCOREwellDatum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumName:
		return soap_out_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:datumName", -1, &a->datumName, "witsml14:wellKnownNameStruct");
	case SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumCRS:
		return soap_out_PointerTowitsml14__refNameString(soap, "witsml14:datumCRS", -1, &a->datumCRS, "witsml14:refNameString");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _witsml14__union_cs_USCOREwellDatum * SOAP_FMAC4 soap_in__witsml14__union_cs_USCOREwellDatum(struct soap *soap, int *choice, union _witsml14__union_cs_USCOREwellDatum *a)
{
	(void)a; /* appease -Wall -Werror */
	soap->error = SOAP_TAG_MISMATCH;
	a->datumName = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__wellKnownNameStruct(soap, "witsml14:datumName", &a->datumName, "witsml14:wellKnownNameStruct"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumName;
		return a;
	}
	a->datumCRS = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTowitsml14__refNameString(soap, "witsml14:datumCRS", &a->datumCRS, "witsml14:refNameString"))
	{	*choice = SOAP_UNION_gsoap_witsml1_4__witsml14__union_cs_USCOREwellDatum_datumCRS;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__refWellDatum(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum))
		soap_serialize_witsml14__refWellDatum(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__refWellDatum(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__refWellDatum(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__refWellDatum(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__refWellDatum(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refWellDatum, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__refWellDatum(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__refWellDatum(soap, tag ? tag : "witsml14:refWellDatum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__refWellDatum(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__refWellDatum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__ChronostratigraphyUnit(struct soap *soap, witsml14__ChronostratigraphyUnit *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__ChronostratigraphyUnit(struct soap *soap, const char *tag, int id, witsml14__ChronostratigraphyUnit *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__ChronostratigraphyUnit(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__ChronostratigraphyUnit ** SOAP_FMAC4 soap_in_PointerTowitsml14__ChronostratigraphyUnit(struct soap *soap, const char *tag, witsml14__ChronostratigraphyUnit **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__ChronostratigraphyUnit **)soap_malloc(soap, sizeof(witsml14__ChronostratigraphyUnit *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__ChronostratigraphyUnit(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__ChronostratigraphyUnit **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ChronostratigraphyUnit, sizeof(witsml14__ChronostratigraphyUnit), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__ChronostratigraphyUnit(struct soap *soap, witsml14__ChronostratigraphyUnit *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__ChronostratigraphyUnit(soap, tag ? tag : "witsml14:ChronostratigraphyUnit", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ChronostratigraphyUnit ** SOAP_FMAC4 soap_get_PointerTowitsml14__ChronostratigraphyUnit(struct soap *soap, witsml14__ChronostratigraphyUnit **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__ChronostratigraphyUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__LithostratigraphyUnit(struct soap *soap, witsml14__LithostratigraphyUnit *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__LithostratigraphyUnit(struct soap *soap, const char *tag, int id, witsml14__LithostratigraphyUnit *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__LithostratigraphyUnit(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__LithostratigraphyUnit ** SOAP_FMAC4 soap_in_PointerTowitsml14__LithostratigraphyUnit(struct soap *soap, const char *tag, witsml14__LithostratigraphyUnit **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__LithostratigraphyUnit **)soap_malloc(soap, sizeof(witsml14__LithostratigraphyUnit *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__LithostratigraphyUnit(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__LithostratigraphyUnit **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__LithostratigraphyUnit, sizeof(witsml14__LithostratigraphyUnit), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__LithostratigraphyUnit(struct soap *soap, witsml14__LithostratigraphyUnit *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__LithostratigraphyUnit(soap, tag ? tag : "witsml14:LithostratigraphyUnit", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__LithostratigraphyUnit ** SOAP_FMAC4 soap_get_PointerTowitsml14__LithostratigraphyUnit(struct soap *soap, witsml14__LithostratigraphyUnit **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__LithostratigraphyUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__refString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refString))
		soap_serialize_witsml14__refString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__refString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__refString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__refString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__refString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__refString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__refString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__refString(soap, tag ? tag : "witsml14:refString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__refString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__refString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__uomString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString))
		soap_serialize_witsml14__uomString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__uomString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__uomString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__uomString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__uomString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uomString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__uomString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__uomString(soap, tag ? tag : "witsml14:uomString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__uomString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__uomString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, witsml14__obj_USCOREtrajectory *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, int id, witsml14__obj_USCOREtrajectory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory ? type : NULL);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectory ** SOAP_FMAC4 soap_in_PointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, witsml14__obj_USCOREtrajectory **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__obj_USCOREtrajectory **)soap_malloc(soap, sizeof(witsml14__obj_USCOREtrajectory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__obj_USCOREtrajectory *)soap_instantiate_witsml14__obj_USCOREtrajectory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__obj_USCOREtrajectory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, sizeof(witsml14__obj_USCOREtrajectory), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, witsml14__obj_USCOREtrajectory *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__obj_USCOREtrajectory(soap, tag ? tag : "witsml14:obj_trajectory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__obj_USCOREtrajectory ** SOAP_FMAC4 soap_get_PointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, witsml14__obj_USCOREtrajectory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__obj_USCOREwellbore(struct soap *soap, witsml14__obj_USCOREwellbore *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, int id, witsml14__obj_USCOREwellbore *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore ? type : NULL);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbore ** SOAP_FMAC4 soap_in_PointerTowitsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, witsml14__obj_USCOREwellbore **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__obj_USCOREwellbore **)soap_malloc(soap, sizeof(witsml14__obj_USCOREwellbore *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__obj_USCOREwellbore *)soap_instantiate_witsml14__obj_USCOREwellbore(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__obj_USCOREwellbore **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, sizeof(witsml14__obj_USCOREwellbore), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__obj_USCOREwellbore(struct soap *soap, witsml14__obj_USCOREwellbore *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__obj_USCOREwellbore(soap, tag ? tag : "witsml14:obj_wellbore", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__obj_USCOREwellbore ** SOAP_FMAC4 soap_get_PointerTowitsml14__obj_USCOREwellbore(struct soap *soap, witsml14__obj_USCOREwellbore **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__obj_USCOREwellbore(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__obj_USCOREwell(struct soap *soap, witsml14__obj_USCOREwell *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__obj_USCOREwell(struct soap *soap, const char *tag, int id, witsml14__obj_USCOREwell *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell ? type : NULL);
}

SOAP_FMAC3 witsml14__obj_USCOREwell ** SOAP_FMAC4 soap_in_PointerTowitsml14__obj_USCOREwell(struct soap *soap, const char *tag, witsml14__obj_USCOREwell **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__obj_USCOREwell **)soap_malloc(soap, sizeof(witsml14__obj_USCOREwell *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__obj_USCOREwell *)soap_instantiate_witsml14__obj_USCOREwell(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__obj_USCOREwell **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, sizeof(witsml14__obj_USCOREwell), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__obj_USCOREwell(struct soap *soap, witsml14__obj_USCOREwell *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__obj_USCOREwell(soap, tag ? tag : "witsml14:obj_well", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__obj_USCOREwell ** SOAP_FMAC4 soap_get_PointerTowitsml14__obj_USCOREwell(struct soap *soap, witsml14__obj_USCOREwell **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__obj_USCOREwell(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREdocumentInfo(struct soap *soap, witsml14__cs_USCOREdocumentInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREdocumentInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentInfo ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREdocumentInfo **)soap_malloc(soap, sizeof(witsml14__cs_USCOREdocumentInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREdocumentInfo *)soap_instantiate_witsml14__cs_USCOREdocumentInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREdocumentInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentInfo, sizeof(witsml14__cs_USCOREdocumentInfo), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREdocumentInfo(struct soap *soap, witsml14__cs_USCOREdocumentInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentInfo(soap, tag ? tag : "witsml14:cs_documentInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentInfo ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREdocumentInfo(struct soap *soap, witsml14__cs_USCOREdocumentInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREdocumentInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__areaMeasure(struct soap *soap, witsml14__areaMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__areaMeasure(struct soap *soap, const char *tag, int id, witsml14__areaMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__areaMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__areaMeasure(struct soap *soap, const char *tag, witsml14__areaMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__areaMeasure **)soap_malloc(soap, sizeof(witsml14__areaMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__areaMeasure *)soap_instantiate_witsml14__areaMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__areaMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__areaMeasure, sizeof(witsml14__areaMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__areaMeasure(struct soap *soap, witsml14__areaMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__areaMeasure(soap, tag ? tag : "witsml14:areaMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__areaMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__areaMeasure(struct soap *soap, witsml14__areaMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__areaMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectoryStation *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, const char *tag, int id, witsml14__cs_USCORErefWellboreTrajectoryStation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectoryStation ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellboreTrajectoryStation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORErefWellboreTrajectoryStation **)soap_malloc(soap, sizeof(witsml14__cs_USCORErefWellboreTrajectoryStation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORErefWellboreTrajectoryStation *)soap_instantiate_witsml14__cs_USCORErefWellboreTrajectoryStation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORErefWellboreTrajectoryStation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectoryStation, sizeof(witsml14__cs_USCORErefWellboreTrajectoryStation), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectoryStation *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag ? tag : "witsml14:cs_refWellboreTrajectoryStation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectoryStation ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectoryStation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectoryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, witsml14__cs_USCOREstnTrajMatrixCov *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREstnTrajMatrixCov *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajMatrixCov ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajMatrixCov **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREstnTrajMatrixCov **)soap_malloc(soap, sizeof(witsml14__cs_USCOREstnTrajMatrixCov *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREstnTrajMatrixCov *)soap_instantiate_witsml14__cs_USCOREstnTrajMatrixCov(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajMatrixCov **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajMatrixCov, sizeof(witsml14__cs_USCOREstnTrajMatrixCov), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, witsml14__cs_USCOREstnTrajMatrixCov *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, tag ? tag : "witsml14:cs_stnTrajMatrixCov", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajMatrixCov ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(struct soap *soap, witsml14__cs_USCOREstnTrajMatrixCov **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREstnTrajMatrixCov(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREstnTrajValid(struct soap *soap, witsml14__cs_USCOREstnTrajValid *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREstnTrajValid(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREstnTrajValid *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajValid ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREstnTrajValid(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajValid **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREstnTrajValid **)soap_malloc(soap, sizeof(witsml14__cs_USCOREstnTrajValid *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREstnTrajValid *)soap_instantiate_witsml14__cs_USCOREstnTrajValid(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajValid **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajValid, sizeof(witsml14__cs_USCOREstnTrajValid), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREstnTrajValid(struct soap *soap, witsml14__cs_USCOREstnTrajValid *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajValid(soap, tag ? tag : "witsml14:cs_stnTrajValid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajValid ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREstnTrajValid(struct soap *soap, witsml14__cs_USCOREstnTrajValid **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREstnTrajValid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, witsml14__cs_USCOREstnTrajCorUsed *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREstnTrajCorUsed *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajCorUsed ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajCorUsed **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREstnTrajCorUsed **)soap_malloc(soap, sizeof(witsml14__cs_USCOREstnTrajCorUsed *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREstnTrajCorUsed *)soap_instantiate_witsml14__cs_USCOREstnTrajCorUsed(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajCorUsed **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajCorUsed, sizeof(witsml14__cs_USCOREstnTrajCorUsed), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, witsml14__cs_USCOREstnTrajCorUsed *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, tag ? tag : "witsml14:cs_stnTrajCorUsed", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajCorUsed ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREstnTrajCorUsed(struct soap *soap, witsml14__cs_USCOREstnTrajCorUsed **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREstnTrajCorUsed(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREstnTrajRawData(struct soap *soap, witsml14__cs_USCOREstnTrajRawData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREstnTrajRawData(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREstnTrajRawData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajRawData ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREstnTrajRawData(struct soap *soap, const char *tag, witsml14__cs_USCOREstnTrajRawData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREstnTrajRawData **)soap_malloc(soap, sizeof(witsml14__cs_USCOREstnTrajRawData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREstnTrajRawData *)soap_instantiate_witsml14__cs_USCOREstnTrajRawData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREstnTrajRawData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREstnTrajRawData, sizeof(witsml14__cs_USCOREstnTrajRawData), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREstnTrajRawData(struct soap *soap, witsml14__cs_USCOREstnTrajRawData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, tag ? tag : "witsml14:cs_stnTrajRawData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREstnTrajRawData ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREstnTrajRawData(struct soap *soap, witsml14__cs_USCOREstnTrajRawData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREstnTrajRawData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__TrajStationStatus(struct soap *soap, witsml14__TrajStationStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__TrajStationStatus(struct soap *soap, const char *tag, int id, witsml14__TrajStationStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__TrajStationStatus(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__TrajStationStatus ** SOAP_FMAC4 soap_in_PointerTowitsml14__TrajStationStatus(struct soap *soap, const char *tag, witsml14__TrajStationStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__TrajStationStatus **)soap_malloc(soap, sizeof(witsml14__TrajStationStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__TrajStationStatus(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__TrajStationStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStationStatus, sizeof(witsml14__TrajStationStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__TrajStationStatus(struct soap *soap, witsml14__TrajStationStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__TrajStationStatus(soap, tag ? tag : "witsml14:TrajStationStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__TrajStationStatus ** SOAP_FMAC4 soap_get_PointerTowitsml14__TrajStationStatus(struct soap *soap, witsml14__TrajStationStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__TrajStationStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__magneticInductionMeasure(struct soap *soap, witsml14__magneticInductionMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__magneticInductionMeasure(struct soap *soap, const char *tag, int id, witsml14__magneticInductionMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__magneticInductionMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__magneticInductionMeasure(struct soap *soap, const char *tag, witsml14__magneticInductionMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__magneticInductionMeasure **)soap_malloc(soap, sizeof(witsml14__magneticInductionMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__magneticInductionMeasure *)soap_instantiate_witsml14__magneticInductionMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__magneticInductionMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__magneticInductionMeasure, sizeof(witsml14__magneticInductionMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__magneticInductionMeasure(struct soap *soap, witsml14__magneticInductionMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__magneticInductionMeasure(soap, tag ? tag : "witsml14:magneticInductionMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__magneticInductionMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__magneticInductionMeasure(struct soap *soap, witsml14__magneticInductionMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__magneticInductionMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__accelerationLinearMeasure(struct soap *soap, witsml14__accelerationLinearMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__accelerationLinearMeasure(struct soap *soap, const char *tag, int id, witsml14__accelerationLinearMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__accelerationLinearMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__accelerationLinearMeasure(struct soap *soap, const char *tag, witsml14__accelerationLinearMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__accelerationLinearMeasure **)soap_malloc(soap, sizeof(witsml14__accelerationLinearMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__accelerationLinearMeasure *)soap_instantiate_witsml14__accelerationLinearMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__accelerationLinearMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__accelerationLinearMeasure, sizeof(witsml14__accelerationLinearMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__accelerationLinearMeasure(struct soap *soap, witsml14__accelerationLinearMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__accelerationLinearMeasure(soap, tag ? tag : "witsml14:accelerationLinearMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__accelerationLinearMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__accelerationLinearMeasure(struct soap *soap, witsml14__accelerationLinearMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__accelerationLinearMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__anglePerLengthMeasure(struct soap *soap, witsml14__anglePerLengthMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__anglePerLengthMeasure(struct soap *soap, const char *tag, int id, witsml14__anglePerLengthMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__anglePerLengthMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__anglePerLengthMeasure(struct soap *soap, const char *tag, witsml14__anglePerLengthMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__anglePerLengthMeasure **)soap_malloc(soap, sizeof(witsml14__anglePerLengthMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__anglePerLengthMeasure *)soap_instantiate_witsml14__anglePerLengthMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__anglePerLengthMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__anglePerLengthMeasure, sizeof(witsml14__anglePerLengthMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__anglePerLengthMeasure(struct soap *soap, witsml14__anglePerLengthMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__anglePerLengthMeasure(soap, tag ? tag : "witsml14:anglePerLengthMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__anglePerLengthMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__anglePerLengthMeasure(struct soap *soap, witsml14__anglePerLengthMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__anglePerLengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__TrajStnCalcAlgorithm(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm))
		soap_serialize_witsml14__TrajStnCalcAlgorithm(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__TrajStnCalcAlgorithm(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__TrajStnCalcAlgorithm(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__TrajStnCalcAlgorithm(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__TrajStnCalcAlgorithm(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TrajStnCalcAlgorithm, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__TrajStnCalcAlgorithm(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__TrajStnCalcAlgorithm(soap, tag ? tag : "witsml14:TrajStnCalcAlgorithm", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__TrajStnCalcAlgorithm(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__TrajStnCalcAlgorithm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__TypeSurveyTool(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool))
		soap_serialize_witsml14__TypeSurveyTool(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__TypeSurveyTool(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__TypeSurveyTool(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__TypeSurveyTool(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__TypeSurveyTool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__TypeSurveyTool, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__TypeSurveyTool(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__TypeSurveyTool(soap, tag ? tag : "witsml14:TypeSurveyTool", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__TypeSurveyTool(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__TypeSurveyTool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, struct __witsml14__obj_USCOREtrajectory_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence))
		soap_serialize___witsml14__obj_USCOREtrajectory_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const char *tag, int id, struct __witsml14__obj_USCOREtrajectory_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___witsml14__obj_USCOREtrajectory_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREtrajectory_sequence ** SOAP_FMAC4 soap_in_PointerTo__witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREtrajectory_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __witsml14__obj_USCOREtrajectory_sequence **)soap_malloc(soap, sizeof(struct __witsml14__obj_USCOREtrajectory_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___witsml14__obj_USCOREtrajectory_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __witsml14__obj_USCOREtrajectory_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREtrajectory_sequence, sizeof(struct __witsml14__obj_USCOREtrajectory_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, struct __witsml14__obj_USCOREtrajectory_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, tag ? tag : "-witsml14:obj_trajectory-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREtrajectory_sequence ** SOAP_FMAC4 soap_get_PointerTo__witsml14__obj_USCOREtrajectory_sequence(struct soap *soap, struct __witsml14__obj_USCOREtrajectory_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__witsml14__obj_USCOREtrajectory_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, witsml14__cs_USCOREtrajectoryStation *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREtrajectoryStation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREtrajectoryStation ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, witsml14__cs_USCOREtrajectoryStation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREtrajectoryStation **)soap_malloc(soap, sizeof(witsml14__cs_USCOREtrajectoryStation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREtrajectoryStation *)soap_instantiate_witsml14__cs_USCOREtrajectoryStation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREtrajectoryStation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, sizeof(witsml14__cs_USCOREtrajectoryStation), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, witsml14__cs_USCOREtrajectoryStation *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag ? tag : "witsml14:cs_trajectoryStation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREtrajectoryStation ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, witsml14__cs_USCOREtrajectoryStation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__AziRef(struct soap *soap, witsml14__AziRef *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__AziRef(struct soap *soap, const char *tag, int id, witsml14__AziRef *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__AziRef(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__AziRef ** SOAP_FMAC4 soap_in_PointerTowitsml14__AziRef(struct soap *soap, const char *tag, witsml14__AziRef **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__AziRef **)soap_malloc(soap, sizeof(witsml14__AziRef *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__AziRef(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__AziRef **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__AziRef, sizeof(witsml14__AziRef), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__AziRef(struct soap *soap, witsml14__AziRef *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__AziRef(soap, tag ? tag : "witsml14:AziRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__AziRef ** SOAP_FMAC4 soap_get_PointerTowitsml14__AziRef(struct soap *soap, witsml14__AziRef **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__AziRef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectory *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, const char *tag, int id, witsml14__cs_USCORErefWellboreTrajectory *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectory ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellboreTrajectory **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORErefWellboreTrajectory **)soap_malloc(soap, sizeof(witsml14__cs_USCORErefWellboreTrajectory *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORErefWellboreTrajectory *)soap_instantiate_witsml14__cs_USCORErefWellboreTrajectory(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORErefWellboreTrajectory **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellboreTrajectory, sizeof(witsml14__cs_USCORErefWellboreTrajectory), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectory *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, tag ? tag : "witsml14:cs_refWellboreTrajectory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellboreTrajectory ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORErefWellboreTrajectory(struct soap *soap, witsml14__cs_USCORErefWellboreTrajectory **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORErefWellboreTrajectory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__uidParentString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString))
		soap_serialize_witsml14__uidParentString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__uidParentString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__uidParentString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__uidParentString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__uidParentString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidParentString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__uidParentString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__uidParentString(soap, tag ? tag : "witsml14:uidParentString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__uidParentString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__uidParentString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__witsml14__obj_USCOREwellbore_sequence(struct soap *soap, struct __witsml14__obj_USCOREwellbore_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence))
		soap_serialize___witsml14__obj_USCOREwellbore_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const char *tag, int id, struct __witsml14__obj_USCOREwellbore_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___witsml14__obj_USCOREwellbore_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwellbore_sequence ** SOAP_FMAC4 soap_in_PointerTo__witsml14__obj_USCOREwellbore_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREwellbore_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __witsml14__obj_USCOREwellbore_sequence **)soap_malloc(soap, sizeof(struct __witsml14__obj_USCOREwellbore_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___witsml14__obj_USCOREwellbore_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __witsml14__obj_USCOREwellbore_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwellbore_sequence, sizeof(struct __witsml14__obj_USCOREwellbore_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__witsml14__obj_USCOREwellbore_sequence(struct soap *soap, struct __witsml14__obj_USCOREwellbore_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, tag ? tag : "-witsml14:obj_wellbore-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwellbore_sequence ** SOAP_FMAC4 soap_get_PointerTo__witsml14__obj_USCOREwellbore_sequence(struct soap *soap, struct __witsml14__obj_USCOREwellbore_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__witsml14__obj_USCOREwellbore_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__timeMeasure(struct soap *soap, witsml14__timeMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__timeMeasure(struct soap *soap, const char *tag, int id, witsml14__timeMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__timeMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__timeMeasure(struct soap *soap, const char *tag, witsml14__timeMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__timeMeasure **)soap_malloc(soap, sizeof(witsml14__timeMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__timeMeasure *)soap_instantiate_witsml14__timeMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__timeMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timeMeasure, sizeof(witsml14__timeMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__timeMeasure(struct soap *soap, witsml14__timeMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__timeMeasure(soap, tag ? tag : "witsml14:timeMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__timeMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__timeMeasure(struct soap *soap, witsml14__timeMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__timeMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__wellVerticalDepthCoord(struct soap *soap, witsml14__wellVerticalDepthCoord *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__wellVerticalDepthCoord(struct soap *soap, const char *tag, int id, witsml14__wellVerticalDepthCoord *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord ? type : NULL);
}

SOAP_FMAC3 witsml14__wellVerticalDepthCoord ** SOAP_FMAC4 soap_in_PointerTowitsml14__wellVerticalDepthCoord(struct soap *soap, const char *tag, witsml14__wellVerticalDepthCoord **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__wellVerticalDepthCoord **)soap_malloc(soap, sizeof(witsml14__wellVerticalDepthCoord *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__wellVerticalDepthCoord *)soap_instantiate_witsml14__wellVerticalDepthCoord(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__wellVerticalDepthCoord **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellVerticalDepthCoord, sizeof(witsml14__wellVerticalDepthCoord), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__wellVerticalDepthCoord(struct soap *soap, witsml14__wellVerticalDepthCoord *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__wellVerticalDepthCoord(soap, tag ? tag : "witsml14:wellVerticalDepthCoord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__wellVerticalDepthCoord ** SOAP_FMAC4 soap_get_PointerTowitsml14__wellVerticalDepthCoord(struct soap *soap, witsml14__wellVerticalDepthCoord **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__wellVerticalDepthCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellboreShape(struct soap *soap, witsml14__WellboreShape *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellboreShape(struct soap *soap, const char *tag, int id, witsml14__WellboreShape *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellboreShape(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellboreShape ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellboreShape(struct soap *soap, const char *tag, witsml14__WellboreShape **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellboreShape **)soap_malloc(soap, sizeof(witsml14__WellboreShape *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellboreShape(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellboreShape **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreShape, sizeof(witsml14__WellboreShape), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellboreShape(struct soap *soap, witsml14__WellboreShape *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellboreShape(soap, tag ? tag : "witsml14:WellboreShape", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellboreShape ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellboreShape(struct soap *soap, witsml14__WellboreShape **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellboreShape(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellboreType(struct soap *soap, witsml14__WellboreType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellboreType(struct soap *soap, const char *tag, int id, witsml14__WellboreType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellboreType(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellboreType ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellboreType(struct soap *soap, const char *tag, witsml14__WellboreType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellboreType **)soap_malloc(soap, sizeof(witsml14__WellboreType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellboreType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellboreType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellboreType, sizeof(witsml14__WellboreType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellboreType(struct soap *soap, witsml14__WellboreType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellboreType(soap, tag ? tag : "witsml14:WellboreType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellboreType ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellboreType(struct soap *soap, witsml14__WellboreType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellboreType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREextensionAny(struct soap *soap, witsml14__cs_USCOREextensionAny *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREextensionAny(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREextensionAny *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionAny ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREextensionAny(struct soap *soap, const char *tag, witsml14__cs_USCOREextensionAny **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREextensionAny **)soap_malloc(soap, sizeof(witsml14__cs_USCOREextensionAny *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREextensionAny *)soap_instantiate_witsml14__cs_USCOREextensionAny(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREextensionAny **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionAny, sizeof(witsml14__cs_USCOREextensionAny), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREextensionAny(struct soap *soap, witsml14__cs_USCOREextensionAny *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREextensionAny(soap, tag ? tag : "witsml14:cs_extensionAny", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionAny ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREextensionAny(struct soap *soap, witsml14__cs_USCOREextensionAny **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREextensionAny(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_bool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_bool, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTobool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__timestampedTimeZone(struct soap *soap, witsml14__timestampedTimeZone *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__timestampedTimeZone(struct soap *soap, const char *tag, int id, witsml14__timestampedTimeZone *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone ? type : NULL);
}

SOAP_FMAC3 witsml14__timestampedTimeZone ** SOAP_FMAC4 soap_in_PointerTowitsml14__timestampedTimeZone(struct soap *soap, const char *tag, witsml14__timestampedTimeZone **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__timestampedTimeZone **)soap_malloc(soap, sizeof(witsml14__timestampedTimeZone *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__timestampedTimeZone *)soap_instantiate_witsml14__timestampedTimeZone(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__timestampedTimeZone **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone, sizeof(witsml14__timestampedTimeZone), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__timestampedTimeZone(struct soap *soap, witsml14__timestampedTimeZone *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__timestampedTimeZone(soap, tag ? tag : "witsml14:timestampedTimeZone", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__timestampedTimeZone ** SOAP_FMAC4 soap_get_PointerTowitsml14__timestampedTimeZone(struct soap *soap, witsml14__timestampedTimeZone **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__timestampedTimeZone(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__ItemState(struct soap *soap, witsml14__ItemState *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__ItemState(struct soap *soap, const char *tag, int id, witsml14__ItemState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__ItemState(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__ItemState ** SOAP_FMAC4 soap_in_PointerTowitsml14__ItemState(struct soap *soap, const char *tag, witsml14__ItemState **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__ItemState **)soap_malloc(soap, sizeof(witsml14__ItemState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__ItemState(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__ItemState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ItemState, sizeof(witsml14__ItemState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__ItemState(struct soap *soap, witsml14__ItemState *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__ItemState(soap, tag ? tag : "witsml14:ItemState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ItemState ** SOAP_FMAC4 soap_get_PointerTowitsml14__ItemState(struct soap *soap, witsml14__ItemState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__ItemState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__yAxisAzimuth(struct soap *soap, witsml14__yAxisAzimuth *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__yAxisAzimuth(struct soap *soap, const char *tag, int id, witsml14__yAxisAzimuth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth ? type : NULL);
}

SOAP_FMAC3 witsml14__yAxisAzimuth ** SOAP_FMAC4 soap_in_PointerTowitsml14__yAxisAzimuth(struct soap *soap, const char *tag, witsml14__yAxisAzimuth **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__yAxisAzimuth **)soap_malloc(soap, sizeof(witsml14__yAxisAzimuth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__yAxisAzimuth *)soap_instantiate_witsml14__yAxisAzimuth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__yAxisAzimuth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__yAxisAzimuth, sizeof(witsml14__yAxisAzimuth), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__yAxisAzimuth(struct soap *soap, witsml14__yAxisAzimuth *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__yAxisAzimuth(soap, tag ? tag : "witsml14:yAxisAzimuth", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__yAxisAzimuth ** SOAP_FMAC4 soap_get_PointerTowitsml14__yAxisAzimuth(struct soap *soap, witsml14__yAxisAzimuth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__yAxisAzimuth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__indexedObject(struct soap *soap, witsml14__indexedObject *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__indexedObject(struct soap *soap, const char *tag, int id, witsml14__indexedObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject ? type : NULL);
}

SOAP_FMAC3 witsml14__indexedObject ** SOAP_FMAC4 soap_in_PointerTowitsml14__indexedObject(struct soap *soap, const char *tag, witsml14__indexedObject **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__indexedObject **)soap_malloc(soap, sizeof(witsml14__indexedObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__indexedObject *)soap_instantiate_witsml14__indexedObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__indexedObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject, sizeof(witsml14__indexedObject), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__indexedObject(struct soap *soap, witsml14__indexedObject *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__indexedObject(soap, tag ? tag : "witsml14:indexedObject", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__indexedObject ** SOAP_FMAC4 soap_get_PointerTowitsml14__indexedObject(struct soap *soap, witsml14__indexedObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__indexedObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__Hemispheres(struct soap *soap, witsml14__Hemispheres *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__Hemispheres(struct soap *soap, const char *tag, int id, witsml14__Hemispheres *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__Hemispheres(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__Hemispheres ** SOAP_FMAC4 soap_in_PointerTowitsml14__Hemispheres(struct soap *soap, const char *tag, witsml14__Hemispheres **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__Hemispheres **)soap_malloc(soap, sizeof(witsml14__Hemispheres *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__Hemispheres(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__Hemispheres **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Hemispheres, sizeof(witsml14__Hemispheres), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__Hemispheres(struct soap *soap, witsml14__Hemispheres *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__Hemispheres(soap, tag ? tag : "witsml14:Hemispheres", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Hemispheres ** SOAP_FMAC4 soap_get_PointerTowitsml14__Hemispheres(struct soap *soap, witsml14__Hemispheres **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__Hemispheres(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__NADTypes(struct soap *soap, witsml14__NADTypes *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__NADTypes(struct soap *soap, const char *tag, int id, witsml14__NADTypes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__NADTypes(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__NADTypes ** SOAP_FMAC4 soap_in_PointerTowitsml14__NADTypes(struct soap *soap, const char *tag, witsml14__NADTypes **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__NADTypes **)soap_malloc(soap, sizeof(witsml14__NADTypes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__NADTypes(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__NADTypes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NADTypes, sizeof(witsml14__NADTypes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__NADTypes(struct soap *soap, witsml14__NADTypes *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__NADTypes(soap, tag ? tag : "witsml14:NADTypes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__NADTypes ** SOAP_FMAC4 soap_get_PointerTowitsml14__NADTypes(struct soap *soap, witsml14__NADTypes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__NADTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__geodeticZoneString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString))
		soap_serialize_witsml14__geodeticZoneString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__geodeticZoneString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__geodeticZoneString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__geodeticZoneString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__geodeticZoneString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__geodeticZoneString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__geodeticZoneString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__geodeticZoneString(soap, tag ? tag : "witsml14:geodeticZoneString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__geodeticZoneString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__geodeticZoneString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__ProjectionVariantsObliqueMercator(struct soap *soap, witsml14__ProjectionVariantsObliqueMercator *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const char *tag, int id, witsml14__ProjectionVariantsObliqueMercator *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__ProjectionVariantsObliqueMercator(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__ProjectionVariantsObliqueMercator ** SOAP_FMAC4 soap_in_PointerTowitsml14__ProjectionVariantsObliqueMercator(struct soap *soap, const char *tag, witsml14__ProjectionVariantsObliqueMercator **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__ProjectionVariantsObliqueMercator **)soap_malloc(soap, sizeof(witsml14__ProjectionVariantsObliqueMercator *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__ProjectionVariantsObliqueMercator(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__ProjectionVariantsObliqueMercator **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ProjectionVariantsObliqueMercator, sizeof(witsml14__ProjectionVariantsObliqueMercator), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__ProjectionVariantsObliqueMercator(struct soap *soap, witsml14__ProjectionVariantsObliqueMercator *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, tag ? tag : "witsml14:ProjectionVariantsObliqueMercator", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ProjectionVariantsObliqueMercator ** SOAP_FMAC4 soap_get_PointerTowitsml14__ProjectionVariantsObliqueMercator(struct soap *soap, witsml14__ProjectionVariantsObliqueMercator **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__ProjectionVariantsObliqueMercator(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__Projection(struct soap *soap, witsml14__Projection *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__Projection(struct soap *soap, const char *tag, int id, witsml14__Projection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__Projection(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__Projection ** SOAP_FMAC4 soap_in_PointerTowitsml14__Projection(struct soap *soap, const char *tag, witsml14__Projection **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__Projection **)soap_malloc(soap, sizeof(witsml14__Projection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__Projection(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__Projection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Projection, sizeof(witsml14__Projection), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__Projection(struct soap *soap, witsml14__Projection *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__Projection(soap, tag ? tag : "witsml14:Projection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Projection ** SOAP_FMAC4 soap_get_PointerTowitsml14__Projection(struct soap *soap, witsml14__Projection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__Projection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__Ellipsoid(struct soap *soap, witsml14__Ellipsoid *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__Ellipsoid(struct soap *soap, const char *tag, int id, witsml14__Ellipsoid *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__Ellipsoid(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__Ellipsoid ** SOAP_FMAC4 soap_in_PointerTowitsml14__Ellipsoid(struct soap *soap, const char *tag, witsml14__Ellipsoid **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__Ellipsoid **)soap_malloc(soap, sizeof(witsml14__Ellipsoid *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__Ellipsoid(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__Ellipsoid **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__Ellipsoid, sizeof(witsml14__Ellipsoid), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__Ellipsoid(struct soap *soap, witsml14__Ellipsoid *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__Ellipsoid(soap, tag ? tag : "witsml14:Ellipsoid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__Ellipsoid ** SOAP_FMAC4 soap_get_PointerTowitsml14__Ellipsoid(struct soap *soap, witsml14__Ellipsoid **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__Ellipsoid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__unitlessQuantity(struct soap *soap, double *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__unitlessQuantity(struct soap *soap, const char *tag, int id, double *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__unitlessQuantity(soap, tag, id, *a, type);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTowitsml14__unitlessQuantity(struct soap *soap, const char *tag, double **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (double **)soap_malloc(soap, sizeof(double *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__unitlessQuantity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (double **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__unitlessQuantity, sizeof(double), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__unitlessQuantity(struct soap *soap, double *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__unitlessQuantity(soap, tag ? tag : "witsml14:unitlessQuantity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTowitsml14__unitlessQuantity(struct soap *soap, double **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__unitlessQuantity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__GeodeticDatum(struct soap *soap, witsml14__GeodeticDatum *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__GeodeticDatum(struct soap *soap, const char *tag, int id, witsml14__GeodeticDatum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__GeodeticDatum(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__GeodeticDatum ** SOAP_FMAC4 soap_in_PointerTowitsml14__GeodeticDatum(struct soap *soap, const char *tag, witsml14__GeodeticDatum **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__GeodeticDatum **)soap_malloc(soap, sizeof(witsml14__GeodeticDatum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__GeodeticDatum(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__GeodeticDatum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__GeodeticDatum, sizeof(witsml14__GeodeticDatum), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__GeodeticDatum(struct soap *soap, witsml14__GeodeticDatum *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__GeodeticDatum(soap, tag ? tag : "witsml14:GeodeticDatum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__GeodeticDatum ** SOAP_FMAC4 soap_get_PointerTowitsml14__GeodeticDatum(struct soap *soap, witsml14__GeodeticDatum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__GeodeticDatum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORElocalCRS(struct soap *soap, witsml14__cs_USCORElocalCRS *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORElocalCRS(struct soap *soap, const char *tag, int id, witsml14__cs_USCORElocalCRS *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORElocalCRS ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORElocalCRS(struct soap *soap, const char *tag, witsml14__cs_USCORElocalCRS **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORElocalCRS **)soap_malloc(soap, sizeof(witsml14__cs_USCORElocalCRS *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORElocalCRS *)soap_instantiate_witsml14__cs_USCORElocalCRS(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORElocalCRS **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocalCRS, sizeof(witsml14__cs_USCORElocalCRS), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORElocalCRS(struct soap *soap, witsml14__cs_USCORElocalCRS *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORElocalCRS(soap, tag ? tag : "witsml14:cs_localCRS", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORElocalCRS ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORElocalCRS(struct soap *soap, witsml14__cs_USCORElocalCRS **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORElocalCRS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREgeodeticModel(struct soap *soap, witsml14__cs_USCOREgeodeticModel *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREgeodeticModel(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREgeodeticModel *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREgeodeticModel ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREgeodeticModel(struct soap *soap, const char *tag, witsml14__cs_USCOREgeodeticModel **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREgeodeticModel **)soap_malloc(soap, sizeof(witsml14__cs_USCOREgeodeticModel *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREgeodeticModel *)soap_instantiate_witsml14__cs_USCOREgeodeticModel(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREgeodeticModel **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREgeodeticModel, sizeof(witsml14__cs_USCOREgeodeticModel), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREgeodeticModel(struct soap *soap, witsml14__cs_USCOREgeodeticModel *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREgeodeticModel(soap, tag ? tag : "witsml14:cs_geodeticModel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREgeodeticModel ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREgeodeticModel(struct soap *soap, witsml14__cs_USCOREgeodeticModel **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREgeodeticModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREprojectionx(struct soap *soap, witsml14__cs_USCOREprojectionx *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREprojectionx(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREprojectionx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREprojectionx ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREprojectionx(struct soap *soap, const char *tag, witsml14__cs_USCOREprojectionx **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREprojectionx **)soap_malloc(soap, sizeof(witsml14__cs_USCOREprojectionx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREprojectionx *)soap_instantiate_witsml14__cs_USCOREprojectionx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREprojectionx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREprojectionx, sizeof(witsml14__cs_USCOREprojectionx), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREprojectionx(struct soap *soap, witsml14__cs_USCOREprojectionx *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREprojectionx(soap, tag ? tag : "witsml14:cs_projectionx", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREprojectionx ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREprojectionx(struct soap *soap, witsml14__cs_USCOREprojectionx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREprojectionx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__footageEastWest(struct soap *soap, witsml14__footageEastWest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__footageEastWest(struct soap *soap, const char *tag, int id, witsml14__footageEastWest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest ? type : NULL);
}

SOAP_FMAC3 witsml14__footageEastWest ** SOAP_FMAC4 soap_in_PointerTowitsml14__footageEastWest(struct soap *soap, const char *tag, witsml14__footageEastWest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__footageEastWest **)soap_malloc(soap, sizeof(witsml14__footageEastWest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__footageEastWest *)soap_instantiate_witsml14__footageEastWest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__footageEastWest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageEastWest, sizeof(witsml14__footageEastWest), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__footageEastWest(struct soap *soap, witsml14__footageEastWest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__footageEastWest(soap, tag ? tag : "witsml14:footageEastWest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__footageEastWest ** SOAP_FMAC4 soap_get_PointerTowitsml14__footageEastWest(struct soap *soap, witsml14__footageEastWest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__footageEastWest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__footageNorthSouth(struct soap *soap, witsml14__footageNorthSouth *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__footageNorthSouth(struct soap *soap, const char *tag, int id, witsml14__footageNorthSouth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth ? type : NULL);
}

SOAP_FMAC3 witsml14__footageNorthSouth ** SOAP_FMAC4 soap_in_PointerTowitsml14__footageNorthSouth(struct soap *soap, const char *tag, witsml14__footageNorthSouth **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__footageNorthSouth **)soap_malloc(soap, sizeof(witsml14__footageNorthSouth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__footageNorthSouth *)soap_instantiate_witsml14__footageNorthSouth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__footageNorthSouth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__footageNorthSouth, sizeof(witsml14__footageNorthSouth), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__footageNorthSouth(struct soap *soap, witsml14__footageNorthSouth *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__footageNorthSouth(soap, tag ? tag : "witsml14:footageNorthSouth", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__footageNorthSouth ** SOAP_FMAC4 soap_get_PointerTowitsml14__footageNorthSouth(struct soap *soap, witsml14__footageNorthSouth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__footageNorthSouth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship))
		soap_serialize_witsml14__publicLandSurveySystemQuarterTownship(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__publicLandSurveySystemQuarterTownship(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterTownship, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, tag ? tag : "witsml14:publicLandSurveySystemQuarterTownship", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__publicLandSurveySystemQuarterTownship(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__publicLandSurveySystemQuarterTownship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__publicLandSurveySystemQuarterSection(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection))
		soap_serialize_witsml14__publicLandSurveySystemQuarterSection(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__publicLandSurveySystemQuarterSection(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__publicLandSurveySystemQuarterSection(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__publicLandSurveySystemQuarterSection(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__publicLandSurveySystemQuarterSection(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__publicLandSurveySystemQuarterSection, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__publicLandSurveySystemQuarterSection(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, tag ? tag : "witsml14:publicLandSurveySystemQuarterSection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__publicLandSurveySystemQuarterSection(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__publicLandSurveySystemQuarterSection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__sectionNumber(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber))
		soap_serialize_witsml14__sectionNumber(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__sectionNumber(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__sectionNumber(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__sectionNumber(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__sectionNumber(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__sectionNumber, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__sectionNumber(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__sectionNumber(soap, tag ? tag : "witsml14:sectionNumber", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__sectionNumber(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__sectionNumber(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__NorthOrSouth(struct soap *soap, witsml14__NorthOrSouth *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__NorthOrSouth(struct soap *soap, const char *tag, int id, witsml14__NorthOrSouth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__NorthOrSouth(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__NorthOrSouth ** SOAP_FMAC4 soap_in_PointerTowitsml14__NorthOrSouth(struct soap *soap, const char *tag, witsml14__NorthOrSouth **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__NorthOrSouth **)soap_malloc(soap, sizeof(witsml14__NorthOrSouth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__NorthOrSouth(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__NorthOrSouth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__NorthOrSouth, sizeof(witsml14__NorthOrSouth), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__NorthOrSouth(struct soap *soap, witsml14__NorthOrSouth *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__NorthOrSouth(soap, tag ? tag : "witsml14:NorthOrSouth", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__NorthOrSouth ** SOAP_FMAC4 soap_get_PointerTowitsml14__NorthOrSouth(struct soap *soap, witsml14__NorthOrSouth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__NorthOrSouth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__EastOrWest(struct soap *soap, witsml14__EastOrWest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__EastOrWest(struct soap *soap, const char *tag, int id, witsml14__EastOrWest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__EastOrWest(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__EastOrWest ** SOAP_FMAC4 soap_in_PointerTowitsml14__EastOrWest(struct soap *soap, const char *tag, witsml14__EastOrWest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__EastOrWest **)soap_malloc(soap, sizeof(witsml14__EastOrWest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__EastOrWest(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__EastOrWest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__EastOrWest, sizeof(witsml14__EastOrWest), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__EastOrWest(struct soap *soap, witsml14__EastOrWest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__EastOrWest(soap, tag ? tag : "witsml14:EastOrWest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__EastOrWest ** SOAP_FMAC4 soap_get_PointerTowitsml14__EastOrWest(struct soap *soap, witsml14__EastOrWest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__EastOrWest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__PrincipalMeridian(struct soap *soap, witsml14__PrincipalMeridian *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__PrincipalMeridian(struct soap *soap, const char *tag, int id, witsml14__PrincipalMeridian *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__PrincipalMeridian(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__PrincipalMeridian ** SOAP_FMAC4 soap_in_PointerTowitsml14__PrincipalMeridian(struct soap *soap, const char *tag, witsml14__PrincipalMeridian **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__PrincipalMeridian **)soap_malloc(soap, sizeof(witsml14__PrincipalMeridian *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__PrincipalMeridian(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__PrincipalMeridian **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__PrincipalMeridian, sizeof(witsml14__PrincipalMeridian), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__PrincipalMeridian(struct soap *soap, witsml14__PrincipalMeridian *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__PrincipalMeridian(soap, tag ? tag : "witsml14:PrincipalMeridian", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__PrincipalMeridian ** SOAP_FMAC4 soap_get_PointerTowitsml14__PrincipalMeridian(struct soap *soap, witsml14__PrincipalMeridian **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__PrincipalMeridian(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORErefWellWellboreRig(struct soap *soap, witsml14__cs_USCORErefWellWellboreRig *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORErefWellWellboreRig(struct soap *soap, const char *tag, int id, witsml14__cs_USCORErefWellWellboreRig *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellboreRig ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORErefWellWellboreRig(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellWellboreRig **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORErefWellWellboreRig **)soap_malloc(soap, sizeof(witsml14__cs_USCORErefWellWellboreRig *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORErefWellWellboreRig *)soap_instantiate_witsml14__cs_USCORErefWellWellboreRig(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORErefWellWellboreRig **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellboreRig, sizeof(witsml14__cs_USCORErefWellWellboreRig), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORErefWellWellboreRig(struct soap *soap, witsml14__cs_USCORErefWellWellboreRig *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, tag ? tag : "witsml14:cs_refWellWellboreRig", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellboreRig ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORErefWellWellboreRig(struct soap *soap, witsml14__cs_USCORErefWellWellboreRig **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORErefWellWellboreRig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORErefWellWellbore(struct soap *soap, witsml14__cs_USCORErefWellWellbore *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORErefWellWellbore(struct soap *soap, const char *tag, int id, witsml14__cs_USCORErefWellWellbore *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellbore ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORErefWellWellbore(struct soap *soap, const char *tag, witsml14__cs_USCORErefWellWellbore **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORErefWellWellbore **)soap_malloc(soap, sizeof(witsml14__cs_USCORErefWellWellbore *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORErefWellWellbore *)soap_instantiate_witsml14__cs_USCORErefWellWellbore(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORErefWellWellbore **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORErefWellWellbore, sizeof(witsml14__cs_USCORErefWellWellbore), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORErefWellWellbore(struct soap *soap, witsml14__cs_USCORErefWellWellbore *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORErefWellWellbore(soap, tag ? tag : "witsml14:cs_refWellWellbore", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORErefWellWellbore ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORErefWellWellbore(struct soap *soap, witsml14__cs_USCORErefWellWellbore **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORErefWellWellbore(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__wellKnownNameStruct(struct soap *soap, witsml14__wellKnownNameStruct *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__wellKnownNameStruct(struct soap *soap, const char *tag, int id, witsml14__wellKnownNameStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct ? type : NULL);
}

SOAP_FMAC3 witsml14__wellKnownNameStruct ** SOAP_FMAC4 soap_in_PointerTowitsml14__wellKnownNameStruct(struct soap *soap, const char *tag, witsml14__wellKnownNameStruct **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__wellKnownNameStruct **)soap_malloc(soap, sizeof(witsml14__wellKnownNameStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__wellKnownNameStruct *)soap_instantiate_witsml14__wellKnownNameStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__wellKnownNameStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellKnownNameStruct, sizeof(witsml14__wellKnownNameStruct), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__wellKnownNameStruct(struct soap *soap, witsml14__wellKnownNameStruct *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__wellKnownNameStruct(soap, tag ? tag : "witsml14:wellKnownNameStruct", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__wellKnownNameStruct ** SOAP_FMAC4 soap_get_PointerTowitsml14__wellKnownNameStruct(struct soap *soap, witsml14__wellKnownNameStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__wellKnownNameStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__ElevCodeEnum(struct soap *soap, witsml14__ElevCodeEnum *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__ElevCodeEnum(struct soap *soap, const char *tag, int id, witsml14__ElevCodeEnum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__ElevCodeEnum(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__ElevCodeEnum ** SOAP_FMAC4 soap_in_PointerTowitsml14__ElevCodeEnum(struct soap *soap, const char *tag, witsml14__ElevCodeEnum **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__ElevCodeEnum **)soap_malloc(soap, sizeof(witsml14__ElevCodeEnum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__ElevCodeEnum(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__ElevCodeEnum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__ElevCodeEnum, sizeof(witsml14__ElevCodeEnum), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__ElevCodeEnum(struct soap *soap, witsml14__ElevCodeEnum *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__ElevCodeEnum(soap, tag ? tag : "witsml14:ElevCodeEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__ElevCodeEnum ** SOAP_FMAC4 soap_get_PointerTowitsml14__ElevCodeEnum(struct soap *soap, witsml14__ElevCodeEnum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__ElevCodeEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__logicalBoolean(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__logicalBoolean(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__logicalBoolean(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTowitsml14__logicalBoolean(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__logicalBoolean(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__logicalBoolean, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__logicalBoolean(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__logicalBoolean(soap, tag ? tag : "witsml14:logicalBoolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTowitsml14__logicalBoolean(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__logicalBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__planeAngleMeasure(struct soap *soap, witsml14__planeAngleMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__planeAngleMeasure(struct soap *soap, const char *tag, int id, witsml14__planeAngleMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__planeAngleMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__planeAngleMeasure(struct soap *soap, const char *tag, witsml14__planeAngleMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__planeAngleMeasure **)soap_malloc(soap, sizeof(witsml14__planeAngleMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__planeAngleMeasure *)soap_instantiate_witsml14__planeAngleMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__planeAngleMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__planeAngleMeasure, sizeof(witsml14__planeAngleMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__planeAngleMeasure(struct soap *soap, witsml14__planeAngleMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__planeAngleMeasure(soap, tag ? tag : "witsml14:planeAngleMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__planeAngleMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__planeAngleMeasure(struct soap *soap, witsml14__planeAngleMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__planeAngleMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__refNameString(struct soap *soap, witsml14__refNameString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__refNameString(struct soap *soap, const char *tag, int id, witsml14__refNameString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString ? type : NULL);
}

SOAP_FMAC3 witsml14__refNameString ** SOAP_FMAC4 soap_in_PointerTowitsml14__refNameString(struct soap *soap, const char *tag, witsml14__refNameString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__refNameString **)soap_malloc(soap, sizeof(witsml14__refNameString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__refNameString *)soap_instantiate_witsml14__refNameString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__refNameString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__refNameString, sizeof(witsml14__refNameString), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__refNameString(struct soap *soap, witsml14__refNameString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__refNameString(soap, tag ? tag : "witsml14:refNameString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__refNameString ** SOAP_FMAC4 soap_get_PointerTowitsml14__refNameString(struct soap *soap, witsml14__refNameString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__refNameString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, witsml14__cs_USCOREdocumentEvent *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREdocumentEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentEvent ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentEvent **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREdocumentEvent **)soap_malloc(soap, sizeof(witsml14__cs_USCOREdocumentEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREdocumentEvent *)soap_instantiate_witsml14__cs_USCOREdocumentEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREdocumentEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, sizeof(witsml14__cs_USCOREdocumentEvent), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, witsml14__cs_USCOREdocumentEvent *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag ? tag : "witsml14:cs_documentEvent", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentEvent ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, witsml14__cs_USCOREdocumentEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__descriptionString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString))
		soap_serialize_witsml14__descriptionString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__descriptionString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__descriptionString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__descriptionString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__descriptionString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__descriptionString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__descriptionString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__descriptionString(soap, tag ? tag : "witsml14:descriptionString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__descriptionString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__descriptionString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__MeasureClass(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass))
		soap_serialize_witsml14__MeasureClass(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__MeasureClass(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__MeasureClass(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__MeasureClass(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__MeasureClass(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__MeasureClass, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__MeasureClass(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__MeasureClass(soap, tag ? tag : "witsml14:MeasureClass", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__MeasureClass(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__MeasureClass(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__positiveCount(struct soap *soap, short *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__positiveCount(struct soap *soap, const char *tag, int id, short *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__positiveCount(soap, tag, id, *a, type);
}

SOAP_FMAC3 short ** SOAP_FMAC4 soap_in_PointerTowitsml14__positiveCount(struct soap *soap, const char *tag, short **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (short **)soap_malloc(soap, sizeof(short *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__positiveCount(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (short **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__positiveCount, sizeof(short), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__positiveCount(struct soap *soap, short *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__positiveCount(soap, tag ? tag : "witsml14:positiveCount", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short ** SOAP_FMAC4 soap_get_PointerTowitsml14__positiveCount(struct soap *soap, short **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__positiveCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__measuredDepthCoord(struct soap *soap, witsml14__measuredDepthCoord *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__measuredDepthCoord(struct soap *soap, const char *tag, int id, witsml14__measuredDepthCoord *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord ? type : NULL);
}

SOAP_FMAC3 witsml14__measuredDepthCoord ** SOAP_FMAC4 soap_in_PointerTowitsml14__measuredDepthCoord(struct soap *soap, const char *tag, witsml14__measuredDepthCoord **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__measuredDepthCoord **)soap_malloc(soap, sizeof(witsml14__measuredDepthCoord *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__measuredDepthCoord *)soap_instantiate_witsml14__measuredDepthCoord(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__measuredDepthCoord **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__measuredDepthCoord, sizeof(witsml14__measuredDepthCoord), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__measuredDepthCoord(struct soap *soap, witsml14__measuredDepthCoord *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__measuredDepthCoord(soap, tag ? tag : "witsml14:measuredDepthCoord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__measuredDepthCoord ** SOAP_FMAC4 soap_get_PointerTowitsml14__measuredDepthCoord(struct soap *soap, witsml14__measuredDepthCoord **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__measuredDepthCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__extensionvalue(struct soap *soap, witsml14__extensionvalue *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__extensionvalue(struct soap *soap, const char *tag, int id, witsml14__extensionvalue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue ? type : NULL);
}

SOAP_FMAC3 witsml14__extensionvalue ** SOAP_FMAC4 soap_in_PointerTowitsml14__extensionvalue(struct soap *soap, const char *tag, witsml14__extensionvalue **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__extensionvalue **)soap_malloc(soap, sizeof(witsml14__extensionvalue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__extensionvalue *)soap_instantiate_witsml14__extensionvalue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__extensionvalue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__extensionvalue, sizeof(witsml14__extensionvalue), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__extensionvalue(struct soap *soap, witsml14__extensionvalue *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__extensionvalue(soap, tag ? tag : "witsml14:extensionvalue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__extensionvalue ** SOAP_FMAC4 soap_get_PointerTowitsml14__extensionvalue(struct soap *soap, witsml14__extensionvalue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__extensionvalue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, witsml14__cs_USCOREextensionNameValue *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREextensionNameValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionNameValue ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, witsml14__cs_USCOREextensionNameValue **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREextensionNameValue **)soap_malloc(soap, sizeof(witsml14__cs_USCOREextensionNameValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREextensionNameValue *)soap_instantiate_witsml14__cs_USCOREextensionNameValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREextensionNameValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, sizeof(witsml14__cs_USCOREextensionNameValue), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, witsml14__cs_USCOREextensionNameValue *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag ? tag : "witsml14:cs_extensionNameValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREextensionNameValue ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, witsml14__cs_USCOREextensionNameValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__kindString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString))
		soap_serialize_witsml14__kindString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__kindString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__kindString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__kindString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__kindString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__kindString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__kindString(soap, tag ? tag : "witsml14:kindString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__kindString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__kindString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREdocumentAudit(struct soap *soap, witsml14__cs_USCOREdocumentAudit *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREdocumentAudit(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREdocumentAudit *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentAudit ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREdocumentAudit(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentAudit **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREdocumentAudit **)soap_malloc(soap, sizeof(witsml14__cs_USCOREdocumentAudit *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREdocumentAudit *)soap_instantiate_witsml14__cs_USCOREdocumentAudit(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREdocumentAudit **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentAudit, sizeof(witsml14__cs_USCOREdocumentAudit), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREdocumentAudit(struct soap *soap, witsml14__cs_USCOREdocumentAudit *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentAudit(soap, tag ? tag : "witsml14:cs_documentAudit", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentAudit ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREdocumentAudit(struct soap *soap, witsml14__cs_USCOREdocumentAudit **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREdocumentAudit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__commentString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString))
		soap_serialize_witsml14__commentString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__commentString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__commentString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__commentString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__commentString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__commentString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__commentString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__commentString(soap, tag ? tag : "witsml14:commentString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__commentString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__commentString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, witsml14__cs_USCOREdocumentSecurityInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREdocumentSecurityInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentSecurityInfo ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentSecurityInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREdocumentSecurityInfo **)soap_malloc(soap, sizeof(witsml14__cs_USCOREdocumentSecurityInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREdocumentSecurityInfo *)soap_instantiate_witsml14__cs_USCOREdocumentSecurityInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREdocumentSecurityInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, sizeof(witsml14__cs_USCOREdocumentSecurityInfo), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, witsml14__cs_USCOREdocumentSecurityInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag ? tag : "witsml14:cs_documentSecurityInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentSecurityInfo ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, witsml14__cs_USCOREdocumentSecurityInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREdocumentFileCreation(struct soap *soap, witsml14__cs_USCOREdocumentFileCreation *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREdocumentFileCreation(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREdocumentFileCreation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentFileCreation ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREdocumentFileCreation(struct soap *soap, const char *tag, witsml14__cs_USCOREdocumentFileCreation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREdocumentFileCreation **)soap_malloc(soap, sizeof(witsml14__cs_USCOREdocumentFileCreation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREdocumentFileCreation *)soap_instantiate_witsml14__cs_USCOREdocumentFileCreation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREdocumentFileCreation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentFileCreation, sizeof(witsml14__cs_USCOREdocumentFileCreation), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREdocumentFileCreation(struct soap *soap, witsml14__cs_USCOREdocumentFileCreation *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, tag ? tag : "witsml14:cs_documentFileCreation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREdocumentFileCreation ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREdocumentFileCreation(struct soap *soap, witsml14__cs_USCOREdocumentFileCreation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREdocumentFileCreation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__nameStruct(struct soap *soap, witsml14__nameStruct *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__nameStruct(struct soap *soap, const char *tag, int id, witsml14__nameStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct ? type : NULL);
}

SOAP_FMAC3 witsml14__nameStruct ** SOAP_FMAC4 soap_in_PointerTowitsml14__nameStruct(struct soap *soap, const char *tag, witsml14__nameStruct **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__nameStruct **)soap_malloc(soap, sizeof(witsml14__nameStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__nameStruct *)soap_instantiate_witsml14__nameStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__nameStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct, sizeof(witsml14__nameStruct), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__nameStruct(struct soap *soap, witsml14__nameStruct *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__nameStruct(soap, tag ? tag : "witsml14:nameStruct", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__nameStruct ** SOAP_FMAC4 soap_get_PointerTowitsml14__nameStruct(struct soap *soap, witsml14__nameStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__nameStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__uidString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString))
		soap_serialize_witsml14__uidString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__uidString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__uidString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__uidString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__uidString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__uidString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__uidString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__uidString(soap, tag ? tag : "witsml14:uidString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__uidString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__uidString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREcustomData(struct soap *soap, witsml14__cs_USCOREcustomData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREcustomData(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREcustomData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREcustomData ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREcustomData(struct soap *soap, const char *tag, witsml14__cs_USCOREcustomData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREcustomData **)soap_malloc(soap, sizeof(witsml14__cs_USCOREcustomData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREcustomData *)soap_instantiate_witsml14__cs_USCOREcustomData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREcustomData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcustomData, sizeof(witsml14__cs_USCOREcustomData), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREcustomData(struct soap *soap, witsml14__cs_USCOREcustomData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREcustomData(soap, tag ? tag : "witsml14:cs_customData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREcustomData ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREcustomData(struct soap *soap, witsml14__cs_USCOREcustomData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREcustomData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREcommonData(struct soap *soap, witsml14__cs_USCOREcommonData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREcommonData(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREcommonData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREcommonData ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREcommonData(struct soap *soap, const char *tag, witsml14__cs_USCOREcommonData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREcommonData **)soap_malloc(soap, sizeof(witsml14__cs_USCOREcommonData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREcommonData *)soap_instantiate_witsml14__cs_USCOREcommonData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREcommonData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREcommonData, sizeof(witsml14__cs_USCOREcommonData), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREcommonData(struct soap *soap, witsml14__cs_USCOREcommonData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREcommonData(soap, tag ? tag : "witsml14:cs_commonData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREcommonData ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREcommonData(struct soap *soap, witsml14__cs_USCOREcommonData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREcommonData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__witsml14__obj_USCOREwell_sequence(struct soap *soap, struct __witsml14__obj_USCOREwell_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence))
		soap_serialize___witsml14__obj_USCOREwell_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__witsml14__obj_USCOREwell_sequence(struct soap *soap, const char *tag, int id, struct __witsml14__obj_USCOREwell_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___witsml14__obj_USCOREwell_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwell_sequence ** SOAP_FMAC4 soap_in_PointerTo__witsml14__obj_USCOREwell_sequence(struct soap *soap, const char *tag, struct __witsml14__obj_USCOREwell_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __witsml14__obj_USCOREwell_sequence **)soap_malloc(soap, sizeof(struct __witsml14__obj_USCOREwell_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___witsml14__obj_USCOREwell_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __witsml14__obj_USCOREwell_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4___witsml14__obj_USCOREwell_sequence, sizeof(struct __witsml14__obj_USCOREwell_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__witsml14__obj_USCOREwell_sequence(struct soap *soap, struct __witsml14__obj_USCOREwell_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__witsml14__obj_USCOREwell_sequence(soap, tag ? tag : "-witsml14:obj_well-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __witsml14__obj_USCOREwell_sequence ** SOAP_FMAC4 soap_get_PointerTo__witsml14__obj_USCOREwell_sequence(struct soap *soap, struct __witsml14__obj_USCOREwell_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__witsml14__obj_USCOREwell_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, witsml14__cs_USCOREwellCRS *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREwellCRS *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREwellCRS ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, witsml14__cs_USCOREwellCRS **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREwellCRS **)soap_malloc(soap, sizeof(witsml14__cs_USCOREwellCRS *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREwellCRS *)soap_instantiate_witsml14__cs_USCOREwellCRS(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREwellCRS **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, sizeof(witsml14__cs_USCOREwellCRS), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, witsml14__cs_USCOREwellCRS *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREwellCRS(soap, tag ? tag : "witsml14:cs_wellCRS", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREwellCRS ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, witsml14__cs_USCOREwellCRS **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, witsml14__cs_USCOREreferencePoint *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREreferencePoint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREreferencePoint ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, witsml14__cs_USCOREreferencePoint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREreferencePoint **)soap_malloc(soap, sizeof(witsml14__cs_USCOREreferencePoint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREreferencePoint *)soap_instantiate_witsml14__cs_USCOREreferencePoint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREreferencePoint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, sizeof(witsml14__cs_USCOREreferencePoint), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, witsml14__cs_USCOREreferencePoint *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag ? tag : "witsml14:cs_referencePoint", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREreferencePoint ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, witsml14__cs_USCOREreferencePoint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, witsml14__cs_USCOREpublicLandSurveySystem *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREpublicLandSurveySystem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREpublicLandSurveySystem ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, const char *tag, witsml14__cs_USCOREpublicLandSurveySystem **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREpublicLandSurveySystem **)soap_malloc(soap, sizeof(witsml14__cs_USCOREpublicLandSurveySystem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREpublicLandSurveySystem *)soap_instantiate_witsml14__cs_USCOREpublicLandSurveySystem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREpublicLandSurveySystem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREpublicLandSurveySystem, sizeof(witsml14__cs_USCOREpublicLandSurveySystem), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, witsml14__cs_USCOREpublicLandSurveySystem *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, tag ? tag : "witsml14:cs_publicLandSurveySystem", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREpublicLandSurveySystem ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(struct soap *soap, witsml14__cs_USCOREpublicLandSurveySystem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREpublicLandSurveySystem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCORElocation(struct soap *soap, witsml14__cs_USCORElocation *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCORElocation(struct soap *soap, const char *tag, int id, witsml14__cs_USCORElocation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCORElocation ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCORElocation(struct soap *soap, const char *tag, witsml14__cs_USCORElocation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCORElocation **)soap_malloc(soap, sizeof(witsml14__cs_USCORElocation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCORElocation *)soap_instantiate_witsml14__cs_USCORElocation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCORElocation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, sizeof(witsml14__cs_USCORElocation), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCORElocation(struct soap *soap, witsml14__cs_USCORElocation *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCORElocation(soap, tag ? tag : "witsml14:cs_location", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCORElocation ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCORElocation(struct soap *soap, witsml14__cs_USCORElocation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCORElocation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__lengthMeasure(struct soap *soap, witsml14__lengthMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__lengthMeasure(struct soap *soap, const char *tag, int id, witsml14__lengthMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__lengthMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__lengthMeasure(struct soap *soap, const char *tag, witsml14__lengthMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__lengthMeasure **)soap_malloc(soap, sizeof(witsml14__lengthMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__lengthMeasure *)soap_instantiate_witsml14__lengthMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__lengthMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__lengthMeasure, sizeof(witsml14__lengthMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__lengthMeasure(struct soap *soap, witsml14__lengthMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__lengthMeasure(soap, tag ? tag : "witsml14:lengthMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__lengthMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__lengthMeasure(struct soap *soap, witsml14__lengthMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__lengthMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, witsml14__cs_USCOREwellDatum *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, int id, witsml14__cs_USCOREwellDatum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum ? type : NULL);
}

SOAP_FMAC3 witsml14__cs_USCOREwellDatum ** SOAP_FMAC4 soap_in_PointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, witsml14__cs_USCOREwellDatum **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__cs_USCOREwellDatum **)soap_malloc(soap, sizeof(witsml14__cs_USCOREwellDatum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__cs_USCOREwellDatum *)soap_instantiate_witsml14__cs_USCOREwellDatum(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__cs_USCOREwellDatum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, sizeof(witsml14__cs_USCOREwellDatum), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, witsml14__cs_USCOREwellDatum *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__cs_USCOREwellDatum(soap, tag ? tag : "witsml14:cs_wellDatum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__cs_USCOREwellDatum ** SOAP_FMAC4 soap_get_PointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, witsml14__cs_USCOREwellDatum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__wellElevationCoord(struct soap *soap, witsml14__wellElevationCoord *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__wellElevationCoord(struct soap *soap, const char *tag, int id, witsml14__wellElevationCoord *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord ? type : NULL);
}

SOAP_FMAC3 witsml14__wellElevationCoord ** SOAP_FMAC4 soap_in_PointerTowitsml14__wellElevationCoord(struct soap *soap, const char *tag, witsml14__wellElevationCoord **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__wellElevationCoord **)soap_malloc(soap, sizeof(witsml14__wellElevationCoord *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__wellElevationCoord *)soap_instantiate_witsml14__wellElevationCoord(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__wellElevationCoord **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__wellElevationCoord, sizeof(witsml14__wellElevationCoord), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__wellElevationCoord(struct soap *soap, witsml14__wellElevationCoord *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__wellElevationCoord(soap, tag ? tag : "witsml14:wellElevationCoord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__wellElevationCoord ** SOAP_FMAC4 soap_get_PointerTowitsml14__wellElevationCoord(struct soap *soap, witsml14__wellElevationCoord **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__wellElevationCoord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellDirection(struct soap *soap, witsml14__WellDirection *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellDirection(struct soap *soap, const char *tag, int id, witsml14__WellDirection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellDirection(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellDirection ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellDirection(struct soap *soap, const char *tag, witsml14__WellDirection **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellDirection **)soap_malloc(soap, sizeof(witsml14__WellDirection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellDirection(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellDirection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellDirection, sizeof(witsml14__WellDirection), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellDirection(struct soap *soap, witsml14__WellDirection *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellDirection(soap, tag ? tag : "witsml14:WellDirection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellDirection ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellDirection(struct soap *soap, witsml14__WellDirection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellDirection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellFluid(struct soap *soap, witsml14__WellFluid *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellFluid(struct soap *soap, const char *tag, int id, witsml14__WellFluid *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellFluid(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellFluid ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellFluid(struct soap *soap, const char *tag, witsml14__WellFluid **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellFluid **)soap_malloc(soap, sizeof(witsml14__WellFluid *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellFluid(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellFluid **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellFluid, sizeof(witsml14__WellFluid), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellFluid(struct soap *soap, witsml14__WellFluid *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellFluid(soap, tag ? tag : "witsml14:WellFluid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellFluid ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellFluid(struct soap *soap, witsml14__WellFluid **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellFluid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellPurpose(struct soap *soap, witsml14__WellPurpose *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellPurpose(struct soap *soap, const char *tag, int id, witsml14__WellPurpose *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellPurpose(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellPurpose ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellPurpose(struct soap *soap, const char *tag, witsml14__WellPurpose **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellPurpose **)soap_malloc(soap, sizeof(witsml14__WellPurpose *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellPurpose(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellPurpose **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellPurpose, sizeof(witsml14__WellPurpose), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellPurpose(struct soap *soap, witsml14__WellPurpose *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellPurpose(soap, tag ? tag : "witsml14:WellPurpose", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellPurpose ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellPurpose(struct soap *soap, witsml14__WellPurpose **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellPurpose(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__WellStatus(struct soap *soap, witsml14__WellStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__WellStatus(struct soap *soap, const char *tag, int id, witsml14__WellStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__WellStatus(soap, tag, id, *a, type);
}

SOAP_FMAC3 witsml14__WellStatus ** SOAP_FMAC4 soap_in_PointerTowitsml14__WellStatus(struct soap *soap, const char *tag, witsml14__WellStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__WellStatus **)soap_malloc(soap, sizeof(witsml14__WellStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__WellStatus(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (witsml14__WellStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__WellStatus, sizeof(witsml14__WellStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__WellStatus(struct soap *soap, witsml14__WellStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__WellStatus(soap, tag ? tag : "witsml14:WellStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__WellStatus ** SOAP_FMAC4 soap_get_PointerTowitsml14__WellStatus(struct soap *soap, witsml14__WellStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__WellStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__dimensionlessMeasure(struct soap *soap, witsml14__dimensionlessMeasure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__dimensionlessMeasure(struct soap *soap, const char *tag, int id, witsml14__dimensionlessMeasure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure ? type : NULL);
}

SOAP_FMAC3 witsml14__dimensionlessMeasure ** SOAP_FMAC4 soap_in_PointerTowitsml14__dimensionlessMeasure(struct soap *soap, const char *tag, witsml14__dimensionlessMeasure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (witsml14__dimensionlessMeasure **)soap_malloc(soap, sizeof(witsml14__dimensionlessMeasure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (witsml14__dimensionlessMeasure *)soap_instantiate_witsml14__dimensionlessMeasure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (witsml14__dimensionlessMeasure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__dimensionlessMeasure, sizeof(witsml14__dimensionlessMeasure), 0, gsoap_witsml1_4_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__dimensionlessMeasure(struct soap *soap, witsml14__dimensionlessMeasure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__dimensionlessMeasure(soap, tag ? tag : "witsml14:dimensionlessMeasure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 witsml14__dimensionlessMeasure ** SOAP_FMAC4 soap_get_PointerTowitsml14__dimensionlessMeasure(struct soap *soap, witsml14__dimensionlessMeasure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__dimensionlessMeasure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__str32(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__str32))
		soap_serialize_witsml14__str32(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__str32(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__str32, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__str32(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__str32(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__str32(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__str32, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__str32(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__str32(soap, tag ? tag : "witsml14:str32", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__str32(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__str32(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__timestamp(struct soap *soap, struct tm *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_witsml14__timestamp))
		soap_serialize_witsml14__timestamp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__timestamp(struct soap *soap, const char *tag, int id, struct tm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_witsml14__timestamp, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__timestamp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct tm ** SOAP_FMAC4 soap_in_PointerTowitsml14__timestamp(struct soap *soap, const char *tag, struct tm **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct tm **)soap_malloc(soap, sizeof(struct tm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__timestamp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct tm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_witsml14__timestamp, sizeof(struct tm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__timestamp(struct soap *soap, struct tm *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__timestamp(soap, tag ? tag : "witsml14:timestamp", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct tm ** SOAP_FMAC4 soap_get_PointerTowitsml14__timestamp(struct soap *soap, struct tm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__timestamp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowitsml14__nameString(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString))
		soap_serialize_witsml14__nameString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowitsml14__nameString(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_witsml14__nameString(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowitsml14__nameString(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_witsml14__nameString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameString, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowitsml14__nameString(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowitsml14__nameString(soap, tag ? tag : "witsml14:nameString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowitsml14__nameString(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowitsml14__nameString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_gsoap_witsml1_4_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_gsoap_witsml1_4_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_gsoap_witsml1_4_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, std::vector<witsml14__obj_USCOREtrajectory *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, const std::vector<witsml14__obj_USCOREtrajectory *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__obj_USCOREtrajectory *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__obj_USCOREtrajectory(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, int id, const std::vector<witsml14__obj_USCOREtrajectory *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__obj_USCOREtrajectory *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, id, &(*i), "witsml14:obj_trajectory"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__obj_USCOREtrajectory *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, const char *tag, std::vector<witsml14__obj_USCOREtrajectory *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(soap)))
			return NULL;
		a->emplace_back();
		witsml14__obj_USCOREtrajectory * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREtrajectory, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory, sizeof(witsml14__obj_USCOREtrajectory), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, NULL, "witsml14:obj_trajectory"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__obj_USCOREtrajectory(soap, tag, n, "witsml14:obj_trajectory"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__obj_USCOREtrajectory *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__obj_USCOREtrajectory *> *p;
	size_t k = sizeof(std::vector<witsml14__obj_USCOREtrajectory *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREtrajectory, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__obj_USCOREtrajectory *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__obj_USCOREtrajectory *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__obj_USCOREtrajectory *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(struct soap *soap, std::vector<witsml14__obj_USCOREwellbore *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(struct soap *soap, const std::vector<witsml14__obj_USCOREwellbore *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__obj_USCOREwellbore *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__obj_USCOREwellbore(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, int id, const std::vector<witsml14__obj_USCOREwellbore *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__obj_USCOREwellbore *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__obj_USCOREwellbore(soap, tag, id, &(*i), "witsml14:obj_wellbore"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__obj_USCOREwellbore *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(struct soap *soap, const char *tag, std::vector<witsml14__obj_USCOREwellbore *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(soap)))
			return NULL;
		a->emplace_back();
		witsml14__obj_USCOREwellbore * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwellbore, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore, sizeof(witsml14__obj_USCOREwellbore), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__obj_USCOREwellbore(soap, tag, NULL, "witsml14:obj_wellbore"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__obj_USCOREwellbore(soap, tag, n, "witsml14:obj_wellbore"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__obj_USCOREwellbore *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__obj_USCOREwellbore *> *p;
	size_t k = sizeof(std::vector<witsml14__obj_USCOREwellbore *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwellbore, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__obj_USCOREwellbore *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__obj_USCOREwellbore *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__obj_USCOREwellbore *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(struct soap *soap, std::vector<witsml14__obj_USCOREwell *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(struct soap *soap, const std::vector<witsml14__obj_USCOREwell *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__obj_USCOREwell *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__obj_USCOREwell(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(struct soap *soap, const char *tag, int id, const std::vector<witsml14__obj_USCOREwell *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__obj_USCOREwell *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__obj_USCOREwell(soap, tag, id, &(*i), "witsml14:obj_well"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__obj_USCOREwell *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(struct soap *soap, const char *tag, std::vector<witsml14__obj_USCOREwell *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(soap)))
			return NULL;
		a->emplace_back();
		witsml14__obj_USCOREwell * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__obj_USCOREwell, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell, sizeof(witsml14__obj_USCOREwell), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__obj_USCOREwell(soap, tag, NULL, "witsml14:obj_well"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__obj_USCOREwell(soap, tag, n, "witsml14:obj_well"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__obj_USCOREwell *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__obj_USCOREwell *> *p;
	size_t k = sizeof(std::vector<witsml14__obj_USCOREwell *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__obj_USCOREwell, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__obj_USCOREwell *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__obj_USCOREwell *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__obj_USCOREwell *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, std::vector<witsml14__cs_USCOREtrajectoryStation *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, const std::vector<witsml14__cs_USCOREtrajectoryStation *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREtrajectoryStation *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREtrajectoryStation *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREtrajectoryStation *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, id, &(*i), "witsml14:cs_trajectoryStation"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREtrajectoryStation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREtrajectoryStation *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREtrajectoryStation * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREtrajectoryStation, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation, sizeof(witsml14__cs_USCOREtrajectoryStation), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, NULL, "witsml14:cs_trajectoryStation"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREtrajectoryStation(soap, tag, n, "witsml14:cs_trajectoryStation"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREtrajectoryStation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREtrajectoryStation *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREtrajectoryStation *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREtrajectoryStation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREtrajectoryStation *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREtrajectoryStation *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREtrajectoryStation *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<char *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, (char*const*)&(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap)))
			return NULL;
		a->emplace_back();
		char * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4__XML, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOf_XML, sizeof(char *), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else
		{	if (!soap_inliteral(soap, tag, n))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<char *> *p;
	size_t k = sizeof(std::vector<char *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOf_XML, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<char *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<char *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<char *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(struct soap *soap, std::vector<witsml14__timestampedTimeZone *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(struct soap *soap, const std::vector<witsml14__timestampedTimeZone *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__timestampedTimeZone *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__timestampedTimeZone(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(struct soap *soap, const char *tag, int id, const std::vector<witsml14__timestampedTimeZone *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__timestampedTimeZone *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__timestampedTimeZone(soap, tag, id, &(*i), "witsml14:timestampedTimeZone"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__timestampedTimeZone *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(struct soap *soap, const char *tag, std::vector<witsml14__timestampedTimeZone *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(soap)))
			return NULL;
		a->emplace_back();
		witsml14__timestampedTimeZone * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__timestampedTimeZone, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone, sizeof(witsml14__timestampedTimeZone), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__timestampedTimeZone(soap, tag, NULL, "witsml14:timestampedTimeZone"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__timestampedTimeZone(soap, tag, n, "witsml14:timestampedTimeZone"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__timestampedTimeZone *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__timestampedTimeZone *> *p;
	size_t k = sizeof(std::vector<witsml14__timestampedTimeZone *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__timestampedTimeZone, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__timestampedTimeZone *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__timestampedTimeZone *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__timestampedTimeZone *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__indexedObject(struct soap *soap, std::vector<witsml14__indexedObject *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__indexedObject(struct soap *soap, const std::vector<witsml14__indexedObject *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__indexedObject *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__indexedObject(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__indexedObject(struct soap *soap, const char *tag, int id, const std::vector<witsml14__indexedObject *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__indexedObject *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__indexedObject(soap, tag, id, &(*i), "witsml14:indexedObject"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__indexedObject *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__indexedObject(struct soap *soap, const char *tag, std::vector<witsml14__indexedObject *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__indexedObject(soap)))
			return NULL;
		a->emplace_back();
		witsml14__indexedObject * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__indexedObject, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__indexedObject, sizeof(witsml14__indexedObject), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__indexedObject(soap, tag, NULL, "witsml14:indexedObject"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__indexedObject(soap, tag, n, "witsml14:indexedObject"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__indexedObject *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__indexedObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__indexedObject(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__indexedObject *> *p;
	size_t k = sizeof(std::vector<witsml14__indexedObject *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__indexedObject, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__indexedObject *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__indexedObject *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__indexedObject *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwitsml14__kindString(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwitsml14__kindString(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_witsml14__kindString(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwitsml14__kindString(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_witsml14__kindString(soap, tag, id, &(*i), "witsml14:kindString"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfwitsml14__kindString(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfwitsml14__kindString(soap)))
			return NULL;
		if (!a->empty() && a->size() == a->capacity())
		{	const void *p = &a->front();
			a->emplace_back();
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Vector capacity increased to %lu to fit %lu items: updating pointers\n", a->capacity(), a->size()));
			soap_update_pointers(soap, (const char*)&a->front(), (const char*)p, (a->size() - 1) * sizeof(std::string));
		}
		else
		{	a->emplace_back();
		}
		std::string *n = &a->back();
		soap_default_witsml14__kindString(soap, n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__kindString, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfwitsml14__kindString, sizeof(std::string), 0, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_witsml14__kindString(soap, tag, NULL, "witsml14:kindString"))
				break;
		}
		else
		{	if (!soap_in_witsml14__kindString(soap, tag, n, "witsml14:kindString"))
			{	a->pop_back();
				break;
			}
		}
		soap_end_shaky(soap, soap_shaky);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwitsml14__kindString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfwitsml14__kindString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfwitsml14__kindString, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, std::vector<witsml14__cs_USCOREdocumentEvent *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, const std::vector<witsml14__cs_USCOREdocumentEvent *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREdocumentEvent *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentEvent(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREdocumentEvent *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREdocumentEvent *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, id, &(*i), "witsml14:cs_documentEvent"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREdocumentEvent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREdocumentEvent *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREdocumentEvent * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentEvent, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent, sizeof(witsml14__cs_USCOREdocumentEvent), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, NULL, "witsml14:cs_documentEvent"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREdocumentEvent(soap, tag, n, "witsml14:cs_documentEvent"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREdocumentEvent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREdocumentEvent *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREdocumentEvent *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentEvent, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREdocumentEvent *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREdocumentEvent *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREdocumentEvent *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, std::vector<witsml14__cs_USCOREextensionNameValue *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, const std::vector<witsml14__cs_USCOREextensionNameValue *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREextensionNameValue *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREextensionNameValue(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREextensionNameValue *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREextensionNameValue *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, id, &(*i), "witsml14:cs_extensionNameValue"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREextensionNameValue *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREextensionNameValue *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREextensionNameValue * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREextensionNameValue, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue, sizeof(witsml14__cs_USCOREextensionNameValue), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, NULL, "witsml14:cs_extensionNameValue"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREextensionNameValue(soap, tag, n, "witsml14:cs_extensionNameValue"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREextensionNameValue *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREextensionNameValue *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREextensionNameValue *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREextensionNameValue, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREextensionNameValue *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREextensionNameValue *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREextensionNameValue *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, id, &(*i), "witsml14:cs_documentSecurityInfo"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREdocumentSecurityInfo * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREdocumentSecurityInfo, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo, sizeof(witsml14__cs_USCOREdocumentSecurityInfo), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, NULL, "witsml14:cs_documentSecurityInfo"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREdocumentSecurityInfo(soap, tag, n, "witsml14:cs_documentSecurityInfo"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREdocumentSecurityInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREdocumentSecurityInfo, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREdocumentSecurityInfo *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREdocumentSecurityInfo *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__nameStruct(struct soap *soap, std::vector<witsml14__nameStruct *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__nameStruct(struct soap *soap, const std::vector<witsml14__nameStruct *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__nameStruct *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__nameStruct(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__nameStruct(struct soap *soap, const char *tag, int id, const std::vector<witsml14__nameStruct *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__nameStruct *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__nameStruct(soap, tag, id, &(*i), "witsml14:nameStruct"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__nameStruct *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__nameStruct(struct soap *soap, const char *tag, std::vector<witsml14__nameStruct *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__nameStruct(soap)))
			return NULL;
		a->emplace_back();
		witsml14__nameStruct * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__nameStruct, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__nameStruct, sizeof(witsml14__nameStruct), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__nameStruct(soap, tag, NULL, "witsml14:nameStruct"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__nameStruct(soap, tag, n, "witsml14:nameStruct"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__nameStruct *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__nameStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__nameStruct(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__nameStruct *> *p;
	size_t k = sizeof(std::vector<witsml14__nameStruct *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__nameStruct, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__nameStruct *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__nameStruct *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__nameStruct *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, std::vector<witsml14__cs_USCOREwellCRS *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, const std::vector<witsml14__cs_USCOREwellCRS *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREwellCRS *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREwellCRS(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREwellCRS *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREwellCRS *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, id, &(*i), "witsml14:cs_wellCRS"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREwellCRS *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREwellCRS *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREwellCRS * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellCRS, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS, sizeof(witsml14__cs_USCOREwellCRS), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, NULL, "witsml14:cs_wellCRS"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREwellCRS(soap, tag, n, "witsml14:cs_wellCRS"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREwellCRS *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREwellCRS *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREwellCRS *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellCRS, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREwellCRS *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREwellCRS *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREwellCRS *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, std::vector<witsml14__cs_USCOREreferencePoint *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, const std::vector<witsml14__cs_USCOREreferencePoint *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREreferencePoint *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREreferencePoint(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREreferencePoint *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREreferencePoint *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, id, &(*i), "witsml14:cs_referencePoint"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREreferencePoint *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREreferencePoint *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREreferencePoint * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREreferencePoint, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint, sizeof(witsml14__cs_USCOREreferencePoint), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, NULL, "witsml14:cs_referencePoint"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREreferencePoint(soap, tag, n, "witsml14:cs_referencePoint"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREreferencePoint *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREreferencePoint *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREreferencePoint *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREreferencePoint, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREreferencePoint *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREreferencePoint *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREreferencePoint *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(struct soap *soap, std::vector<witsml14__cs_USCORElocation *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(struct soap *soap, const std::vector<witsml14__cs_USCORElocation *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCORElocation *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCORElocation(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCORElocation *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCORElocation *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCORElocation(soap, tag, id, &(*i), "witsml14:cs_location"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCORElocation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCORElocation *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCORElocation * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCORElocation, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation, sizeof(witsml14__cs_USCORElocation), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCORElocation(soap, tag, NULL, "witsml14:cs_location"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCORElocation(soap, tag, n, "witsml14:cs_location"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCORElocation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCORElocation *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCORElocation *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCORElocation, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCORElocation *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCORElocation *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCORElocation *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, std::vector<witsml14__cs_USCOREwellDatum *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, const std::vector<witsml14__cs_USCOREwellDatum *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<witsml14__cs_USCOREwellDatum *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTowitsml14__cs_USCOREwellDatum(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, int id, const std::vector<witsml14__cs_USCOREwellDatum *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<witsml14__cs_USCOREwellDatum *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, id, &(*i), "witsml14:cs_wellDatum"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<witsml14__cs_USCOREwellDatum *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, const char *tag, std::vector<witsml14__cs_USCOREwellDatum *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(soap)))
			return NULL;
		a->emplace_back();
		witsml14__cs_USCOREwellDatum * *n = &a->back();
		*n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size() - 1, SOAP_TYPE_gsoap_witsml1_4_witsml14__cs_USCOREwellDatum, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum, sizeof(witsml14__cs_USCOREwellDatum), 1, gsoap_witsml1_4_finsert, gsoap_witsml1_4_fbase))
				break;
			if (!soap_in_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, NULL, "witsml14:cs_wellDatum"))
				break;
		}
		else
		{	if (!soap_in_PointerTowitsml14__cs_USCOREwellDatum(soap, tag, n, "witsml14:cs_wellDatum"))
			{	a->pop_back();
				break;
			}
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<witsml14__cs_USCOREwellDatum *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<witsml14__cs_USCOREwellDatum *> *p;
	size_t k = sizeof(std::vector<witsml14__cs_USCOREwellDatum *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_gsoap_witsml1_4_std__vectorTemplateOfPointerTowitsml14__cs_USCOREwellDatum, n, gsoap_witsml1_4_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<witsml14__cs_USCOREwellDatum *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<witsml14__cs_USCOREwellDatum *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<witsml14__cs_USCOREwellDatum *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

} // namespace gsoap_witsml1_4


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of gsoap_witsml1_4C.cpp */
