/* gsoap_uom1_0H.h
   Generated by gSOAP 2.8.127E for uom1_0ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool is licensed for commercial use and protected by law.
**  REDISTRIBUTION, RESALE OR ANY OTHER FORM OF SHARING IS STRICTLY PROHIBITED.
--------------------------------------------------------------------------------
Product and source code licensed by Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef gsoap_uom1_0H_H
#define gsoap_uom1_0H_H
#include "gsoap_uom1_0Stub.h"

namespace gsoap_uom1_0 {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 gsoap_uom1_0_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 gsoap_uom1_0_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 gsoap_uom1_0_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 gsoap_uom1_0_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_gsoap_uom1_0_byte_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_byte(soap, p, "byte", "xsd:byte") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_byte(soap, p, "byte", "xsd:byte") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_byte(soap, p, "byte", "xsd:byte") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_byte(soap, p, "byte", "xsd:byte") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (gsoap_uom1_0::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_int_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_int(soap, p, "int", "xsd:int") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_int(soap, p, "int", "xsd:int") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_int(soap, p, "int", "xsd:int") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_int(soap, p, "int", "xsd:int") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (gsoap_uom1_0::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_xsd__positiveInteger_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_xsd__positiveInteger_DEFINED

inline void soap_default_xsd__positiveInteger(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__positiveInteger
	*a = SOAP_DEFAULT_xsd__positiveInteger;
#else
	*a = (ULONG64)0;
#endif
}

#define soap_xsd__positiveInteger2s soap_ULONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__positiveInteger(struct soap*, const char*, ULONG64 *);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap*, const char*, ULONG64 *, const char*);

#define soap_instantiate_xsd__positiveInteger soap_instantiate_ULONG64


#define soap_new_xsd__positiveInteger soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_xsd__positiveInteger(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "xsd:positiveInteger") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "xsd:positiveInteger") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "xsd:positiveInteger") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "xsd:positiveInteger") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_xsd__positiveInteger(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_xsd__positiveInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_xsd__positiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__positiveInteger(struct soap *soap, ULONG64 *p)
{
	if (gsoap_uom1_0::soap_read_xsd__positiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_ULONG64_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_ULONG64(soap, p, "unsignedLong", "xsd:unsignedLong") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_ULONG64(soap, p, "unsignedLong", "xsd:unsignedLong") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_ULONG64(soap, p, "unsignedLong", "xsd:unsignedLong") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_ULONG64(soap, p, "unsignedLong", "xsd:unsignedLong") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (gsoap_uom1_0::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_bool_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_bool(soap, p, "boolean", "xsd:boolean") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_bool(soap, p, "boolean", "xsd:boolean") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_bool(soap, p, "boolean", "xsd:boolean") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_bool(soap, p, "boolean", "xsd:boolean") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (gsoap_uom1_0::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__zero_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__zero_DEFINED

inline void soap_default_uom10__zero(struct soap *soap, uom10__zero *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_uom10__zero
	*a = SOAP_DEFAULT_uom10__zero;
#else
	*a = (uom10__zero)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__zero(struct soap*, const char*, int, const uom10__zero *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_uom10__zero2s(struct soap*, uom10__zero);
SOAP_FMAC3 uom10__zero * SOAP_FMAC4 soap_in_uom10__zero(struct soap*, const char*, uom10__zero *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2uom10__zero(struct soap*, const char*, uom10__zero *);

SOAP_FMAC3 uom10__zero * SOAP_FMAC4 soap_new_uom10__zero(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__zero(struct soap*, const uom10__zero *, const char*, const char*);

inline int soap_write_uom10__zero(struct soap *soap, uom10__zero const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__zero(soap, p, "uom10:zero", "uom10:zero") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__zero(struct soap *soap, const char *URL, uom10__zero const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__zero(soap, p, "uom10:zero", "uom10:zero") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__zero(struct soap *soap, const char *URL, uom10__zero const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__zero(soap, p, "uom10:zero", "uom10:zero") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__zero(struct soap *soap, const char *URL, uom10__zero const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__zero(soap, p, "uom10:zero", "uom10:zero") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__zero * SOAP_FMAC4 soap_get_uom10__zero(struct soap*, uom10__zero *, const char*, const char*);

inline int soap_read_uom10__zero(struct soap *soap, uom10__zero *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__zero(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__zero(struct soap *soap, const char *URL, uom10__zero *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__zero(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__zero(struct soap *soap, uom10__zero *p)
{
	if (gsoap_uom1_0::soap_read_uom10__zero(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__stateEnum_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__stateEnum_DEFINED

inline void soap_default_uom10__stateEnum(struct soap *soap, uom10__stateEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_uom10__stateEnum
	*a = SOAP_DEFAULT_uom10__stateEnum;
#else
	*a = (uom10__stateEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__stateEnum(struct soap*, const char*, int, const uom10__stateEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_uom10__stateEnum2s(struct soap*, uom10__stateEnum);
SOAP_FMAC3 uom10__stateEnum * SOAP_FMAC4 soap_in_uom10__stateEnum(struct soap*, const char*, uom10__stateEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2uom10__stateEnum(struct soap*, const char*, uom10__stateEnum *);

SOAP_FMAC3 uom10__stateEnum * SOAP_FMAC4 soap_new_uom10__stateEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__stateEnum(struct soap*, const uom10__stateEnum *, const char*, const char*);

inline int soap_write_uom10__stateEnum(struct soap *soap, uom10__stateEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__stateEnum(soap, p, "uom10:stateEnum", "uom10:stateEnum") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__stateEnum(struct soap *soap, const char *URL, uom10__stateEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__stateEnum(soap, p, "uom10:stateEnum", "uom10:stateEnum") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__stateEnum(struct soap *soap, const char *URL, uom10__stateEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__stateEnum(soap, p, "uom10:stateEnum", "uom10:stateEnum") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__stateEnum(struct soap *soap, const char *URL, uom10__stateEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__stateEnum(soap, p, "uom10:stateEnum", "uom10:stateEnum") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__stateEnum * SOAP_FMAC4 soap_get_uom10__stateEnum(struct soap*, uom10__stateEnum *, const char*, const char*);

inline int soap_read_uom10__stateEnum(struct soap *soap, uom10__stateEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__stateEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__stateEnum(struct soap *soap, const char *URL, uom10__stateEnum *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__stateEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__stateEnum(struct soap *soap, uom10__stateEnum *p)
{
	if (gsoap_uom1_0::soap_read_uom10__stateEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _uom10__classMappingSet is a typedef synonym of uom10__classMappingSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet_DEFINED

#define soap_default__uom10__classMappingSet(soap, a) (a)->uom10__classMappingSet::soap_default(soap)


#define soap_serialize__uom10__classMappingSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__classMappingSet2s soap_uom10__classMappingSet2s


#define soap_out__uom10__classMappingSet soap_out_uom10__classMappingSet


#define soap_s2_uom10__classMappingSet soap_s2uom10__classMappingSet


#define soap_in__uom10__classMappingSet soap_in_uom10__classMappingSet


#define soap_instantiate__uom10__classMappingSet soap_instantiate_uom10__classMappingSet


#define soap_new__uom10__classMappingSet soap_new_uom10__classMappingSet


#define soap_new_req__uom10__classMappingSet soap_new_req_uom10__classMappingSet


#define soap_new_set__uom10__classMappingSet soap_new_set_uom10__classMappingSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__classMappingSet(struct soap*, const uom10__classMappingSet *, const char*, const char*);

inline int soap_write__uom10__classMappingSet(struct soap *soap, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__classMappingSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__classMappingSet soap_get_uom10__classMappingSet


#define soap_read__uom10__classMappingSet soap_read_uom10__classMappingSet


#define soap_GET__uom10__classMappingSet soap_GET_uom10__classMappingSet


#define soap_POST_recv__uom10__classMappingSet soap_POST_recv_uom10__classMappingSet

#endif
/* _uom10__unitMappingSet is a typedef synonym of uom10__unitMappingSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet_DEFINED

#define soap_default__uom10__unitMappingSet(soap, a) (a)->uom10__unitMappingSet::soap_default(soap)


#define soap_serialize__uom10__unitMappingSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__unitMappingSet2s soap_uom10__unitMappingSet2s


#define soap_out__uom10__unitMappingSet soap_out_uom10__unitMappingSet


#define soap_s2_uom10__unitMappingSet soap_s2uom10__unitMappingSet


#define soap_in__uom10__unitMappingSet soap_in_uom10__unitMappingSet


#define soap_instantiate__uom10__unitMappingSet soap_instantiate_uom10__unitMappingSet


#define soap_new__uom10__unitMappingSet soap_new_uom10__unitMappingSet


#define soap_new_req__uom10__unitMappingSet soap_new_req_uom10__unitMappingSet


#define soap_new_set__uom10__unitMappingSet soap_new_set_uom10__unitMappingSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__unitMappingSet(struct soap*, const uom10__unitMappingSet *, const char*, const char*);

inline int soap_write__uom10__unitMappingSet(struct soap *soap, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitMappingSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__unitMappingSet soap_get_uom10__unitMappingSet


#define soap_read__uom10__unitMappingSet soap_read_uom10__unitMappingSet


#define soap_GET__uom10__unitMappingSet soap_GET_uom10__unitMappingSet


#define soap_POST_recv__uom10__unitMappingSet soap_POST_recv_uom10__unitMappingSet

#endif
/* _uom10__integerCodeSet is a typedef synonym of uom10__integerCodeSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet_DEFINED

#define soap_default__uom10__integerCodeSet(soap, a) (a)->uom10__integerCodeSet::soap_default(soap)


#define soap_serialize__uom10__integerCodeSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__integerCodeSet2s soap_uom10__integerCodeSet2s


#define soap_out__uom10__integerCodeSet soap_out_uom10__integerCodeSet


#define soap_s2_uom10__integerCodeSet soap_s2uom10__integerCodeSet


#define soap_in__uom10__integerCodeSet soap_in_uom10__integerCodeSet


#define soap_instantiate__uom10__integerCodeSet soap_instantiate_uom10__integerCodeSet


#define soap_new__uom10__integerCodeSet soap_new_uom10__integerCodeSet


#define soap_new_req__uom10__integerCodeSet soap_new_req_uom10__integerCodeSet


#define soap_new_set__uom10__integerCodeSet soap_new_set_uom10__integerCodeSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__integerCodeSet(struct soap*, const uom10__integerCodeSet *, const char*, const char*);

inline int soap_write__uom10__integerCodeSet(struct soap *soap, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__integerCodeSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__integerCodeSet soap_get_uom10__integerCodeSet


#define soap_read__uom10__integerCodeSet soap_read_uom10__integerCodeSet


#define soap_GET__uom10__integerCodeSet soap_GET_uom10__integerCodeSet


#define soap_POST_recv__uom10__integerCodeSet soap_POST_recv_uom10__integerCodeSet

#endif
/* _uom10__prefixSet is a typedef synonym of uom10__prefixSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet_DEFINED

#define soap_default__uom10__prefixSet(soap, a) (a)->uom10__prefixSet::soap_default(soap)


#define soap_serialize__uom10__prefixSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__prefixSet2s soap_uom10__prefixSet2s


#define soap_out__uom10__prefixSet soap_out_uom10__prefixSet


#define soap_s2_uom10__prefixSet soap_s2uom10__prefixSet


#define soap_in__uom10__prefixSet soap_in_uom10__prefixSet


#define soap_instantiate__uom10__prefixSet soap_instantiate_uom10__prefixSet


#define soap_new__uom10__prefixSet soap_new_uom10__prefixSet


#define soap_new_req__uom10__prefixSet soap_new_req_uom10__prefixSet


#define soap_new_set__uom10__prefixSet soap_new_set_uom10__prefixSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__prefixSet(struct soap*, const uom10__prefixSet *, const char*, const char*);

inline int soap_write__uom10__prefixSet(struct soap *soap, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__prefixSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__prefixSet soap_get_uom10__prefixSet


#define soap_read__uom10__prefixSet soap_read_uom10__prefixSet


#define soap_GET__uom10__prefixSet soap_GET_uom10__prefixSet


#define soap_POST_recv__uom10__prefixSet soap_POST_recv_uom10__prefixSet

#endif
/* _uom10__referenceSet is a typedef synonym of uom10__referenceSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet_DEFINED

#define soap_default__uom10__referenceSet(soap, a) (a)->uom10__referenceSet::soap_default(soap)


#define soap_serialize__uom10__referenceSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__referenceSet2s soap_uom10__referenceSet2s


#define soap_out__uom10__referenceSet soap_out_uom10__referenceSet


#define soap_s2_uom10__referenceSet soap_s2uom10__referenceSet


#define soap_in__uom10__referenceSet soap_in_uom10__referenceSet


#define soap_instantiate__uom10__referenceSet soap_instantiate_uom10__referenceSet


#define soap_new__uom10__referenceSet soap_new_uom10__referenceSet


#define soap_new_req__uom10__referenceSet soap_new_req_uom10__referenceSet


#define soap_new_set__uom10__referenceSet soap_new_set_uom10__referenceSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__referenceSet(struct soap*, const uom10__referenceSet *, const char*, const char*);

inline int soap_write__uom10__referenceSet(struct soap *soap, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__referenceSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__referenceSet soap_get_uom10__referenceSet


#define soap_read__uom10__referenceSet soap_read_uom10__referenceSet


#define soap_GET__uom10__referenceSet soap_GET_uom10__referenceSet


#define soap_POST_recv__uom10__referenceSet soap_POST_recv_uom10__referenceSet

#endif
/* _uom10__unitSet is a typedef synonym of uom10__unitSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__unitSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__unitSet_DEFINED

#define soap_default__uom10__unitSet(soap, a) (a)->uom10__unitSet::soap_default(soap)


#define soap_serialize__uom10__unitSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__unitSet2s soap_uom10__unitSet2s


#define soap_out__uom10__unitSet soap_out_uom10__unitSet


#define soap_s2_uom10__unitSet soap_s2uom10__unitSet


#define soap_in__uom10__unitSet soap_in_uom10__unitSet


#define soap_instantiate__uom10__unitSet soap_instantiate_uom10__unitSet


#define soap_new__uom10__unitSet soap_new_uom10__unitSet


#define soap_new_req__uom10__unitSet soap_new_req_uom10__unitSet


#define soap_new_set__uom10__unitSet soap_new_set_uom10__unitSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__unitSet(struct soap*, const uom10__unitSet *, const char*, const char*);

inline int soap_write__uom10__unitSet(struct soap *soap, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__unitSet soap_get_uom10__unitSet


#define soap_read__uom10__unitSet soap_read_uom10__unitSet


#define soap_GET__uom10__unitSet soap_GET_uom10__unitSet


#define soap_POST_recv__uom10__unitSet soap_POST_recv_uom10__unitSet

#endif
/* _uom10__quantityClassSet is a typedef synonym of uom10__quantityClassSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet_DEFINED

#define soap_default__uom10__quantityClassSet(soap, a) (a)->uom10__quantityClassSet::soap_default(soap)


#define soap_serialize__uom10__quantityClassSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__quantityClassSet2s soap_uom10__quantityClassSet2s


#define soap_out__uom10__quantityClassSet soap_out_uom10__quantityClassSet


#define soap_s2_uom10__quantityClassSet soap_s2uom10__quantityClassSet


#define soap_in__uom10__quantityClassSet soap_in_uom10__quantityClassSet


#define soap_instantiate__uom10__quantityClassSet soap_instantiate_uom10__quantityClassSet


#define soap_new__uom10__quantityClassSet soap_new_uom10__quantityClassSet


#define soap_new_req__uom10__quantityClassSet soap_new_req_uom10__quantityClassSet


#define soap_new_set__uom10__quantityClassSet soap_new_set_uom10__quantityClassSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__quantityClassSet(struct soap*, const uom10__quantityClassSet *, const char*, const char*);

inline int soap_write__uom10__quantityClassSet(struct soap *soap, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__quantityClassSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__quantityClassSet soap_get_uom10__quantityClassSet


#define soap_read__uom10__quantityClassSet soap_read_uom10__quantityClassSet


#define soap_GET__uom10__quantityClassSet soap_GET_uom10__quantityClassSet


#define soap_POST_recv__uom10__quantityClassSet soap_POST_recv_uom10__quantityClassSet

#endif
/* _uom10__unitDimensionSet is a typedef synonym of uom10__unitDimensionSet */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet_DEFINED

#define soap_default__uom10__unitDimensionSet(soap, a) (a)->uom10__unitDimensionSet::soap_default(soap)


#define soap_serialize__uom10__unitDimensionSet(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__unitDimensionSet2s soap_uom10__unitDimensionSet2s


#define soap_out__uom10__unitDimensionSet soap_out_uom10__unitDimensionSet


#define soap_s2_uom10__unitDimensionSet soap_s2uom10__unitDimensionSet


#define soap_in__uom10__unitDimensionSet soap_in_uom10__unitDimensionSet


#define soap_instantiate__uom10__unitDimensionSet soap_instantiate_uom10__unitDimensionSet


#define soap_new__uom10__unitDimensionSet soap_new_uom10__unitDimensionSet


#define soap_new_req__uom10__unitDimensionSet soap_new_req_uom10__unitDimensionSet


#define soap_new_set__uom10__unitDimensionSet soap_new_set_uom10__unitDimensionSet

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__unitDimensionSet(struct soap*, const uom10__unitDimensionSet *, const char*, const char*);

inline int soap_write__uom10__unitDimensionSet(struct soap *soap, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__unitDimensionSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__unitDimensionSet soap_get_uom10__unitDimensionSet


#define soap_read__uom10__unitDimensionSet soap_read_uom10__unitDimensionSet


#define soap_GET__uom10__unitDimensionSet soap_GET_uom10__unitDimensionSet


#define soap_POST_recv__uom10__unitDimensionSet soap_POST_recv_uom10__unitDimensionSet

#endif
/* _uom10__uomDictionary is a typedef synonym of uom10__uomDictionary */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary_DEFINED

#define soap_default__uom10__uomDictionary(soap, a) (a)->uom10__uomDictionary::soap_default(soap)


#define soap_serialize__uom10__uomDictionary(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__uomDictionary2s soap_uom10__uomDictionary2s


#define soap_out__uom10__uomDictionary soap_out_uom10__uomDictionary


#define soap_s2_uom10__uomDictionary soap_s2uom10__uomDictionary


#define soap_in__uom10__uomDictionary soap_in_uom10__uomDictionary


#define soap_instantiate__uom10__uomDictionary soap_instantiate_uom10__uomDictionary


#define soap_new__uom10__uomDictionary soap_new_uom10__uomDictionary


#define soap_new_req__uom10__uomDictionary soap_new_req_uom10__uomDictionary


#define soap_new_set__uom10__uomDictionary soap_new_set_uom10__uomDictionary

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__uomDictionary(struct soap*, const uom10__uomDictionary *, const char*, const char*);

inline int soap_write__uom10__uomDictionary(struct soap *soap, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomDictionary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__uomDictionary soap_get_uom10__uomDictionary


#define soap_read__uom10__uomDictionary soap_read_uom10__uomDictionary


#define soap_GET__uom10__uomDictionary soap_GET_uom10__uomDictionary


#define soap_POST_recv__uom10__uomDictionary soap_POST_recv_uom10__uomDictionary

#endif
/* _uom10__uomAggregate is a typedef synonym of uom10__uomAggregate */

#ifndef SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate_DEFINED

#define soap_default__uom10__uomAggregate(soap, a) (a)->uom10__uomAggregate::soap_default(soap)


#define soap_serialize__uom10__uomAggregate(soap, a) (a)->soap_serialize(soap)


#define soap__uom10__uomAggregate2s soap_uom10__uomAggregate2s


#define soap_out__uom10__uomAggregate soap_out_uom10__uomAggregate


#define soap_s2_uom10__uomAggregate soap_s2uom10__uomAggregate


#define soap_in__uom10__uomAggregate soap_in_uom10__uomAggregate


#define soap_instantiate__uom10__uomAggregate soap_instantiate_uom10__uomAggregate


#define soap_new__uom10__uomAggregate soap_new_uom10__uomAggregate


#define soap_new_req__uom10__uomAggregate soap_new_req_uom10__uomAggregate


#define soap_new_set__uom10__uomAggregate soap_new_set_uom10__uomAggregate

SOAP_FMAC3 int SOAP_FMAC4 soap_put__uom10__uomAggregate(struct soap*, const uom10__uomAggregate *, const char*, const char*);

inline int soap_write__uom10__uomAggregate(struct soap *soap, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0__uom10__uomAggregate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__uom10__uomAggregate soap_get_uom10__uomAggregate


#define soap_read__uom10__uomAggregate soap_read_uom10__uomAggregate


#define soap_GET__uom10__uomAggregate soap_GET_uom10__uomAggregate


#define soap_POST_recv__uom10__uomAggregate soap_POST_recv_uom10__uomAggregate

#endif
/* uom10__commentString is a typedef restriction of uom10__collapsedNonEmptyString */

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__commentString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__commentString_DEFINED

#define soap_default_uom10__commentString soap_default_uom10__collapsedNonEmptyString


#define soap_serialize_uom10__commentString soap_serialize_uom10__collapsedNonEmptyString


#define soap_uom10__commentString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__commentString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__commentString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4000, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__commentString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__commentString soap_instantiate_uom10__collapsedNonEmptyString


#define soap_new_uom10__commentString soap_new_uom10__collapsedNonEmptyString

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__commentString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__commentString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__commentString(soap, p, "uom10:commentString", "uom10:commentString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__commentString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__commentString(soap, p, "uom10:commentString", "uom10:commentString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__commentString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__commentString(soap, p, "uom10:commentString", "uom10:commentString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__commentString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__commentString(soap, p, "uom10:commentString", "uom10:commentString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__commentString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__commentString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__commentString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__commentString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__commentString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__commentString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__commentString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* uom10__descriptionString is a typedef restriction of uom10__collapsedNonEmptyString */

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__descriptionString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__descriptionString_DEFINED

#define soap_default_uom10__descriptionString soap_default_uom10__collapsedNonEmptyString


#define soap_serialize_uom10__descriptionString soap_serialize_uom10__collapsedNonEmptyString


#define soap_uom10__descriptionString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__descriptionString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__descriptionString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 256, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__descriptionString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__descriptionString soap_instantiate_uom10__collapsedNonEmptyString


#define soap_new_uom10__descriptionString soap_new_uom10__collapsedNonEmptyString

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__descriptionString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__descriptionString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__descriptionString(soap, p, "uom10:descriptionString", "uom10:descriptionString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__descriptionString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__descriptionString(soap, p, "uom10:descriptionString", "uom10:descriptionString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__descriptionString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__descriptionString(soap, p, "uom10:descriptionString", "uom10:descriptionString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__descriptionString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__descriptionString(soap, p, "uom10:descriptionString", "uom10:descriptionString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__descriptionString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__descriptionString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__descriptionString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__descriptionString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__descriptionString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__descriptionString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__descriptionString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* uom10__nameString is a typedef restriction of uom10__collapsedNonEmptyString */

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__nameString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__nameString_DEFINED

#define soap_default_uom10__nameString soap_default_uom10__collapsedNonEmptyString


#define soap_serialize_uom10__nameString soap_serialize_uom10__collapsedNonEmptyString


#define soap_uom10__nameString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__nameString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__nameString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__nameString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__nameString soap_instantiate_uom10__collapsedNonEmptyString


#define soap_new_uom10__nameString soap_new_uom10__collapsedNonEmptyString

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__nameString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__nameString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__nameString(soap, p, "uom10:nameString", "uom10:nameString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__nameString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__nameString(soap, p, "uom10:nameString", "uom10:nameString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__nameString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__nameString(soap, p, "uom10:nameString", "uom10:nameString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__nameString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__nameString(soap, p, "uom10:nameString", "uom10:nameString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__nameString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__nameString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__nameString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__nameString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__nameString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__nameString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__nameString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__symbolString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__symbolString_DEFINED

inline void soap_default_uom10__symbolString(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_uom10__symbolString(struct soap*, const std::string *);

#define soap_uom10__symbolString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__symbolString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__symbolString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 40, "((1E((-)?([2-9]|[1-9][0-9]+))(/([2-9]|[1-9][0-9]+))?|1/([2-9]|[1-9][0-9]+)|(([2-9]|[1-9][0-9]+)|[1-9][0-9]*\\.[0-9]*[1-9]|0\\.[0-9]*[1-9])(E((-)?([2-9]|[1-9][0-9]+)))?(/([2-9]|[1-9][0-9]+))?) )?(((([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)|(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+))|(1|((([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)|(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+))|(\\(((([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)|(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+))/(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?|\\(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+\\))\\)))/((([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?|\\(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+\\))|(\\(((([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)|(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+))/(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?|\\(([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?(\\.([A-Za-z]+|%|inH2O|cmH2O)(\\[@?[A-Za-z0-9]+(,[A-Za-z0-9]+)*\\])?([2-9]|\\([1-9][0-9]*\\.[0-9]*[1-9]\\)|\\(0\\.[0-9]*[1-9]\\))?)+\\))\\))))")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__symbolString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__symbolString soap_instantiate_std__string


#define soap_new_uom10__symbolString soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__symbolString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__symbolString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__symbolString(soap, p, "uom10:symbolString", "uom10:symbolString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__symbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__symbolString(soap, p, "uom10:symbolString", "uom10:symbolString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__symbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__symbolString(soap, p, "uom10:symbolString", "uom10:symbolString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__symbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__symbolString(soap, p, "uom10:symbolString", "uom10:symbolString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__symbolString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__symbolString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__symbolString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__symbolString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__symbolString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__symbolString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__symbolString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__collapsedNonEmptyString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__collapsedNonEmptyString_DEFINED

inline void soap_default_uom10__collapsedNonEmptyString(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_uom10__collapsedNonEmptyString(struct soap*, const std::string *);

#define soap_uom10__collapsedNonEmptyString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__collapsedNonEmptyString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__collapsedNonEmptyString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__collapsedNonEmptyString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__collapsedNonEmptyString soap_instantiate_std__string


#define soap_new_uom10__collapsedNonEmptyString soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__collapsedNonEmptyString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__collapsedNonEmptyString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__collapsedNonEmptyString(soap, p, "uom10:collapsedNonEmptyString", "uom10:collapsedNonEmptyString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__collapsedNonEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__collapsedNonEmptyString(soap, p, "uom10:collapsedNonEmptyString", "uom10:collapsedNonEmptyString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__collapsedNonEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__collapsedNonEmptyString(soap, p, "uom10:collapsedNonEmptyString", "uom10:collapsedNonEmptyString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__collapsedNonEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__collapsedNonEmptyString(soap, p, "uom10:collapsedNonEmptyString", "uom10:collapsedNonEmptyString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__collapsedNonEmptyString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__collapsedNonEmptyString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__collapsedNonEmptyString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__collapsedNonEmptyString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__collapsedNonEmptyString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__collapsedNonEmptyString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__collapsedNonEmptyString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__quantityDimension_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__quantityDimension_DEFINED

inline void soap_default_uom10__quantityDimension(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_uom10__quantityDimension(struct soap*, const std::string *);

#define soap_uom10__quantityDimension2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__quantityDimension(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__quantityDimension(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__quantityDimension(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__quantityDimension soap_instantiate_std__string


#define soap_new_uom10__quantityDimension soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__quantityDimension(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__quantityDimension(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__quantityDimension(soap, p, "uom10:quantityDimension", "uom10:quantityDimension") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__quantityDimension(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__quantityDimension(soap, p, "uom10:quantityDimension", "uom10:quantityDimension") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__quantityDimension(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__quantityDimension(soap, p, "uom10:quantityDimension", "uom10:quantityDimension") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__quantityDimension(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__quantityDimension(soap, p, "uom10:quantityDimension", "uom10:quantityDimension") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__quantityDimension(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__quantityDimension(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__quantityDimension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__quantityDimension(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__quantityDimension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__quantityDimension(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__quantityDimension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__dimemsionalSymbolString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__dimemsionalSymbolString_DEFINED

inline void soap_default_uom10__dimemsionalSymbolString(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_uom10__dimemsionalSymbolString(struct soap*, const std::string *);

#define soap_uom10__dimemsionalSymbolString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__dimemsionalSymbolString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2uom10__dimemsionalSymbolString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_uom10__dimemsionalSymbolString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_uom10__dimemsionalSymbolString soap_instantiate_std__string


#define soap_new_uom10__dimemsionalSymbolString soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_uom10__dimemsionalSymbolString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_uom10__dimemsionalSymbolString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_uom10__dimemsionalSymbolString(soap, p, "uom10:dimemsionalSymbolString", "uom10:dimemsionalSymbolString") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_uom10__dimemsionalSymbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__dimemsionalSymbolString(soap, p, "uom10:dimemsionalSymbolString", "uom10:dimemsionalSymbolString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__dimemsionalSymbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__dimemsionalSymbolString(soap, p, "uom10:dimemsionalSymbolString", "uom10:dimemsionalSymbolString") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__dimemsionalSymbolString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_uom10__dimemsionalSymbolString(soap, p, "uom10:dimemsionalSymbolString", "uom10:dimemsionalSymbolString") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_uom10__dimemsionalSymbolString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_uom10__dimemsionalSymbolString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__dimemsionalSymbolString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__dimemsionalSymbolString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__dimemsionalSymbolString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__dimemsionalSymbolString(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_uom10__dimemsionalSymbolString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__string_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = gsoap_uom1_0::soap_new_std__string(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = gsoap_uom1_0::soap_new_std__string(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_std__string(soap, p, "string", "xsd:string") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_std__string(soap, p, "string", "xsd:string") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_std__string(soap, p, "string", "xsd:string") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_std__string(soap, p, "string", "xsd:string") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (gsoap_uom1_0::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitCodeStruct(struct soap*, const char*, int, const uom10__unitCodeStruct *, const char*);
SOAP_FMAC3 uom10__unitCodeStruct * SOAP_FMAC4 soap_in_uom10__unitCodeStruct(struct soap*, const char*, uom10__unitCodeStruct *, const char*);
SOAP_FMAC1 uom10__unitCodeStruct * SOAP_FMAC2 soap_instantiate_uom10__unitCodeStruct(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitCodeStruct * soap_new_uom10__unitCodeStruct(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitCodeStruct(soap, n, NULL, NULL, NULL);
}

inline uom10__unitCodeStruct * soap_new_req_uom10__unitCodeStruct(
	struct soap *soap,
	const std::string& __item,
	ULONG64 code)
{
	uom10__unitCodeStruct *_p = gsoap_uom1_0::soap_new_uom10__unitCodeStruct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCodeStruct::__item = __item;
		_p->uom10__unitCodeStruct::code = code;
	}
	return _p;
}

inline uom10__unitCodeStruct * soap_new_set_uom10__unitCodeStruct(
	struct soap *soap,
	const std::string& __item,
	ULONG64 code)
{
	uom10__unitCodeStruct *_p = gsoap_uom1_0::soap_new_uom10__unitCodeStruct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCodeStruct::__item = __item;
		_p->uom10__unitCodeStruct::code = code;
	}
	return _p;
}

inline int soap_write_uom10__unitCodeStruct(struct soap *soap, uom10__unitCodeStruct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeStruct", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct ? "uom10:unitCodeStruct" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitCodeStruct(struct soap *soap, const char *URL, uom10__unitCodeStruct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeStruct", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct ? "uom10:unitCodeStruct" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitCodeStruct(struct soap *soap, const char *URL, uom10__unitCodeStruct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeStruct", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct ? "uom10:unitCodeStruct" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitCodeStruct(struct soap *soap, const char *URL, uom10__unitCodeStruct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeStruct", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeStruct ? "uom10:unitCodeStruct" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitCodeStruct * SOAP_FMAC4 soap_get_uom10__unitCodeStruct(struct soap*, uom10__unitCodeStruct *, const char*, const char*);

inline int soap_read_uom10__unitCodeStruct(struct soap *soap, uom10__unitCodeStruct *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitCodeStruct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitCodeStruct(struct soap *soap, const char *URL, uom10__unitCodeStruct *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitCodeStruct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitCodeStruct(struct soap *soap, uom10__unitCodeStruct *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitCodeStruct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__emptyElement(struct soap*, const char*, int, const uom10__emptyElement *, const char*);
SOAP_FMAC3 uom10__emptyElement * SOAP_FMAC4 soap_in_uom10__emptyElement(struct soap*, const char*, uom10__emptyElement *, const char*);
SOAP_FMAC1 uom10__emptyElement * SOAP_FMAC2 soap_instantiate_uom10__emptyElement(struct soap*, int, const char*, const char*, size_t*);

inline uom10__emptyElement * soap_new_uom10__emptyElement(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__emptyElement(soap, n, NULL, NULL, NULL);
}

inline uom10__emptyElement * soap_new_req_uom10__emptyElement(
	struct soap *soap)
{
	uom10__emptyElement *_p = gsoap_uom1_0::soap_new_uom10__emptyElement(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline uom10__emptyElement * soap_new_set_uom10__emptyElement(
	struct soap *soap)
{
	uom10__emptyElement *_p = gsoap_uom1_0::soap_new_uom10__emptyElement(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_uom10__emptyElement(struct soap *soap, uom10__emptyElement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:emptyElement", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement ? "uom10:emptyElement" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__emptyElement(struct soap *soap, const char *URL, uom10__emptyElement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:emptyElement", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement ? "uom10:emptyElement" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__emptyElement(struct soap *soap, const char *URL, uom10__emptyElement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:emptyElement", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement ? "uom10:emptyElement" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__emptyElement(struct soap *soap, const char *URL, uom10__emptyElement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:emptyElement", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__emptyElement ? "uom10:emptyElement" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__emptyElement * SOAP_FMAC4 soap_get_uom10__emptyElement(struct soap*, uom10__emptyElement *, const char*, const char*);

inline int soap_read_uom10__emptyElement(struct soap *soap, uom10__emptyElement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__emptyElement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__emptyElement(struct soap *soap, const char *URL, uom10__emptyElement *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__emptyElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__emptyElement(struct soap *soap, uom10__emptyElement *p)
{
	if (gsoap_uom1_0::soap_read_uom10__emptyElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__mapFromToClass(struct soap*, const char*, int, const uom10__mapFromToClass *, const char*);
SOAP_FMAC3 uom10__mapFromToClass * SOAP_FMAC4 soap_in_uom10__mapFromToClass(struct soap*, const char*, uom10__mapFromToClass *, const char*);
SOAP_FMAC1 uom10__mapFromToClass * SOAP_FMAC2 soap_instantiate_uom10__mapFromToClass(struct soap*, int, const char*, const char*, size_t*);

inline uom10__mapFromToClass * soap_new_uom10__mapFromToClass(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__mapFromToClass(soap, n, NULL, NULL, NULL);
}

inline uom10__mapFromToClass * soap_new_req_uom10__mapFromToClass(
	struct soap *soap,
	const std::string& mapsFrom,
	const std::string& mapsTo)
{
	uom10__mapFromToClass *_p = gsoap_uom1_0::soap_new_uom10__mapFromToClass(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__mapFromToClass::mapsFrom = mapsFrom;
		_p->uom10__mapFromToClass::mapsTo = mapsTo;
	}
	return _p;
}

inline uom10__mapFromToClass * soap_new_set_uom10__mapFromToClass(
	struct soap *soap,
	const std::string& mapsFrom,
	const std::string& mapsTo)
{
	uom10__mapFromToClass *_p = gsoap_uom1_0::soap_new_uom10__mapFromToClass(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__mapFromToClass::mapsFrom = mapsFrom;
		_p->uom10__mapFromToClass::mapsTo = mapsTo;
	}
	return _p;
}

inline int soap_write_uom10__mapFromToClass(struct soap *soap, uom10__mapFromToClass const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass ? "uom10:mapFromToClass" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__mapFromToClass(struct soap *soap, const char *URL, uom10__mapFromToClass const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass ? "uom10:mapFromToClass" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__mapFromToClass(struct soap *soap, const char *URL, uom10__mapFromToClass const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass ? "uom10:mapFromToClass" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__mapFromToClass(struct soap *soap, const char *URL, uom10__mapFromToClass const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToClass ? "uom10:mapFromToClass" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__mapFromToClass * SOAP_FMAC4 soap_get_uom10__mapFromToClass(struct soap*, uom10__mapFromToClass *, const char*, const char*);

inline int soap_read_uom10__mapFromToClass(struct soap *soap, uom10__mapFromToClass *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__mapFromToClass(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__mapFromToClass(struct soap *soap, const char *URL, uom10__mapFromToClass *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__mapFromToClass(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__mapFromToClass(struct soap *soap, uom10__mapFromToClass *p)
{
	if (gsoap_uom1_0::soap_read_uom10__mapFromToClass(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__classMappingSet(struct soap*, const char*, int, const uom10__classMappingSet *, const char*);
SOAP_FMAC3 uom10__classMappingSet * SOAP_FMAC4 soap_in_uom10__classMappingSet(struct soap*, const char*, uom10__classMappingSet *, const char*);
SOAP_FMAC1 uom10__classMappingSet * SOAP_FMAC2 soap_instantiate_uom10__classMappingSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__classMappingSet * soap_new_uom10__classMappingSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__classMappingSet(soap, n, NULL, NULL, NULL);
}

inline uom10__classMappingSet * soap_new_req_uom10__classMappingSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	const std::vector<uom10__mapFromToClass *> & classMap,
	const std::string& version)
{
	uom10__classMappingSet *_p = gsoap_uom1_0::soap_new_uom10__classMappingSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classMappingSet::title = title;
		_p->uom10__classMappingSet::originator = originator;
		_p->uom10__classMappingSet::description = description;
		_p->uom10__classMappingSet::classMap = classMap;
		_p->uom10__classMappingSet::version = version;
	}
	return _p;
}

inline uom10__classMappingSet * soap_new_set_uom10__classMappingSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	const std::vector<uom10__mapFromToClass *> & classMap,
	const std::string& version)
{
	uom10__classMappingSet *_p = gsoap_uom1_0::soap_new_uom10__classMappingSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classMappingSet::title = title;
		_p->uom10__classMappingSet::originator = originator;
		_p->uom10__classMappingSet::description = description;
		_p->uom10__classMappingSet::classMap = classMap;
		_p->uom10__classMappingSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__classMappingSet(struct soap *soap, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet ? "uom10:classMappingSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet ? "uom10:classMappingSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet ? "uom10:classMappingSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classMappingSet ? "uom10:classMappingSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__classMappingSet * SOAP_FMAC4 soap_get_uom10__classMappingSet(struct soap*, uom10__classMappingSet *, const char*, const char*);

inline int soap_read_uom10__classMappingSet(struct soap *soap, uom10__classMappingSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__classMappingSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__classMappingSet(struct soap *soap, const char *URL, uom10__classMappingSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__classMappingSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__classMappingSet(struct soap *soap, uom10__classMappingSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__classMappingSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__mapFromToUnit(struct soap*, const char*, int, const uom10__mapFromToUnit *, const char*);
SOAP_FMAC3 uom10__mapFromToUnit * SOAP_FMAC4 soap_in_uom10__mapFromToUnit(struct soap*, const char*, uom10__mapFromToUnit *, const char*);
SOAP_FMAC1 uom10__mapFromToUnit * SOAP_FMAC2 soap_instantiate_uom10__mapFromToUnit(struct soap*, int, const char*, const char*, size_t*);

inline uom10__mapFromToUnit * soap_new_uom10__mapFromToUnit(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__mapFromToUnit(soap, n, NULL, NULL, NULL);
}

inline uom10__mapFromToUnit * soap_new_req_uom10__mapFromToUnit(
	struct soap *soap,
	const std::string& mapsFrom,
	const std::string& mapsTo,
	uom10__stateEnum state)
{
	uom10__mapFromToUnit *_p = gsoap_uom1_0::soap_new_uom10__mapFromToUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__mapFromToUnit::mapsFrom = mapsFrom;
		_p->uom10__mapFromToUnit::mapsTo = mapsTo;
		_p->uom10__mapFromToUnit::state = state;
	}
	return _p;
}

inline uom10__mapFromToUnit * soap_new_set_uom10__mapFromToUnit(
	struct soap *soap,
	const std::string& mapsFrom,
	const std::string& mapsTo,
	uom10__stateEnum state,
	std::string *note)
{
	uom10__mapFromToUnit *_p = gsoap_uom1_0::soap_new_uom10__mapFromToUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__mapFromToUnit::mapsFrom = mapsFrom;
		_p->uom10__mapFromToUnit::mapsTo = mapsTo;
		_p->uom10__mapFromToUnit::state = state;
		_p->uom10__mapFromToUnit::note = note;
	}
	return _p;
}

inline int soap_write_uom10__mapFromToUnit(struct soap *soap, uom10__mapFromToUnit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToUnit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit ? "uom10:mapFromToUnit" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__mapFromToUnit(struct soap *soap, const char *URL, uom10__mapFromToUnit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToUnit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit ? "uom10:mapFromToUnit" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__mapFromToUnit(struct soap *soap, const char *URL, uom10__mapFromToUnit const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToUnit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit ? "uom10:mapFromToUnit" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__mapFromToUnit(struct soap *soap, const char *URL, uom10__mapFromToUnit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:mapFromToUnit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__mapFromToUnit ? "uom10:mapFromToUnit" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__mapFromToUnit * SOAP_FMAC4 soap_get_uom10__mapFromToUnit(struct soap*, uom10__mapFromToUnit *, const char*, const char*);

inline int soap_read_uom10__mapFromToUnit(struct soap *soap, uom10__mapFromToUnit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__mapFromToUnit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__mapFromToUnit(struct soap *soap, const char *URL, uom10__mapFromToUnit *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__mapFromToUnit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__mapFromToUnit(struct soap *soap, uom10__mapFromToUnit *p)
{
	if (gsoap_uom1_0::soap_read_uom10__mapFromToUnit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitMappingSet(struct soap*, const char*, int, const uom10__unitMappingSet *, const char*);
SOAP_FMAC3 uom10__unitMappingSet * SOAP_FMAC4 soap_in_uom10__unitMappingSet(struct soap*, const char*, uom10__unitMappingSet *, const char*);
SOAP_FMAC1 uom10__unitMappingSet * SOAP_FMAC2 soap_instantiate_uom10__unitMappingSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitMappingSet * soap_new_uom10__unitMappingSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitMappingSet(soap, n, NULL, NULL, NULL);
}

inline uom10__unitMappingSet * soap_new_req_uom10__unitMappingSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	const std::vector<uom10__mapFromToUnit *> & unitMap,
	const std::string& version)
{
	uom10__unitMappingSet *_p = gsoap_uom1_0::soap_new_uom10__unitMappingSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitMappingSet::title = title;
		_p->uom10__unitMappingSet::originator = originator;
		_p->uom10__unitMappingSet::description = description;
		_p->uom10__unitMappingSet::unitMap = unitMap;
		_p->uom10__unitMappingSet::version = version;
	}
	return _p;
}

inline uom10__unitMappingSet * soap_new_set_uom10__unitMappingSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	const std::vector<uom10__mapFromToUnit *> & unitMap,
	const std::string& version)
{
	uom10__unitMappingSet *_p = gsoap_uom1_0::soap_new_uom10__unitMappingSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitMappingSet::title = title;
		_p->uom10__unitMappingSet::originator = originator;
		_p->uom10__unitMappingSet::description = description;
		_p->uom10__unitMappingSet::unitMap = unitMap;
		_p->uom10__unitMappingSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__unitMappingSet(struct soap *soap, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet ? "uom10:unitMappingSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet ? "uom10:unitMappingSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet ? "uom10:unitMappingSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitMappingSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitMappingSet ? "uom10:unitMappingSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitMappingSet * SOAP_FMAC4 soap_get_uom10__unitMappingSet(struct soap*, uom10__unitMappingSet *, const char*, const char*);

inline int soap_read_uom10__unitMappingSet(struct soap *soap, uom10__unitMappingSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitMappingSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitMappingSet(struct soap *soap, const char *URL, uom10__unitMappingSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitMappingSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitMappingSet(struct soap *soap, uom10__unitMappingSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitMappingSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitCode(struct soap*, const char*, int, const uom10__unitCode *, const char*);
SOAP_FMAC3 uom10__unitCode * SOAP_FMAC4 soap_in_uom10__unitCode(struct soap*, const char*, uom10__unitCode *, const char*);
SOAP_FMAC1 uom10__unitCode * SOAP_FMAC2 soap_instantiate_uom10__unitCode(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitCode * soap_new_uom10__unitCode(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitCode(soap, n, NULL, NULL, NULL);
}

inline uom10__unitCode * soap_new_req_uom10__unitCode(
	struct soap *soap,
	const std::string& term,
	ULONG64 code)
{
	uom10__unitCode *_p = gsoap_uom1_0::soap_new_uom10__unitCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCode::term = term;
		_p->uom10__unitCode::code = code;
	}
	return _p;
}

inline uom10__unitCode * soap_new_set_uom10__unitCode(
	struct soap *soap,
	const std::string& term,
	ULONG64 code,
	std::string *deprecated)
{
	uom10__unitCode *_p = gsoap_uom1_0::soap_new_uom10__unitCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCode::term = term;
		_p->uom10__unitCode::code = code;
		_p->uom10__unitCode::deprecated = deprecated;
	}
	return _p;
}

inline int soap_write_uom10__unitCode(struct soap *soap, uom10__unitCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCode ? "uom10:unitCode" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitCode(struct soap *soap, const char *URL, uom10__unitCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCode ? "uom10:unitCode" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitCode(struct soap *soap, const char *URL, uom10__unitCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCode ? "uom10:unitCode" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitCode(struct soap *soap, const char *URL, uom10__unitCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCode ? "uom10:unitCode" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitCode * SOAP_FMAC4 soap_get_uom10__unitCode(struct soap*, uom10__unitCode *, const char*, const char*);

inline int soap_read_uom10__unitCode(struct soap *soap, uom10__unitCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitCode(struct soap *soap, const char *URL, uom10__unitCode *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitCode(struct soap *soap, uom10__unitCode *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__classCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__classCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__classCode(struct soap*, const char*, int, const uom10__classCode *, const char*);
SOAP_FMAC3 uom10__classCode * SOAP_FMAC4 soap_in_uom10__classCode(struct soap*, const char*, uom10__classCode *, const char*);
SOAP_FMAC1 uom10__classCode * SOAP_FMAC2 soap_instantiate_uom10__classCode(struct soap*, int, const char*, const char*, size_t*);

inline uom10__classCode * soap_new_uom10__classCode(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__classCode(soap, n, NULL, NULL, NULL);
}

inline uom10__classCode * soap_new_req_uom10__classCode(
	struct soap *soap,
	const std::string& term,
	ULONG64 code,
	uom10__unitCodeStruct *unit)
{
	uom10__classCode *_p = gsoap_uom1_0::soap_new_uom10__classCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classCode::term = term;
		_p->uom10__classCode::code = code;
		_p->uom10__classCode::unit = unit;
	}
	return _p;
}

inline uom10__classCode * soap_new_set_uom10__classCode(
	struct soap *soap,
	const std::string& term,
	ULONG64 code,
	std::string *deprecated,
	uom10__unitCodeStruct *unit)
{
	uom10__classCode *_p = gsoap_uom1_0::soap_new_uom10__classCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classCode::term = term;
		_p->uom10__classCode::code = code;
		_p->uom10__classCode::deprecated = deprecated;
		_p->uom10__classCode::unit = unit;
	}
	return _p;
}

inline int soap_write_uom10__classCode(struct soap *soap, uom10__classCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCode ? "uom10:classCode" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__classCode(struct soap *soap, const char *URL, uom10__classCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCode ? "uom10:classCode" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__classCode(struct soap *soap, const char *URL, uom10__classCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCode ? "uom10:classCode" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__classCode(struct soap *soap, const char *URL, uom10__classCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCode", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCode ? "uom10:classCode" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__classCode * SOAP_FMAC4 soap_get_uom10__classCode(struct soap*, uom10__classCode *, const char*, const char*);

inline int soap_read_uom10__classCode(struct soap *soap, uom10__classCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__classCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__classCode(struct soap *soap, const char *URL, uom10__classCode *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__classCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__classCode(struct soap *soap, uom10__classCode *p)
{
	if (gsoap_uom1_0::soap_read_uom10__classCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitCodeSet(struct soap*, const char*, int, const uom10__unitCodeSet *, const char*);
SOAP_FMAC3 uom10__unitCodeSet * SOAP_FMAC4 soap_in_uom10__unitCodeSet(struct soap*, const char*, uom10__unitCodeSet *, const char*);
SOAP_FMAC1 uom10__unitCodeSet * SOAP_FMAC2 soap_instantiate_uom10__unitCodeSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitCodeSet * soap_new_uom10__unitCodeSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitCodeSet(soap, n, NULL, NULL, NULL);
}

inline uom10__unitCodeSet * soap_new_req_uom10__unitCodeSet(
	struct soap *soap,
	const std::vector<uom10__unitCode *> & unitCode)
{
	uom10__unitCodeSet *_p = gsoap_uom1_0::soap_new_uom10__unitCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCodeSet::unitCode = unitCode;
	}
	return _p;
}

inline uom10__unitCodeSet * soap_new_set_uom10__unitCodeSet(
	struct soap *soap,
	const std::vector<uom10__unitCode *> & unitCode)
{
	uom10__unitCodeSet *_p = gsoap_uom1_0::soap_new_uom10__unitCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitCodeSet::unitCode = unitCode;
	}
	return _p;
}

inline int soap_write_uom10__unitCodeSet(struct soap *soap, uom10__unitCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet ? "uom10:unitCodeSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitCodeSet(struct soap *soap, const char *URL, uom10__unitCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet ? "uom10:unitCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitCodeSet(struct soap *soap, const char *URL, uom10__unitCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet ? "uom10:unitCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitCodeSet(struct soap *soap, const char *URL, uom10__unitCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitCodeSet ? "uom10:unitCodeSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitCodeSet * SOAP_FMAC4 soap_get_uom10__unitCodeSet(struct soap*, uom10__unitCodeSet *, const char*, const char*);

inline int soap_read_uom10__unitCodeSet(struct soap *soap, uom10__unitCodeSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitCodeSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitCodeSet(struct soap *soap, const char *URL, uom10__unitCodeSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitCodeSet(struct soap *soap, uom10__unitCodeSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__classCodeSet(struct soap*, const char*, int, const uom10__classCodeSet *, const char*);
SOAP_FMAC3 uom10__classCodeSet * SOAP_FMAC4 soap_in_uom10__classCodeSet(struct soap*, const char*, uom10__classCodeSet *, const char*);
SOAP_FMAC1 uom10__classCodeSet * SOAP_FMAC2 soap_instantiate_uom10__classCodeSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__classCodeSet * soap_new_uom10__classCodeSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__classCodeSet(soap, n, NULL, NULL, NULL);
}

inline uom10__classCodeSet * soap_new_req_uom10__classCodeSet(
	struct soap *soap,
	const std::vector<uom10__classCode *> & classCode)
{
	uom10__classCodeSet *_p = gsoap_uom1_0::soap_new_uom10__classCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classCodeSet::classCode = classCode;
	}
	return _p;
}

inline uom10__classCodeSet * soap_new_set_uom10__classCodeSet(
	struct soap *soap,
	const std::vector<uom10__classCode *> & classCode)
{
	uom10__classCodeSet *_p = gsoap_uom1_0::soap_new_uom10__classCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__classCodeSet::classCode = classCode;
	}
	return _p;
}

inline int soap_write_uom10__classCodeSet(struct soap *soap, uom10__classCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet ? "uom10:classCodeSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__classCodeSet(struct soap *soap, const char *URL, uom10__classCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet ? "uom10:classCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__classCodeSet(struct soap *soap, const char *URL, uom10__classCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet ? "uom10:classCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__classCodeSet(struct soap *soap, const char *URL, uom10__classCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:classCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__classCodeSet ? "uom10:classCodeSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__classCodeSet * SOAP_FMAC4 soap_get_uom10__classCodeSet(struct soap*, uom10__classCodeSet *, const char*, const char*);

inline int soap_read_uom10__classCodeSet(struct soap *soap, uom10__classCodeSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__classCodeSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__classCodeSet(struct soap *soap, const char *URL, uom10__classCodeSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__classCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__classCodeSet(struct soap *soap, uom10__classCodeSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__classCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__integerCodeSet(struct soap*, const char*, int, const uom10__integerCodeSet *, const char*);
SOAP_FMAC3 uom10__integerCodeSet * SOAP_FMAC4 soap_in_uom10__integerCodeSet(struct soap*, const char*, uom10__integerCodeSet *, const char*);
SOAP_FMAC1 uom10__integerCodeSet * SOAP_FMAC2 soap_instantiate_uom10__integerCodeSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__integerCodeSet * soap_new_uom10__integerCodeSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__integerCodeSet(soap, n, NULL, NULL, NULL);
}

inline uom10__integerCodeSet * soap_new_req_uom10__integerCodeSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	uom10__classCodeSet *classCodeSet,
	uom10__unitCodeSet *unitCodeSet,
	const std::string& version)
{
	uom10__integerCodeSet *_p = gsoap_uom1_0::soap_new_uom10__integerCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__integerCodeSet::title = title;
		_p->uom10__integerCodeSet::originator = originator;
		_p->uom10__integerCodeSet::description = description;
		_p->uom10__integerCodeSet::classCodeSet = classCodeSet;
		_p->uom10__integerCodeSet::unitCodeSet = unitCodeSet;
		_p->uom10__integerCodeSet::version = version;
	}
	return _p;
}

inline uom10__integerCodeSet * soap_new_set_uom10__integerCodeSet(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	uom10__classCodeSet *classCodeSet,
	uom10__unitCodeSet *unitCodeSet,
	const std::string& version)
{
	uom10__integerCodeSet *_p = gsoap_uom1_0::soap_new_uom10__integerCodeSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__integerCodeSet::title = title;
		_p->uom10__integerCodeSet::originator = originator;
		_p->uom10__integerCodeSet::description = description;
		_p->uom10__integerCodeSet::classCodeSet = classCodeSet;
		_p->uom10__integerCodeSet::unitCodeSet = unitCodeSet;
		_p->uom10__integerCodeSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__integerCodeSet(struct soap *soap, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet ? "uom10:integerCodeSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet ? "uom10:integerCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet ? "uom10:integerCodeSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:integerCodeSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__integerCodeSet ? "uom10:integerCodeSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__integerCodeSet * SOAP_FMAC4 soap_get_uom10__integerCodeSet(struct soap*, uom10__integerCodeSet *, const char*, const char*);

inline int soap_read_uom10__integerCodeSet(struct soap *soap, uom10__integerCodeSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__integerCodeSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__integerCodeSet(struct soap *soap, const char *URL, uom10__integerCodeSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__integerCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__integerCodeSet(struct soap *soap, uom10__integerCodeSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__integerCodeSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__prefix_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__prefix_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__prefix(struct soap*, const char*, int, const uom10__prefix *, const char*);
SOAP_FMAC3 uom10__prefix * SOAP_FMAC4 soap_in_uom10__prefix(struct soap*, const char*, uom10__prefix *, const char*);
SOAP_FMAC1 uom10__prefix * SOAP_FMAC2 soap_instantiate_uom10__prefix(struct soap*, int, const char*, const char*, size_t*);

inline uom10__prefix * soap_new_uom10__prefix(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__prefix(soap, n, NULL, NULL, NULL);
}

inline uom10__prefix * soap_new_req_uom10__prefix(
	struct soap *soap,
	const std::string& symbol,
	const std::string& name,
	const std::string& multiplier)
{
	uom10__prefix *_p = gsoap_uom1_0::soap_new_uom10__prefix(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__prefix::symbol = symbol;
		_p->uom10__prefix::name = name;
		_p->uom10__prefix::multiplier = multiplier;
	}
	return _p;
}

inline uom10__prefix * soap_new_set_uom10__prefix(
	struct soap *soap,
	const std::string& symbol,
	const std::string& name,
	const std::string& multiplier,
	std::string *commonName)
{
	uom10__prefix *_p = gsoap_uom1_0::soap_new_uom10__prefix(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__prefix::symbol = symbol;
		_p->uom10__prefix::name = name;
		_p->uom10__prefix::multiplier = multiplier;
		_p->uom10__prefix::commonName = commonName;
	}
	return _p;
}

inline int soap_write_uom10__prefix(struct soap *soap, uom10__prefix const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefix", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefix ? "uom10:prefix" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__prefix(struct soap *soap, const char *URL, uom10__prefix const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefix", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefix ? "uom10:prefix" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__prefix(struct soap *soap, const char *URL, uom10__prefix const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefix", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefix ? "uom10:prefix" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__prefix(struct soap *soap, const char *URL, uom10__prefix const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefix", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefix ? "uom10:prefix" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__prefix * SOAP_FMAC4 soap_get_uom10__prefix(struct soap*, uom10__prefix *, const char*, const char*);

inline int soap_read_uom10__prefix(struct soap *soap, uom10__prefix *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__prefix(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__prefix(struct soap *soap, const char *URL, uom10__prefix *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__prefix(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__prefix(struct soap *soap, uom10__prefix *p)
{
	if (gsoap_uom1_0::soap_read_uom10__prefix(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__prefixSet(struct soap*, const char*, int, const uom10__prefixSet *, const char*);
SOAP_FMAC3 uom10__prefixSet * SOAP_FMAC4 soap_in_uom10__prefixSet(struct soap*, const char*, uom10__prefixSet *, const char*);
SOAP_FMAC1 uom10__prefixSet * SOAP_FMAC2 soap_instantiate_uom10__prefixSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__prefixSet * soap_new_uom10__prefixSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__prefixSet(soap, n, NULL, NULL, NULL);
}

inline uom10__prefixSet * soap_new_req_uom10__prefixSet(
	struct soap *soap,
	const std::vector<uom10__prefix *> & prefix,
	const std::string& version)
{
	uom10__prefixSet *_p = gsoap_uom1_0::soap_new_uom10__prefixSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__prefixSet::prefix = prefix;
		_p->uom10__prefixSet::version = version;
	}
	return _p;
}

inline uom10__prefixSet * soap_new_set_uom10__prefixSet(
	struct soap *soap,
	const std::vector<uom10__prefix *> & prefix,
	const std::string& version)
{
	uom10__prefixSet *_p = gsoap_uom1_0::soap_new_uom10__prefixSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__prefixSet::prefix = prefix;
		_p->uom10__prefixSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__prefixSet(struct soap *soap, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet ? "uom10:prefixSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet ? "uom10:prefixSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet ? "uom10:prefixSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:prefixSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__prefixSet ? "uom10:prefixSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__prefixSet * SOAP_FMAC4 soap_get_uom10__prefixSet(struct soap*, uom10__prefixSet *, const char*, const char*);

inline int soap_read_uom10__prefixSet(struct soap *soap, uom10__prefixSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__prefixSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__prefixSet(struct soap *soap, const char *URL, uom10__prefixSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__prefixSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__prefixSet(struct soap *soap, uom10__prefixSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__prefixSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__reference_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__reference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__reference(struct soap*, const char*, int, const uom10__reference *, const char*);
SOAP_FMAC3 uom10__reference * SOAP_FMAC4 soap_in_uom10__reference(struct soap*, const char*, uom10__reference *, const char*);
SOAP_FMAC1 uom10__reference * SOAP_FMAC2 soap_instantiate_uom10__reference(struct soap*, int, const char*, const char*, size_t*);

inline uom10__reference * soap_new_uom10__reference(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__reference(soap, n, NULL, NULL, NULL);
}

inline uom10__reference * soap_new_req_uom10__reference(
	struct soap *soap,
	const std::string& ID,
	const std::string& description)
{
	uom10__reference *_p = gsoap_uom1_0::soap_new_uom10__reference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__reference::ID = ID;
		_p->uom10__reference::description = description;
	}
	return _p;
}

inline uom10__reference * soap_new_set_uom10__reference(
	struct soap *soap,
	const std::string& ID,
	const std::string& description)
{
	uom10__reference *_p = gsoap_uom1_0::soap_new_uom10__reference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__reference::ID = ID;
		_p->uom10__reference::description = description;
	}
	return _p;
}

inline int soap_write_uom10__reference(struct soap *soap, uom10__reference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:reference", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__reference ? "uom10:reference" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__reference(struct soap *soap, const char *URL, uom10__reference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:reference", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__reference ? "uom10:reference" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__reference(struct soap *soap, const char *URL, uom10__reference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:reference", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__reference ? "uom10:reference" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__reference(struct soap *soap, const char *URL, uom10__reference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:reference", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__reference ? "uom10:reference" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__reference * SOAP_FMAC4 soap_get_uom10__reference(struct soap*, uom10__reference *, const char*, const char*);

inline int soap_read_uom10__reference(struct soap *soap, uom10__reference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__reference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__reference(struct soap *soap, const char *URL, uom10__reference *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__reference(struct soap *soap, uom10__reference *p)
{
	if (gsoap_uom1_0::soap_read_uom10__reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__referenceSet(struct soap*, const char*, int, const uom10__referenceSet *, const char*);
SOAP_FMAC3 uom10__referenceSet * SOAP_FMAC4 soap_in_uom10__referenceSet(struct soap*, const char*, uom10__referenceSet *, const char*);
SOAP_FMAC1 uom10__referenceSet * SOAP_FMAC2 soap_instantiate_uom10__referenceSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__referenceSet * soap_new_uom10__referenceSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__referenceSet(soap, n, NULL, NULL, NULL);
}

inline uom10__referenceSet * soap_new_req_uom10__referenceSet(
	struct soap *soap,
	const std::vector<uom10__reference *> & reference,
	const std::string& version)
{
	uom10__referenceSet *_p = gsoap_uom1_0::soap_new_uom10__referenceSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__referenceSet::reference = reference;
		_p->uom10__referenceSet::version = version;
	}
	return _p;
}

inline uom10__referenceSet * soap_new_set_uom10__referenceSet(
	struct soap *soap,
	const std::vector<uom10__reference *> & reference,
	const std::string& version)
{
	uom10__referenceSet *_p = gsoap_uom1_0::soap_new_uom10__referenceSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__referenceSet::reference = reference;
		_p->uom10__referenceSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__referenceSet(struct soap *soap, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet ? "uom10:referenceSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet ? "uom10:referenceSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet ? "uom10:referenceSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:referenceSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__referenceSet ? "uom10:referenceSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__referenceSet * SOAP_FMAC4 soap_get_uom10__referenceSet(struct soap*, uom10__referenceSet *, const char*, const char*);

inline int soap_read_uom10__referenceSet(struct soap *soap, uom10__referenceSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__referenceSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__referenceSet(struct soap *soap, const char *URL, uom10__referenceSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__referenceSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__referenceSet(struct soap *soap, uom10__referenceSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__referenceSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unit(struct soap*, const char*, int, const uom10__unit *, const char*);
SOAP_FMAC3 uom10__unit * SOAP_FMAC4 soap_in_uom10__unit(struct soap*, const char*, uom10__unit *, const char*);
SOAP_FMAC1 uom10__unit * SOAP_FMAC2 soap_instantiate_uom10__unit(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unit * soap_new_uom10__unit(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unit(soap, n, NULL, NULL, NULL);
}

inline uom10__unit * soap_new_req_uom10__unit(
	struct soap *soap,
	const std::string& symbol,
	const std::string& name,
	const std::string& dimension,
	bool isSI,
	const std::string& category)
{
	uom10__unit *_p = gsoap_uom1_0::soap_new_uom10__unit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unit::symbol = symbol;
		_p->uom10__unit::name = name;
		_p->uom10__unit::dimension = dimension;
		_p->uom10__unit::isSI = isSI;
		_p->uom10__unit::category = category;
	}
	return _p;
}

inline uom10__unit * soap_new_set_uom10__unit(
	struct soap *soap,
	const std::string& symbol,
	const std::string& name,
	const std::string& dimension,
	bool isSI,
	const std::string& category,
	uom10__emptyElement *isBase,
	std::string *baseUnit,
	std::string *conversionRef,
	bool *isExact,
	std::string *A,
	std::string *B,
	std::string *C,
	std::string *D,
	std::string *underlyingDef,
	std::string *description)
{
	uom10__unit *_p = gsoap_uom1_0::soap_new_uom10__unit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unit::symbol = symbol;
		_p->uom10__unit::name = name;
		_p->uom10__unit::dimension = dimension;
		_p->uom10__unit::isSI = isSI;
		_p->uom10__unit::category = category;
		_p->uom10__unit::isBase = isBase;
		_p->uom10__unit::baseUnit = baseUnit;
		_p->uom10__unit::conversionRef = conversionRef;
		_p->uom10__unit::isExact = isExact;
		_p->uom10__unit::A = A;
		_p->uom10__unit::B = B;
		_p->uom10__unit::C = C;
		_p->uom10__unit::D = D;
		_p->uom10__unit::underlyingDef = underlyingDef;
		_p->uom10__unit::description = description;
	}
	return _p;
}

inline int soap_write_uom10__unit(struct soap *soap, uom10__unit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unit ? "uom10:unit" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unit(struct soap *soap, const char *URL, uom10__unit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unit ? "uom10:unit" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unit(struct soap *soap, const char *URL, uom10__unit const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unit ? "uom10:unit" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unit(struct soap *soap, const char *URL, uom10__unit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unit", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unit ? "uom10:unit" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unit * SOAP_FMAC4 soap_get_uom10__unit(struct soap*, uom10__unit *, const char*, const char*);

inline int soap_read_uom10__unit(struct soap *soap, uom10__unit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unit(struct soap *soap, const char *URL, uom10__unit *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unit(struct soap *soap, uom10__unit *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitSet(struct soap*, const char*, int, const uom10__unitSet *, const char*);
SOAP_FMAC3 uom10__unitSet * SOAP_FMAC4 soap_in_uom10__unitSet(struct soap*, const char*, uom10__unitSet *, const char*);
SOAP_FMAC1 uom10__unitSet * SOAP_FMAC2 soap_instantiate_uom10__unitSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitSet * soap_new_uom10__unitSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitSet(soap, n, NULL, NULL, NULL);
}

inline uom10__unitSet * soap_new_req_uom10__unitSet(
	struct soap *soap,
	const std::vector<uom10__unit *> & unit,
	const std::string& version)
{
	uom10__unitSet *_p = gsoap_uom1_0::soap_new_uom10__unitSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitSet::unit = unit;
		_p->uom10__unitSet::version = version;
	}
	return _p;
}

inline uom10__unitSet * soap_new_set_uom10__unitSet(
	struct soap *soap,
	const std::vector<uom10__unit *> & unit,
	const std::string& version)
{
	uom10__unitSet *_p = gsoap_uom1_0::soap_new_uom10__unitSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitSet::unit = unit;
		_p->uom10__unitSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__unitSet(struct soap *soap, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitSet ? "uom10:unitSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitSet ? "uom10:unitSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitSet ? "uom10:unitSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitSet ? "uom10:unitSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitSet * SOAP_FMAC4 soap_get_uom10__unitSet(struct soap*, uom10__unitSet *, const char*, const char*);

inline int soap_read_uom10__unitSet(struct soap *soap, uom10__unitSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitSet(struct soap *soap, const char *URL, uom10__unitSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitSet(struct soap *soap, uom10__unitSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__quantityClass(struct soap*, const char*, int, const uom10__quantityClass *, const char*);
SOAP_FMAC3 uom10__quantityClass * SOAP_FMAC4 soap_in_uom10__quantityClass(struct soap*, const char*, uom10__quantityClass *, const char*);
SOAP_FMAC1 uom10__quantityClass * SOAP_FMAC2 soap_instantiate_uom10__quantityClass(struct soap*, int, const char*, const char*, size_t*);

inline uom10__quantityClass * soap_new_uom10__quantityClass(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__quantityClass(soap, n, NULL, NULL, NULL);
}

inline uom10__quantityClass * soap_new_req_uom10__quantityClass(
	struct soap *soap,
	const std::string& name,
	const std::string& dimension,
	const std::string& baseForConversion,
	const std::vector<std::string> & memberUnit)
{
	uom10__quantityClass *_p = gsoap_uom1_0::soap_new_uom10__quantityClass(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__quantityClass::name = name;
		_p->uom10__quantityClass::dimension = dimension;
		_p->uom10__quantityClass::baseForConversion = baseForConversion;
		_p->uom10__quantityClass::memberUnit = memberUnit;
	}
	return _p;
}

inline uom10__quantityClass * soap_new_set_uom10__quantityClass(
	struct soap *soap,
	const std::string& name,
	const std::string& dimension,
	const std::string& baseForConversion,
	std::string *alternativeBase,
	std::string *description,
	const std::vector<std::string> & memberUnit)
{
	uom10__quantityClass *_p = gsoap_uom1_0::soap_new_uom10__quantityClass(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__quantityClass::name = name;
		_p->uom10__quantityClass::dimension = dimension;
		_p->uom10__quantityClass::baseForConversion = baseForConversion;
		_p->uom10__quantityClass::alternativeBase = alternativeBase;
		_p->uom10__quantityClass::description = description;
		_p->uom10__quantityClass::memberUnit = memberUnit;
	}
	return _p;
}

inline int soap_write_uom10__quantityClass(struct soap *soap, uom10__quantityClass const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass ? "uom10:quantityClass" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__quantityClass(struct soap *soap, const char *URL, uom10__quantityClass const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass ? "uom10:quantityClass" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__quantityClass(struct soap *soap, const char *URL, uom10__quantityClass const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass ? "uom10:quantityClass" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__quantityClass(struct soap *soap, const char *URL, uom10__quantityClass const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClass", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClass ? "uom10:quantityClass" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__quantityClass * SOAP_FMAC4 soap_get_uom10__quantityClass(struct soap*, uom10__quantityClass *, const char*, const char*);

inline int soap_read_uom10__quantityClass(struct soap *soap, uom10__quantityClass *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__quantityClass(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__quantityClass(struct soap *soap, const char *URL, uom10__quantityClass *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__quantityClass(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__quantityClass(struct soap *soap, uom10__quantityClass *p)
{
	if (gsoap_uom1_0::soap_read_uom10__quantityClass(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__quantityClassSet(struct soap*, const char*, int, const uom10__quantityClassSet *, const char*);
SOAP_FMAC3 uom10__quantityClassSet * SOAP_FMAC4 soap_in_uom10__quantityClassSet(struct soap*, const char*, uom10__quantityClassSet *, const char*);
SOAP_FMAC1 uom10__quantityClassSet * SOAP_FMAC2 soap_instantiate_uom10__quantityClassSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__quantityClassSet * soap_new_uom10__quantityClassSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__quantityClassSet(soap, n, NULL, NULL, NULL);
}

inline uom10__quantityClassSet * soap_new_req_uom10__quantityClassSet(
	struct soap *soap,
	const std::vector<uom10__quantityClass *> & quantityClass,
	const std::string& version)
{
	uom10__quantityClassSet *_p = gsoap_uom1_0::soap_new_uom10__quantityClassSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__quantityClassSet::quantityClass = quantityClass;
		_p->uom10__quantityClassSet::version = version;
	}
	return _p;
}

inline uom10__quantityClassSet * soap_new_set_uom10__quantityClassSet(
	struct soap *soap,
	const std::vector<uom10__quantityClass *> & quantityClass,
	const std::string& version)
{
	uom10__quantityClassSet *_p = gsoap_uom1_0::soap_new_uom10__quantityClassSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__quantityClassSet::quantityClass = quantityClass;
		_p->uom10__quantityClassSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__quantityClassSet(struct soap *soap, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet ? "uom10:quantityClassSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet ? "uom10:quantityClassSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet ? "uom10:quantityClassSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:quantityClassSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__quantityClassSet ? "uom10:quantityClassSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__quantityClassSet * SOAP_FMAC4 soap_get_uom10__quantityClassSet(struct soap*, uom10__quantityClassSet *, const char*, const char*);

inline int soap_read_uom10__quantityClassSet(struct soap *soap, uom10__quantityClassSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__quantityClassSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__quantityClassSet(struct soap *soap, const char *URL, uom10__quantityClassSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__quantityClassSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__quantityClassSet(struct soap *soap, uom10__quantityClassSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__quantityClassSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitDimension(struct soap*, const char*, int, const uom10__unitDimension *, const char*);
SOAP_FMAC3 uom10__unitDimension * SOAP_FMAC4 soap_in_uom10__unitDimension(struct soap*, const char*, uom10__unitDimension *, const char*);
SOAP_FMAC1 uom10__unitDimension * SOAP_FMAC2 soap_instantiate_uom10__unitDimension(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitDimension * soap_new_uom10__unitDimension(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitDimension(soap, n, NULL, NULL, NULL);
}

inline uom10__unitDimension * soap_new_req_uom10__unitDimension(
	struct soap *soap,
	const std::string& name,
	const std::string& dimension,
	const std::string& baseForConversion,
	const std::string& canonicalUnit)
{
	uom10__unitDimension *_p = gsoap_uom1_0::soap_new_uom10__unitDimension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitDimension::name = name;
		_p->uom10__unitDimension::dimension = dimension;
		_p->uom10__unitDimension::baseForConversion = baseForConversion;
		_p->uom10__unitDimension::canonicalUnit = canonicalUnit;
	}
	return _p;
}

inline uom10__unitDimension * soap_new_set_uom10__unitDimension(
	struct soap *soap,
	const std::string& name,
	const std::string& dimension,
	const std::string& baseForConversion,
	const std::string& canonicalUnit,
	std::string *description)
{
	uom10__unitDimension *_p = gsoap_uom1_0::soap_new_uom10__unitDimension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitDimension::name = name;
		_p->uom10__unitDimension::dimension = dimension;
		_p->uom10__unitDimension::baseForConversion = baseForConversion;
		_p->uom10__unitDimension::canonicalUnit = canonicalUnit;
		_p->uom10__unitDimension::description = description;
	}
	return _p;
}

inline int soap_write_uom10__unitDimension(struct soap *soap, uom10__unitDimension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimension", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension ? "uom10:unitDimension" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitDimension(struct soap *soap, const char *URL, uom10__unitDimension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimension", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension ? "uom10:unitDimension" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitDimension(struct soap *soap, const char *URL, uom10__unitDimension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimension", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension ? "uom10:unitDimension" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitDimension(struct soap *soap, const char *URL, uom10__unitDimension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimension", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimension ? "uom10:unitDimension" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitDimension * SOAP_FMAC4 soap_get_uom10__unitDimension(struct soap*, uom10__unitDimension *, const char*, const char*);

inline int soap_read_uom10__unitDimension(struct soap *soap, uom10__unitDimension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitDimension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitDimension(struct soap *soap, const char *URL, uom10__unitDimension *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitDimension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitDimension(struct soap *soap, uom10__unitDimension *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitDimension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__unitDimensionSet(struct soap*, const char*, int, const uom10__unitDimensionSet *, const char*);
SOAP_FMAC3 uom10__unitDimensionSet * SOAP_FMAC4 soap_in_uom10__unitDimensionSet(struct soap*, const char*, uom10__unitDimensionSet *, const char*);
SOAP_FMAC1 uom10__unitDimensionSet * SOAP_FMAC2 soap_instantiate_uom10__unitDimensionSet(struct soap*, int, const char*, const char*, size_t*);

inline uom10__unitDimensionSet * soap_new_uom10__unitDimensionSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__unitDimensionSet(soap, n, NULL, NULL, NULL);
}

inline uom10__unitDimensionSet * soap_new_req_uom10__unitDimensionSet(
	struct soap *soap,
	const std::vector<uom10__unitDimension *> & unitDimension,
	const std::string& version)
{
	uom10__unitDimensionSet *_p = gsoap_uom1_0::soap_new_uom10__unitDimensionSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitDimensionSet::unitDimension = unitDimension;
		_p->uom10__unitDimensionSet::version = version;
	}
	return _p;
}

inline uom10__unitDimensionSet * soap_new_set_uom10__unitDimensionSet(
	struct soap *soap,
	const std::vector<uom10__unitDimension *> & unitDimension,
	const std::string& version)
{
	uom10__unitDimensionSet *_p = gsoap_uom1_0::soap_new_uom10__unitDimensionSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__unitDimensionSet::unitDimension = unitDimension;
		_p->uom10__unitDimensionSet::version = version;
	}
	return _p;
}

inline int soap_write_uom10__unitDimensionSet(struct soap *soap, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet ? "uom10:unitDimensionSet" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet ? "uom10:unitDimensionSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet ? "uom10:unitDimensionSet" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:unitDimensionSet", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__unitDimensionSet ? "uom10:unitDimensionSet" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__unitDimensionSet * SOAP_FMAC4 soap_get_uom10__unitDimensionSet(struct soap*, uom10__unitDimensionSet *, const char*, const char*);

inline int soap_read_uom10__unitDimensionSet(struct soap *soap, uom10__unitDimensionSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__unitDimensionSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__unitDimensionSet(struct soap *soap, const char *URL, uom10__unitDimensionSet *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__unitDimensionSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__unitDimensionSet(struct soap *soap, uom10__unitDimensionSet *p)
{
	if (gsoap_uom1_0::soap_read_uom10__unitDimensionSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__uomDictionary(struct soap*, const char*, int, const uom10__uomDictionary *, const char*);
SOAP_FMAC3 uom10__uomDictionary * SOAP_FMAC4 soap_in_uom10__uomDictionary(struct soap*, const char*, uom10__uomDictionary *, const char*);
SOAP_FMAC1 uom10__uomDictionary * SOAP_FMAC2 soap_instantiate_uom10__uomDictionary(struct soap*, int, const char*, const char*, size_t*);

inline uom10__uomDictionary * soap_new_uom10__uomDictionary(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__uomDictionary(soap, n, NULL, NULL, NULL);
}

inline uom10__uomDictionary * soap_new_req_uom10__uomDictionary(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	uom10__unitDimensionSet *unitDimensionSet,
	uom10__quantityClassSet *quantityClassSet,
	uom10__unitSet *unitSet,
	uom10__referenceSet *referenceSet,
	uom10__prefixSet *prefixSet,
	const std::string& version)
{
	uom10__uomDictionary *_p = gsoap_uom1_0::soap_new_uom10__uomDictionary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__uomDictionary::title = title;
		_p->uom10__uomDictionary::originator = originator;
		_p->uom10__uomDictionary::description = description;
		_p->uom10__uomDictionary::unitDimensionSet = unitDimensionSet;
		_p->uom10__uomDictionary::quantityClassSet = quantityClassSet;
		_p->uom10__uomDictionary::unitSet = unitSet;
		_p->uom10__uomDictionary::referenceSet = referenceSet;
		_p->uom10__uomDictionary::prefixSet = prefixSet;
		_p->uom10__uomDictionary::version = version;
	}
	return _p;
}

inline uom10__uomDictionary * soap_new_set_uom10__uomDictionary(
	struct soap *soap,
	const std::string& title,
	const std::string& originator,
	const std::string& description,
	uom10__unitDimensionSet *unitDimensionSet,
	uom10__quantityClassSet *quantityClassSet,
	uom10__unitSet *unitSet,
	uom10__referenceSet *referenceSet,
	uom10__prefixSet *prefixSet,
	const std::string& version)
{
	uom10__uomDictionary *_p = gsoap_uom1_0::soap_new_uom10__uomDictionary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__uomDictionary::title = title;
		_p->uom10__uomDictionary::originator = originator;
		_p->uom10__uomDictionary::description = description;
		_p->uom10__uomDictionary::unitDimensionSet = unitDimensionSet;
		_p->uom10__uomDictionary::quantityClassSet = quantityClassSet;
		_p->uom10__uomDictionary::unitSet = unitSet;
		_p->uom10__uomDictionary::referenceSet = referenceSet;
		_p->uom10__uomDictionary::prefixSet = prefixSet;
		_p->uom10__uomDictionary::version = version;
	}
	return _p;
}

inline int soap_write_uom10__uomDictionary(struct soap *soap, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary ? "uom10:uomDictionary" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary ? "uom10:uomDictionary" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary ? "uom10:uomDictionary" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomDictionary", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomDictionary ? "uom10:uomDictionary" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__uomDictionary * SOAP_FMAC4 soap_get_uom10__uomDictionary(struct soap*, uom10__uomDictionary *, const char*, const char*);

inline int soap_read_uom10__uomDictionary(struct soap *soap, uom10__uomDictionary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__uomDictionary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__uomDictionary(struct soap *soap, const char *URL, uom10__uomDictionary *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__uomDictionary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__uomDictionary(struct soap *soap, uom10__uomDictionary *p)
{
	if (gsoap_uom1_0::soap_read_uom10__uomDictionary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_uom10__uomAggregate(struct soap*, const char*, int, const uom10__uomAggregate *, const char*);
SOAP_FMAC3 uom10__uomAggregate * SOAP_FMAC4 soap_in_uom10__uomAggregate(struct soap*, const char*, uom10__uomAggregate *, const char*);
SOAP_FMAC1 uom10__uomAggregate * SOAP_FMAC2 soap_instantiate_uom10__uomAggregate(struct soap*, int, const char*, const char*, size_t*);

inline uom10__uomAggregate * soap_new_uom10__uomAggregate(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_uom10__uomAggregate(soap, n, NULL, NULL, NULL);
}

inline uom10__uomAggregate * soap_new_req_uom10__uomAggregate(
	struct soap *soap)
{
	uom10__uomAggregate *_p = gsoap_uom1_0::soap_new_uom10__uomAggregate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline uom10__uomAggregate * soap_new_set_uom10__uomAggregate(
	struct soap *soap,
	uom10__uomDictionary *uomDictionary,
	uom10__integerCodeSet *integerCodeSet,
	const std::vector<uom10__classMappingSet *> & classMappingSet,
	const std::vector<uom10__unitMappingSet *> & unitMappingSet)
{
	uom10__uomAggregate *_p = gsoap_uom1_0::soap_new_uom10__uomAggregate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->uom10__uomAggregate::uomDictionary = uomDictionary;
		_p->uom10__uomAggregate::integerCodeSet = integerCodeSet;
		_p->uom10__uomAggregate::classMappingSet = classMappingSet;
		_p->uom10__uomAggregate::unitMappingSet = unitMappingSet;
	}
	return _p;
}

inline int soap_write_uom10__uomAggregate(struct soap *soap, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate ? "uom10:uomAggregate" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate ? "uom10:uomAggregate" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate ? "uom10:uomAggregate" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "uom10:uomAggregate", p->soap_type() == SOAP_TYPE_gsoap_uom1_0_uom10__uomAggregate ? "uom10:uomAggregate" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 uom10__uomAggregate * SOAP_FMAC4 soap_get_uom10__uomAggregate(struct soap*, uom10__uomAggregate *, const char*, const char*);

inline int soap_read_uom10__uomAggregate(struct soap *soap, uom10__uomAggregate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_uom10__uomAggregate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_uom10__uomAggregate(struct soap *soap, const char *URL, uom10__uomAggregate *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_uom10__uomAggregate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_uom10__uomAggregate(struct soap *soap, uom10__uomAggregate *p)
{
	if (gsoap_uom1_0::soap_read_uom10__uomAggregate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (gsoap_uom1_0::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (gsoap_uom1_0::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (gsoap_uom1_0::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Code(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Code(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Code(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Code(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (gsoap_uom1_0::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = gsoap_uom1_0::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Header(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Header(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Header(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (gsoap_uom1_0::soap_serialize_SOAP_ENV__Header(soap, p), 0) || gsoap_uom1_0::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	gsoap_uom1_0::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (gsoap_uom1_0::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__mapFromToClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__mapFromToClass_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__mapFromToClass(struct soap*, uom10__mapFromToClass *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__mapFromToClass(struct soap*, const char *, int, uom10__mapFromToClass *const*, const char *);
SOAP_FMAC3 uom10__mapFromToClass ** SOAP_FMAC4 soap_in_PointerTouom10__mapFromToClass(struct soap*, const char*, uom10__mapFromToClass **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__mapFromToClass(struct soap*, uom10__mapFromToClass *const*, const char*, const char*);
SOAP_FMAC3 uom10__mapFromToClass ** SOAP_FMAC4 soap_get_PointerTouom10__mapFromToClass(struct soap*, uom10__mapFromToClass **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTostd__string_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__mapFromToUnit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__mapFromToUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__mapFromToUnit(struct soap*, uom10__mapFromToUnit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__mapFromToUnit(struct soap*, const char *, int, uom10__mapFromToUnit *const*, const char *);
SOAP_FMAC3 uom10__mapFromToUnit ** SOAP_FMAC4 soap_in_PointerTouom10__mapFromToUnit(struct soap*, const char*, uom10__mapFromToUnit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__mapFromToUnit(struct soap*, uom10__mapFromToUnit *const*, const char*, const char*);
SOAP_FMAC3 uom10__mapFromToUnit ** SOAP_FMAC4 soap_get_PointerTouom10__mapFromToUnit(struct soap*, uom10__mapFromToUnit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCodeStruct_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCodeStruct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitCodeStruct(struct soap*, uom10__unitCodeStruct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitCodeStruct(struct soap*, const char *, int, uom10__unitCodeStruct *const*, const char *);
SOAP_FMAC3 uom10__unitCodeStruct ** SOAP_FMAC4 soap_in_PointerTouom10__unitCodeStruct(struct soap*, const char*, uom10__unitCodeStruct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitCodeStruct(struct soap*, uom10__unitCodeStruct *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitCodeStruct ** SOAP_FMAC4 soap_get_PointerTouom10__unitCodeStruct(struct soap*, uom10__unitCodeStruct **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitCode(struct soap*, uom10__unitCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitCode(struct soap*, const char *, int, uom10__unitCode *const*, const char *);
SOAP_FMAC3 uom10__unitCode ** SOAP_FMAC4 soap_in_PointerTouom10__unitCode(struct soap*, const char*, uom10__unitCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitCode(struct soap*, uom10__unitCode *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitCode ** SOAP_FMAC4 soap_get_PointerTouom10__unitCode(struct soap*, uom10__unitCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__classCode(struct soap*, uom10__classCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__classCode(struct soap*, const char *, int, uom10__classCode *const*, const char *);
SOAP_FMAC3 uom10__classCode ** SOAP_FMAC4 soap_in_PointerTouom10__classCode(struct soap*, const char*, uom10__classCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__classCode(struct soap*, uom10__classCode *const*, const char*, const char*);
SOAP_FMAC3 uom10__classCode ** SOAP_FMAC4 soap_get_PointerTouom10__classCode(struct soap*, uom10__classCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitCodeSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitCodeSet(struct soap*, uom10__unitCodeSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitCodeSet(struct soap*, const char *, int, uom10__unitCodeSet *const*, const char *);
SOAP_FMAC3 uom10__unitCodeSet ** SOAP_FMAC4 soap_in_PointerTouom10__unitCodeSet(struct soap*, const char*, uom10__unitCodeSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitCodeSet(struct soap*, uom10__unitCodeSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitCodeSet ** SOAP_FMAC4 soap_get_PointerTouom10__unitCodeSet(struct soap*, uom10__unitCodeSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classCodeSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__classCodeSet(struct soap*, uom10__classCodeSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__classCodeSet(struct soap*, const char *, int, uom10__classCodeSet *const*, const char *);
SOAP_FMAC3 uom10__classCodeSet ** SOAP_FMAC4 soap_in_PointerTouom10__classCodeSet(struct soap*, const char*, uom10__classCodeSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__classCodeSet(struct soap*, uom10__classCodeSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__classCodeSet ** SOAP_FMAC4 soap_get_PointerTouom10__classCodeSet(struct soap*, uom10__classCodeSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__nameString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__nameString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__nameString(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__nameString(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTouom10__nameString(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__nameString(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTouom10__nameString(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__prefix_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__prefix_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__prefix(struct soap*, uom10__prefix *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__prefix(struct soap*, const char *, int, uom10__prefix *const*, const char *);
SOAP_FMAC3 uom10__prefix ** SOAP_FMAC4 soap_in_PointerTouom10__prefix(struct soap*, const char*, uom10__prefix **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__prefix(struct soap*, uom10__prefix *const*, const char*, const char*);
SOAP_FMAC3 uom10__prefix ** SOAP_FMAC4 soap_get_PointerTouom10__prefix(struct soap*, uom10__prefix **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__reference_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__reference(struct soap*, uom10__reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__reference(struct soap*, const char *, int, uom10__reference *const*, const char *);
SOAP_FMAC3 uom10__reference ** SOAP_FMAC4 soap_in_PointerTouom10__reference(struct soap*, const char*, uom10__reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__reference(struct soap*, uom10__reference *const*, const char*, const char*);
SOAP_FMAC3 uom10__reference ** SOAP_FMAC4 soap_get_PointerTouom10__reference(struct soap*, uom10__reference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTobool_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__emptyElement_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__emptyElement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__emptyElement(struct soap*, uom10__emptyElement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__emptyElement(struct soap*, const char *, int, uom10__emptyElement *const*, const char *);
SOAP_FMAC3 uom10__emptyElement ** SOAP_FMAC4 soap_in_PointerTouom10__emptyElement(struct soap*, const char*, uom10__emptyElement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__emptyElement(struct soap*, uom10__emptyElement *const*, const char*, const char*);
SOAP_FMAC3 uom10__emptyElement ** SOAP_FMAC4 soap_get_PointerTouom10__emptyElement(struct soap*, uom10__emptyElement **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unit(struct soap*, uom10__unit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unit(struct soap*, const char *, int, uom10__unit *const*, const char *);
SOAP_FMAC3 uom10__unit ** SOAP_FMAC4 soap_in_PointerTouom10__unit(struct soap*, const char*, uom10__unit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unit(struct soap*, uom10__unit *const*, const char*, const char*);
SOAP_FMAC3 uom10__unit ** SOAP_FMAC4 soap_get_PointerTouom10__unit(struct soap*, uom10__unit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__symbolString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__symbolString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__symbolString(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__symbolString(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTouom10__symbolString(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__symbolString(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTouom10__symbolString(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__quantityClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__quantityClass_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__quantityClass(struct soap*, uom10__quantityClass *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__quantityClass(struct soap*, const char *, int, uom10__quantityClass *const*, const char *);
SOAP_FMAC3 uom10__quantityClass ** SOAP_FMAC4 soap_in_PointerTouom10__quantityClass(struct soap*, const char*, uom10__quantityClass **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__quantityClass(struct soap*, uom10__quantityClass *const*, const char*, const char*);
SOAP_FMAC3 uom10__quantityClass ** SOAP_FMAC4 soap_get_PointerTouom10__quantityClass(struct soap*, uom10__quantityClass **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__collapsedNonEmptyString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__collapsedNonEmptyString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__collapsedNonEmptyString(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__collapsedNonEmptyString(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTouom10__collapsedNonEmptyString(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__collapsedNonEmptyString(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTouom10__collapsedNonEmptyString(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitDimension_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitDimension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitDimension(struct soap*, uom10__unitDimension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitDimension(struct soap*, const char *, int, uom10__unitDimension *const*, const char *);
SOAP_FMAC3 uom10__unitDimension ** SOAP_FMAC4 soap_in_PointerTouom10__unitDimension(struct soap*, const char*, uom10__unitDimension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitDimension(struct soap*, uom10__unitDimension *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitDimension ** SOAP_FMAC4 soap_get_PointerTouom10__unitDimension(struct soap*, uom10__unitDimension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__prefixSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__prefixSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__prefixSet(struct soap*, uom10__prefixSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__prefixSet(struct soap*, const char *, int, uom10__prefixSet *const*, const char *);
SOAP_FMAC3 uom10__prefixSet ** SOAP_FMAC4 soap_in_PointerTouom10__prefixSet(struct soap*, const char*, uom10__prefixSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__prefixSet(struct soap*, uom10__prefixSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__prefixSet ** SOAP_FMAC4 soap_get_PointerTouom10__prefixSet(struct soap*, uom10__prefixSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__referenceSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__referenceSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__referenceSet(struct soap*, uom10__referenceSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__referenceSet(struct soap*, const char *, int, uom10__referenceSet *const*, const char *);
SOAP_FMAC3 uom10__referenceSet ** SOAP_FMAC4 soap_in_PointerTouom10__referenceSet(struct soap*, const char*, uom10__referenceSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__referenceSet(struct soap*, uom10__referenceSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__referenceSet ** SOAP_FMAC4 soap_get_PointerTouom10__referenceSet(struct soap*, uom10__referenceSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitSet(struct soap*, uom10__unitSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitSet(struct soap*, const char *, int, uom10__unitSet *const*, const char *);
SOAP_FMAC3 uom10__unitSet ** SOAP_FMAC4 soap_in_PointerTouom10__unitSet(struct soap*, const char*, uom10__unitSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitSet(struct soap*, uom10__unitSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitSet ** SOAP_FMAC4 soap_get_PointerTouom10__unitSet(struct soap*, uom10__unitSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__quantityClassSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__quantityClassSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__quantityClassSet(struct soap*, uom10__quantityClassSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__quantityClassSet(struct soap*, const char *, int, uom10__quantityClassSet *const*, const char *);
SOAP_FMAC3 uom10__quantityClassSet ** SOAP_FMAC4 soap_in_PointerTouom10__quantityClassSet(struct soap*, const char*, uom10__quantityClassSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__quantityClassSet(struct soap*, uom10__quantityClassSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__quantityClassSet ** SOAP_FMAC4 soap_get_PointerTouom10__quantityClassSet(struct soap*, uom10__quantityClassSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitDimensionSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitDimensionSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitDimensionSet(struct soap*, uom10__unitDimensionSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitDimensionSet(struct soap*, const char *, int, uom10__unitDimensionSet *const*, const char *);
SOAP_FMAC3 uom10__unitDimensionSet ** SOAP_FMAC4 soap_in_PointerTouom10__unitDimensionSet(struct soap*, const char*, uom10__unitDimensionSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitDimensionSet(struct soap*, uom10__unitDimensionSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitDimensionSet ** SOAP_FMAC4 soap_get_PointerTouom10__unitDimensionSet(struct soap*, uom10__unitDimensionSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__unitMappingSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__unitMappingSet(struct soap*, uom10__unitMappingSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__unitMappingSet(struct soap*, const char *, int, uom10__unitMappingSet *const*, const char *);
SOAP_FMAC3 uom10__unitMappingSet ** SOAP_FMAC4 soap_in_PointerTouom10__unitMappingSet(struct soap*, const char*, uom10__unitMappingSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__unitMappingSet(struct soap*, uom10__unitMappingSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__unitMappingSet ** SOAP_FMAC4 soap_get_PointerTouom10__unitMappingSet(struct soap*, uom10__unitMappingSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__classMappingSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__classMappingSet(struct soap*, uom10__classMappingSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__classMappingSet(struct soap*, const char *, int, uom10__classMappingSet *const*, const char *);
SOAP_FMAC3 uom10__classMappingSet ** SOAP_FMAC4 soap_in_PointerTouom10__classMappingSet(struct soap*, const char*, uom10__classMappingSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__classMappingSet(struct soap*, uom10__classMappingSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__classMappingSet ** SOAP_FMAC4 soap_get_PointerTouom10__classMappingSet(struct soap*, uom10__classMappingSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__integerCodeSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__integerCodeSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__integerCodeSet(struct soap*, uom10__integerCodeSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__integerCodeSet(struct soap*, const char *, int, uom10__integerCodeSet *const*, const char *);
SOAP_FMAC3 uom10__integerCodeSet ** SOAP_FMAC4 soap_in_PointerTouom10__integerCodeSet(struct soap*, const char*, uom10__integerCodeSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__integerCodeSet(struct soap*, uom10__integerCodeSet *const*, const char*, const char*);
SOAP_FMAC3 uom10__integerCodeSet ** SOAP_FMAC4 soap_get_PointerTouom10__integerCodeSet(struct soap*, uom10__integerCodeSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_PointerTouom10__uomDictionary_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_PointerTouom10__uomDictionary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTouom10__uomDictionary(struct soap*, uom10__uomDictionary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTouom10__uomDictionary(struct soap*, const char *, int, uom10__uomDictionary *const*, const char *);
SOAP_FMAC3 uom10__uomDictionary ** SOAP_FMAC4 soap_in_PointerTouom10__uomDictionary(struct soap*, const char*, uom10__uomDictionary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTouom10__uomDictionary(struct soap*, uom10__uomDictionary *const*, const char*, const char*);
SOAP_FMAC3 uom10__uomDictionary ** SOAP_FMAC4 soap_get_PointerTouom10__uomDictionary(struct soap*, uom10__uomDictionary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0__QName_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put__QName(soap, p, "QName", "xsd:QName") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put__QName(soap, p, "QName", "xsd:QName") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put__QName(soap, p, "QName", "xsd:QName") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put__QName(soap, p, "QName", "xsd:QName") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (gsoap_uom1_0::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0__XML_DEFINED
#define SOAP_TYPE_gsoap_uom1_0__XML_DEFINED
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_string_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || gsoap_uom1_0::soap_put_string(soap, p, "string", "xsd:string") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_string(soap, p, "string", "xsd:string") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_string(soap, p, "string", "xsd:string") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || gsoap_uom1_0::soap_put_string(soap, p, "string", "xsd:string") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || gsoap_uom1_0::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || gsoap_uom1_0::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (gsoap_uom1_0::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__mapFromToClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__mapFromToClass_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap*, std::vector<uom10__mapFromToClass *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap*, const std::vector<uom10__mapFromToClass *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap*, const char*, int, const std::vector<uom10__mapFromToClass *> *, const char*);
SOAP_FMAC3 std::vector<uom10__mapFromToClass *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap*, const char*, std::vector<uom10__mapFromToClass *> *, const char*);
SOAP_FMAC1 std::vector<uom10__mapFromToClass *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__mapFromToClass *>  * soap_new_std__vectorTemplateOfPointerTouom10__mapFromToClass(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__mapFromToClass(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__mapFromToUnit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__mapFromToUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap*, std::vector<uom10__mapFromToUnit *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap*, const std::vector<uom10__mapFromToUnit *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap*, const char*, int, const std::vector<uom10__mapFromToUnit *> *, const char*);
SOAP_FMAC3 std::vector<uom10__mapFromToUnit *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap*, const char*, std::vector<uom10__mapFromToUnit *> *, const char*);
SOAP_FMAC1 std::vector<uom10__mapFromToUnit *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__mapFromToUnit *>  * soap_new_std__vectorTemplateOfPointerTouom10__mapFromToUnit(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__mapFromToUnit(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__unitCode(struct soap*, std::vector<uom10__unitCode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__unitCode(struct soap*, const std::vector<uom10__unitCode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__unitCode(struct soap*, const char*, int, const std::vector<uom10__unitCode *> *, const char*);
SOAP_FMAC3 std::vector<uom10__unitCode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__unitCode(struct soap*, const char*, std::vector<uom10__unitCode *> *, const char*);
SOAP_FMAC1 std::vector<uom10__unitCode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__unitCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__unitCode *>  * soap_new_std__vectorTemplateOfPointerTouom10__unitCode(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__unitCode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__classCode_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__classCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__classCode(struct soap*, std::vector<uom10__classCode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__classCode(struct soap*, const std::vector<uom10__classCode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__classCode(struct soap*, const char*, int, const std::vector<uom10__classCode *> *, const char*);
SOAP_FMAC3 std::vector<uom10__classCode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__classCode(struct soap*, const char*, std::vector<uom10__classCode *> *, const char*);
SOAP_FMAC1 std::vector<uom10__classCode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__classCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__classCode *>  * soap_new_std__vectorTemplateOfPointerTouom10__classCode(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__classCode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__prefix_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__prefix_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__prefix(struct soap*, std::vector<uom10__prefix *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__prefix(struct soap*, const std::vector<uom10__prefix *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__prefix(struct soap*, const char*, int, const std::vector<uom10__prefix *> *, const char*);
SOAP_FMAC3 std::vector<uom10__prefix *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__prefix(struct soap*, const char*, std::vector<uom10__prefix *> *, const char*);
SOAP_FMAC1 std::vector<uom10__prefix *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__prefix(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__prefix *>  * soap_new_std__vectorTemplateOfPointerTouom10__prefix(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__prefix(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__reference_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__reference(struct soap*, std::vector<uom10__reference *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__reference(struct soap*, const std::vector<uom10__reference *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__reference(struct soap*, const char*, int, const std::vector<uom10__reference *> *, const char*);
SOAP_FMAC3 std::vector<uom10__reference *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__reference(struct soap*, const char*, std::vector<uom10__reference *> *, const char*);
SOAP_FMAC1 std::vector<uom10__reference *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__reference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__reference *>  * soap_new_std__vectorTemplateOfPointerTouom10__reference(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__reference(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unit_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__unit(struct soap*, std::vector<uom10__unit *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__unit(struct soap*, const std::vector<uom10__unit *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__unit(struct soap*, const char*, int, const std::vector<uom10__unit *> *, const char*);
SOAP_FMAC3 std::vector<uom10__unit *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__unit(struct soap*, const char*, std::vector<uom10__unit *> *, const char*);
SOAP_FMAC1 std::vector<uom10__unit *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__unit(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__unit *>  * soap_new_std__vectorTemplateOfPointerTouom10__unit(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__unit(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfuom10__symbolString_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfuom10__symbolString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfuom10__symbolString(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfuom10__symbolString(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfuom10__symbolString(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfuom10__symbolString(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfuom10__symbolString(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfuom10__symbolString(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfuom10__symbolString(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__quantityClass_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__quantityClass_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap*, std::vector<uom10__quantityClass *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap*, const std::vector<uom10__quantityClass *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap*, const char*, int, const std::vector<uom10__quantityClass *> *, const char*);
SOAP_FMAC3 std::vector<uom10__quantityClass *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap*, const char*, std::vector<uom10__quantityClass *> *, const char*);
SOAP_FMAC1 std::vector<uom10__quantityClass *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__quantityClass *>  * soap_new_std__vectorTemplateOfPointerTouom10__quantityClass(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__quantityClass(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitDimension_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitDimension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap*, std::vector<uom10__unitDimension *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap*, const std::vector<uom10__unitDimension *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap*, const char*, int, const std::vector<uom10__unitDimension *> *, const char*);
SOAP_FMAC3 std::vector<uom10__unitDimension *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap*, const char*, std::vector<uom10__unitDimension *> *, const char*);
SOAP_FMAC1 std::vector<uom10__unitDimension *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__unitDimension *>  * soap_new_std__vectorTemplateOfPointerTouom10__unitDimension(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__unitDimension(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__unitMappingSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap*, std::vector<uom10__unitMappingSet *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap*, const std::vector<uom10__unitMappingSet *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap*, const char*, int, const std::vector<uom10__unitMappingSet *> *, const char*);
SOAP_FMAC3 std::vector<uom10__unitMappingSet *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap*, const char*, std::vector<uom10__unitMappingSet *> *, const char*);
SOAP_FMAC1 std::vector<uom10__unitMappingSet *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__unitMappingSet *>  * soap_new_std__vectorTemplateOfPointerTouom10__unitMappingSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__unitMappingSet(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__classMappingSet_DEFINED
#define SOAP_TYPE_gsoap_uom1_0_std__vectorTemplateOfPointerTouom10__classMappingSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap*, std::vector<uom10__classMappingSet *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap*, const std::vector<uom10__classMappingSet *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap*, const char*, int, const std::vector<uom10__classMappingSet *> *, const char*);
SOAP_FMAC3 std::vector<uom10__classMappingSet *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap*, const char*, std::vector<uom10__classMappingSet *> *, const char*);
SOAP_FMAC1 std::vector<uom10__classMappingSet *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<uom10__classMappingSet *>  * soap_new_std__vectorTemplateOfPointerTouom10__classMappingSet(struct soap *soap, int n = -1)
{
	return gsoap_uom1_0::soap_instantiate_std__vectorTemplateOfPointerTouom10__classMappingSet(soap, n, NULL, NULL, NULL);
}
#endif

} // namespace gsoap_uom1_0


#endif

/* End of gsoap_uom1_0H.h */
